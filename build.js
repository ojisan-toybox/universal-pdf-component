/*! For license information please see build.js.LICENSE.txt */
(function(){var __webpack_modules__={9469:function(t,e,r){"use strict";var n,i=r(9748),o=function(t){if(t&&t.__esModule)return t;var e=Object.create(null);return t&&Object.keys(t).forEach((function(r){if("default"!==r){var n=Object.getOwnPropertyDescriptor(t,r);Object.defineProperty(e,r,n.get?n:{enumerable:!0,get:function(){return t[r]}})}})),e.default=t,Object.freeze(e)}(r(9299));!function(t){t[t.Text=1]="Text",t[t.Link=2]="Link",t[t.FreeText=3]="FreeText",t[t.Line=4]="Line",t[t.Square=5]="Square",t[t.Circle=6]="Circle",t[t.Polygon=7]="Polygon",t[t.Polyline=8]="Polyline",t[t.Highlight=9]="Highlight",t[t.Underline=10]="Underline",t[t.Squiggly=11]="Squiggly",t[t.StrikeOut=12]="StrikeOut",t[t.Stamp=13]="Stamp",t[t.Caret=14]="Caret",t[t.Ink=15]="Ink",t[t.Popup=16]="Popup",t[t.FileAttachment=17]="FileAttachment"}(n||(n={}));var a,s=n,c=i.createContext({prefixClass:"rpv-core"}),l=function(t){var e=t.children,r=t.size,n=void 0===r?24:r,o=i.useContext(c),a=(n||24)+"px";return i.createElement("svg",{className:o.prefixClass+"-icon",height:a,viewBox:"0 0 24 24",width:a},e)},u=function(){return i.createElement(l,{size:16},i.createElement("path",{d:"M23.5,0.499l-16.5,23l-6.5-6.5"}))},h=function(){var t=i.useContext(c);return i.createElement("svg",{className:t.prefixClass+"-spinner",width:"64px",height:"64px",viewBox:"0 0 32 32"},i.createElement("circle",{className:t.prefixClass+"-spinner-circle",cx:"16",cy:"16",r:"12",strokeDasharray:2*Math.PI*9}))},f=function(t){var e=t.children,r=t.threshold,n=t.onVisibilityChanged,o=i.useRef(null);return i.useLayoutEffect((function(){var t=new IntersectionObserver((function(t){t.forEach((function(t){var e=t.isIntersecting,r=t.intersectionRatio;n({isVisible:e,ratio:r})}))}),{threshold:r||0}),e=o.current;if(e)return t.observe(e),function(){t.unobserve(e)}}),[]),i.createElement("div",{ref:o},e)},d=i.createContext({}),p={core:{askingPassword:{requirePasswordToOpen:"This document requires a password to open",submit:"Submit"},wrongPassword:{submit:"Submit",tryAgain:"The password is wrong. Please try again"}}},g=function(t){var e=t.children,r=t.localization,n=p,o=i.useState(r||n),a=o[0],s=o[1];return i.createElement(d.Provider,{value:a},e((function(t){return s(t)})))};!function(t){t.Close="Close",t.Open="Open",t.Toggle="Toggle"}(a||(a={}));var m,v=function(){var t=i.useState(!1),e=t[0],r=t[1];return{opened:e,toggle:function(t){switch(t){case a.Close:r(!1);break;case a.Open:r(!0);break;case a.Toggle:default:r((function(t){return!t}))}}}};!function(t){t.TopLeft="TOP_LEFT",t.TopCenter="TOP_CENTER",t.TopRight="TOP_RIGHT",t.RightTop="RIGHT_TOP",t.RightCenter="RIGHT_CENTER",t.RightBottom="RIGHT_BOTTOM",t.BottomLeft="BOTTOM_LEFT",t.BottomCenter="BOTTOM_CENTER",t.BottomRight="BOTTOM_RIGHT",t.LeftTop="LEFT_TOP",t.LeftCenter="LEFT_CENTER",t.LeftBottom="LEFT_BOTTOM"}(m||(m={}));var y;!function(t){t.ActualSize="ActualSize",t.PageFit="PageFit",t.PageWidth="PageWidth"}(y||(y={}));var _=y,b=function(t,e){return(b=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)e.hasOwnProperty(r)&&(t[r]=e[r])})(t,e)};function A(t,e){function r(){this.constructor=t}b(t,e),t.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)}var x,S=function(){return(S=Object.assign||function(t){for(var e,r=1,n=arguments.length;r<n;r++)for(var i in e=arguments[r])Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i]);return t}).apply(this,arguments)};!function(t){t[t.PreRender=0]="PreRender",t[t.DidRender=1]="DidRender"}(x||(x={}));var w,C=x;!function(t){t[t.Solid=1]="Solid",t[t.Dashed=2]="Dashed",t[t.Beveled=3]="Beveled",t[t.Inset=4]="Inset",t[t.Underline=5]="Underline"}(w||(w={}));var E,k=w,P=new RegExp("^D:(\\d{4})(\\d{2})?(\\d{2})?(\\d{2})?(\\d{2})?(\\d{2})?([Z|+|-])?(\\d{2})?'?(\\d{2})?'?"),R=function(t,e,r,n){var i=parseInt(t,10);return i>=e&&i<=r?i:n},T=function(t){var e=t.annotation,r=i.useContext(c),n="";if(e.modificationDate){var o=function(t){var e=P.exec(t);if(!e)return null;var r=parseInt(e[1],10),n=R(e[2],1,12,1)-1,i=R(e[3],1,31,1),o=R(e[4],0,23,0),a=R(e[5],0,59,0),s=R(e[6],0,59,0),c=e[7]||"Z",l=R(e[8],0,23,0),u=R(e[9],0,59,0);switch(c){case"-":o+=l,a+=u;break;case"+":o-=l,a-=u}return new Date(Date.UTC(r,n,i,o,a,s))}(e.modificationDate);n=o?o.toLocaleDateString()+", "+o.toLocaleTimeString():""}return i.createElement("div",{className:r.prefixClass+"-annotation-popup-wrapper",style:{top:e.annotationType===s.Popup?"":"100%"}},e.title&&i.createElement("div",{className:r.prefixClass+"-annotation-popup-wrapper-header"},i.createElement("div",{className:r.prefixClass+"-annotation-popup-wrapper-title"},e.title),i.createElement("span",{className:r.prefixClass+"-annotation-popup-wrapper-date"},n)),e.contents&&i.createElement("div",{className:r.prefixClass+"-annotation-popup-wrapper-content"},e.contents.split("\n").map((function(t,e){return i.createElement(i.Fragment,{key:e},t,i.createElement("br",null))}))))};!function(t){t.Click="Click",t.Hover="Hover"}(E||(E={}));var O=function(t){var e,r=t.annotation,n=t.children,o=t.ignoreBorder,s=t.hasPopup,c=t.isRenderable,l=t.page,u=t.viewport,h=r.rect,f=function(){var t=v(),e=t.opened,r=t.toggle,n=i.useState(E.Hover),o=n[0],s=n[1];return{opened:e,closeOnHover:function(){o===E.Hover&&r(a.Close)},openOnHover:function(){o===E.Hover&&r(a.Open)},toggleOnClick:function(){switch(o){case E.Click:e&&s(E.Hover),r(a.Toggle);break;case E.Hover:s(E.Click),r(a.Open)}}}}(),d=f.closeOnHover,p=f.opened,g=f.openOnHover,m=f.toggleOnClick,y=(e=[h[0],l.view[3]+l.view[1]-h[1],h[2],l.view[3]+l.view[1]-h[3]],[Math.min(e[0],e[2]),Math.min(e[1],e[3]),Math.max(e[0],e[2]),Math.max(e[1],e[3])]),_=h[2]-h[0],b=h[3]-h[1],A={borderColor:"",borderRadius:"",borderStyle:"",borderWidth:""};if(!o&&r.borderStyle.width>0){switch(r.borderStyle.style){case k.Dashed:A.borderStyle="dashed";break;case k.Solid:A.borderStyle="solid";break;case k.Underline:A=Object.assign({borderBottomStyle:"solid"},A);break;case k.Beveled:case k.Inset:}var x=r.borderStyle.width;A.borderWidth=x+"px",r.borderStyle.style!==k.Underline&&(_-=2*x,b-=2*x);var S=r.borderStyle,w=S.horizontalCornerRadius,C=S.verticalCornerRadius;(w>0||C>0)&&(A.borderRadius=w+"px / "+C+"px"),r.color?A.borderColor="rgb("+(0|r.color[0])+", "+(0|r.color[1])+", "+(0|r.color[2])+")":A.borderWidth="0"}return i.createElement(i.Fragment,null,c&&n({popup:{opened:p,closeOnHover:d,openOnHover:g,toggleOnClick:m},slot:{attrs:{style:Object.assign({height:b+"px",left:y[0]+"px",top:y[1]+"px",transform:"matrix("+u.transform.join(",")+")",transformOrigin:"-"+y[0]+"px -"+y[1]+"px",width:_+"px"},A)},children:i.createElement(i.Fragment,null,s&&p&&i.createElement(T,{annotation:r}))}}))},L=function(t){var e=t.annotation,r=t.page,n=t.viewport,o=i.useContext(c),a=!1===e.hasPopup,s=!!(e.hasPopup||e.title||e.contents);return i.createElement(O,{annotation:e,hasPopup:a,ignoreBorder:!0,isRenderable:s,page:r,viewport:n},(function(t){return i.createElement("div",S({},t.slot.attrs,{className:o.prefixClass+"-annotation "+o.prefixClass+"-annotation-caret","data-annotation-id":e.id,onClick:t.popup.toggleOnClick,onMouseEnter:t.popup.openOnHover,onMouseLeave:t.popup.closeOnHover}),t.slot.children)}))},F=function(t){var e=t.annotation,r=t.page,n=t.viewport,o=i.useContext(c),a=!1===e.hasPopup,s=!!(e.hasPopup||e.title||e.contents),l=e.rect,u=l[2]-l[0],h=l[3]-l[1],f=e.borderStyle.width;return i.createElement(O,{annotation:e,hasPopup:a,ignoreBorder:!0,isRenderable:s,page:r,viewport:n},(function(t){return i.createElement("div",S({},t.slot.attrs,{className:o.prefixClass+"-annotation "+o.prefixClass+"-annotation-circle","data-annotation-id":e.id,onClick:t.popup.toggleOnClick,onMouseEnter:t.popup.openOnHover,onMouseLeave:t.popup.closeOnHover}),i.createElement("svg",{height:h+"px",preserveAspectRatio:"none",version:"1.1",viewBox:"0 0 "+u+" "+h,width:u+"px"},i.createElement("circle",{cy:h/2,fill:"none",rx:u/2-f/2,ry:h/2-f/2,stroke:"transparent",strokeWidth:f||1})),t.slot.children)}))},M=function(t){var e=t.annotation,r=t.page,n=t.viewport,o=i.useContext(c),a=!(!1!==e.hasPopup||!e.title&&!e.contents),s=function(){var t,r,n,i,o=e.file;o&&(t=o.filename,n="string"==typeof(r=o.content)?"":URL.createObjectURL(new Blob([r],{type:""})),(i=document.createElement("a")).style.display="none",i.href=n||t,i.setAttribute("download",function(t){var e=t.split("/").pop();return e?e.split("#")[0].split("?")[0]:t}(t)),document.body.appendChild(i),i.click(),document.body.removeChild(i),n&&URL.revokeObjectURL(n))};return i.createElement(O,{annotation:e,hasPopup:a,ignoreBorder:!0,isRenderable:!0,page:r,viewport:n},(function(t){return i.createElement("div",S({},t.slot.attrs,{className:o.prefixClass+"-annotation "+o.prefixClass+"-annotation-file-attachment","data-annotation-id":e.id,onClick:t.popup.toggleOnClick,onDoubleClick:s,onMouseEnter:t.popup.openOnHover,onMouseLeave:t.popup.closeOnHover}),t.slot.children)}))},I=function(t){var e=t.annotation,r=t.page,n=t.viewport,o=i.useContext(c),a=!1===e.hasPopup,s=!!(e.hasPopup||e.title||e.contents);return i.createElement(O,{annotation:e,hasPopup:a,ignoreBorder:!0,isRenderable:s,page:r,viewport:n},(function(t){return i.createElement("div",S({},t.slot.attrs,{className:o.prefixClass+"-annotation "+o.prefixClass+"-annotation-free-text","data-annotation-id":e.id,onClick:t.popup.toggleOnClick,onMouseEnter:t.popup.openOnHover,onMouseLeave:t.popup.closeOnHover}),t.slot.children)}))},N=function(t){var e=t.annotation,r=t.page,n=t.viewport,o=i.useContext(c),a=!1===e.hasPopup,s=!!(e.hasPopup||e.title||e.contents);return i.createElement(O,{annotation:e,hasPopup:a,ignoreBorder:!0,isRenderable:s,page:r,viewport:n},(function(t){return i.createElement("div",S({},t.slot.attrs,{className:o.prefixClass+"-annotation "+o.prefixClass+"-annotation-highlight","data-annotation-id":e.id,onClick:t.popup.toggleOnClick,onMouseEnter:t.popup.openOnHover,onMouseLeave:t.popup.closeOnHover}),t.slot.children)}))},D=function(t){var e=t.annotation,r=t.page,n=t.viewport,o=i.useContext(c),a=!1===e.hasPopup,s=!!(e.hasPopup||e.title||e.contents),l=e.rect,u=l[2]-l[0],h=l[3]-l[1],f=e.borderStyle.width;return i.createElement(O,{annotation:e,hasPopup:a,ignoreBorder:!0,isRenderable:s,page:r,viewport:n},(function(t){return i.createElement("div",S({},t.slot.attrs,{className:o.prefixClass+"-annotation "+o.prefixClass+"-annotation-ink","data-annotation-id":e.id,onClick:t.popup.toggleOnClick,onMouseEnter:t.popup.openOnHover,onMouseLeave:t.popup.closeOnHover}),e.inkLists&&e.inkLists.length&&i.createElement("svg",{height:h+"px",preserveAspectRatio:"none",version:"1.1",viewBox:"0 0 "+u+" "+h,width:u+"px"},e.inkLists.map((function(t,e){return i.createElement("polyline",{key:e,fill:"none",stroke:"transparent",strokeWidth:f||1,points:t.map((function(t){return t.x-l[0]+","+(l[3]-t.y)})).join(" ")})}))),t.slot.children)}))},j=function(t){var e=t.annotation,r=t.page,n=t.viewport,o=i.useContext(c),a=!1===e.hasPopup,s=!!(e.hasPopup||e.title||e.contents),l=e.rect,u=l[2]-l[0],h=l[3]-l[1],f=e.borderStyle.width;return i.createElement(O,{annotation:e,hasPopup:a,ignoreBorder:!0,isRenderable:s,page:r,viewport:n},(function(t){return i.createElement("div",S({},t.slot.attrs,{className:o.prefixClass+"-annotation "+o.prefixClass+"-annotation-line","data-annotation-id":e.id,onClick:t.popup.toggleOnClick,onMouseEnter:t.popup.openOnHover,onMouseLeave:t.popup.closeOnHover}),i.createElement("svg",{height:h+"px",preserveAspectRatio:"none",version:"1.1",viewBox:"0 0 "+u+" "+h,width:u+"px"},i.createElement("line",{stroke:"transparent",strokeWidth:f||1,x1:l[2]-e.lineCoordinates[0],x2:l[2]-e.lineCoordinates[2],y1:l[3]-e.lineCoordinates[1],y2:l[3]-e.lineCoordinates[3]})),t.slot.children)}))},U=function(t){var e=t.annotation,r=t.doc,n=t.page,o=t.viewport,a=t.onExecuteNamedAction,s=t.onJumpToDest,l=i.useContext(c),u=!!(e.url||e.dest||e.action),h=e.url?{href:e.url,rel:"noopener noreferrer nofollow",target:e.newWindow?"_blank":"",title:e.url}:{href:"",onClick:function(t){t.preventDefault(),e.action?a(e.action):function(t,e){return new Promise((function(r){new Promise((function(r){"string"==typeof e?t.getDestination(e).then((function(t){r(t)})):r(e)})).then((function(e){t.getPageIndex(e[0]).then((function(t){var n=function(t,e){switch(e[1].name){case"XYZ":return{bottomOffset:e[3],pageIndex:t-1,scaleTo:e[4]};case"Fit":return{bottomOffset:0,pageIndex:t-1,scaleTo:_.PageFit};default:return{bottomOffset:0,pageIndex:t-1,scaleTo:1}}}(t,e);r(n)}))}))}))}(r,e.dest).then((function(t){var e=t.pageIndex,r=t.bottomOffset,n=t.scaleTo;s(e+1,r,0,n)}))}};return i.createElement(O,{annotation:e,hasPopup:!1,ignoreBorder:!1,isRenderable:u,page:n,viewport:o},(function(t){return i.createElement("div",S({},t.slot.attrs,{className:l.prefixClass+"-annotation "+l.prefixClass+"-annotation-link","data-annotation-id":e.id}),i.createElement("a",S({},h)))}))},W=function(t){var e=t.annotation,r=t.page,n=t.viewport,o=i.useContext(c),a=!1===e.hasPopup,s=!!(e.hasPopup||e.title||e.contents),l=e.rect,u=l[2]-l[0],h=l[3]-l[1],f=e.borderStyle.width;return i.createElement(O,{annotation:e,hasPopup:a,ignoreBorder:!0,isRenderable:s,page:r,viewport:n},(function(t){return i.createElement("div",S({},t.slot.attrs,{className:o.prefixClass+"-annotation "+o.prefixClass+"-annotation-polygon","data-annotation-id":e.id,onClick:t.popup.toggleOnClick,onMouseEnter:t.popup.openOnHover,onMouseLeave:t.popup.closeOnHover}),e.vertices&&e.vertices.length&&i.createElement("svg",{height:h+"px",preserveAspectRatio:"none",version:"1.1",viewBox:"0 0 "+u+" "+h,width:u+"px"},i.createElement("polygon",{fill:"none",stroke:"transparent",strokeWidth:f||1,points:e.vertices.map((function(t){return t.x-l[0]+","+(l[3]-t.y)})).join(" ")})),t.slot.children)}))},q=function(t){var e=t.annotation,r=t.page,n=t.viewport,o=i.useContext(c),a=!1===e.hasPopup,s=!!(e.hasPopup||e.title||e.contents),l=e.rect,u=l[2]-l[0],h=l[3]-l[1],f=e.borderStyle.width;return i.createElement(O,{annotation:e,hasPopup:a,ignoreBorder:!0,isRenderable:s,page:r,viewport:n},(function(t){return i.createElement("div",S({},t.slot.attrs,{className:o.prefixClass+"-annotation "+o.prefixClass+"-annotation-polyline","data-annotation-id":e.id,onClick:t.popup.toggleOnClick,onMouseEnter:t.popup.openOnHover,onMouseLeave:t.popup.closeOnHover}),e.vertices&&e.vertices.length&&i.createElement("svg",{height:h+"px",preserveAspectRatio:"none",version:"1.1",viewBox:"0 0 "+u+" "+h,width:u+"px"},i.createElement("polyline",{fill:"none",stroke:"transparent",strokeWidth:f||1,points:e.vertices.map((function(t){return t.x-l[0]+","+(l[3]-t.y)})).join(" ")})),t.slot.children)}))},B=function(t){var e=t.annotation,r=t.page,n=t.viewport,o=i.useContext(c),a=!(!e.title&&!e.contents),s=!e.parentType||-1!==["Circle","Ink","Line","Polygon","PolyLine","Square"].indexOf(e.parentType);return i.useLayoutEffect((function(){if(e.parentId){var t=document.querySelector('[data-annotation-id="'+e.parentId+'"]'),r=document.querySelector('[data-annotation-id="'+e.id+'"]');if(t&&r){var n=parseFloat(t.style.left),i=parseFloat(t.style.top)+parseFloat(t.style.height);r.style.left=n+"px",r.style.top=i+"px",r.style.transformOrigin="-"+n+"px -"+i+"px"}}}),[]),i.createElement(O,{annotation:e,hasPopup:s,ignoreBorder:!1,isRenderable:a,page:r,viewport:n},(function(t){return i.createElement("div",S({},t.slot.attrs,{className:o.prefixClass+"-annotation "+o.prefixClass+"-annotation-popup","data-annotation-id":e.id}),i.createElement(T,{annotation:e}))}))},H=function(t){var e=t.annotation,r=t.page,n=t.viewport,o=i.useContext(c),a=!1===e.hasPopup,s=!!(e.hasPopup||e.title||e.contents),l=e.rect,u=l[2]-l[0],h=l[3]-l[1],f=e.borderStyle.width;return i.createElement(O,{annotation:e,hasPopup:a,ignoreBorder:!0,isRenderable:s,page:r,viewport:n},(function(t){return i.createElement("div",S({},t.slot.attrs,{className:o.prefixClass+"-annotation "+o.prefixClass+"-annotation-square","data-annotation-id":e.id,onClick:t.popup.toggleOnClick,onMouseEnter:t.popup.openOnHover,onMouseLeave:t.popup.closeOnHover}),i.createElement("svg",{height:h+"px",preserveAspectRatio:"none",version:"1.1",viewBox:"0 0 "+u+" "+h,width:u+"px"},i.createElement("rect",{height:h-f,fill:"none",stroke:"transparent",strokeWidth:f||1,x:f/2,y:f/2,width:u-f})),t.slot.children)}))},G=function(t){var e=t.annotation,r=t.page,n=t.viewport,o=i.useContext(c),a=!1===e.hasPopup,s=!!(e.hasPopup||e.title||e.contents);return i.createElement(O,{annotation:e,hasPopup:a,ignoreBorder:!0,isRenderable:s,page:r,viewport:n},(function(t){return i.createElement("div",S({},t.slot.attrs,{className:o.prefixClass+"-annotation "+o.prefixClass+"-annotation-squiggly","data-annotation-id":e.id,onClick:t.popup.toggleOnClick,onMouseEnter:t.popup.openOnHover,onMouseLeave:t.popup.closeOnHover}),t.slot.children)}))},z=function(t){var e=t.annotation,r=t.page,n=t.viewport,o=i.useContext(c),a=!1===e.hasPopup,s=!!(e.hasPopup||e.title||e.contents);return i.createElement(O,{annotation:e,hasPopup:a,ignoreBorder:!0,isRenderable:s,page:r,viewport:n},(function(t){return i.createElement("div",S({},t.slot.attrs,{className:o.prefixClass+"-annotation "+o.prefixClass+"-annotation-stamp","data-annotation-id":e.id,onClick:t.popup.toggleOnClick,onMouseEnter:t.popup.openOnHover,onMouseLeave:t.popup.closeOnHover}),t.slot.children)}))},Y=function(t){var e=t.annotation,r=t.page,n=t.viewport,o=i.useContext(c),a=!1===e.hasPopup,s=!!(e.hasPopup||e.title||e.contents);return i.createElement(O,{annotation:e,hasPopup:a,ignoreBorder:!0,isRenderable:s,page:r,viewport:n},(function(t){return i.createElement("div",S({},t.slot.attrs,{className:o.prefixClass+"-annotation "+o.prefixClass+"-annotation-strike-out","data-annotation-id":e.id,onClick:t.popup.toggleOnClick,onMouseEnter:t.popup.openOnHover,onMouseLeave:t.popup.closeOnHover}),t.slot.children)}))},$=function(){return i.createElement(l,{size:16},i.createElement("path",{d:"M.5,16.5a1,1,0,0,0,1,1h2v4l4-4h15a1,1,0,0,0,1-1V3.5a1,1,0,0,0-1-1H1.5a1,1,0,0,0-1,1Z"}),i.createElement("path",{d:"M7.25,9.75A.25.25,0,1,1,7,10a.25.25,0,0,1,.25-.25"}),i.createElement("path",{d:"M12,9.75a.25.25,0,1,1-.25.25A.25.25,0,0,1,12,9.75"}),i.createElement("path",{d:"M16.75,9.75a.25.25,0,1,1-.25.25.25.25,0,0,1,.25-.25"}))},V=function(){return i.createElement(l,{size:16},i.createElement("path",{d:"M0.500 12.001 A11.500 11.500 0 1 0 23.500 12.001 A11.500 11.500 0 1 0 0.500 12.001 Z"}),i.createElement("path",{d:"M6.000 12.001 A6.000 6.000 0 1 0 18.000 12.001 A6.000 6.000 0 1 0 6.000 12.001 Z"}),i.createElement("path",{d:"M21.423 5.406L17.415 9.414"}),i.createElement("path",{d:"M14.587 6.585L18.607 2.565"}),i.createElement("path",{d:"M5.405 21.424L9.413 17.416"}),i.createElement("path",{d:"M6.585 14.588L2.577 18.596"}),i.createElement("path",{d:"M18.602 21.419L14.595 17.412"}),i.createElement("path",{d:"M17.419 14.58L21.428 18.589"}),i.createElement("path",{d:"M2.582 5.399L6.588 9.406"}),i.createElement("path",{d:"M9.421 6.581L5.412 2.572"}))},X=function(){return i.createElement(l,{size:16},i.createElement("path",{d:"M4.000 18.500 A1.500 1.500 0 1 0 7.000 18.500 A1.500 1.500 0 1 0 4.000 18.500 Z"}),i.createElement("path",{d:"M20.5.5l-9.782,9.783a7,7,0,1,0,3,3L17,10h1.5V8.5L19,8h1.5V6.5L21,6h1.5V4.5l1-1V.5Z"}))},K=function(){return i.createElement(l,{size:16},i.createElement("path",{d:"M2.000 2.500 L22.000 2.500 L22.000 23.500 L2.000 23.500 Z"}),i.createElement("path",{d:"M6 4.5L6 0.5"}),i.createElement("path",{d:"M18 4.5L18 0.5"}),i.createElement("path",{d:"M10 4.5L10 0.5"}),i.createElement("path",{d:"M14 4.5L14 0.5"}))},J=function(){return i.createElement(l,{size:16},i.createElement("path",{d:"M17.5 0.498L17.5 23.498"}),i.createElement("path",{d:"M10.5 0.498L10.5 23.498"}),i.createElement("path",{d:"M23.5.5H6.5a6,6,0,0,0,0,12h4"}))},Q=function(){return i.createElement(l,{size:16},i.createElement("path",{d:"M2.5 22.995L12 6.005 21.5 22.995 2.5 22.995z"}))},Z=function(t){var e=t.annotation,r=t.childAnnotation,n=t.page,o=t.viewport,a=i.useContext(c),l=!1===e.hasPopup,h=!!(e.hasPopup||e.title||e.contents),f=e.name?e.name.toLowerCase():"";return i.createElement(O,{annotation:e,hasPopup:l,ignoreBorder:!1,isRenderable:h,page:n,viewport:o},(function(t){return i.createElement(i.Fragment,null,i.createElement("div",S({},t.slot.attrs,{className:a.prefixClass+"-annotation "+a.prefixClass+"-annotation-text","data-annotation-id":e.id,onClick:t.popup.toggleOnClick,onMouseEnter:t.popup.openOnHover,onMouseLeave:t.popup.closeOnHover}),f&&i.createElement("div",{className:a.prefixClass+"-annotation-text-icon"},"check"===f&&i.createElement(u,null),"comment"===f&&i.createElement($,null),"help"===f&&i.createElement(V,null),"insert"===f&&i.createElement(Q,null),"key"===f&&i.createElement(X,null),"note"===f&&i.createElement(K,null),("newparagraph"===f||"paragraph"===f)&&i.createElement(J,null)),t.slot.children),r&&r.annotationType===s.Popup&&t.popup.opened&&i.createElement(B,{annotation:r,page:n,viewport:o}))}))},tt=function(t){var e=t.annotation,r=t.page,n=t.viewport,o=i.useContext(c),a=!1===e.hasPopup,s=!!(e.hasPopup||e.title||e.contents);return i.createElement(O,{annotation:e,hasPopup:a,ignoreBorder:!0,isRenderable:s,page:r,viewport:n},(function(t){return i.createElement("div",S({},t.slot.attrs,{className:o.prefixClass+"-annotation "+o.prefixClass+"-annotation-underline","data-annotation-id":e.id,onClick:t.popup.toggleOnClick,onMouseEnter:t.popup.openOnHover,onMouseLeave:t.popup.closeOnHover}),t.slot.children)}))},et=function(t){var e=t.annotations,r=t.containerRef,n=t.doc,o=t.page,a=t.pageIndex,c=t.plugins,l=t.rotation,u=t.scale,h=t.onExecuteNamedAction,f=t.onJumpToDest,d=o.getViewport({rotation:l,scale:u}).clone({dontFlip:!0}),p=e.filter((function(t){return!t.parentId}));return i.useEffect((function(){var t=r.current;t&&c.forEach((function(e){e.onAnnotationLayerRender&&e.onAnnotationLayerRender({annotations:p,container:t,pageIndex:a,rotation:l,scale:u})}))}),[]),i.createElement(i.Fragment,null,p.map((function(t){var r=e.find((function(e){return e.parentId===t.id}));switch(t.annotationType){case s.Caret:return i.createElement(L,{key:t.id,annotation:t,page:o,viewport:d});case s.Circle:return i.createElement(F,{key:t.id,annotation:t,page:o,viewport:d});case s.FileAttachment:return i.createElement(M,{key:t.id,annotation:t,page:o,viewport:d});case s.FreeText:return i.createElement(I,{key:t.id,annotation:t,page:o,viewport:d});case s.Highlight:return i.createElement(N,{key:t.id,annotation:t,page:o,viewport:d});case s.Ink:return i.createElement(D,{key:t.id,annotation:t,page:o,viewport:d});case s.Line:return i.createElement(j,{key:t.id,annotation:t,page:o,viewport:d});case s.Link:return i.createElement(U,{key:t.id,annotation:t,doc:n,page:o,viewport:d,onExecuteNamedAction:h,onJumpToDest:f});case s.Polygon:return i.createElement(W,{key:t.id,annotation:t,page:o,viewport:d});case s.Polyline:return i.createElement(q,{key:t.id,annotation:t,page:o,viewport:d});case s.Popup:return i.createElement(B,{key:t.id,annotation:t,page:o,viewport:d});case s.Square:return i.createElement(H,{key:t.id,annotation:t,page:o,viewport:d});case s.Squiggly:return i.createElement(G,{key:t.id,annotation:t,page:o,viewport:d});case s.Stamp:return i.createElement(z,{key:t.id,annotation:t,page:o,viewport:d});case s.StrikeOut:return i.createElement(Y,{key:t.id,annotation:t,page:o,viewport:d});case s.Text:return i.createElement(Z,{key:t.id,annotation:t,childAnnotation:r,page:o,viewport:d});case s.Underline:return i.createElement(tt,{key:t.id,annotation:t,page:o,viewport:d});default:return i.createElement(i.Fragment,{key:t.id})}})))},rt=function(t){var e=t.page,r=t.renderAnnotations,n=i.useState({loading:!0,annotations:[]}),o=n[0],a=n[1];return i.useEffect((function(){e.getAnnotations({intent:"display"}).then((function(t){a({loading:!1,annotations:t})}))}),[]),o.loading?i.createElement(i.Fragment,null):r(o.annotations)},nt=function(t){var e=t.doc,r=t.page,n=t.pageIndex,o=t.plugins,a=t.rotation,s=t.scale,l=t.onExecuteNamedAction,u=t.onJumpToDest,h=i.useContext(c),f=i.createRef();return i.createElement("div",{ref:f,className:h.prefixClass+"-annotation-layer"},i.createElement(rt,{page:r,renderAnnotations:function(t){return i.createElement(et,{annotations:t,containerRef:f,doc:e,page:r,pageIndex:n,plugins:o,rotation:a,scale:s,onExecuteNamedAction:l,onJumpToDest:u})}}))},it=function(t){var e=t.callback,r=t.children,n=t.rotation,o=t.scale;return i.useLayoutEffect((function(){e()}),[n,o]),i.createElement(i.Fragment,null,r)},ot=function(t){var e=t.height,r=t.page,n=t.pageIndex,o=t.plugins,a=t.rotation,s=t.scale,l=t.width,u=i.useContext(c),h=i.createRef(),f=i.useRef(),d=window.devicePixelRatio||1;return i.createElement(it,{callback:function(){var t=f.current;t&&t.cancel();var i=h.current;o.forEach((function(t){t.onCanvasLayerRender&&t.onCanvasLayerRender({ele:i,pageIndex:n,rotation:a,scale:s,status:C.PreRender})})),i.height=e*d,i.width=l*d,i.style.opacity="0";var c=i.getContext("2d",{alpha:!1}),u=r.getViewport({rotation:a,scale:s*d});f.current=r.render({canvasContext:c,viewport:u}),f.current.promise.then((function(){i.style.removeProperty("opacity"),o.forEach((function(t){t.onCanvasLayerRender&&t.onCanvasLayerRender({ele:i,pageIndex:n,rotation:a,scale:s,status:C.DidRender})}))}),(function(){}))},rotation:a,scale:s},i.createElement("div",{className:u.prefixClass+"-canvas-layer",style:{height:e+"px",width:l+"px"}},i.createElement("canvas",{ref:h,style:{transform:"scale("+1/d+")",transformOrigin:"top left"}})))},at=function(t){var e=t.height,r=t.page,n=t.rotation,a=t.scale,s=t.width,l=i.useContext(c),u=i.createRef();return i.createElement(it,{callback:function(){var t=u.current,i=r.getViewport({rotation:n,scale:a});r.getOperatorList().then((function(n){!function(){var t=u.current;t&&(t.innerHTML="")}(),new o.SVGGraphics(r.commonObjs,r.objs).getSVG(n,i).then((function(r){r.style.height=e+"px",r.style.width=s+"px",t.appendChild(r)}))}))},rotation:n,scale:a},i.createElement("div",{className:l.prefixClass+"-svg-layer",ref:u}))},st=function(t){var e=t.page,r=t.pageIndex,n=t.plugins,a=t.rotation,s=t.scale,l=i.useContext(c),u=i.createRef(),h=i.useRef();return i.createElement(it,{callback:function(){var t=h.current;t&&t.cancel();var i=u.current;if(i){var c=e.getViewport({rotation:a,scale:s});n.forEach((function(t){t.onTextLayerRender&&t.onTextLayerRender({ele:i,pageIndex:r,scale:s,status:C.PreRender})})),e.getTextContent().then((function(t){!function(){var t=u.current;if(t)for(var e=t.querySelectorAll("span."+l.prefixClass+"-text"),r=e.length,n=0;n<r;n++){var i=e[n];t.removeChild(i)}}(),h.current=o.renderTextLayer({container:i,textContent:t,viewport:c}),h.current.promise.then((function(){for(var t=i.childNodes,e=t.length,o=0;o<e;o++)t[o].classList.add(l.prefixClass+"-text");n.forEach((function(t){t.onTextLayerRender&&t.onTextLayerRender({ele:i,pageIndex:r,scale:s,status:C.DidRender})}))}),(function(){}))}))}},rotation:a,scale:s},i.createElement("div",{className:l.prefixClass+"-text-layer",ref:u}))},ct=function(t){var e=t.currentPage,r=t.doc,n=t.height,o=t.pageIndex,a=t.plugins,s=t.renderPage,l=t.rotation,u=t.scale,d=t.width,p=t.onExecuteNamedAction,g=t.onJumpToDest,m=t.onPageVisibilityChanged,v=i.useContext(c),y=i.useState({page:null,pageHeight:n,pageWidth:d,viewportRotation:0}),_=y[0],b=y[1],A=_.page,x=_.pageHeight,S=_.pageWidth,w=i.useRef(!1),C=Array(10).fill(null).map((function(t,e){return e/10})),E=S*u,k=x*u,P=Math.abs(l)%180==0,R=P?E:k,T=P?k:E,O=function(){w.current||(w.current=!0,r.getPage(o+1).then((function(t){var e=t.getViewport({scale:1});b({page:t,pageHeight:e.height,pageWidth:e.width,viewportRotation:e.rotation})})))},L=s||function(t){return i.createElement(i.Fragment,null,t.canvasLayer.children,t.textLayer.children,t.annotationLayer.children)},F=(l+_.viewportRotation)%360;return i.useEffect((function(){e-2<=o&&o<=e+2&&O()}),[e]),i.createElement(f,{onVisibilityChanged:function(t){m(o,t.isVisible?t.ratio:-1),t.isVisible&&O()},threshold:C},i.createElement("div",{className:v.prefixClass+"-page-layer",style:{height:T+"px",width:R+"px"}},A?i.createElement(i.Fragment,null,L({annotationLayer:{attrs:{},children:i.createElement(nt,{doc:r,page:A,pageIndex:o,plugins:a,rotation:F,scale:u,onExecuteNamedAction:p,onJumpToDest:g})},canvasLayer:{attrs:{},children:i.createElement(ot,{height:T,page:A,pageIndex:o,plugins:a,rotation:F,scale:u,width:R})},doc:r,height:T,pageIndex:o,rotation:l,scale:u,svgLayer:{attrs:{},children:i.createElement(at,{height:T,page:A,rotation:F,scale:u,width:R})},textLayer:{attrs:{},children:i.createElement(st,{page:A,pageIndex:o,plugins:a,rotation:F,scale:u})},width:R}),a.map((function(t,e){return t.renderPageLayer?i.createElement(i.Fragment,{key:e},t.renderPageLayer({doc:r,height:T,pageIndex:o,rotation:l,scale:u,width:R})):i.createElement(i.Fragment,{key:e})}))):i.createElement(h,null)))},lt=function(t){var e=t.defaultScale,r=t.doc,n=t.initialPage,o=t.pageSize,a=t.plugins,s=t.renderPage,l=t.viewerState,u=t.onDocumentLoad,h=t.onOpenFile,f=t.onPageChange,d=t.onZoom,p=i.useContext(c),g=i.useRef(null),m=i.useRef(null),v=i.useState(o.scale),y=v[0],b=v[1],A=i.useState(0),x=A[0],w=A[1],C=i.useState(0),E=C[0],k=C[1],P=i.useRef(l),R=r.numPages,T=o.pageWidth,O=o.pageHeight,L=Array(R).fill(null),F=L.map((function(){return 0})),M=L.map((function(){return i.useRef()})),I=function(t){var e=t;a.forEach((function(t){t.onViewerStateChange&&(e=t.onViewerStateChange(e))})),P.current=e},N=function(){return m.current},D=function(t){return t<0||t>=R?null:M[t].current},j=function(){return P.current},U=function(t,e,n,i){var o=m.current,a=P.current;if(o&&a){var s=t+1;r.getPage(s).then((function(r){var s=r.getViewport({scale:1}),c=0,l=e||0,u=n||0;switch(i){case _.PageFit:c=0,u=0,H(_.PageFit);break;default:c=(s.height-l)*a.scale,u*=a.scale}var h=M[t].current;h&&(o.scrollTop=h.offsetTop+c,o.scrollLeft=h.offsetLeft+u)}))}},W=function(t){if(!(t<0||t>=R)){var e=m.current,r=M[t].current;e&&r&&(e.scrollTop=r.offsetTop,e.scrollLeft=r.offsetLeft),w(t)}},q=function(t){var e,r;"pdf"===(e=t.name,r=e.split(/\./).pop(),r?r.toLowerCase():"").toLowerCase()&&new Promise((function(e){var r=new FileReader;r.readAsArrayBuffer(t),r.onload=function(){var t=new Uint8Array(r.result);e(t)}})).then((function(e){h(t.name,e)}))},B=function(t){k(t),I({file:l.file,pageIndex:x,pageHeight:O,pageWidth:T,rotation:t,scale:y})},H=function(t){var e=m.current,n=P.current;if(e&&n){var i=1;switch(t){case _.ActualSize:i=1;break;case _.PageFit:i=Math.min((e.clientWidth-17)/T,(e.clientHeight-16)/O);break;case _.PageWidth:i=(e.clientWidth-17)/T;break;default:i=t}b(i),d({doc:r,scale:i})}};i.useEffect((function(){var t=m.current,e=P.current;t&&e&&(t.scrollTop=t.scrollTop*y/e.scale,t.scrollLeft=t.scrollLeft*y/e.scale,I({file:l.file,pageIndex:e.pageIndex,pageHeight:O,pageWidth:T,rotation:E,scale:y}))}),[y]),i.useEffect((function(){var t={getPageElement:D,getPagesContainer:N,getViewerState:j,jumpToDestination:U,jumpToPage:W,openFile:q,rotate:B,setViewerState:I,zoom:H};return a.forEach((function(e){e.install&&e.install(t)})),function(){a.forEach((function(e){e.uninstall&&e.uninstall(t)}))}}),[]),i.useEffect((function(){u({doc:r}),a.forEach((function(t){t.onDocumentLoad&&t.onDocumentLoad({doc:r})})),n&&W(n)}),[]),i.useEffect((function(){f({currentPage:x,doc:r}),I({file:l.file,pageIndex:x,pageHeight:O,pageWidth:T,rotation:E,scale:y})}),[x]),i.useEffect((function(){e&&H(e)}),[]);var G,z=function(t,e){F[t]=e;var r=F.reduce((function(t,e,r,n){return e>n[t]?r:t}),0);w(r)},Y=function(t){var e=x-1,r=x+1;switch(t){case"FirstPage":W(0);break;case"LastPage":W(R-1);break;case"NextPage":r<R&&W(r);break;case"PrevPage":e>=0&&W(e)}},$=function(t){return i.createElement("div",S({},t.attrs,{style:t.attrs&&t.attrs.style?t.attrs.style:{}}),t.children,t.subSlot&&$(t.subSlot))};return $((G={attrs:{ref:g,style:{height:"100%"}},children:i.createElement(i.Fragment,null),subSlot:{attrs:{ref:m,style:{height:"100%",overflow:"auto",position:"relative"}},children:i.createElement(i.Fragment,null,Array(R).fill(0).map((function(t,e){return i.createElement("div",{className:p.prefixClass+"-inner-page",key:"pagelayer-"+e,ref:function(t){M[e].current=t}},i.createElement(ct,{currentPage:x,doc:r,height:O,pageIndex:e,plugins:a,renderPage:s,rotation:E,scale:y,width:T,onExecuteNamedAction:Y,onJumpToDest:U,onPageVisibilityChanged:z}))})))}},a.forEach((function(t){t.renderViewer&&(G=t.renderViewer({containerRef:g,doc:r,pageHeight:O,pageWidth:T,rotation:E,slot:G,jumpToPage:W,openFile:q,rotate:B,zoom:H}))})),G))},ut=[.1,.2,.3,.4,.5,.6,.7,.8,.9,1,1.1,1.3,1.5,1.7,1.9,2.1,2.4,2.7,3,3.3,3.7,4.1,4.6,5.1,5.7,6.3,7,7.7,8.5,9.4,10],ht=function(t){var e=t.doc,r=t.render,n=i.useContext(c),o=i.useRef(null),a=i.useState({pageHeight:0,pageWidth:0,scale:1}),s=a[0],l=a[1];return i.useEffect((function(){e.getPage(1).then((function(t){var e=t.getViewport({scale:1}),r=e.width,n=e.height,i=o.current;if(i){var a,s,c=(i.clientWidth-100)/r,u=(a=Math.max(1,c),-1===(s=ut.findIndex((function(t){return t>=a})))||0===s?a:ut[s-1]);l({pageHeight:n,pageWidth:r,scale:u})}}))}),[e]),0===s.pageWidth?i.createElement("div",{className:n.prefixClass+"-page-size-calculator",ref:o},i.createElement(h,null)):r(s)},ft=function(){},dt=function(t){function e(e){var r=t.call(this)||this;return r.verifyPasswordFn=e,r}return A(e,t),e}(ft),pt=function(t){var e=t.verifyPasswordFn,r=i.useContext(d),n=i.useContext(c),o=i.useState(""),a=o[0],s=o[1];return i.createElement("div",{className:n.prefixClass+"-asking-password"},i.createElement("div",null,i.createElement("div",{className:n.prefixClass+"-asking-password-message"},r.core.askingPassword.requirePasswordToOpen,":"),i.createElement("div",{className:n.prefixClass+"-asking-password-input-container"},i.createElement("input",{className:n.prefixClass+"-asking-password-input",type:"password",onChange:function(t){return s(t.target.value)}}),i.createElement("button",{className:n.prefixClass+"-asking-password-button",onClick:function(){return e(a)}},r.core.askingPassword.submit))))},gt=function(t){function e(e){var r=t.call(this)||this;return r.doc=e,r}return A(e,t),e}(ft),mt=function(t){function e(e){var r=t.call(this)||this;return r.error=e,r}return A(e,t),e}(ft),vt=function(t){function e(e){var r=t.call(this)||this;return r.percentages=e,r}return A(e,t),e}(ft),yt=function(t){var e=t.verifyPasswordFn,r=i.useContext(d),n=i.useContext(c),o=i.useState(""),a=o[0],s=o[1];return i.createElement("div",{className:n.prefixClass+"-asking-password"},i.createElement("div",null,i.createElement("div",{className:n.prefixClass+"-asking-password-message"},r.core.wrongPassword.tryAgain,":"),i.createElement("div",{className:n.prefixClass+"-asking-password-input-container"},i.createElement("input",{className:n.prefixClass+"-asking-password-input",type:"password",onChange:function(t){return s(t.target.value)}}),i.createElement("button",{className:n.prefixClass+"-asking-password-button",onClick:function(){return e(a)}},r.core.wrongPassword.submit))))},_t=function(t){function e(e){var r=t.call(this)||this;return r.verifyPasswordFn=e,r}return A(e,t),e}(ft),bt=function(t){var e=t.characterMap,r=t.file,n=t.httpHeaders,a=t.render,s=t.renderError,l=t.renderLoader,u=t.withCredentials,f=i.useContext(c),d=i.useState(new vt(0)),p=d[0],g=d[1],m=i.useState(0),v=m[0],y=m[1],_=i.useState(null),b=_[0],A=_[1];switch(i.useEffect((function(){g(new vt(0));var t=Object.assign({httpHeaders:n,withCredentials:u},"string"==typeof r?{url:r}:{data:r},e?{cMapUrl:e.url,cMapPacked:e.isCompressed}:{}),i=o.getDocument(t);return i.onPassword=function(t,e){switch(e){case o.PasswordResponses.NEED_PASSWORD:g(new dt(t));break;case o.PasswordResponses.INCORRECT_PASSWORD:g(new _t(t))}},i.onProgress=function(t){t.total>0?y(Math.min(100,100*t.loaded/t.total)):y(100)},i.promise.then((function(t){return A(t)}),(function(t){return g(new mt({message:t.message||"Cannot load document",name:t.name}))})),function(){i.destroy()}}),[r]),i.useEffect((function(){g(100===v&&b?new gt(b):new vt(v))}),[v,b]),!0){case p instanceof dt:return i.createElement(pt,{verifyPasswordFn:p.verifyPasswordFn});case p instanceof _t:return i.createElement(yt,{verifyPasswordFn:p.verifyPasswordFn});case p instanceof gt:return a(p.doc);case p instanceof mt:return s?s(p.error):i.createElement("div",{className:f.prefixClass+"-doc-error"},i.createElement("div",{className:f.prefixClass+"-doc-error-text"},p.error.message));case p instanceof vt:return i.createElement("div",{className:f.prefixClass+"-doc-loading"},l?l(p.percentages):i.createElement(h,null));default:return i.createElement("div",{className:f.prefixClass+"-doc-loading"},i.createElement(h,null))}},At=function(t){var e=t.children,r=t.prefixClass;return i.createElement(c.Provider,{value:{prefixClass:r||"rpv-core"}},e)};e.Viewer=function(t){var e=t.characterMap,r=t.defaultScale,n=t.fileUrl,o=t.httpHeaders,a=void 0===o?{}:o,s=t.initialPage,c=void 0===s?0:s,l=t.localization,u=t.plugins,h=void 0===u?[]:u,f=t.prefixClass,d=t.renderError,p=t.renderPage,m=t.renderLoader,v=t.withCredentials,y=void 0!==v&&v,_=t.onDocumentLoad,b=void 0===_?function(){}:_,A=t.onPageChange,x=void 0===A?function(){}:A,S=t.onZoom,w=void 0===S?function(){}:S,C=i.useState({data:n,name:"string"==typeof n?n:""}),E=C[0],k=C[1],P=function(t,e){k({data:e,name:t})};return i.useEffect((function(){k({data:n,name:"string"==typeof n?n:""})}),[n]),i.createElement(At,{prefixClass:f},i.createElement(g,{localization:l},(function(t){return i.createElement(bt,{characterMap:e,file:E.data,httpHeaders:a,render:function(t){return i.createElement(ht,{doc:t,render:function(e){return i.createElement(lt,{defaultScale:r,doc:t,initialPage:c,pageSize:e,plugins:h,renderPage:p,viewerState:{file:E,pageIndex:c,pageHeight:e.pageHeight,pageWidth:e.pageWidth,rotation:0,scale:e.scale},onDocumentLoad:b,onOpenFile:P,onPageChange:x,onZoom:w})}})},renderError:d,renderLoader:m,withCredentials:y})})))}},4141:function(t,e,r){"use strict";t.exports=r(9469)},1926:function(t,e,r){r(2526),r(2443),r(1817),r(2401),r(8722),r(2165),r(9007),r(6066),r(3510),r(1840),r(6982),r(2159),r(6649),r(9341),r(543),r(9170),r(1038),r(9753),r(6572),r(2222),r(545),r(6541),r(3290),r(7327),r(9826),r(4553),r(4944),r(6535),r(9554),r(6699),r(2772),r(9600),r(4986),r(1249),r(5827),r(6644),r(5069),r(7042),r(5212),r(2707),r(561),r(8706),r(3792),r(9244),r(6992),r(4812),r(8309),r(4855),r(5837),r(9601),r(8011),r(9070),r(3321),r(9720),r(3371),r(8559),r(5003),r(9337),r(6210),r(489),r(3304),r(1825),r(8410),r(2200),r(7941),r(7227),r(514),r(8304),r(6833),r(1539),r(9595),r(5500),r(4869),r(3952),r(4953),r(8992),r(9841),r(7852),r(2023),r(4723),r(6373),r(6528),r(3112),r(2481),r(5306),r(4765),r(3123),r(6755),r(3210),r(5674),r(8702),r(8783),r(5218),r(4475),r(7929),r(915),r(9253),r(2125),r(8830),r(8734),r(9254),r(7268),r(7397),r(86),r(623),r(8757),r(4603),r(4916),r(2087),r(8386),r(7601),r(9714),r(1058),r(4678),r(9653),r(3299),r(5192),r(3161),r(4048),r(8285),r(4363),r(5994),r(1874),r(9494),r(6977),r(5147),r(9752),r(2376),r(3181),r(3484),r(2388),r(8621),r(403),r(4755),r(5438),r(332),r(658),r(197),r(4914),r(2420),r(160),r(970),r(2703),r(3689),r(3843),r(5735),r(8733),r(3710),r(6078),r(8862),r(3706),r(8674),r(7922),r(4668),r(7727),r(1532),r(189),r(4129),r(8478),r(8264),r(6938),r(9575),r(6716),r(7145),r(2472),r(9743),r(5109),r(8255),r(5125),r(9135),r(4197),r(6495),r(8145),r(5206),r(2990),r(8927),r(3105),r(5035),r(4345),r(7174),r(2846),r(4731),r(7209),r(6319),r(8867),r(7789),r(3739),r(9368),r(4483),r(2056),r(3462),r(678),r(7462),r(3824),r(5021),r(2974),r(5016),r(224),r(2419),r(9596),r(2586),r(4819),r(5683),r(9361),r(1037),r(5898),r(7556),r(4361),r(3593),r(9532),r(1299);var n=r(857);t.exports=n},3099:function(t){t.exports=function(t){if("function"!=typeof t)throw TypeError(String(t)+" is not a function");return t}},6077:function(t,e,r){var n=r(111);t.exports=function(t){if(!n(t)&&null!==t)throw TypeError("Can't set "+String(t)+" as a prototype");return t}},1223:function(t,e,r){var n=r(5112),i=r(30),o=r(3070),a=n("unscopables"),s=Array.prototype;null==s[a]&&o.f(s,a,{configurable:!0,value:i(null)}),t.exports=function(t){s[a][t]=!0}},1530:function(t,e,r){"use strict";var n=r(8710).charAt;t.exports=function(t,e,r){return e+(r?n(t,e).length:1)}},5787:function(t){t.exports=function(t,e,r){if(!(t instanceof e))throw TypeError("Incorrect "+(r?r+" ":"")+"invocation");return t}},9670:function(t,e,r){var n=r(111);t.exports=function(t){if(!n(t))throw TypeError(String(t)+" is not an object");return t}},4019:function(t){t.exports="undefined"!=typeof ArrayBuffer&&"undefined"!=typeof DataView},260:function(t,e,r){"use strict";var n,i=r(4019),o=r(9781),a=r(7854),s=r(111),c=r(6656),l=r(648),u=r(8880),h=r(1320),f=r(3070).f,d=r(9518),p=r(7674),g=r(5112),m=r(9711),v=a.Int8Array,y=v&&v.prototype,_=a.Uint8ClampedArray,b=_&&_.prototype,A=v&&d(v),x=y&&d(y),S=Object.prototype,w=S.isPrototypeOf,C=g("toStringTag"),E=m("TYPED_ARRAY_TAG"),k=i&&!!p&&"Opera"!==l(a.opera),P=!1,R={Int8Array:1,Uint8Array:1,Uint8ClampedArray:1,Int16Array:2,Uint16Array:2,Int32Array:4,Uint32Array:4,Float32Array:4,Float64Array:8},T={BigInt64Array:8,BigUint64Array:8},O=function(t){if(!s(t))return!1;var e=l(t);return c(R,e)||c(T,e)};for(n in R)a[n]||(k=!1);if((!k||"function"!=typeof A||A===Function.prototype)&&(A=function(){throw TypeError("Incorrect invocation")},k))for(n in R)a[n]&&p(a[n],A);if((!k||!x||x===S)&&(x=A.prototype,k))for(n in R)a[n]&&p(a[n].prototype,x);if(k&&d(b)!==x&&p(b,x),o&&!c(x,C))for(n in P=!0,f(x,C,{get:function(){return s(this)?this[E]:void 0}}),R)a[n]&&u(a[n],E,n);t.exports={NATIVE_ARRAY_BUFFER_VIEWS:k,TYPED_ARRAY_TAG:P&&E,aTypedArray:function(t){if(O(t))return t;throw TypeError("Target is not a typed array")},aTypedArrayConstructor:function(t){if(p){if(w.call(A,t))return t}else for(var e in R)if(c(R,n)){var r=a[e];if(r&&(t===r||w.call(r,t)))return t}throw TypeError("Target is not a typed array constructor")},exportTypedArrayMethod:function(t,e,r){if(o){if(r)for(var n in R){var i=a[n];i&&c(i.prototype,t)&&delete i.prototype[t]}x[t]&&!r||h(x,t,r?e:k&&y[t]||e)}},exportTypedArrayStaticMethod:function(t,e,r){var n,i;if(o){if(p){if(r)for(n in R)(i=a[n])&&c(i,t)&&delete i[t];if(A[t]&&!r)return;try{return h(A,t,r?e:k&&v[t]||e)}catch(t){}}for(n in R)!(i=a[n])||i[t]&&!r||h(i,t,e)}},isView:function(t){if(!s(t))return!1;var e=l(t);return"DataView"===e||c(R,e)||c(T,e)},isTypedArray:O,TypedArray:A,TypedArrayPrototype:x}},3331:function(t,e,r){"use strict";var n=r(7854),i=r(9781),o=r(4019),a=r(8880),s=r(2248),c=r(7293),l=r(5787),u=r(9958),h=r(7466),f=r(7067),d=r(1179),p=r(9518),g=r(7674),m=r(8006).f,v=r(3070).f,y=r(1285),_=r(8003),b=r(9909),A=b.get,x=b.set,S="ArrayBuffer",w="DataView",C="Wrong index",E=n.ArrayBuffer,k=E,P=n.DataView,R=P&&P.prototype,T=Object.prototype,O=n.RangeError,L=d.pack,F=d.unpack,M=function(t){return[255&t]},I=function(t){return[255&t,t>>8&255]},N=function(t){return[255&t,t>>8&255,t>>16&255,t>>24&255]},D=function(t){return t[3]<<24|t[2]<<16|t[1]<<8|t[0]},j=function(t){return L(t,23,4)},U=function(t){return L(t,52,8)},W=function(t,e){v(t.prototype,e,{get:function(){return A(this)[e]}})},q=function(t,e,r,n){var i=f(r),o=A(t);if(i+e>o.byteLength)throw O(C);var a=A(o.buffer).bytes,s=i+o.byteOffset,c=a.slice(s,s+e);return n?c:c.reverse()},B=function(t,e,r,n,i,o){var a=f(r),s=A(t);if(a+e>s.byteLength)throw O(C);for(var c=A(s.buffer).bytes,l=a+s.byteOffset,u=n(+i),h=0;h<e;h++)c[l+h]=u[o?h:e-h-1]};if(o){if(!c((function(){E(1)}))||!c((function(){new E(-1)}))||c((function(){return new E,new E(1.5),new E(NaN),E.name!=S}))){for(var H,G=(k=function(t){return l(this,k),new E(f(t))}).prototype=E.prototype,z=m(E),Y=0;z.length>Y;)(H=z[Y++])in k||a(k,H,E[H]);G.constructor=k}g&&p(R)!==T&&g(R,T);var $=new P(new k(2)),V=R.setInt8;$.setInt8(0,2147483648),$.setInt8(1,2147483649),!$.getInt8(0)&&$.getInt8(1)||s(R,{setInt8:function(t,e){V.call(this,t,e<<24>>24)},setUint8:function(t,e){V.call(this,t,e<<24>>24)}},{unsafe:!0})}else k=function(t){l(this,k,S);var e=f(t);x(this,{bytes:y.call(new Array(e),0),byteLength:e}),i||(this.byteLength=e)},P=function(t,e,r){l(this,P,w),l(t,k,w);var n=A(t).byteLength,o=u(e);if(o<0||o>n)throw O("Wrong offset");if(o+(r=void 0===r?n-o:h(r))>n)throw O("Wrong length");x(this,{buffer:t,byteLength:r,byteOffset:o}),i||(this.buffer=t,this.byteLength=r,this.byteOffset=o)},i&&(W(k,"byteLength"),W(P,"buffer"),W(P,"byteLength"),W(P,"byteOffset")),s(P.prototype,{getInt8:function(t){return q(this,1,t)[0]<<24>>24},getUint8:function(t){return q(this,1,t)[0]},getInt16:function(t){var e=q(this,2,t,arguments.length>1?arguments[1]:void 0);return(e[1]<<8|e[0])<<16>>16},getUint16:function(t){var e=q(this,2,t,arguments.length>1?arguments[1]:void 0);return e[1]<<8|e[0]},getInt32:function(t){return D(q(this,4,t,arguments.length>1?arguments[1]:void 0))},getUint32:function(t){return D(q(this,4,t,arguments.length>1?arguments[1]:void 0))>>>0},getFloat32:function(t){return F(q(this,4,t,arguments.length>1?arguments[1]:void 0),23)},getFloat64:function(t){return F(q(this,8,t,arguments.length>1?arguments[1]:void 0),52)},setInt8:function(t,e){B(this,1,t,M,e)},setUint8:function(t,e){B(this,1,t,M,e)},setInt16:function(t,e){B(this,2,t,I,e,arguments.length>2?arguments[2]:void 0)},setUint16:function(t,e){B(this,2,t,I,e,arguments.length>2?arguments[2]:void 0)},setInt32:function(t,e){B(this,4,t,N,e,arguments.length>2?arguments[2]:void 0)},setUint32:function(t,e){B(this,4,t,N,e,arguments.length>2?arguments[2]:void 0)},setFloat32:function(t,e){B(this,4,t,j,e,arguments.length>2?arguments[2]:void 0)},setFloat64:function(t,e){B(this,8,t,U,e,arguments.length>2?arguments[2]:void 0)}});_(k,S),_(P,w),t.exports={ArrayBuffer:k,DataView:P}},1048:function(t,e,r){"use strict";var n=r(7908),i=r(1400),o=r(7466),a=Math.min;t.exports=[].copyWithin||function(t,e){var r=n(this),s=o(r.length),c=i(t,s),l=i(e,s),u=arguments.length>2?arguments[2]:void 0,h=a((void 0===u?s:i(u,s))-l,s-c),f=1;for(l<c&&c<l+h&&(f=-1,l+=h-1,c+=h-1);h-- >0;)l in r?r[c]=r[l]:delete r[c],c+=f,l+=f;return r}},1285:function(t,e,r){"use strict";var n=r(7908),i=r(1400),o=r(7466);t.exports=function(t){for(var e=n(this),r=o(e.length),a=arguments.length,s=i(a>1?arguments[1]:void 0,r),c=a>2?arguments[2]:void 0,l=void 0===c?r:i(c,r);l>s;)e[s++]=t;return e}},8533:function(t,e,r){"use strict";var n=r(2092).forEach,i=r(2133),o=r(9207),a=i("forEach"),s=o("forEach");t.exports=a&&s?[].forEach:function(t){return n(this,t,arguments.length>1?arguments[1]:void 0)}},8457:function(t,e,r){"use strict";var n=r(9974),i=r(7908),o=r(3411),a=r(7659),s=r(7466),c=r(6135),l=r(1246);t.exports=function(t){var e,r,u,h,f,d,p=i(t),g="function"==typeof this?this:Array,m=arguments.length,v=m>1?arguments[1]:void 0,y=void 0!==v,_=l(p),b=0;if(y&&(v=n(v,m>2?arguments[2]:void 0,2)),null==_||g==Array&&a(_))for(r=new g(e=s(p.length));e>b;b++)d=y?v(p[b],b):p[b],c(r,b,d);else for(f=(h=_.call(p)).next,r=new g;!(u=f.call(h)).done;b++)d=y?o(h,v,[u.value,b],!0):u.value,c(r,b,d);return r.length=b,r}},1318:function(t,e,r){var n=r(5656),i=r(7466),o=r(1400),a=function(t){return function(e,r,a){var s,c=n(e),l=i(c.length),u=o(a,l);if(t&&r!=r){for(;l>u;)if((s=c[u++])!=s)return!0}else for(;l>u;u++)if((t||u in c)&&c[u]===r)return t||u||0;return!t&&-1}};t.exports={includes:a(!0),indexOf:a(!1)}},2092:function(t,e,r){var n=r(9974),i=r(8361),o=r(7908),a=r(7466),s=r(5417),c=[].push,l=function(t){var e=1==t,r=2==t,l=3==t,u=4==t,h=6==t,f=7==t,d=5==t||h;return function(p,g,m,v){for(var y,_,b=o(p),A=i(b),x=n(g,m,3),S=a(A.length),w=0,C=v||s,E=e?C(p,S):r||f?C(p,0):void 0;S>w;w++)if((d||w in A)&&(_=x(y=A[w],w,b),t))if(e)E[w]=_;else if(_)switch(t){case 3:return!0;case 5:return y;case 6:return w;case 2:c.call(E,y)}else switch(t){case 4:return!1;case 7:c.call(E,y)}return h?-1:l||u?u:E}};t.exports={forEach:l(0),map:l(1),filter:l(2),some:l(3),every:l(4),find:l(5),findIndex:l(6),filterOut:l(7)}},6583:function(t,e,r){"use strict";var n=r(5656),i=r(9958),o=r(7466),a=r(2133),s=r(9207),c=Math.min,l=[].lastIndexOf,u=!!l&&1/[1].lastIndexOf(1,-0)<0,h=a("lastIndexOf"),f=s("indexOf",{ACCESSORS:!0,1:0}),d=u||!h||!f;t.exports=d?function(t){if(u)return l.apply(this,arguments)||0;var e=n(this),r=o(e.length),a=r-1;for(arguments.length>1&&(a=c(a,i(arguments[1]))),a<0&&(a=r+a);a>=0;a--)if(a in e&&e[a]===t)return a||0;return-1}:l},1194:function(t,e,r){var n=r(7293),i=r(5112),o=r(7392),a=i("species");t.exports=function(t){return o>=51||!n((function(){var e=[];return(e.constructor={})[a]=function(){return{foo:1}},1!==e[t](Boolean).foo}))}},2133:function(t,e,r){"use strict";var n=r(7293);t.exports=function(t,e){var r=[][t];return!!r&&n((function(){r.call(null,e||function(){throw 1},1)}))}},9207:function(t,e,r){var n=r(9781),i=r(7293),o=r(6656),a=Object.defineProperty,s={},c=function(t){throw t};t.exports=function(t,e){if(o(s,t))return s[t];e||(e={});var r=[][t],l=!!o(e,"ACCESSORS")&&e.ACCESSORS,u=o(e,0)?e[0]:c,h=o(e,1)?e[1]:void 0;return s[t]=!!r&&!i((function(){if(l&&!n)return!0;var t={length:-1};l?a(t,1,{enumerable:!0,get:c}):t[1]=1,r.call(t,u,h)}))}},3671:function(t,e,r){var n=r(3099),i=r(7908),o=r(8361),a=r(7466),s=function(t){return function(e,r,s,c){n(r);var l=i(e),u=o(l),h=a(l.length),f=t?h-1:0,d=t?-1:1;if(s<2)for(;;){if(f in u){c=u[f],f+=d;break}if(f+=d,t?f<0:h<=f)throw TypeError("Reduce of empty array with no initial value")}for(;t?f>=0:h>f;f+=d)f in u&&(c=r(c,u[f],f,l));return c}};t.exports={left:s(!1),right:s(!0)}},5417:function(t,e,r){var n=r(111),i=r(3157),o=r(5112)("species");t.exports=function(t,e){var r;return i(t)&&("function"!=typeof(r=t.constructor)||r!==Array&&!i(r.prototype)?n(r)&&null===(r=r[o])&&(r=void 0):r=void 0),new(void 0===r?Array:r)(0===e?0:e)}},3411:function(t,e,r){var n=r(9670),i=r(9212);t.exports=function(t,e,r,o){try{return o?e(n(r)[0],r[1]):e(r)}catch(e){throw i(t),e}}},7072:function(t,e,r){var n=r(5112)("iterator"),i=!1;try{var o=0,a={next:function(){return{done:!!o++}},return:function(){i=!0}};a[n]=function(){return this},Array.from(a,(function(){throw 2}))}catch(t){}t.exports=function(t,e){if(!e&&!i)return!1;var r=!1;try{var o={};o[n]=function(){return{next:function(){return{done:r=!0}}}},t(o)}catch(t){}return r}},4326:function(t){var e={}.toString;t.exports=function(t){return e.call(t).slice(8,-1)}},648:function(t,e,r){var n=r(1694),i=r(4326),o=r(5112)("toStringTag"),a="Arguments"==i(function(){return arguments}());t.exports=n?i:function(t){var e,r,n;return void 0===t?"Undefined":null===t?"Null":"string"==typeof(r=function(t,e){try{return t[e]}catch(t){}}(e=Object(t),o))?r:a?i(e):"Object"==(n=i(e))&&"function"==typeof e.callee?"Arguments":n}},5631:function(t,e,r){"use strict";var n=r(3070).f,i=r(30),o=r(2248),a=r(9974),s=r(5787),c=r(408),l=r(654),u=r(6340),h=r(9781),f=r(2423).fastKey,d=r(9909),p=d.set,g=d.getterFor;t.exports={getConstructor:function(t,e,r,l){var u=t((function(t,n){s(t,u,e),p(t,{type:e,index:i(null),first:void 0,last:void 0,size:0}),h||(t.size=0),null!=n&&c(n,t[l],{that:t,AS_ENTRIES:r})})),d=g(e),m=function(t,e,r){var n,i,o=d(t),a=v(t,e);return a?a.value=r:(o.last=a={index:i=f(e,!0),key:e,value:r,previous:n=o.last,next:void 0,removed:!1},o.first||(o.first=a),n&&(n.next=a),h?o.size++:t.size++,"F"!==i&&(o.index[i]=a)),t},v=function(t,e){var r,n=d(t),i=f(e);if("F"!==i)return n.index[i];for(r=n.first;r;r=r.next)if(r.key==e)return r};return o(u.prototype,{clear:function(){for(var t=d(this),e=t.index,r=t.first;r;)r.removed=!0,r.previous&&(r.previous=r.previous.next=void 0),delete e[r.index],r=r.next;t.first=t.last=void 0,h?t.size=0:this.size=0},delete:function(t){var e=this,r=d(e),n=v(e,t);if(n){var i=n.next,o=n.previous;delete r.index[n.index],n.removed=!0,o&&(o.next=i),i&&(i.previous=o),r.first==n&&(r.first=i),r.last==n&&(r.last=o),h?r.size--:e.size--}return!!n},forEach:function(t){for(var e,r=d(this),n=a(t,arguments.length>1?arguments[1]:void 0,3);e=e?e.next:r.first;)for(n(e.value,e.key,this);e&&e.removed;)e=e.previous},has:function(t){return!!v(this,t)}}),o(u.prototype,r?{get:function(t){var e=v(this,t);return e&&e.value},set:function(t,e){return m(this,0===t?0:t,e)}}:{add:function(t){return m(this,t=0===t?0:t,t)}}),h&&n(u.prototype,"size",{get:function(){return d(this).size}}),u},setStrong:function(t,e,r){var n=e+" Iterator",i=g(e),o=g(n);l(t,e,(function(t,e){p(this,{type:n,target:t,state:i(t),kind:e,last:void 0})}),(function(){for(var t=o(this),e=t.kind,r=t.last;r&&r.removed;)r=r.previous;return t.target&&(t.last=r=r?r.next:t.state.first)?"keys"==e?{value:r.key,done:!1}:"values"==e?{value:r.value,done:!1}:{value:[r.key,r.value],done:!1}:(t.target=void 0,{value:void 0,done:!0})}),r?"entries":"values",!r,!0),u(e)}}},9320:function(t,e,r){"use strict";var n=r(2248),i=r(2423).getWeakData,o=r(9670),a=r(111),s=r(5787),c=r(408),l=r(2092),u=r(6656),h=r(9909),f=h.set,d=h.getterFor,p=l.find,g=l.findIndex,m=0,v=function(t){return t.frozen||(t.frozen=new y)},y=function(){this.entries=[]},_=function(t,e){return p(t.entries,(function(t){return t[0]===e}))};y.prototype={get:function(t){var e=_(this,t);if(e)return e[1]},has:function(t){return!!_(this,t)},set:function(t,e){var r=_(this,t);r?r[1]=e:this.entries.push([t,e])},delete:function(t){var e=g(this.entries,(function(e){return e[0]===t}));return~e&&this.entries.splice(e,1),!!~e}},t.exports={getConstructor:function(t,e,r,l){var h=t((function(t,n){s(t,h,e),f(t,{type:e,id:m++,frozen:void 0}),null!=n&&c(n,t[l],{that:t,AS_ENTRIES:r})})),p=d(e),g=function(t,e,r){var n=p(t),a=i(o(e),!0);return!0===a?v(n).set(e,r):a[n.id]=r,t};return n(h.prototype,{delete:function(t){var e=p(this);if(!a(t))return!1;var r=i(t);return!0===r?v(e).delete(t):r&&u(r,e.id)&&delete r[e.id]},has:function(t){var e=p(this);if(!a(t))return!1;var r=i(t);return!0===r?v(e).has(t):r&&u(r,e.id)}}),n(h.prototype,r?{get:function(t){var e=p(this);if(a(t)){var r=i(t);return!0===r?v(e).get(t):r?r[e.id]:void 0}},set:function(t,e){return g(this,t,e)}}:{add:function(t){return g(this,t,!0)}}),h}}},7710:function(t,e,r){"use strict";var n=r(2109),i=r(7854),o=r(4705),a=r(1320),s=r(2423),c=r(408),l=r(5787),u=r(111),h=r(7293),f=r(7072),d=r(8003),p=r(9587);t.exports=function(t,e,r){var g=-1!==t.indexOf("Map"),m=-1!==t.indexOf("Weak"),v=g?"set":"add",y=i[t],_=y&&y.prototype,b=y,A={},x=function(t){var e=_[t];a(_,t,"add"==t?function(t){return e.call(this,0===t?0:t),this}:"delete"==t?function(t){return!(m&&!u(t))&&e.call(this,0===t?0:t)}:"get"==t?function(t){return m&&!u(t)?void 0:e.call(this,0===t?0:t)}:"has"==t?function(t){return!(m&&!u(t))&&e.call(this,0===t?0:t)}:function(t,r){return e.call(this,0===t?0:t,r),this})};if(o(t,"function"!=typeof y||!(m||_.forEach&&!h((function(){(new y).entries().next()})))))b=r.getConstructor(e,t,g,v),s.REQUIRED=!0;else if(o(t,!0)){var S=new b,w=S[v](m?{}:-0,1)!=S,C=h((function(){S.has(1)})),E=f((function(t){new y(t)})),k=!m&&h((function(){for(var t=new y,e=5;e--;)t[v](e,e);return!t.has(-0)}));E||((b=e((function(e,r){l(e,b,t);var n=p(new y,e,b);return null!=r&&c(r,n[v],{that:n,AS_ENTRIES:g}),n}))).prototype=_,_.constructor=b),(C||k)&&(x("delete"),x("has"),g&&x("get")),(k||w)&&x(v),m&&_.clear&&delete _.clear}return A[t]=b,n({global:!0,forced:b!=y},A),d(b,t),m||r.setStrong(b,t,g),b}},9920:function(t,e,r){var n=r(6656),i=r(3887),o=r(1236),a=r(3070);t.exports=function(t,e){for(var r=i(e),s=a.f,c=o.f,l=0;l<r.length;l++){var u=r[l];n(t,u)||s(t,u,c(e,u))}}},4964:function(t,e,r){var n=r(5112)("match");t.exports=function(t){var e=/./;try{"/./"[t](e)}catch(r){try{return e[n]=!1,"/./"[t](e)}catch(t){}}return!1}},8544:function(t,e,r){var n=r(7293);t.exports=!n((function(){function t(){}return t.prototype.constructor=null,Object.getPrototypeOf(new t)!==t.prototype}))},4230:function(t,e,r){var n=r(4488),i=/"/g;t.exports=function(t,e,r,o){var a=String(n(t)),s="<"+e;return""!==r&&(s+=" "+r+'="'+String(o).replace(i,"&quot;")+'"'),s+">"+a+"</"+e+">"}},4994:function(t,e,r){"use strict";var n=r(3383).IteratorPrototype,i=r(30),o=r(9114),a=r(8003),s=r(7497),c=function(){return this};t.exports=function(t,e,r){var l=e+" Iterator";return t.prototype=i(n,{next:o(1,r)}),a(t,l,!1,!0),s[l]=c,t}},8880:function(t,e,r){var n=r(9781),i=r(3070),o=r(9114);t.exports=n?function(t,e,r){return i.f(t,e,o(1,r))}:function(t,e,r){return t[e]=r,t}},9114:function(t){t.exports=function(t,e){return{enumerable:!(1&t),configurable:!(2&t),writable:!(4&t),value:e}}},6135:function(t,e,r){"use strict";var n=r(7593),i=r(3070),o=r(9114);t.exports=function(t,e,r){var a=n(e);a in t?i.f(t,a,o(0,r)):t[a]=r}},5573:function(t,e,r){"use strict";var n=r(7293),i=r(6650).start,o=Math.abs,a=Date.prototype,s=a.getTime,c=a.toISOString;t.exports=n((function(){return"0385-07-25T07:06:39.999Z"!=c.call(new Date(-50000000000001))}))||!n((function(){c.call(new Date(NaN))}))?function(){if(!isFinite(s.call(this)))throw RangeError("Invalid time value");var t=this,e=t.getUTCFullYear(),r=t.getUTCMilliseconds(),n=e<0?"-":e>9999?"+":"";return n+i(o(e),n?6:4,0)+"-"+i(t.getUTCMonth()+1,2,0)+"-"+i(t.getUTCDate(),2,0)+"T"+i(t.getUTCHours(),2,0)+":"+i(t.getUTCMinutes(),2,0)+":"+i(t.getUTCSeconds(),2,0)+"."+i(r,3,0)+"Z"}:c},8709:function(t,e,r){"use strict";var n=r(9670),i=r(7593);t.exports=function(t){if("string"!==t&&"number"!==t&&"default"!==t)throw TypeError("Incorrect hint");return i(n(this),"number"!==t)}},654:function(t,e,r){"use strict";var n=r(2109),i=r(4994),o=r(9518),a=r(7674),s=r(8003),c=r(8880),l=r(1320),u=r(5112),h=r(1913),f=r(7497),d=r(3383),p=d.IteratorPrototype,g=d.BUGGY_SAFARI_ITERATORS,m=u("iterator"),v="keys",y="values",_="entries",b=function(){return this};t.exports=function(t,e,r,u,d,A,x){i(r,e,u);var S,w,C,E=function(t){if(t===d&&O)return O;if(!g&&t in R)return R[t];switch(t){case v:case y:case _:return function(){return new r(this,t)}}return function(){return new r(this)}},k=e+" Iterator",P=!1,R=t.prototype,T=R[m]||R["@@iterator"]||d&&R[d],O=!g&&T||E(d),L="Array"==e&&R.entries||T;if(L&&(S=o(L.call(new t)),p!==Object.prototype&&S.next&&(h||o(S)===p||(a?a(S,p):"function"!=typeof S[m]&&c(S,m,b)),s(S,k,!0,!0),h&&(f[k]=b))),d==y&&T&&T.name!==y&&(P=!0,O=function(){return T.call(this)}),h&&!x||R[m]===O||c(R,m,O),f[e]=O,d)if(w={values:E(y),keys:A?O:E(v),entries:E(_)},x)for(C in w)(g||P||!(C in R))&&l(R,C,w[C]);else n({target:e,proto:!0,forced:g||P},w);return w}},7235:function(t,e,r){var n=r(857),i=r(6656),o=r(6061),a=r(3070).f;t.exports=function(t){var e=n.Symbol||(n.Symbol={});i(e,t)||a(e,t,{value:o.f(t)})}},9781:function(t,e,r){var n=r(7293);t.exports=!n((function(){return 7!=Object.defineProperty({},1,{get:function(){return 7}})[1]}))},317:function(t,e,r){var n=r(7854),i=r(111),o=n.document,a=i(o)&&i(o.createElement);t.exports=function(t){return a?o.createElement(t):{}}},8324:function(t){t.exports={CSSRuleList:0,CSSStyleDeclaration:0,CSSValueList:0,ClientRectList:0,DOMRectList:0,DOMStringList:0,DOMTokenList:1,DataTransferItemList:0,FileList:0,HTMLAllCollection:0,HTMLCollection:0,HTMLFormElement:0,HTMLSelectElement:0,MediaList:0,MimeTypeArray:0,NamedNodeMap:0,NodeList:1,PaintRequestList:0,Plugin:0,PluginArray:0,SVGLengthList:0,SVGNumberList:0,SVGPathSegList:0,SVGPointList:0,SVGStringList:0,SVGTransformList:0,SourceBufferList:0,StyleSheetList:0,TextTrackCueList:0,TextTrackList:0,TouchList:0}},8334:function(t,e,r){var n=r(8113);t.exports=/(iphone|ipod|ipad).*applewebkit/i.test(n)},5268:function(t,e,r){var n=r(4326),i=r(7854);t.exports="process"==n(i.process)},1036:function(t,e,r){var n=r(8113);t.exports=/web0s(?!.*chrome)/i.test(n)},8113:function(t,e,r){var n=r(5005);t.exports=n("navigator","userAgent")||""},7392:function(t,e,r){var n,i,o=r(7854),a=r(8113),s=o.process,c=s&&s.versions,l=c&&c.v8;l?i=(n=l.split("."))[0]+n[1]:a&&(!(n=a.match(/Edge\/(\d+)/))||n[1]>=74)&&(n=a.match(/Chrome\/(\d+)/))&&(i=n[1]),t.exports=i&&+i},748:function(t){t.exports=["constructor","hasOwnProperty","isPrototypeOf","propertyIsEnumerable","toLocaleString","toString","valueOf"]},2109:function(t,e,r){var n=r(7854),i=r(1236).f,o=r(8880),a=r(1320),s=r(3505),c=r(9920),l=r(4705);t.exports=function(t,e){var r,u,h,f,d,p=t.target,g=t.global,m=t.stat;if(r=g?n:m?n[p]||s(p,{}):(n[p]||{}).prototype)for(u in e){if(f=e[u],h=t.noTargetGet?(d=i(r,u))&&d.value:r[u],!l(g?u:p+(m?".":"#")+u,t.forced)&&void 0!==h){if(typeof f==typeof h)continue;c(f,h)}(t.sham||h&&h.sham)&&o(f,"sham",!0),a(r,u,f,t)}}},7293:function(t){t.exports=function(t){try{return!!t()}catch(t){return!0}}},7007:function(t,e,r){"use strict";r(4916);var n=r(1320),i=r(7293),o=r(5112),a=r(2261),s=r(8880),c=o("species"),l=!i((function(){var t=/./;return t.exec=function(){var t=[];return t.groups={a:"7"},t},"7"!=="".replace(t,"$<a>")})),u="$0"==="a".replace(/./,"$0"),h=o("replace"),f=!!/./[h]&&""===/./[h]("a","$0"),d=!i((function(){var t=/(?:)/,e=t.exec;t.exec=function(){return e.apply(this,arguments)};var r="ab".split(t);return 2!==r.length||"a"!==r[0]||"b"!==r[1]}));t.exports=function(t,e,r,h){var p=o(t),g=!i((function(){var e={};return e[p]=function(){return 7},7!=""[t](e)})),m=g&&!i((function(){var e=!1,r=/a/;return"split"===t&&((r={}).constructor={},r.constructor[c]=function(){return r},r.flags="",r[p]=/./[p]),r.exec=function(){return e=!0,null},r[p](""),!e}));if(!g||!m||"replace"===t&&(!l||!u||f)||"split"===t&&!d){var v=/./[p],y=r(p,""[t],(function(t,e,r,n,i){return e.exec===a?g&&!i?{done:!0,value:v.call(e,r,n)}:{done:!0,value:t.call(r,e,n)}:{done:!1}}),{REPLACE_KEEPS_$0:u,REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE:f}),_=y[0],b=y[1];n(String.prototype,t,_),n(RegExp.prototype,p,2==e?function(t,e){return b.call(t,this,e)}:function(t){return b.call(t,this)})}h&&s(RegExp.prototype[p],"sham",!0)}},6790:function(t,e,r){"use strict";var n=r(3157),i=r(7466),o=r(9974),a=function(t,e,r,s,c,l,u,h){for(var f,d=c,p=0,g=!!u&&o(u,h,3);p<s;){if(p in r){if(f=g?g(r[p],p,e):r[p],l>0&&n(f))d=a(t,e,f,i(f.length),d,l-1)-1;else{if(d>=9007199254740991)throw TypeError("Exceed the acceptable array length");t[d]=f}d++}p++}return d};t.exports=a},6677:function(t,e,r){var n=r(7293);t.exports=!n((function(){return Object.isExtensible(Object.preventExtensions({}))}))},9974:function(t,e,r){var n=r(3099);t.exports=function(t,e,r){if(n(t),void 0===e)return t;switch(r){case 0:return function(){return t.call(e)};case 1:return function(r){return t.call(e,r)};case 2:return function(r,n){return t.call(e,r,n)};case 3:return function(r,n,i){return t.call(e,r,n,i)}}return function(){return t.apply(e,arguments)}}},7065:function(t,e,r){"use strict";var n=r(3099),i=r(111),o=[].slice,a={},s=function(t,e,r){if(!(e in a)){for(var n=[],i=0;i<e;i++)n[i]="a["+i+"]";a[e]=Function("C,a","return new C("+n.join(",")+")")}return a[e](t,r)};t.exports=Function.bind||function(t){var e=n(this),r=o.call(arguments,1),a=function(){var n=r.concat(o.call(arguments));return this instanceof a?s(e,n.length,n):e.apply(t,n)};return i(e.prototype)&&(a.prototype=e.prototype),a}},5005:function(t,e,r){var n=r(857),i=r(7854),o=function(t){return"function"==typeof t?t:void 0};t.exports=function(t,e){return arguments.length<2?o(n[t])||o(i[t]):n[t]&&n[t][e]||i[t]&&i[t][e]}},1246:function(t,e,r){var n=r(648),i=r(7497),o=r(5112)("iterator");t.exports=function(t){if(null!=t)return t[o]||t["@@iterator"]||i[n(t)]}},8554:function(t,e,r){var n=r(9670),i=r(1246);t.exports=function(t){var e=i(t);if("function"!=typeof e)throw TypeError(String(t)+" is not iterable");return n(e.call(t))}},647:function(t,e,r){var n=r(7908),i=Math.floor,o="".replace,a=/\$([$&'`]|\d\d?|<[^>]*>)/g,s=/\$([$&'`]|\d\d?)/g;t.exports=function(t,e,r,c,l,u){var h=r+t.length,f=c.length,d=s;return void 0!==l&&(l=n(l),d=a),o.call(u,d,(function(n,o){var a;switch(o.charAt(0)){case"$":return"$";case"&":return t;case"`":return e.slice(0,r);case"'":return e.slice(h);case"<":a=l[o.slice(1,-1)];break;default:var s=+o;if(0===s)return n;if(s>f){var u=i(s/10);return 0===u?n:u<=f?void 0===c[u-1]?o.charAt(1):c[u-1]+o.charAt(1):n}a=c[s-1]}return void 0===a?"":a}))}},7854:function(t,e,r){var n=function(t){return t&&t.Math==Math&&t};t.exports=n("object"==typeof globalThis&&globalThis)||n("object"==typeof window&&window)||n("object"==typeof self&&self)||n("object"==typeof r.g&&r.g)||function(){return this}()||Function("return this")()},6656:function(t){var e={}.hasOwnProperty;t.exports=function(t,r){return e.call(t,r)}},3501:function(t){t.exports={}},842:function(t,e,r){var n=r(7854);t.exports=function(t,e){var r=n.console;r&&r.error&&(1===arguments.length?r.error(t):r.error(t,e))}},490:function(t,e,r){var n=r(5005);t.exports=n("document","documentElement")},4664:function(t,e,r){var n=r(9781),i=r(7293),o=r(317);t.exports=!n&&!i((function(){return 7!=Object.defineProperty(o("div"),"a",{get:function(){return 7}}).a}))},1179:function(t){var e=1/0,r=Math.abs,n=Math.pow,i=Math.floor,o=Math.log,a=Math.LN2;t.exports={pack:function(t,s,c){var l,u,h,f=new Array(c),d=8*c-s-1,p=(1<<d)-1,g=p>>1,m=23===s?n(2,-24)-n(2,-77):0,v=t<0||0===t&&1/t<0?1:0,y=0;for((t=r(t))!=t||t===e?(u=t!=t?1:0,l=p):(l=i(o(t)/a),t*(h=n(2,-l))<1&&(l--,h*=2),(t+=l+g>=1?m/h:m*n(2,1-g))*h>=2&&(l++,h/=2),l+g>=p?(u=0,l=p):l+g>=1?(u=(t*h-1)*n(2,s),l+=g):(u=t*n(2,g-1)*n(2,s),l=0));s>=8;f[y++]=255&u,u/=256,s-=8);for(l=l<<s|u,d+=s;d>0;f[y++]=255&l,l/=256,d-=8);return f[--y]|=128*v,f},unpack:function(t,r){var i,o=t.length,a=8*o-r-1,s=(1<<a)-1,c=s>>1,l=a-7,u=o-1,h=t[u--],f=127&h;for(h>>=7;l>0;f=256*f+t[u],u--,l-=8);for(i=f&(1<<-l)-1,f>>=-l,l+=r;l>0;i=256*i+t[u],u--,l-=8);if(0===f)f=1-c;else{if(f===s)return i?NaN:h?-1/0:e;i+=n(2,r),f-=c}return(h?-1:1)*i*n(2,f-r)}}},8361:function(t,e,r){var n=r(7293),i=r(4326),o="".split;t.exports=n((function(){return!Object("z").propertyIsEnumerable(0)}))?function(t){return"String"==i(t)?o.call(t,""):Object(t)}:Object},9587:function(t,e,r){var n=r(111),i=r(7674);t.exports=function(t,e,r){var o,a;return i&&"function"==typeof(o=e.constructor)&&o!==r&&n(a=o.prototype)&&a!==r.prototype&&i(t,a),t}},2788:function(t,e,r){var n=r(5465),i=Function.toString;"function"!=typeof n.inspectSource&&(n.inspectSource=function(t){return i.call(t)}),t.exports=n.inspectSource},2423:function(t,e,r){var n=r(3501),i=r(111),o=r(6656),a=r(3070).f,s=r(9711),c=r(6677),l=s("meta"),u=0,h=Object.isExtensible||function(){return!0},f=function(t){a(t,l,{value:{objectID:"O"+ ++u,weakData:{}}})},d=t.exports={REQUIRED:!1,fastKey:function(t,e){if(!i(t))return"symbol"==typeof t?t:("string"==typeof t?"S":"P")+t;if(!o(t,l)){if(!h(t))return"F";if(!e)return"E";f(t)}return t[l].objectID},getWeakData:function(t,e){if(!o(t,l)){if(!h(t))return!0;if(!e)return!1;f(t)}return t[l].weakData},onFreeze:function(t){return c&&d.REQUIRED&&h(t)&&!o(t,l)&&f(t),t}};n[l]=!0},9909:function(t,e,r){var n,i,o,a=r(8536),s=r(7854),c=r(111),l=r(8880),u=r(6656),h=r(5465),f=r(6200),d=r(3501),p=s.WeakMap;if(a){var g=h.state||(h.state=new p),m=g.get,v=g.has,y=g.set;n=function(t,e){return e.facade=t,y.call(g,t,e),e},i=function(t){return m.call(g,t)||{}},o=function(t){return v.call(g,t)}}else{var _=f("state");d[_]=!0,n=function(t,e){return e.facade=t,l(t,_,e),e},i=function(t){return u(t,_)?t[_]:{}},o=function(t){return u(t,_)}}t.exports={set:n,get:i,has:o,enforce:function(t){return o(t)?i(t):n(t,{})},getterFor:function(t){return function(e){var r;if(!c(e)||(r=i(e)).type!==t)throw TypeError("Incompatible receiver, "+t+" required");return r}}}},7659:function(t,e,r){var n=r(5112),i=r(7497),o=n("iterator"),a=Array.prototype;t.exports=function(t){return void 0!==t&&(i.Array===t||a[o]===t)}},3157:function(t,e,r){var n=r(4326);t.exports=Array.isArray||function(t){return"Array"==n(t)}},4705:function(t,e,r){var n=r(7293),i=/#|\.prototype\./,o=function(t,e){var r=s[a(t)];return r==l||r!=c&&("function"==typeof e?n(e):!!e)},a=o.normalize=function(t){return String(t).replace(i,".").toLowerCase()},s=o.data={},c=o.NATIVE="N",l=o.POLYFILL="P";t.exports=o},8730:function(t,e,r){var n=r(111),i=Math.floor;t.exports=function(t){return!n(t)&&isFinite(t)&&i(t)===t}},111:function(t){t.exports=function(t){return"object"==typeof t?null!==t:"function"==typeof t}},1913:function(t){t.exports=!1},7850:function(t,e,r){var n=r(111),i=r(4326),o=r(5112)("match");t.exports=function(t){var e;return n(t)&&(void 0!==(e=t[o])?!!e:"RegExp"==i(t))}},408:function(t,e,r){var n=r(9670),i=r(7659),o=r(7466),a=r(9974),s=r(1246),c=r(9212),l=function(t,e){this.stopped=t,this.result=e};t.exports=function(t,e,r){var u,h,f,d,p,g,m,v=r&&r.that,y=!(!r||!r.AS_ENTRIES),_=!(!r||!r.IS_ITERATOR),b=!(!r||!r.INTERRUPTED),A=a(e,v,1+y+b),x=function(t){return u&&c(u),new l(!0,t)},S=function(t){return y?(n(t),b?A(t[0],t[1],x):A(t[0],t[1])):b?A(t,x):A(t)};if(_)u=t;else{if("function"!=typeof(h=s(t)))throw TypeError("Target is not iterable");if(i(h)){for(f=0,d=o(t.length);d>f;f++)if((p=S(t[f]))&&p instanceof l)return p;return new l(!1)}u=h.call(t)}for(g=u.next;!(m=g.call(u)).done;){try{p=S(m.value)}catch(t){throw c(u),t}if("object"==typeof p&&p&&p instanceof l)return p}return new l(!1)}},9212:function(t,e,r){var n=r(9670);t.exports=function(t){var e=t.return;if(void 0!==e)return n(e.call(t)).value}},3383:function(t,e,r){"use strict";var n,i,o,a=r(9518),s=r(8880),c=r(6656),l=r(5112),u=r(1913),h=l("iterator"),f=!1;[].keys&&("next"in(o=[].keys())?(i=a(a(o)))!==Object.prototype&&(n=i):f=!0),null==n&&(n={}),u||c(n,h)||s(n,h,(function(){return this})),t.exports={IteratorPrototype:n,BUGGY_SAFARI_ITERATORS:f}},7497:function(t){t.exports={}},6736:function(t){var e=Math.expm1,r=Math.exp;t.exports=!e||e(10)>22025.465794806718||e(10)<22025.465794806718||-2e-17!=e(-2e-17)?function(t){return 0==(t=+t)?t:t>-1e-6&&t<1e-6?t+t*t/2:r(t)-1}:e},6130:function(t,e,r){var n=r(4310),i=Math.abs,o=Math.pow,a=o(2,-52),s=o(2,-23),c=o(2,127)*(2-s),l=o(2,-126);t.exports=Math.fround||function(t){var e,r,o=i(t),u=n(t);return o<l?u*(o/l/s+1/a-1/a)*l*s:(r=(e=(1+s/a)*o)-(e-o))>c||r!=r?u*(1/0):u*r}},6513:function(t){var e=Math.log;t.exports=Math.log1p||function(t){return(t=+t)>-1e-8&&t<1e-8?t-t*t/2:e(1+t)}},4310:function(t){t.exports=Math.sign||function(t){return 0==(t=+t)||t!=t?t:t<0?-1:1}},5948:function(t,e,r){var n,i,o,a,s,c,l,u,h=r(7854),f=r(1236).f,d=r(261).set,p=r(8334),g=r(1036),m=r(5268),v=h.MutationObserver||h.WebKitMutationObserver,y=h.document,_=h.process,b=h.Promise,A=f(h,"queueMicrotask"),x=A&&A.value;x||(n=function(){var t,e;for(m&&(t=_.domain)&&t.exit();i;){e=i.fn,i=i.next;try{e()}catch(t){throw i?a():o=void 0,t}}o=void 0,t&&t.enter()},p||m||g||!v||!y?b&&b.resolve?(l=b.resolve(void 0),u=l.then,a=function(){u.call(l,n)}):a=m?function(){_.nextTick(n)}:function(){d.call(h,n)}:(s=!0,c=y.createTextNode(""),new v(n).observe(c,{characterData:!0}),a=function(){c.data=s=!s})),t.exports=x||function(t){var e={fn:t,next:void 0};o&&(o.next=e),i||(i=e,a()),o=e}},3366:function(t,e,r){var n=r(7854);t.exports=n.Promise},133:function(t,e,r){var n=r(7293);t.exports=!!Object.getOwnPropertySymbols&&!n((function(){return!String(Symbol())}))},590:function(t,e,r){var n=r(7293),i=r(5112),o=r(1913),a=i("iterator");t.exports=!n((function(){var t=new URL("b?a=1&b=2&c=3","http://a"),e=t.searchParams,r="";return t.pathname="c%20d",e.forEach((function(t,n){e.delete("b"),r+=n+t})),o&&!t.toJSON||!e.sort||"http://a/c%20d?a=1&c=3"!==t.href||"3"!==e.get("c")||"a=1"!==String(new URLSearchParams("?a=1"))||!e[a]||"a"!==new URL("https://a@b").username||"b"!==new URLSearchParams(new URLSearchParams("a=b")).get("a")||"xn--e1aybc"!==new URL("http://тест").host||"#%D0%B1"!==new URL("http://a#б").hash||"a1c3"!==r||"x"!==new URL("http://x",void 0).host}))},8536:function(t,e,r){var n=r(7854),i=r(2788),o=n.WeakMap;t.exports="function"==typeof o&&/native code/.test(i(o))},8523:function(t,e,r){"use strict";var n=r(3099),i=function(t){var e,r;this.promise=new t((function(t,n){if(void 0!==e||void 0!==r)throw TypeError("Bad Promise constructor");e=t,r=n})),this.resolve=n(e),this.reject=n(r)};t.exports.f=function(t){return new i(t)}},3929:function(t,e,r){var n=r(7850);t.exports=function(t){if(n(t))throw TypeError("The method doesn't accept regular expressions");return t}},7023:function(t,e,r){var n=r(7854).isFinite;t.exports=Number.isFinite||function(t){return"number"==typeof t&&n(t)}},2814:function(t,e,r){var n=r(7854),i=r(3111).trim,o=r(1361),a=n.parseFloat,s=1/a(o+"-0")!=-1/0;t.exports=s?function(t){var e=i(String(t)),r=a(e);return 0===r&&"-"==e.charAt(0)?-0:r}:a},3009:function(t,e,r){var n=r(7854),i=r(3111).trim,o=r(1361),a=n.parseInt,s=/^[+-]?0[Xx]/,c=8!==a(o+"08")||22!==a(o+"0x16");t.exports=c?function(t,e){var r=i(String(t));return a(r,e>>>0||(s.test(r)?16:10))}:a},1574:function(t,e,r){"use strict";var n=r(9781),i=r(7293),o=r(1956),a=r(5181),s=r(5296),c=r(7908),l=r(8361),u=Object.assign,h=Object.defineProperty;t.exports=!u||i((function(){if(n&&1!==u({b:1},u(h({},"a",{enumerable:!0,get:function(){h(this,"b",{value:3,enumerable:!1})}}),{b:2})).b)return!0;var t={},e={},r=Symbol(),i="abcdefghijklmnopqrst";return t[r]=7,i.split("").forEach((function(t){e[t]=t})),7!=u({},t)[r]||o(u({},e)).join("")!=i}))?function(t,e){for(var r=c(t),i=arguments.length,u=1,h=a.f,f=s.f;i>u;)for(var d,p=l(arguments[u++]),g=h?o(p).concat(h(p)):o(p),m=g.length,v=0;m>v;)d=g[v++],n&&!f.call(p,d)||(r[d]=p[d]);return r}:u},30:function(t,e,r){var n,i=r(9670),o=r(6048),a=r(748),s=r(3501),c=r(490),l=r(317),u=r(6200)("IE_PROTO"),h=function(){},f=function(t){return"<script>"+t+"<\/script>"},d=function(){try{n=document.domain&&new ActiveXObject("htmlfile")}catch(t){}var t,e;d=n?function(t){t.write(f("")),t.close();var e=t.parentWindow.Object;return t=null,e}(n):((e=l("iframe")).style.display="none",c.appendChild(e),e.src=String("javascript:"),(t=e.contentWindow.document).open(),t.write(f("document.F=Object")),t.close(),t.F);for(var r=a.length;r--;)delete d.prototype[a[r]];return d()};s[u]=!0,t.exports=Object.create||function(t,e){var r;return null!==t?(h.prototype=i(t),r=new h,h.prototype=null,r[u]=t):r=d(),void 0===e?r:o(r,e)}},6048:function(t,e,r){var n=r(9781),i=r(3070),o=r(9670),a=r(1956);t.exports=n?Object.defineProperties:function(t,e){o(t);for(var r,n=a(e),s=n.length,c=0;s>c;)i.f(t,r=n[c++],e[r]);return t}},3070:function(t,e,r){var n=r(9781),i=r(4664),o=r(9670),a=r(7593),s=Object.defineProperty;e.f=n?s:function(t,e,r){if(o(t),e=a(e,!0),o(r),i)try{return s(t,e,r)}catch(t){}if("get"in r||"set"in r)throw TypeError("Accessors not supported");return"value"in r&&(t[e]=r.value),t}},1236:function(t,e,r){var n=r(9781),i=r(5296),o=r(9114),a=r(5656),s=r(7593),c=r(6656),l=r(4664),u=Object.getOwnPropertyDescriptor;e.f=n?u:function(t,e){if(t=a(t),e=s(e,!0),l)try{return u(t,e)}catch(t){}if(c(t,e))return o(!i.f.call(t,e),t[e])}},1156:function(t,e,r){var n=r(5656),i=r(8006).f,o={}.toString,a="object"==typeof window&&window&&Object.getOwnPropertyNames?Object.getOwnPropertyNames(window):[];t.exports.f=function(t){return a&&"[object Window]"==o.call(t)?function(t){try{return i(t)}catch(t){return a.slice()}}(t):i(n(t))}},8006:function(t,e,r){var n=r(6324),i=r(748).concat("length","prototype");e.f=Object.getOwnPropertyNames||function(t){return n(t,i)}},5181:function(t,e){e.f=Object.getOwnPropertySymbols},9518:function(t,e,r){var n=r(6656),i=r(7908),o=r(6200),a=r(8544),s=o("IE_PROTO"),c=Object.prototype;t.exports=a?Object.getPrototypeOf:function(t){return t=i(t),n(t,s)?t[s]:"function"==typeof t.constructor&&t instanceof t.constructor?t.constructor.prototype:t instanceof Object?c:null}},6324:function(t,e,r){var n=r(6656),i=r(5656),o=r(1318).indexOf,a=r(3501);t.exports=function(t,e){var r,s=i(t),c=0,l=[];for(r in s)!n(a,r)&&n(s,r)&&l.push(r);for(;e.length>c;)n(s,r=e[c++])&&(~o(l,r)||l.push(r));return l}},1956:function(t,e,r){var n=r(6324),i=r(748);t.exports=Object.keys||function(t){return n(t,i)}},5296:function(t,e){"use strict";var r={}.propertyIsEnumerable,n=Object.getOwnPropertyDescriptor,i=n&&!r.call({1:2},1);e.f=i?function(t){var e=n(this,t);return!!e&&e.enumerable}:r},9026:function(t,e,r){"use strict";var n=r(1913),i=r(7854),o=r(7293);t.exports=n||!o((function(){var t=Math.random();__defineSetter__.call(null,t,(function(){})),delete i[t]}))},7674:function(t,e,r){var n=r(9670),i=r(6077);t.exports=Object.setPrototypeOf||("__proto__"in{}?function(){var t,e=!1,r={};try{(t=Object.getOwnPropertyDescriptor(Object.prototype,"__proto__").set).call(r,[]),e=r instanceof Array}catch(t){}return function(r,o){return n(r),i(o),e?t.call(r,o):r.__proto__=o,r}}():void 0)},4699:function(t,e,r){var n=r(9781),i=r(1956),o=r(5656),a=r(5296).f,s=function(t){return function(e){for(var r,s=o(e),c=i(s),l=c.length,u=0,h=[];l>u;)r=c[u++],n&&!a.call(s,r)||h.push(t?[r,s[r]]:s[r]);return h}};t.exports={entries:s(!0),values:s(!1)}},288:function(t,e,r){"use strict";var n=r(1694),i=r(648);t.exports=n?{}.toString:function(){return"[object "+i(this)+"]"}},3887:function(t,e,r){var n=r(5005),i=r(8006),o=r(5181),a=r(9670);t.exports=n("Reflect","ownKeys")||function(t){var e=i.f(a(t)),r=o.f;return r?e.concat(r(t)):e}},857:function(t,e,r){var n=r(7854);t.exports=n},2534:function(t){t.exports=function(t){try{return{error:!1,value:t()}}catch(t){return{error:!0,value:t}}}},9478:function(t,e,r){var n=r(9670),i=r(111),o=r(8523);t.exports=function(t,e){if(n(t),i(e)&&e.constructor===t)return e;var r=o.f(t);return(0,r.resolve)(e),r.promise}},2248:function(t,e,r){var n=r(1320);t.exports=function(t,e,r){for(var i in e)n(t,i,e[i],r);return t}},1320:function(t,e,r){var n=r(7854),i=r(8880),o=r(6656),a=r(3505),s=r(2788),c=r(9909),l=c.get,u=c.enforce,h=String(String).split("String");(t.exports=function(t,e,r,s){var c,l=!!s&&!!s.unsafe,f=!!s&&!!s.enumerable,d=!!s&&!!s.noTargetGet;"function"==typeof r&&("string"!=typeof e||o(r,"name")||i(r,"name",e),(c=u(r)).source||(c.source=h.join("string"==typeof e?e:""))),t!==n?(l?!d&&t[e]&&(f=!0):delete t[e],f?t[e]=r:i(t,e,r)):f?t[e]=r:a(e,r)})(Function.prototype,"toString",(function(){return"function"==typeof this&&l(this).source||s(this)}))},7651:function(t,e,r){var n=r(4326),i=r(2261);t.exports=function(t,e){var r=t.exec;if("function"==typeof r){var o=r.call(t,e);if("object"!=typeof o)throw TypeError("RegExp exec method returned something other than an Object or null");return o}if("RegExp"!==n(t))throw TypeError("RegExp#exec called on incompatible receiver");return i.call(t,e)}},2261:function(t,e,r){"use strict";var n,i,o=r(7066),a=r(2999),s=RegExp.prototype.exec,c=String.prototype.replace,l=s,u=(n=/a/,i=/b*/g,s.call(n,"a"),s.call(i,"a"),0!==n.lastIndex||0!==i.lastIndex),h=a.UNSUPPORTED_Y||a.BROKEN_CARET,f=void 0!==/()??/.exec("")[1];(u||f||h)&&(l=function(t){var e,r,n,i,a=this,l=h&&a.sticky,d=o.call(a),p=a.source,g=0,m=t;return l&&(-1===(d=d.replace("y","")).indexOf("g")&&(d+="g"),m=String(t).slice(a.lastIndex),a.lastIndex>0&&(!a.multiline||a.multiline&&"\n"!==t[a.lastIndex-1])&&(p="(?: "+p+")",m=" "+m,g++),r=new RegExp("^(?:"+p+")",d)),f&&(r=new RegExp("^"+p+"$(?!\\s)",d)),u&&(e=a.lastIndex),n=s.call(l?r:a,m),l?n?(n.input=n.input.slice(g),n[0]=n[0].slice(g),n.index=a.lastIndex,a.lastIndex+=n[0].length):a.lastIndex=0:u&&n&&(a.lastIndex=a.global?n.index+n[0].length:e),f&&n&&n.length>1&&c.call(n[0],r,(function(){for(i=1;i<arguments.length-2;i++)void 0===arguments[i]&&(n[i]=void 0)})),n}),t.exports=l},7066:function(t,e,r){"use strict";var n=r(9670);t.exports=function(){var t=n(this),e="";return t.global&&(e+="g"),t.ignoreCase&&(e+="i"),t.multiline&&(e+="m"),t.dotAll&&(e+="s"),t.unicode&&(e+="u"),t.sticky&&(e+="y"),e}},2999:function(t,e,r){"use strict";var n=r(7293);function i(t,e){return RegExp(t,e)}e.UNSUPPORTED_Y=n((function(){var t=i("a","y");return t.lastIndex=2,null!=t.exec("abcd")})),e.BROKEN_CARET=n((function(){var t=i("^r","gy");return t.lastIndex=2,null!=t.exec("str")}))},4488:function(t){t.exports=function(t){if(null==t)throw TypeError("Can't call method on "+t);return t}},1150:function(t){t.exports=Object.is||function(t,e){return t===e?0!==t||1/t==1/e:t!=t&&e!=e}},3505:function(t,e,r){var n=r(7854),i=r(8880);t.exports=function(t,e){try{i(n,t,e)}catch(r){n[t]=e}return e}},6340:function(t,e,r){"use strict";var n=r(5005),i=r(3070),o=r(5112),a=r(9781),s=o("species");t.exports=function(t){var e=n(t),r=i.f;a&&e&&!e[s]&&r(e,s,{configurable:!0,get:function(){return this}})}},8003:function(t,e,r){var n=r(3070).f,i=r(6656),o=r(5112)("toStringTag");t.exports=function(t,e,r){t&&!i(t=r?t:t.prototype,o)&&n(t,o,{configurable:!0,value:e})}},6200:function(t,e,r){var n=r(2309),i=r(9711),o=n("keys");t.exports=function(t){return o[t]||(o[t]=i(t))}},5465:function(t,e,r){var n=r(7854),i=r(3505),o="__core-js_shared__",a=n[o]||i(o,{});t.exports=a},2309:function(t,e,r){var n=r(1913),i=r(5465);(t.exports=function(t,e){return i[t]||(i[t]=void 0!==e?e:{})})("versions",[]).push({version:"3.8.2",mode:n?"pure":"global",copyright:"© 2021 Denis Pushkarev (zloirock.ru)"})},6707:function(t,e,r){var n=r(9670),i=r(3099),o=r(5112)("species");t.exports=function(t,e){var r,a=n(t).constructor;return void 0===a||null==(r=n(a)[o])?e:i(r)}},3429:function(t,e,r){var n=r(7293);t.exports=function(t){return n((function(){var e=""[t]('"');return e!==e.toLowerCase()||e.split('"').length>3}))}},8710:function(t,e,r){var n=r(9958),i=r(4488),o=function(t){return function(e,r){var o,a,s=String(i(e)),c=n(r),l=s.length;return c<0||c>=l?t?"":void 0:(o=s.charCodeAt(c))<55296||o>56319||c+1===l||(a=s.charCodeAt(c+1))<56320||a>57343?t?s.charAt(c):o:t?s.slice(c,c+2):a-56320+(o-55296<<10)+65536}};t.exports={codeAt:o(!1),charAt:o(!0)}},7061:function(t,e,r){var n=r(8113);t.exports=/Version\/10\.\d+(\.\d+)?( Mobile\/\w+)? Safari\//.test(n)},6650:function(t,e,r){var n=r(7466),i=r(8415),o=r(4488),a=Math.ceil,s=function(t){return function(e,r,s){var c,l,u=String(o(e)),h=u.length,f=void 0===s?" ":String(s),d=n(r);return d<=h||""==f?u:(c=d-h,(l=i.call(f,a(c/f.length))).length>c&&(l=l.slice(0,c)),t?u+l:l+u)}};t.exports={start:s(!1),end:s(!0)}},3197:function(t){"use strict";var e=2147483647,r=/[^\0-\u007E]/,n=/[.\u3002\uFF0E\uFF61]/g,i="Overflow: input needs wider integers to process",o=Math.floor,a=String.fromCharCode,s=function(t){return t+22+75*(t<26)},c=function(t,e,r){var n=0;for(t=r?o(t/700):t>>1,t+=o(t/e);t>455;n+=36)t=o(t/35);return o(n+36*t/(t+38))},l=function(t){var r,n,l=[],u=(t=function(t){for(var e=[],r=0,n=t.length;r<n;){var i=t.charCodeAt(r++);if(i>=55296&&i<=56319&&r<n){var o=t.charCodeAt(r++);56320==(64512&o)?e.push(((1023&i)<<10)+(1023&o)+65536):(e.push(i),r--)}else e.push(i)}return e}(t)).length,h=128,f=0,d=72;for(r=0;r<t.length;r++)(n=t[r])<128&&l.push(a(n));var p=l.length,g=p;for(p&&l.push("-");g<u;){var m=e;for(r=0;r<t.length;r++)(n=t[r])>=h&&n<m&&(m=n);var v=g+1;if(m-h>o((e-f)/v))throw RangeError(i);for(f+=(m-h)*v,h=m,r=0;r<t.length;r++){if((n=t[r])<h&&++f>e)throw RangeError(i);if(n==h){for(var y=f,_=36;;_+=36){var b=_<=d?1:_>=d+26?26:_-d;if(y<b)break;var A=y-b,x=36-b;l.push(a(s(b+A%x))),y=o(A/x)}l.push(a(s(y))),d=c(f,v,g==p),f=0,++g}}++f,++h}return l.join("")};t.exports=function(t){var e,i,o=[],a=t.toLowerCase().replace(n,".").split(".");for(e=0;e<a.length;e++)i=a[e],o.push(r.test(i)?"xn--"+l(i):i);return o.join(".")}},8415:function(t,e,r){"use strict";var n=r(9958),i=r(4488);t.exports="".repeat||function(t){var e=String(i(this)),r="",o=n(t);if(o<0||o==1/0)throw RangeError("Wrong number of repetitions");for(;o>0;(o>>>=1)&&(e+=e))1&o&&(r+=e);return r}},6091:function(t,e,r){var n=r(7293),i=r(1361);t.exports=function(t){return n((function(){return!!i[t]()||"​᠎"!="​᠎"[t]()||i[t].name!==t}))}},3111:function(t,e,r){var n=r(4488),i="["+r(1361)+"]",o=RegExp("^"+i+i+"*"),a=RegExp(i+i+"*$"),s=function(t){return function(e){var r=String(n(e));return 1&t&&(r=r.replace(o,"")),2&t&&(r=r.replace(a,"")),r}};t.exports={start:s(1),end:s(2),trim:s(3)}},261:function(t,e,r){var n,i,o,a=r(7854),s=r(7293),c=r(9974),l=r(490),u=r(317),h=r(8334),f=r(5268),d=a.location,p=a.setImmediate,g=a.clearImmediate,m=a.process,v=a.MessageChannel,y=a.Dispatch,_=0,b={},A=function(t){if(b.hasOwnProperty(t)){var e=b[t];delete b[t],e()}},x=function(t){return function(){A(t)}},S=function(t){A(t.data)},w=function(t){a.postMessage(t+"",d.protocol+"//"+d.host)};p&&g||(p=function(t){for(var e=[],r=1;arguments.length>r;)e.push(arguments[r++]);return b[++_]=function(){("function"==typeof t?t:Function(t)).apply(void 0,e)},n(_),_},g=function(t){delete b[t]},f?n=function(t){m.nextTick(x(t))}:y&&y.now?n=function(t){y.now(x(t))}:v&&!h?(o=(i=new v).port2,i.port1.onmessage=S,n=c(o.postMessage,o,1)):a.addEventListener&&"function"==typeof postMessage&&!a.importScripts&&d&&"file:"!==d.protocol&&!s(w)?(n=w,a.addEventListener("message",S,!1)):n="onreadystatechange"in u("script")?function(t){l.appendChild(u("script")).onreadystatechange=function(){l.removeChild(this),A(t)}}:function(t){setTimeout(x(t),0)}),t.exports={set:p,clear:g}},863:function(t,e,r){var n=r(4326);t.exports=function(t){if("number"!=typeof t&&"Number"!=n(t))throw TypeError("Incorrect invocation");return+t}},1400:function(t,e,r){var n=r(9958),i=Math.max,o=Math.min;t.exports=function(t,e){var r=n(t);return r<0?i(r+e,0):o(r,e)}},7067:function(t,e,r){var n=r(9958),i=r(7466);t.exports=function(t){if(void 0===t)return 0;var e=n(t),r=i(e);if(e!==r)throw RangeError("Wrong length or index");return r}},5656:function(t,e,r){var n=r(8361),i=r(4488);t.exports=function(t){return n(i(t))}},9958:function(t){var e=Math.ceil,r=Math.floor;t.exports=function(t){return isNaN(t=+t)?0:(t>0?r:e)(t)}},7466:function(t,e,r){var n=r(9958),i=Math.min;t.exports=function(t){return t>0?i(n(t),9007199254740991):0}},7908:function(t,e,r){var n=r(4488);t.exports=function(t){return Object(n(t))}},4590:function(t,e,r){var n=r(3002);t.exports=function(t,e){var r=n(t);if(r%e)throw RangeError("Wrong offset");return r}},3002:function(t,e,r){var n=r(9958);t.exports=function(t){var e=n(t);if(e<0)throw RangeError("The argument can't be less than 0");return e}},7593:function(t,e,r){var n=r(111);t.exports=function(t,e){if(!n(t))return t;var r,i;if(e&&"function"==typeof(r=t.toString)&&!n(i=r.call(t)))return i;if("function"==typeof(r=t.valueOf)&&!n(i=r.call(t)))return i;if(!e&&"function"==typeof(r=t.toString)&&!n(i=r.call(t)))return i;throw TypeError("Can't convert object to primitive value")}},1694:function(t,e,r){var n={};n[r(5112)("toStringTag")]="z",t.exports="[object z]"===String(n)},9843:function(t,e,r){"use strict";var n=r(2109),i=r(7854),o=r(9781),a=r(3832),s=r(260),c=r(3331),l=r(5787),u=r(9114),h=r(8880),f=r(7466),d=r(7067),p=r(4590),g=r(7593),m=r(6656),v=r(648),y=r(111),_=r(30),b=r(7674),A=r(8006).f,x=r(7321),S=r(2092).forEach,w=r(6340),C=r(3070),E=r(1236),k=r(9909),P=r(9587),R=k.get,T=k.set,O=C.f,L=E.f,F=Math.round,M=i.RangeError,I=c.ArrayBuffer,N=c.DataView,D=s.NATIVE_ARRAY_BUFFER_VIEWS,j=s.TYPED_ARRAY_TAG,U=s.TypedArray,W=s.TypedArrayPrototype,q=s.aTypedArrayConstructor,B=s.isTypedArray,H="BYTES_PER_ELEMENT",G="Wrong length",z=function(t,e){for(var r=0,n=e.length,i=new(q(t))(n);n>r;)i[r]=e[r++];return i},Y=function(t,e){O(t,e,{get:function(){return R(this)[e]}})},$=function(t){var e;return t instanceof I||"ArrayBuffer"==(e=v(t))||"SharedArrayBuffer"==e},V=function(t,e){return B(t)&&"symbol"!=typeof e&&e in t&&String(+e)==String(e)},X=function(t,e){return V(t,e=g(e,!0))?u(2,t[e]):L(t,e)},K=function(t,e,r){return!(V(t,e=g(e,!0))&&y(r)&&m(r,"value"))||m(r,"get")||m(r,"set")||r.configurable||m(r,"writable")&&!r.writable||m(r,"enumerable")&&!r.enumerable?O(t,e,r):(t[e]=r.value,t)};o?(D||(E.f=X,C.f=K,Y(W,"buffer"),Y(W,"byteOffset"),Y(W,"byteLength"),Y(W,"length")),n({target:"Object",stat:!0,forced:!D},{getOwnPropertyDescriptor:X,defineProperty:K}),t.exports=function(t,e,r){var o=t.match(/\d+$/)[0]/8,s=t+(r?"Clamped":"")+"Array",c="get"+t,u="set"+t,g=i[s],m=g,v=m&&m.prototype,C={},E=function(t,e){O(t,e,{get:function(){return function(t,e){var r=R(t);return r.view[c](e*o+r.byteOffset,!0)}(this,e)},set:function(t){return function(t,e,n){var i=R(t);r&&(n=(n=F(n))<0?0:n>255?255:255&n),i.view[u](e*o+i.byteOffset,n,!0)}(this,e,t)},enumerable:!0})};D?a&&(m=e((function(t,e,r,n){return l(t,m,s),P(y(e)?$(e)?void 0!==n?new g(e,p(r,o),n):void 0!==r?new g(e,p(r,o)):new g(e):B(e)?z(m,e):x.call(m,e):new g(d(e)),t,m)})),b&&b(m,U),S(A(g),(function(t){t in m||h(m,t,g[t])})),m.prototype=v):(m=e((function(t,e,r,n){l(t,m,s);var i,a,c,u=0,h=0;if(y(e)){if(!$(e))return B(e)?z(m,e):x.call(m,e);i=e,h=p(r,o);var g=e.byteLength;if(void 0===n){if(g%o)throw M(G);if((a=g-h)<0)throw M(G)}else if((a=f(n)*o)+h>g)throw M(G);c=a/o}else c=d(e),i=new I(a=c*o);for(T(t,{buffer:i,byteOffset:h,byteLength:a,length:c,view:new N(i)});u<c;)E(t,u++)})),b&&b(m,U),v=m.prototype=_(W)),v.constructor!==m&&h(v,"constructor",m),j&&h(v,j,s),C[s]=m,n({global:!0,forced:m!=g,sham:!D},C),H in m||h(m,H,o),H in v||h(v,H,o),w(s)}):t.exports=function(){}},3832:function(t,e,r){var n=r(7854),i=r(7293),o=r(7072),a=r(260).NATIVE_ARRAY_BUFFER_VIEWS,s=n.ArrayBuffer,c=n.Int8Array;t.exports=!a||!i((function(){c(1)}))||!i((function(){new c(-1)}))||!o((function(t){new c,new c(null),new c(1.5),new c(t)}),!0)||i((function(){return 1!==new c(new s(2),1,void 0).length}))},7321:function(t,e,r){var n=r(7908),i=r(7466),o=r(1246),a=r(7659),s=r(9974),c=r(260).aTypedArrayConstructor;t.exports=function(t){var e,r,l,u,h,f,d=n(t),p=arguments.length,g=p>1?arguments[1]:void 0,m=void 0!==g,v=o(d);if(null!=v&&!a(v))for(f=(h=v.call(d)).next,d=[];!(u=f.call(h)).done;)d.push(u.value);for(m&&p>2&&(g=s(g,arguments[2],2)),r=i(d.length),l=new(c(this))(r),e=0;r>e;e++)l[e]=m?g(d[e],e):d[e];return l}},9711:function(t){var e=0,r=Math.random();t.exports=function(t){return"Symbol("+String(void 0===t?"":t)+")_"+(++e+r).toString(36)}},3307:function(t,e,r){var n=r(133);t.exports=n&&!Symbol.sham&&"symbol"==typeof Symbol.iterator},6061:function(t,e,r){var n=r(5112);e.f=n},5112:function(t,e,r){var n=r(7854),i=r(2309),o=r(6656),a=r(9711),s=r(133),c=r(3307),l=i("wks"),u=n.Symbol,h=c?u:u&&u.withoutSetter||a;t.exports=function(t){return o(l,t)||(s&&o(u,t)?l[t]=u[t]:l[t]=h("Symbol."+t)),l[t]}},1361:function(t){t.exports="\t\n\v\f\r                　\u2028\u2029\ufeff"},9170:function(t,e,r){"use strict";var n=r(2109),i=r(9518),o=r(7674),a=r(30),s=r(8880),c=r(9114),l=r(408),u=function(t,e){var r=this;if(!(r instanceof u))return new u(t,e);o&&(r=o(new Error(void 0),i(r))),void 0!==e&&s(r,"message",String(e));var n=[];return l(t,n.push,{that:n}),s(r,"errors",n),r};u.prototype=a(Error.prototype,{constructor:c(5,u),message:c(5,""),name:c(5,"AggregateError")}),n({global:!0},{AggregateError:u})},8264:function(t,e,r){"use strict";var n=r(2109),i=r(7854),o=r(3331),a=r(6340),s=o.ArrayBuffer;n({global:!0,forced:i.ArrayBuffer!==s},{ArrayBuffer:s}),a("ArrayBuffer")},6938:function(t,e,r){var n=r(2109),i=r(260);n({target:"ArrayBuffer",stat:!0,forced:!i.NATIVE_ARRAY_BUFFER_VIEWS},{isView:i.isView})},9575:function(t,e,r){"use strict";var n=r(2109),i=r(7293),o=r(3331),a=r(9670),s=r(1400),c=r(7466),l=r(6707),u=o.ArrayBuffer,h=o.DataView,f=u.prototype.slice;n({target:"ArrayBuffer",proto:!0,unsafe:!0,forced:i((function(){return!new u(2).slice(1,void 0).byteLength}))},{slice:function(t,e){if(void 0!==f&&void 0===e)return f.call(a(this),t);for(var r=a(this).byteLength,n=s(t,r),i=s(void 0===e?r:e,r),o=new(l(this,u))(c(i-n)),d=new h(this),p=new h(o),g=0;n<i;)p.setUint8(g++,d.getUint8(n++));return o}})},2222:function(t,e,r){"use strict";var n=r(2109),i=r(7293),o=r(3157),a=r(111),s=r(7908),c=r(7466),l=r(6135),u=r(5417),h=r(1194),f=r(5112),d=r(7392),p=f("isConcatSpreadable"),g=9007199254740991,m="Maximum allowed index exceeded",v=d>=51||!i((function(){var t=[];return t[p]=!1,t.concat()[0]!==t})),y=h("concat"),_=function(t){if(!a(t))return!1;var e=t[p];return void 0!==e?!!e:o(t)};n({target:"Array",proto:!0,forced:!v||!y},{concat:function(t){var e,r,n,i,o,a=s(this),h=u(a,0),f=0;for(e=-1,n=arguments.length;e<n;e++)if(_(o=-1===e?a:arguments[e])){if(f+(i=c(o.length))>g)throw TypeError(m);for(r=0;r<i;r++,f++)r in o&&l(h,f,o[r])}else{if(f>=g)throw TypeError(m);l(h,f++,o)}return h.length=f,h}})},545:function(t,e,r){var n=r(2109),i=r(1048),o=r(1223);n({target:"Array",proto:!0},{copyWithin:i}),o("copyWithin")},6541:function(t,e,r){"use strict";var n=r(2109),i=r(2092).every,o=r(2133),a=r(9207),s=o("every"),c=a("every");n({target:"Array",proto:!0,forced:!s||!c},{every:function(t){return i(this,t,arguments.length>1?arguments[1]:void 0)}})},3290:function(t,e,r){var n=r(2109),i=r(1285),o=r(1223);n({target:"Array",proto:!0},{fill:i}),o("fill")},7327:function(t,e,r){"use strict";var n=r(2109),i=r(2092).filter,o=r(1194),a=r(9207),s=o("filter"),c=a("filter");n({target:"Array",proto:!0,forced:!s||!c},{filter:function(t){return i(this,t,arguments.length>1?arguments[1]:void 0)}})},4553:function(t,e,r){"use strict";var n=r(2109),i=r(2092).findIndex,o=r(1223),a=r(9207),s="findIndex",c=!0,l=a(s);s in[]&&Array(1).findIndex((function(){c=!1})),n({target:"Array",proto:!0,forced:c||!l},{findIndex:function(t){return i(this,t,arguments.length>1?arguments[1]:void 0)}}),o(s)},9826:function(t,e,r){"use strict";var n=r(2109),i=r(2092).find,o=r(1223),a=r(9207),s="find",c=!0,l=a(s);s in[]&&Array(1).find((function(){c=!1})),n({target:"Array",proto:!0,forced:c||!l},{find:function(t){return i(this,t,arguments.length>1?arguments[1]:void 0)}}),o(s)},6535:function(t,e,r){"use strict";var n=r(2109),i=r(6790),o=r(7908),a=r(7466),s=r(3099),c=r(5417);n({target:"Array",proto:!0},{flatMap:function(t){var e,r=o(this),n=a(r.length);return s(t),(e=c(r,0)).length=i(e,r,r,n,0,1,t,arguments.length>1?arguments[1]:void 0),e}})},4944:function(t,e,r){"use strict";var n=r(2109),i=r(6790),o=r(7908),a=r(7466),s=r(9958),c=r(5417);n({target:"Array",proto:!0},{flat:function(){var t=arguments.length?arguments[0]:void 0,e=o(this),r=a(e.length),n=c(e,0);return n.length=i(n,e,e,r,0,void 0===t?1:s(t)),n}})},9554:function(t,e,r){"use strict";var n=r(2109),i=r(8533);n({target:"Array",proto:!0,forced:[].forEach!=i},{forEach:i})},1038:function(t,e,r){var n=r(2109),i=r(8457);n({target:"Array",stat:!0,forced:!r(7072)((function(t){Array.from(t)}))},{from:i})},6699:function(t,e,r){"use strict";var n=r(2109),i=r(1318).includes,o=r(1223);n({target:"Array",proto:!0,forced:!r(9207)("indexOf",{ACCESSORS:!0,1:0})},{includes:function(t){return i(this,t,arguments.length>1?arguments[1]:void 0)}}),o("includes")},2772:function(t,e,r){"use strict";var n=r(2109),i=r(1318).indexOf,o=r(2133),a=r(9207),s=[].indexOf,c=!!s&&1/[1].indexOf(1,-0)<0,l=o("indexOf"),u=a("indexOf",{ACCESSORS:!0,1:0});n({target:"Array",proto:!0,forced:c||!l||!u},{indexOf:function(t){return c?s.apply(this,arguments)||0:i(this,t,arguments.length>1?arguments[1]:void 0)}})},9753:function(t,e,r){r(2109)({target:"Array",stat:!0},{isArray:r(3157)})},6992:function(t,e,r){"use strict";var n=r(5656),i=r(1223),o=r(7497),a=r(9909),s=r(654),c="Array Iterator",l=a.set,u=a.getterFor(c);t.exports=s(Array,"Array",(function(t,e){l(this,{type:c,target:n(t),index:0,kind:e})}),(function(){var t=u(this),e=t.target,r=t.kind,n=t.index++;return!e||n>=e.length?(t.target=void 0,{value:void 0,done:!0}):"keys"==r?{value:n,done:!1}:"values"==r?{value:e[n],done:!1}:{value:[n,e[n]],done:!1}}),"values"),o.Arguments=o.Array,i("keys"),i("values"),i("entries")},9600:function(t,e,r){"use strict";var n=r(2109),i=r(8361),o=r(5656),a=r(2133),s=[].join,c=i!=Object,l=a("join",",");n({target:"Array",proto:!0,forced:c||!l},{join:function(t){return s.call(o(this),void 0===t?",":t)}})},4986:function(t,e,r){var n=r(2109),i=r(6583);n({target:"Array",proto:!0,forced:i!==[].lastIndexOf},{lastIndexOf:i})},1249:function(t,e,r){"use strict";var n=r(2109),i=r(2092).map,o=r(1194),a=r(9207),s=o("map"),c=a("map");n({target:"Array",proto:!0,forced:!s||!c},{map:function(t){return i(this,t,arguments.length>1?arguments[1]:void 0)}})},6572:function(t,e,r){"use strict";var n=r(2109),i=r(7293),o=r(6135);n({target:"Array",stat:!0,forced:i((function(){function t(){}return!(Array.of.call(t)instanceof t)}))},{of:function(){for(var t=0,e=arguments.length,r=new("function"==typeof this?this:Array)(e);e>t;)o(r,t,arguments[t++]);return r.length=e,r}})},6644:function(t,e,r){"use strict";var n=r(2109),i=r(3671).right,o=r(2133),a=r(9207),s=r(7392),c=r(5268),l=o("reduceRight"),u=a("reduce",{1:0});n({target:"Array",proto:!0,forced:!l||!u||!c&&s>79&&s<83},{reduceRight:function(t){return i(this,t,arguments.length,arguments.length>1?arguments[1]:void 0)}})},5827:function(t,e,r){"use strict";var n=r(2109),i=r(3671).left,o=r(2133),a=r(9207),s=r(7392),c=r(5268),l=o("reduce"),u=a("reduce",{1:0});n({target:"Array",proto:!0,forced:!l||!u||!c&&s>79&&s<83},{reduce:function(t){return i(this,t,arguments.length,arguments.length>1?arguments[1]:void 0)}})},5069:function(t,e,r){"use strict";var n=r(2109),i=r(3157),o=[].reverse,a=[1,2];n({target:"Array",proto:!0,forced:String(a)===String(a.reverse())},{reverse:function(){return i(this)&&(this.length=this.length),o.call(this)}})},7042:function(t,e,r){"use strict";var n=r(2109),i=r(111),o=r(3157),a=r(1400),s=r(7466),c=r(5656),l=r(6135),u=r(5112),h=r(1194),f=r(9207),d=h("slice"),p=f("slice",{ACCESSORS:!0,0:0,1:2}),g=u("species"),m=[].slice,v=Math.max;n({target:"Array",proto:!0,forced:!d||!p},{slice:function(t,e){var r,n,u,h=c(this),f=s(h.length),d=a(t,f),p=a(void 0===e?f:e,f);if(o(h)&&("function"!=typeof(r=h.constructor)||r!==Array&&!o(r.prototype)?i(r)&&null===(r=r[g])&&(r=void 0):r=void 0,r===Array||void 0===r))return m.call(h,d,p);for(n=new(void 0===r?Array:r)(v(p-d,0)),u=0;d<p;d++,u++)d in h&&l(n,u,h[d]);return n.length=u,n}})},5212:function(t,e,r){"use strict";var n=r(2109),i=r(2092).some,o=r(2133),a=r(9207),s=o("some"),c=a("some");n({target:"Array",proto:!0,forced:!s||!c},{some:function(t){return i(this,t,arguments.length>1?arguments[1]:void 0)}})},2707:function(t,e,r){"use strict";var n=r(2109),i=r(3099),o=r(7908),a=r(7293),s=r(2133),c=[],l=c.sort,u=a((function(){c.sort(void 0)})),h=a((function(){c.sort(null)})),f=s("sort");n({target:"Array",proto:!0,forced:u||!h||!f},{sort:function(t){return void 0===t?l.call(o(this)):l.call(o(this),i(t))}})},8706:function(t,e,r){r(6340)("Array")},561:function(t,e,r){"use strict";var n=r(2109),i=r(1400),o=r(9958),a=r(7466),s=r(7908),c=r(5417),l=r(6135),u=r(1194),h=r(9207),f=u("splice"),d=h("splice",{ACCESSORS:!0,0:0,1:2}),p=Math.max,g=Math.min,m=9007199254740991,v="Maximum allowed length exceeded";n({target:"Array",proto:!0,forced:!f||!d},{splice:function(t,e){var r,n,u,h,f,d,y=s(this),_=a(y.length),b=i(t,_),A=arguments.length;if(0===A?r=n=0:1===A?(r=0,n=_-b):(r=A-2,n=g(p(o(e),0),_-b)),_+r-n>m)throw TypeError(v);for(u=c(y,n),h=0;h<n;h++)(f=b+h)in y&&l(u,h,y[f]);if(u.length=n,r<n){for(h=b;h<_-n;h++)d=h+r,(f=h+n)in y?y[d]=y[f]:delete y[d];for(h=_;h>_-n+r;h--)delete y[h-1]}else if(r>n)for(h=_-n;h>b;h--)d=h+r-1,(f=h+n-1)in y?y[d]=y[f]:delete y[d];for(h=0;h<r;h++)y[h+b]=arguments[h+2];return y.length=_-n+r,u}})},9244:function(t,e,r){r(1223)("flatMap")},3792:function(t,e,r){r(1223)("flat")},6716:function(t,e,r){var n=r(2109),i=r(3331);n({global:!0,forced:!r(4019)},{DataView:i.DataView})},3843:function(t,e,r){r(2109)({target:"Date",stat:!0},{now:function(){return(new Date).getTime()}})},8733:function(t,e,r){var n=r(2109),i=r(5573);n({target:"Date",proto:!0,forced:Date.prototype.toISOString!==i},{toISOString:i})},5735:function(t,e,r){"use strict";var n=r(2109),i=r(7293),o=r(7908),a=r(7593);n({target:"Date",proto:!0,forced:i((function(){return null!==new Date(NaN).toJSON()||1!==Date.prototype.toJSON.call({toISOString:function(){return 1}})}))},{toJSON:function(t){var e=o(this),r=a(e);return"number"!=typeof r||isFinite(r)?e.toISOString():null}})},6078:function(t,e,r){var n=r(8880),i=r(8709),o=r(5112)("toPrimitive"),a=Date.prototype;o in a||n(a,o,i)},3710:function(t,e,r){var n=r(1320),i=Date.prototype,o="Invalid Date",a=i.toString,s=i.getTime;new Date(NaN)+""!=o&&n(i,"toString",(function(){var t=s.call(this);return t==t?a.call(this):o}))},4812:function(t,e,r){r(2109)({target:"Function",proto:!0},{bind:r(7065)})},4855:function(t,e,r){"use strict";var n=r(111),i=r(3070),o=r(9518),a=r(5112)("hasInstance"),s=Function.prototype;a in s||i.f(s,a,{value:function(t){if("function"!=typeof this||!n(t))return!1;if(!n(this.prototype))return t instanceof this;for(;t=o(t);)if(this.prototype===t)return!0;return!1}})},8309:function(t,e,r){var n=r(9781),i=r(3070).f,o=Function.prototype,a=o.toString,s=/^\s*function ([^ (]*)/,c="name";n&&!(c in o)&&i(o,c,{configurable:!0,get:function(){try{return a.call(this).match(s)[1]}catch(t){return""}}})},5837:function(t,e,r){r(2109)({global:!0},{globalThis:r(7854)})},8862:function(t,e,r){var n=r(2109),i=r(5005),o=r(7293),a=i("JSON","stringify"),s=/[\uD800-\uDFFF]/g,c=/^[\uD800-\uDBFF]$/,l=/^[\uDC00-\uDFFF]$/,u=function(t,e,r){var n=r.charAt(e-1),i=r.charAt(e+1);return c.test(t)&&!l.test(i)||l.test(t)&&!c.test(n)?"\\u"+t.charCodeAt(0).toString(16):t},h=o((function(){return'"\\udf06\\ud834"'!==a("\udf06\ud834")||'"\\udead"'!==a("\udead")}));a&&n({target:"JSON",stat:!0,forced:h},{stringify:function(t,e,r){var n=a.apply(null,arguments);return"string"==typeof n?n.replace(s,u):n}})},3706:function(t,e,r){var n=r(7854);r(8003)(n.JSON,"JSON",!0)},1532:function(t,e,r){"use strict";var n=r(7710),i=r(5631);t.exports=n("Map",(function(t){return function(){return t(this,arguments.length?arguments[0]:void 0)}}),i)},9752:function(t,e,r){var n=r(2109),i=r(6513),o=Math.acosh,a=Math.log,s=Math.sqrt,c=Math.LN2;n({target:"Math",stat:!0,forced:!o||710!=Math.floor(o(Number.MAX_VALUE))||o(1/0)!=1/0},{acosh:function(t){return(t=+t)<1?NaN:t>94906265.62425156?a(t)+c:i(t-1+s(t-1)*s(t+1))}})},2376:function(t,e,r){var n=r(2109),i=Math.asinh,o=Math.log,a=Math.sqrt;n({target:"Math",stat:!0,forced:!(i&&1/i(0)>0)},{asinh:function t(e){return isFinite(e=+e)&&0!=e?e<0?-t(-e):o(e+a(e*e+1)):e}})},3181:function(t,e,r){var n=r(2109),i=Math.atanh,o=Math.log;n({target:"Math",stat:!0,forced:!(i&&1/i(-0)<0)},{atanh:function(t){return 0==(t=+t)?t:o((1+t)/(1-t))/2}})},3484:function(t,e,r){var n=r(2109),i=r(4310),o=Math.abs,a=Math.pow;n({target:"Math",stat:!0},{cbrt:function(t){return i(t=+t)*a(o(t),1/3)}})},2388:function(t,e,r){var n=r(2109),i=Math.floor,o=Math.log,a=Math.LOG2E;n({target:"Math",stat:!0},{clz32:function(t){return(t>>>=0)?31-i(o(t+.5)*a):32}})},8621:function(t,e,r){var n=r(2109),i=r(6736),o=Math.cosh,a=Math.abs,s=Math.E;n({target:"Math",stat:!0,forced:!o||o(710)===1/0},{cosh:function(t){var e=i(a(t)-1)+1;return(e+1/(e*s*s))*(s/2)}})},403:function(t,e,r){var n=r(2109),i=r(6736);n({target:"Math",stat:!0,forced:i!=Math.expm1},{expm1:i})},4755:function(t,e,r){r(2109)({target:"Math",stat:!0},{fround:r(6130)})},5438:function(t,e,r){var n=r(2109),i=Math.hypot,o=Math.abs,a=Math.sqrt;n({target:"Math",stat:!0,forced:!!i&&i(1/0,NaN)!==1/0},{hypot:function(t,e){for(var r,n,i=0,s=0,c=arguments.length,l=0;s<c;)l<(r=o(arguments[s++]))?(i=i*(n=l/r)*n+1,l=r):i+=r>0?(n=r/l)*n:r;return l===1/0?1/0:l*a(i)}})},332:function(t,e,r){var n=r(2109),i=r(7293),o=Math.imul;n({target:"Math",stat:!0,forced:i((function(){return-5!=o(4294967295,5)||2!=o.length}))},{imul:function(t,e){var r=65535,n=+t,i=+e,o=r&n,a=r&i;return 0|o*a+((r&n>>>16)*a+o*(r&i>>>16)<<16>>>0)}})},658:function(t,e,r){var n=r(2109),i=Math.log,o=Math.LOG10E;n({target:"Math",stat:!0},{log10:function(t){return i(t)*o}})},197:function(t,e,r){r(2109)({target:"Math",stat:!0},{log1p:r(6513)})},4914:function(t,e,r){var n=r(2109),i=Math.log,o=Math.LN2;n({target:"Math",stat:!0},{log2:function(t){return i(t)/o}})},2420:function(t,e,r){r(2109)({target:"Math",stat:!0},{sign:r(4310)})},160:function(t,e,r){var n=r(2109),i=r(7293),o=r(6736),a=Math.abs,s=Math.exp,c=Math.E;n({target:"Math",stat:!0,forced:i((function(){return-2e-17!=Math.sinh(-2e-17)}))},{sinh:function(t){return a(t=+t)<1?(o(t)-o(-t))/2:(s(t-1)-s(-t-1))*(c/2)}})},970:function(t,e,r){var n=r(2109),i=r(6736),o=Math.exp;n({target:"Math",stat:!0},{tanh:function(t){var e=i(t=+t),r=i(-t);return e==1/0?1:r==1/0?-1:(e-r)/(o(t)+o(-t))}})},2703:function(t,e,r){r(8003)(Math,"Math",!0)},3689:function(t,e,r){var n=r(2109),i=Math.ceil,o=Math.floor;n({target:"Math",stat:!0},{trunc:function(t){return(t>0?o:i)(t)}})},9653:function(t,e,r){"use strict";var n=r(9781),i=r(7854),o=r(4705),a=r(1320),s=r(6656),c=r(4326),l=r(9587),u=r(7593),h=r(7293),f=r(30),d=r(8006).f,p=r(1236).f,g=r(3070).f,m=r(3111).trim,v="Number",y=i.Number,_=y.prototype,b=c(f(_))==v,A=function(t){var e,r,n,i,o,a,s,c,l=u(t,!1);if("string"==typeof l&&l.length>2)if(43===(e=(l=m(l)).charCodeAt(0))||45===e){if(88===(r=l.charCodeAt(2))||120===r)return NaN}else if(48===e){switch(l.charCodeAt(1)){case 66:case 98:n=2,i=49;break;case 79:case 111:n=8,i=55;break;default:return+l}for(a=(o=l.slice(2)).length,s=0;s<a;s++)if((c=o.charCodeAt(s))<48||c>i)return NaN;return parseInt(o,n)}return+l};if(o(v,!y(" 0o1")||!y("0b1")||y("+0x1"))){for(var x,S=function(t){var e=arguments.length<1?0:t,r=this;return r instanceof S&&(b?h((function(){_.valueOf.call(r)})):c(r)!=v)?l(new y(A(e)),r,S):A(e)},w=n?d(y):"MAX_VALUE,MIN_VALUE,NaN,NEGATIVE_INFINITY,POSITIVE_INFINITY,EPSILON,isFinite,isInteger,isNaN,isSafeInteger,MAX_SAFE_INTEGER,MIN_SAFE_INTEGER,parseFloat,parseInt,isInteger,fromString,range".split(","),C=0;w.length>C;C++)s(y,x=w[C])&&!s(S,x)&&g(S,x,p(y,x));S.prototype=_,_.constructor=S,a(i,v,S)}},3299:function(t,e,r){r(2109)({target:"Number",stat:!0},{EPSILON:Math.pow(2,-52)})},5192:function(t,e,r){r(2109)({target:"Number",stat:!0},{isFinite:r(7023)})},3161:function(t,e,r){r(2109)({target:"Number",stat:!0},{isInteger:r(8730)})},4048:function(t,e,r){r(2109)({target:"Number",stat:!0},{isNaN:function(t){return t!=t}})},8285:function(t,e,r){var n=r(2109),i=r(8730),o=Math.abs;n({target:"Number",stat:!0},{isSafeInteger:function(t){return i(t)&&o(t)<=9007199254740991}})},4363:function(t,e,r){r(2109)({target:"Number",stat:!0},{MAX_SAFE_INTEGER:9007199254740991})},5994:function(t,e,r){r(2109)({target:"Number",stat:!0},{MIN_SAFE_INTEGER:-9007199254740991})},1874:function(t,e,r){var n=r(2109),i=r(2814);n({target:"Number",stat:!0,forced:Number.parseFloat!=i},{parseFloat:i})},9494:function(t,e,r){var n=r(2109),i=r(3009);n({target:"Number",stat:!0,forced:Number.parseInt!=i},{parseInt:i})},6977:function(t,e,r){"use strict";var n=r(2109),i=r(9958),o=r(863),a=r(8415),s=r(7293),c=1..toFixed,l=Math.floor,u=function(t,e,r){return 0===e?r:e%2==1?u(t,e-1,r*t):u(t*t,e/2,r)};n({target:"Number",proto:!0,forced:c&&("0.000"!==8e-5.toFixed(3)||"1"!==.9.toFixed(0)||"1.25"!==1.255.toFixed(2)||"1000000000000000128"!==(0xde0b6b3a7640080).toFixed(0))||!s((function(){c.call({})}))},{toFixed:function(t){var e,r,n,s,c=o(this),h=i(t),f=[0,0,0,0,0,0],d="",p="0",g=function(t,e){for(var r=-1,n=e;++r<6;)n+=t*f[r],f[r]=n%1e7,n=l(n/1e7)},m=function(t){for(var e=6,r=0;--e>=0;)r+=f[e],f[e]=l(r/t),r=r%t*1e7},v=function(){for(var t=6,e="";--t>=0;)if(""!==e||0===t||0!==f[t]){var r=String(f[t]);e=""===e?r:e+a.call("0",7-r.length)+r}return e};if(h<0||h>20)throw RangeError("Incorrect fraction digits");if(c!=c)return"NaN";if(c<=-1e21||c>=1e21)return String(c);if(c<0&&(d="-",c=-c),c>1e-21)if(r=(e=function(t){for(var e=0,r=t;r>=4096;)e+=12,r/=4096;for(;r>=2;)e+=1,r/=2;return e}(c*u(2,69,1))-69)<0?c*u(2,-e,1):c/u(2,e,1),r*=4503599627370496,(e=52-e)>0){for(g(0,r),n=h;n>=7;)g(1e7,0),n-=7;for(g(u(10,n,1),0),n=e-1;n>=23;)m(1<<23),n-=23;m(1<<n),g(1,1),m(2),p=v()}else g(0,r),g(1<<-e,0),p=v()+a.call("0",h);return h>0?d+((s=p.length)<=h?"0."+a.call("0",h-s)+p:p.slice(0,s-h)+"."+p.slice(s-h)):d+p}})},5147:function(t,e,r){"use strict";var n=r(2109),i=r(7293),o=r(863),a=1..toPrecision;n({target:"Number",proto:!0,forced:i((function(){return"1"!==a.call(1,void 0)}))||!i((function(){a.call({})}))},{toPrecision:function(t){return void 0===t?a.call(o(this)):a.call(o(this),t)}})},9601:function(t,e,r){var n=r(2109),i=r(1574);n({target:"Object",stat:!0,forced:Object.assign!==i},{assign:i})},8011:function(t,e,r){r(2109)({target:"Object",stat:!0,sham:!r(9781)},{create:r(30)})},9595:function(t,e,r){"use strict";var n=r(2109),i=r(9781),o=r(9026),a=r(7908),s=r(3099),c=r(3070);i&&n({target:"Object",proto:!0,forced:o},{__defineGetter__:function(t,e){c.f(a(this),t,{get:s(e),enumerable:!0,configurable:!0})}})},3321:function(t,e,r){var n=r(2109),i=r(9781);n({target:"Object",stat:!0,forced:!i,sham:!i},{defineProperties:r(6048)})},9070:function(t,e,r){var n=r(2109),i=r(9781);n({target:"Object",stat:!0,forced:!i,sham:!i},{defineProperty:r(3070).f})},5500:function(t,e,r){"use strict";var n=r(2109),i=r(9781),o=r(9026),a=r(7908),s=r(3099),c=r(3070);i&&n({target:"Object",proto:!0,forced:o},{__defineSetter__:function(t,e){c.f(a(this),t,{set:s(e),enumerable:!0,configurable:!0})}})},9720:function(t,e,r){var n=r(2109),i=r(4699).entries;n({target:"Object",stat:!0},{entries:function(t){return i(t)}})},3371:function(t,e,r){var n=r(2109),i=r(6677),o=r(7293),a=r(111),s=r(2423).onFreeze,c=Object.freeze;n({target:"Object",stat:!0,forced:o((function(){c(1)})),sham:!i},{freeze:function(t){return c&&a(t)?c(s(t)):t}})},8559:function(t,e,r){var n=r(2109),i=r(408),o=r(6135);n({target:"Object",stat:!0},{fromEntries:function(t){var e={};return i(t,(function(t,r){o(e,t,r)}),{AS_ENTRIES:!0}),e}})},5003:function(t,e,r){var n=r(2109),i=r(7293),o=r(5656),a=r(1236).f,s=r(9781),c=i((function(){a(1)}));n({target:"Object",stat:!0,forced:!s||c,sham:!s},{getOwnPropertyDescriptor:function(t,e){return a(o(t),e)}})},9337:function(t,e,r){var n=r(2109),i=r(9781),o=r(3887),a=r(5656),s=r(1236),c=r(6135);n({target:"Object",stat:!0,sham:!i},{getOwnPropertyDescriptors:function(t){for(var e,r,n=a(t),i=s.f,l=o(n),u={},h=0;l.length>h;)void 0!==(r=i(n,e=l[h++]))&&c(u,e,r);return u}})},6210:function(t,e,r){var n=r(2109),i=r(7293),o=r(1156).f;n({target:"Object",stat:!0,forced:i((function(){return!Object.getOwnPropertyNames(1)}))},{getOwnPropertyNames:o})},489:function(t,e,r){var n=r(2109),i=r(7293),o=r(7908),a=r(9518),s=r(8544);n({target:"Object",stat:!0,forced:i((function(){a(1)})),sham:!s},{getPrototypeOf:function(t){return a(o(t))}})},1825:function(t,e,r){var n=r(2109),i=r(7293),o=r(111),a=Object.isExtensible;n({target:"Object",stat:!0,forced:i((function(){a(1)}))},{isExtensible:function(t){return!!o(t)&&(!a||a(t))}})},8410:function(t,e,r){var n=r(2109),i=r(7293),o=r(111),a=Object.isFrozen;n({target:"Object",stat:!0,forced:i((function(){a(1)}))},{isFrozen:function(t){return!o(t)||!!a&&a(t)}})},2200:function(t,e,r){var n=r(2109),i=r(7293),o=r(111),a=Object.isSealed;n({target:"Object",stat:!0,forced:i((function(){a(1)}))},{isSealed:function(t){return!o(t)||!!a&&a(t)}})},3304:function(t,e,r){r(2109)({target:"Object",stat:!0},{is:r(1150)})},7941:function(t,e,r){var n=r(2109),i=r(7908),o=r(1956);n({target:"Object",stat:!0,forced:r(7293)((function(){o(1)}))},{keys:function(t){return o(i(t))}})},4869:function(t,e,r){"use strict";var n=r(2109),i=r(9781),o=r(9026),a=r(7908),s=r(7593),c=r(9518),l=r(1236).f;i&&n({target:"Object",proto:!0,forced:o},{__lookupGetter__:function(t){var e,r=a(this),n=s(t,!0);do{if(e=l(r,n))return e.get}while(r=c(r))}})},3952:function(t,e,r){"use strict";var n=r(2109),i=r(9781),o=r(9026),a=r(7908),s=r(7593),c=r(9518),l=r(1236).f;i&&n({target:"Object",proto:!0,forced:o},{__lookupSetter__:function(t){var e,r=a(this),n=s(t,!0);do{if(e=l(r,n))return e.set}while(r=c(r))}})},7227:function(t,e,r){var n=r(2109),i=r(111),o=r(2423).onFreeze,a=r(6677),s=r(7293),c=Object.preventExtensions;n({target:"Object",stat:!0,forced:s((function(){c(1)})),sham:!a},{preventExtensions:function(t){return c&&i(t)?c(o(t)):t}})},514:function(t,e,r){var n=r(2109),i=r(111),o=r(2423).onFreeze,a=r(6677),s=r(7293),c=Object.seal;n({target:"Object",stat:!0,forced:s((function(){c(1)})),sham:!a},{seal:function(t){return c&&i(t)?c(o(t)):t}})},8304:function(t,e,r){r(2109)({target:"Object",stat:!0},{setPrototypeOf:r(7674)})},1539:function(t,e,r){var n=r(1694),i=r(1320),o=r(288);n||i(Object.prototype,"toString",o,{unsafe:!0})},6833:function(t,e,r){var n=r(2109),i=r(4699).values;n({target:"Object",stat:!0},{values:function(t){return i(t)}})},4678:function(t,e,r){var n=r(2109),i=r(2814);n({global:!0,forced:parseFloat!=i},{parseFloat:i})},1058:function(t,e,r){var n=r(2109),i=r(3009);n({global:!0,forced:parseInt!=i},{parseInt:i})},7922:function(t,e,r){"use strict";var n=r(2109),i=r(3099),o=r(8523),a=r(2534),s=r(408);n({target:"Promise",stat:!0},{allSettled:function(t){var e=this,r=o.f(e),n=r.resolve,c=r.reject,l=a((function(){var r=i(e.resolve),o=[],a=0,c=1;s(t,(function(t){var i=a++,s=!1;o.push(void 0),c++,r.call(e,t).then((function(t){s||(s=!0,o[i]={status:"fulfilled",value:t},--c||n(o))}),(function(t){s||(s=!0,o[i]={status:"rejected",reason:t},--c||n(o))}))})),--c||n(o)}));return l.error&&c(l.value),r.promise}})},4668:function(t,e,r){"use strict";var n=r(2109),i=r(3099),o=r(5005),a=r(8523),s=r(2534),c=r(408),l="No one promise resolved";n({target:"Promise",stat:!0},{any:function(t){var e=this,r=a.f(e),n=r.resolve,u=r.reject,h=s((function(){var r=i(e.resolve),a=[],s=0,h=1,f=!1;c(t,(function(t){var i=s++,c=!1;a.push(void 0),h++,r.call(e,t).then((function(t){c||f||(f=!0,n(t))}),(function(t){c||f||(c=!0,a[i]=t,--h||u(new(o("AggregateError"))(a,l)))}))})),--h||u(new(o("AggregateError"))(a,l))}));return h.error&&u(h.value),r.promise}})},7727:function(t,e,r){"use strict";var n=r(2109),i=r(1913),o=r(3366),a=r(7293),s=r(5005),c=r(6707),l=r(9478),u=r(1320);n({target:"Promise",proto:!0,real:!0,forced:!!o&&a((function(){o.prototype.finally.call({then:function(){}},(function(){}))}))},{finally:function(t){var e=c(this,s("Promise")),r="function"==typeof t;return this.then(r?function(r){return l(e,t()).then((function(){return r}))}:t,r?function(r){return l(e,t()).then((function(){throw r}))}:t)}}),i||"function"!=typeof o||o.prototype.finally||u(o.prototype,"finally",s("Promise").prototype.finally)},8674:function(t,e,r){"use strict";var n,i,o,a,s=r(2109),c=r(1913),l=r(7854),u=r(5005),h=r(3366),f=r(1320),d=r(2248),p=r(8003),g=r(6340),m=r(111),v=r(3099),y=r(5787),_=r(2788),b=r(408),A=r(7072),x=r(6707),S=r(261).set,w=r(5948),C=r(9478),E=r(842),k=r(8523),P=r(2534),R=r(9909),T=r(4705),O=r(5112),L=r(5268),F=r(7392),M=O("species"),I="Promise",N=R.get,D=R.set,j=R.getterFor(I),U=h,W=l.TypeError,q=l.document,B=l.process,H=u("fetch"),G=k.f,z=G,Y=!!(q&&q.createEvent&&l.dispatchEvent),$="function"==typeof PromiseRejectionEvent,V="unhandledrejection",X=T(I,(function(){if(_(U)===String(U)){if(66===F)return!0;if(!L&&!$)return!0}if(c&&!U.prototype.finally)return!0;if(F>=51&&/native code/.test(U))return!1;var t=U.resolve(1),e=function(t){t((function(){}),(function(){}))};return(t.constructor={})[M]=e,!(t.then((function(){}))instanceof e)})),K=X||!A((function(t){U.all(t).catch((function(){}))})),J=function(t){var e;return!(!m(t)||"function"!=typeof(e=t.then))&&e},Q=function(t,e){if(!t.notified){t.notified=!0;var r=t.reactions;w((function(){for(var n=t.value,i=1==t.state,o=0;r.length>o;){var a,s,c,l=r[o++],u=i?l.ok:l.fail,h=l.resolve,f=l.reject,d=l.domain;try{u?(i||(2===t.rejection&&rt(t),t.rejection=1),!0===u?a=n:(d&&d.enter(),a=u(n),d&&(d.exit(),c=!0)),a===l.promise?f(W("Promise-chain cycle")):(s=J(a))?s.call(a,h,f):h(a)):f(n)}catch(t){d&&!c&&d.exit(),f(t)}}t.reactions=[],t.notified=!1,e&&!t.rejection&&tt(t)}))}},Z=function(t,e,r){var n,i;Y?((n=q.createEvent("Event")).promise=e,n.reason=r,n.initEvent(t,!1,!0),l.dispatchEvent(n)):n={promise:e,reason:r},!$&&(i=l["on"+t])?i(n):t===V&&E("Unhandled promise rejection",r)},tt=function(t){S.call(l,(function(){var e,r=t.facade,n=t.value;if(et(t)&&(e=P((function(){L?B.emit("unhandledRejection",n,r):Z(V,r,n)})),t.rejection=L||et(t)?2:1,e.error))throw e.value}))},et=function(t){return 1!==t.rejection&&!t.parent},rt=function(t){S.call(l,(function(){var e=t.facade;L?B.emit("rejectionHandled",e):Z("rejectionhandled",e,t.value)}))},nt=function(t,e,r){return function(n){t(e,n,r)}},it=function(t,e,r){t.done||(t.done=!0,r&&(t=r),t.value=e,t.state=2,Q(t,!0))},ot=function(t,e,r){if(!t.done){t.done=!0,r&&(t=r);try{if(t.facade===e)throw W("Promise can't be resolved itself");var n=J(e);n?w((function(){var r={done:!1};try{n.call(e,nt(ot,r,t),nt(it,r,t))}catch(e){it(r,e,t)}})):(t.value=e,t.state=1,Q(t,!1))}catch(e){it({done:!1},e,t)}}};X&&(U=function(t){y(this,U,I),v(t),n.call(this);var e=N(this);try{t(nt(ot,e),nt(it,e))}catch(t){it(e,t)}},(n=function(t){D(this,{type:I,done:!1,notified:!1,parent:!1,reactions:[],rejection:!1,state:0,value:void 0})}).prototype=d(U.prototype,{then:function(t,e){var r=j(this),n=G(x(this,U));return n.ok="function"!=typeof t||t,n.fail="function"==typeof e&&e,n.domain=L?B.domain:void 0,r.parent=!0,r.reactions.push(n),0!=r.state&&Q(r,!1),n.promise},catch:function(t){return this.then(void 0,t)}}),i=function(){var t=new n,e=N(t);this.promise=t,this.resolve=nt(ot,e),this.reject=nt(it,e)},k.f=G=function(t){return t===U||t===o?new i(t):z(t)},c||"function"!=typeof h||(a=h.prototype.then,f(h.prototype,"then",(function(t,e){var r=this;return new U((function(t,e){a.call(r,t,e)})).then(t,e)}),{unsafe:!0}),"function"==typeof H&&s({global:!0,enumerable:!0,forced:!0},{fetch:function(t){return C(U,H.apply(l,arguments))}}))),s({global:!0,wrap:!0,forced:X},{Promise:U}),p(U,I,!1,!0),g(I),o=u(I),s({target:I,stat:!0,forced:X},{reject:function(t){var e=G(this);return e.reject.call(void 0,t),e.promise}}),s({target:I,stat:!0,forced:c||X},{resolve:function(t){return C(c&&this===o?U:this,t)}}),s({target:I,stat:!0,forced:K},{all:function(t){var e=this,r=G(e),n=r.resolve,i=r.reject,o=P((function(){var r=v(e.resolve),o=[],a=0,s=1;b(t,(function(t){var c=a++,l=!1;o.push(void 0),s++,r.call(e,t).then((function(t){l||(l=!0,o[c]=t,--s||n(o))}),i)})),--s||n(o)}));return o.error&&i(o.value),r.promise},race:function(t){var e=this,r=G(e),n=r.reject,i=P((function(){var i=v(e.resolve);b(t,(function(t){i.call(e,t).then(r.resolve,n)}))}));return i.error&&n(i.value),r.promise}})},224:function(t,e,r){var n=r(2109),i=r(5005),o=r(3099),a=r(9670),s=r(7293),c=i("Reflect","apply"),l=Function.apply;n({target:"Reflect",stat:!0,forced:!s((function(){c((function(){}))}))},{apply:function(t,e,r){return o(t),a(r),c?c(t,e,r):l.call(t,e,r)}})},2419:function(t,e,r){var n=r(2109),i=r(5005),o=r(3099),a=r(9670),s=r(111),c=r(30),l=r(7065),u=r(7293),h=i("Reflect","construct"),f=u((function(){function t(){}return!(h((function(){}),[],t)instanceof t)})),d=!u((function(){h((function(){}))})),p=f||d;n({target:"Reflect",stat:!0,forced:p,sham:p},{construct:function(t,e){o(t),a(e);var r=arguments.length<3?t:o(arguments[2]);if(d&&!f)return h(t,e,r);if(t==r){switch(e.length){case 0:return new t;case 1:return new t(e[0]);case 2:return new t(e[0],e[1]);case 3:return new t(e[0],e[1],e[2]);case 4:return new t(e[0],e[1],e[2],e[3])}var n=[null];return n.push.apply(n,e),new(l.apply(t,n))}var i=r.prototype,u=c(s(i)?i:Object.prototype),p=Function.apply.call(t,u,e);return s(p)?p:u}})},9596:function(t,e,r){var n=r(2109),i=r(9781),o=r(9670),a=r(7593),s=r(3070);n({target:"Reflect",stat:!0,forced:r(7293)((function(){Reflect.defineProperty(s.f({},1,{value:1}),1,{value:2})})),sham:!i},{defineProperty:function(t,e,r){o(t);var n=a(e,!0);o(r);try{return s.f(t,n,r),!0}catch(t){return!1}}})},2586:function(t,e,r){var n=r(2109),i=r(9670),o=r(1236).f;n({target:"Reflect",stat:!0},{deleteProperty:function(t,e){var r=o(i(t),e);return!(r&&!r.configurable)&&delete t[e]}})},5683:function(t,e,r){var n=r(2109),i=r(9781),o=r(9670),a=r(1236);n({target:"Reflect",stat:!0,sham:!i},{getOwnPropertyDescriptor:function(t,e){return a.f(o(t),e)}})},9361:function(t,e,r){var n=r(2109),i=r(9670),o=r(9518);n({target:"Reflect",stat:!0,sham:!r(8544)},{getPrototypeOf:function(t){return o(i(t))}})},4819:function(t,e,r){var n=r(2109),i=r(111),o=r(9670),a=r(6656),s=r(1236),c=r(9518);n({target:"Reflect",stat:!0},{get:function t(e,r){var n,l,u=arguments.length<3?e:arguments[2];return o(e)===u?e[r]:(n=s.f(e,r))?a(n,"value")?n.value:void 0===n.get?void 0:n.get.call(u):i(l=c(e))?t(l,r,u):void 0}})},1037:function(t,e,r){r(2109)({target:"Reflect",stat:!0},{has:function(t,e){return e in t}})},5898:function(t,e,r){var n=r(2109),i=r(9670),o=Object.isExtensible;n({target:"Reflect",stat:!0},{isExtensible:function(t){return i(t),!o||o(t)}})},7556:function(t,e,r){r(2109)({target:"Reflect",stat:!0},{ownKeys:r(3887)})},4361:function(t,e,r){var n=r(2109),i=r(5005),o=r(9670);n({target:"Reflect",stat:!0,sham:!r(6677)},{preventExtensions:function(t){o(t);try{var e=i("Object","preventExtensions");return e&&e(t),!0}catch(t){return!1}}})},9532:function(t,e,r){var n=r(2109),i=r(9670),o=r(6077),a=r(7674);a&&n({target:"Reflect",stat:!0},{setPrototypeOf:function(t,e){i(t),o(e);try{return a(t,e),!0}catch(t){return!1}}})},3593:function(t,e,r){var n=r(2109),i=r(9670),o=r(111),a=r(6656),s=r(7293),c=r(3070),l=r(1236),u=r(9518),h=r(9114);n({target:"Reflect",stat:!0,forced:s((function(){var t=function(){},e=c.f(new t,"a",{configurable:!0});return!1!==Reflect.set(t.prototype,"a",1,e)}))},{set:function t(e,r,n){var s,f,d=arguments.length<4?e:arguments[3],p=l.f(i(e),r);if(!p){if(o(f=u(e)))return t(f,r,n,d);p=h(0)}if(a(p,"value")){if(!1===p.writable||!o(d))return!1;if(s=l.f(d,r)){if(s.get||s.set||!1===s.writable)return!1;s.value=n,c.f(d,r,s)}else c.f(d,r,h(0,n));return!0}return void 0!==p.set&&(p.set.call(d,n),!0)}})},1299:function(t,e,r){var n=r(2109),i=r(7854),o=r(8003);n({global:!0},{Reflect:{}}),o(i.Reflect,"Reflect",!0)},4603:function(t,e,r){var n=r(9781),i=r(7854),o=r(4705),a=r(9587),s=r(3070).f,c=r(8006).f,l=r(7850),u=r(7066),h=r(2999),f=r(1320),d=r(7293),p=r(9909).set,g=r(6340),m=r(5112)("match"),v=i.RegExp,y=v.prototype,_=/a/g,b=/a/g,A=new v(_)!==_,x=h.UNSUPPORTED_Y;if(n&&o("RegExp",!A||x||d((function(){return b[m]=!1,v(_)!=_||v(b)==b||"/a/i"!=v(_,"i")})))){for(var S=function(t,e){var r,n=this instanceof S,i=l(t),o=void 0===e;if(!n&&i&&t.constructor===S&&o)return t;A?i&&!o&&(t=t.source):t instanceof S&&(o&&(e=u.call(t)),t=t.source),x&&(r=!!e&&e.indexOf("y")>-1)&&(e=e.replace(/y/g,""));var s=a(A?new v(t,e):v(t,e),n?this:y,S);return x&&r&&p(s,{sticky:r}),s},w=function(t){t in S||s(S,t,{configurable:!0,get:function(){return v[t]},set:function(e){v[t]=e}})},C=c(v),E=0;C.length>E;)w(C[E++]);y.constructor=S,S.prototype=y,f(i,"RegExp",S)}g("RegExp")},4916:function(t,e,r){"use strict";var n=r(2109),i=r(2261);n({target:"RegExp",proto:!0,forced:/./.exec!==i},{exec:i})},2087:function(t,e,r){var n=r(9781),i=r(3070),o=r(7066),a=r(2999).UNSUPPORTED_Y;n&&("g"!=/./g.flags||a)&&i.f(RegExp.prototype,"flags",{configurable:!0,get:o})},8386:function(t,e,r){var n=r(9781),i=r(2999).UNSUPPORTED_Y,o=r(3070).f,a=r(9909).get,s=RegExp.prototype;n&&i&&o(RegExp.prototype,"sticky",{configurable:!0,get:function(){if(this!==s){if(this instanceof RegExp)return!!a(this).sticky;throw TypeError("Incompatible receiver, RegExp required")}}})},7601:function(t,e,r){"use strict";r(4916);var n,i,o=r(2109),a=r(111),s=(n=!1,(i=/[ac]/).exec=function(){return n=!0,/./.exec.apply(this,arguments)},!0===i.test("abc")&&n),c=/./.test;o({target:"RegExp",proto:!0,forced:!s},{test:function(t){if("function"!=typeof this.exec)return c.call(this,t);var e=this.exec(t);if(null!==e&&!a(e))throw new Error("RegExp exec method returned something other than an Object or null");return!!e}})},9714:function(t,e,r){"use strict";var n=r(1320),i=r(9670),o=r(7293),a=r(7066),s="toString",c=RegExp.prototype,l=c.toString,u=o((function(){return"/a/b"!=l.call({source:"a",flags:"b"})})),h=l.name!=s;(u||h)&&n(RegExp.prototype,s,(function(){var t=i(this),e=String(t.source),r=t.flags;return"/"+e+"/"+String(void 0===r&&t instanceof RegExp&&!("flags"in c)?a.call(t):r)}),{unsafe:!0})},189:function(t,e,r){"use strict";var n=r(7710),i=r(5631);t.exports=n("Set",(function(t){return function(){return t(this,arguments.length?arguments[0]:void 0)}}),i)},5218:function(t,e,r){"use strict";var n=r(2109),i=r(4230);n({target:"String",proto:!0,forced:r(3429)("anchor")},{anchor:function(t){return i(this,"a","name",t)}})},4475:function(t,e,r){"use strict";var n=r(2109),i=r(4230);n({target:"String",proto:!0,forced:r(3429)("big")},{big:function(){return i(this,"big","","")}})},7929:function(t,e,r){"use strict";var n=r(2109),i=r(4230);n({target:"String",proto:!0,forced:r(3429)("blink")},{blink:function(){return i(this,"blink","","")}})},915:function(t,e,r){"use strict";var n=r(2109),i=r(4230);n({target:"String",proto:!0,forced:r(3429)("bold")},{bold:function(){return i(this,"b","","")}})},9841:function(t,e,r){"use strict";var n=r(2109),i=r(8710).codeAt;n({target:"String",proto:!0},{codePointAt:function(t){return i(this,t)}})},7852:function(t,e,r){"use strict";var n,i=r(2109),o=r(1236).f,a=r(7466),s=r(3929),c=r(4488),l=r(4964),u=r(1913),h="".endsWith,f=Math.min,d=l("endsWith");i({target:"String",proto:!0,forced:!(!u&&!d&&(n=o(String.prototype,"endsWith"),n&&!n.writable)||d)},{endsWith:function(t){var e=String(c(this));s(t);var r=arguments.length>1?arguments[1]:void 0,n=a(e.length),i=void 0===r?n:f(a(r),n),o=String(t);return h?h.call(e,o,i):e.slice(i-o.length,i)===o}})},9253:function(t,e,r){"use strict";var n=r(2109),i=r(4230);n({target:"String",proto:!0,forced:r(3429)("fixed")},{fixed:function(){return i(this,"tt","","")}})},2125:function(t,e,r){"use strict";var n=r(2109),i=r(4230);n({target:"String",proto:!0,forced:r(3429)("fontcolor")},{fontcolor:function(t){return i(this,"font","color",t)}})},8830:function(t,e,r){"use strict";var n=r(2109),i=r(4230);n({target:"String",proto:!0,forced:r(3429)("fontsize")},{fontsize:function(t){return i(this,"font","size",t)}})},4953:function(t,e,r){var n=r(2109),i=r(1400),o=String.fromCharCode,a=String.fromCodePoint;n({target:"String",stat:!0,forced:!!a&&1!=a.length},{fromCodePoint:function(t){for(var e,r=[],n=arguments.length,a=0;n>a;){if(e=+arguments[a++],i(e,1114111)!==e)throw RangeError(e+" is not a valid code point");r.push(e<65536?o(e):o(55296+((e-=65536)>>10),e%1024+56320))}return r.join("")}})},2023:function(t,e,r){"use strict";var n=r(2109),i=r(3929),o=r(4488);n({target:"String",proto:!0,forced:!r(4964)("includes")},{includes:function(t){return!!~String(o(this)).indexOf(i(t),arguments.length>1?arguments[1]:void 0)}})},8734:function(t,e,r){"use strict";var n=r(2109),i=r(4230);n({target:"String",proto:!0,forced:r(3429)("italics")},{italics:function(){return i(this,"i","","")}})},8783:function(t,e,r){"use strict";var n=r(8710).charAt,i=r(9909),o=r(654),a="String Iterator",s=i.set,c=i.getterFor(a);o(String,"String",(function(t){s(this,{type:a,string:String(t),index:0})}),(function(){var t,e=c(this),r=e.string,i=e.index;return i>=r.length?{value:void 0,done:!0}:(t=n(r,i),e.index+=t.length,{value:t,done:!1})}))},9254:function(t,e,r){"use strict";var n=r(2109),i=r(4230);n({target:"String",proto:!0,forced:r(3429)("link")},{link:function(t){return i(this,"a","href",t)}})},6373:function(t,e,r){"use strict";var n=r(2109),i=r(4994),o=r(4488),a=r(7466),s=r(3099),c=r(9670),l=r(4326),u=r(7850),h=r(7066),f=r(8880),d=r(7293),p=r(5112),g=r(6707),m=r(1530),v=r(9909),y=r(1913),_=p("matchAll"),b="RegExp String Iterator",A=v.set,x=v.getterFor(b),S=RegExp.prototype,w=S.exec,C="".matchAll,E=!!C&&!d((function(){"a".matchAll(/./)})),k=i((function(t,e,r,n){A(this,{type:b,regexp:t,string:e,global:r,unicode:n,done:!1})}),"RegExp String",(function(){var t=x(this);if(t.done)return{value:void 0,done:!0};var e=t.regexp,r=t.string,n=function(t,e){var r,n=t.exec;if("function"==typeof n){if("object"!=typeof(r=n.call(t,e)))throw TypeError("Incorrect exec result");return r}return w.call(t,e)}(e,r);return null===n?{value:void 0,done:t.done=!0}:t.global?(""==String(n[0])&&(e.lastIndex=m(r,a(e.lastIndex),t.unicode)),{value:n,done:!1}):(t.done=!0,{value:n,done:!1})})),P=function(t){var e,r,n,i,o,s,l=c(this),u=String(t);return e=g(l,RegExp),void 0===(r=l.flags)&&l instanceof RegExp&&!("flags"in S)&&(r=h.call(l)),n=void 0===r?"":String(r),i=new e(e===RegExp?l.source:l,n),o=!!~n.indexOf("g"),s=!!~n.indexOf("u"),i.lastIndex=a(l.lastIndex),new k(i,u,o,s)};n({target:"String",proto:!0,forced:E},{matchAll:function(t){var e,r,n,i=o(this);if(null!=t){if(u(t)&&!~String(o("flags"in S?t.flags:h.call(t))).indexOf("g"))throw TypeError("`.matchAll` does not allow non-global regexes");if(E)return C.apply(i,arguments);if(void 0===(r=t[_])&&y&&"RegExp"==l(t)&&(r=P),null!=r)return s(r).call(t,i)}else if(E)return C.apply(i,arguments);return e=String(i),n=new RegExp(t,"g"),y?P.call(n,e):n[_](e)}}),y||_ in S||f(S,_,P)},4723:function(t,e,r){"use strict";var n=r(7007),i=r(9670),o=r(7466),a=r(4488),s=r(1530),c=r(7651);n("match",1,(function(t,e,r){return[function(e){var r=a(this),n=null==e?void 0:e[t];return void 0!==n?n.call(e,r):new RegExp(e)[t](String(r))},function(t){var n=r(e,t,this);if(n.done)return n.value;var a=i(t),l=String(this);if(!a.global)return c(a,l);var u=a.unicode;a.lastIndex=0;for(var h,f=[],d=0;null!==(h=c(a,l));){var p=String(h[0]);f[d]=p,""===p&&(a.lastIndex=s(l,o(a.lastIndex),u)),d++}return 0===d?null:f}]}))},6528:function(t,e,r){"use strict";var n=r(2109),i=r(6650).end;n({target:"String",proto:!0,forced:r(7061)},{padEnd:function(t){return i(this,t,arguments.length>1?arguments[1]:void 0)}})},3112:function(t,e,r){"use strict";var n=r(2109),i=r(6650).start;n({target:"String",proto:!0,forced:r(7061)},{padStart:function(t){return i(this,t,arguments.length>1?arguments[1]:void 0)}})},8992:function(t,e,r){var n=r(2109),i=r(5656),o=r(7466);n({target:"String",stat:!0},{raw:function(t){for(var e=i(t.raw),r=o(e.length),n=arguments.length,a=[],s=0;r>s;)a.push(String(e[s++])),s<n&&a.push(String(arguments[s]));return a.join("")}})},2481:function(t,e,r){r(2109)({target:"String",proto:!0},{repeat:r(8415)})},8757:function(t,e,r){"use strict";var n=r(2109),i=r(4488),o=r(7850),a=r(7066),s=r(647),c=r(5112),l=r(1913),u=c("replace"),h=RegExp.prototype,f=Math.max,d=function(t,e,r){return r>t.length?-1:""===e?r:t.indexOf(e,r)};n({target:"String",proto:!0},{replaceAll:function(t,e){var r,n,c,p,g,m,v,y,_=i(this),b=0,A=0,x="";if(null!=t){if((r=o(t))&&!~String(i("flags"in h?t.flags:a.call(t))).indexOf("g"))throw TypeError("`.replaceAll` does not allow non-global regexes");if(void 0!==(n=t[u]))return n.call(t,_,e);if(l&&r)return String(_).replace(t,e)}for(c=String(_),p=String(t),(g="function"==typeof e)||(e=String(e)),m=p.length,v=f(1,m),b=d(c,p,0);-1!==b;)y=g?String(e(p,b,c)):s(p,c,b,[],void 0,e),x+=c.slice(A,b)+y,A=b+m,b=d(c,p,b+v);return A<c.length&&(x+=c.slice(A)),x}})},5306:function(t,e,r){"use strict";var n=r(7007),i=r(9670),o=r(7466),a=r(9958),s=r(4488),c=r(1530),l=r(647),u=r(7651),h=Math.max,f=Math.min;n("replace",2,(function(t,e,r,n){var d=n.REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE,p=n.REPLACE_KEEPS_$0,g=d?"$":"$0";return[function(r,n){var i=s(this),o=null==r?void 0:r[t];return void 0!==o?o.call(r,i,n):e.call(String(i),r,n)},function(t,n){if(!d&&p||"string"==typeof n&&-1===n.indexOf(g)){var s=r(e,t,this,n);if(s.done)return s.value}var m=i(t),v=String(this),y="function"==typeof n;y||(n=String(n));var _=m.global;if(_){var b=m.unicode;m.lastIndex=0}for(var A=[];;){var x=u(m,v);if(null===x)break;if(A.push(x),!_)break;""===String(x[0])&&(m.lastIndex=c(v,o(m.lastIndex),b))}for(var S,w="",C=0,E=0;E<A.length;E++){x=A[E];for(var k=String(x[0]),P=h(f(a(x.index),v.length),0),R=[],T=1;T<x.length;T++)R.push(void 0===(S=x[T])?S:String(S));var O=x.groups;if(y){var L=[k].concat(R,P,v);void 0!==O&&L.push(O);var F=String(n.apply(void 0,L))}else F=l(k,v,P,R,O,n);P>=C&&(w+=v.slice(C,P)+F,C=P+k.length)}return w+v.slice(C)}]}))},4765:function(t,e,r){"use strict";var n=r(7007),i=r(9670),o=r(4488),a=r(1150),s=r(7651);n("search",1,(function(t,e,r){return[function(e){var r=o(this),n=null==e?void 0:e[t];return void 0!==n?n.call(e,r):new RegExp(e)[t](String(r))},function(t){var n=r(e,t,this);if(n.done)return n.value;var o=i(t),c=String(this),l=o.lastIndex;a(l,0)||(o.lastIndex=0);var u=s(o,c);return a(o.lastIndex,l)||(o.lastIndex=l),null===u?-1:u.index}]}))},7268:function(t,e,r){"use strict";var n=r(2109),i=r(4230);n({target:"String",proto:!0,forced:r(3429)("small")},{small:function(){return i(this,"small","","")}})},3123:function(t,e,r){"use strict";var n=r(7007),i=r(7850),o=r(9670),a=r(4488),s=r(6707),c=r(1530),l=r(7466),u=r(7651),h=r(2261),f=r(7293),d=[].push,p=Math.min,g=4294967295,m=!f((function(){return!RegExp(g,"y")}));n("split",2,(function(t,e,r){var n;return n="c"=="abbc".split(/(b)*/)[1]||4!="test".split(/(?:)/,-1).length||2!="ab".split(/(?:ab)*/).length||4!=".".split(/(.?)(.?)/).length||".".split(/()()/).length>1||"".split(/.?/).length?function(t,r){var n=String(a(this)),o=void 0===r?g:r>>>0;if(0===o)return[];if(void 0===t)return[n];if(!i(t))return e.call(n,t,o);for(var s,c,l,u=[],f=(t.ignoreCase?"i":"")+(t.multiline?"m":"")+(t.unicode?"u":"")+(t.sticky?"y":""),p=0,m=new RegExp(t.source,f+"g");(s=h.call(m,n))&&!((c=m.lastIndex)>p&&(u.push(n.slice(p,s.index)),s.length>1&&s.index<n.length&&d.apply(u,s.slice(1)),l=s[0].length,p=c,u.length>=o));)m.lastIndex===s.index&&m.lastIndex++;return p===n.length?!l&&m.test("")||u.push(""):u.push(n.slice(p)),u.length>o?u.slice(0,o):u}:"0".split(void 0,0).length?function(t,r){return void 0===t&&0===r?[]:e.call(this,t,r)}:e,[function(e,r){var i=a(this),o=null==e?void 0:e[t];return void 0!==o?o.call(e,i,r):n.call(String(i),e,r)},function(t,i){var a=r(n,t,this,i,n!==e);if(a.done)return a.value;var h=o(t),f=String(this),d=s(h,RegExp),v=h.unicode,y=(h.ignoreCase?"i":"")+(h.multiline?"m":"")+(h.unicode?"u":"")+(m?"y":"g"),_=new d(m?h:"^(?:"+h.source+")",y),b=void 0===i?g:i>>>0;if(0===b)return[];if(0===f.length)return null===u(_,f)?[f]:[];for(var A=0,x=0,S=[];x<f.length;){_.lastIndex=m?x:0;var w,C=u(_,m?f:f.slice(x));if(null===C||(w=p(l(_.lastIndex+(m?0:x)),f.length))===A)x=c(f,x,v);else{if(S.push(f.slice(A,x)),S.length===b)return S;for(var E=1;E<=C.length-1;E++)if(S.push(C[E]),S.length===b)return S;x=A=w}}return S.push(f.slice(A)),S}]}),!m)},6755:function(t,e,r){"use strict";var n,i=r(2109),o=r(1236).f,a=r(7466),s=r(3929),c=r(4488),l=r(4964),u=r(1913),h="".startsWith,f=Math.min,d=l("startsWith");i({target:"String",proto:!0,forced:!(!u&&!d&&(n=o(String.prototype,"startsWith"),n&&!n.writable)||d)},{startsWith:function(t){var e=String(c(this));s(t);var r=a(f(arguments.length>1?arguments[1]:void 0,e.length)),n=String(t);return h?h.call(e,n,r):e.slice(r,r+n.length)===n}})},7397:function(t,e,r){"use strict";var n=r(2109),i=r(4230);n({target:"String",proto:!0,forced:r(3429)("strike")},{strike:function(){return i(this,"strike","","")}})},86:function(t,e,r){"use strict";var n=r(2109),i=r(4230);n({target:"String",proto:!0,forced:r(3429)("sub")},{sub:function(){return i(this,"sub","","")}})},623:function(t,e,r){"use strict";var n=r(2109),i=r(4230);n({target:"String",proto:!0,forced:r(3429)("sup")},{sup:function(){return i(this,"sup","","")}})},8702:function(t,e,r){"use strict";var n=r(2109),i=r(3111).end,o=r(6091)("trimEnd"),a=o?function(){return i(this)}:"".trimEnd;n({target:"String",proto:!0,forced:o},{trimEnd:a,trimRight:a})},5674:function(t,e,r){"use strict";var n=r(2109),i=r(3111).start,o=r(6091)("trimStart"),a=o?function(){return i(this)}:"".trimStart;n({target:"String",proto:!0,forced:o},{trimStart:a,trimLeft:a})},3210:function(t,e,r){"use strict";var n=r(2109),i=r(3111).trim;n({target:"String",proto:!0,forced:r(6091)("trim")},{trim:function(){return i(this)}})},2443:function(t,e,r){r(7235)("asyncIterator")},1817:function(t,e,r){"use strict";var n=r(2109),i=r(9781),o=r(7854),a=r(6656),s=r(111),c=r(3070).f,l=r(9920),u=o.Symbol;if(i&&"function"==typeof u&&(!("description"in u.prototype)||void 0!==u().description)){var h={},f=function(){var t=arguments.length<1||void 0===arguments[0]?void 0:String(arguments[0]),e=this instanceof f?new u(t):void 0===t?u():u(t);return""===t&&(h[e]=!0),e};l(f,u);var d=f.prototype=u.prototype;d.constructor=f;var p=d.toString,g="Symbol(test)"==String(u("test")),m=/^Symbol\((.*)\)[^)]+$/;c(d,"description",{configurable:!0,get:function(){var t=s(this)?this.valueOf():this,e=p.call(t);if(a(h,t))return"";var r=g?e.slice(7,-1):e.replace(m,"$1");return""===r?void 0:r}}),n({global:!0,forced:!0},{Symbol:f})}},2401:function(t,e,r){r(7235)("hasInstance")},8722:function(t,e,r){r(7235)("isConcatSpreadable")},2165:function(t,e,r){r(7235)("iterator")},2526:function(t,e,r){"use strict";var n=r(2109),i=r(7854),o=r(5005),a=r(1913),s=r(9781),c=r(133),l=r(3307),u=r(7293),h=r(6656),f=r(3157),d=r(111),p=r(9670),g=r(7908),m=r(5656),v=r(7593),y=r(9114),_=r(30),b=r(1956),A=r(8006),x=r(1156),S=r(5181),w=r(1236),C=r(3070),E=r(5296),k=r(8880),P=r(1320),R=r(2309),T=r(6200),O=r(3501),L=r(9711),F=r(5112),M=r(6061),I=r(7235),N=r(8003),D=r(9909),j=r(2092).forEach,U=T("hidden"),W="Symbol",q=F("toPrimitive"),B=D.set,H=D.getterFor(W),G=Object.prototype,z=i.Symbol,Y=o("JSON","stringify"),$=w.f,V=C.f,X=x.f,K=E.f,J=R("symbols"),Q=R("op-symbols"),Z=R("string-to-symbol-registry"),tt=R("symbol-to-string-registry"),et=R("wks"),rt=i.QObject,nt=!rt||!rt.prototype||!rt.prototype.findChild,it=s&&u((function(){return 7!=_(V({},"a",{get:function(){return V(this,"a",{value:7}).a}})).a}))?function(t,e,r){var n=$(G,e);n&&delete G[e],V(t,e,r),n&&t!==G&&V(G,e,n)}:V,ot=function(t,e){var r=J[t]=_(z.prototype);return B(r,{type:W,tag:t,description:e}),s||(r.description=e),r},at=l?function(t){return"symbol"==typeof t}:function(t){return Object(t)instanceof z},st=function(t,e,r){t===G&&st(Q,e,r),p(t);var n=v(e,!0);return p(r),h(J,n)?(r.enumerable?(h(t,U)&&t[U][n]&&(t[U][n]=!1),r=_(r,{enumerable:y(0,!1)})):(h(t,U)||V(t,U,y(1,{})),t[U][n]=!0),it(t,n,r)):V(t,n,r)},ct=function(t,e){p(t);var r=m(e),n=b(r).concat(ft(r));return j(n,(function(e){s&&!lt.call(r,e)||st(t,e,r[e])})),t},lt=function(t){var e=v(t,!0),r=K.call(this,e);return!(this===G&&h(J,e)&&!h(Q,e))&&(!(r||!h(this,e)||!h(J,e)||h(this,U)&&this[U][e])||r)},ut=function(t,e){var r=m(t),n=v(e,!0);if(r!==G||!h(J,n)||h(Q,n)){var i=$(r,n);return!i||!h(J,n)||h(r,U)&&r[U][n]||(i.enumerable=!0),i}},ht=function(t){var e=X(m(t)),r=[];return j(e,(function(t){h(J,t)||h(O,t)||r.push(t)})),r},ft=function(t){var e=t===G,r=X(e?Q:m(t)),n=[];return j(r,(function(t){!h(J,t)||e&&!h(G,t)||n.push(J[t])})),n};c||(P((z=function(){if(this instanceof z)throw TypeError("Symbol is not a constructor");var t=arguments.length&&void 0!==arguments[0]?String(arguments[0]):void 0,e=L(t),r=function(t){this===G&&r.call(Q,t),h(this,U)&&h(this[U],e)&&(this[U][e]=!1),it(this,e,y(1,t))};return s&&nt&&it(G,e,{configurable:!0,set:r}),ot(e,t)}).prototype,"toString",(function(){return H(this).tag})),P(z,"withoutSetter",(function(t){return ot(L(t),t)})),E.f=lt,C.f=st,w.f=ut,A.f=x.f=ht,S.f=ft,M.f=function(t){return ot(F(t),t)},s&&(V(z.prototype,"description",{configurable:!0,get:function(){return H(this).description}}),a||P(G,"propertyIsEnumerable",lt,{unsafe:!0}))),n({global:!0,wrap:!0,forced:!c,sham:!c},{Symbol:z}),j(b(et),(function(t){I(t)})),n({target:W,stat:!0,forced:!c},{for:function(t){var e=String(t);if(h(Z,e))return Z[e];var r=z(e);return Z[e]=r,tt[r]=e,r},keyFor:function(t){if(!at(t))throw TypeError(t+" is not a symbol");if(h(tt,t))return tt[t]},useSetter:function(){nt=!0},useSimple:function(){nt=!1}}),n({target:"Object",stat:!0,forced:!c,sham:!s},{create:function(t,e){return void 0===e?_(t):ct(_(t),e)},defineProperty:st,defineProperties:ct,getOwnPropertyDescriptor:ut}),n({target:"Object",stat:!0,forced:!c},{getOwnPropertyNames:ht,getOwnPropertySymbols:ft}),n({target:"Object",stat:!0,forced:u((function(){S.f(1)}))},{getOwnPropertySymbols:function(t){return S.f(g(t))}}),Y&&n({target:"JSON",stat:!0,forced:!c||u((function(){var t=z();return"[null]"!=Y([t])||"{}"!=Y({a:t})||"{}"!=Y(Object(t))}))},{stringify:function(t,e,r){for(var n,i=[t],o=1;arguments.length>o;)i.push(arguments[o++]);if(n=e,(d(e)||void 0!==t)&&!at(t))return f(e)||(e=function(t,e){if("function"==typeof n&&(e=n.call(this,t,e)),!at(e))return e}),i[1]=e,Y.apply(null,i)}}),z.prototype[q]||k(z.prototype,q,z.prototype.valueOf),N(z,W),O[U]=!0},6066:function(t,e,r){r(7235)("matchAll")},9007:function(t,e,r){r(7235)("match")},3510:function(t,e,r){r(7235)("replace")},1840:function(t,e,r){r(7235)("search")},6982:function(t,e,r){r(7235)("species")},2159:function(t,e,r){r(7235)("split")},6649:function(t,e,r){r(7235)("toPrimitive")},9341:function(t,e,r){r(7235)("toStringTag")},543:function(t,e,r){r(7235)("unscopables")},2990:function(t,e,r){"use strict";var n=r(260),i=r(1048),o=n.aTypedArray;(0,n.exportTypedArrayMethod)("copyWithin",(function(t,e){return i.call(o(this),t,e,arguments.length>2?arguments[2]:void 0)}))},8927:function(t,e,r){"use strict";var n=r(260),i=r(2092).every,o=n.aTypedArray;(0,n.exportTypedArrayMethod)("every",(function(t){return i(o(this),t,arguments.length>1?arguments[1]:void 0)}))},3105:function(t,e,r){"use strict";var n=r(260),i=r(1285),o=n.aTypedArray;(0,n.exportTypedArrayMethod)("fill",(function(t){return i.apply(o(this),arguments)}))},5035:function(t,e,r){"use strict";var n=r(260),i=r(2092).filter,o=r(6707),a=n.aTypedArray,s=n.aTypedArrayConstructor;(0,n.exportTypedArrayMethod)("filter",(function(t){for(var e=i(a(this),t,arguments.length>1?arguments[1]:void 0),r=o(this,this.constructor),n=0,c=e.length,l=new(s(r))(c);c>n;)l[n]=e[n++];return l}))},7174:function(t,e,r){"use strict";var n=r(260),i=r(2092).findIndex,o=n.aTypedArray;(0,n.exportTypedArrayMethod)("findIndex",(function(t){return i(o(this),t,arguments.length>1?arguments[1]:void 0)}))},4345:function(t,e,r){"use strict";var n=r(260),i=r(2092).find,o=n.aTypedArray;(0,n.exportTypedArrayMethod)("find",(function(t){return i(o(this),t,arguments.length>1?arguments[1]:void 0)}))},4197:function(t,e,r){r(9843)("Float32",(function(t){return function(e,r,n){return t(this,e,r,n)}}))},6495:function(t,e,r){r(9843)("Float64",(function(t){return function(e,r,n){return t(this,e,r,n)}}))},2846:function(t,e,r){"use strict";var n=r(260),i=r(2092).forEach,o=n.aTypedArray;(0,n.exportTypedArrayMethod)("forEach",(function(t){i(o(this),t,arguments.length>1?arguments[1]:void 0)}))},8145:function(t,e,r){"use strict";var n=r(3832);(0,r(260).exportTypedArrayStaticMethod)("from",r(7321),n)},4731:function(t,e,r){"use strict";var n=r(260),i=r(1318).includes,o=n.aTypedArray;(0,n.exportTypedArrayMethod)("includes",(function(t){return i(o(this),t,arguments.length>1?arguments[1]:void 0)}))},7209:function(t,e,r){"use strict";var n=r(260),i=r(1318).indexOf,o=n.aTypedArray;(0,n.exportTypedArrayMethod)("indexOf",(function(t){return i(o(this),t,arguments.length>1?arguments[1]:void 0)}))},5109:function(t,e,r){r(9843)("Int16",(function(t){return function(e,r,n){return t(this,e,r,n)}}))},5125:function(t,e,r){r(9843)("Int32",(function(t){return function(e,r,n){return t(this,e,r,n)}}))},7145:function(t,e,r){r(9843)("Int8",(function(t){return function(e,r,n){return t(this,e,r,n)}}))},6319:function(t,e,r){"use strict";var n=r(7854),i=r(260),o=r(6992),a=r(5112)("iterator"),s=n.Uint8Array,c=o.values,l=o.keys,u=o.entries,h=i.aTypedArray,f=i.exportTypedArrayMethod,d=s&&s.prototype[a],p=!!d&&("values"==d.name||null==d.name),g=function(){return c.call(h(this))};f("entries",(function(){return u.call(h(this))})),f("keys",(function(){return l.call(h(this))})),f("values",g,!p),f(a,g,!p)},8867:function(t,e,r){"use strict";var n=r(260),i=n.aTypedArray,o=n.exportTypedArrayMethod,a=[].join;o("join",(function(t){return a.apply(i(this),arguments)}))},7789:function(t,e,r){"use strict";var n=r(260),i=r(6583),o=n.aTypedArray;(0,n.exportTypedArrayMethod)("lastIndexOf",(function(t){return i.apply(o(this),arguments)}))},3739:function(t,e,r){"use strict";var n=r(260),i=r(2092).map,o=r(6707),a=n.aTypedArray,s=n.aTypedArrayConstructor;(0,n.exportTypedArrayMethod)("map",(function(t){return i(a(this),t,arguments.length>1?arguments[1]:void 0,(function(t,e){return new(s(o(t,t.constructor)))(e)}))}))},5206:function(t,e,r){"use strict";var n=r(260),i=r(3832),o=n.aTypedArrayConstructor;(0,n.exportTypedArrayStaticMethod)("of",(function(){for(var t=0,e=arguments.length,r=new(o(this))(e);e>t;)r[t]=arguments[t++];return r}),i)},4483:function(t,e,r){"use strict";var n=r(260),i=r(3671).right,o=n.aTypedArray;(0,n.exportTypedArrayMethod)("reduceRight",(function(t){return i(o(this),t,arguments.length,arguments.length>1?arguments[1]:void 0)}))},9368:function(t,e,r){"use strict";var n=r(260),i=r(3671).left,o=n.aTypedArray;(0,n.exportTypedArrayMethod)("reduce",(function(t){return i(o(this),t,arguments.length,arguments.length>1?arguments[1]:void 0)}))},2056:function(t,e,r){"use strict";var n=r(260),i=n.aTypedArray,o=n.exportTypedArrayMethod,a=Math.floor;o("reverse",(function(){for(var t,e=this,r=i(e).length,n=a(r/2),o=0;o<n;)t=e[o],e[o++]=e[--r],e[r]=t;return e}))},3462:function(t,e,r){"use strict";var n=r(260),i=r(7466),o=r(4590),a=r(7908),s=r(7293),c=n.aTypedArray;(0,n.exportTypedArrayMethod)("set",(function(t){c(this);var e=o(arguments.length>1?arguments[1]:void 0,1),r=this.length,n=a(t),s=i(n.length),l=0;if(s+e>r)throw RangeError("Wrong length");for(;l<s;)this[e+l]=n[l++]}),s((function(){new Int8Array(1).set({})})))},678:function(t,e,r){"use strict";var n=r(260),i=r(6707),o=r(7293),a=n.aTypedArray,s=n.aTypedArrayConstructor,c=n.exportTypedArrayMethod,l=[].slice;c("slice",(function(t,e){for(var r=l.call(a(this),t,e),n=i(this,this.constructor),o=0,c=r.length,u=new(s(n))(c);c>o;)u[o]=r[o++];return u}),o((function(){new Int8Array(1).slice()})))},7462:function(t,e,r){"use strict";var n=r(260),i=r(2092).some,o=n.aTypedArray;(0,n.exportTypedArrayMethod)("some",(function(t){return i(o(this),t,arguments.length>1?arguments[1]:void 0)}))},3824:function(t,e,r){"use strict";var n=r(260),i=n.aTypedArray,o=n.exportTypedArrayMethod,a=[].sort;o("sort",(function(t){return a.call(i(this),t)}))},5021:function(t,e,r){"use strict";var n=r(260),i=r(7466),o=r(1400),a=r(6707),s=n.aTypedArray;(0,n.exportTypedArrayMethod)("subarray",(function(t,e){var r=s(this),n=r.length,c=o(t,n);return new(a(r,r.constructor))(r.buffer,r.byteOffset+c*r.BYTES_PER_ELEMENT,i((void 0===e?n:o(e,n))-c))}))},2974:function(t,e,r){"use strict";var n=r(7854),i=r(260),o=r(7293),a=n.Int8Array,s=i.aTypedArray,c=i.exportTypedArrayMethod,l=[].toLocaleString,u=[].slice,h=!!a&&o((function(){l.call(new a(1))}));c("toLocaleString",(function(){return l.apply(h?u.call(s(this)):s(this),arguments)}),o((function(){return[1,2].toLocaleString()!=new a([1,2]).toLocaleString()}))||!o((function(){a.prototype.toLocaleString.call([1,2])})))},5016:function(t,e,r){"use strict";var n=r(260).exportTypedArrayMethod,i=r(7293),o=r(7854).Uint8Array,a=o&&o.prototype||{},s=[].toString,c=[].join;i((function(){s.call({})}))&&(s=function(){return c.call(this)});var l=a.toString!=s;n("toString",s,l)},8255:function(t,e,r){r(9843)("Uint16",(function(t){return function(e,r,n){return t(this,e,r,n)}}))},9135:function(t,e,r){r(9843)("Uint32",(function(t){return function(e,r,n){return t(this,e,r,n)}}))},2472:function(t,e,r){r(9843)("Uint8",(function(t){return function(e,r,n){return t(this,e,r,n)}}))},9743:function(t,e,r){r(9843)("Uint8",(function(t){return function(e,r,n){return t(this,e,r,n)}}),!0)},4129:function(t,e,r){"use strict";var n,i=r(7854),o=r(2248),a=r(2423),s=r(7710),c=r(9320),l=r(111),u=r(9909).enforce,h=r(8536),f=!i.ActiveXObject&&"ActiveXObject"in i,d=Object.isExtensible,p=function(t){return function(){return t(this,arguments.length?arguments[0]:void 0)}},g=t.exports=s("WeakMap",p,c);if(h&&f){n=c.getConstructor(p,"WeakMap",!0),a.REQUIRED=!0;var m=g.prototype,v=m.delete,y=m.has,_=m.get,b=m.set;o(m,{delete:function(t){if(l(t)&&!d(t)){var e=u(this);return e.frozen||(e.frozen=new n),v.call(this,t)||e.frozen.delete(t)}return v.call(this,t)},has:function(t){if(l(t)&&!d(t)){var e=u(this);return e.frozen||(e.frozen=new n),y.call(this,t)||e.frozen.has(t)}return y.call(this,t)},get:function(t){if(l(t)&&!d(t)){var e=u(this);return e.frozen||(e.frozen=new n),y.call(this,t)?_.call(this,t):e.frozen.get(t)}return _.call(this,t)},set:function(t,e){if(l(t)&&!d(t)){var r=u(this);r.frozen||(r.frozen=new n),y.call(this,t)?b.call(this,t,e):r.frozen.set(t,e)}else b.call(this,t,e);return this}})}},8478:function(t,e,r){"use strict";r(7710)("WeakSet",(function(t){return function(){return t(this,arguments.length?arguments[0]:void 0)}}),r(9320))},4747:function(t,e,r){var n=r(7854),i=r(8324),o=r(8533),a=r(8880);for(var s in i){var c=n[s],l=c&&c.prototype;if(l&&l.forEach!==o)try{a(l,"forEach",o)}catch(t){l.forEach=o}}},3948:function(t,e,r){var n=r(7854),i=r(8324),o=r(6992),a=r(8880),s=r(5112),c=s("iterator"),l=s("toStringTag"),u=o.values;for(var h in i){var f=n[h],d=f&&f.prototype;if(d){if(d[c]!==u)try{a(d,c,u)}catch(t){d[c]=u}if(d[l]||a(d,l,h),i[h])for(var p in o)if(d[p]!==o[p])try{a(d,p,o[p])}catch(t){d[p]=o[p]}}}},4633:function(t,e,r){var n=r(2109),i=r(7854),o=r(261);n({global:!0,bind:!0,enumerable:!0,forced:!i.setImmediate||!i.clearImmediate},{setImmediate:o.set,clearImmediate:o.clear})},5844:function(t,e,r){var n=r(2109),i=r(7854),o=r(5948),a=r(5268),s=i.process;n({global:!0,enumerable:!0,noTargetGet:!0},{queueMicrotask:function(t){var e=a&&s.domain;o(e?e.bind(t):t)}})},2564:function(t,e,r){var n=r(2109),i=r(7854),o=r(8113),a=[].slice,s=function(t){return function(e,r){var n=arguments.length>2,i=n?a.call(arguments,2):void 0;return t(n?function(){("function"==typeof e?e:Function(e)).apply(this,i)}:e,r)}};n({global:!0,bind:!0,forced:/MSIE .\./.test(o)},{setTimeout:s(i.setTimeout),setInterval:s(i.setInterval)})},1637:function(t,e,r){"use strict";r(6992);var n=r(2109),i=r(5005),o=r(590),a=r(1320),s=r(2248),c=r(8003),l=r(4994),u=r(9909),h=r(5787),f=r(6656),d=r(9974),p=r(648),g=r(9670),m=r(111),v=r(30),y=r(9114),_=r(8554),b=r(1246),A=r(5112),x=i("fetch"),S=i("Headers"),w=A("iterator"),C="URLSearchParams",E="URLSearchParamsIterator",k=u.set,P=u.getterFor(C),R=u.getterFor(E),T=/\+/g,O=Array(4),L=function(t){return O[t-1]||(O[t-1]=RegExp("((?:%[\\da-f]{2}){"+t+"})","gi"))},F=function(t){try{return decodeURIComponent(t)}catch(e){return t}},M=function(t){var e=t.replace(T," "),r=4;try{return decodeURIComponent(e)}catch(t){for(;r;)e=e.replace(L(r--),F);return e}},I=/[!'()~]|%20/g,N={"!":"%21","'":"%27","(":"%28",")":"%29","~":"%7E","%20":"+"},D=function(t){return N[t]},j=function(t){return encodeURIComponent(t).replace(I,D)},U=function(t,e){if(e)for(var r,n,i=e.split("&"),o=0;o<i.length;)(r=i[o++]).length&&(n=r.split("="),t.push({key:M(n.shift()),value:M(n.join("="))}))},W=function(t){this.entries.length=0,U(this.entries,t)},q=function(t,e){if(t<e)throw TypeError("Not enough arguments")},B=l((function(t,e){k(this,{type:E,iterator:_(P(t).entries),kind:e})}),"Iterator",(function(){var t=R(this),e=t.kind,r=t.iterator.next(),n=r.value;return r.done||(r.value="keys"===e?n.key:"values"===e?n.value:[n.key,n.value]),r})),H=function(){h(this,H,C);var t,e,r,n,i,o,a,s,c,l=arguments.length>0?arguments[0]:void 0,u=this,d=[];if(k(u,{type:C,entries:d,updateURL:function(){},updateSearchParams:W}),void 0!==l)if(m(l))if("function"==typeof(t=b(l)))for(r=(e=t.call(l)).next;!(n=r.call(e)).done;){if((a=(o=(i=_(g(n.value))).next).call(i)).done||(s=o.call(i)).done||!o.call(i).done)throw TypeError("Expected sequence with length 2");d.push({key:a.value+"",value:s.value+""})}else for(c in l)f(l,c)&&d.push({key:c,value:l[c]+""});else U(d,"string"==typeof l?"?"===l.charAt(0)?l.slice(1):l:l+"")},G=H.prototype;s(G,{append:function(t,e){q(arguments.length,2);var r=P(this);r.entries.push({key:t+"",value:e+""}),r.updateURL()},delete:function(t){q(arguments.length,1);for(var e=P(this),r=e.entries,n=t+"",i=0;i<r.length;)r[i].key===n?r.splice(i,1):i++;e.updateURL()},get:function(t){q(arguments.length,1);for(var e=P(this).entries,r=t+"",n=0;n<e.length;n++)if(e[n].key===r)return e[n].value;return null},getAll:function(t){q(arguments.length,1);for(var e=P(this).entries,r=t+"",n=[],i=0;i<e.length;i++)e[i].key===r&&n.push(e[i].value);return n},has:function(t){q(arguments.length,1);for(var e=P(this).entries,r=t+"",n=0;n<e.length;)if(e[n++].key===r)return!0;return!1},set:function(t,e){q(arguments.length,1);for(var r,n=P(this),i=n.entries,o=!1,a=t+"",s=e+"",c=0;c<i.length;c++)(r=i[c]).key===a&&(o?i.splice(c--,1):(o=!0,r.value=s));o||i.push({key:a,value:s}),n.updateURL()},sort:function(){var t,e,r,n=P(this),i=n.entries,o=i.slice();for(i.length=0,r=0;r<o.length;r++){for(t=o[r],e=0;e<r;e++)if(i[e].key>t.key){i.splice(e,0,t);break}e===r&&i.push(t)}n.updateURL()},forEach:function(t){for(var e,r=P(this).entries,n=d(t,arguments.length>1?arguments[1]:void 0,3),i=0;i<r.length;)n((e=r[i++]).value,e.key,this)},keys:function(){return new B(this,"keys")},values:function(){return new B(this,"values")},entries:function(){return new B(this,"entries")}},{enumerable:!0}),a(G,w,G.entries),a(G,"toString",(function(){for(var t,e=P(this).entries,r=[],n=0;n<e.length;)t=e[n++],r.push(j(t.key)+"="+j(t.value));return r.join("&")}),{enumerable:!0}),c(H,C),n({global:!0,forced:!o},{URLSearchParams:H}),o||"function"!=typeof x||"function"!=typeof S||n({global:!0,enumerable:!0,forced:!0},{fetch:function(t){var e,r,n,i=[t];return arguments.length>1&&(m(e=arguments[1])&&(r=e.body,p(r)===C&&((n=e.headers?new S(e.headers):new S).has("content-type")||n.set("content-type","application/x-www-form-urlencoded;charset=UTF-8"),e=v(e,{body:y(0,String(r)),headers:y(0,n)}))),i.push(e)),x.apply(this,i)}}),t.exports={URLSearchParams:H,getState:P}},285:function(t,e,r){"use strict";r(8783);var n,i=r(2109),o=r(9781),a=r(590),s=r(7854),c=r(6048),l=r(1320),u=r(5787),h=r(6656),f=r(1574),d=r(8457),p=r(8710).codeAt,g=r(3197),m=r(8003),v=r(1637),y=r(9909),_=s.URL,b=v.URLSearchParams,A=v.getState,x=y.set,S=y.getterFor("URL"),w=Math.floor,C=Math.pow,E="Invalid scheme",k="Invalid host",P="Invalid port",R=/[A-Za-z]/,T=/[\d+-.A-Za-z]/,O=/\d/,L=/^(0x|0X)/,F=/^[0-7]+$/,M=/^\d+$/,I=/^[\dA-Fa-f]+$/,N=/[\u0000\u0009\u000A\u000D #%/:?@[\\]]/,D=/[\u0000\u0009\u000A\u000D #/:?@[\\]]/,j=/^[\u0000-\u001F ]+|[\u0000-\u001F ]+$/g,U=/[\u0009\u000A\u000D]/g,W=function(t,e){var r,n,i;if("["==e.charAt(0)){if("]"!=e.charAt(e.length-1))return k;if(!(r=B(e.slice(1,-1))))return k;t.host=r}else if(K(t)){if(e=g(e),N.test(e))return k;if(null===(r=q(e)))return k;t.host=r}else{if(D.test(e))return k;for(r="",n=d(e),i=0;i<n.length;i++)r+=V(n[i],G);t.host=r}},q=function(t){var e,r,n,i,o,a,s,c=t.split(".");if(c.length&&""==c[c.length-1]&&c.pop(),(e=c.length)>4)return t;for(r=[],n=0;n<e;n++){if(""==(i=c[n]))return t;if(o=10,i.length>1&&"0"==i.charAt(0)&&(o=L.test(i)?16:8,i=i.slice(8==o?1:2)),""===i)a=0;else{if(!(10==o?M:8==o?F:I).test(i))return t;a=parseInt(i,o)}r.push(a)}for(n=0;n<e;n++)if(a=r[n],n==e-1){if(a>=C(256,5-e))return null}else if(a>255)return null;for(s=r.pop(),n=0;n<r.length;n++)s+=r[n]*C(256,3-n);return s},B=function(t){var e,r,n,i,o,a,s,c=[0,0,0,0,0,0,0,0],l=0,u=null,h=0,f=function(){return t.charAt(h)};if(":"==f()){if(":"!=t.charAt(1))return;h+=2,u=++l}for(;f();){if(8==l)return;if(":"!=f()){for(e=r=0;r<4&&I.test(f());)e=16*e+parseInt(f(),16),h++,r++;if("."==f()){if(0==r)return;if(h-=r,l>6)return;for(n=0;f();){if(i=null,n>0){if(!("."==f()&&n<4))return;h++}if(!O.test(f()))return;for(;O.test(f());){if(o=parseInt(f(),10),null===i)i=o;else{if(0==i)return;i=10*i+o}if(i>255)return;h++}c[l]=256*c[l]+i,2!=++n&&4!=n||l++}if(4!=n)return;break}if(":"==f()){if(h++,!f())return}else if(f())return;c[l++]=e}else{if(null!==u)return;h++,u=++l}}if(null!==u)for(a=l-u,l=7;0!=l&&a>0;)s=c[l],c[l--]=c[u+a-1],c[u+--a]=s;else if(8!=l)return;return c},H=function(t){var e,r,n,i;if("number"==typeof t){for(e=[],r=0;r<4;r++)e.unshift(t%256),t=w(t/256);return e.join(".")}if("object"==typeof t){for(e="",n=function(t){for(var e=null,r=1,n=null,i=0,o=0;o<8;o++)0!==t[o]?(i>r&&(e=n,r=i),n=null,i=0):(null===n&&(n=o),++i);return i>r&&(e=n,r=i),e}(t),r=0;r<8;r++)i&&0===t[r]||(i&&(i=!1),n===r?(e+=r?":":"::",i=!0):(e+=t[r].toString(16),r<7&&(e+=":")));return"["+e+"]"}return t},G={},z=f({},G,{" ":1,'"':1,"<":1,">":1,"`":1}),Y=f({},z,{"#":1,"?":1,"{":1,"}":1}),$=f({},Y,{"/":1,":":1,";":1,"=":1,"@":1,"[":1,"\\":1,"]":1,"^":1,"|":1}),V=function(t,e){var r=p(t,0);return r>32&&r<127&&!h(e,t)?t:encodeURIComponent(t)},X={ftp:21,file:null,http:80,https:443,ws:80,wss:443},K=function(t){return h(X,t.scheme)},J=function(t){return""!=t.username||""!=t.password},Q=function(t){return!t.host||t.cannotBeABaseURL||"file"==t.scheme},Z=function(t,e){var r;return 2==t.length&&R.test(t.charAt(0))&&(":"==(r=t.charAt(1))||!e&&"|"==r)},tt=function(t){var e;return t.length>1&&Z(t.slice(0,2))&&(2==t.length||"/"===(e=t.charAt(2))||"\\"===e||"?"===e||"#"===e)},et=function(t){var e=t.path,r=e.length;!r||"file"==t.scheme&&1==r&&Z(e[0],!0)||e.pop()},rt=function(t){return"."===t||"%2e"===t.toLowerCase()},nt={},it={},ot={},at={},st={},ct={},lt={},ut={},ht={},ft={},dt={},pt={},gt={},mt={},vt={},yt={},_t={},bt={},At={},xt={},St={},wt=function(t,e,r,i){var o,a,s,c,l,u=r||nt,f=0,p="",g=!1,m=!1,v=!1;for(r||(t.scheme="",t.username="",t.password="",t.host=null,t.port=null,t.path=[],t.query=null,t.fragment=null,t.cannotBeABaseURL=!1,e=e.replace(j,"")),e=e.replace(U,""),o=d(e);f<=o.length;){switch(a=o[f],u){case nt:if(!a||!R.test(a)){if(r)return E;u=ot;continue}p+=a.toLowerCase(),u=it;break;case it:if(a&&(T.test(a)||"+"==a||"-"==a||"."==a))p+=a.toLowerCase();else{if(":"!=a){if(r)return E;p="",u=ot,f=0;continue}if(r&&(K(t)!=h(X,p)||"file"==p&&(J(t)||null!==t.port)||"file"==t.scheme&&!t.host))return;if(t.scheme=p,r)return void(K(t)&&X[t.scheme]==t.port&&(t.port=null));p="","file"==t.scheme?u=mt:K(t)&&i&&i.scheme==t.scheme?u=at:K(t)?u=ut:"/"==o[f+1]?(u=st,f++):(t.cannotBeABaseURL=!0,t.path.push(""),u=At)}break;case ot:if(!i||i.cannotBeABaseURL&&"#"!=a)return E;if(i.cannotBeABaseURL&&"#"==a){t.scheme=i.scheme,t.path=i.path.slice(),t.query=i.query,t.fragment="",t.cannotBeABaseURL=!0,u=St;break}u="file"==i.scheme?mt:ct;continue;case at:if("/"!=a||"/"!=o[f+1]){u=ct;continue}u=ht,f++;break;case st:if("/"==a){u=ft;break}u=bt;continue;case ct:if(t.scheme=i.scheme,a==n)t.username=i.username,t.password=i.password,t.host=i.host,t.port=i.port,t.path=i.path.slice(),t.query=i.query;else if("/"==a||"\\"==a&&K(t))u=lt;else if("?"==a)t.username=i.username,t.password=i.password,t.host=i.host,t.port=i.port,t.path=i.path.slice(),t.query="",u=xt;else{if("#"!=a){t.username=i.username,t.password=i.password,t.host=i.host,t.port=i.port,t.path=i.path.slice(),t.path.pop(),u=bt;continue}t.username=i.username,t.password=i.password,t.host=i.host,t.port=i.port,t.path=i.path.slice(),t.query=i.query,t.fragment="",u=St}break;case lt:if(!K(t)||"/"!=a&&"\\"!=a){if("/"!=a){t.username=i.username,t.password=i.password,t.host=i.host,t.port=i.port,u=bt;continue}u=ft}else u=ht;break;case ut:if(u=ht,"/"!=a||"/"!=p.charAt(f+1))continue;f++;break;case ht:if("/"!=a&&"\\"!=a){u=ft;continue}break;case ft:if("@"==a){g&&(p="%40"+p),g=!0,s=d(p);for(var y=0;y<s.length;y++){var _=s[y];if(":"!=_||v){var b=V(_,$);v?t.password+=b:t.username+=b}else v=!0}p=""}else if(a==n||"/"==a||"?"==a||"#"==a||"\\"==a&&K(t)){if(g&&""==p)return"Invalid authority";f-=d(p).length+1,p="",u=dt}else p+=a;break;case dt:case pt:if(r&&"file"==t.scheme){u=yt;continue}if(":"!=a||m){if(a==n||"/"==a||"?"==a||"#"==a||"\\"==a&&K(t)){if(K(t)&&""==p)return k;if(r&&""==p&&(J(t)||null!==t.port))return;if(c=W(t,p))return c;if(p="",u=_t,r)return;continue}"["==a?m=!0:"]"==a&&(m=!1),p+=a}else{if(""==p)return k;if(c=W(t,p))return c;if(p="",u=gt,r==pt)return}break;case gt:if(!O.test(a)){if(a==n||"/"==a||"?"==a||"#"==a||"\\"==a&&K(t)||r){if(""!=p){var A=parseInt(p,10);if(A>65535)return P;t.port=K(t)&&A===X[t.scheme]?null:A,p=""}if(r)return;u=_t;continue}return P}p+=a;break;case mt:if(t.scheme="file","/"==a||"\\"==a)u=vt;else{if(!i||"file"!=i.scheme){u=bt;continue}if(a==n)t.host=i.host,t.path=i.path.slice(),t.query=i.query;else if("?"==a)t.host=i.host,t.path=i.path.slice(),t.query="",u=xt;else{if("#"!=a){tt(o.slice(f).join(""))||(t.host=i.host,t.path=i.path.slice(),et(t)),u=bt;continue}t.host=i.host,t.path=i.path.slice(),t.query=i.query,t.fragment="",u=St}}break;case vt:if("/"==a||"\\"==a){u=yt;break}i&&"file"==i.scheme&&!tt(o.slice(f).join(""))&&(Z(i.path[0],!0)?t.path.push(i.path[0]):t.host=i.host),u=bt;continue;case yt:if(a==n||"/"==a||"\\"==a||"?"==a||"#"==a){if(!r&&Z(p))u=bt;else if(""==p){if(t.host="",r)return;u=_t}else{if(c=W(t,p))return c;if("localhost"==t.host&&(t.host=""),r)return;p="",u=_t}continue}p+=a;break;case _t:if(K(t)){if(u=bt,"/"!=a&&"\\"!=a)continue}else if(r||"?"!=a)if(r||"#"!=a){if(a!=n&&(u=bt,"/"!=a))continue}else t.fragment="",u=St;else t.query="",u=xt;break;case bt:if(a==n||"/"==a||"\\"==a&&K(t)||!r&&("?"==a||"#"==a)){if(".."===(l=(l=p).toLowerCase())||"%2e."===l||".%2e"===l||"%2e%2e"===l?(et(t),"/"==a||"\\"==a&&K(t)||t.path.push("")):rt(p)?"/"==a||"\\"==a&&K(t)||t.path.push(""):("file"==t.scheme&&!t.path.length&&Z(p)&&(t.host&&(t.host=""),p=p.charAt(0)+":"),t.path.push(p)),p="","file"==t.scheme&&(a==n||"?"==a||"#"==a))for(;t.path.length>1&&""===t.path[0];)t.path.shift();"?"==a?(t.query="",u=xt):"#"==a&&(t.fragment="",u=St)}else p+=V(a,Y);break;case At:"?"==a?(t.query="",u=xt):"#"==a?(t.fragment="",u=St):a!=n&&(t.path[0]+=V(a,G));break;case xt:r||"#"!=a?a!=n&&("'"==a&&K(t)?t.query+="%27":t.query+="#"==a?"%23":V(a,G)):(t.fragment="",u=St);break;case St:a!=n&&(t.fragment+=V(a,z))}f++}},Ct=function(t){var e,r,n=u(this,Ct,"URL"),i=arguments.length>1?arguments[1]:void 0,a=String(t),s=x(n,{type:"URL"});if(void 0!==i)if(i instanceof Ct)e=S(i);else if(r=wt(e={},String(i)))throw TypeError(r);if(r=wt(s,a,null,e))throw TypeError(r);var c=s.searchParams=new b,l=A(c);l.updateSearchParams(s.query),l.updateURL=function(){s.query=String(c)||null},o||(n.href=kt.call(n),n.origin=Pt.call(n),n.protocol=Rt.call(n),n.username=Tt.call(n),n.password=Ot.call(n),n.host=Lt.call(n),n.hostname=Ft.call(n),n.port=Mt.call(n),n.pathname=It.call(n),n.search=Nt.call(n),n.searchParams=Dt.call(n),n.hash=jt.call(n))},Et=Ct.prototype,kt=function(){var t=S(this),e=t.scheme,r=t.username,n=t.password,i=t.host,o=t.port,a=t.path,s=t.query,c=t.fragment,l=e+":";return null!==i?(l+="//",J(t)&&(l+=r+(n?":"+n:"")+"@"),l+=H(i),null!==o&&(l+=":"+o)):"file"==e&&(l+="//"),l+=t.cannotBeABaseURL?a[0]:a.length?"/"+a.join("/"):"",null!==s&&(l+="?"+s),null!==c&&(l+="#"+c),l},Pt=function(){var t=S(this),e=t.scheme,r=t.port;if("blob"==e)try{return new URL(e.path[0]).origin}catch(t){return"null"}return"file"!=e&&K(t)?e+"://"+H(t.host)+(null!==r?":"+r:""):"null"},Rt=function(){return S(this).scheme+":"},Tt=function(){return S(this).username},Ot=function(){return S(this).password},Lt=function(){var t=S(this),e=t.host,r=t.port;return null===e?"":null===r?H(e):H(e)+":"+r},Ft=function(){var t=S(this).host;return null===t?"":H(t)},Mt=function(){var t=S(this).port;return null===t?"":String(t)},It=function(){var t=S(this),e=t.path;return t.cannotBeABaseURL?e[0]:e.length?"/"+e.join("/"):""},Nt=function(){var t=S(this).query;return t?"?"+t:""},Dt=function(){return S(this).searchParams},jt=function(){var t=S(this).fragment;return t?"#"+t:""},Ut=function(t,e){return{get:t,set:e,configurable:!0,enumerable:!0}};if(o&&c(Et,{href:Ut(kt,(function(t){var e=S(this),r=String(t),n=wt(e,r);if(n)throw TypeError(n);A(e.searchParams).updateSearchParams(e.query)})),origin:Ut(Pt),protocol:Ut(Rt,(function(t){var e=S(this);wt(e,String(t)+":",nt)})),username:Ut(Tt,(function(t){var e=S(this),r=d(String(t));if(!Q(e)){e.username="";for(var n=0;n<r.length;n++)e.username+=V(r[n],$)}})),password:Ut(Ot,(function(t){var e=S(this),r=d(String(t));if(!Q(e)){e.password="";for(var n=0;n<r.length;n++)e.password+=V(r[n],$)}})),host:Ut(Lt,(function(t){var e=S(this);e.cannotBeABaseURL||wt(e,String(t),dt)})),hostname:Ut(Ft,(function(t){var e=S(this);e.cannotBeABaseURL||wt(e,String(t),pt)})),port:Ut(Mt,(function(t){var e=S(this);Q(e)||(""==(t=String(t))?e.port=null:wt(e,t,gt))})),pathname:Ut(It,(function(t){var e=S(this);e.cannotBeABaseURL||(e.path=[],wt(e,t+"",_t))})),search:Ut(Nt,(function(t){var e=S(this);""==(t=String(t))?e.query=null:("?"==t.charAt(0)&&(t=t.slice(1)),e.query="",wt(e,t,xt)),A(e.searchParams).updateSearchParams(e.query)})),searchParams:Ut(Dt),hash:Ut(jt,(function(t){var e=S(this);""!=(t=String(t))?("#"==t.charAt(0)&&(t=t.slice(1)),e.fragment="",wt(e,t,St)):e.fragment=null}))}),l(Et,"toJSON",(function(){return kt.call(this)}),{enumerable:!0}),l(Et,"toString",(function(){return kt.call(this)}),{enumerable:!0}),_){var Wt=_.createObjectURL,qt=_.revokeObjectURL;Wt&&l(Ct,"createObjectURL",(function(t){return Wt.apply(_,arguments)})),qt&&l(Ct,"revokeObjectURL",(function(t){return qt.apply(_,arguments)}))}m(Ct,"URL"),i({global:!0,forced:!a,sham:!o},{URL:Ct})},3753:function(t,e,r){"use strict";r(2109)({target:"URL",proto:!0,enumerable:!0},{toJSON:function(){return URL.prototype.toString.call(this)}})},8594:function(t,e,r){r(1926),r(6337);var n=r(857);t.exports=n},6337:function(t,e,r){r(4747),r(3948),r(4633),r(5844),r(2564),r(285),r(3753),r(1637);var n=r(857);t.exports=n},9299:function(module,__unused_webpack_exports,__webpack_require__){var factory;factory=function(){return function(t){var e={};function r(n){if(e[n])return e[n].exports;var i=e[n]={i:n,l:!1,exports:{}};return t[n].call(i.exports,i,i.exports,r),i.l=!0,i.exports}return r.m=t,r.c=e,r.d=function(t,e,n){r.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:n})},r.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},r.t=function(t,e){if(1&e&&(t=r(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var i in t)r.d(n,i,function(e){return t[e]}.bind(null,i));return n},r.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return r.d(e,"a",e),e},r.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},r.p="",r(r.s=0)}([function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"addLinkAttributes",{enumerable:!0,get:function(){return n.addLinkAttributes}}),Object.defineProperty(e,"getFilenameFromUrl",{enumerable:!0,get:function(){return n.getFilenameFromUrl}}),Object.defineProperty(e,"LinkTarget",{enumerable:!0,get:function(){return n.LinkTarget}}),Object.defineProperty(e,"loadScript",{enumerable:!0,get:function(){return n.loadScript}}),Object.defineProperty(e,"PDFDateString",{enumerable:!0,get:function(){return n.PDFDateString}}),Object.defineProperty(e,"RenderingCancelledException",{enumerable:!0,get:function(){return n.RenderingCancelledException}}),Object.defineProperty(e,"build",{enumerable:!0,get:function(){return i.build}}),Object.defineProperty(e,"getDocument",{enumerable:!0,get:function(){return i.getDocument}}),Object.defineProperty(e,"LoopbackPort",{enumerable:!0,get:function(){return i.LoopbackPort}}),Object.defineProperty(e,"PDFDataRangeTransport",{enumerable:!0,get:function(){return i.PDFDataRangeTransport}}),Object.defineProperty(e,"PDFWorker",{enumerable:!0,get:function(){return i.PDFWorker}}),Object.defineProperty(e,"version",{enumerable:!0,get:function(){return i.version}}),Object.defineProperty(e,"CMapCompressionType",{enumerable:!0,get:function(){return o.CMapCompressionType}}),Object.defineProperty(e,"createObjectURL",{enumerable:!0,get:function(){return o.createObjectURL}}),Object.defineProperty(e,"createPromiseCapability",{enumerable:!0,get:function(){return o.createPromiseCapability}}),Object.defineProperty(e,"createValidAbsoluteUrl",{enumerable:!0,get:function(){return o.createValidAbsoluteUrl}}),Object.defineProperty(e,"InvalidPDFException",{enumerable:!0,get:function(){return o.InvalidPDFException}}),Object.defineProperty(e,"MissingPDFException",{enumerable:!0,get:function(){return o.MissingPDFException}}),Object.defineProperty(e,"OPS",{enumerable:!0,get:function(){return o.OPS}}),Object.defineProperty(e,"PasswordResponses",{enumerable:!0,get:function(){return o.PasswordResponses}}),Object.defineProperty(e,"PermissionFlag",{enumerable:!0,get:function(){return o.PermissionFlag}}),Object.defineProperty(e,"removeNullCharacters",{enumerable:!0,get:function(){return o.removeNullCharacters}}),Object.defineProperty(e,"shadow",{enumerable:!0,get:function(){return o.shadow}}),Object.defineProperty(e,"UnexpectedResponseException",{enumerable:!0,get:function(){return o.UnexpectedResponseException}}),Object.defineProperty(e,"UNSUPPORTED_FEATURES",{enumerable:!0,get:function(){return o.UNSUPPORTED_FEATURES}}),Object.defineProperty(e,"Util",{enumerable:!0,get:function(){return o.Util}}),Object.defineProperty(e,"VerbosityLevel",{enumerable:!0,get:function(){return o.VerbosityLevel}}),Object.defineProperty(e,"AnnotationLayer",{enumerable:!0,get:function(){return a.AnnotationLayer}}),Object.defineProperty(e,"apiCompatibilityParams",{enumerable:!0,get:function(){return s.apiCompatibilityParams}}),Object.defineProperty(e,"GlobalWorkerOptions",{enumerable:!0,get:function(){return c.GlobalWorkerOptions}}),Object.defineProperty(e,"renderTextLayer",{enumerable:!0,get:function(){return l.renderTextLayer}}),Object.defineProperty(e,"SVGGraphics",{enumerable:!0,get:function(){return u.SVGGraphics}});var n=r(1),i=r(5),o=r(2),a=r(16),s=r(7),c=r(10),l=r(17),u=r(18);{const{isNodeJS:t}=r(4);if(t){const t=r(19).PDFNodeStream;(0,i.setPDFNetworkStreamFactory)((e=>new t(e)))}else{const t=r(22).PDFNetworkStream;let e;(0,n.isFetchSupported)()&&(e=r(23).PDFFetchStream),(0,i.setPDFNetworkStreamFactory)((r=>e&&(0,n.isValidFetchUrl)(r.url)?new e(r):new t(r)))}}},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.addLinkAttributes=function(t,{url:e,target:r,rel:o,enabled:a=!0}={}){(0,n.assert)(e&&"string"==typeof e,'addLinkAttributes: A valid "url" parameter must provided.');const s=(0,n.removeNullCharacters)(e);a?t.href=t.title=s:(t.href="",t.title=`Disabled: ${s}`,t.onclick=()=>!1);let l="";switch(r){case c.NONE:break;case c.SELF:l="_self";break;case c.BLANK:l="_blank";break;case c.PARENT:l="_parent";break;case c.TOP:l="_top"}t.target=l,t.rel="string"==typeof o?o:i},e.getFilenameFromUrl=function(t){const e=t.indexOf("#"),r=t.indexOf("?"),n=Math.min(e>0?e:t.length,r>0?r:t.length);return t.substring(t.lastIndexOf("/",n)+1,n)},e.isFetchSupported=l,e.isValidFetchUrl=u,e.loadScript=function(t){return new Promise(((e,r)=>{const n=document.createElement("script");n.src=t,n.onload=e,n.onerror=function(){r(new Error(`Cannot load script at: ${n.src}`))},(document.head||document.documentElement).appendChild(n)}))},e.deprecated=function(t){console.log("Deprecated API usage: "+t)},e.PDFDateString=e.StatTimer=e.DOMSVGFactory=e.DOMCMapReaderFactory=e.DOMCanvasFactory=e.DEFAULT_LINK_REL=e.LinkTarget=e.RenderingCancelledException=e.PageViewport=void 0;var n=r(2);const i="noopener noreferrer nofollow";e.DEFAULT_LINK_REL=i;const o="http://www.w3.org/2000/svg";e.DOMCanvasFactory=class{create(t,e){if(t<=0||e<=0)throw new Error("Invalid canvas size");const r=document.createElement("canvas"),n=r.getContext("2d");return r.width=t,r.height=e,{canvas:r,context:n}}reset(t,e,r){if(!t.canvas)throw new Error("Canvas is not specified");if(e<=0||r<=0)throw new Error("Invalid canvas size");t.canvas.width=e,t.canvas.height=r}destroy(t){if(!t.canvas)throw new Error("Canvas is not specified");t.canvas.width=0,t.canvas.height=0,t.canvas=null,t.context=null}},e.DOMCMapReaderFactory=class{constructor({baseUrl:t=null,isCompressed:e=!1}){this.baseUrl=t,this.isCompressed=e}async fetch({name:t}){if(!this.baseUrl)throw new Error('The CMap "baseUrl" parameter must be specified, ensure that the "cMapUrl" and "cMapPacked" API parameters are provided.');if(!t)throw new Error("CMap name must be specified.");const e=this.baseUrl+t+(this.isCompressed?".bcmap":""),r=this.isCompressed?n.CMapCompressionType.BINARY:n.CMapCompressionType.NONE;return l()&&u(e,document.baseURI)?fetch(e).then((async t=>{if(!t.ok)throw new Error(t.statusText);let e;return e=this.isCompressed?new Uint8Array(await t.arrayBuffer()):(0,n.stringToBytes)(await t.text()),{cMapData:e,compressionType:r}})).catch((t=>{throw new Error("Unable to load "+(this.isCompressed?"binary ":"")+`CMap at: ${e}`)})):new Promise(((t,i)=>{const o=new XMLHttpRequest;o.open("GET",e,!0),this.isCompressed&&(o.responseType="arraybuffer"),o.onreadystatechange=()=>{if(o.readyState===XMLHttpRequest.DONE){if(200===o.status||0===o.status){let e;if(this.isCompressed&&o.response?e=new Uint8Array(o.response):!this.isCompressed&&o.responseText&&(e=(0,n.stringToBytes)(o.responseText)),e)return void t({cMapData:e,compressionType:r})}i(new Error(o.statusText))}},o.send(null)})).catch((t=>{throw new Error("Unable to load "+(this.isCompressed?"binary ":"")+`CMap at: ${e}`)}))}},e.DOMSVGFactory=class{create(t,e){(0,n.assert)(t>0&&e>0,"Invalid SVG dimensions");const r=document.createElementNS(o,"svg:svg");return r.setAttribute("version","1.1"),r.setAttribute("width",t+"px"),r.setAttribute("height",e+"px"),r.setAttribute("preserveAspectRatio","none"),r.setAttribute("viewBox","0 0 "+t+" "+e),r}createElement(t){return(0,n.assert)("string"==typeof t,"Invalid SVG element type"),document.createElementNS(o,t)}};class a{constructor({viewBox:t,scale:e,rotation:r,offsetX:n=0,offsetY:i=0,dontFlip:o=!1}){this.viewBox=t,this.scale=e,this.rotation=r,this.offsetX=n,this.offsetY=i;const a=(t[2]+t[0])/2,s=(t[3]+t[1])/2;let c,l,u,h,f,d,p,g;switch(r=(r%=360)<0?r+360:r){case 180:c=-1,l=0,u=0,h=1;break;case 90:c=0,l=1,u=1,h=0;break;case 270:c=0,l=-1,u=-1,h=0;break;case 0:c=1,l=0,u=0,h=-1;break;default:throw new Error("PageViewport: Invalid rotation, must be a multiple of 90 degrees.")}o&&(u=-u,h=-h),0===c?(f=Math.abs(s-t[1])*e+n,d=Math.abs(a-t[0])*e+i,p=Math.abs(t[3]-t[1])*e,g=Math.abs(t[2]-t[0])*e):(f=Math.abs(a-t[0])*e+n,d=Math.abs(s-t[1])*e+i,p=Math.abs(t[2]-t[0])*e,g=Math.abs(t[3]-t[1])*e),this.transform=[c*e,l*e,u*e,h*e,f-c*e*a-u*e*s,d-l*e*a-h*e*s],this.width=p,this.height=g}clone({scale:t=this.scale,rotation:e=this.rotation,offsetX:r=this.offsetX,offsetY:n=this.offsetY,dontFlip:i=!1}={}){return new a({viewBox:this.viewBox.slice(),scale:t,rotation:e,offsetX:r,offsetY:n,dontFlip:i})}convertToViewportPoint(t,e){return n.Util.applyTransform([t,e],this.transform)}convertToViewportRectangle(t){const e=n.Util.applyTransform([t[0],t[1]],this.transform),r=n.Util.applyTransform([t[2],t[3]],this.transform);return[e[0],e[1],r[0],r[1]]}convertToPdfPoint(t,e){return n.Util.applyInverseTransform([t,e],this.transform)}}e.PageViewport=a;class s extends n.BaseException{constructor(t,e){super(t),this.type=e}}e.RenderingCancelledException=s;const c={NONE:0,SELF:1,BLANK:2,PARENT:3,TOP:4};function l(){return"undefined"!=typeof fetch&&"undefined"!=typeof Response&&"body"in Response.prototype&&"undefined"!=typeof ReadableStream}function u(t,e){try{const{protocol:r}=e?new URL(t,e):new URL(t);return"http:"===r||"https:"===r}catch(t){return!1}}let h;e.LinkTarget=c,e.StatTimer=class{constructor(){this.started=Object.create(null),this.times=[]}time(t){t in this.started&&(0,n.warn)(`Timer is already running for ${t}`),this.started[t]=Date.now()}timeEnd(t){t in this.started||(0,n.warn)(`Timer has not been started for ${t}`),this.times.push({name:t,start:this.started[t],end:Date.now()}),delete this.started[t]}toString(){const t=[];let e=0;for(const t of this.times){const r=t.name;r.length>e&&(e=r.length)}for(const r of this.times){const n=r.end-r.start;t.push(`${r.name.padEnd(e)} ${n}ms\n`)}return t.join("")}},e.PDFDateString=class{static toDateObject(t){if(!t||!(0,n.isString)(t))return null;h||(h=new RegExp("^D:(\\d{4})(\\d{2})?(\\d{2})?(\\d{2})?(\\d{2})?(\\d{2})?([Z|+|-])?(\\d{2})?'?(\\d{2})?'?"));const e=h.exec(t);if(!e)return null;const r=parseInt(e[1],10);let i=parseInt(e[2],10);i=i>=1&&i<=12?i-1:0;let o=parseInt(e[3],10);o=o>=1&&o<=31?o:1;let a=parseInt(e[4],10);a=a>=0&&a<=23?a:0;let s=parseInt(e[5],10);s=s>=0&&s<=59?s:0;let c=parseInt(e[6],10);c=c>=0&&c<=59?c:0;const l=e[7]||"Z";let u=parseInt(e[8],10);u=u>=0&&u<=23?u:0;let f=parseInt(e[9],10)||0;return f=f>=0&&f<=59?f:0,"-"===l?(a+=u,s+=f):"+"===l&&(a-=u,s-=f),new Date(Date.UTC(r,i,o,a,s,c))}}},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.arrayByteLength=f,e.arraysToBytes=function(t){const e=t.length;if(1===e&&t[0]instanceof Uint8Array)return t[0];let r=0;for(let n=0;n<e;n++)r+=f(t[n]);let n=0;const i=new Uint8Array(r);for(let r=0;r<e;r++){let e=t[r];e instanceof Uint8Array||(e="string"==typeof e?h(e):new Uint8Array(e));const o=e.byteLength;i.set(e,n),n+=o}return i},e.assert=s,e.bytesToString=function(t){s(null!==t&&"object"==typeof t&&void 0!==t.length,"Invalid argument for bytesToString");const e=t.length,r=8192;if(e<r)return String.fromCharCode.apply(null,t);const n=[];for(let i=0;i<e;i+=r){const o=Math.min(i+r,e),a=t.subarray(i,o);n.push(String.fromCharCode.apply(null,a))}return n.join("")},e.createPromiseCapability=function(){const t=Object.create(null);let e=!1;return Object.defineProperty(t,"settled",{get:()=>e}),t.promise=new Promise((function(r,n){t.resolve=function(t){e=!0,r(t)},t.reject=function(t){e=!0,n(t)}})),t},e.getVerbosityLevel=function(){return i},e.info=function(t){i>=n.INFOS&&console.log(`Info: ${t}`)},e.isArrayBuffer=function(t){return"object"==typeof t&&null!==t&&void 0!==t.byteLength},e.isArrayEqual=function(t,e){return t.length===e.length&&t.every((function(t,r){return t===e[r]}))},e.isBool=function(t){return"boolean"==typeof t},e.isEmptyObj=function(t){for(const e in t)return!1;return!0},e.isNum=function(t){return"number"==typeof t},e.isString=function(t){return"string"==typeof t},e.isSameOrigin=function(t,e){let r;try{if(r=new URL(t),!r.origin||"null"===r.origin)return!1}catch(t){return!1}const n=new URL(e,r);return r.origin===n.origin},e.createValidAbsoluteUrl=function(t,e){if(!t)return null;try{const r=e?new URL(t,e):new URL(t);if(function(t){if(!t)return!1;switch(t.protocol){case"http:":case"https:":case"ftp:":case"mailto:":case"tel:":return!0;default:return!1}}(r))return r}catch(t){}return null},e.removeNullCharacters=function(t){return"string"!=typeof t?(o("The argument for removeNullCharacters must be a string."),t):t.replace(u,"")},e.setVerbosityLevel=function(t){Number.isInteger(t)&&(i=t)},e.shadow=c,e.string32=function(t){return String.fromCharCode(t>>24&255,t>>16&255,t>>8&255,255&t)},e.stringToBytes=h,e.stringToPDFString=function(t){const e=t.length,r=[];if("þ"===t[0]&&"ÿ"===t[1])for(let n=2;n<e;n+=2)r.push(String.fromCharCode(t.charCodeAt(n)<<8|t.charCodeAt(n+1)));else if("ÿ"===t[0]&&"þ"===t[1])for(let n=2;n<e;n+=2)r.push(String.fromCharCode(t.charCodeAt(n+1)<<8|t.charCodeAt(n)));else for(let n=0;n<e;++n){const e=v[t.charCodeAt(n)];r.push(e?String.fromCharCode(e):t.charAt(n))}return r.join("")},e.stringToUTF8String=function(t){return decodeURIComponent(escape(t))},e.utf8StringToString=function(t){return unescape(encodeURIComponent(t))},e.warn=o,e.unreachable=a,e.IsEvalSupportedCached=e.IsLittleEndianCached=e.createObjectURL=e.FormatError=e.Util=e.UnknownErrorException=e.UnexpectedResponseException=e.TextRenderingMode=e.StreamType=e.PermissionFlag=e.PasswordResponses=e.PasswordException=e.MissingPDFException=e.InvalidPDFException=e.AbortException=e.CMapCompressionType=e.ImageKind=e.FontType=e.AnnotationType=e.AnnotationStateModelType=e.AnnotationReviewState=e.AnnotationReplyType=e.AnnotationMarkedState=e.AnnotationFlag=e.AnnotationFieldFlag=e.AnnotationBorderStyleType=e.UNSUPPORTED_FEATURES=e.VerbosityLevel=e.OPS=e.IDENTITY_MATRIX=e.FONT_IDENTITY_MATRIX=e.BaseException=void 0,r(3),e.IDENTITY_MATRIX=[1,0,0,1,0,0],e.FONT_IDENTITY_MATRIX=[.001,0,0,.001,0,0],e.PermissionFlag={PRINT:4,MODIFY_CONTENTS:8,COPY:16,MODIFY_ANNOTATIONS:32,FILL_INTERACTIVE_FORMS:256,COPY_FOR_ACCESSIBILITY:512,ASSEMBLE:1024,PRINT_HIGH_QUALITY:2048},e.TextRenderingMode={FILL:0,STROKE:1,FILL_STROKE:2,INVISIBLE:3,FILL_ADD_TO_PATH:4,STROKE_ADD_TO_PATH:5,FILL_STROKE_ADD_TO_PATH:6,ADD_TO_PATH:7,FILL_STROKE_MASK:3,ADD_TO_PATH_FLAG:4},e.ImageKind={GRAYSCALE_1BPP:1,RGB_24BPP:2,RGBA_32BPP:3},e.AnnotationType={TEXT:1,LINK:2,FREETEXT:3,LINE:4,SQUARE:5,CIRCLE:6,POLYGON:7,POLYLINE:8,HIGHLIGHT:9,UNDERLINE:10,SQUIGGLY:11,STRIKEOUT:12,STAMP:13,CARET:14,INK:15,POPUP:16,FILEATTACHMENT:17,SOUND:18,MOVIE:19,WIDGET:20,SCREEN:21,PRINTERMARK:22,TRAPNET:23,WATERMARK:24,THREED:25,REDACT:26},e.AnnotationStateModelType={MARKED:"Marked",REVIEW:"Review"},e.AnnotationMarkedState={MARKED:"Marked",UNMARKED:"Unmarked"},e.AnnotationReviewState={ACCEPTED:"Accepted",REJECTED:"Rejected",CANCELLED:"Cancelled",COMPLETED:"Completed",NONE:"None"},e.AnnotationReplyType={GROUP:"Group",REPLY:"R"},e.AnnotationFlag={INVISIBLE:1,HIDDEN:2,PRINT:4,NOZOOM:8,NOROTATE:16,NOVIEW:32,READONLY:64,LOCKED:128,TOGGLENOVIEW:256,LOCKEDCONTENTS:512},e.AnnotationFieldFlag={READONLY:1,REQUIRED:2,NOEXPORT:4,MULTILINE:4096,PASSWORD:8192,NOTOGGLETOOFF:16384,RADIO:32768,PUSHBUTTON:65536,COMBO:131072,EDIT:262144,SORT:524288,FILESELECT:1048576,MULTISELECT:2097152,DONOTSPELLCHECK:4194304,DONOTSCROLL:8388608,COMB:16777216,RICHTEXT:33554432,RADIOSINUNISON:33554432,COMMITONSELCHANGE:67108864},e.AnnotationBorderStyleType={SOLID:1,DASHED:2,BEVELED:3,INSET:4,UNDERLINE:5},e.StreamType={UNKNOWN:"UNKNOWN",FLATE:"FLATE",LZW:"LZW",DCT:"DCT",JPX:"JPX",JBIG:"JBIG",A85:"A85",AHX:"AHX",CCF:"CCF",RLX:"RLX"},e.FontType={UNKNOWN:"UNKNOWN",TYPE1:"TYPE1",TYPE1C:"TYPE1C",CIDFONTTYPE0:"CIDFONTTYPE0",CIDFONTTYPE0C:"CIDFONTTYPE0C",TRUETYPE:"TRUETYPE",CIDFONTTYPE2:"CIDFONTTYPE2",TYPE3:"TYPE3",OPENTYPE:"OPENTYPE",TYPE0:"TYPE0",MMTYPE1:"MMTYPE1"};const n={ERRORS:0,WARNINGS:1,INFOS:5};e.VerbosityLevel=n,e.CMapCompressionType={NONE:0,BINARY:1,STREAM:2},e.OPS={dependency:1,setLineWidth:2,setLineCap:3,setLineJoin:4,setMiterLimit:5,setDash:6,setRenderingIntent:7,setFlatness:8,setGState:9,save:10,restore:11,transform:12,moveTo:13,lineTo:14,curveTo:15,curveTo2:16,curveTo3:17,closePath:18,rectangle:19,stroke:20,closeStroke:21,fill:22,eoFill:23,fillStroke:24,eoFillStroke:25,closeFillStroke:26,closeEOFillStroke:27,endPath:28,clip:29,eoClip:30,beginText:31,endText:32,setCharSpacing:33,setWordSpacing:34,setHScale:35,setLeading:36,setFont:37,setTextRenderingMode:38,setTextRise:39,moveText:40,setLeadingMoveText:41,setTextMatrix:42,nextLine:43,showText:44,showSpacedText:45,nextLineShowText:46,nextLineSetSpacingShowText:47,setCharWidth:48,setCharWidthAndBounds:49,setStrokeColorSpace:50,setFillColorSpace:51,setStrokeColor:52,setStrokeColorN:53,setFillColor:54,setFillColorN:55,setStrokeGray:56,setFillGray:57,setStrokeRGBColor:58,setFillRGBColor:59,setStrokeCMYKColor:60,setFillCMYKColor:61,shadingFill:62,beginInlineImage:63,beginImageData:64,endInlineImage:65,paintXObject:66,markPoint:67,markPointProps:68,beginMarkedContent:69,beginMarkedContentProps:70,endMarkedContent:71,beginCompat:72,endCompat:73,paintFormXObjectBegin:74,paintFormXObjectEnd:75,beginGroup:76,endGroup:77,beginAnnotations:78,endAnnotations:79,beginAnnotation:80,endAnnotation:81,paintJpegXObject:82,paintImageMaskXObject:83,paintImageMaskXObjectGroup:84,paintImageXObject:85,paintInlineImageXObject:86,paintInlineImageXObjectGroup:87,paintImageXObjectRepeat:88,paintImageMaskXObjectRepeat:89,paintSolidColorImageMask:90,constructPath:91},e.UNSUPPORTED_FEATURES={unknown:"unknown",forms:"forms",javaScript:"javaScript",smask:"smask",shadingPattern:"shadingPattern",font:"font",errorTilingPattern:"errorTilingPattern",errorExtGState:"errorExtGState",errorXObject:"errorXObject",errorFontLoadType3:"errorFontLoadType3",errorFontState:"errorFontState",errorFontMissing:"errorFontMissing",errorFontTranslate:"errorFontTranslate",errorColorSpace:"errorColorSpace",errorOperatorList:"errorOperatorList",errorFontToUnicode:"errorFontToUnicode",errorFontLoadNative:"errorFontLoadNative",errorFontGetPath:"errorFontGetPath"},e.PasswordResponses={NEED_PASSWORD:1,INCORRECT_PASSWORD:2};let i=n.WARNINGS;function o(t){i>=n.WARNINGS&&console.log(`Warning: ${t}`)}function a(t){throw new Error(t)}function s(t,e){t||a(e)}function c(t,e,r){return Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!1}),r}const l=function(){function t(e){this.constructor===t&&a("Cannot initialize BaseException."),this.message=e,this.name=this.constructor.name}return t.prototype=new Error,t.constructor=t,t}();e.BaseException=l,e.PasswordException=class extends l{constructor(t,e){super(t),this.code=e}},e.UnknownErrorException=class extends l{constructor(t,e){super(t),this.details=e}},e.InvalidPDFException=class extends l{},e.MissingPDFException=class extends l{},e.UnexpectedResponseException=class extends l{constructor(t,e){super(t),this.status=e}},e.FormatError=class extends l{},e.AbortException=class extends l{};const u=/\x00/g;function h(t){s("string"==typeof t,"Invalid argument for stringToBytes");const e=t.length,r=new Uint8Array(e);for(let n=0;n<e;++n)r[n]=255&t.charCodeAt(n);return r}function f(t){return void 0!==t.length?t.length:(s(void 0!==t.byteLength,"arrayByteLength - invalid argument."),t.byteLength)}const d={get value(){return c(this,"value",function(){const t=new Uint8Array(4);return t[0]=1,1===new Uint32Array(t.buffer,0,1)[0]}())}};e.IsLittleEndianCached=d;const p={get value(){return c(this,"value",function(){try{return new Function(""),!0}catch(t){return!1}}())}};e.IsEvalSupportedCached=p;const g=["rgb(",0,",",0,",",0,")"];class m{static makeCssRgb(t,e,r){return g[1]=t,g[3]=e,g[5]=r,g.join("")}static transform(t,e){return[t[0]*e[0]+t[2]*e[1],t[1]*e[0]+t[3]*e[1],t[0]*e[2]+t[2]*e[3],t[1]*e[2]+t[3]*e[3],t[0]*e[4]+t[2]*e[5]+t[4],t[1]*e[4]+t[3]*e[5]+t[5]]}static applyTransform(t,e){return[t[0]*e[0]+t[1]*e[2]+e[4],t[0]*e[1]+t[1]*e[3]+e[5]]}static applyInverseTransform(t,e){const r=e[0]*e[3]-e[1]*e[2];return[(t[0]*e[3]-t[1]*e[2]+e[2]*e[5]-e[4]*e[3])/r,(-t[0]*e[1]+t[1]*e[0]+e[4]*e[1]-e[5]*e[0])/r]}static getAxialAlignedBoundingBox(t,e){const r=m.applyTransform(t,e),n=m.applyTransform(t.slice(2,4),e),i=m.applyTransform([t[0],t[3]],e),o=m.applyTransform([t[2],t[1]],e);return[Math.min(r[0],n[0],i[0],o[0]),Math.min(r[1],n[1],i[1],o[1]),Math.max(r[0],n[0],i[0],o[0]),Math.max(r[1],n[1],i[1],o[1])]}static inverseTransform(t){const e=t[0]*t[3]-t[1]*t[2];return[t[3]/e,-t[1]/e,-t[2]/e,t[0]/e,(t[2]*t[5]-t[4]*t[3])/e,(t[4]*t[1]-t[5]*t[0])/e]}static apply3dTransform(t,e){return[t[0]*e[0]+t[1]*e[1]+t[2]*e[2],t[3]*e[0]+t[4]*e[1]+t[5]*e[2],t[6]*e[0]+t[7]*e[1]+t[8]*e[2]]}static singularValueDecompose2dScale(t){const e=[t[0],t[2],t[1],t[3]],r=t[0]*e[0]+t[1]*e[2],n=t[0]*e[1]+t[1]*e[3],i=t[2]*e[0]+t[3]*e[2],o=t[2]*e[1]+t[3]*e[3],a=(r+o)/2,s=Math.sqrt((r+o)*(r+o)-4*(r*o-i*n))/2,c=a+s||1,l=a-s||1;return[Math.sqrt(c),Math.sqrt(l)]}static normalizeRect(t){const e=t.slice(0);return t[0]>t[2]&&(e[0]=t[2],e[2]=t[0]),t[1]>t[3]&&(e[1]=t[3],e[3]=t[1]),e}static intersect(t,e){function r(t,e){return t-e}const n=[t[0],t[2],e[0],e[2]].sort(r),i=[t[1],t[3],e[1],e[3]].sort(r),o=[];return t=m.normalizeRect(t),e=m.normalizeRect(e),n[0]===t[0]&&n[1]===e[0]||n[0]===e[0]&&n[1]===t[0]?(o[0]=n[1],o[2]=n[2],i[0]===t[1]&&i[1]===e[1]||i[0]===e[1]&&i[1]===t[1]?(o[1]=i[1],o[3]=i[2],o):null):null}}e.Util=m;const v=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,728,711,710,729,733,731,730,732,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8226,8224,8225,8230,8212,8211,402,8260,8249,8250,8722,8240,8222,8220,8221,8216,8217,8218,8482,64257,64258,321,338,352,376,381,305,322,339,353,382,0,8364],y=function(){const t="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";return function(e,r,n=!1){if(!n&&URL.createObjectURL){const t=new Blob([e],{type:r});return URL.createObjectURL(t)}let i=`data:${r};base64,`;for(let r=0,n=e.length;r<n;r+=3){const o=255&e[r],a=255&e[r+1],s=255&e[r+2];i+=t[o>>2]+t[(3&o)<<4|a>>4]+t[r+1<n?(15&a)<<2|s>>6:64]+t[r+2<n?63&s:64]}return i}}();e.createObjectURL=y},function(t,e,r){"use strict";r(4)},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.isNodeJS=void 0;const n="object"==typeof process&&process+""=="[object process]"&&!process.versions.nw&&!process.versions.electron;e.isNodeJS=n},function(module,exports,__w_pdfjs_require__){"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.getDocument=getDocument,exports.setPDFNetworkStreamFactory=setPDFNetworkStreamFactory,exports.build=exports.version=exports.PDFPageProxy=exports.PDFDocumentProxy=exports.PDFWorker=exports.PDFDataRangeTransport=exports.LoopbackPort=void 0;var _util=__w_pdfjs_require__(2),_display_utils=__w_pdfjs_require__(1),_font_loader=__w_pdfjs_require__(6),_api_compatibility=__w_pdfjs_require__(7),_canvas=__w_pdfjs_require__(8),_worker_options=__w_pdfjs_require__(10),_is_node=__w_pdfjs_require__(4),_message_handler=__w_pdfjs_require__(11),_metadata=__w_pdfjs_require__(12),_transport_stream=__w_pdfjs_require__(14),_webgl=__w_pdfjs_require__(15);const DEFAULT_RANGE_CHUNK_SIZE=65536,RENDERING_CANCELLED_TIMEOUT=100;let createPDFNetworkStream;function setPDFNetworkStreamFactory(t){createPDFNetworkStream=t}function getDocument(t){const e=new PDFDocumentLoadingTask;let r;if("string"==typeof t)r={url:t};else if((0,_util.isArrayBuffer)(t))r={data:t};else if(t instanceof PDFDataRangeTransport)r={range:t};else{if("object"!=typeof t)throw new Error("Invalid parameter in getDocument, need either Uint8Array, string or a parameter object");if(!t.url&&!t.data&&!t.range)throw new Error("Invalid parameter object: need either .data, .range or .url");r=t}const n=Object.create(null);let i=null,o=null;for(const t in r)if("url"!==t||"undefined"==typeof window)if("range"!==t)if("worker"!==t)if("data"!==t||r[t]instanceof Uint8Array)n[t]=r[t];else{const e=r[t];if("string"==typeof e)n[t]=(0,_util.stringToBytes)(e);else if("object"!=typeof e||null===e||isNaN(e.length)){if(!(0,_util.isArrayBuffer)(e))throw new Error("Invalid PDF binary data: either typed array, string or array-like object is expected in the data property.");n[t]=new Uint8Array(e)}else n[t]=new Uint8Array(e)}else o=r[t];else i=r[t];else n[t]=new URL(r[t],window.location).href;if(n.rangeChunkSize=n.rangeChunkSize||DEFAULT_RANGE_CHUNK_SIZE,n.CMapReaderFactory=n.CMapReaderFactory||_display_utils.DOMCMapReaderFactory,n.ignoreErrors=!0!==n.stopAtErrors,n.fontExtraProperties=!0===n.fontExtraProperties,n.pdfBug=!0===n.pdfBug,Number.isInteger(n.maxImageSize)||(n.maxImageSize=-1),"boolean"!=typeof n.isEvalSupported&&(n.isEvalSupported=!0),"boolean"!=typeof n.disableFontFace&&(n.disableFontFace=_api_compatibility.apiCompatibilityParams.disableFontFace||!1),"boolean"!=typeof n.disableRange&&(n.disableRange=!1),"boolean"!=typeof n.disableStream&&(n.disableStream=!1),"boolean"!=typeof n.disableAutoFetch&&(n.disableAutoFetch=!1),(0,_util.setVerbosityLevel)(n.verbosity),!o){const t={verbosity:n.verbosity,port:_worker_options.GlobalWorkerOptions.workerPort};o=t.port?PDFWorker.fromPort(t):new PDFWorker(t),e._worker=o}const a=e.docId;return o.promise.then((function(){if(e.destroyed)throw new Error("Loading aborted");const t=_fetchDocument(o,n,i,a),r=new Promise((function(t){let e;i?e=new _transport_stream.PDFDataTransportStream({length:n.length,initialData:n.initialData,progressiveDone:n.progressiveDone,disableRange:n.disableRange,disableStream:n.disableStream},i):n.data||(e=createPDFNetworkStream({url:n.url,length:n.length,httpHeaders:n.httpHeaders,withCredentials:n.withCredentials,rangeChunkSize:n.rangeChunkSize,disableRange:n.disableRange,disableStream:n.disableStream})),t(e)}));return Promise.all([t,r]).then((function([t,r]){if(e.destroyed)throw new Error("Loading aborted");const i=new _message_handler.MessageHandler(a,t,o.port);i.postMessageTransfers=o.postMessageTransfers;const s=new WorkerTransport(i,e,r,n);e._transport=s,i.send("Ready",null)}))})).catch(e._capability.reject),e}function _fetchDocument(t,e,r,n){return t.destroyed?Promise.reject(new Error("Worker was destroyed")):(r&&(e.length=r.length,e.initialData=r.initialData,e.progressiveDone=r.progressiveDone),t.messageHandler.sendWithPromise("GetDocRequest",{docId:n,apiVersion:"2.5.207",source:{data:e.data,url:e.url,password:e.password,disableAutoFetch:e.disableAutoFetch,rangeChunkSize:e.rangeChunkSize,length:e.length},maxImageSize:e.maxImageSize,disableFontFace:e.disableFontFace,postMessageTransfers:t.postMessageTransfers,docBaseUrl:e.docBaseUrl,ignoreErrors:e.ignoreErrors,isEvalSupported:e.isEvalSupported,fontExtraProperties:e.fontExtraProperties}).then((function(e){if(t.destroyed)throw new Error("Worker was destroyed");return e})))}const PDFDocumentLoadingTask=function(){let t=0;return class{constructor(){this._capability=(0,_util.createPromiseCapability)(),this._transport=null,this._worker=null,this.docId="d"+t++,this.destroyed=!1,this.onPassword=null,this.onProgress=null,this.onUnsupportedFeature=null}get promise(){return this._capability.promise}destroy(){return this.destroyed=!0,(this._transport?this._transport.destroy():Promise.resolve()).then((()=>{this._transport=null,this._worker&&(this._worker.destroy(),this._worker=null)}))}}}();class PDFDataRangeTransport{constructor(t,e,r=!1){this.length=t,this.initialData=e,this.progressiveDone=r,this._rangeListeners=[],this._progressListeners=[],this._progressiveReadListeners=[],this._progressiveDoneListeners=[],this._readyCapability=(0,_util.createPromiseCapability)()}addRangeListener(t){this._rangeListeners.push(t)}addProgressListener(t){this._progressListeners.push(t)}addProgressiveReadListener(t){this._progressiveReadListeners.push(t)}addProgressiveDoneListener(t){this._progressiveDoneListeners.push(t)}onDataRange(t,e){for(const r of this._rangeListeners)r(t,e)}onDataProgress(t,e){this._readyCapability.promise.then((()=>{for(const r of this._progressListeners)r(t,e)}))}onDataProgressiveRead(t){this._readyCapability.promise.then((()=>{for(const e of this._progressiveReadListeners)e(t)}))}onDataProgressiveDone(){this._readyCapability.promise.then((()=>{for(const t of this._progressiveDoneListeners)t()}))}transportReady(){this._readyCapability.resolve()}requestDataRange(t,e){(0,_util.unreachable)("Abstract method PDFDataRangeTransport.requestDataRange")}abort(){}}exports.PDFDataRangeTransport=PDFDataRangeTransport;class PDFDocumentProxy{constructor(t,e){this._pdfInfo=t,this._transport=e}get numPages(){return this._pdfInfo.numPages}get fingerprint(){return this._pdfInfo.fingerprint}getPage(t){return this._transport.getPage(t)}getPageIndex(t){return this._transport.getPageIndex(t)}getDestinations(){return this._transport.getDestinations()}getDestination(t){return this._transport.getDestination(t)}getPageLabels(){return this._transport.getPageLabels()}getPageLayout(){return this._transport.getPageLayout()}getPageMode(){return this._transport.getPageMode()}getViewerPreferences(){return this._transport.getViewerPreferences()}getOpenAction(){return this._transport.getOpenAction()}getOpenActionDestination(){return(0,_display_utils.deprecated)("getOpenActionDestination, use getOpenAction instead."),this.getOpenAction().then((function(t){return t&&t.dest?t.dest:null}))}getAttachments(){return this._transport.getAttachments()}getJavaScript(){return this._transport.getJavaScript()}getOutline(){return this._transport.getOutline()}getPermissions(){return this._transport.getPermissions()}getMetadata(){return this._transport.getMetadata()}getData(){return this._transport.getData()}getDownloadInfo(){return this._transport.downloadInfoCapability.promise}getStats(){return this._transport.getStats()}cleanup(){return this._transport.startCleanup()}destroy(){return this.loadingTask.destroy()}get loadingParams(){return this._transport.loadingParams}get loadingTask(){return this._transport.loadingTask}}exports.PDFDocumentProxy=PDFDocumentProxy;class PDFPageProxy{constructor(t,e,r,n=!1){this._pageIndex=t,this._pageInfo=e,this._transport=r,this._stats=n?new _display_utils.StatTimer:null,this._pdfBug=n,this.commonObjs=r.commonObjs,this.objs=new PDFObjects,this.cleanupAfterRender=!1,this.pendingCleanup=!1,this.intentStates=Object.create(null),this.destroyed=!1}get pageNumber(){return this._pageIndex+1}get rotate(){return this._pageInfo.rotate}get ref(){return this._pageInfo.ref}get userUnit(){return this._pageInfo.userUnit}get view(){return this._pageInfo.view}getViewport({scale:t,rotation:e=this.rotate,offsetX:r=0,offsetY:n=0,dontFlip:i=!1}={}){return new _display_utils.PageViewport({viewBox:this.view,scale:t,rotation:e,offsetX:r,offsetY:n,dontFlip:i})}getAnnotations({intent:t=null}={}){return this.annotationsPromise&&this.annotationsIntent===t||(this.annotationsPromise=this._transport.getAnnotations(this._pageIndex,t),this.annotationsIntent=t),this.annotationsPromise}render({canvasContext:t,viewport:e,intent:r="display",enableWebGL:n=!1,renderInteractiveForms:i=!1,transform:o=null,imageLayer:a=null,canvasFactory:s=null,background:c=null}){this._stats&&this._stats.time("Overall");const l="print"===r?"print":"display";this.pendingCleanup=!1,this.intentStates[l]||(this.intentStates[l]=Object.create(null));const u=this.intentStates[l];u.streamReaderCancelTimeout&&(clearTimeout(u.streamReaderCancelTimeout),u.streamReaderCancelTimeout=null);const h=s||new _display_utils.DOMCanvasFactory,f=new _webgl.WebGLContext({enable:n});u.displayReadyCapability||(u.displayReadyCapability=(0,_util.createPromiseCapability)(),u.operatorList={fnArray:[],argsArray:[],lastChunk:!1},this._stats&&this._stats.time("Page Request"),this._pumpOperatorList({pageIndex:this._pageIndex,intent:l,renderInteractiveForms:!0===i}));const d=t=>{const e=u.renderTasks.indexOf(p);e>=0&&u.renderTasks.splice(e,1),(this.cleanupAfterRender||"print"===l)&&(this.pendingCleanup=!0),this._tryCleanup(),t?(p.capability.reject(t),this._abortOperatorList({intentState:u,reason:t})):p.capability.resolve(),this._stats&&(this._stats.timeEnd("Rendering"),this._stats.timeEnd("Overall"))},p=new InternalRenderTask({callback:d,params:{canvasContext:t,viewport:e,transform:o,imageLayer:a,background:c},objs:this.objs,commonObjs:this.commonObjs,operatorList:u.operatorList,pageIndex:this._pageIndex,canvasFactory:h,webGLContext:f,useRequestAnimationFrame:"print"!==l,pdfBug:this._pdfBug});u.renderTasks||(u.renderTasks=[]),u.renderTasks.push(p);const g=p.task;return u.displayReadyCapability.promise.then((t=>{this.pendingCleanup?d():(this._stats&&this._stats.time("Rendering"),p.initializeGraphics(t),p.operatorListChanged())})).catch(d),g}getOperatorList(){this.intentStates.oplist||(this.intentStates.oplist=Object.create(null));const t=this.intentStates.oplist;let e;return t.opListReadCapability||(e={},e.operatorListChanged=function(){if(t.operatorList.lastChunk){t.opListReadCapability.resolve(t.operatorList);const r=t.renderTasks.indexOf(e);r>=0&&t.renderTasks.splice(r,1)}},t.opListReadCapability=(0,_util.createPromiseCapability)(),t.renderTasks=[],t.renderTasks.push(e),t.operatorList={fnArray:[],argsArray:[],lastChunk:!1},this._stats&&this._stats.time("Page Request"),this._pumpOperatorList({pageIndex:this._pageIndex,intent:"oplist"})),t.opListReadCapability.promise}streamTextContent({normalizeWhitespace:t=!1,disableCombineTextItems:e=!1}={}){return this._transport.messageHandler.sendWithStream("GetTextContent",{pageIndex:this._pageIndex,normalizeWhitespace:!0===t,combineTextItems:!0!==e},{highWaterMark:100,size:t=>t.items.length})}getTextContent(t={}){const e=this.streamTextContent(t);return new Promise((function(t,r){const n=e.getReader(),i={items:[],styles:Object.create(null)};!function e(){n.read().then((function({value:r,done:n}){n?t(i):(Object.assign(i.styles,r.styles),i.items.push(...r.items),e())}),r)}()}))}_destroy(){this.destroyed=!0,this._transport.pageCache[this._pageIndex]=null;const t=[];return Object.keys(this.intentStates).forEach((e=>{const r=this.intentStates[e];this._abortOperatorList({intentState:r,reason:new Error("Page was destroyed."),force:!0}),"oplist"!==e&&r.renderTasks.forEach((function(e){const r=e.capability.promise.catch((function(){}));t.push(r),e.cancel()}))})),this.objs.clear(),this.annotationsPromise=null,this.pendingCleanup=!1,Promise.all(t)}cleanup(t=!1){return this.pendingCleanup=!0,this._tryCleanup(t)}_tryCleanup(t=!1){return!(!this.pendingCleanup||Object.keys(this.intentStates).some((t=>{const e=this.intentStates[t];return 0!==e.renderTasks.length||!e.operatorList.lastChunk}))||(Object.keys(this.intentStates).forEach((t=>{delete this.intentStates[t]})),this.objs.clear(),this.annotationsPromise=null,t&&this._stats&&(this._stats=new _display_utils.StatTimer),this.pendingCleanup=!1,0))}_startRenderPage(t,e){const r=this.intentStates[e];r&&(this._stats&&this._stats.timeEnd("Page Request"),r.displayReadyCapability&&r.displayReadyCapability.resolve(t))}_renderPageChunk(t,e){for(let r=0,n=t.length;r<n;r++)e.operatorList.fnArray.push(t.fnArray[r]),e.operatorList.argsArray.push(t.argsArray[r]);e.operatorList.lastChunk=t.lastChunk;for(let t=0;t<e.renderTasks.length;t++)e.renderTasks[t].operatorListChanged();t.lastChunk&&this._tryCleanup()}_pumpOperatorList(t){(0,_util.assert)(t.intent,'PDFPageProxy._pumpOperatorList: Expected "intent" argument.');const e=this._transport.messageHandler.sendWithStream("GetOperatorList",t).getReader(),r=this.intentStates[t.intent];r.streamReader=e;const n=()=>{e.read().then((({value:t,done:e})=>{e?r.streamReader=null:this._transport.destroyed||(this._renderPageChunk(t,r),n())}),(t=>{if(r.streamReader=null,!this._transport.destroyed){if(r.operatorList){r.operatorList.lastChunk=!0;for(let t=0;t<r.renderTasks.length;t++)r.renderTasks[t].operatorListChanged();this._tryCleanup()}if(r.displayReadyCapability)r.displayReadyCapability.reject(t);else{if(!r.opListReadCapability)throw t;r.opListReadCapability.reject(t)}}}))};n()}_abortOperatorList({intentState:t,reason:e,force:r=!1}){if((0,_util.assert)(e instanceof Error||"object"==typeof e&&null!==e,'PDFPageProxy._abortOperatorList: Expected "reason" argument.'),t.streamReader){if(!r){if(0!==t.renderTasks.length)return;if(e instanceof _display_utils.RenderingCancelledException)return void(t.streamReaderCancelTimeout=setTimeout((()=>{this._abortOperatorList({intentState:t,reason:e,force:!0}),t.streamReaderCancelTimeout=null}),RENDERING_CANCELLED_TIMEOUT))}t.streamReader.cancel(new _util.AbortException(e&&e.message)),t.streamReader=null,this._transport.destroyed||(Object.keys(this.intentStates).some((e=>this.intentStates[e]===t&&(delete this.intentStates[e],!0))),this.cleanup())}}get stats(){return this._stats}}exports.PDFPageProxy=PDFPageProxy;class LoopbackPort{constructor(t=!0){this._listeners=[],this._defer=t,this._deferred=Promise.resolve(void 0)}postMessage(t,e){if(!this._defer)return void this._listeners.forEach((e=>{e.call(this,{data:t})}));const r=new WeakMap,n={data:function t(n){if("object"!=typeof n||null===n)return n;if(r.has(n))return r.get(n);let i,o;if((i=n.buffer)&&(0,_util.isArrayBuffer)(i))return o=e&&e.includes(i)?new n.constructor(i,n.byteOffset,n.byteLength):new n.constructor(n),r.set(n,o),o;o=Array.isArray(n)?[]:{},r.set(n,o);for(const e in n){let r,i=n;for(;!(r=Object.getOwnPropertyDescriptor(i,e));)i=Object.getPrototypeOf(i);if(void 0!==r.value)if("function"!=typeof r.value)o[e]=t(r.value);else if(n.hasOwnProperty&&n.hasOwnProperty(e))throw new Error(`LoopbackPort.postMessage - cannot clone: ${n[e]}`)}return o}(t)};this._deferred.then((()=>{this._listeners.forEach((t=>{t.call(this,n)}))}))}addEventListener(t,e){this._listeners.push(e)}removeEventListener(t,e){const r=this._listeners.indexOf(e);this._listeners.splice(r,1)}terminate(){this._listeners.length=0}}exports.LoopbackPort=LoopbackPort;const PDFWorker=function PDFWorkerClosure(){const pdfWorkerPorts=new WeakMap;let isWorkerDisabled=!1,fallbackWorkerSrc,nextFakeWorkerId=0,fakeWorkerCapability;if(_is_node.isNodeJS)isWorkerDisabled=!0,fallbackWorkerSrc="./pdf.worker.js";else if("object"==typeof document&&"currentScript"in document){const t=document.currentScript&&document.currentScript.src;t&&(fallbackWorkerSrc=t.replace(/(\.(?:min\.)?js)(\?.*)?$/i,".worker$1$2"))}function getWorkerSrc(){if(_worker_options.GlobalWorkerOptions.workerSrc)return _worker_options.GlobalWorkerOptions.workerSrc;if(void 0!==fallbackWorkerSrc)return _is_node.isNodeJS||(0,_display_utils.deprecated)('No "GlobalWorkerOptions.workerSrc" specified.'),fallbackWorkerSrc;throw new Error('No "GlobalWorkerOptions.workerSrc" specified.')}function getMainThreadWorkerMessageHandler(){let t;try{t=globalThis.pdfjsWorker&&globalThis.pdfjsWorker.WorkerMessageHandler}catch(t){}return t||null}function setupFakeWorkerGlobal(){if(fakeWorkerCapability)return fakeWorkerCapability.promise;fakeWorkerCapability=(0,_util.createPromiseCapability)();const loader=async function(){const mainWorkerMessageHandler=getMainThreadWorkerMessageHandler();if(mainWorkerMessageHandler)return mainWorkerMessageHandler;if(_is_node.isNodeJS){const worker=eval("require")(getWorkerSrc());return worker.WorkerMessageHandler}return await(0,_display_utils.loadScript)(getWorkerSrc()),window.pdfjsWorker.WorkerMessageHandler};return loader().then(fakeWorkerCapability.resolve,fakeWorkerCapability.reject),fakeWorkerCapability.promise}function createCDNWrapper(t){const e="importScripts('"+t+"');";return URL.createObjectURL(new Blob([e]))}class PDFWorker{constructor({name:t=null,port:e=null,verbosity:r=(0,_util.getVerbosityLevel)()}={}){if(e&&pdfWorkerPorts.has(e))throw new Error("Cannot use more than one PDFWorker per port");if(this.name=t,this.destroyed=!1,this.postMessageTransfers=!0,this.verbosity=r,this._readyCapability=(0,_util.createPromiseCapability)(),this._port=null,this._webWorker=null,this._messageHandler=null,e)return pdfWorkerPorts.set(e,this),void this._initializeFromPort(e);this._initialize()}get promise(){return this._readyCapability.promise}get port(){return this._port}get messageHandler(){return this._messageHandler}_initializeFromPort(t){this._port=t,this._messageHandler=new _message_handler.MessageHandler("main","worker",t),this._messageHandler.on("ready",(function(){})),this._readyCapability.resolve()}_initialize(){if("undefined"!=typeof Worker&&!isWorkerDisabled&&!getMainThreadWorkerMessageHandler()){let t=getWorkerSrc();try{(0,_util.isSameOrigin)(window.location.href,t)||(t=createCDNWrapper(new URL(t,window.location).href));const e=new Worker(t),r=new _message_handler.MessageHandler("main","worker",e),n=()=>{e.removeEventListener("error",i),r.destroy(),e.terminate(),this.destroyed?this._readyCapability.reject(new Error("Worker was destroyed")):this._setupFakeWorker()},i=()=>{this._webWorker||n()};e.addEventListener("error",i),r.on("test",(t=>{e.removeEventListener("error",i),this.destroyed?n():t?(this._messageHandler=r,this._port=e,this._webWorker=e,t.supportTransfers||(this.postMessageTransfers=!1),this._readyCapability.resolve(),r.send("configure",{verbosity:this.verbosity})):(this._setupFakeWorker(),r.destroy(),e.terminate())})),r.on("ready",(t=>{if(e.removeEventListener("error",i),this.destroyed)n();else try{o()}catch(t){this._setupFakeWorker()}}));const o=()=>{const t=new Uint8Array([this.postMessageTransfers?255:0]);try{r.send("test",t,[t.buffer])}catch(e){(0,_util.warn)("Cannot use postMessage transfers."),t[0]=0,r.send("test",t)}};return void o()}catch(t){(0,_util.info)("The worker has been disabled.")}}this._setupFakeWorker()}_setupFakeWorker(){isWorkerDisabled||((0,_util.warn)("Setting up fake worker."),isWorkerDisabled=!0),setupFakeWorkerGlobal().then((t=>{if(this.destroyed)return void this._readyCapability.reject(new Error("Worker was destroyed"));const e=new LoopbackPort;this._port=e;const r="fake"+nextFakeWorkerId++,n=new _message_handler.MessageHandler(r+"_worker",r,e);t.setup(n,e);const i=new _message_handler.MessageHandler(r,r+"_worker",e);this._messageHandler=i,this._readyCapability.resolve(),i.send("configure",{verbosity:this.verbosity})})).catch((t=>{this._readyCapability.reject(new Error(`Setting up fake worker failed: "${t.message}".`))}))}destroy(){this.destroyed=!0,this._webWorker&&(this._webWorker.terminate(),this._webWorker=null),pdfWorkerPorts.delete(this._port),this._port=null,this._messageHandler&&(this._messageHandler.destroy(),this._messageHandler=null)}static fromPort(t){if(!t||!t.port)throw new Error("PDFWorker.fromPort - invalid method signature.");return pdfWorkerPorts.has(t.port)?pdfWorkerPorts.get(t.port):new PDFWorker(t)}static getWorkerSrc(){return getWorkerSrc()}}return PDFWorker}();exports.PDFWorker=PDFWorker;class WorkerTransport{constructor(t,e,r,n){this.messageHandler=t,this.loadingTask=e,this.commonObjs=new PDFObjects,this.fontLoader=new _font_loader.FontLoader({docId:e.docId,onUnsupportedFeature:this._onUnsupportedFeature.bind(this)}),this._params=n,this.CMapReaderFactory=new n.CMapReaderFactory({baseUrl:n.cMapUrl,isCompressed:n.cMapPacked}),this.destroyed=!1,this.destroyCapability=null,this._passwordCapability=null,this._networkStream=r,this._fullReader=null,this._lastProgress=null,this.pageCache=[],this.pagePromises=[],this.downloadInfoCapability=(0,_util.createPromiseCapability)(),this.setupMessageHandler()}destroy(){if(this.destroyCapability)return this.destroyCapability.promise;this.destroyed=!0,this.destroyCapability=(0,_util.createPromiseCapability)(),this._passwordCapability&&this._passwordCapability.reject(new Error("Worker was destroyed during onPassword callback"));const t=[];this.pageCache.forEach((function(e){e&&t.push(e._destroy())})),this.pageCache.length=0,this.pagePromises.length=0;const e=this.messageHandler.sendWithPromise("Terminate",null);return t.push(e),Promise.all(t).then((()=>{this.fontLoader.clear(),this._networkStream&&this._networkStream.cancelAllRequests(new _util.AbortException("Worker was terminated.")),this.messageHandler&&(this.messageHandler.destroy(),this.messageHandler=null),this.destroyCapability.resolve()}),this.destroyCapability.reject),this.destroyCapability.promise}setupMessageHandler(){const{messageHandler:t,loadingTask:e}=this;t.on("GetReader",((t,e)=>{(0,_util.assert)(this._networkStream,"GetReader - no `IPDFStream` instance available."),this._fullReader=this._networkStream.getFullReader(),this._fullReader.onProgress=t=>{this._lastProgress={loaded:t.loaded,total:t.total}},e.onPull=()=>{this._fullReader.read().then((function({value:t,done:r}){r?e.close():((0,_util.assert)((0,_util.isArrayBuffer)(t),"GetReader - expected an ArrayBuffer."),e.enqueue(new Uint8Array(t),1,[t]))})).catch((t=>{e.error(t)}))},e.onCancel=t=>{this._fullReader.cancel(t)}})),t.on("ReaderHeadersReady",(t=>{const r=(0,_util.createPromiseCapability)(),n=this._fullReader;return n.headersReady.then((()=>{n.isStreamingSupported&&n.isRangeSupported||(this._lastProgress&&e.onProgress&&e.onProgress(this._lastProgress),n.onProgress=t=>{e.onProgress&&e.onProgress({loaded:t.loaded,total:t.total})}),r.resolve({isStreamingSupported:n.isStreamingSupported,isRangeSupported:n.isRangeSupported,contentLength:n.contentLength})}),r.reject),r.promise})),t.on("GetRangeReader",((t,e)=>{(0,_util.assert)(this._networkStream,"GetRangeReader - no `IPDFStream` instance available.");const r=this._networkStream.getRangeReader(t.begin,t.end);r?(e.onPull=()=>{r.read().then((function({value:t,done:r}){r?e.close():((0,_util.assert)((0,_util.isArrayBuffer)(t),"GetRangeReader - expected an ArrayBuffer."),e.enqueue(new Uint8Array(t),1,[t]))})).catch((t=>{e.error(t)}))},e.onCancel=t=>{r.cancel(t)}):e.close()})),t.on("GetDoc",(({pdfInfo:t})=>{this._numPages=t.numPages,e._capability.resolve(new PDFDocumentProxy(t,this))})),t.on("DocException",(function(t){let r;switch(t.name){case"PasswordException":r=new _util.PasswordException(t.message,t.code);break;case"InvalidPDFException":r=new _util.InvalidPDFException(t.message);break;case"MissingPDFException":r=new _util.MissingPDFException(t.message);break;case"UnexpectedResponseException":r=new _util.UnexpectedResponseException(t.message,t.status);break;case"UnknownErrorException":r=new _util.UnknownErrorException(t.message,t.details)}e._capability.reject(r)})),t.on("PasswordRequest",(t=>{if(this._passwordCapability=(0,_util.createPromiseCapability)(),e.onPassword){const r=t=>{this._passwordCapability.resolve({password:t})};try{e.onPassword(r,t.code)}catch(t){this._passwordCapability.reject(t)}}else this._passwordCapability.reject(new _util.PasswordException(t.message,t.code));return this._passwordCapability.promise})),t.on("DataLoaded",(t=>{e.onProgress&&e.onProgress({loaded:t.length,total:t.length}),this.downloadInfoCapability.resolve(t)})),t.on("StartRenderPage",(t=>{this.destroyed||this.pageCache[t.pageIndex]._startRenderPage(t.transparency,t.intent)})),t.on("commonobj",(e=>{if(this.destroyed)return;const[r,n,i]=e;if(!this.commonObjs.has(r))switch(n){case"Font":const e=this._params;if("error"in i){const t=i.error;(0,_util.warn)(`Error during font loading: ${t}`),this.commonObjs.resolve(r,t);break}let o=null;e.pdfBug&&globalThis.FontInspector&&globalThis.FontInspector.enabled&&(o={registerFont(t,e){globalThis.FontInspector.fontAdded(t,e)}});const a=new _font_loader.FontFaceObject(i,{isEvalSupported:e.isEvalSupported,disableFontFace:e.disableFontFace,ignoreErrors:e.ignoreErrors,onUnsupportedFeature:this._onUnsupportedFeature.bind(this),fontRegistry:o});this.fontLoader.bind(a).catch((e=>t.sendWithPromise("FontFallback",{id:r}))).finally((()=>{!e.fontExtraProperties&&a.data&&(a.data=null),this.commonObjs.resolve(r,a)}));break;case"FontPath":case"FontType3Res":case"Image":this.commonObjs.resolve(r,i);break;default:throw new Error(`Got unknown common object type ${n}`)}})),t.on("obj",(t=>{if(this.destroyed)return;const[e,r,n,i]=t,o=this.pageCache[r];if(!o.objs.has(e))switch(n){case"Image":o.objs.resolve(e,i);const t=8e6;i&&"data"in i&&i.data.length>t&&(o.cleanupAfterRender=!0);break;default:throw new Error(`Got unknown object type ${n}`)}})),t.on("DocProgress",(t=>{this.destroyed||e.onProgress&&e.onProgress({loaded:t.loaded,total:t.total})})),t.on("UnsupportedFeature",this._onUnsupportedFeature.bind(this)),t.on("FetchBuiltInCMap",((t,e)=>{if(this.destroyed)return void e.error(new Error("Worker was destroyed"));let r=!1;e.onPull=()=>{r?e.close():(r=!0,this.CMapReaderFactory.fetch(t).then((function(t){e.enqueue(t,1,[t.cMapData.buffer])})).catch((function(t){e.error(t)})))}}))}_onUnsupportedFeature({featureId:t}){this.destroyed||this.loadingTask.onUnsupportedFeature&&this.loadingTask.onUnsupportedFeature(t)}getData(){return this.messageHandler.sendWithPromise("GetData",null)}getPage(t){if(!Number.isInteger(t)||t<=0||t>this._numPages)return Promise.reject(new Error("Invalid page request"));const e=t-1;if(e in this.pagePromises)return this.pagePromises[e];const r=this.messageHandler.sendWithPromise("GetPage",{pageIndex:e}).then((t=>{if(this.destroyed)throw new Error("Transport destroyed");const r=new PDFPageProxy(e,t,this,this._params.pdfBug);return this.pageCache[e]=r,r}));return this.pagePromises[e]=r,r}getPageIndex(t){return this.messageHandler.sendWithPromise("GetPageIndex",{ref:t}).catch((function(t){return Promise.reject(new Error(t))}))}getAnnotations(t,e){return this.messageHandler.sendWithPromise("GetAnnotations",{pageIndex:t,intent:e})}getDestinations(){return this.messageHandler.sendWithPromise("GetDestinations",null)}getDestination(t){return"string"!=typeof t?Promise.reject(new Error("Invalid destination request.")):this.messageHandler.sendWithPromise("GetDestination",{id:t})}getPageLabels(){return this.messageHandler.sendWithPromise("GetPageLabels",null)}getPageLayout(){return this.messageHandler.sendWithPromise("GetPageLayout",null)}getPageMode(){return this.messageHandler.sendWithPromise("GetPageMode",null)}getViewerPreferences(){return this.messageHandler.sendWithPromise("GetViewerPreferences",null)}getOpenAction(){return this.messageHandler.sendWithPromise("GetOpenAction",null)}getAttachments(){return this.messageHandler.sendWithPromise("GetAttachments",null)}getJavaScript(){return this.messageHandler.sendWithPromise("GetJavaScript",null)}getOutline(){return this.messageHandler.sendWithPromise("GetOutline",null)}getPermissions(){return this.messageHandler.sendWithPromise("GetPermissions",null)}getMetadata(){return this.messageHandler.sendWithPromise("GetMetadata",null).then((t=>({info:t[0],metadata:t[1]?new _metadata.Metadata(t[1]):null,contentDispositionFilename:this._fullReader?this._fullReader.filename:null})))}getStats(){return this.messageHandler.sendWithPromise("GetStats",null)}startCleanup(){return this.messageHandler.sendWithPromise("Cleanup",null).then((()=>{for(let t=0,e=this.pageCache.length;t<e;t++){const e=this.pageCache[t];if(e&&!e.cleanup())throw new Error(`startCleanup: Page ${t+1} is currently rendering.`)}this.commonObjs.clear(),this.fontLoader.clear()}))}get loadingParams(){const t=this._params;return(0,_util.shadow)(this,"loadingParams",{disableAutoFetch:t.disableAutoFetch,disableFontFace:t.disableFontFace})}}class PDFObjects{constructor(){this._objs=Object.create(null)}_ensureObj(t){return this._objs[t]?this._objs[t]:this._objs[t]={capability:(0,_util.createPromiseCapability)(),data:null,resolved:!1}}get(t,e=null){if(e)return this._ensureObj(t).capability.promise.then(e),null;const r=this._objs[t];if(!r||!r.resolved)throw new Error(`Requesting object that isn't resolved yet ${t}.`);return r.data}has(t){const e=this._objs[t];return!!e&&e.resolved}resolve(t,e){const r=this._ensureObj(t);r.resolved=!0,r.data=e,r.capability.resolve(e)}clear(){this._objs=Object.create(null)}}class RenderTask{constructor(t){this._internalRenderTask=t,this.onContinue=null}get promise(){return this._internalRenderTask.capability.promise}cancel(){this._internalRenderTask.cancel()}}const InternalRenderTask=function(){const t=new WeakSet;return class{constructor({callback:t,params:e,objs:r,commonObjs:n,operatorList:i,pageIndex:o,canvasFactory:a,webGLContext:s,useRequestAnimationFrame:c=!1,pdfBug:l=!1}){this.callback=t,this.params=e,this.objs=r,this.commonObjs=n,this.operatorListIdx=null,this.operatorList=i,this._pageIndex=o,this.canvasFactory=a,this.webGLContext=s,this._pdfBug=l,this.running=!1,this.graphicsReadyCallback=null,this.graphicsReady=!1,this._useRequestAnimationFrame=!0===c&&"undefined"!=typeof window,this.cancelled=!1,this.capability=(0,_util.createPromiseCapability)(),this.task=new RenderTask(this),this._continueBound=this._continue.bind(this),this._scheduleNextBound=this._scheduleNext.bind(this),this._nextBound=this._next.bind(this),this._canvas=e.canvasContext.canvas}initializeGraphics(e=!1){if(this.cancelled)return;if(this._canvas){if(t.has(this._canvas))throw new Error("Cannot use the same canvas during multiple render() operations. Use different canvas or ensure previous operations were cancelled or completed.");t.add(this._canvas)}this._pdfBug&&globalThis.StepperManager&&globalThis.StepperManager.enabled&&(this.stepper=globalThis.StepperManager.create(this._pageIndex),this.stepper.init(this.operatorList),this.stepper.nextBreakPoint=this.stepper.getNextBreakPoint());const{canvasContext:r,viewport:n,transform:i,imageLayer:o,background:a}=this.params;this.gfx=new _canvas.CanvasGraphics(r,this.commonObjs,this.objs,this.canvasFactory,this.webGLContext,o),this.gfx.beginDrawing({transform:i,viewport:n,transparency:e,background:a}),this.operatorListIdx=0,this.graphicsReady=!0,this.graphicsReadyCallback&&this.graphicsReadyCallback()}cancel(e=null){this.running=!1,this.cancelled=!0,this.gfx&&this.gfx.endDrawing(),this._canvas&&t.delete(this._canvas),this.callback(e||new _display_utils.RenderingCancelledException(`Rendering cancelled, page ${this._pageIndex+1}`,"canvas"))}operatorListChanged(){this.graphicsReady?(this.stepper&&this.stepper.updateOperatorList(this.operatorList),this.running||this._continue()):this.graphicsReadyCallback||(this.graphicsReadyCallback=this._continueBound)}_continue(){this.running=!0,this.cancelled||(this.task.onContinue?this.task.onContinue(this._scheduleNextBound):this._scheduleNext())}_scheduleNext(){this._useRequestAnimationFrame?window.requestAnimationFrame((()=>{this._nextBound().catch(this.cancel.bind(this))})):Promise.resolve().then(this._nextBound).catch(this.cancel.bind(this))}async _next(){this.cancelled||(this.operatorListIdx=this.gfx.executeOperatorList(this.operatorList,this.operatorListIdx,this._continueBound,this.stepper),this.operatorListIdx===this.operatorList.argsArray.length&&(this.running=!1,this.operatorList.lastChunk&&(this.gfx.endDrawing(),this._canvas&&t.delete(this._canvas),this.callback())))}}}(),version="2.5.207";exports.version=version;const build="0974d605";exports.build=build},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.FontLoader=e.FontFaceObject=void 0;var n=r(2);class i{constructor({docId:t,onUnsupportedFeature:e}){this.constructor===i&&(0,n.unreachable)("Cannot initialize BaseFontLoader."),this.docId=t,this._onUnsupportedFeature=e,this.nativeFontFaces=[],this.styleElement=null}addNativeFontFace(t){this.nativeFontFaces.push(t),document.fonts.add(t)}insertRule(t){let e=this.styleElement;e||(e=this.styleElement=document.createElement("style"),e.id=`PDFJS_FONT_STYLE_TAG_${this.docId}`,document.documentElement.getElementsByTagName("head")[0].appendChild(e));const r=e.sheet;r.insertRule(t,r.cssRules.length)}clear(){this.nativeFontFaces.forEach((function(t){document.fonts.delete(t)})),this.nativeFontFaces.length=0,this.styleElement&&(this.styleElement.remove(),this.styleElement=null)}async bind(t){if(t.attached||t.missingFile)return;if(t.attached=!0,this.isFontLoadingAPISupported){const e=t.createNativeFontFace();if(e){this.addNativeFontFace(e);try{await e.loaded}catch(r){throw this._onUnsupportedFeature({featureId:n.UNSUPPORTED_FEATURES.errorFontLoadNative}),(0,n.warn)(`Failed to load font '${e.family}': '${r}'.`),t.disableFontFace=!0,r}}return}const e=t.createFontFaceRule();if(e){if(this.insertRule(e),this.isSyncFontLoadingSupported)return;await new Promise((r=>{const n=this._queueLoadingCallback(r);this._prepareFontLoadEvent([e],[t],n)}))}}_queueLoadingCallback(t){(0,n.unreachable)("Abstract method `_queueLoadingCallback`.")}get isFontLoadingAPISupported(){const t="undefined"!=typeof document&&!!document.fonts;return(0,n.shadow)(this,"isFontLoadingAPISupported",t)}get isSyncFontLoadingSupported(){(0,n.unreachable)("Abstract method `isSyncFontLoadingSupported`.")}get _loadTestFont(){(0,n.unreachable)("Abstract method `_loadTestFont`.")}_prepareFontLoadEvent(t,e,r){(0,n.unreachable)("Abstract method `_prepareFontLoadEvent`.")}}let o;e.FontLoader=o,e.FontLoader=o=class extends i{constructor(t){super(t),this.loadingContext={requests:[],nextRequestId:0},this.loadTestFontId=0}get isSyncFontLoadingSupported(){let t=!1;if("undefined"==typeof navigator)t=!0;else{const e=/Mozilla\/5.0.*?rv:(\d+).*? Gecko/.exec(navigator.userAgent);e&&e[1]>=14&&(t=!0)}return(0,n.shadow)(this,"isSyncFontLoadingSupported",t)}_queueLoadingCallback(t){const e=this.loadingContext,r={id:"pdfjs-font-loading-"+e.nextRequestId++,done:!1,complete:function(){for((0,n.assert)(!r.done,"completeRequest() cannot be called twice."),r.done=!0;e.requests.length>0&&e.requests[0].done;){const t=e.requests.shift();setTimeout(t.callback,0)}},callback:t};return e.requests.push(r),r}get _loadTestFont(){return(0,n.shadow)(this,"_loadTestFont",atob("T1RUTwALAIAAAwAwQ0ZGIDHtZg4AAAOYAAAAgUZGVE1lkzZwAAAEHAAAABxHREVGABQAFQAABDgAAAAeT1MvMlYNYwkAAAEgAAAAYGNtYXABDQLUAAACNAAAAUJoZWFk/xVFDQAAALwAAAA2aGhlYQdkA+oAAAD0AAAAJGhtdHgD6AAAAAAEWAAAAAZtYXhwAAJQAAAAARgAAAAGbmFtZVjmdH4AAAGAAAAAsXBvc3T/hgAzAAADeAAAACAAAQAAAAEAALZRFsRfDzz1AAsD6AAAAADOBOTLAAAAAM4KHDwAAAAAA+gDIQAAAAgAAgAAAAAAAAABAAADIQAAAFoD6AAAAAAD6AABAAAAAAAAAAAAAAAAAAAAAQAAUAAAAgAAAAQD6AH0AAUAAAKKArwAAACMAooCvAAAAeAAMQECAAACAAYJAAAAAAAAAAAAAQAAAAAAAAAAAAAAAFBmRWQAwAAuAC4DIP84AFoDIQAAAAAAAQAAAAAAAAAAACAAIAABAAAADgCuAAEAAAAAAAAAAQAAAAEAAAAAAAEAAQAAAAEAAAAAAAIAAQAAAAEAAAAAAAMAAQAAAAEAAAAAAAQAAQAAAAEAAAAAAAUAAQAAAAEAAAAAAAYAAQAAAAMAAQQJAAAAAgABAAMAAQQJAAEAAgABAAMAAQQJAAIAAgABAAMAAQQJAAMAAgABAAMAAQQJAAQAAgABAAMAAQQJAAUAAgABAAMAAQQJAAYAAgABWABYAAAAAAAAAwAAAAMAAAAcAAEAAAAAADwAAwABAAAAHAAEACAAAAAEAAQAAQAAAC7//wAAAC7////TAAEAAAAAAAABBgAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAD/gwAyAAAAAQAAAAAAAAAAAAAAAAAAAAABAAQEAAEBAQJYAAEBASH4DwD4GwHEAvgcA/gXBIwMAYuL+nz5tQXkD5j3CBLnEQACAQEBIVhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYAAABAQAADwACAQEEE/t3Dov6fAH6fAT+fPp8+nwHDosMCvm1Cvm1DAz6fBQAAAAAAAABAAAAAMmJbzEAAAAAzgTjFQAAAADOBOQpAAEAAAAAAAAADAAUAAQAAAABAAAAAgABAAAAAAAAAAAD6AAAAAAAAA=="))}_prepareFontLoadEvent(t,e,r){function i(t,e){return t.charCodeAt(e)<<24|t.charCodeAt(e+1)<<16|t.charCodeAt(e+2)<<8|255&t.charCodeAt(e+3)}function o(t,e,r,n){return t.substring(0,e)+n+t.substring(e+r)}let a,s;const c=document.createElement("canvas");c.width=1,c.height=1;const l=c.getContext("2d");let u=0;const h=`lt${Date.now()}${this.loadTestFontId++}`;let f=this._loadTestFont;f=o(f,976,h.length,h);const d=1482184792;let p=i(f,16);for(a=0,s=h.length-3;a<s;a+=4)p=p-d+i(h,a)|0;a<h.length&&(p=p-d+i(h+"XXX",a)|0),f=o(f,16,4,(0,n.string32)(p));const g=`@font-face {font-family:"${h}";src:url(data:font/opentype;base64,${btoa(f)});}`;this.insertRule(g);const m=[];for(a=0,s=e.length;a<s;a++)m.push(e[a].loadedName);m.push(h);const v=document.createElement("div");for(v.style.visibility="hidden",v.style.width=v.style.height="10px",v.style.position="absolute",v.style.top=v.style.left="0px",a=0,s=m.length;a<s;++a){const t=document.createElement("span");t.textContent="Hi",t.style.fontFamily=m[a],v.appendChild(t)}document.body.appendChild(v),function t(e,r){if(u++,u>30)return(0,n.warn)("Load test font never loaded."),void r();l.font="30px "+e,l.fillText(".",0,20),l.getImageData(0,0,1,1).data[3]>0?r():setTimeout(t.bind(null,e,r))}(h,(function(){document.body.removeChild(v),r.complete()}))}},e.FontFaceObject=class{constructor(t,{isEvalSupported:e=!0,disableFontFace:r=!1,ignoreErrors:n=!1,onUnsupportedFeature:i=null,fontRegistry:o=null}){this.compiledGlyphs=Object.create(null);for(const e in t)this[e]=t[e];this.isEvalSupported=!1!==e,this.disableFontFace=!0===r,this.ignoreErrors=!0===n,this._onUnsupportedFeature=i,this.fontRegistry=o}createNativeFontFace(){if(!this.data||this.disableFontFace)return null;const t=new FontFace(this.loadedName,this.data,{});return this.fontRegistry&&this.fontRegistry.registerFont(this),t}createFontFaceRule(){if(!this.data||this.disableFontFace)return null;const t=(0,n.bytesToString)(new Uint8Array(this.data)),e=`url(data:${this.mimetype};base64,${btoa(t)});`,r=`@font-face {font-family:"${this.loadedName}";src:${e}}`;return this.fontRegistry&&this.fontRegistry.registerFont(this,e),r}getPathGenerator(t,e){if(void 0!==this.compiledGlyphs[e])return this.compiledGlyphs[e];let r,i;try{r=t.get(this.loadedName+"_path_"+e)}catch(t){if(!this.ignoreErrors)throw t;return this._onUnsupportedFeature&&this._onUnsupportedFeature({featureId:n.UNSUPPORTED_FEATURES.errorFontGetPath}),(0,n.warn)(`getPathGenerator - ignoring character: "${t}".`),this.compiledGlyphs[e]=function(t,e){}}if(this.isEvalSupported&&n.IsEvalSupportedCached.value){let t,n="";for(let e=0,o=r.length;e<o;e++)i=r[e],t=void 0!==i.args?i.args.join(","):"",n+="c."+i.cmd+"("+t+");\n";return this.compiledGlyphs[e]=new Function("c","size",n)}return this.compiledGlyphs[e]=function(t,e){for(let n=0,o=r.length;n<o;n++)i=r[n],"scale"===i.cmd&&(i.args=[e,-e]),t[i.cmd].apply(t,i.args)}}}},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.apiCompatibilityParams=void 0;var n=r(4);const i=Object.create(null);n.isNodeJS&&(i.disableFontFace=!0);const o=Object.freeze(i);e.apiCompatibilityParams=o},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.CanvasGraphics=void 0;var n=r(2),i=r(9),o=4096,a=.65,s=16;function c(t){t.mozCurrentTransform||(t._originalSave=t.save,t._originalRestore=t.restore,t._originalRotate=t.rotate,t._originalScale=t.scale,t._originalTranslate=t.translate,t._originalTransform=t.transform,t._originalSetTransform=t.setTransform,t._transformMatrix=t._transformMatrix||[1,0,0,1,0,0],t._transformStack=[],Object.defineProperty(t,"mozCurrentTransform",{get:function(){return this._transformMatrix}}),Object.defineProperty(t,"mozCurrentTransformInverse",{get:function(){var t=this._transformMatrix,e=t[0],r=t[1],n=t[2],i=t[3],o=t[4],a=t[5],s=e*i-r*n,c=r*n-e*i;return[i/s,r/c,n/c,e/s,(i*o-n*a)/c,(r*o-e*a)/s]}}),t.save=function(){var t=this._transformMatrix;this._transformStack.push(t),this._transformMatrix=t.slice(0,6),this._originalSave()},t.restore=function(){var t=this._transformStack.pop();t&&(this._transformMatrix=t,this._originalRestore())},t.translate=function(t,e){var r=this._transformMatrix;r[4]=r[0]*t+r[2]*e+r[4],r[5]=r[1]*t+r[3]*e+r[5],this._originalTranslate(t,e)},t.scale=function(t,e){var r=this._transformMatrix;r[0]=r[0]*t,r[1]=r[1]*t,r[2]=r[2]*e,r[3]=r[3]*e,this._originalScale(t,e)},t.transform=function(e,r,n,i,o,a){var s=this._transformMatrix;this._transformMatrix=[s[0]*e+s[2]*r,s[1]*e+s[3]*r,s[0]*n+s[2]*i,s[1]*n+s[3]*i,s[0]*o+s[2]*a+s[4],s[1]*o+s[3]*a+s[5]],t._originalTransform(e,r,n,i,o,a)},t.setTransform=function(e,r,n,i,o,a){this._transformMatrix=[e,r,n,i,o,a],t._originalSetTransform(e,r,n,i,o,a)},t.rotate=function(t){var e=Math.cos(t),r=Math.sin(t),n=this._transformMatrix;this._transformMatrix=[n[0]*e+n[2]*r,n[1]*e+n[3]*r,n[0]*-r+n[2]*e,n[1]*-r+n[3]*e,n[4],n[5]],this._originalRotate(t)})}var l=function(){function t(t){this.canvasFactory=t,this.cache=Object.create(null)}return t.prototype={getCanvas:function(t,e,r,n){var i;return void 0!==this.cache[t]?(i=this.cache[t],this.canvasFactory.reset(i,e,r),i.context.setTransform(1,0,0,1,0,0)):(i=this.canvasFactory.create(e,r),this.cache[t]=i),n&&c(i.context),i},clear(){for(var t in this.cache){var e=this.cache[t];this.canvasFactory.destroy(e),delete this.cache[t]}}},t}(),u=function(){function t(){this.alphaIsShape=!1,this.fontSize=0,this.fontSizeScale=1,this.textMatrix=n.IDENTITY_MATRIX,this.textMatrixScale=1,this.fontMatrix=n.FONT_IDENTITY_MATRIX,this.leading=0,this.x=0,this.y=0,this.lineX=0,this.lineY=0,this.charSpacing=0,this.wordSpacing=0,this.textHScale=1,this.textRenderingMode=n.TextRenderingMode.FILL,this.textRise=0,this.fillColor="#000000",this.strokeColor="#000000",this.patternFill=!1,this.fillAlpha=1,this.strokeAlpha=1,this.lineWidth=1,this.activeSMask=null,this.resumeSMaskCtx=null}return t.prototype={clone:function(){return Object.create(this)},setCurrentPoint:function(t,e){this.x=t,this.y=e}},t}(),h=function(){function t(t,e,r,n,i,o){this.ctx=t,this.current=new u,this.stateStack=[],this.pendingClip=null,this.pendingEOFill=!1,this.res=null,this.xobjs=null,this.commonObjs=e,this.objs=r,this.canvasFactory=n,this.webGLContext=i,this.imageLayer=o,this.groupStack=[],this.processingType3=null,this.baseTransform=null,this.baseTransformStack=[],this.groupLevel=0,this.smaskStack=[],this.smaskCounter=0,this.tempSMask=null,this.cachedCanvases=new l(this.canvasFactory),t&&c(t),this._cachedGetSinglePixelWidth=null}function e(t,e){if("undefined"!=typeof ImageData&&e instanceof ImageData)t.putImageData(e,0,0);else{var r,i,o,a,c,l=e.height,u=e.width,h=l%s,f=(l-h)/s,d=0===h?f:f+1,p=t.createImageData(u,s),g=0,m=e.data,v=p.data;if(e.kind===n.ImageKind.GRAYSCALE_1BPP){var y=m.byteLength,_=new Uint32Array(v.buffer,0,v.byteLength>>2),b=_.length,A=u+7>>3,x=4294967295,S=n.IsLittleEndianCached.value?4278190080:255;for(i=0;i<d;i++){for(a=i<f?s:h,r=0,o=0;o<a;o++){for(var w=y-g,C=0,E=w>A?u:8*w-7,k=-8&E,P=0,R=0;C<k;C+=8)R=m[g++],_[r++]=128&R?x:S,_[r++]=64&R?x:S,_[r++]=32&R?x:S,_[r++]=16&R?x:S,_[r++]=8&R?x:S,_[r++]=4&R?x:S,_[r++]=2&R?x:S,_[r++]=1&R?x:S;for(;C<E;C++)0===P&&(R=m[g++],P=128),_[r++]=R&P?x:S,P>>=1}for(;r<b;)_[r++]=0;t.putImageData(p,0,i*s)}}else if(e.kind===n.ImageKind.RGBA_32BPP){for(o=0,c=u*s*4,i=0;i<f;i++)v.set(m.subarray(g,g+c)),g+=c,t.putImageData(p,0,o),o+=s;i<d&&(c=u*h*4,v.set(m.subarray(g,g+c)),t.putImageData(p,0,o))}else{if(e.kind!==n.ImageKind.RGB_24BPP)throw new Error(`bad image kind: ${e.kind}`);for(c=u*(a=s),i=0;i<d;i++){for(i>=f&&(c=u*(a=h)),r=0,o=c;o--;)v[r++]=m[g++],v[r++]=m[g++],v[r++]=m[g++],v[r++]=255;t.putImageData(p,0,i*s)}}}}function r(t,e){for(var r=e.height,n=e.width,i=r%s,o=(r-i)/s,a=0===i?o:o+1,c=t.createImageData(n,s),l=0,u=e.data,h=c.data,f=0;f<a;f++){for(var d=f<o?s:i,p=3,g=0;g<d;g++)for(var m=0,v=0;v<n;v++){if(!m){var y=u[l++];m=128}h[p]=y&m?0:255,p+=4,m>>=1}t.putImageData(c,0,f*s)}}function h(t,e){for(var r=["strokeStyle","fillStyle","fillRule","globalAlpha","lineWidth","lineCap","lineJoin","miterLimit","globalCompositeOperation","font"],n=0,i=r.length;n<i;n++){var o=r[n];void 0!==t[o]&&(e[o]=t[o])}void 0!==t.setLineDash&&(e.setLineDash(t.getLineDash()),e.lineDashOffset=t.lineDashOffset)}function f(t){t.strokeStyle="#000000",t.fillStyle="#000000",t.fillRule="nonzero",t.globalAlpha=1,t.lineWidth=1,t.lineCap="butt",t.lineJoin="miter",t.miterLimit=10,t.globalCompositeOperation="source-over",t.font="10px sans-serif",void 0!==t.setLineDash&&(t.setLineDash([]),t.lineDashOffset=0)}function d(t,e,r,n){for(var i=t.length,o=3;o<i;o+=4){var a=t[o];if(0===a)t[o-3]=e,t[o-2]=r,t[o-1]=n;else if(a<255){var s=255-a;t[o-3]=t[o-3]*a+e*s>>8,t[o-2]=t[o-2]*a+r*s>>8,t[o-1]=t[o-1]*a+n*s>>8}}}function p(t,e,r){for(var n=t.length,i=3;i<n;i+=4){var o=r?r[t[i]]:t[i];e[i]=e[i]*o*.00392156862745098|0}}function g(t,e,r){for(var n=t.length,i=3;i<n;i+=4){var o=77*t[i-3]+152*t[i-2]+28*t[i-1];e[i]=r?e[i]*r[o>>8]>>8:e[i]*o>>16}}function m(t,e,r,n){var i=e.canvas,o=e.context;t.setTransform(e.scaleX,0,0,e.scaleY,e.offsetX,e.offsetY);var a=e.backdrop||null;if(!e.transferMap&&n.isEnabled){const o=n.composeSMask({layer:r.canvas,mask:i,properties:{subtype:e.subtype,backdrop:a}});return t.setTransform(1,0,0,1,0,0),void t.drawImage(o,e.offsetX,e.offsetY)}!function(t,e,r,n,i,o,a){var s,c=!!o,l=c?o[0]:0,u=c?o[1]:0,h=c?o[2]:0;s="Luminosity"===i?g:p;for(var f=Math.min(n,Math.ceil(1048576/r)),m=0;m<n;m+=f){var v=Math.min(f,n-m),y=t.getImageData(0,m,r,v),_=e.getImageData(0,m,r,v);c&&d(y.data,l,u,h),s(y.data,_.data,a),t.putImageData(_,0,m)}}(o,r,i.width,i.height,e.subtype,a,e.transferMap),t.drawImage(i,0,0)}var v=["butt","round","square"],y=["miter","round","bevel"],_={},b={};for(var A in t.prototype={beginDrawing({transform:t,viewport:e,transparency:r=!1,background:n=null}){var i=this.ctx.canvas.width,o=this.ctx.canvas.height;if(this.ctx.save(),this.ctx.fillStyle=n||"rgb(255, 255, 255)",this.ctx.fillRect(0,0,i,o),this.ctx.restore(),r){var a=this.cachedCanvases.getCanvas("transparent",i,o,!0);this.compositeCtx=this.ctx,this.transparentCanvas=a.canvas,this.ctx=a.context,this.ctx.save(),this.ctx.transform.apply(this.ctx,this.compositeCtx.mozCurrentTransform)}this.ctx.save(),f(this.ctx),t&&this.ctx.transform.apply(this.ctx,t),this.ctx.transform.apply(this.ctx,e.transform),this.baseTransform=this.ctx.mozCurrentTransform.slice(),this.imageLayer&&this.imageLayer.beginLayout()},executeOperatorList:function(t,e,r,i){var o=t.argsArray,a=t.fnArray,s=e||0,c=o.length;if(c===s)return s;for(var l,u=c-s>10&&"function"==typeof r,h=u?Date.now()+15:0,f=0,d=this.commonObjs,p=this.objs;;){if(void 0!==i&&s===i.nextBreakPoint)return i.breakIt(s,r),s;if((l=a[s])!==n.OPS.dependency)this[l].apply(this,o[s]);else for(const t of o[s]){const e=t.startsWith("g_")?d:p;if(!e.has(t))return e.get(t,r),s}if(++s===c)return s;if(u&&++f>10){if(Date.now()>h)return r(),s;f=0}}},endDrawing:function(){null!==this.current.activeSMask&&this.endSMaskGroup(),this.ctx.restore(),this.transparentCanvas&&(this.ctx=this.compositeCtx,this.ctx.save(),this.ctx.setTransform(1,0,0,1,0,0),this.ctx.drawImage(this.transparentCanvas,0,0),this.ctx.restore(),this.transparentCanvas=null),this.cachedCanvases.clear(),this.webGLContext.clear(),this.imageLayer&&this.imageLayer.endLayout()},setLineWidth:function(t){this.current.lineWidth=t,this.ctx.lineWidth=t},setLineCap:function(t){this.ctx.lineCap=v[t]},setLineJoin:function(t){this.ctx.lineJoin=y[t]},setMiterLimit:function(t){this.ctx.miterLimit=t},setDash:function(t,e){var r=this.ctx;void 0!==r.setLineDash&&(r.setLineDash(t),r.lineDashOffset=e)},setRenderingIntent(t){},setFlatness(t){},setGState:function(t){for(var e=0,r=t.length;e<r;e++){var n=t[e],i=n[0],o=n[1];switch(i){case"LW":this.setLineWidth(o);break;case"LC":this.setLineCap(o);break;case"LJ":this.setLineJoin(o);break;case"ML":this.setMiterLimit(o);break;case"D":this.setDash(o[0],o[1]);break;case"RI":this.setRenderingIntent(o);break;case"FL":this.setFlatness(o);break;case"Font":this.setFont(o[0],o[1]);break;case"CA":this.current.strokeAlpha=n[1];break;case"ca":this.current.fillAlpha=n[1],this.ctx.globalAlpha=n[1];break;case"BM":this.ctx.globalCompositeOperation=o;break;case"SMask":this.current.activeSMask&&(this.stateStack.length>0&&this.stateStack[this.stateStack.length-1].activeSMask===this.current.activeSMask?this.suspendSMaskGroup():this.endSMaskGroup()),this.current.activeSMask=o?this.tempSMask:null,this.current.activeSMask&&this.beginSMaskGroup(),this.tempSMask=null}}},beginSMaskGroup:function(){var t=this.current.activeSMask,e=t.canvas.width,r=t.canvas.height,n="smaskGroupAt"+this.groupLevel,i=this.cachedCanvases.getCanvas(n,e,r,!0),o=this.ctx,a=o.mozCurrentTransform;this.ctx.save();var s=i.context;s.scale(1/t.scaleX,1/t.scaleY),s.translate(-t.offsetX,-t.offsetY),s.transform.apply(s,a),t.startTransformInverse=s.mozCurrentTransformInverse,h(o,s),this.ctx=s,this.setGState([["BM","source-over"],["ca",1],["CA",1]]),this.groupStack.push(o),this.groupLevel++},suspendSMaskGroup:function(){var t=this.ctx;this.groupLevel--,this.ctx=this.groupStack.pop(),m(this.ctx,this.current.activeSMask,t,this.webGLContext),this.ctx.restore(),this.ctx.save(),h(t,this.ctx),this.current.resumeSMaskCtx=t;var e=n.Util.transform(this.current.activeSMask.startTransformInverse,t.mozCurrentTransform);this.ctx.transform.apply(this.ctx,e),t.save(),t.setTransform(1,0,0,1,0,0),t.clearRect(0,0,t.canvas.width,t.canvas.height),t.restore()},resumeSMaskGroup:function(){var t=this.current.resumeSMaskCtx,e=this.ctx;this.ctx=t,this.groupStack.push(e),this.groupLevel++},endSMaskGroup:function(){var t=this.ctx;this.groupLevel--,this.ctx=this.groupStack.pop(),m(this.ctx,this.current.activeSMask,t,this.webGLContext),this.ctx.restore(),h(t,this.ctx);var e=n.Util.transform(this.current.activeSMask.startTransformInverse,t.mozCurrentTransform);this.ctx.transform.apply(this.ctx,e)},save:function(){this.ctx.save();var t=this.current;this.stateStack.push(t),this.current=t.clone(),this.current.resumeSMaskCtx=null},restore:function(){this.current.resumeSMaskCtx&&this.resumeSMaskGroup(),null===this.current.activeSMask||0!==this.stateStack.length&&this.stateStack[this.stateStack.length-1].activeSMask===this.current.activeSMask||this.endSMaskGroup(),0!==this.stateStack.length&&(this.current=this.stateStack.pop(),this.ctx.restore(),this.pendingClip=null,this._cachedGetSinglePixelWidth=null)},transform:function(t,e,r,n,i,o){this.ctx.transform(t,e,r,n,i,o),this._cachedGetSinglePixelWidth=null},constructPath:function(t,e){for(var r=this.ctx,i=this.current,o=i.x,a=i.y,s=0,c=0,l=t.length;s<l;s++)switch(0|t[s]){case n.OPS.rectangle:o=e[c++],a=e[c++];var u=e[c++],h=e[c++];0===u&&(u=this.getSinglePixelWidth()),0===h&&(h=this.getSinglePixelWidth());var f=o+u,d=a+h;this.ctx.moveTo(o,a),this.ctx.lineTo(f,a),this.ctx.lineTo(f,d),this.ctx.lineTo(o,d),this.ctx.lineTo(o,a),this.ctx.closePath();break;case n.OPS.moveTo:o=e[c++],a=e[c++],r.moveTo(o,a);break;case n.OPS.lineTo:o=e[c++],a=e[c++],r.lineTo(o,a);break;case n.OPS.curveTo:o=e[c+4],a=e[c+5],r.bezierCurveTo(e[c],e[c+1],e[c+2],e[c+3],o,a),c+=6;break;case n.OPS.curveTo2:r.bezierCurveTo(o,a,e[c],e[c+1],e[c+2],e[c+3]),o=e[c+2],a=e[c+3],c+=4;break;case n.OPS.curveTo3:o=e[c+2],a=e[c+3],r.bezierCurveTo(e[c],e[c+1],o,a,o,a),c+=4;break;case n.OPS.closePath:r.closePath()}i.setCurrentPoint(o,a)},closePath:function(){this.ctx.closePath()},stroke:function(t){t=void 0===t||t;var e=this.ctx,r=this.current.strokeColor;if(e.globalAlpha=this.current.strokeAlpha,r&&r.hasOwnProperty("type")&&"Pattern"===r.type){e.save();const t=e.mozCurrentTransform,i=n.Util.singularValueDecompose2dScale(t)[0];e.strokeStyle=r.getPattern(e,this),e.lineWidth=Math.max(this.getSinglePixelWidth()*a,this.current.lineWidth*i),e.stroke(),e.restore()}else e.lineWidth=Math.max(this.getSinglePixelWidth()*a,this.current.lineWidth),e.stroke();t&&this.consumePath(),e.globalAlpha=this.current.fillAlpha},closeStroke:function(){this.closePath(),this.stroke()},fill:function(t){t=void 0===t||t;var e=this.ctx,r=this.current.fillColor,n=!1;this.current.patternFill&&(e.save(),this.baseTransform&&e.setTransform.apply(e,this.baseTransform),e.fillStyle=r.getPattern(e,this),n=!0),this.pendingEOFill?(e.fill("evenodd"),this.pendingEOFill=!1):e.fill(),n&&e.restore(),t&&this.consumePath()},eoFill:function(){this.pendingEOFill=!0,this.fill()},fillStroke:function(){this.fill(!1),this.stroke(!1),this.consumePath()},eoFillStroke:function(){this.pendingEOFill=!0,this.fillStroke()},closeFillStroke:function(){this.closePath(),this.fillStroke()},closeEOFillStroke:function(){this.pendingEOFill=!0,this.closePath(),this.fillStroke()},endPath:function(){this.consumePath()},clip:function(){this.pendingClip=_},eoClip:function(){this.pendingClip=b},beginText:function(){this.current.textMatrix=n.IDENTITY_MATRIX,this.current.textMatrixScale=1,this.current.x=this.current.lineX=0,this.current.y=this.current.lineY=0},endText:function(){var t=this.pendingTextPaths,e=this.ctx;if(void 0!==t){e.save(),e.beginPath();for(var r=0;r<t.length;r++){var n=t[r];e.setTransform.apply(e,n.transform),e.translate(n.x,n.y),n.addToPath(e,n.fontSize)}e.restore(),e.clip(),e.beginPath(),delete this.pendingTextPaths}else e.beginPath()},setCharSpacing:function(t){this.current.charSpacing=t},setWordSpacing:function(t){this.current.wordSpacing=t},setHScale:function(t){this.current.textHScale=t/100},setLeading:function(t){this.current.leading=-t},setFont:function(t,e){var r=this.commonObjs.get(t),i=this.current;if(!r)throw new Error(`Can't find font for ${t}`);if(i.fontMatrix=r.fontMatrix?r.fontMatrix:n.FONT_IDENTITY_MATRIX,0!==i.fontMatrix[0]&&0!==i.fontMatrix[3]||(0,n.warn)("Invalid font matrix for font "+t),e<0?(e=-e,i.fontDirection=-1):i.fontDirection=1,this.current.font=r,this.current.fontSize=e,r.isType3Font)return;var o=r.loadedName||"sans-serif";let a="normal";r.black?a="900":r.bold&&(a="bold");var s=r.italic?"italic":"normal",c=`"${o}", ${r.fallbackName}`;let l=e;e<16?l=16:e>100&&(l=100),this.current.fontSizeScale=e/l,this.ctx.font=`${s} ${a} ${l}px ${c}`},setTextRenderingMode:function(t){this.current.textRenderingMode=t},setTextRise:function(t){this.current.textRise=t},moveText:function(t,e){this.current.x=this.current.lineX+=t,this.current.y=this.current.lineY+=e},setLeadingMoveText:function(t,e){this.setLeading(-e),this.moveText(t,e)},setTextMatrix:function(t,e,r,n,i,o){this.current.textMatrix=[t,e,r,n,i,o],this.current.textMatrixScale=Math.sqrt(t*t+e*e),this.current.x=this.current.lineX=0,this.current.y=this.current.lineY=0},nextLine:function(){this.moveText(0,this.current.leading)},paintChar(t,e,r,i){var o=this.ctx,a=this.current,s=a.font,c=a.textRenderingMode,l=a.fontSize/a.fontSizeScale,u=c&n.TextRenderingMode.FILL_STROKE_MASK,h=!!(c&n.TextRenderingMode.ADD_TO_PATH_FLAG);const f=a.patternFill&&!s.missingFile;var d;(s.disableFontFace||h||f)&&(d=s.getPathGenerator(this.commonObjs,t)),s.disableFontFace||f?(o.save(),o.translate(e,r),o.beginPath(),d(o,l),i&&o.setTransform.apply(o,i),u!==n.TextRenderingMode.FILL&&u!==n.TextRenderingMode.FILL_STROKE||o.fill(),u!==n.TextRenderingMode.STROKE&&u!==n.TextRenderingMode.FILL_STROKE||o.stroke(),o.restore()):(u!==n.TextRenderingMode.FILL&&u!==n.TextRenderingMode.FILL_STROKE||o.fillText(t,e,r),u!==n.TextRenderingMode.STROKE&&u!==n.TextRenderingMode.FILL_STROKE||o.strokeText(t,e,r)),h&&(this.pendingTextPaths||(this.pendingTextPaths=[])).push({transform:o.mozCurrentTransform,x:e,y:r,fontSize:l,addToPath:d})},get isFontSubpixelAAEnabled(){const{context:t}=this.cachedCanvases.getCanvas("isFontSubpixelAAEnabled",10,10);t.scale(1.5,1),t.fillText("I",0,10);for(var e=t.getImageData(0,0,10,10).data,r=!1,i=3;i<e.length;i+=4)if(e[i]>0&&e[i]<255){r=!0;break}return(0,n.shadow)(this,"isFontSubpixelAAEnabled",r)},showText:function(t){var e=this.current,r=e.font;if(r.isType3Font)return this.showType3Text(t);var i=e.fontSize;if(0===i)return;var o=this.ctx,s=e.fontSizeScale,c=e.charSpacing,l=e.wordSpacing,u=e.fontDirection,h=e.textHScale*u,f=t.length,d=r.vertical,p=d?1:-1,g=r.defaultVMetrics,m=i*e.fontMatrix[0],v=e.textRenderingMode===n.TextRenderingMode.FILL&&!r.disableFontFace&&!e.patternFill;let y;if(o.save(),e.patternFill){o.save();const t=e.fillColor.getPattern(o,this);y=o.mozCurrentTransform,o.restore(),o.fillStyle=t}o.transform.apply(o,e.textMatrix),o.translate(e.x,e.y+e.textRise),u>0?o.scale(h,-1):o.scale(h,1);var _=e.lineWidth,b=e.textMatrixScale;if(0===b||0===_){var A=e.textRenderingMode&n.TextRenderingMode.FILL_STROKE_MASK;A!==n.TextRenderingMode.STROKE&&A!==n.TextRenderingMode.FILL_STROKE||(this._cachedGetSinglePixelWidth=null,_=this.getSinglePixelWidth()*a)}else _/=b;1!==s&&(o.scale(s,s),_/=s),o.lineWidth=_;var x,S=0;for(x=0;x<f;++x){var w=t[x];if((0,n.isNum)(w))S+=p*w*i/1e3;else{var C,E,k,P,R,T,O,L=!1,F=(w.isSpace?l:0)+c,M=w.fontChar,I=w.accent,N=w.width;if(d?(R=w.vmetric||g,T=-(T=w.vmetric?R[1]:.5*N)*m,O=R[2]*m,N=R?-R[0]:N,C=T/s,E=(S+O)/s):(C=S/s,E=0),r.remeasure&&N>0){var D=1e3*o.measureText(M).width/i*s;if(N<D&&this.isFontSubpixelAAEnabled){var j=N/D;L=!0,o.save(),o.scale(j,1),C/=j}else N!==D&&(C+=(N-D)/2e3*i/s)}(w.isInFont||r.missingFile)&&(v&&!I?o.fillText(M,C,E):(this.paintChar(M,C,E,y),I&&(k=C+I.offset.x/s,P=E-I.offset.y/s,this.paintChar(I.fontChar,k,P,y)))),S+=d?N*m-F*u:N*m+F*u,L&&o.restore()}}d?e.y-=S:e.x+=S*h,o.restore()},showType3Text:function(t){var e,r,i,o,a=this.ctx,s=this.current,c=s.font,l=s.fontSize,u=s.fontDirection,h=c.vertical?1:-1,f=s.charSpacing,d=s.wordSpacing,p=s.textHScale*u,g=s.fontMatrix||n.FONT_IDENTITY_MATRIX,m=t.length;if(s.textRenderingMode!==n.TextRenderingMode.INVISIBLE&&0!==l){for(this._cachedGetSinglePixelWidth=null,a.save(),a.transform.apply(a,s.textMatrix),a.translate(s.x,s.y),a.scale(p,u),e=0;e<m;++e)if(r=t[e],(0,n.isNum)(r))o=h*r*l/1e3,this.ctx.translate(o,0),s.x+=o*p;else{var v=(r.isSpace?d:0)+f,y=c.charProcOperatorList[r.operatorListId];y?(this.processingType3=r,this.save(),a.scale(l,l),a.transform.apply(a,g),this.executeOperatorList(y),this.restore(),i=n.Util.applyTransform([r.width,0],g)[0]*l+v,a.translate(i,0),s.x+=i*p):(0,n.warn)(`Type3 character "${r.operatorListId}" is not available.`)}a.restore(),this.processingType3=null}},setCharWidth:function(t,e){},setCharWidthAndBounds:function(t,e,r,n,i,o){this.ctx.rect(r,n,i-r,o-n),this.clip(),this.endPath()},getColorN_Pattern:function(e){var r;if("TilingPattern"===e[0]){var n=e[1],o=this.baseTransform||this.ctx.mozCurrentTransform.slice(),a={createCanvasGraphics:e=>new t(e,this.commonObjs,this.objs,this.canvasFactory,this.webGLContext)};r=new i.TilingPattern(e,n,this.ctx,a,o)}else r=(0,i.getShadingPatternFromIR)(e);return r},setStrokeColorN:function(){this.current.strokeColor=this.getColorN_Pattern(arguments)},setFillColorN:function(){this.current.fillColor=this.getColorN_Pattern(arguments),this.current.patternFill=!0},setStrokeRGBColor:function(t,e,r){var i=n.Util.makeCssRgb(t,e,r);this.ctx.strokeStyle=i,this.current.strokeColor=i},setFillRGBColor:function(t,e,r){var i=n.Util.makeCssRgb(t,e,r);this.ctx.fillStyle=i,this.current.fillColor=i,this.current.patternFill=!1},shadingFill:function(t){var e=this.ctx;this.save();var r=(0,i.getShadingPatternFromIR)(t);e.fillStyle=r.getPattern(e,this,!0);var o=e.mozCurrentTransformInverse;if(o){var a=e.canvas,s=a.width,c=a.height,l=n.Util.applyTransform([0,0],o),u=n.Util.applyTransform([0,c],o),h=n.Util.applyTransform([s,0],o),f=n.Util.applyTransform([s,c],o),d=Math.min(l[0],u[0],h[0],f[0]),p=Math.min(l[1],u[1],h[1],f[1]),g=Math.max(l[0],u[0],h[0],f[0]),m=Math.max(l[1],u[1],h[1],f[1]);this.ctx.fillRect(d,p,g-d,m-p)}else this.ctx.fillRect(-1e10,-1e10,2e10,2e10);this.restore()},beginInlineImage:function(){(0,n.unreachable)("Should not call beginInlineImage")},beginImageData:function(){(0,n.unreachable)("Should not call beginImageData")},paintFormXObjectBegin:function(t,e){if(this.save(),this.baseTransformStack.push(this.baseTransform),Array.isArray(t)&&6===t.length&&this.transform.apply(this,t),this.baseTransform=this.ctx.mozCurrentTransform,e){var r=e[2]-e[0],n=e[3]-e[1];this.ctx.rect(e[0],e[1],r,n),this.clip(),this.endPath()}},paintFormXObjectEnd:function(){this.restore(),this.baseTransform=this.baseTransformStack.pop()},beginGroup:function(t){this.save();var e=this.ctx;t.isolated||(0,n.info)("TODO: Support non-isolated groups."),t.knockout&&(0,n.warn)("Knockout groups not supported.");var r=e.mozCurrentTransform;if(t.matrix&&e.transform.apply(e,t.matrix),!t.bbox)throw new Error("Bounding box is required.");var i=n.Util.getAxialAlignedBoundingBox(t.bbox,e.mozCurrentTransform),a=[0,0,e.canvas.width,e.canvas.height];i=n.Util.intersect(i,a)||[0,0,0,0];var s=Math.floor(i[0]),c=Math.floor(i[1]),l=Math.max(Math.ceil(i[2])-s,1),u=Math.max(Math.ceil(i[3])-c,1),f=1,d=1;l>o&&(f=l/o,l=o),u>o&&(d=u/o,u=o);var p="groupAt"+this.groupLevel;t.smask&&(p+="_smask_"+this.smaskCounter++%2);var g=this.cachedCanvases.getCanvas(p,l,u,!0),m=g.context;m.scale(1/f,1/d),m.translate(-s,-c),m.transform.apply(m,r),t.smask?this.smaskStack.push({canvas:g.canvas,context:m,offsetX:s,offsetY:c,scaleX:f,scaleY:d,subtype:t.smask.subtype,backdrop:t.smask.backdrop,transferMap:t.smask.transferMap||null,startTransformInverse:null}):(e.setTransform(1,0,0,1,0,0),e.translate(s,c),e.scale(f,d)),h(e,m),this.ctx=m,this.setGState([["BM","source-over"],["ca",1],["CA",1]]),this.groupStack.push(e),this.groupLevel++,this.current.activeSMask=null},endGroup:function(t){this.groupLevel--;var e=this.ctx;this.ctx=this.groupStack.pop(),void 0!==this.ctx.imageSmoothingEnabled?this.ctx.imageSmoothingEnabled=!1:this.ctx.mozImageSmoothingEnabled=!1,t.smask?this.tempSMask=this.smaskStack.pop():this.ctx.drawImage(e.canvas,0,0),this.restore()},beginAnnotations:function(){this.save(),this.baseTransform&&this.ctx.setTransform.apply(this.ctx,this.baseTransform)},endAnnotations:function(){this.restore()},beginAnnotation:function(t,e,r){if(this.save(),f(this.ctx),this.current=new u,Array.isArray(t)&&4===t.length){var n=t[2]-t[0],i=t[3]-t[1];this.ctx.rect(t[0],t[1],n,i),this.clip(),this.endPath()}this.transform.apply(this,e),this.transform.apply(this,r)},endAnnotation:function(){this.restore()},paintImageMaskXObject:function(t){var e=this.ctx,n=t.width,i=t.height,o=this.current.fillColor,a=this.current.patternFill,s=this.processingType3;if(s&&void 0===s.compiled&&(s.compiled=n<=1e3&&i<=1e3?function(t){var e,r,n,i,o=t.width,a=t.height,s=o+1,c=new Uint8Array(s*(a+1)),l=new Uint8Array([0,2,4,0,1,0,5,4,8,10,0,8,0,2,1,0]),u=o+7&-8,h=t.data,f=new Uint8Array(u*a),d=0;for(e=0,i=h.length;e<i;e++)for(var p=128,g=h[e];p>0;)f[d++]=g&p?0:255,p>>=1;var m=0;for(0!==f[d=0]&&(c[0]=1,++m),r=1;r<o;r++)f[d]!==f[d+1]&&(c[r]=f[d]?2:1,++m),d++;for(0!==f[d]&&(c[r]=2,++m),e=1;e<a;e++){n=e*s,f[(d=e*u)-u]!==f[d]&&(c[n]=f[d]?1:8,++m);var v=(f[d]?4:0)+(f[d-u]?8:0);for(r=1;r<o;r++)l[v=(v>>2)+(f[d+1]?4:0)+(f[d-u+1]?8:0)]&&(c[n+r]=l[v],++m),d++;if(f[d-u]!==f[d]&&(c[n+r]=f[d]?2:4,++m),m>1e3)return null}for(n=e*s,0!==f[d=u*(a-1)]&&(c[n]=8,++m),r=1;r<o;r++)f[d]!==f[d+1]&&(c[n+r]=f[d]?4:8,++m),d++;if(0!==f[d]&&(c[n+r]=4,++m),m>1e3)return null;var y=new Int32Array([0,s,-1,0,-s,0,0,0,1]),_=[];for(e=0;m&&e<=a;e++){for(var b=e*s,A=b+o;b<A&&!c[b];)b++;if(b!==A){var x,S=[b%s,e],w=c[b],C=b;do{var E=y[w];do{b+=E}while(!c[b]);5!==(x=c[b])&&10!==x?(w=x,c[b]=0):(w=x&51*w>>4,c[b]&=w>>2|w<<2),S.push(b%s),S.push(b/s|0),c[b]||--m}while(C!==b);_.push(S),--e}}return function(t){t.save(),t.scale(1/o,-1/a),t.translate(0,-a),t.beginPath();for(let r=0,n=_.length;r<n;r++){var e=_[r];t.moveTo(e[0],e[1]);for(let r=2,n=e.length;r<n;r+=2)t.lineTo(e[r],e[r+1])}t.fill(),t.beginPath(),t.restore()}}({data:t.data,width:n,height:i}):null),s&&s.compiled)s.compiled(e);else{var c=this.cachedCanvases.getCanvas("maskCanvas",n,i),l=c.context;l.save(),r(l,t),l.globalCompositeOperation="source-in",l.fillStyle=a?o.getPattern(l,this):o,l.fillRect(0,0,n,i),l.restore(),this.paintInlineImageXObject(c.canvas)}},paintImageMaskXObjectRepeat:function(t,e,n,i){var o=t.width,a=t.height,s=this.current.fillColor,c=this.current.patternFill,l=this.cachedCanvases.getCanvas("maskCanvas",o,a),u=l.context;u.save(),r(u,t),u.globalCompositeOperation="source-in",u.fillStyle=c?s.getPattern(u,this):s,u.fillRect(0,0,o,a),u.restore();for(var h=this.ctx,f=0,d=i.length;f<d;f+=2)h.save(),h.transform(e,0,0,n,i[f],i[f+1]),h.scale(1,-1),h.drawImage(l.canvas,0,0,o,a,0,-1,1,1),h.restore()},paintImageMaskXObjectGroup:function(t){for(var e=this.ctx,n=this.current.fillColor,i=this.current.patternFill,o=0,a=t.length;o<a;o++){var s=t[o],c=s.width,l=s.height,u=this.cachedCanvases.getCanvas("maskCanvas",c,l),h=u.context;h.save(),r(h,s),h.globalCompositeOperation="source-in",h.fillStyle=i?n.getPattern(h,this):n,h.fillRect(0,0,c,l),h.restore(),e.save(),e.transform.apply(e,s.transform),e.scale(1,-1),e.drawImage(u.canvas,0,0,c,l,0,-1,1,1),e.restore()}},paintImageXObject:function(t){const e=t.startsWith("g_")?this.commonObjs.get(t):this.objs.get(t);e?this.paintInlineImageXObject(e):(0,n.warn)("Dependent image isn't ready yet")},paintImageXObjectRepeat:function(t,e,r,i){const o=t.startsWith("g_")?this.commonObjs.get(t):this.objs.get(t);if(o){for(var a=o.width,s=o.height,c=[],l=0,u=i.length;l<u;l+=2)c.push({transform:[e,0,0,r,i[l],i[l+1]],x:0,y:0,w:a,h:s});this.paintInlineImageXObjectGroup(o,c)}else(0,n.warn)("Dependent image isn't ready yet")},paintInlineImageXObject:function(t){var r=t.width,n=t.height,i=this.ctx;this.save(),i.scale(1/r,-1/n);var o,a,s=i.mozCurrentTransformInverse,c=s[0],l=s[1],u=Math.max(Math.sqrt(c*c+l*l),1),h=s[2],f=s[3],d=Math.max(Math.sqrt(h*h+f*f),1);if("function"==typeof HTMLElement&&t instanceof HTMLElement||!t.data)o=t;else{var p=(a=this.cachedCanvases.getCanvas("inlineImage",r,n)).context;e(p,t),o=a.canvas}for(var g=r,m=n,v="prescale1";u>2&&g>1||d>2&&m>1;){var y=g,_=m;u>2&&g>1&&(u/=g/(y=Math.ceil(g/2))),d>2&&m>1&&(d/=m/(_=Math.ceil(m/2))),(p=(a=this.cachedCanvases.getCanvas(v,y,_)).context).clearRect(0,0,y,_),p.drawImage(o,0,0,g,m,0,0,y,_),o=a.canvas,g=y,m=_,v="prescale1"===v?"prescale2":"prescale1"}if(i.drawImage(o,0,0,g,m,0,-n,r,n),this.imageLayer){var b=this.getCanvasPosition(0,-n);this.imageLayer.appendImage({imgData:t,left:b[0],top:b[1],width:r/s[0],height:n/s[3]})}this.restore()},paintInlineImageXObjectGroup:function(t,r){var n=this.ctx,i=t.width,o=t.height,a=this.cachedCanvases.getCanvas("inlineImage",i,o);e(a.context,t);for(var s=0,c=r.length;s<c;s++){var l=r[s];if(n.save(),n.transform.apply(n,l.transform),n.scale(1,-1),n.drawImage(a.canvas,l.x,l.y,l.w,l.h,0,-1,1,1),this.imageLayer){var u=this.getCanvasPosition(l.x,l.y);this.imageLayer.appendImage({imgData:t,left:u[0],top:u[1],width:i,height:o})}n.restore()}},paintSolidColorImageMask:function(){this.ctx.fillRect(0,0,1,1)},paintXObject:function(){(0,n.warn)("Unsupported 'paintXObject' command.")},markPoint:function(t){},markPointProps:function(t,e){},beginMarkedContent:function(t){},beginMarkedContentProps:function(t,e){},endMarkedContent:function(){},beginCompat:function(){},endCompat:function(){},consumePath:function(){var t=this.ctx;this.pendingClip&&(this.pendingClip===b?t.clip("evenodd"):t.clip(),this.pendingClip=null),t.beginPath()},getSinglePixelWidth(t){if(null===this._cachedGetSinglePixelWidth){const t=this.ctx.mozCurrentTransformInverse;this._cachedGetSinglePixelWidth=Math.sqrt(Math.max(t[0]*t[0]+t[1]*t[1],t[2]*t[2]+t[3]*t[3]))}return this._cachedGetSinglePixelWidth},getCanvasPosition:function(t,e){var r=this.ctx.mozCurrentTransform;return[r[0]*t+r[2]*e+r[4],r[1]*t+r[3]*e+r[5]]}},n.OPS)t.prototype[n.OPS[A]]=t.prototype[A];return t}();e.CanvasGraphics=h},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.getShadingPatternFromIR=function(t){var e=i[t[0]];if(!e)throw new Error(`Unknown IR type: ${t[0]}`);return e.fromIR(t)},e.TilingPattern=void 0;var n=r(2),i={};function o(t,e){if(!e||"undefined"==typeof Path2D)return;const r=e[2]-e[0],n=e[3]-e[1],i=new Path2D;i.rect(e[0],e[1],r,n),t.clip(i)}i.RadialAxial={fromIR:function(t){var e=t[1],r=t[2],n=t[3],i=t[4],a=t[5],s=t[6],c=t[7];return{type:"Pattern",getPattern:function(t){var l;o(t,r),"axial"===e?l=t.createLinearGradient(i[0],i[1],a[0],a[1]):"radial"===e&&(l=t.createRadialGradient(i[0],i[1],s,a[0],a[1],c));for(var u=0,h=n.length;u<h;++u){var f=n[u];l.addColorStop(f[0],f[1])}return l}}}};var a=function(){function t(t,e,r,n,i,o,a,s){var c,l=e.coords,u=e.colors,h=t.data,f=4*t.width;l[r+1]>l[n+1]&&(c=r,r=n,n=c,c=o,o=a,a=c),l[n+1]>l[i+1]&&(c=n,n=i,i=c,c=a,a=s,s=c),l[r+1]>l[n+1]&&(c=r,r=n,n=c,c=o,o=a,a=c);var d=(l[r]+e.offsetX)*e.scaleX,p=(l[r+1]+e.offsetY)*e.scaleY,g=(l[n]+e.offsetX)*e.scaleX,m=(l[n+1]+e.offsetY)*e.scaleY,v=(l[i]+e.offsetX)*e.scaleX,y=(l[i+1]+e.offsetY)*e.scaleY;if(!(p>=y))for(var _,b,A,x,S,w,C,E,k=u[o],P=u[o+1],R=u[o+2],T=u[a],O=u[a+1],L=u[a+2],F=u[s],M=u[s+1],I=u[s+2],N=Math.round(p),D=Math.round(y),j=N;j<=D;j++){if(j<m){let t;t=j<p?0:p===m?1:(p-j)/(p-m),_=d-(d-g)*t,b=k-(k-T)*t,A=P-(P-O)*t,x=R-(R-L)*t}else{let t;t=j>y?1:m===y?0:(m-j)/(m-y),_=g-(g-v)*t,b=T-(T-F)*t,A=O-(O-M)*t,x=L-(L-I)*t}let t;t=j<p?0:j>y?1:(p-j)/(p-y),S=d-(d-v)*t,w=k-(k-F)*t,C=P-(P-M)*t,E=R-(R-I)*t;for(var U=Math.round(Math.min(_,S)),W=Math.round(Math.max(_,S)),q=f*j+4*U,B=U;B<=W;B++)t=(_-B)/(_-S),t<0?t=0:t>1&&(t=1),h[q++]=b-(b-w)*t|0,h[q++]=A-(A-C)*t|0,h[q++]=x-(x-E)*t|0,h[q++]=255}}function e(e,r,n){var i,o,a=r.coords,s=r.colors;switch(r.type){case"lattice":var c=r.verticesPerRow,l=Math.floor(a.length/c)-1,u=c-1;for(i=0;i<l;i++)for(var h=i*c,f=0;f<u;f++,h++)t(e,n,a[h],a[h+1],a[h+c],s[h],s[h+1],s[h+c]),t(e,n,a[h+c+1],a[h+1],a[h+c],s[h+c+1],s[h+1],s[h+c]);break;case"triangles":for(i=0,o=a.length;i<o;i+=3)t(e,n,a[i],a[i+1],a[i+2],s[i],s[i+1],s[i+2]);break;default:throw new Error("illegal figure")}}return function(t,r,n,i,o,a,s,c){var l,u,h,f,d=Math.floor(t[0]),p=Math.floor(t[1]),g=Math.ceil(t[2])-d,m=Math.ceil(t[3])-p,v=Math.min(Math.ceil(Math.abs(g*r[0]*1.1)),3e3),y=Math.min(Math.ceil(Math.abs(m*r[1]*1.1)),3e3),_=g/v,b=m/y,A={coords:n,colors:i,offsetX:-d,offsetY:-p,scaleX:1/_,scaleY:1/b},x=v+4,S=y+4;if(c.isEnabled)l=c.drawFigures({width:v,height:y,backgroundColor:a,figures:o,context:A}),(u=s.getCanvas("mesh",x,S,!1)).context.drawImage(l,2,2),l=u.canvas;else{var w=(u=s.getCanvas("mesh",x,S,!1)).context,C=w.createImageData(v,y);if(a){var E=C.data;for(h=0,f=E.length;h<f;h+=4)E[h]=a[0],E[h+1]=a[1],E[h+2]=a[2],E[h+3]=255}for(h=0;h<o.length;h++)e(C,o[h],A);w.putImageData(C,2,2),l=u.canvas}return{canvas:l,offsetX:d-2*_,offsetY:p-2*b,scaleX:_,scaleY:b}}}();i.Mesh={fromIR:function(t){var e=t[2],r=t[3],i=t[4],s=t[5],c=t[6],l=t[7],u=t[8];return{type:"Pattern",getPattern:function(t,h,f){var d;if(o(t,l),f)d=n.Util.singularValueDecompose2dScale(t.mozCurrentTransform);else if(d=n.Util.singularValueDecompose2dScale(h.baseTransform),c){var p=n.Util.singularValueDecompose2dScale(c);d=[d[0]*p[0],d[1]*p[1]]}var g=a(s,d,e,r,i,f?null:u,h.cachedCanvases,h.webGLContext);return f||(t.setTransform.apply(t,h.baseTransform),c&&t.transform.apply(t,c)),t.translate(g.offsetX,g.offsetY),t.scale(g.scaleX,g.scaleY),t.createPattern(g.canvas,"no-repeat")}}}},i.Dummy={fromIR:function(){return{type:"Pattern",getPattern:function(){return"hotpink"}}}};var s=function(){function t(t,e,r,n,i){this.operatorList=t[2],this.matrix=t[3]||[1,0,0,1,0,0],this.bbox=t[4],this.xstep=t[5],this.ystep=t[6],this.paintType=t[7],this.tilingType=t[8],this.color=e,this.canvasGraphicsFactory=n,this.baseTransform=i,this.type="Pattern",this.ctx=r}return t.prototype={createPatternCanvas:function(t){var e=this.operatorList,r=this.bbox,i=this.xstep,o=this.ystep,a=this.paintType,s=this.tilingType,c=this.color,l=this.canvasGraphicsFactory;(0,n.info)("TilingType: "+s);var u=r[0],h=r[1],f=r[2],d=r[3],p=n.Util.singularValueDecompose2dScale(this.matrix),g=n.Util.singularValueDecompose2dScale(this.baseTransform),m=[p[0]*g[0],p[1]*g[1]],v=this.getSizeAndScale(i,this.ctx.canvas.width,m[0]),y=this.getSizeAndScale(o,this.ctx.canvas.height,m[1]),_=t.cachedCanvases.getCanvas("pattern",v.size,y.size,!0),b=_.context,A=l.createCanvasGraphics(b);return A.groupLevel=t.groupLevel,this.setFillAndStrokeStyleToContext(A,a,c),A.transform(v.scale,0,0,y.scale,0,0),A.transform(1,0,0,1,-u,-h),this.clipBbox(A,r,u,h,f,d),A.executeOperatorList(e),this.ctx.transform(1,0,0,1,u,h),this.ctx.scale(1/v.scale,1/y.scale),_.canvas},getSizeAndScale:function(t,e,r){t=Math.abs(t);var n=Math.max(3e3,e),i=Math.ceil(t*r);return i>=n?i=n:r=i/t,{scale:r,size:i}},clipBbox:function(t,e,r,n,i,o){if(Array.isArray(e)&&4===e.length){var a=i-r,s=o-n;t.ctx.rect(r,n,a,s),t.clip(),t.endPath()}},setFillAndStrokeStyleToContext:function(t,e,r){const i=t.ctx,o=t.current;switch(e){case 1:var a=this.ctx;i.fillStyle=a.fillStyle,i.strokeStyle=a.strokeStyle,o.fillColor=a.fillStyle,o.strokeColor=a.strokeStyle;break;case 2:var s=n.Util.makeCssRgb(r[0],r[1],r[2]);i.fillStyle=s,i.strokeStyle=s,o.fillColor=s,o.strokeColor=s;break;default:throw new n.FormatError(`Unsupported paint type: ${e}`)}},getPattern:function(t,e){(t=this.ctx).setTransform.apply(t,this.baseTransform),t.transform.apply(t,this.matrix);var r=this.createPatternCanvas(e);return t.createPattern(r,"repeat")}},t}();e.TilingPattern=s},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.GlobalWorkerOptions=void 0;const n=Object.create(null);e.GlobalWorkerOptions=n,n.workerPort=void 0===n.workerPort?null:n.workerPort,n.workerSrc=void 0===n.workerSrc?"":n.workerSrc},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.MessageHandler=void 0;var n=r(2);function i(t){if("object"!=typeof t||null===t)return t;switch(t.name){case"AbortException":return new n.AbortException(t.message);case"MissingPDFException":return new n.MissingPDFException(t.message);case"UnexpectedResponseException":return new n.UnexpectedResponseException(t.message,t.status);case"UnknownErrorException":return new n.UnknownErrorException(t.message,t.details);default:return new n.UnknownErrorException(t.message,t.toString())}}e.MessageHandler=class{constructor(t,e,r){this.sourceName=t,this.targetName=e,this.comObj=r,this.callbackId=1,this.streamId=1,this.postMessageTransfers=!0,this.streamSinks=Object.create(null),this.streamControllers=Object.create(null),this.callbackCapabilities=Object.create(null),this.actionHandler=Object.create(null),this._onComObjOnMessage=t=>{const e=t.data;if(e.targetName!==this.sourceName)return;if(e.stream)return void this._processStreamMessage(e);if(e.callback){const t=e.callbackId,r=this.callbackCapabilities[t];if(!r)throw new Error(`Cannot resolve callback ${t}`);if(delete this.callbackCapabilities[t],1===e.callback)r.resolve(e.data);else{if(2!==e.callback)throw new Error("Unexpected callback case");r.reject(i(e.reason))}return}const n=this.actionHandler[e.action];if(!n)throw new Error(`Unknown action from worker: ${e.action}`);if(e.callbackId){const t=this.sourceName,o=e.sourceName;new Promise((function(t){t(n(e.data))})).then((function(n){r.postMessage({sourceName:t,targetName:o,callback:1,callbackId:e.callbackId,data:n})}),(function(n){r.postMessage({sourceName:t,targetName:o,callback:2,callbackId:e.callbackId,reason:i(n)})}))}else e.streamId?this._createStreamSink(e):n(e.data)},r.addEventListener("message",this._onComObjOnMessage)}on(t,e){const r=this.actionHandler;if(r[t])throw new Error(`There is already an actionName called "${t}"`);r[t]=e}send(t,e,r){this._postMessage({sourceName:this.sourceName,targetName:this.targetName,action:t,data:e},r)}sendWithPromise(t,e,r){const i=this.callbackId++,o=(0,n.createPromiseCapability)();this.callbackCapabilities[i]=o;try{this._postMessage({sourceName:this.sourceName,targetName:this.targetName,action:t,callbackId:i,data:e},r)}catch(t){o.reject(t)}return o.promise}sendWithStream(t,e,r,o){const a=this.streamId++,s=this.sourceName,c=this.targetName,l=this.comObj;return new ReadableStream({start:r=>{const i=(0,n.createPromiseCapability)();return this.streamControllers[a]={controller:r,startCall:i,pullCall:null,cancelCall:null,isClosed:!1},this._postMessage({sourceName:s,targetName:c,action:t,streamId:a,data:e,desiredSize:r.desiredSize},o),i.promise},pull:t=>{const e=(0,n.createPromiseCapability)();return this.streamControllers[a].pullCall=e,l.postMessage({sourceName:s,targetName:c,stream:6,streamId:a,desiredSize:t.desiredSize}),e.promise},cancel:t=>{(0,n.assert)(t instanceof Error,"cancel must have a valid reason");const e=(0,n.createPromiseCapability)();return this.streamControllers[a].cancelCall=e,this.streamControllers[a].isClosed=!0,l.postMessage({sourceName:s,targetName:c,stream:1,streamId:a,reason:i(t)}),e.promise}},r)}_createStreamSink(t){const e=this,r=this.actionHandler[t.action],o=t.streamId,a=this.sourceName,s=t.sourceName,c=this.comObj,l={enqueue(t,r=1,i){if(this.isCancelled)return;const c=this.desiredSize;this.desiredSize-=r,c>0&&this.desiredSize<=0&&(this.sinkCapability=(0,n.createPromiseCapability)(),this.ready=this.sinkCapability.promise),e._postMessage({sourceName:a,targetName:s,stream:4,streamId:o,chunk:t},i)},close(){this.isCancelled||(this.isCancelled=!0,c.postMessage({sourceName:a,targetName:s,stream:3,streamId:o}),delete e.streamSinks[o])},error(t){(0,n.assert)(t instanceof Error,"error must have a valid reason"),this.isCancelled||(this.isCancelled=!0,c.postMessage({sourceName:a,targetName:s,stream:5,streamId:o,reason:i(t)}))},sinkCapability:(0,n.createPromiseCapability)(),onPull:null,onCancel:null,isCancelled:!1,desiredSize:t.desiredSize,ready:null};l.sinkCapability.resolve(),l.ready=l.sinkCapability.promise,this.streamSinks[o]=l,new Promise((function(e){e(r(t.data,l))})).then((function(){c.postMessage({sourceName:a,targetName:s,stream:8,streamId:o,success:!0})}),(function(t){c.postMessage({sourceName:a,targetName:s,stream:8,streamId:o,reason:i(t)})}))}_processStreamMessage(t){const e=t.streamId,r=this.sourceName,o=t.sourceName,a=this.comObj;switch(t.stream){case 8:t.success?this.streamControllers[e].startCall.resolve():this.streamControllers[e].startCall.reject(i(t.reason));break;case 7:t.success?this.streamControllers[e].pullCall.resolve():this.streamControllers[e].pullCall.reject(i(t.reason));break;case 6:if(!this.streamSinks[e]){a.postMessage({sourceName:r,targetName:o,stream:7,streamId:e,success:!0});break}this.streamSinks[e].desiredSize<=0&&t.desiredSize>0&&this.streamSinks[e].sinkCapability.resolve(),this.streamSinks[e].desiredSize=t.desiredSize;const{onPull:s}=this.streamSinks[t.streamId];new Promise((function(t){t(s&&s())})).then((function(){a.postMessage({sourceName:r,targetName:o,stream:7,streamId:e,success:!0})}),(function(t){a.postMessage({sourceName:r,targetName:o,stream:7,streamId:e,reason:i(t)})}));break;case 4:if((0,n.assert)(this.streamControllers[e],"enqueue should have stream controller"),this.streamControllers[e].isClosed)break;this.streamControllers[e].controller.enqueue(t.chunk);break;case 3:if((0,n.assert)(this.streamControllers[e],"close should have stream controller"),this.streamControllers[e].isClosed)break;this.streamControllers[e].isClosed=!0,this.streamControllers[e].controller.close(),this._deleteStreamController(e);break;case 5:(0,n.assert)(this.streamControllers[e],"error should have stream controller"),this.streamControllers[e].controller.error(i(t.reason)),this._deleteStreamController(e);break;case 2:t.success?this.streamControllers[e].cancelCall.resolve():this.streamControllers[e].cancelCall.reject(i(t.reason)),this._deleteStreamController(e);break;case 1:if(!this.streamSinks[e])break;const{onCancel:c}=this.streamSinks[t.streamId];new Promise((function(e){e(c&&c(i(t.reason)))})).then((function(){a.postMessage({sourceName:r,targetName:o,stream:2,streamId:e,success:!0})}),(function(t){a.postMessage({sourceName:r,targetName:o,stream:2,streamId:e,reason:i(t)})})),this.streamSinks[e].sinkCapability.reject(i(t.reason)),this.streamSinks[e].isCancelled=!0,delete this.streamSinks[e];break;default:throw new Error("Unexpected stream case")}}async _deleteStreamController(t){await Promise.allSettled([this.streamControllers[t].startCall,this.streamControllers[t].pullCall,this.streamControllers[t].cancelCall].map((function(t){return t&&t.promise}))),delete this.streamControllers[t]}_postMessage(t,e){e&&this.postMessageTransfers?this.comObj.postMessage(t,e):this.comObj.postMessage(t)}destroy(){this.comObj.removeEventListener("message",this._onComObjOnMessage)}}},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.Metadata=void 0;var n=r(2),i=r(13);e.Metadata=class{constructor(t){(0,n.assert)("string"==typeof t,"Metadata: input is not a string"),t=this._repair(t);const e=(new i.SimpleXMLParser).parseFromString(t);this._metadataMap=new Map,e&&this._parse(e)}_repair(t){return t.replace(/^[^<]+/,"").replace(/>\\376\\377([^<]+)/g,(function(t,e){const r=e.replace(/\\([0-3])([0-7])([0-7])/g,(function(t,e,r,n){return String.fromCharCode(64*e+8*r+1*n)})).replace(/&(amp|apos|gt|lt|quot);/g,(function(t,e){switch(e){case"amp":return"&";case"apos":return"'";case"gt":return">";case"lt":return"<";case"quot":return'"'}throw new Error(`_repair: ${e} isn't defined.`)}));let n="";for(let t=0,e=r.length;t<e;t+=2){const e=256*r.charCodeAt(t)+r.charCodeAt(t+1);n+=e>=32&&e<127&&60!==e&&62!==e&&38!==e?String.fromCharCode(e):"&#x"+(65536+e).toString(16).substring(1)+";"}return">"+n}))}_parse(t){let e=t.documentElement;if("rdf:rdf"!==e.nodeName.toLowerCase())for(e=e.firstChild;e&&"rdf:rdf"!==e.nodeName.toLowerCase();)e=e.nextSibling;const r=e?e.nodeName.toLowerCase():null;if(!e||"rdf:rdf"!==r||!e.hasChildNodes())return;const n=e.childNodes;for(let t=0,e=n.length;t<e;t++){const e=n[t];if("rdf:description"===e.nodeName.toLowerCase())for(let t=0,r=e.childNodes.length;t<r;t++)if("#text"!==e.childNodes[t].nodeName.toLowerCase()){const r=e.childNodes[t],n=r.nodeName.toLowerCase();this._metadataMap.set(n,r.textContent.trim())}}}get(t){return this._metadataMap.has(t)?this._metadataMap.get(t):null}getAll(){const t=Object.create(null);for(const[e,r]of this._metadataMap)t[e]=r;return t}has(t){return this._metadataMap.has(t)}}},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.SimpleXMLParser=void 0;function n(t,e){const r=t[e];return" "===r||"\n"===r||"\r"===r||"\t"===r}class i{constructor(t,e){this.nodeName=t,this.nodeValue=e,Object.defineProperty(this,"parentNode",{value:null,writable:!0})}get firstChild(){return this.childNodes&&this.childNodes[0]}get nextSibling(){const t=this.parentNode.childNodes;if(!t)return;const e=t.indexOf(this);return-1!==e?t[e+1]:void 0}get textContent(){return this.childNodes?this.childNodes.map((function(t){return t.textContent})).join(""):this.nodeValue||""}hasChildNodes(){return this.childNodes&&this.childNodes.length>0}}e.SimpleXMLParser=class extends class{_resolveEntities(t){return t.replace(/&([^;]+);/g,((t,e)=>{if("#x"===e.substring(0,2))return String.fromCharCode(parseInt(e.substring(2),16));if("#"===e.substring(0,1))return String.fromCharCode(parseInt(e.substring(1),10));switch(e){case"lt":return"<";case"gt":return">";case"amp":return"&";case"quot":return'"'}return this.onResolveEntity(e)}))}_parseContent(t,e){const r=[];let i=e;function o(){for(;i<t.length&&n(t,i);)++i}for(;i<t.length&&!n(t,i)&&">"!==t[i]&&"/"!==t[i];)++i;const a=t.substring(e,i);for(o();i<t.length&&">"!==t[i]&&"/"!==t[i]&&"?"!==t[i];){o();let e="",a="";for(;i<t.length&&!n(t,i)&&"="!==t[i];)e+=t[i],++i;if(o(),"="!==t[i])return null;++i,o();const s=t[i];if('"'!==s&&"'"!==s)return null;const c=t.indexOf(s,++i);if(c<0)return null;a=t.substring(i,c),r.push({name:e,value:this._resolveEntities(a)}),i=c+1,o()}return{name:a,attributes:r,parsed:i-e}}_parseProcessingInstruction(t,e){let r=e;for(;r<t.length&&!n(t,r)&&">"!==t[r]&&"/"!==t[r];)++r;const i=t.substring(e,r);!function(){for(;r<t.length&&n(t,r);)++r}();const o=r;for(;r<t.length&&("?"!==t[r]||">"!==t[r+1]);)++r;return{name:i,value:t.substring(o,r),parsed:r-e}}parseXml(t){let e=0;for(;e<t.length;){let r=e;if("<"===t[e]){let e;switch(++r,t[r]){case"/":if(++r,e=t.indexOf(">",r),e<0)return void this.onError(-9);this.onEndElement(t.substring(r,e)),r=e+1;break;case"?":++r;const n=this._parseProcessingInstruction(t,r);if("?>"!==t.substring(r+n.parsed,r+n.parsed+2))return void this.onError(-3);this.onPi(n.name,n.value),r+=n.parsed+2;break;case"!":if("--"===t.substring(r+1,r+3)){if(e=t.indexOf("--\x3e",r+3),e<0)return void this.onError(-5);this.onComment(t.substring(r+3,e)),r=e+3}else if("[CDATA["===t.substring(r+1,r+8)){if(e=t.indexOf("]]>",r+8),e<0)return void this.onError(-2);this.onCdata(t.substring(r+8,e)),r=e+3}else{if("DOCTYPE"!==t.substring(r+1,r+8))return void this.onError(-6);{const n=t.indexOf("[",r+8);let i=!1;if(e=t.indexOf(">",r+8),e<0)return void this.onError(-4);if(n>0&&e>n){if(e=t.indexOf("]>",r+8),e<0)return void this.onError(-4);i=!0}const o=t.substring(r+8,e+(i?1:0));this.onDoctype(o),r=e+(i?2:1)}}break;default:const i=this._parseContent(t,r);if(null===i)return void this.onError(-6);let o=!1;if("/>"===t.substring(r+i.parsed,r+i.parsed+2))o=!0;else if(">"!==t.substring(r+i.parsed,r+i.parsed+1))return void this.onError(-9);this.onBeginElement(i.name,i.attributes,o),r+=i.parsed+(o?2:1)}}else{for(;r<t.length&&"<"!==t[r];)r++;const n=t.substring(e,r);this.onText(this._resolveEntities(n))}e=r}}onResolveEntity(t){return`&${t};`}onPi(t,e){}onComment(t){}onCdata(t){}onDoctype(t){}onText(t){}onBeginElement(t,e,r){}onEndElement(t){}onError(t){}}{constructor(){super(),this._currentFragment=null,this._stack=null,this._errorCode=0}parseFromString(t){if(this._currentFragment=[],this._stack=[],this._errorCode=0,this.parseXml(t),0!==this._errorCode)return;const[e]=this._currentFragment;return e?{documentElement:e}:void 0}onResolveEntity(t){switch(t){case"apos":return"'"}return super.onResolveEntity(t)}onText(t){if(function(t){for(let e=0,r=t.length;e<r;e++)if(!n(t,e))return!1;return!0}(t))return;const e=new i("#text",t);this._currentFragment.push(e)}onCdata(t){const e=new i("#text",t);this._currentFragment.push(e)}onBeginElement(t,e,r){const n=new i(t);n.childNodes=[],this._currentFragment.push(n),r||(this._stack.push(this._currentFragment),this._currentFragment=n.childNodes)}onEndElement(t){this._currentFragment=this._stack.pop()||[];const e=this._currentFragment[this._currentFragment.length-1];if(e)for(let t=0,r=e.childNodes.length;t<r;t++)e.childNodes[t].parentNode=e}onError(t){this._errorCode=t}}},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.PDFDataTransportStream=void 0;var n=r(2);e.PDFDataTransportStream=class{constructor(t,e){(0,n.assert)(e,'PDFDataTransportStream - missing required "pdfDataRangeTransport" argument.'),this._queuedChunks=[],this._progressiveDone=t.progressiveDone||!1;const r=t.initialData;if(r&&r.length>0){const t=new Uint8Array(r).buffer;this._queuedChunks.push(t)}this._pdfDataRangeTransport=e,this._isStreamingSupported=!t.disableStream,this._isRangeSupported=!t.disableRange,this._contentLength=t.length,this._fullRequestReader=null,this._rangeReaders=[],this._pdfDataRangeTransport.addRangeListener(((t,e)=>{this._onReceiveData({begin:t,chunk:e})})),this._pdfDataRangeTransport.addProgressListener(((t,e)=>{this._onProgress({loaded:t,total:e})})),this._pdfDataRangeTransport.addProgressiveReadListener((t=>{this._onReceiveData({chunk:t})})),this._pdfDataRangeTransport.addProgressiveDoneListener((()=>{this._onProgressiveDone()})),this._pdfDataRangeTransport.transportReady()}_onReceiveData(t){const e=new Uint8Array(t.chunk).buffer;if(void 0===t.begin)this._fullRequestReader?this._fullRequestReader._enqueue(e):this._queuedChunks.push(e);else{const r=this._rangeReaders.some((function(r){return r._begin===t.begin&&(r._enqueue(e),!0)}));(0,n.assert)(r,"_onReceiveData - no `PDFDataTransportStreamRangeReader` instance found.")}}get _progressiveDataLength(){return this._fullRequestReader?this._fullRequestReader._loaded:0}_onProgress(t){if(void 0===t.total){const e=this._rangeReaders[0];e&&e.onProgress&&e.onProgress({loaded:t.loaded})}else{const e=this._fullRequestReader;e&&e.onProgress&&e.onProgress({loaded:t.loaded,total:t.total})}}_onProgressiveDone(){this._fullRequestReader&&this._fullRequestReader.progressiveDone(),this._progressiveDone=!0}_removeRangeReader(t){const e=this._rangeReaders.indexOf(t);e>=0&&this._rangeReaders.splice(e,1)}getFullReader(){(0,n.assert)(!this._fullRequestReader,"PDFDataTransportStream.getFullReader can only be called once.");const t=this._queuedChunks;return this._queuedChunks=null,new i(this,t,this._progressiveDone)}getRangeReader(t,e){if(e<=this._progressiveDataLength)return null;const r=new o(this,t,e);return this._pdfDataRangeTransport.requestDataRange(t,e),this._rangeReaders.push(r),r}cancelAllRequests(t){this._fullRequestReader&&this._fullRequestReader.cancel(t),this._rangeReaders.slice(0).forEach((function(e){e.cancel(t)})),this._pdfDataRangeTransport.abort()}};class i{constructor(t,e,r=!1){this._stream=t,this._done=r||!1,this._filename=null,this._queuedChunks=e||[],this._loaded=0;for(const t of this._queuedChunks)this._loaded+=t.byteLength;this._requests=[],this._headersReady=Promise.resolve(),t._fullRequestReader=this,this.onProgress=null}_enqueue(t){this._done||(this._requests.length>0?this._requests.shift().resolve({value:t,done:!1}):this._queuedChunks.push(t),this._loaded+=t.byteLength)}get headersReady(){return this._headersReady}get filename(){return this._filename}get isRangeSupported(){return this._stream._isRangeSupported}get isStreamingSupported(){return this._stream._isStreamingSupported}get contentLength(){return this._stream._contentLength}async read(){if(this._queuedChunks.length>0)return{value:this._queuedChunks.shift(),done:!1};if(this._done)return{value:void 0,done:!0};const t=(0,n.createPromiseCapability)();return this._requests.push(t),t.promise}cancel(t){this._done=!0,this._requests.forEach((function(t){t.resolve({value:void 0,done:!0})})),this._requests=[]}progressiveDone(){this._done||(this._done=!0)}}class o{constructor(t,e,r){this._stream=t,this._begin=e,this._end=r,this._queuedChunk=null,this._requests=[],this._done=!1,this.onProgress=null}_enqueue(t){this._done||(0===this._requests.length?this._queuedChunk=t:(this._requests.shift().resolve({value:t,done:!1}),this._requests.forEach((function(t){t.resolve({value:void 0,done:!0})})),this._requests=[]),this._done=!0,this._stream._removeRangeReader(this))}get isStreamingSupported(){return!1}async read(){if(this._queuedChunk){const t=this._queuedChunk;return this._queuedChunk=null,{value:t,done:!1}}if(this._done)return{value:void 0,done:!0};const t=(0,n.createPromiseCapability)();return this._requests.push(t),t.promise}cancel(t){this._done=!0,this._requests.forEach((function(t){t.resolve({value:void 0,done:!0})})),this._requests=[],this._stream._removeRangeReader(this)}}},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.WebGLContext=void 0;var n=r(2);e.WebGLContext=class{constructor({enable:t=!1}){this._enabled=!0===t}get isEnabled(){let t=this._enabled;return t&&(t=i.tryInitGL()),(0,n.shadow)(this,"isEnabled",t)}composeSMask({layer:t,mask:e,properties:r}){return i.composeSMask(t,e,r)}drawFigures({width:t,height:e,backgroundColor:r,figures:n,context:o}){return i.drawFigures(t,e,r,n,o)}clear(){i.cleanup()}};var i=function(){function t(t,e,r){var n=t.createShader(r);if(t.shaderSource(n,e),t.compileShader(n),!t.getShaderParameter(n,t.COMPILE_STATUS)){var i=t.getShaderInfoLog(n);throw new Error("Error during shader compilation: "+i)}return n}function e(e,r){return t(e,r,e.VERTEX_SHADER)}function r(e,r){return t(e,r,e.FRAGMENT_SHADER)}function n(t,e){for(var r=t.createProgram(),n=0,i=e.length;n<i;++n)t.attachShader(r,e[n]);if(t.linkProgram(r),!t.getProgramParameter(r,t.LINK_STATUS)){var o=t.getProgramInfoLog(r);throw new Error("Error during program linking: "+o)}return r}function i(t,e,r){t.activeTexture(r);var n=t.createTexture();return t.bindTexture(t.TEXTURE_2D,n),t.texParameteri(t.TEXTURE_2D,t.TEXTURE_WRAP_S,t.CLAMP_TO_EDGE),t.texParameteri(t.TEXTURE_2D,t.TEXTURE_WRAP_T,t.CLAMP_TO_EDGE),t.texParameteri(t.TEXTURE_2D,t.TEXTURE_MIN_FILTER,t.NEAREST),t.texParameteri(t.TEXTURE_2D,t.TEXTURE_MAG_FILTER,t.NEAREST),t.texImage2D(t.TEXTURE_2D,0,t.RGBA,t.RGBA,t.UNSIGNED_BYTE,e),n}var o,a;function s(){o||(a=document.createElement("canvas"),o=a.getContext("webgl",{premultipliedalpha:!1}))}var c=null,l=null;return{tryInitGL(){try{return s(),!!o}catch(t){}return!1},composeSMask:function(t,l,u){var h=t.width,f=t.height;c||function(){var t,i;s(),t=a,a=null,i=o,o=null;var l=n(i,[e(i,"  attribute vec2 a_position;                                      attribute vec2 a_texCoord;                                                                                                      uniform vec2 u_resolution;                                                                                                      varying vec2 v_texCoord;                                                                                                        void main() {                                                     vec2 clipSpace = (a_position / u_resolution) * 2.0 - 1.0;       gl_Position = vec4(clipSpace * vec2(1, -1), 0, 1);                                                                              v_texCoord = a_texCoord;                                      }                                                             "),r(i,"  precision mediump float;                                                                                                        uniform vec4 u_backdrop;                                        uniform int u_subtype;                                          uniform sampler2D u_image;                                      uniform sampler2D u_mask;                                                                                                       varying vec2 v_texCoord;                                                                                                        void main() {                                                     vec4 imageColor = texture2D(u_image, v_texCoord);               vec4 maskColor = texture2D(u_mask, v_texCoord);                 if (u_backdrop.a > 0.0) {                                         maskColor.rgb = maskColor.rgb * maskColor.a +                                   u_backdrop.rgb * (1.0 - maskColor.a);         }                                                               float lum;                                                      if (u_subtype == 0) {                                             lum = maskColor.a;                                            } else {                                                          lum = maskColor.r * 0.3 + maskColor.g * 0.59 +                        maskColor.b * 0.11;                                     }                                                               imageColor.a *= lum;                                            imageColor.rgb *= imageColor.a;                                 gl_FragColor = imageColor;                                    }                                                             ")]);i.useProgram(l);var u={};u.gl=i,u.canvas=t,u.resolutionLocation=i.getUniformLocation(l,"u_resolution"),u.positionLocation=i.getAttribLocation(l,"a_position"),u.backdropLocation=i.getUniformLocation(l,"u_backdrop"),u.subtypeLocation=i.getUniformLocation(l,"u_subtype");var h=i.getAttribLocation(l,"a_texCoord"),f=i.getUniformLocation(l,"u_image"),d=i.getUniformLocation(l,"u_mask"),p=i.createBuffer();i.bindBuffer(i.ARRAY_BUFFER,p),i.bufferData(i.ARRAY_BUFFER,new Float32Array([0,0,1,0,0,1,0,1,1,0,1,1]),i.STATIC_DRAW),i.enableVertexAttribArray(h),i.vertexAttribPointer(h,2,i.FLOAT,!1,0,0),i.uniform1i(f,0),i.uniform1i(d,1),c=u}();var d=c,p=d.canvas,g=d.gl;p.width=h,p.height=f,g.viewport(0,0,g.drawingBufferWidth,g.drawingBufferHeight),g.uniform2f(d.resolutionLocation,h,f),u.backdrop?g.uniform4f(d.resolutionLocation,u.backdrop[0],u.backdrop[1],u.backdrop[2],1):g.uniform4f(d.resolutionLocation,0,0,0,0),g.uniform1i(d.subtypeLocation,"Luminosity"===u.subtype?1:0);var m=i(g,t,g.TEXTURE0),v=i(g,l,g.TEXTURE1),y=g.createBuffer();return g.bindBuffer(g.ARRAY_BUFFER,y),g.bufferData(g.ARRAY_BUFFER,new Float32Array([0,0,h,0,0,f,0,f,h,0,h,f]),g.STATIC_DRAW),g.enableVertexAttribArray(d.positionLocation),g.vertexAttribPointer(d.positionLocation,2,g.FLOAT,!1,0,0),g.clearColor(0,0,0,0),g.enable(g.BLEND),g.blendFunc(g.ONE,g.ONE_MINUS_SRC_ALPHA),g.clear(g.COLOR_BUFFER_BIT),g.drawArrays(g.TRIANGLES,0,6),g.flush(),g.deleteTexture(m),g.deleteTexture(v),g.deleteBuffer(y),p},drawFigures:function(t,i,c,u,h){l||function(){var t,i;s(),t=a,a=null,i=o,o=null;var c=n(i,[e(i,"  attribute vec2 a_position;                                      attribute vec3 a_color;                                                                                                         uniform vec2 u_resolution;                                      uniform vec2 u_scale;                                           uniform vec2 u_offset;                                                                                                          varying vec4 v_color;                                                                                                           void main() {                                                     vec2 position = (a_position + u_offset) * u_scale;              vec2 clipSpace = (position / u_resolution) * 2.0 - 1.0;         gl_Position = vec4(clipSpace * vec2(1, -1), 0, 1);                                                                              v_color = vec4(a_color / 255.0, 1.0);                         }                                                             "),r(i,"  precision mediump float;                                                                                                        varying vec4 v_color;                                                                                                           void main() {                                                     gl_FragColor = v_color;                                       }                                                             ")]);i.useProgram(c);var u={};u.gl=i,u.canvas=t,u.resolutionLocation=i.getUniformLocation(c,"u_resolution"),u.scaleLocation=i.getUniformLocation(c,"u_scale"),u.offsetLocation=i.getUniformLocation(c,"u_offset"),u.positionLocation=i.getAttribLocation(c,"a_position"),u.colorLocation=i.getAttribLocation(c,"a_color"),l=u}();var f=l,d=f.canvas,p=f.gl;d.width=t,d.height=i,p.viewport(0,0,p.drawingBufferWidth,p.drawingBufferHeight),p.uniform2f(f.resolutionLocation,t,i);var g,m,v,y=0;for(g=0,m=u.length;g<m;g++)switch(u[g].type){case"lattice":y+=((v=u[g].coords.length/u[g].verticesPerRow|0)-1)*(u[g].verticesPerRow-1)*6;break;case"triangles":y+=u[g].coords.length}var _=new Float32Array(2*y),b=new Uint8Array(3*y),A=h.coords,x=h.colors,S=0,w=0;for(g=0,m=u.length;g<m;g++){var C=u[g],E=C.coords,k=C.colors;switch(C.type){case"lattice":var P=C.verticesPerRow;v=E.length/P|0;for(var R=1;R<v;R++)for(var T=R*P+1,O=1;O<P;O++,T++)_[S]=A[E[T-P-1]],_[S+1]=A[E[T-P-1]+1],_[S+2]=A[E[T-P]],_[S+3]=A[E[T-P]+1],_[S+4]=A[E[T-1]],_[S+5]=A[E[T-1]+1],b[w]=x[k[T-P-1]],b[w+1]=x[k[T-P-1]+1],b[w+2]=x[k[T-P-1]+2],b[w+3]=x[k[T-P]],b[w+4]=x[k[T-P]+1],b[w+5]=x[k[T-P]+2],b[w+6]=x[k[T-1]],b[w+7]=x[k[T-1]+1],b[w+8]=x[k[T-1]+2],_[S+6]=_[S+2],_[S+7]=_[S+3],_[S+8]=_[S+4],_[S+9]=_[S+5],_[S+10]=A[E[T]],_[S+11]=A[E[T]+1],b[w+9]=b[w+3],b[w+10]=b[w+4],b[w+11]=b[w+5],b[w+12]=b[w+6],b[w+13]=b[w+7],b[w+14]=b[w+8],b[w+15]=x[k[T]],b[w+16]=x[k[T]+1],b[w+17]=x[k[T]+2],S+=12,w+=18;break;case"triangles":for(var L=0,F=E.length;L<F;L++)_[S]=A[E[L]],_[S+1]=A[E[L]+1],b[w]=x[k[L]],b[w+1]=x[k[L]+1],b[w+2]=x[k[L]+2],S+=2,w+=3}}c?p.clearColor(c[0]/255,c[1]/255,c[2]/255,1):p.clearColor(0,0,0,0),p.clear(p.COLOR_BUFFER_BIT);var M=p.createBuffer();p.bindBuffer(p.ARRAY_BUFFER,M),p.bufferData(p.ARRAY_BUFFER,_,p.STATIC_DRAW),p.enableVertexAttribArray(f.positionLocation),p.vertexAttribPointer(f.positionLocation,2,p.FLOAT,!1,0,0);var I=p.createBuffer();return p.bindBuffer(p.ARRAY_BUFFER,I),p.bufferData(p.ARRAY_BUFFER,b,p.STATIC_DRAW),p.enableVertexAttribArray(f.colorLocation),p.vertexAttribPointer(f.colorLocation,3,p.UNSIGNED_BYTE,!1,0,0),p.uniform2f(f.scaleLocation,h.scaleX,h.scaleY),p.uniform2f(f.offsetLocation,h.offsetX,h.offsetY),p.drawArrays(p.TRIANGLES,0,y),p.flush(),p.deleteBuffer(M),p.deleteBuffer(I),d},cleanup(){c&&c.canvas&&(c.canvas.width=0,c.canvas.height=0),l&&l.canvas&&(l.canvas.width=0,l.canvas.height=0),c=null,l=null}}}()},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.AnnotationLayer=void 0;var n=r(1),i=r(2);class o{static create(t){switch(t.data.annotationType){case i.AnnotationType.LINK:return new s(t);case i.AnnotationType.TEXT:return new c(t);case i.AnnotationType.WIDGET:switch(t.data.fieldType){case"Tx":return new u(t);case"Btn":return t.data.radioButton?new f(t):t.data.checkBox?new h(t):new d(t);case"Ch":return new p(t)}return new l(t);case i.AnnotationType.POPUP:return new g(t);case i.AnnotationType.FREETEXT:return new v(t);case i.AnnotationType.LINE:return new y(t);case i.AnnotationType.SQUARE:return new _(t);case i.AnnotationType.CIRCLE:return new b(t);case i.AnnotationType.POLYLINE:return new A(t);case i.AnnotationType.CARET:return new S(t);case i.AnnotationType.INK:return new w(t);case i.AnnotationType.POLYGON:return new x(t);case i.AnnotationType.HIGHLIGHT:return new C(t);case i.AnnotationType.UNDERLINE:return new E(t);case i.AnnotationType.SQUIGGLY:return new k(t);case i.AnnotationType.STRIKEOUT:return new P(t);case i.AnnotationType.STAMP:return new R(t);case i.AnnotationType.FILEATTACHMENT:return new T(t);default:return new a(t)}}}class a{constructor(t,e=!1,r=!1){this.isRenderable=e,this.data=t.data,this.layer=t.layer,this.page=t.page,this.viewport=t.viewport,this.linkService=t.linkService,this.downloadManager=t.downloadManager,this.imageResourcesPath=t.imageResourcesPath,this.renderInteractiveForms=t.renderInteractiveForms,this.svgFactory=t.svgFactory,e&&(this.container=this._createContainer(r))}_createContainer(t=!1){const e=this.data,r=this.page,n=this.viewport,o=document.createElement("section");let a=e.rect[2]-e.rect[0],s=e.rect[3]-e.rect[1];o.setAttribute("data-annotation-id",e.id);const c=i.Util.normalizeRect([e.rect[0],r.view[3]-e.rect[1]+r.view[1],e.rect[2],r.view[3]-e.rect[3]+r.view[1]]);if(o.style.transform=`matrix(${n.transform.join(",")})`,o.style.transformOrigin=`-${c[0]}px -${c[1]}px`,!t&&e.borderStyle.width>0){o.style.borderWidth=`${e.borderStyle.width}px`,e.borderStyle.style!==i.AnnotationBorderStyleType.UNDERLINE&&(a-=2*e.borderStyle.width,s-=2*e.borderStyle.width);const t=e.borderStyle.horizontalCornerRadius,r=e.borderStyle.verticalCornerRadius;if(t>0||r>0){const e=`${t}px / ${r}px`;o.style.borderRadius=e}switch(e.borderStyle.style){case i.AnnotationBorderStyleType.SOLID:o.style.borderStyle="solid";break;case i.AnnotationBorderStyleType.DASHED:o.style.borderStyle="dashed";break;case i.AnnotationBorderStyleType.BEVELED:(0,i.warn)("Unimplemented border style: beveled");break;case i.AnnotationBorderStyleType.INSET:(0,i.warn)("Unimplemented border style: inset");break;case i.AnnotationBorderStyleType.UNDERLINE:o.style.borderBottomStyle="solid"}e.color?o.style.borderColor=i.Util.makeCssRgb(0|e.color[0],0|e.color[1],0|e.color[2]):o.style.borderWidth=0}return o.style.left=`${c[0]}px`,o.style.top=`${c[1]}px`,o.style.width=`${a}px`,o.style.height=`${s}px`,o}_createPopup(t,e,r){e||((e=document.createElement("div")).style.height=t.style.height,e.style.width=t.style.width,t.appendChild(e));const n=new m({container:t,trigger:e,color:r.color,title:r.title,modificationDate:r.modificationDate,contents:r.contents,hideWrapper:!0}).render();n.style.left=t.style.width,t.appendChild(n)}render(){(0,i.unreachable)("Abstract method `AnnotationElement.render` called")}}class s extends a{constructor(t){super(t,!!(t.data.url||t.data.dest||t.data.action))}render(){this.container.className="linkAnnotation";const{data:t,linkService:e}=this,r=document.createElement("a");return t.url?(0,n.addLinkAttributes)(r,{url:t.url,target:t.newWindow?n.LinkTarget.BLANK:e.externalLinkTarget,rel:e.externalLinkRel,enabled:e.externalLinkEnabled}):t.action?this._bindNamedAction(r,t.action):this._bindLink(r,t.dest),this.container.appendChild(r),this.container}_bindLink(t,e){t.href=this.linkService.getDestinationHash(e),t.onclick=()=>(e&&this.linkService.navigateTo(e),!1),e&&(t.className="internalLink")}_bindNamedAction(t,e){t.href=this.linkService.getAnchorUrl(""),t.onclick=()=>(this.linkService.executeNamedAction(e),!1),t.className="internalLink"}}class c extends a{constructor(t){super(t,!!(t.data.hasPopup||t.data.title||t.data.contents))}render(){this.container.className="textAnnotation";const t=document.createElement("img");return t.style.height=this.container.style.height,t.style.width=this.container.style.width,t.src=this.imageResourcesPath+"annotation-"+this.data.name.toLowerCase()+".svg",t.alt="[{{type}} Annotation]",t.dataset.l10nId="text_annotation_type",t.dataset.l10nArgs=JSON.stringify({type:this.data.name}),this.data.hasPopup||this._createPopup(this.container,t,this.data),this.container.appendChild(t),this.container}}class l extends a{render(){return this.container}}class u extends l{constructor(t){super(t,t.renderInteractiveForms||!t.data.hasAppearance&&!!t.data.fieldValue)}render(){this.container.className="textWidgetAnnotation";let t=null;if(this.renderInteractiveForms){if(this.data.multiLine?(t=document.createElement("textarea"),t.textContent=this.data.fieldValue):(t=document.createElement("input"),t.type="text",t.setAttribute("value",this.data.fieldValue)),t.disabled=this.data.readOnly,t.name=this.data.fieldName,null!==this.data.maxLen&&(t.maxLength=this.data.maxLen),this.data.comb){const e=(this.data.rect[2]-this.data.rect[0])/this.data.maxLen;t.classList.add("comb"),t.style.letterSpacing=`calc(${e}px - 1ch)`}}else{t=document.createElement("div"),t.textContent=this.data.fieldValue,t.style.verticalAlign="middle",t.style.display="table-cell";let e=null;this.data.fontRefName&&this.page.commonObjs.has(this.data.fontRefName)&&(e=this.page.commonObjs.get(this.data.fontRefName)),this._setTextStyle(t,e)}return null!==this.data.textAlignment&&(t.style.textAlign=["left","center","right"][this.data.textAlignment]),this.container.appendChild(t),this.container}_setTextStyle(t,e){const r=t.style;if(r.fontSize=`${this.data.fontSize}px`,r.direction=this.data.fontDirection<0?"rtl":"ltr",!e)return;let n="normal";e.black?n="900":e.bold&&(n="bold"),r.fontWeight=n,r.fontStyle=e.italic?"italic":"normal";const i=e.loadedName?`"${e.loadedName}", `:"",o=e.fallbackName||"Helvetica, sans-serif";r.fontFamily=i+o}}class h extends l{constructor(t){super(t,t.renderInteractiveForms)}render(){this.container.className="buttonWidgetAnnotation checkBox";const t=document.createElement("input");return t.disabled=this.data.readOnly,t.type="checkbox",t.name=this.data.fieldName,this.data.fieldValue&&"Off"!==this.data.fieldValue&&t.setAttribute("checked",!0),this.container.appendChild(t),this.container}}class f extends l{constructor(t){super(t,t.renderInteractiveForms)}render(){this.container.className="buttonWidgetAnnotation radioButton";const t=document.createElement("input");return t.disabled=this.data.readOnly,t.type="radio",t.name=this.data.fieldName,this.data.fieldValue===this.data.buttonValue&&t.setAttribute("checked",!0),this.container.appendChild(t),this.container}}class d extends s{render(){const t=super.render();return t.className="buttonWidgetAnnotation pushButton",t}}class p extends l{constructor(t){super(t,t.renderInteractiveForms)}render(){this.container.className="choiceWidgetAnnotation";const t=document.createElement("select");t.disabled=this.data.readOnly,t.name=this.data.fieldName,this.data.combo||(t.size=this.data.options.length,this.data.multiSelect&&(t.multiple=!0));for(const e of this.data.options){const r=document.createElement("option");r.textContent=e.displayValue,r.value=e.exportValue,this.data.fieldValue.includes(e.displayValue)&&r.setAttribute("selected",!0),t.appendChild(r)}return this.container.appendChild(t),this.container}}class g extends a{constructor(t){super(t,!(!t.data.title&&!t.data.contents))}render(){if(this.container.className="popupAnnotation",["Line","Square","Circle","PolyLine","Polygon","Ink"].includes(this.data.parentType))return this.container;const t=`[data-annotation-id="${this.data.parentId}"]`,e=this.layer.querySelector(t);if(!e)return this.container;const r=new m({container:this.container,trigger:e,color:this.data.color,title:this.data.title,modificationDate:this.data.modificationDate,contents:this.data.contents}),n=parseFloat(e.style.left),i=parseFloat(e.style.width);return this.container.style.transformOrigin=`-${n+i}px -${e.style.top}`,this.container.style.left=`${n+i}px`,this.container.appendChild(r.render()),this.container}}class m{constructor(t){this.container=t.container,this.trigger=t.trigger,this.color=t.color,this.title=t.title,this.modificationDate=t.modificationDate,this.contents=t.contents,this.hideWrapper=t.hideWrapper||!1,this.pinned=!1}render(){const t=document.createElement("div");t.className="popupWrapper",this.hideElement=this.hideWrapper?t:this.container,this.hideElement.setAttribute("hidden",!0);const e=document.createElement("div");e.className="popup";const r=this.color;if(r){const t=.7*(255-r[0])+r[0],n=.7*(255-r[1])+r[1],o=.7*(255-r[2])+r[2];e.style.backgroundColor=i.Util.makeCssRgb(0|t,0|n,0|o)}const o=document.createElement("h1");o.textContent=this.title,e.appendChild(o);const a=n.PDFDateString.toDateObject(this.modificationDate);if(a){const t=document.createElement("span");t.textContent="{{date}}, {{time}}",t.dataset.l10nId="annotation_date_string",t.dataset.l10nArgs=JSON.stringify({date:a.toLocaleDateString(),time:a.toLocaleTimeString()}),e.appendChild(t)}const s=this._formatContents(this.contents);return e.appendChild(s),this.trigger.addEventListener("click",this._toggle.bind(this)),this.trigger.addEventListener("mouseover",this._show.bind(this,!1)),this.trigger.addEventListener("mouseout",this._hide.bind(this,!1)),e.addEventListener("click",this._hide.bind(this,!0)),t.appendChild(e),t}_formatContents(t){const e=document.createElement("p"),r=t.split(/(?:\r\n?|\n)/);for(let t=0,n=r.length;t<n;++t){const i=r[t];e.appendChild(document.createTextNode(i)),t<n-1&&e.appendChild(document.createElement("br"))}return e}_toggle(){this.pinned?this._hide(!0):this._show(!0)}_show(t=!1){t&&(this.pinned=!0),this.hideElement.hasAttribute("hidden")&&(this.hideElement.removeAttribute("hidden"),this.container.style.zIndex+=1)}_hide(t=!0){t&&(this.pinned=!1),this.hideElement.hasAttribute("hidden")||this.pinned||(this.hideElement.setAttribute("hidden",!0),this.container.style.zIndex-=1)}}class v extends a{constructor(t){super(t,!!(t.data.hasPopup||t.data.title||t.data.contents),!0)}render(){return this.container.className="freeTextAnnotation",this.data.hasPopup||this._createPopup(this.container,null,this.data),this.container}}class y extends a{constructor(t){super(t,!!(t.data.hasPopup||t.data.title||t.data.contents),!0)}render(){this.container.className="lineAnnotation";const t=this.data,e=t.rect[2]-t.rect[0],r=t.rect[3]-t.rect[1],n=this.svgFactory.create(e,r),i=this.svgFactory.createElement("svg:line");return i.setAttribute("x1",t.rect[2]-t.lineCoordinates[0]),i.setAttribute("y1",t.rect[3]-t.lineCoordinates[1]),i.setAttribute("x2",t.rect[2]-t.lineCoordinates[2]),i.setAttribute("y2",t.rect[3]-t.lineCoordinates[3]),i.setAttribute("stroke-width",t.borderStyle.width||1),i.setAttribute("stroke","transparent"),n.appendChild(i),this.container.append(n),this._createPopup(this.container,i,t),this.container}}class _ extends a{constructor(t){super(t,!!(t.data.hasPopup||t.data.title||t.data.contents),!0)}render(){this.container.className="squareAnnotation";const t=this.data,e=t.rect[2]-t.rect[0],r=t.rect[3]-t.rect[1],n=this.svgFactory.create(e,r),i=t.borderStyle.width,o=this.svgFactory.createElement("svg:rect");return o.setAttribute("x",i/2),o.setAttribute("y",i/2),o.setAttribute("width",e-i),o.setAttribute("height",r-i),o.setAttribute("stroke-width",i||1),o.setAttribute("stroke","transparent"),o.setAttribute("fill","none"),n.appendChild(o),this.container.append(n),this._createPopup(this.container,o,t),this.container}}class b extends a{constructor(t){super(t,!!(t.data.hasPopup||t.data.title||t.data.contents),!0)}render(){this.container.className="circleAnnotation";const t=this.data,e=t.rect[2]-t.rect[0],r=t.rect[3]-t.rect[1],n=this.svgFactory.create(e,r),i=t.borderStyle.width,o=this.svgFactory.createElement("svg:ellipse");return o.setAttribute("cx",e/2),o.setAttribute("cy",r/2),o.setAttribute("rx",e/2-i/2),o.setAttribute("ry",r/2-i/2),o.setAttribute("stroke-width",i||1),o.setAttribute("stroke","transparent"),o.setAttribute("fill","none"),n.appendChild(o),this.container.append(n),this._createPopup(this.container,o,t),this.container}}class A extends a{constructor(t){super(t,!!(t.data.hasPopup||t.data.title||t.data.contents),!0),this.containerClassName="polylineAnnotation",this.svgElementName="svg:polyline"}render(){this.container.className=this.containerClassName;const t=this.data,e=t.rect[2]-t.rect[0],r=t.rect[3]-t.rect[1],n=this.svgFactory.create(e,r);let i=[];for(const e of t.vertices){const r=e.x-t.rect[0],n=t.rect[3]-e.y;i.push(r+","+n)}i=i.join(" ");const o=this.svgFactory.createElement(this.svgElementName);return o.setAttribute("points",i),o.setAttribute("stroke-width",t.borderStyle.width||1),o.setAttribute("stroke","transparent"),o.setAttribute("fill","none"),n.appendChild(o),this.container.append(n),this._createPopup(this.container,o,t),this.container}}class x extends A{constructor(t){super(t),this.containerClassName="polygonAnnotation",this.svgElementName="svg:polygon"}}class S extends a{constructor(t){super(t,!!(t.data.hasPopup||t.data.title||t.data.contents),!0)}render(){return this.container.className="caretAnnotation",this.data.hasPopup||this._createPopup(this.container,null,this.data),this.container}}class w extends a{constructor(t){super(t,!!(t.data.hasPopup||t.data.title||t.data.contents),!0),this.containerClassName="inkAnnotation",this.svgElementName="svg:polyline"}render(){this.container.className=this.containerClassName;const t=this.data,e=t.rect[2]-t.rect[0],r=t.rect[3]-t.rect[1],n=this.svgFactory.create(e,r);for(const e of t.inkLists){let r=[];for(const n of e){const e=n.x-t.rect[0],i=t.rect[3]-n.y;r.push(`${e},${i}`)}r=r.join(" ");const i=this.svgFactory.createElement(this.svgElementName);i.setAttribute("points",r),i.setAttribute("stroke-width",t.borderStyle.width||1),i.setAttribute("stroke","transparent"),i.setAttribute("fill","none"),this._createPopup(this.container,i,t),n.appendChild(i)}return this.container.append(n),this.container}}class C extends a{constructor(t){super(t,!!(t.data.hasPopup||t.data.title||t.data.contents),!0)}render(){return this.container.className="highlightAnnotation",this.data.hasPopup||this._createPopup(this.container,null,this.data),this.container}}class E extends a{constructor(t){super(t,!!(t.data.hasPopup||t.data.title||t.data.contents),!0)}render(){return this.container.className="underlineAnnotation",this.data.hasPopup||this._createPopup(this.container,null,this.data),this.container}}class k extends a{constructor(t){super(t,!!(t.data.hasPopup||t.data.title||t.data.contents),!0)}render(){return this.container.className="squigglyAnnotation",this.data.hasPopup||this._createPopup(this.container,null,this.data),this.container}}class P extends a{constructor(t){super(t,!!(t.data.hasPopup||t.data.title||t.data.contents),!0)}render(){return this.container.className="strikeoutAnnotation",this.data.hasPopup||this._createPopup(this.container,null,this.data),this.container}}class R extends a{constructor(t){super(t,!!(t.data.hasPopup||t.data.title||t.data.contents),!0)}render(){return this.container.className="stampAnnotation",this.data.hasPopup||this._createPopup(this.container,null,this.data),this.container}}class T extends a{constructor(t){super(t,!0);const{filename:e,content:r}=this.data.file;this.filename=(0,n.getFilenameFromUrl)(e),this.content=r,this.linkService.eventBus&&this.linkService.eventBus.dispatch("fileattachmentannotation",{source:this,id:(0,i.stringToPDFString)(e),filename:e,content:r})}render(){this.container.className="fileAttachmentAnnotation";const t=document.createElement("div");return t.style.height=this.container.style.height,t.style.width=this.container.style.width,t.addEventListener("dblclick",this._download.bind(this)),this.data.hasPopup||!this.data.title&&!this.data.contents||this._createPopup(this.container,t,this.data),this.container.appendChild(t),this.container}_download(){this.downloadManager?this.downloadManager.downloadData(this.content,this.filename,""):(0,i.warn)("Download cannot be started due to unavailable download manager")}}e.AnnotationLayer=class{static render(t){const e=[],r=[];for(const n of t.annotations)n&&(n.annotationType!==i.AnnotationType.POPUP?e.push(n):r.push(n));r.length&&e.push(...r);for(const r of e){const e=o.create({data:r,layer:t.div,page:t.page,viewport:t.viewport,linkService:t.linkService,downloadManager:t.downloadManager,imageResourcesPath:t.imageResourcesPath||"",renderInteractiveForms:t.renderInteractiveForms||!1,svgFactory:new n.DOMSVGFactory});e.isRenderable&&t.div.appendChild(e.render())}}static update(t){for(const e of t.annotations){const r=t.div.querySelector(`[data-annotation-id="${e.id}"]`);r&&(r.style.transform=`matrix(${t.viewport.transform.join(",")})`)}t.div.removeAttribute("hidden")}}},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.renderTextLayer=void 0;var n=r(2),i=function(){var t=/\S/;function e(e,r,i){var o,a=document.createElement("span"),s={angle:0,canvasWidth:0,isWhitespace:!1,originalTransform:null,paddingBottom:0,paddingLeft:0,paddingRight:0,paddingTop:0,scale:1};if(e._textDivs.push(a),o=r.str,!t.test(o))return s.isWhitespace=!0,void e._textDivProperties.set(a,s);var c=n.Util.transform(e._viewport.transform,r.transform),l=Math.atan2(c[1],c[0]),u=i[r.fontName];u.vertical&&(l+=Math.PI/2);var h=Math.sqrt(c[2]*c[2]+c[3]*c[3]),f=h;let d,p;u.ascent?f=u.ascent*f:u.descent&&(f=(1+u.descent)*f),0===l?(d=c[4],p=c[5]-f):(d=c[4]+f*Math.sin(l),p=c[5]-f*Math.cos(l)),a.style.left=`${d}px`,a.style.top=`${p}px`,a.style.fontSize=`${h}px`,a.style.fontFamily=u.fontFamily,a.textContent=r.str,e._fontInspectorEnabled&&(a.dataset.fontName=r.fontName),0!==l&&(s.angle=l*(180/Math.PI));let g=!1;if(r.str.length>1)g=!0;else if(r.transform[0]!==r.transform[3]){const t=Math.abs(r.transform[0]),e=Math.abs(r.transform[3]);t!==e&&Math.max(t,e)/Math.min(t,e)>1.5&&(g=!0)}if(g&&(u.vertical?s.canvasWidth=r.height*e._viewport.scale:s.canvasWidth=r.width*e._viewport.scale),e._textDivProperties.set(a,s),e._textContentStream&&e._layoutText(a),e._enhanceTextSelection){var m=1,v=0;0!==l&&(m=Math.cos(l),v=Math.sin(l));var y,_,b=(u.vertical?r.height:r.width)*e._viewport.scale,A=h;0!==l?(y=[m,v,-v,m,d,p],_=n.Util.getAxialAlignedBoundingBox([0,0,b,A],y)):_=[d,p,d+b,p+A],e._bounds.push({left:_[0],top:_[1],right:_[2],bottom:_[3],div:a,size:[b,A],m:y})}}function r(t){if(!t._canceled){var e=t._textDivs,r=t._capability,n=e.length;if(n>1e5)return t._renderingDone=!0,void r.resolve();if(!t._textContentStream)for(var i=0;i<n;i++)t._layoutText(e[i]);t._renderingDone=!0,r.resolve()}}function i(t,e,r){let n=0;for(let i=0;i<r;i++){const r=t[e++];r>0&&(n=n?Math.min(r,n):r)}return n}function o(t,e){e.sort((function(t,e){return t.x1-e.x1||t.index-e.index}));var r=[{start:-1/0,end:1/0,boundary:{x1:-1/0,y1:-1/0,x2:0,y2:1/0,index:-1,x1New:0,x2New:0}}];e.forEach((function(t){for(var e=0;e<r.length&&r[e].end<=t.y1;)e++;for(var n,i,o=r.length-1;o>=0&&r[o].start>=t.y2;)o--;var a,s,c=-1/0;for(a=e;a<=o;a++){var l;(l=(i=(n=r[a]).boundary).x2>t.x1?i.index>t.index?i.x1New:t.x1:void 0===i.x2New?(i.x2+t.x1)/2:i.x2New)>c&&(c=l)}for(t.x1New=c,a=e;a<=o;a++)void 0===(i=(n=r[a]).boundary).x2New?i.x2>t.x1?i.index>t.index&&(i.x2New=i.x2):i.x2New=c:i.x2New>c&&(i.x2New=Math.max(c,i.x2));var u=[],h=null;for(a=e;a<=o;a++){var f=(i=(n=r[a]).boundary).x2>t.x2?i:t;h===f?u[u.length-1].end=n.end:(u.push({start:n.start,end:n.end,boundary:f}),h=f)}for(r[e].start<t.y1&&(u[0].start=t.y1,u.unshift({start:r[e].start,end:t.y1,boundary:r[e].boundary})),t.y2<r[o].end&&(u[u.length-1].end=t.y2,u.push({start:t.y2,end:r[o].end,boundary:r[o].boundary})),a=e;a<=o;a++)if(void 0===(i=(n=r[a]).boundary).x2New){var d=!1;for(s=e-1;!d&&s>=0&&r[s].start>=i.y1;s--)d=r[s].boundary===i;for(s=o+1;!d&&s<r.length&&r[s].end<=i.y2;s++)d=r[s].boundary===i;for(s=0;!d&&s<u.length;s++)d=u[s].boundary===i;d||(i.x2New=c)}Array.prototype.splice.apply(r,[e,o-e+1].concat(u))})),r.forEach((function(e){var r=e.boundary;void 0===r.x2New&&(r.x2New=Math.max(t,r.x2))}))}function a({textContent:t,textContentStream:e,container:r,viewport:i,textDivs:o,textContentItemsStr:a,enhanceTextSelection:s}){this._textContent=t,this._textContentStream=e,this._container=r,this._viewport=i,this._textDivs=o||[],this._textContentItemsStr=a||[],this._enhanceTextSelection=!!s,this._fontInspectorEnabled=!(!globalThis.FontInspector||!globalThis.FontInspector.enabled),this._reader=null,this._layoutTextLastFontSize=null,this._layoutTextLastFontFamily=null,this._layoutTextCtx=null,this._textDivProperties=new WeakMap,this._renderingDone=!1,this._canceled=!1,this._capability=(0,n.createPromiseCapability)(),this._renderTimer=null,this._bounds=[],this._capability.promise.finally((()=>{this._layoutTextCtx&&(this._layoutTextCtx.canvas.width=0,this._layoutTextCtx.canvas.height=0,this._layoutTextCtx=null)})).catch((()=>{}))}return a.prototype={get promise(){return this._capability.promise},cancel:function(){this._canceled=!0,this._reader&&(this._reader.cancel(new n.AbortException("TextLayer task cancelled.")),this._reader=null),null!==this._renderTimer&&(clearTimeout(this._renderTimer),this._renderTimer=null),this._capability.reject(new Error("TextLayer task cancelled."))},_processItems(t,r){for(let n=0,i=t.length;n<i;n++)this._textContentItemsStr.push(t[n].str),e(this,t[n],r)},_layoutText(t){const e=this._textDivProperties.get(t);if(e.isWhitespace)return;let r="";if(0!==e.canvasWidth){const{fontSize:n,fontFamily:i}=t.style;n===this._layoutTextLastFontSize&&i===this._layoutTextLastFontFamily||(this._layoutTextCtx.font=`${n} ${i}`,this._layoutTextLastFontSize=n,this._layoutTextLastFontFamily=i);const{width:o}=this._layoutTextCtx.measureText(t.textContent);o>0&&(e.scale=e.canvasWidth/o,r=`scaleX(${e.scale})`)}0!==e.angle&&(r=`rotate(${e.angle}deg) ${r}`),r.length>0&&(this._enhanceTextSelection&&(e.originalTransform=r),t.style.transform=r),this._textDivProperties.set(t,e),this._container.appendChild(t)},_render:function(t){const e=(0,n.createPromiseCapability)();let i=Object.create(null);const o=document.createElement("canvas");if(o.mozOpaque=!0,this._layoutTextCtx=o.getContext("2d",{alpha:!1}),this._textContent){const t=this._textContent.items,r=this._textContent.styles;this._processItems(t,r),e.resolve()}else{if(!this._textContentStream)throw new Error('Neither "textContent" nor "textContentStream" parameters specified.');{const t=()=>{this._reader.read().then((({value:r,done:n})=>{n?e.resolve():(Object.assign(i,r.styles),this._processItems(r.items,i),t())}),e.reject)};this._reader=this._textContentStream.getReader(),t()}}e.promise.then((()=>{i=null,t?this._renderTimer=setTimeout((()=>{r(this),this._renderTimer=null}),t):r(this)}),this._capability.reject)},expandTextDivs:function(t){if(!this._enhanceTextSelection||!this._renderingDone)return;null!==this._bounds&&(function(t){for(var e=t._bounds,r=t._viewport,a=function(t,e,r){var n=r.map((function(t,e){return{x1:t.left,y1:t.top,x2:t.right,y2:t.bottom,index:e,x1New:void 0,x2New:void 0}}));o(t,n);var i=new Array(r.length);return n.forEach((function(t){var e=t.index;i[e]={left:t.x1New,top:0,right:t.x2New,bottom:0}})),r.map((function(e,r){var o=i[r],a=n[r];a.x1=e.top,a.y1=t-o.right,a.x2=e.bottom,a.y2=t-o.left,a.index=r,a.x1New=void 0,a.x2New=void 0})),o(e,n),n.forEach((function(t){var e=t.index;i[e].top=t.x1New,i[e].bottom=t.x2New})),i}(r.width,r.height,e),s=0;s<a.length;s++){var c=e[s].div,l=t._textDivProperties.get(c);if(0!==l.angle){var u=a[s],h=e[s],f=h.m,d=f[0],p=f[1],g=[[0,0],[0,h.size[1]],[h.size[0],0],h.size],m=new Float64Array(64);g.forEach((function(t,e){var r=n.Util.applyTransform(t,f);m[e+0]=d&&(u.left-r[0])/d,m[e+4]=p&&(u.top-r[1])/p,m[e+8]=d&&(u.right-r[0])/d,m[e+12]=p&&(u.bottom-r[1])/p,m[e+16]=p&&(u.left-r[0])/-p,m[e+20]=d&&(u.top-r[1])/d,m[e+24]=p&&(u.right-r[0])/-p,m[e+28]=d&&(u.bottom-r[1])/d,m[e+32]=d&&(u.left-r[0])/-d,m[e+36]=p&&(u.top-r[1])/-p,m[e+40]=d&&(u.right-r[0])/-d,m[e+44]=p&&(u.bottom-r[1])/-p,m[e+48]=p&&(u.left-r[0])/p,m[e+52]=d&&(u.top-r[1])/-d,m[e+56]=p&&(u.right-r[0])/p,m[e+60]=d&&(u.bottom-r[1])/-d}));var v=1+Math.min(Math.abs(d),Math.abs(p));l.paddingLeft=i(m,32,16)/v,l.paddingTop=i(m,48,16)/v,l.paddingRight=i(m,0,16)/v,l.paddingBottom=i(m,16,16)/v,t._textDivProperties.set(c,l)}else l.paddingLeft=e[s].left-a[s].left,l.paddingTop=e[s].top-a[s].top,l.paddingRight=a[s].right-e[s].right,l.paddingBottom=a[s].bottom-e[s].bottom,t._textDivProperties.set(c,l)}}(this),this._bounds=null);const e=[],r=[];for(var a=0,s=this._textDivs.length;a<s;a++){const n=this._textDivs[a],i=this._textDivProperties.get(n);i.isWhitespace||(t?(e.length=0,r.length=0,i.originalTransform&&e.push(i.originalTransform),i.paddingTop>0?(r.push(`${i.paddingTop}px`),e.push(`translateY(${-i.paddingTop}px)`)):r.push(0),i.paddingRight>0?r.push(i.paddingRight/i.scale+"px"):r.push(0),i.paddingBottom>0?r.push(`${i.paddingBottom}px`):r.push(0),i.paddingLeft>0?(r.push(i.paddingLeft/i.scale+"px"),e.push(`translateX(${-i.paddingLeft/i.scale}px)`)):r.push(0),n.style.padding=r.join(" "),e.length&&(n.style.transform=e.join(" "))):(n.style.padding=null,n.style.transform=i.originalTransform))}}},function(t){var e=new a({textContent:t.textContent,textContentStream:t.textContentStream,container:t.container,viewport:t.viewport,textDivs:t.textDivs,textContentItemsStr:t.textContentItemsStr,enhanceTextSelection:t.enhanceTextSelection});return e._render(t.timeout),e}}();e.renderTextLayer=i},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.SVGGraphics=void 0;var n=r(2),i=r(1),o=r(4);let a=function(){throw new Error("Not implemented: SVGGraphics")};e.SVGGraphics=a;{const t={fontStyle:"normal",fontWeight:"normal",fillColor:"#000000"},r="http://www.w3.org/XML/1998/namespace",l="http://www.w3.org/1999/xlink",u=["butt","round","square"],h=["miter","round","bevel"],f=function(){const t=new Uint8Array([137,80,78,71,13,10,26,10]),e=new Int32Array(256);for(let t=0;t<256;t++){let r=t;for(let t=0;t<8;t++)r=1&r?3988292384^r>>1&2147483647:r>>1&2147483647;e[t]=r}function r(t,r,n,i){let o=i;const a=r.length;n[o]=a>>24&255,n[o+1]=a>>16&255,n[o+2]=a>>8&255,n[o+3]=255&a,o+=4,n[o]=255&t.charCodeAt(0),n[o+1]=255&t.charCodeAt(1),n[o+2]=255&t.charCodeAt(2),n[o+3]=255&t.charCodeAt(3),o+=4,n.set(r,o),o+=r.length;const s=function(t,r,n){let i=-1;for(let o=r;o<n;o++){const r=255&(i^t[o]);i=i>>>8^e[r]}return-1^i}(n,i+4,o);n[o]=s>>24&255,n[o+1]=s>>16&255,n[o+2]=s>>8&255,n[o+3]=255&s}function i(t){let e=t.length;const r=65535,n=Math.ceil(e/r),i=new Uint8Array(2+e+5*n+4);let o=0;i[o++]=120,i[o++]=156;let a=0;for(;e>r;)i[o++]=0,i[o++]=255,i[o++]=255,i[o++]=0,i[o++]=0,i.set(t.subarray(a,a+r),o),o+=r,a+=r,e-=r;i[o++]=1,i[o++]=255&e,i[o++]=e>>8&255,i[o++]=255&~e,i[o++]=(65535&~e)>>8&255,i.set(t.subarray(a),o),o+=t.length-a;const s=function(t,e,r){let n=1,i=0;for(let e=0;e<r;++e)n=(n+(255&t[e]))%65521,i=(i+n)%65521;return i<<16|n}(t,0,t.length);return i[o++]=s>>24&255,i[o++]=s>>16&255,i[o++]=s>>8&255,i[o++]=255&s,i}return function(e,a,s){return function(e,a,s,c){const l=e.width,u=e.height;let h,f,d;const p=e.data;switch(a){case n.ImageKind.GRAYSCALE_1BPP:f=0,h=1,d=l+7>>3;break;case n.ImageKind.RGB_24BPP:f=2,h=8,d=3*l;break;case n.ImageKind.RGBA_32BPP:f=6,h=8,d=4*l;break;default:throw new Error("invalid format")}const g=new Uint8Array((1+d)*u);let m=0,v=0;for(let t=0;t<u;++t)g[m++]=0,g.set(p.subarray(v,v+d),m),v+=d,m+=d;if(a===n.ImageKind.GRAYSCALE_1BPP&&c){m=0;for(let t=0;t<u;t++){m++;for(let t=0;t<d;t++)g[m++]^=255}}const y=new Uint8Array([l>>24&255,l>>16&255,l>>8&255,255&l,u>>24&255,u>>16&255,u>>8&255,255&u,h,f,0,0,0]),_=function(t){if(!o.isNodeJS)return i(t);try{let e;e=parseInt(process.versions.node)>=8?t:Buffer.from(t);const r=__webpack_require__(5804).deflateSync(e,{level:9});return r instanceof Uint8Array?r:new Uint8Array(r)}catch(t){(0,n.warn)("Not compressing PNG because zlib.deflateSync is unavailable: "+t)}return i(t)}(g),b=t.length+36+y.length+_.length,A=new Uint8Array(b);let x=0;return A.set(t,x),x+=t.length,r("IHDR",y,A,x),x+=12+y.length,r("IDATA",_,A,x),x+=12+_.length,r("IEND",new Uint8Array(0),A,x),(0,n.createObjectURL)(A,"image/png",s)}(e,void 0===e.kind?n.ImageKind.GRAYSCALE_1BPP:e.kind,a,s)}}();class d{constructor(){this.fontSizeScale=1,this.fontWeight=t.fontWeight,this.fontSize=0,this.textMatrix=n.IDENTITY_MATRIX,this.fontMatrix=n.FONT_IDENTITY_MATRIX,this.leading=0,this.textRenderingMode=n.TextRenderingMode.FILL,this.textMatrixScale=1,this.x=0,this.y=0,this.lineX=0,this.lineY=0,this.charSpacing=0,this.wordSpacing=0,this.textHScale=1,this.textRise=0,this.fillColor=t.fillColor,this.strokeColor="#000000",this.fillAlpha=1,this.strokeAlpha=1,this.lineWidth=1,this.lineJoin="",this.lineCap="",this.miterLimit=0,this.dashArray=[],this.dashPhase=0,this.dependencies=[],this.activeClipUrl=null,this.clipGroup=null,this.maskId=""}clone(){return Object.create(this)}setCurrentPoint(t,e){this.x=t,this.y=e}}function s(t){if(Number.isInteger(t))return t.toString();const e=t.toFixed(10);let r=e.length-1;if("0"!==e[r])return e;do{r--}while("0"===e[r]);return e.substring(0,"."===e[r]?r:r+1)}function c(t){if(0===t[4]&&0===t[5]){if(0===t[1]&&0===t[2])return 1===t[0]&&1===t[3]?"":`scale(${s(t[0])} ${s(t[3])})`;if(t[0]===t[3]&&t[1]===-t[2])return`rotate(${s(180*Math.acos(t[0])/Math.PI)})`}else if(1===t[0]&&0===t[1]&&0===t[2]&&1===t[3])return`translate(${s(t[4])} ${s(t[5])})`;return`matrix(${s(t[0])} ${s(t[1])} ${s(t[2])} ${s(t[3])} ${s(t[4])} ${s(t[5])})`}let p=0,g=0,m=0;e.SVGGraphics=a=class{constructor(t,e,r=!1){this.svgFactory=new i.DOMSVGFactory,this.current=new d,this.transformMatrix=n.IDENTITY_MATRIX,this.transformStack=[],this.extraStack=[],this.commonObjs=t,this.objs=e,this.pendingClip=null,this.pendingEOFill=!1,this.embedFonts=!1,this.embeddedFonts=Object.create(null),this.cssStyle=null,this.forceDataSchema=!!r,this._operatorIdMapping=[];for(const t in n.OPS)this._operatorIdMapping[n.OPS[t]]=t}save(){this.transformStack.push(this.transformMatrix);const t=this.current;this.extraStack.push(t),this.current=t.clone()}restore(){this.transformMatrix=this.transformStack.pop(),this.current=this.extraStack.pop(),this.pendingClip=null,this.tgrp=null}group(t){this.save(),this.executeOpTree(t),this.restore()}loadDependencies(t){const e=t.fnArray,r=t.argsArray;for(let t=0,i=e.length;t<i;t++)if(e[t]===n.OPS.dependency)for(const e of r[t]){const t=e.startsWith("g_")?this.commonObjs:this.objs,r=new Promise((r=>{t.get(e,r)}));this.current.dependencies.push(r)}return Promise.all(this.current.dependencies)}transform(t,e,r,i,o,a){const s=[t,e,r,i,o,a];this.transformMatrix=n.Util.transform(this.transformMatrix,s),this.tgrp=null}getSVG(t,e){this.viewport=e;const r=this._initialize(e);return this.loadDependencies(t).then((()=>(this.transformMatrix=n.IDENTITY_MATRIX,this.executeOpTree(this.convertOpList(t)),r)))}convertOpList(t){const e=this._operatorIdMapping,r=t.argsArray,n=t.fnArray,i=[];for(let t=0,o=n.length;t<o;t++){const o=n[t];i.push({fnId:o,fn:e[o],args:r[t]})}return function(t){let e=[];const r=[];for(const n of t)"save"!==n.fn?"restore"===n.fn?e=r.pop():e.push(n):(e.push({fnId:92,fn:"group",items:[]}),r.push(e),e=e[e.length-1].items);return e}(i)}executeOpTree(t){for(const e of t){const t=e.fn,r=e.fnId,i=e.args;switch(0|r){case n.OPS.beginText:this.beginText();break;case n.OPS.dependency:break;case n.OPS.setLeading:this.setLeading(i);break;case n.OPS.setLeadingMoveText:this.setLeadingMoveText(i[0],i[1]);break;case n.OPS.setFont:this.setFont(i);break;case n.OPS.showText:case n.OPS.showSpacedText:this.showText(i[0]);break;case n.OPS.endText:this.endText();break;case n.OPS.moveText:this.moveText(i[0],i[1]);break;case n.OPS.setCharSpacing:this.setCharSpacing(i[0]);break;case n.OPS.setWordSpacing:this.setWordSpacing(i[0]);break;case n.OPS.setHScale:this.setHScale(i[0]);break;case n.OPS.setTextMatrix:this.setTextMatrix(i[0],i[1],i[2],i[3],i[4],i[5]);break;case n.OPS.setTextRise:this.setTextRise(i[0]);break;case n.OPS.setTextRenderingMode:this.setTextRenderingMode(i[0]);break;case n.OPS.setLineWidth:this.setLineWidth(i[0]);break;case n.OPS.setLineJoin:this.setLineJoin(i[0]);break;case n.OPS.setLineCap:this.setLineCap(i[0]);break;case n.OPS.setMiterLimit:this.setMiterLimit(i[0]);break;case n.OPS.setFillRGBColor:this.setFillRGBColor(i[0],i[1],i[2]);break;case n.OPS.setStrokeRGBColor:this.setStrokeRGBColor(i[0],i[1],i[2]);break;case n.OPS.setStrokeColorN:this.setStrokeColorN(i);break;case n.OPS.setFillColorN:this.setFillColorN(i);break;case n.OPS.shadingFill:this.shadingFill(i[0]);break;case n.OPS.setDash:this.setDash(i[0],i[1]);break;case n.OPS.setRenderingIntent:this.setRenderingIntent(i[0]);break;case n.OPS.setFlatness:this.setFlatness(i[0]);break;case n.OPS.setGState:this.setGState(i[0]);break;case n.OPS.fill:this.fill();break;case n.OPS.eoFill:this.eoFill();break;case n.OPS.stroke:this.stroke();break;case n.OPS.fillStroke:this.fillStroke();break;case n.OPS.eoFillStroke:this.eoFillStroke();break;case n.OPS.clip:this.clip("nonzero");break;case n.OPS.eoClip:this.clip("evenodd");break;case n.OPS.paintSolidColorImageMask:this.paintSolidColorImageMask();break;case n.OPS.paintImageXObject:this.paintImageXObject(i[0]);break;case n.OPS.paintInlineImageXObject:this.paintInlineImageXObject(i[0]);break;case n.OPS.paintImageMaskXObject:this.paintImageMaskXObject(i[0]);break;case n.OPS.paintFormXObjectBegin:this.paintFormXObjectBegin(i[0],i[1]);break;case n.OPS.paintFormXObjectEnd:this.paintFormXObjectEnd();break;case n.OPS.closePath:this.closePath();break;case n.OPS.closeStroke:this.closeStroke();break;case n.OPS.closeFillStroke:this.closeFillStroke();break;case n.OPS.closeEOFillStroke:this.closeEOFillStroke();break;case n.OPS.nextLine:this.nextLine();break;case n.OPS.transform:this.transform(i[0],i[1],i[2],i[3],i[4],i[5]);break;case n.OPS.constructPath:this.constructPath(i[0],i[1]);break;case n.OPS.endPath:this.endPath();break;case 92:this.group(e.items);break;default:(0,n.warn)(`Unimplemented operator ${t}`)}}}setWordSpacing(t){this.current.wordSpacing=t}setCharSpacing(t){this.current.charSpacing=t}nextLine(){this.moveText(0,this.current.leading)}setTextMatrix(t,e,r,n,i,o){const a=this.current;a.textMatrix=a.lineMatrix=[t,e,r,n,i,o],a.textMatrixScale=Math.sqrt(t*t+e*e),a.x=a.lineX=0,a.y=a.lineY=0,a.xcoords=[],a.ycoords=[],a.tspan=this.svgFactory.createElement("svg:tspan"),a.tspan.setAttributeNS(null,"font-family",a.fontFamily),a.tspan.setAttributeNS(null,"font-size",`${s(a.fontSize)}px`),a.tspan.setAttributeNS(null,"y",s(-a.y)),a.txtElement=this.svgFactory.createElement("svg:text"),a.txtElement.appendChild(a.tspan)}beginText(){const t=this.current;t.x=t.lineX=0,t.y=t.lineY=0,t.textMatrix=n.IDENTITY_MATRIX,t.lineMatrix=n.IDENTITY_MATRIX,t.textMatrixScale=1,t.tspan=this.svgFactory.createElement("svg:tspan"),t.txtElement=this.svgFactory.createElement("svg:text"),t.txtgrp=this.svgFactory.createElement("svg:g"),t.xcoords=[],t.ycoords=[]}moveText(t,e){const r=this.current;r.x=r.lineX+=t,r.y=r.lineY+=e,r.xcoords=[],r.ycoords=[],r.tspan=this.svgFactory.createElement("svg:tspan"),r.tspan.setAttributeNS(null,"font-family",r.fontFamily),r.tspan.setAttributeNS(null,"font-size",`${s(r.fontSize)}px`),r.tspan.setAttributeNS(null,"y",s(-r.y))}showText(e){const i=this.current,o=i.font,a=i.fontSize;if(0===a)return;const l=i.fontSizeScale,u=i.charSpacing,h=i.wordSpacing,f=i.fontDirection,d=i.textHScale*f,p=o.vertical,g=p?1:-1,m=o.defaultVMetrics,v=a*i.fontMatrix[0];let y=0;for(const t of e){if(null===t){y+=f*h;continue}if((0,n.isNum)(t)){y+=g*t*a/1e3;continue}const e=(t.isSpace?h:0)+u,r=t.fontChar;let s,c,d,_=t.width;if(p){let e;const r=t.vmetric||m;e=t.vmetric?r[1]:.5*_,e=-e*v;const n=r[2]*v;_=r?-r[0]:_,s=e/l,c=(y+n)/l}else s=y/l,c=0;(t.isInFont||o.missingFile)&&(i.xcoords.push(i.x+s),p&&i.ycoords.push(-i.y+c),i.tspan.textContent+=r),d=p?_*v-e*f:_*v+e*f,y+=d}i.tspan.setAttributeNS(null,"x",i.xcoords.map(s).join(" ")),p?i.tspan.setAttributeNS(null,"y",i.ycoords.map(s).join(" ")):i.tspan.setAttributeNS(null,"y",s(-i.y)),p?i.y-=y:i.x+=y*d,i.tspan.setAttributeNS(null,"font-family",i.fontFamily),i.tspan.setAttributeNS(null,"font-size",`${s(i.fontSize)}px`),i.fontStyle!==t.fontStyle&&i.tspan.setAttributeNS(null,"font-style",i.fontStyle),i.fontWeight!==t.fontWeight&&i.tspan.setAttributeNS(null,"font-weight",i.fontWeight);const _=i.textRenderingMode&n.TextRenderingMode.FILL_STROKE_MASK;if(_===n.TextRenderingMode.FILL||_===n.TextRenderingMode.FILL_STROKE?(i.fillColor!==t.fillColor&&i.tspan.setAttributeNS(null,"fill",i.fillColor),i.fillAlpha<1&&i.tspan.setAttributeNS(null,"fill-opacity",i.fillAlpha)):i.textRenderingMode===n.TextRenderingMode.ADD_TO_PATH?i.tspan.setAttributeNS(null,"fill","transparent"):i.tspan.setAttributeNS(null,"fill","none"),_===n.TextRenderingMode.STROKE||_===n.TextRenderingMode.FILL_STROKE){const t=1/(i.textMatrixScale||1);this._setStrokeAttributes(i.tspan,t)}let b=i.textMatrix;0!==i.textRise&&(b=b.slice(),b[5]+=i.textRise),i.txtElement.setAttributeNS(null,"transform",`${c(b)} scale(${s(d)}, -1)`),i.txtElement.setAttributeNS(r,"xml:space","preserve"),i.txtElement.appendChild(i.tspan),i.txtgrp.appendChild(i.txtElement),this._ensureTransformGroup().appendChild(i.txtElement)}setLeadingMoveText(t,e){this.setLeading(-e),this.moveText(t,e)}addFontStyle(t){if(!t.data)throw new Error('addFontStyle: No font data available, ensure that the "fontExtraProperties" API parameter is set.');this.cssStyle||(this.cssStyle=this.svgFactory.createElement("svg:style"),this.cssStyle.setAttributeNS(null,"type","text/css"),this.defs.appendChild(this.cssStyle));const e=(0,n.createObjectURL)(t.data,t.mimetype,this.forceDataSchema);this.cssStyle.textContent+=`@font-face { font-family: "${t.loadedName}"; src: url(${e}); }\n`}setFont(t){const e=this.current,r=this.commonObjs.get(t[0]);let i=t[1];e.font=r,!this.embedFonts||r.missingFile||this.embeddedFonts[r.loadedName]||(this.addFontStyle(r),this.embeddedFonts[r.loadedName]=r),e.fontMatrix=r.fontMatrix?r.fontMatrix:n.FONT_IDENTITY_MATRIX;let o="normal";r.black?o="900":r.bold&&(o="bold");const a=r.italic?"italic":"normal";i<0?(i=-i,e.fontDirection=-1):e.fontDirection=1,e.fontSize=i,e.fontFamily=r.loadedName,e.fontWeight=o,e.fontStyle=a,e.tspan=this.svgFactory.createElement("svg:tspan"),e.tspan.setAttributeNS(null,"y",s(-e.y)),e.xcoords=[],e.ycoords=[]}endText(){const t=this.current;t.textRenderingMode&n.TextRenderingMode.ADD_TO_PATH_FLAG&&t.txtElement&&t.txtElement.hasChildNodes()&&(t.element=t.txtElement,this.clip("nonzero"),this.endPath())}setLineWidth(t){t>0&&(this.current.lineWidth=t)}setLineCap(t){this.current.lineCap=u[t]}setLineJoin(t){this.current.lineJoin=h[t]}setMiterLimit(t){this.current.miterLimit=t}setStrokeAlpha(t){this.current.strokeAlpha=t}setStrokeRGBColor(t,e,r){this.current.strokeColor=n.Util.makeCssRgb(t,e,r)}setFillAlpha(t){this.current.fillAlpha=t}setFillRGBColor(t,e,r){this.current.fillColor=n.Util.makeCssRgb(t,e,r),this.current.tspan=this.svgFactory.createElement("svg:tspan"),this.current.xcoords=[],this.current.ycoords=[]}setStrokeColorN(t){this.current.strokeColor=this._makeColorN_Pattern(t)}setFillColorN(t){this.current.fillColor=this._makeColorN_Pattern(t)}shadingFill(t){const e=this.viewport.width,r=this.viewport.height,i=n.Util.inverseTransform(this.transformMatrix),o=n.Util.applyTransform([0,0],i),a=n.Util.applyTransform([0,r],i),s=n.Util.applyTransform([e,0],i),c=n.Util.applyTransform([e,r],i),l=Math.min(o[0],a[0],s[0],c[0]),u=Math.min(o[1],a[1],s[1],c[1]),h=Math.max(o[0],a[0],s[0],c[0]),f=Math.max(o[1],a[1],s[1],c[1]),d=this.svgFactory.createElement("svg:rect");d.setAttributeNS(null,"x",l),d.setAttributeNS(null,"y",u),d.setAttributeNS(null,"width",h-l),d.setAttributeNS(null,"height",f-u),d.setAttributeNS(null,"fill",this._makeShadingPattern(t)),this.current.fillAlpha<1&&d.setAttributeNS(null,"fill-opacity",this.current.fillAlpha),this._ensureTransformGroup().appendChild(d)}_makeColorN_Pattern(t){return"TilingPattern"===t[0]?this._makeTilingPattern(t):this._makeShadingPattern(t)}_makeTilingPattern(t){const e=t[1],r=t[2],i=t[3]||n.IDENTITY_MATRIX,[o,a,s,c]=t[4],l=t[5],u=t[6],h=t[7],f="shading"+m++,[d,p]=n.Util.applyTransform([o,a],i),[g,v]=n.Util.applyTransform([s,c],i),[y,_]=n.Util.singularValueDecompose2dScale(i),b=l*y,A=u*_,x=this.svgFactory.createElement("svg:pattern");x.setAttributeNS(null,"id",f),x.setAttributeNS(null,"patternUnits","userSpaceOnUse"),x.setAttributeNS(null,"width",b),x.setAttributeNS(null,"height",A),x.setAttributeNS(null,"x",`${d}`),x.setAttributeNS(null,"y",`${p}`);const S=this.svg,w=this.transformMatrix,C=this.current.fillColor,E=this.current.strokeColor,k=this.svgFactory.create(g-d,v-p);if(this.svg=k,this.transformMatrix=i,2===h){const t=n.Util.makeCssRgb(...e);this.current.fillColor=t,this.current.strokeColor=t}return this.executeOpTree(this.convertOpList(r)),this.svg=S,this.transformMatrix=w,this.current.fillColor=C,this.current.strokeColor=E,x.appendChild(k.childNodes[0]),this.defs.appendChild(x),`url(#${f})`}_makeShadingPattern(t){switch(t[0]){case"RadialAxial":const e="shading"+m++,r=t[3];let i;switch(t[1]){case"axial":const r=t[4],n=t[5];i=this.svgFactory.createElement("svg:linearGradient"),i.setAttributeNS(null,"id",e),i.setAttributeNS(null,"gradientUnits","userSpaceOnUse"),i.setAttributeNS(null,"x1",r[0]),i.setAttributeNS(null,"y1",r[1]),i.setAttributeNS(null,"x2",n[0]),i.setAttributeNS(null,"y2",n[1]);break;case"radial":const o=t[4],a=t[5],s=t[6],c=t[7];i=this.svgFactory.createElement("svg:radialGradient"),i.setAttributeNS(null,"id",e),i.setAttributeNS(null,"gradientUnits","userSpaceOnUse"),i.setAttributeNS(null,"cx",a[0]),i.setAttributeNS(null,"cy",a[1]),i.setAttributeNS(null,"r",c),i.setAttributeNS(null,"fx",o[0]),i.setAttributeNS(null,"fy",o[1]),i.setAttributeNS(null,"fr",s);break;default:throw new Error(`Unknown RadialAxial type: ${t[1]}`)}for(const t of r){const e=this.svgFactory.createElement("svg:stop");e.setAttributeNS(null,"offset",t[0]),e.setAttributeNS(null,"stop-color",t[1]),i.appendChild(e)}return this.defs.appendChild(i),`url(#${e})`;case"Mesh":return(0,n.warn)("Unimplemented pattern Mesh"),null;case"Dummy":return"hotpink";default:throw new Error(`Unknown IR type: ${t[0]}`)}}setDash(t,e){this.current.dashArray=t,this.current.dashPhase=e}constructPath(t,e){const r=this.current;let i=r.x,o=r.y,a=[],c=0;for(const r of t)switch(0|r){case n.OPS.rectangle:i=e[c++],o=e[c++];const t=i+e[c++],r=o+e[c++];a.push("M",s(i),s(o),"L",s(t),s(o),"L",s(t),s(r),"L",s(i),s(r),"Z");break;case n.OPS.moveTo:i=e[c++],o=e[c++],a.push("M",s(i),s(o));break;case n.OPS.lineTo:i=e[c++],o=e[c++],a.push("L",s(i),s(o));break;case n.OPS.curveTo:i=e[c+4],o=e[c+5],a.push("C",s(e[c]),s(e[c+1]),s(e[c+2]),s(e[c+3]),s(i),s(o)),c+=6;break;case n.OPS.curveTo2:a.push("C",s(i),s(o),s(e[c]),s(e[c+1]),s(e[c+2]),s(e[c+3])),i=e[c+2],o=e[c+3],c+=4;break;case n.OPS.curveTo3:i=e[c+2],o=e[c+3],a.push("C",s(e[c]),s(e[c+1]),s(i),s(o),s(i),s(o)),c+=4;break;case n.OPS.closePath:a.push("Z")}a=a.join(" "),r.path&&t.length>0&&t[0]!==n.OPS.rectangle&&t[0]!==n.OPS.moveTo?a=r.path.getAttributeNS(null,"d")+a:(r.path=this.svgFactory.createElement("svg:path"),this._ensureTransformGroup().appendChild(r.path)),r.path.setAttributeNS(null,"d",a),r.path.setAttributeNS(null,"fill","none"),r.element=r.path,r.setCurrentPoint(i,o)}endPath(){const t=this.current;if(t.path=null,!this.pendingClip)return;if(!t.element)return void(this.pendingClip=null);const e="clippath"+p++,r=this.svgFactory.createElement("svg:clipPath");r.setAttributeNS(null,"id",e),r.setAttributeNS(null,"transform",c(this.transformMatrix));const n=t.element.cloneNode(!0);"evenodd"===this.pendingClip?n.setAttributeNS(null,"clip-rule","evenodd"):n.setAttributeNS(null,"clip-rule","nonzero"),this.pendingClip=null,r.appendChild(n),this.defs.appendChild(r),t.activeClipUrl&&(t.clipGroup=null,this.extraStack.forEach((function(t){t.clipGroup=null})),r.setAttributeNS(null,"clip-path",t.activeClipUrl)),t.activeClipUrl=`url(#${e})`,this.tgrp=null}clip(t){this.pendingClip=t}closePath(){const t=this.current;if(t.path){const e=`${t.path.getAttributeNS(null,"d")}Z`;t.path.setAttributeNS(null,"d",e)}}setLeading(t){this.current.leading=-t}setTextRise(t){this.current.textRise=t}setTextRenderingMode(t){this.current.textRenderingMode=t}setHScale(t){this.current.textHScale=t/100}setRenderingIntent(t){}setFlatness(t){}setGState(t){for(const[e,r]of t)switch(e){case"LW":this.setLineWidth(r);break;case"LC":this.setLineCap(r);break;case"LJ":this.setLineJoin(r);break;case"ML":this.setMiterLimit(r);break;case"D":this.setDash(r[0],r[1]);break;case"RI":this.setRenderingIntent(r);break;case"FL":this.setFlatness(r);break;case"Font":this.setFont(r);break;case"CA":this.setStrokeAlpha(r);break;case"ca":this.setFillAlpha(r);break;default:(0,n.warn)(`Unimplemented graphic state operator ${e}`)}}fill(){const t=this.current;t.element&&(t.element.setAttributeNS(null,"fill",t.fillColor),t.element.setAttributeNS(null,"fill-opacity",t.fillAlpha),this.endPath())}stroke(){const t=this.current;t.element&&(this._setStrokeAttributes(t.element),t.element.setAttributeNS(null,"fill","none"),this.endPath())}_setStrokeAttributes(t,e=1){const r=this.current;let n=r.dashArray;1!==e&&n.length>0&&(n=n.map((function(t){return e*t}))),t.setAttributeNS(null,"stroke",r.strokeColor),t.setAttributeNS(null,"stroke-opacity",r.strokeAlpha),t.setAttributeNS(null,"stroke-miterlimit",s(r.miterLimit)),t.setAttributeNS(null,"stroke-linecap",r.lineCap),t.setAttributeNS(null,"stroke-linejoin",r.lineJoin),t.setAttributeNS(null,"stroke-width",s(e*r.lineWidth)+"px"),t.setAttributeNS(null,"stroke-dasharray",n.map(s).join(" ")),t.setAttributeNS(null,"stroke-dashoffset",s(e*r.dashPhase)+"px")}eoFill(){this.current.element&&this.current.element.setAttributeNS(null,"fill-rule","evenodd"),this.fill()}fillStroke(){this.stroke(),this.fill()}eoFillStroke(){this.current.element&&this.current.element.setAttributeNS(null,"fill-rule","evenodd"),this.fillStroke()}closeStroke(){this.closePath(),this.stroke()}closeFillStroke(){this.closePath(),this.fillStroke()}closeEOFillStroke(){this.closePath(),this.eoFillStroke()}paintSolidColorImageMask(){const t=this.svgFactory.createElement("svg:rect");t.setAttributeNS(null,"x","0"),t.setAttributeNS(null,"y","0"),t.setAttributeNS(null,"width","1px"),t.setAttributeNS(null,"height","1px"),t.setAttributeNS(null,"fill",this.current.fillColor),this._ensureTransformGroup().appendChild(t)}paintImageXObject(t){const e=this.objs.get(t);e?this.paintInlineImageXObject(e):(0,n.warn)(`Dependent image with object ID ${t} is not ready yet`)}paintInlineImageXObject(t,e){const r=t.width,n=t.height,i=f(t,this.forceDataSchema,!!e),o=this.svgFactory.createElement("svg:rect");o.setAttributeNS(null,"x","0"),o.setAttributeNS(null,"y","0"),o.setAttributeNS(null,"width",s(r)),o.setAttributeNS(null,"height",s(n)),this.current.element=o,this.clip("nonzero");const a=this.svgFactory.createElement("svg:image");a.setAttributeNS(l,"xlink:href",i),a.setAttributeNS(null,"x","0"),a.setAttributeNS(null,"y",s(-n)),a.setAttributeNS(null,"width",s(r)+"px"),a.setAttributeNS(null,"height",s(n)+"px"),a.setAttributeNS(null,"transform",`scale(${s(1/r)} ${s(-1/n)})`),e?e.appendChild(a):this._ensureTransformGroup().appendChild(a)}paintImageMaskXObject(t){const e=this.current,r=t.width,n=t.height,i=e.fillColor;e.maskId="mask"+g++;const o=this.svgFactory.createElement("svg:mask");o.setAttributeNS(null,"id",e.maskId);const a=this.svgFactory.createElement("svg:rect");a.setAttributeNS(null,"x","0"),a.setAttributeNS(null,"y","0"),a.setAttributeNS(null,"width",s(r)),a.setAttributeNS(null,"height",s(n)),a.setAttributeNS(null,"fill",i),a.setAttributeNS(null,"mask",`url(#${e.maskId})`),this.defs.appendChild(o),this._ensureTransformGroup().appendChild(a),this.paintInlineImageXObject(t,o)}paintFormXObjectBegin(t,e){if(Array.isArray(t)&&6===t.length&&this.transform(t[0],t[1],t[2],t[3],t[4],t[5]),e){const t=e[2]-e[0],r=e[3]-e[1],n=this.svgFactory.createElement("svg:rect");n.setAttributeNS(null,"x",e[0]),n.setAttributeNS(null,"y",e[1]),n.setAttributeNS(null,"width",s(t)),n.setAttributeNS(null,"height",s(r)),this.current.element=n,this.clip("nonzero"),this.endPath()}}paintFormXObjectEnd(){}_initialize(t){const e=this.svgFactory.create(t.width,t.height),r=this.svgFactory.createElement("svg:defs");e.appendChild(r),this.defs=r;const n=this.svgFactory.createElement("svg:g");return n.setAttributeNS(null,"transform",c(t.transform)),e.appendChild(n),this.svg=n,e}_ensureClipGroup(){if(!this.current.clipGroup){const t=this.svgFactory.createElement("svg:g");t.setAttributeNS(null,"clip-path",this.current.activeClipUrl),this.svg.appendChild(t),this.current.clipGroup=t}return this.current.clipGroup}_ensureTransformGroup(){return this.tgrp||(this.tgrp=this.svgFactory.createElement("svg:g"),this.tgrp.setAttributeNS(null,"transform",c(this.transformMatrix)),this.current.activeClipUrl?this._ensureClipGroup().appendChild(this.tgrp):this.svg.appendChild(this.tgrp)),this.tgrp}}}},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.PDFNodeStream=void 0;var n=r(2),i=r(20);const o=__webpack_require__(2993),a=__webpack_require__(8618),s=__webpack_require__(120),c=__webpack_require__(6355),l=/^file:\/\/\/[a-zA-Z]:\//;e.PDFNodeStream=class{constructor(t){this.source=t,this.url=function(t){const e=c.parse(t);return"file:"===e.protocol||e.host?e:/^[a-z]:[/\\]/i.test(t)?c.parse(`file:///${t}`):(e.host||(e.protocol="file:"),e)}(t.url),this.isHttp="http:"===this.url.protocol||"https:"===this.url.protocol,this.isFsUrl="file:"===this.url.protocol,this.httpHeaders=this.isHttp&&t.httpHeaders||{},this._fullRequestReader=null,this._rangeRequestReaders=[]}get _progressiveDataLength(){return this._fullRequestReader?this._fullRequestReader._loaded:0}getFullReader(){return(0,n.assert)(!this._fullRequestReader,"PDFNodeStream.getFullReader can only be called once."),this._fullRequestReader=this.isFsUrl?new g(this):new d(this),this._fullRequestReader}getRangeReader(t,e){if(e<=this._progressiveDataLength)return null;const r=this.isFsUrl?new m(this,t,e):new p(this,t,e);return this._rangeRequestReaders.push(r),r}cancelAllRequests(t){this._fullRequestReader&&this._fullRequestReader.cancel(t),this._rangeRequestReaders.slice(0).forEach((function(e){e.cancel(t)}))}};class u{constructor(t){this._url=t.url,this._done=!1,this._storedError=null,this.onProgress=null;const e=t.source;this._contentLength=e.length,this._loaded=0,this._filename=null,this._disableRange=e.disableRange||!1,this._rangeChunkSize=e.rangeChunkSize,this._rangeChunkSize||this._disableRange||(this._disableRange=!0),this._isStreamingSupported=!e.disableStream,this._isRangeSupported=!e.disableRange,this._readableStream=null,this._readCapability=(0,n.createPromiseCapability)(),this._headersCapability=(0,n.createPromiseCapability)()}get headersReady(){return this._headersCapability.promise}get filename(){return this._filename}get contentLength(){return this._contentLength}get isRangeSupported(){return this._isRangeSupported}get isStreamingSupported(){return this._isStreamingSupported}async read(){if(await this._readCapability.promise,this._done)return{value:void 0,done:!0};if(this._storedError)throw this._storedError;const t=this._readableStream.read();return null===t?(this._readCapability=(0,n.createPromiseCapability)(),this.read()):(this._loaded+=t.length,this.onProgress&&this.onProgress({loaded:this._loaded,total:this._contentLength}),{value:new Uint8Array(t).buffer,done:!1})}cancel(t){this._readableStream?this._readableStream.destroy(t):this._error(t)}_error(t){this._storedError=t,this._readCapability.resolve()}_setReadableStream(t){this._readableStream=t,t.on("readable",(()=>{this._readCapability.resolve()})),t.on("end",(()=>{t.destroy(),this._done=!0,this._readCapability.resolve()})),t.on("error",(t=>{this._error(t)})),!this._isStreamingSupported&&this._isRangeSupported&&this._error(new n.AbortException("streaming is disabled")),this._storedError&&this._readableStream.destroy(this._storedError)}}class h{constructor(t){this._url=t.url,this._done=!1,this._storedError=null,this.onProgress=null,this._loaded=0,this._readableStream=null,this._readCapability=(0,n.createPromiseCapability)();const e=t.source;this._isStreamingSupported=!e.disableStream}get isStreamingSupported(){return this._isStreamingSupported}async read(){if(await this._readCapability.promise,this._done)return{value:void 0,done:!0};if(this._storedError)throw this._storedError;const t=this._readableStream.read();return null===t?(this._readCapability=(0,n.createPromiseCapability)(),this.read()):(this._loaded+=t.length,this.onProgress&&this.onProgress({loaded:this._loaded}),{value:new Uint8Array(t).buffer,done:!1})}cancel(t){this._readableStream?this._readableStream.destroy(t):this._error(t)}_error(t){this._storedError=t,this._readCapability.resolve()}_setReadableStream(t){this._readableStream=t,t.on("readable",(()=>{this._readCapability.resolve()})),t.on("end",(()=>{t.destroy(),this._done=!0,this._readCapability.resolve()})),t.on("error",(t=>{this._error(t)})),this._storedError&&this._readableStream.destroy(this._storedError)}}function f(t,e){return{protocol:t.protocol,auth:t.auth,host:t.hostname,port:t.port,path:t.path,method:"GET",headers:e}}class d extends u{constructor(t){super(t);const e=e=>{if(404===e.statusCode){const t=new n.MissingPDFException(`Missing PDF "${this._url}".`);return this._storedError=t,void this._headersCapability.reject(t)}this._headersCapability.resolve(),this._setReadableStream(e);const r=t=>this._readableStream.headers[t.toLowerCase()],{allowRangeRequests:o,suggestedLength:a}=(0,i.validateRangeRequestCapabilities)({getResponseHeader:r,isHttp:t.isHttp,rangeChunkSize:this._rangeChunkSize,disableRange:this._disableRange});this._isRangeSupported=o,this._contentLength=a||this._contentLength,this._filename=(0,i.extractFilenameFromHeader)(r)};this._request=null,"http:"===this._url.protocol?this._request=a.request(f(this._url,t.httpHeaders),e):this._request=s.request(f(this._url,t.httpHeaders),e),this._request.on("error",(t=>{this._storedError=t,this._headersCapability.reject(t)})),this._request.end()}}class p extends h{constructor(t,e,r){super(t),this._httpHeaders={};for(const e in t.httpHeaders){const r=t.httpHeaders[e];void 0!==r&&(this._httpHeaders[e]=r)}this._httpHeaders.Range=`bytes=${e}-${r-1}`;const i=t=>{if(404!==t.statusCode)this._setReadableStream(t);else{const t=new n.MissingPDFException(`Missing PDF "${this._url}".`);this._storedError=t}};this._request=null,"http:"===this._url.protocol?this._request=a.request(f(this._url,this._httpHeaders),i):this._request=s.request(f(this._url,this._httpHeaders),i),this._request.on("error",(t=>{this._storedError=t})),this._request.end()}}class g extends u{constructor(t){super(t);let e=decodeURIComponent(this._url.path);l.test(this._url.href)&&(e=e.replace(/^\//,"")),o.lstat(e,((t,r)=>{if(t)return"ENOENT"===t.code&&(t=new n.MissingPDFException(`Missing PDF "${e}".`)),this._storedError=t,void this._headersCapability.reject(t);this._contentLength=r.size,this._setReadableStream(o.createReadStream(e)),this._headersCapability.resolve()}))}}class m extends h{constructor(t,e,r){super(t);let n=decodeURIComponent(this._url.path);l.test(this._url.href)&&(n=n.replace(/^\//,"")),this._setReadableStream(o.createReadStream(n,{start:e,end:r-1}))}}},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.createResponseStatusError=function(t,e){return 404===t||0===t&&e.startsWith("file:")?new n.MissingPDFException('Missing PDF "'+e+'".'):new n.UnexpectedResponseException("Unexpected server response ("+t+') while retrieving PDF "'+e+'".',t)},e.extractFilenameFromHeader=function(t){const e=t("Content-Disposition");if(e){let t=(0,i.getFilenameFromContentDispositionHeader)(e);if(t.includes("%"))try{t=decodeURIComponent(t)}catch(t){}if(/\.pdf$/i.test(t))return t}return null},e.validateRangeRequestCapabilities=function({getResponseHeader:t,isHttp:e,rangeChunkSize:r,disableRange:i}){(0,n.assert)(r>0,"Range chunk size must be larger than zero");const o={allowRangeRequests:!1,suggestedLength:void 0},a=parseInt(t("Content-Length"),10);return Number.isInteger(a)?(o.suggestedLength=a,a<=2*r||i||!e||"bytes"!==t("Accept-Ranges")||"identity"!==(t("Content-Encoding")||"identity")||(o.allowRangeRequests=!0),o):o},e.validateResponseStatus=function(t){return 200===t||206===t};var n=r(2),i=r(21)},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.getFilenameFromContentDispositionHeader=function(t){let e=!0,r=n("filename\\*","i").exec(t);if(r){r=r[1];let t=a(r);return t=unescape(t),t=s(t),t=c(t),o(t)}if(r=function(t){const e=[];let r;const i=n("filename\\*((?!0\\d)\\d+)(\\*?)","ig");for(;null!==(r=i.exec(t));){let[,t,n,i]=r;if(t=parseInt(t,10),t in e){if(0===t)break}else e[t]=[n,i]}const o=[];for(let t=0;t<e.length&&t in e;++t){let[r,n]=e[t];n=a(n),r&&(n=unescape(n),0===t&&(n=s(n))),o.push(n)}return o.join("")}(t),r)return o(c(r));if(r=n("filename","i").exec(t),r){r=r[1];let t=a(r);return t=c(t),o(t)}function n(t,e){return new RegExp("(?:^|;)\\s*"+t+'\\s*=\\s*([^";\\s][^;\\s]*|"(?:[^"\\\\]|\\\\"?)+"?)',e)}function i(t,r){if(t){if(!/^[\x00-\xFF]+$/.test(r))return r;try{const n=new TextDecoder(t,{fatal:!0}),i=Array.from(r,(function(t){return 255&t.charCodeAt(0)}));r=n.decode(new Uint8Array(i)),e=!1}catch(n){if(/^utf-?8$/i.test(t))try{r=decodeURIComponent(escape(r)),e=!1}catch(t){}}}return r}function o(t){return e&&/[\x80-\xff]/.test(t)&&(t=i("utf-8",t),e&&(t=i("iso-8859-1",t))),t}function a(t){if(t.startsWith('"')){const e=t.slice(1).split('\\"');for(let t=0;t<e.length;++t){const r=e[t].indexOf('"');-1!==r&&(e[t]=e[t].slice(0,r),e.length=t+1),e[t]=e[t].replace(/\\(.)/g,"$1")}t=e.join('"')}return t}function s(t){const e=t.indexOf("'");return-1===e?t:i(t.slice(0,e),t.slice(e+1).replace(/^[^']*'/,""))}function c(t){return!t.startsWith("=?")||/[\x00-\x19\x80-\xff]/.test(t)?t:t.replace(/=\?([\w-]*)\?([QqBb])\?((?:[^?]|\?(?!=))*)\?=/g,(function(t,e,r,n){if("q"===r||"Q"===r)return i(e,n=(n=n.replace(/_/g," ")).replace(/=([0-9a-fA-F]{2})/g,(function(t,e){return String.fromCharCode(parseInt(e,16))})));try{n=atob(n)}catch(t){}return i(e,n)}))}return""}},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.PDFNetworkStream=void 0;var n=r(2),i=r(20);class o{constructor(t,e){this.url=t,e=e||{},this.isHttp=/^https?:/i.test(t),this.httpHeaders=this.isHttp&&e.httpHeaders||{},this.withCredentials=e.withCredentials||!1,this.getXhr=e.getXhr||function(){return new XMLHttpRequest},this.currXhrId=0,this.pendingRequests=Object.create(null)}requestRange(t,e,r){const n={begin:t,end:e};for(const t in r)n[t]=r[t];return this.request(n)}requestFull(t){return this.request(t)}request(t){const e=this.getXhr(),r=this.currXhrId++,n=this.pendingRequests[r]={xhr:e};e.open("GET",this.url),e.withCredentials=this.withCredentials;for(const t in this.httpHeaders){const r=this.httpHeaders[t];void 0!==r&&e.setRequestHeader(t,r)}return this.isHttp&&"begin"in t&&"end"in t?(e.setRequestHeader("Range",`bytes=${t.begin}-${t.end-1}`),n.expectedStatus=206):n.expectedStatus=200,e.responseType="arraybuffer",t.onError&&(e.onerror=function(r){t.onError(e.status)}),e.onreadystatechange=this.onStateChange.bind(this,r),e.onprogress=this.onProgress.bind(this,r),n.onHeadersReceived=t.onHeadersReceived,n.onDone=t.onDone,n.onError=t.onError,n.onProgress=t.onProgress,e.send(null),r}onProgress(t,e){const r=this.pendingRequests[t];r&&r.onProgress&&r.onProgress(e)}onStateChange(t,e){const r=this.pendingRequests[t];if(!r)return;const i=r.xhr;if(i.readyState>=2&&r.onHeadersReceived&&(r.onHeadersReceived(),delete r.onHeadersReceived),4!==i.readyState)return;if(!(t in this.pendingRequests))return;if(delete this.pendingRequests[t],0===i.status&&this.isHttp)return void(r.onError&&r.onError(i.status));const o=i.status||200;if((200!==o||206!==r.expectedStatus)&&o!==r.expectedStatus)return void(r.onError&&r.onError(i.status));const a=function(t){const e=t.response;return"string"!=typeof e?e:(0,n.stringToBytes)(e).buffer}(i);if(206===o){const t=i.getResponseHeader("Content-Range"),e=/bytes (\d+)-(\d+)\/(\d+)/.exec(t);r.onDone({begin:parseInt(e[1],10),chunk:a})}else a?r.onDone({begin:0,chunk:a}):r.onError&&r.onError(i.status)}hasPendingRequests(){for(const t in this.pendingRequests)return!0;return!1}getRequestXhr(t){return this.pendingRequests[t].xhr}isPendingRequest(t){return t in this.pendingRequests}abortAllRequests(){for(const t in this.pendingRequests)this.abortRequest(0|t)}abortRequest(t){const e=this.pendingRequests[t].xhr;delete this.pendingRequests[t],e.abort()}}e.PDFNetworkStream=class{constructor(t){this._source=t,this._manager=new o(t.url,{httpHeaders:t.httpHeaders,withCredentials:t.withCredentials}),this._rangeChunkSize=t.rangeChunkSize,this._fullRequestReader=null,this._rangeRequestReaders=[]}_onRangeRequestReaderClosed(t){const e=this._rangeRequestReaders.indexOf(t);e>=0&&this._rangeRequestReaders.splice(e,1)}getFullReader(){return(0,n.assert)(!this._fullRequestReader,"PDFNetworkStream.getFullReader can only be called once."),this._fullRequestReader=new a(this._manager,this._source),this._fullRequestReader}getRangeReader(t,e){const r=new s(this._manager,t,e);return r.onClosed=this._onRangeRequestReaderClosed.bind(this),this._rangeRequestReaders.push(r),r}cancelAllRequests(t){this._fullRequestReader&&this._fullRequestReader.cancel(t),this._rangeRequestReaders.slice(0).forEach((function(e){e.cancel(t)}))}};class a{constructor(t,e){this._manager=t;const r={onHeadersReceived:this._onHeadersReceived.bind(this),onDone:this._onDone.bind(this),onError:this._onError.bind(this),onProgress:this._onProgress.bind(this)};this._url=e.url,this._fullRequestId=t.requestFull(r),this._headersReceivedCapability=(0,n.createPromiseCapability)(),this._disableRange=e.disableRange||!1,this._contentLength=e.length,this._rangeChunkSize=e.rangeChunkSize,this._rangeChunkSize||this._disableRange||(this._disableRange=!0),this._isStreamingSupported=!1,this._isRangeSupported=!1,this._cachedChunks=[],this._requests=[],this._done=!1,this._storedError=void 0,this._filename=null,this.onProgress=null}_onHeadersReceived(){const t=this._fullRequestId,e=this._manager.getRequestXhr(t),r=t=>e.getResponseHeader(t),{allowRangeRequests:n,suggestedLength:o}=(0,i.validateRangeRequestCapabilities)({getResponseHeader:r,isHttp:this._manager.isHttp,rangeChunkSize:this._rangeChunkSize,disableRange:this._disableRange});n&&(this._isRangeSupported=!0),this._contentLength=o||this._contentLength,this._filename=(0,i.extractFilenameFromHeader)(r),this._isRangeSupported&&this._manager.abortRequest(t),this._headersReceivedCapability.resolve()}_onDone(t){t&&(this._requests.length>0?this._requests.shift().resolve({value:t.chunk,done:!1}):this._cachedChunks.push(t.chunk)),this._done=!0,this._cachedChunks.length>0||(this._requests.forEach((function(t){t.resolve({value:void 0,done:!0})})),this._requests=[])}_onError(t){const e=this._url,r=(0,i.createResponseStatusError)(t,e);this._storedError=r,this._headersReceivedCapability.reject(r),this._requests.forEach((function(t){t.reject(r)})),this._requests=[],this._cachedChunks=[]}_onProgress(t){this.onProgress&&this.onProgress({loaded:t.loaded,total:t.lengthComputable?t.total:this._contentLength})}get filename(){return this._filename}get isRangeSupported(){return this._isRangeSupported}get isStreamingSupported(){return this._isStreamingSupported}get contentLength(){return this._contentLength}get headersReady(){return this._headersReceivedCapability.promise}async read(){if(this._storedError)throw this._storedError;if(this._cachedChunks.length>0)return{value:this._cachedChunks.shift(),done:!1};if(this._done)return{value:void 0,done:!0};const t=(0,n.createPromiseCapability)();return this._requests.push(t),t.promise}cancel(t){this._done=!0,this._headersReceivedCapability.reject(t),this._requests.forEach((function(t){t.resolve({value:void 0,done:!0})})),this._requests=[],this._manager.isPendingRequest(this._fullRequestId)&&this._manager.abortRequest(this._fullRequestId),this._fullRequestReader=null}}class s{constructor(t,e,r){this._manager=t;const n={onDone:this._onDone.bind(this),onProgress:this._onProgress.bind(this)};this._requestId=t.requestRange(e,r,n),this._requests=[],this._queuedChunk=null,this._done=!1,this.onProgress=null,this.onClosed=null}_close(){this.onClosed&&this.onClosed(this)}_onDone(t){const e=t.chunk;this._requests.length>0?this._requests.shift().resolve({value:e,done:!1}):this._queuedChunk=e,this._done=!0,this._requests.forEach((function(t){t.resolve({value:void 0,done:!0})})),this._requests=[],this._close()}_onProgress(t){!this.isStreamingSupported&&this.onProgress&&this.onProgress({loaded:t.loaded})}get isStreamingSupported(){return!1}async read(){if(null!==this._queuedChunk){const t=this._queuedChunk;return this._queuedChunk=null,{value:t,done:!1}}if(this._done)return{value:void 0,done:!0};const t=(0,n.createPromiseCapability)();return this._requests.push(t),t.promise}cancel(t){this._done=!0,this._requests.forEach((function(t){t.resolve({value:void 0,done:!0})})),this._requests=[],this._manager.isPendingRequest(this._requestId)&&this._manager.abortRequest(this._requestId),this._close()}}},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.PDFFetchStream=void 0;var n=r(2),i=r(20);function o(t,e,r){return{method:"GET",headers:t,signal:r&&r.signal,mode:"cors",credentials:e?"include":"same-origin",redirect:"follow"}}function a(t){const e=new Headers;for(const r in t){const n=t[r];void 0!==n&&e.append(r,n)}return e}e.PDFFetchStream=class{constructor(t){this.source=t,this.isHttp=/^https?:/i.test(t.url),this.httpHeaders=this.isHttp&&t.httpHeaders||{},this._fullRequestReader=null,this._rangeRequestReaders=[]}get _progressiveDataLength(){return this._fullRequestReader?this._fullRequestReader._loaded:0}getFullReader(){return(0,n.assert)(!this._fullRequestReader,"PDFFetchStream.getFullReader can only be called once."),this._fullRequestReader=new s(this),this._fullRequestReader}getRangeReader(t,e){if(e<=this._progressiveDataLength)return null;const r=new c(this,t,e);return this._rangeRequestReaders.push(r),r}cancelAllRequests(t){this._fullRequestReader&&this._fullRequestReader.cancel(t),this._rangeRequestReaders.slice(0).forEach((function(e){e.cancel(t)}))}};class s{constructor(t){this._stream=t,this._reader=null,this._loaded=0,this._filename=null;const e=t.source;this._withCredentials=e.withCredentials||!1,this._contentLength=e.length,this._headersCapability=(0,n.createPromiseCapability)(),this._disableRange=e.disableRange||!1,this._rangeChunkSize=e.rangeChunkSize,this._rangeChunkSize||this._disableRange||(this._disableRange=!0),"undefined"!=typeof AbortController&&(this._abortController=new AbortController),this._isStreamingSupported=!e.disableStream,this._isRangeSupported=!e.disableRange,this._headers=a(this._stream.httpHeaders);const r=e.url;fetch(r,o(this._headers,this._withCredentials,this._abortController)).then((t=>{if(!(0,i.validateResponseStatus)(t.status))throw(0,i.createResponseStatusError)(t.status,r);this._reader=t.body.getReader(),this._headersCapability.resolve();const e=e=>t.headers.get(e),{allowRangeRequests:o,suggestedLength:a}=(0,i.validateRangeRequestCapabilities)({getResponseHeader:e,isHttp:this._stream.isHttp,rangeChunkSize:this._rangeChunkSize,disableRange:this._disableRange});this._isRangeSupported=o,this._contentLength=a||this._contentLength,this._filename=(0,i.extractFilenameFromHeader)(e),!this._isStreamingSupported&&this._isRangeSupported&&this.cancel(new n.AbortException("Streaming is disabled."))})).catch(this._headersCapability.reject),this.onProgress=null}get headersReady(){return this._headersCapability.promise}get filename(){return this._filename}get contentLength(){return this._contentLength}get isRangeSupported(){return this._isRangeSupported}get isStreamingSupported(){return this._isStreamingSupported}async read(){await this._headersCapability.promise;const{value:t,done:e}=await this._reader.read();return e?{value:t,done:e}:(this._loaded+=t.byteLength,this.onProgress&&this.onProgress({loaded:this._loaded,total:this._contentLength}),{value:new Uint8Array(t).buffer,done:!1})}cancel(t){this._reader&&this._reader.cancel(t),this._abortController&&this._abortController.abort()}}class c{constructor(t,e,r){this._stream=t,this._reader=null,this._loaded=0;const s=t.source;this._withCredentials=s.withCredentials||!1,this._readCapability=(0,n.createPromiseCapability)(),this._isStreamingSupported=!s.disableStream,"undefined"!=typeof AbortController&&(this._abortController=new AbortController),this._headers=a(this._stream.httpHeaders),this._headers.append("Range",`bytes=${e}-${r-1}`);const c=s.url;fetch(c,o(this._headers,this._withCredentials,this._abortController)).then((t=>{if(!(0,i.validateResponseStatus)(t.status))throw(0,i.createResponseStatusError)(t.status,c);this._readCapability.resolve(),this._reader=t.body.getReader()})),this.onProgress=null}get isStreamingSupported(){return this._isStreamingSupported}async read(){await this._readCapability.promise;const{value:t,done:e}=await this._reader.read();return e?{value:t,done:e}:(this._loaded+=t.byteLength,this.onProgress&&this.onProgress({loaded:this._loaded}),{value:new Uint8Array(t).buffer,done:!1})}cancel(t){this._reader&&this._reader.cancel(t),this._abortController&&this._abortController.abort()}}}])},module.exports=factory()},9748:function(t,e,r){"use strict";r.r(e),r.d(e,{Children:function(){return W},Component:function(){return a.wA},Fragment:function(){return a.HY},PureComponent:function(){return M},StrictMode:function(){return _t},Suspense:function(){return G},SuspenseList:function(){return $},__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED:function(){return ht},cloneElement:function(){return gt},createContext:function(){return a.kr},createElement:function(){return a.az},createFactory:function(){return dt},createPortal:function(){return J},createRef:function(){return a.Vf},default:function(){return bt},findDOMNode:function(){return vt},forwardRef:function(){return j},hydrate:function(){return rt},isValidElement:function(){return pt},lazy:function(){return Y},memo:function(){return I},render:function(){return et},unmountComponentAtNode:function(){return mt},unstable_batchedUpdates:function(){return yt},useCallback:function(){return x},useContext:function(){return S},useDebugValue:function(){return w},useEffect:function(){return v},useErrorBoundary:function(){return C},useImperativeHandle:function(){return b},useLayoutEffect:function(){return y},useMemo:function(){return A},useReducer:function(){return m},useRef:function(){return _},useState:function(){return g},version:function(){return ft}});var n,i,o,a=r(6400),s=0,c=[],l=a.YM.__b,u=a.YM.__r,h=a.YM.diffed,f=a.YM.__c,d=a.YM.unmount;function p(t,e){a.YM.__h&&a.YM.__h(i,t,s||e),s=0;var r=i.__H||(i.__H={__:[],__h:[]});return t>=r.__.length&&r.__.push({}),r.__[t]}function g(t){return s=1,m(O,t)}function m(t,e,r){var o=p(n++,2);return o.t=t,o.__c||(o.__=[r?r(e):O(void 0,e),function(t){var e=o.t(o.__[0],t);o.__[0]!==e&&(o.__=[e,o.__[1]],o.__c.setState({}))}],o.__c=i),o.__}function v(t,e){var r=p(n++,3);!a.YM.__s&&T(r.__H,e)&&(r.__=t,r.__H=e,i.__H.__h.push(r))}function y(t,e){var r=p(n++,4);!a.YM.__s&&T(r.__H,e)&&(r.__=t,r.__H=e,i.__h.push(r))}function _(t){return s=5,A((function(){return{current:t}}),[])}function b(t,e,r){s=6,y((function(){"function"==typeof t?t(e()):t&&(t.current=e())}),null==r?r:r.concat(t))}function A(t,e){var r=p(n++,7);return T(r.__H,e)&&(r.__=t(),r.__H=e,r.__h=t),r.__}function x(t,e){return s=8,A((function(){return t}),e)}function S(t){var e=i.context[t.__c],r=p(n++,9);return r.__c=t,e?(null==r.__&&(r.__=!0,e.sub(i)),e.props.value):t.__}function w(t,e){a.YM.useDebugValue&&a.YM.useDebugValue(e?e(t):t)}function C(t){var e=p(n++,10),r=g();return e.__=t,i.componentDidCatch||(i.componentDidCatch=function(t){e.__&&e.__(t),r[1](t)}),[r[0],function(){r[1](void 0)}]}function E(){c.forEach((function(t){if(t.__P)try{t.__H.__h.forEach(P),t.__H.__h.forEach(R),t.__H.__h=[]}catch(e){t.__H.__h=[],a.YM.__e(e,t.__v)}})),c=[]}a.YM.__b=function(t){i=null,l&&l(t)},a.YM.__r=function(t){u&&u(t),n=0;var e=(i=t.__c).__H;e&&(e.__h.forEach(P),e.__h.forEach(R),e.__h=[])},a.YM.diffed=function(t){h&&h(t);var e=t.__c;e&&e.__H&&e.__H.__h.length&&(1!==c.push(e)&&o===a.YM.requestAnimationFrame||((o=a.YM.requestAnimationFrame)||function(t){var e,r=function(){clearTimeout(n),k&&cancelAnimationFrame(e),setTimeout(t)},n=setTimeout(r,100);k&&(e=requestAnimationFrame(r))})(E)),i=void 0},a.YM.__c=function(t,e){e.some((function(t){try{t.__h.forEach(P),t.__h=t.__h.filter((function(t){return!t.__||R(t)}))}catch(r){e.some((function(t){t.__h&&(t.__h=[])})),e=[],a.YM.__e(r,t.__v)}})),f&&f(t,e)},a.YM.unmount=function(t){d&&d(t);var e=t.__c;if(e&&e.__H)try{e.__H.__.forEach(P)}catch(t){a.YM.__e(t,e.__v)}};var k="function"==typeof requestAnimationFrame;function P(t){var e=i;"function"==typeof t.__c&&t.__c(),i=e}function R(t){var e=i;t.__c=t.__(),i=e}function T(t,e){return!t||t.length!==e.length||e.some((function(e,r){return e!==t[r]}))}function O(t,e){return"function"==typeof e?e(t):e}function L(t,e){for(var r in e)t[r]=e[r];return t}function F(t,e){for(var r in t)if("__source"!==r&&!(r in e))return!0;for(var n in e)if("__source"!==n&&t[n]!==e[n])return!0;return!1}function M(t){this.props=t}function I(t,e){function r(t){var r=this.props.ref,n=r==t.ref;return!n&&r&&(r.call?r(null):r.current=null),e?!e(this.props,t)||!n:F(this.props,t)}function n(e){return this.shouldComponentUpdate=r,(0,a.az)(t,e)}return n.displayName="Memo("+(t.displayName||t.name)+")",n.prototype.isReactComponent=!0,n.__f=!0,n}(M.prototype=new a.wA).isPureReactComponent=!0,M.prototype.shouldComponentUpdate=function(t,e){return F(this.props,t)||F(this.state,e)};var N=a.YM.__b;a.YM.__b=function(t){t.type&&t.type.__f&&t.ref&&(t.props.ref=t.ref,t.ref=null),N&&N(t)};var D="undefined"!=typeof Symbol&&Symbol.for&&Symbol.for("react.forward_ref")||3911;function j(t){function e(e,r){var n=L({},e);return delete n.ref,t(n,(r=e.ref||r)&&("object"!=typeof r||"current"in r)?r:null)}return e.$$typeof=D,e.render=e,e.prototype.isReactComponent=e.__f=!0,e.displayName="ForwardRef("+(t.displayName||t.name)+")",e}var U=function(t,e){return null==t?null:(0,a.bR)((0,a.bR)(t).map(e))},W={map:U,forEach:U,count:function(t){return t?(0,a.bR)(t).length:0},only:function(t){var e=(0,a.bR)(t);if(1!==e.length)throw"Children.only";return e[0]},toArray:a.bR},q=a.YM.__e;function B(t){return t&&(t.__c&&t.__c.__H&&(t.__c.__H.__.forEach((function(t){"function"==typeof t.__c&&t.__c()})),t.__c.__H=null),(t=L({},t)).__c=null,t.__k=t.__k&&t.__k.map(B)),t}function H(t){return t&&(t.__v=null,t.__k=t.__k&&t.__k.map(H)),t}function G(){this.__u=0,this.t=null,this.__b=null}function z(t){var e=t.__.__c;return e&&e.__e&&e.__e(t)}function Y(t){var e,r,n;function i(i){if(e||(e=t()).then((function(t){r=t.default||t}),(function(t){n=t})),n)throw n;if(!r)throw e;return(0,a.az)(r,i)}return i.displayName="Lazy",i.__f=!0,i}function $(){this.u=null,this.o=null}a.YM.__e=function(t,e,r){if(t.then)for(var n,i=e;i=i.__;)if((n=i.__c)&&n.__c)return null==e.__e&&(e.__e=r.__e,e.__k=r.__k),n.__c(t,e);q(t,e,r)},(G.prototype=new a.wA).__c=function(t,e){var r=e.__c,n=this;null==n.t&&(n.t=[]),n.t.push(r);var i=z(n.__v),o=!1,a=function(){o||(o=!0,r.componentWillUnmount=r.__c,i?i(s):s())};r.__c=r.componentWillUnmount,r.componentWillUnmount=function(){a(),r.__c&&r.__c()};var s=function(){var t;if(!--n.__u)for(n.state.__e&&(n.__v.__k[0]=H(n.state.__e)),n.setState({__e:n.__b=null});t=n.t.pop();)t.forceUpdate()},c=!0===e.__h;n.__u++||c||n.setState({__e:n.__b=n.__v.__k[0]}),t.then(a,a)},G.prototype.componentWillUnmount=function(){this.t=[]},G.prototype.render=function(t,e){this.__b&&(this.__v.__k&&(this.__v.__k[0]=B(this.__b)),this.__b=null);var r=e.__e&&(0,a.az)(a.HY,null,t.fallback);return r&&(r.__h=null),[(0,a.az)(a.HY,null,e.__e?null:t.children),r]};var V=function(t,e,r){if(++r[1]===r[0]&&t.o.delete(e),t.props.revealOrder&&("t"!==t.props.revealOrder[0]||!t.o.size))for(r=t.u;r;){for(;r.length>3;)r.pop()();if(r[1]<r[0])break;t.u=r=r[2]}};function X(t){return this.getChildContext=function(){return t.context},t.children}function K(t){var e=this,r=t.i;e.componentWillUnmount=function(){(0,a.sY)(null,e.l),e.l=null,e.i=null},e.i&&e.i!==r&&e.componentWillUnmount(),t.__v?(e.l||(e.i=r,e.l={nodeType:1,parentNode:r,childNodes:[],appendChild:function(t){this.childNodes.push(t),e.i.appendChild(t)},insertBefore:function(t,r){this.childNodes.push(t),e.i.appendChild(t)},removeChild:function(t){this.childNodes.splice(this.childNodes.indexOf(t)>>>1,1),e.i.removeChild(t)}}),(0,a.sY)((0,a.az)(X,{context:e.context},t.__v),e.l)):e.l&&e.componentWillUnmount()}function J(t,e){return(0,a.az)(K,{__v:t,i:e})}($.prototype=new a.wA).__e=function(t){var e=this,r=z(e.__v),n=e.o.get(t);return n[0]++,function(i){var o=function(){e.props.revealOrder?(n.push(i),V(e,t,n)):i()};r?r(o):o()}},$.prototype.render=function(t){this.u=null,this.o=new Map;var e=(0,a.bR)(t.children);t.revealOrder&&"b"===t.revealOrder[0]&&e.reverse();for(var r=e.length;r--;)this.o.set(e[r],this.u=[1,0,this.u]);return t.children},$.prototype.componentDidUpdate=$.prototype.componentDidMount=function(){var t=this;this.o.forEach((function(e,r){V(t,r,e)}))};var Q="undefined"!=typeof Symbol&&Symbol.for&&Symbol.for("react.element")||60103,Z=/^(?:accent|alignment|arabic|baseline|cap|clip(?!PathU)|color|fill|flood|font|glyph(?!R)|horiz|marker(?!H|W|U)|overline|paint|stop|strikethrough|stroke|text(?!L)|underline|unicode|units|v|vector|vert|word|writing|x(?!C))[A-Z]/,tt=function(t){return("undefined"!=typeof Symbol&&"symbol"==typeof Symbol()?/fil|che|rad/i:/fil|che|ra/i).test(t)};function et(t,e,r){return null==e.__k&&(e.textContent=""),(0,a.sY)(t,e),"function"==typeof r&&r(),t?t.__c:null}function rt(t,e,r){return(0,a.ZB)(t,e),"function"==typeof r&&r(),t?t.__c:null}a.wA.prototype.isReactComponent={},["componentWillMount","componentWillReceiveProps","componentWillUpdate"].forEach((function(t){Object.defineProperty(a.wA.prototype,t,{configurable:!0,get:function(){return this["UNSAFE_"+t]},set:function(e){Object.defineProperty(this,t,{configurable:!0,writable:!0,value:e})}})}));var nt=a.YM.event;function it(){}function ot(){return this.cancelBubble}function at(){return this.defaultPrevented}a.YM.event=function(t){return nt&&(t=nt(t)),t.persist=it,t.isPropagationStopped=ot,t.isDefaultPrevented=at,t.nativeEvent=t};var st,ct={configurable:!0,get:function(){return this.class}},lt=a.YM.vnode;a.YM.vnode=function(t){var e=t.type,r=t.props,n=r;if("string"==typeof e){for(var i in n={},r){var o=r[i];"defaultValue"===i&&"value"in r&&null==r.value?i="value":"download"===i&&!0===o?o="":/ondoubleclick/i.test(i)?i="ondblclick":/^onchange(textarea|input)/i.test(i+e)&&!tt(r.type)?i="oninput":/^on(Ani|Tra|Tou|BeforeInp)/.test(i)?i=i.toLowerCase():Z.test(i)?i=i.replace(/[A-Z0-9]/,"-$&").toLowerCase():null===o&&(o=void 0),n[i]=o}"select"==e&&n.multiple&&Array.isArray(n.value)&&(n.value=(0,a.bR)(r.children).forEach((function(t){t.props.selected=-1!=n.value.indexOf(t.props.value)}))),"select"==e&&null!=n.defaultValue&&(n.value=(0,a.bR)(r.children).forEach((function(t){t.props.selected=n.multiple?-1!=n.defaultValue.indexOf(t.props.value):n.defaultValue==t.props.value}))),t.props=n}e&&r.class!=r.className&&(ct.enumerable="className"in r,null!=r.className&&(n.class=r.className),Object.defineProperty(n,"className",ct)),t.$$typeof=Q,lt&&lt(t)};var ut=a.YM.__r;a.YM.__r=function(t){ut&&ut(t),st=t.__c};var ht={ReactCurrentDispatcher:{current:{readContext:function(t){return st.__n[t.__c].props.value}}}},ft="16.8.0";function dt(t){return a.az.bind(null,t)}function pt(t){return!!t&&t.$$typeof===Q}function gt(t){return pt(t)?a.Tm.apply(null,arguments):t}function mt(t){return!!t.__k&&((0,a.sY)(null,t),!0)}function vt(t){return t&&(t.base||1===t.nodeType&&t)||null}var yt=function(t,e){return t(e)},_t=a.HY,bt={useState:g,useReducer:m,useEffect:v,useLayoutEffect:y,useRef:_,useImperativeHandle:b,useMemo:A,useCallback:x,useContext:S,useDebugValue:w,version:"16.8.0",Children:W,render:et,hydrate:rt,unmountComponentAtNode:mt,createPortal:J,createElement:a.az,createContext:a.kr,createFactory:dt,cloneElement:gt,createRef:a.Vf,Fragment:a.HY,isValidElement:pt,findDOMNode:vt,Component:a.wA,PureComponent:M,memo:I,forwardRef:j,unstable_batchedUpdates:yt,StrictMode:a.HY,Suspense:G,SuspenseList:$,lazy:Y,__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED:ht}},6400:function(t,e,r){"use strict";r.d(e,{sY:function(){return D},ZB:function(){return j},az:function(){return p},h:function(){return p},HY:function(){return v},Vf:function(){return m},wA:function(){return y},Tm:function(){return U},kr:function(){return W},bR:function(){return C},YM:function(){return n}});var n,i,o,a,s,c,l={},u=[],h=/acit|ex(?:s|g|n|p|$)|rph|grid|ows|mnc|ntw|ine[ch]|zoo|^ord|itera/i;function f(t,e){for(var r in e)t[r]=e[r];return t}function d(t){var e=t.parentNode;e&&e.removeChild(t)}function p(t,e,r){var n,i,o,a=arguments,s={};for(o in e)"key"==o?n=e[o]:"ref"==o?i=e[o]:s[o]=e[o];if(arguments.length>3)for(r=[r],o=3;o<arguments.length;o++)r.push(a[o]);if(null!=r&&(s.children=r),"function"==typeof t&&null!=t.defaultProps)for(o in t.defaultProps)void 0===s[o]&&(s[o]=t.defaultProps[o]);return g(t,s,n,i,null)}function g(t,e,r,i,o){var a={type:t,props:e,key:r,ref:i,__k:null,__:null,__b:0,__e:null,__d:void 0,__c:null,__h:null,constructor:void 0,__v:null==o?++n.__v:o};return null!=n.vnode&&n.vnode(a),a}function m(){return{current:null}}function v(t){return t.children}function y(t,e){this.props=t,this.context=e}function _(t,e){if(null==e)return t.__?_(t.__,t.__.__k.indexOf(t)+1):null;for(var r;e<t.__k.length;e++)if(null!=(r=t.__k[e])&&null!=r.__e)return r.__e;return"function"==typeof t.type?_(t):null}function b(t){var e,r;if(null!=(t=t.__)&&null!=t.__c){for(t.__e=t.__c.base=null,e=0;e<t.__k.length;e++)if(null!=(r=t.__k[e])&&null!=r.__e){t.__e=t.__c.base=r.__e;break}return b(t)}}function A(t){(!t.__d&&(t.__d=!0)&&i.push(t)&&!x.__r++||a!==n.debounceRendering)&&((a=n.debounceRendering)||o)(x)}function x(){for(var t;x.__r=i.length;)t=i.sort((function(t,e){return t.__v.__b-e.__v.__b})),i=[],t.some((function(t){var e,r,n,i,o,a;t.__d&&(o=(i=(e=t).__v).__e,(a=e.__P)&&(r=[],(n=f({},i)).__v=i.__v+1,O(a,i,n,e.__n,void 0!==a.ownerSVGElement,null!=i.__h?[o]:null,r,null==o?_(i):o,i.__h),L(r,i),i.__e!=o&&b(i)))}))}function S(t,e,r,n,i,o,a,s,c,h){var f,p,m,y,b,A,x,S=n&&n.__k||u,C=S.length;for(c==l&&(c=null!=a?a[0]:C?_(n,0):null),r.__k=[],f=0;f<e.length;f++)if(null!=(y=r.__k[f]=null==(y=e[f])||"boolean"==typeof y?null:"string"==typeof y||"number"==typeof y?g(null,y,null,null,y):Array.isArray(y)?g(v,{children:y},null,null,null):y.__b>0?g(y.type,y.props,y.key,null,y.__v):y)){if(y.__=r,y.__b=r.__b+1,null===(m=S[f])||m&&y.key==m.key&&y.type===m.type)S[f]=void 0;else for(p=0;p<C;p++){if((m=S[p])&&y.key==m.key&&y.type===m.type){S[p]=void 0;break}m=null}O(t,y,m=m||l,i,o,a,s,c,h),b=y.__e,(p=y.ref)&&m.ref!=p&&(x||(x=[]),m.ref&&x.push(m.ref,null,y),x.push(p,y.__c||b,y)),null!=b?(null==A&&(A=b),"function"==typeof y.type&&null!=y.__k&&y.__k===m.__k?y.__d=c=w(y,c,t):c=E(t,y,m,S,a,b,c),h||"option"!==r.type?"function"==typeof r.type&&(r.__d=c):t.value=""):c&&m.__e==c&&c.parentNode!=t&&(c=_(m))}if(r.__e=A,null!=a&&"function"!=typeof r.type)for(f=a.length;f--;)null!=a[f]&&d(a[f]);for(f=C;f--;)null!=S[f]&&("function"==typeof r.type&&null!=S[f].__e&&S[f].__e==r.__d&&(r.__d=_(n,f+1)),I(S[f],S[f]));if(x)for(f=0;f<x.length;f++)M(x[f],x[++f],x[++f])}function w(t,e,r){var n,i;for(n=0;n<t.__k.length;n++)(i=t.__k[n])&&(i.__=t,e="function"==typeof i.type?w(i,e,r):E(r,i,i,t.__k,null,i.__e,e));return e}function C(t,e){return e=e||[],null==t||"boolean"==typeof t||(Array.isArray(t)?t.some((function(t){C(t,e)})):e.push(t)),e}function E(t,e,r,n,i,o,a){var s,c,l;if(void 0!==e.__d)s=e.__d,e.__d=void 0;else if(i==r||o!=a||null==o.parentNode)t:if(null==a||a.parentNode!==t)t.appendChild(o),s=null;else{for(c=a,l=0;(c=c.nextSibling)&&l<n.length;l+=2)if(c==o)break t;t.insertBefore(o,a),s=a}return void 0!==s?s:o.nextSibling}function k(t,e,r){"-"===e[0]?t.setProperty(e,r):t[e]=null==r?"":"number"!=typeof r||h.test(e)?r:r+"px"}function P(t,e,r,n,i){var o,a,s;if(i&&"className"==e&&(e="class"),"style"===e)if("string"==typeof r)t.style.cssText=r;else{if("string"==typeof n&&(t.style.cssText=n=""),n)for(e in n)r&&e in r||k(t.style,e,"");if(r)for(e in r)n&&r[e]===n[e]||k(t.style,e,r[e])}else"o"===e[0]&&"n"===e[1]?(o=e!==(e=e.replace(/Capture$/,"")),(a=e.toLowerCase())in t&&(e=a),e=e.slice(2),t.l||(t.l={}),t.l[e+o]=r,s=o?T:R,r?n||t.addEventListener(e,s,o):t.removeEventListener(e,s,o)):"list"!==e&&"tagName"!==e&&"form"!==e&&"type"!==e&&"size"!==e&&"download"!==e&&"href"!==e&&!i&&e in t?t[e]=null==r?"":r:"function"!=typeof r&&"dangerouslySetInnerHTML"!==e&&(e!==(e=e.replace(/xlink:?/,""))?null==r||!1===r?t.removeAttributeNS("http://www.w3.org/1999/xlink",e.toLowerCase()):t.setAttributeNS("http://www.w3.org/1999/xlink",e.toLowerCase(),r):null==r||!1===r&&!/^ar/.test(e)?t.removeAttribute(e):t.setAttribute(e,r))}function R(t){this.l[t.type+!1](n.event?n.event(t):t)}function T(t){this.l[t.type+!0](n.event?n.event(t):t)}function O(t,e,r,i,o,a,s,c,l){var u,h,d,p,g,m,_,b,A,x,w,C=e.type;if(void 0!==e.constructor)return null;null!=r.__h&&(l=r.__h,c=e.__e=r.__e,e.__h=null,a=[c]),(u=n.__b)&&u(e);try{t:if("function"==typeof C){if(b=e.props,A=(u=C.contextType)&&i[u.__c],x=u?A?A.props.value:u.__:i,r.__c?_=(h=e.__c=r.__c).__=h.__E:("prototype"in C&&C.prototype.render?e.__c=h=new C(b,x):(e.__c=h=new y(b,x),h.constructor=C,h.render=N),A&&A.sub(h),h.props=b,h.state||(h.state={}),h.context=x,h.__n=i,d=h.__d=!0,h.__h=[]),null==h.__s&&(h.__s=h.state),null!=C.getDerivedStateFromProps&&(h.__s==h.state&&(h.__s=f({},h.__s)),f(h.__s,C.getDerivedStateFromProps(b,h.__s))),p=h.props,g=h.state,d)null==C.getDerivedStateFromProps&&null!=h.componentWillMount&&h.componentWillMount(),null!=h.componentDidMount&&h.__h.push(h.componentDidMount);else{if(null==C.getDerivedStateFromProps&&b!==p&&null!=h.componentWillReceiveProps&&h.componentWillReceiveProps(b,x),!h.__e&&null!=h.shouldComponentUpdate&&!1===h.shouldComponentUpdate(b,h.__s,x)||e.__v===r.__v){h.props=b,h.state=h.__s,e.__v!==r.__v&&(h.__d=!1),h.__v=e,e.__e=r.__e,e.__k=r.__k,h.__h.length&&s.push(h);break t}null!=h.componentWillUpdate&&h.componentWillUpdate(b,h.__s,x),null!=h.componentDidUpdate&&h.__h.push((function(){h.componentDidUpdate(p,g,m)}))}h.context=x,h.props=b,h.state=h.__s,(u=n.__r)&&u(e),h.__d=!1,h.__v=e,h.__P=t,u=h.render(h.props,h.state,h.context),h.state=h.__s,null!=h.getChildContext&&(i=f(f({},i),h.getChildContext())),d||null==h.getSnapshotBeforeUpdate||(m=h.getSnapshotBeforeUpdate(p,g)),w=null!=u&&u.type===v&&null==u.key?u.props.children:u,S(t,Array.isArray(w)?w:[w],e,r,i,o,a,s,c,l),h.base=e.__e,e.__h=null,h.__h.length&&s.push(h),_&&(h.__E=h.__=null),h.__e=!1}else null==a&&e.__v===r.__v?(e.__k=r.__k,e.__e=r.__e):e.__e=F(r.__e,e,r,i,o,a,s,l);(u=n.diffed)&&u(e)}catch(t){e.__v=null,(l||null!=a)&&(e.__e=c,e.__h=!!l,a[a.indexOf(c)]=null),n.__e(t,e,r)}}function L(t,e){n.__c&&n.__c(e,t),t.some((function(e){try{t=e.__h,e.__h=[],t.some((function(t){t.call(e)}))}catch(t){n.__e(t,e.__v)}}))}function F(t,e,r,n,i,o,a,s){var c,h,f,d,p,g=r.props,m=e.props;if(i="svg"===e.type||i,null!=o)for(c=0;c<o.length;c++)if(null!=(h=o[c])&&((null===e.type?3===h.nodeType:h.localName===e.type)||t==h)){t=h,o[c]=null;break}if(null==t){if(null===e.type)return document.createTextNode(m);t=i?document.createElementNS("http://www.w3.org/2000/svg",e.type):document.createElement(e.type,m.is&&{is:m.is}),o=null,s=!1}if(null===e.type)g===m||s&&t.data===m||(t.data=m);else{if(null!=o&&(o=u.slice.call(t.childNodes)),f=(g=r.props||l).dangerouslySetInnerHTML,d=m.dangerouslySetInnerHTML,!s){if(null!=o)for(g={},p=0;p<t.attributes.length;p++)g[t.attributes[p].name]=t.attributes[p].value;(d||f)&&(d&&(f&&d.__html==f.__html||d.__html===t.innerHTML)||(t.innerHTML=d&&d.__html||""))}(function(t,e,r,n,i){var o;for(o in r)"children"===o||"key"===o||o in e||P(t,o,null,r[o],n);for(o in e)i&&"function"!=typeof e[o]||"children"===o||"key"===o||"value"===o||"checked"===o||r[o]===e[o]||P(t,o,e[o],r[o],n)})(t,m,g,i,s),d?e.__k=[]:(c=e.props.children,S(t,Array.isArray(c)?c:[c],e,r,n,"foreignObject"!==e.type&&i,o,a,l,s)),s||("value"in m&&void 0!==(c=m.value)&&(c!==t.value||"progress"===e.type&&!c)&&P(t,"value",c,g.value,!1),"checked"in m&&void 0!==(c=m.checked)&&c!==t.checked&&P(t,"checked",c,g.checked,!1))}return t}function M(t,e,r){try{"function"==typeof t?t(e):t.current=e}catch(t){n.__e(t,r)}}function I(t,e,r){var i,o,a;if(n.unmount&&n.unmount(t),(i=t.ref)&&(i.current&&i.current!==t.__e||M(i,null,e)),r||"function"==typeof t.type||(r=null!=(o=t.__e)),t.__e=t.__d=void 0,null!=(i=t.__c)){if(i.componentWillUnmount)try{i.componentWillUnmount()}catch(t){n.__e(t,e)}i.base=i.__P=null}if(i=t.__k)for(a=0;a<i.length;a++)i[a]&&I(i[a],e,r);null!=o&&d(o)}function N(t,e,r){return this.constructor(t,r)}function D(t,e,r){var i,o,a;n.__&&n.__(t,e),o=(i=r===s)?null:r&&r.__k||e.__k,t=p(v,null,[t]),a=[],O(e,(i?e:r||e).__k=t,o||l,l,void 0!==e.ownerSVGElement,r&&!i?[r]:o?null:e.childNodes.length?u.slice.call(e.childNodes):null,a,r||l,i),L(a,t)}function j(t,e){D(t,e,s)}function U(t,e,r){var n,i,o,a=arguments,s=f({},t.props);for(o in e)"key"==o?n=e[o]:"ref"==o?i=e[o]:s[o]=e[o];if(arguments.length>3)for(r=[r],o=3;o<arguments.length;o++)r.push(a[o]);return null!=r&&(s.children=r),g(t.type,s,n||t.key,i||t.ref,null)}function W(t,e){var r={__c:e="__cC"+c++,__:t,Consumer:function(t,e){return t.children(e)},Provider:function(t){var r,n;return this.getChildContext||(r=[],(n={})[e]=this,this.getChildContext=function(){return n},this.shouldComponentUpdate=function(t){this.props.value!==t.value&&r.some(A)},this.sub=function(t){r.push(t);var e=t.componentWillUnmount;t.componentWillUnmount=function(){r.splice(r.indexOf(t),1),e&&e.call(t)}}),t.children}};return r.Provider.__=r.Consumer.contextType=r}n={__e:function(t,e){for(var r,n,i,o=e.__h;e=e.__;)if((r=e.__c)&&!r.__)try{if((n=r.constructor)&&null!=n.getDerivedStateFromError&&(r.setState(n.getDerivedStateFromError(t)),i=r.__d),null!=r.componentDidCatch&&(r.componentDidCatch(t),i=r.__d),i)return e.__h=o,r.__E=r}catch(e){t=e}throw t},__v:0},y.prototype.setState=function(t,e){var r;r=null!=this.__s&&this.__s!==this.state?this.__s:this.__s=f({},this.state),"function"==typeof t&&(t=t(f({},r),this.props)),t&&f(r,t),null!=t&&this.__v&&(e&&this.__h.push(e),A(this))},y.prototype.forceUpdate=function(t){this.__v&&(this.__e=!0,t&&this.__h.push(t),A(this))},y.prototype.render=v,i=[],o="function"==typeof Promise?Promise.prototype.then.bind(Promise.resolve()):setTimeout,x.__r=0,s=l,c=0},5666:function(t){var e=function(t){"use strict";var e,r=Object.prototype,n=r.hasOwnProperty,i="function"==typeof Symbol?Symbol:{},o=i.iterator||"@@iterator",a=i.asyncIterator||"@@asyncIterator",s=i.toStringTag||"@@toStringTag";function c(t,e,r){return Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}),t[e]}try{c({},"")}catch(t){c=function(t,e,r){return t[e]=r}}function l(t,e,r,n){var i=e&&e.prototype instanceof m?e:m,o=Object.create(i.prototype),a=new P(n||[]);return o._invoke=function(t,e,r){var n=h;return function(i,o){if(n===d)throw new Error("Generator is already running");if(n===p){if("throw"===i)throw o;return T()}for(r.method=i,r.arg=o;;){var a=r.delegate;if(a){var s=C(a,r);if(s){if(s===g)continue;return s}}if("next"===r.method)r.sent=r._sent=r.arg;else if("throw"===r.method){if(n===h)throw n=p,r.arg;r.dispatchException(r.arg)}else"return"===r.method&&r.abrupt("return",r.arg);n=d;var c=u(t,e,r);if("normal"===c.type){if(n=r.done?p:f,c.arg===g)continue;return{value:c.arg,done:r.done}}"throw"===c.type&&(n=p,r.method="throw",r.arg=c.arg)}}}(t,r,a),o}function u(t,e,r){try{return{type:"normal",arg:t.call(e,r)}}catch(t){return{type:"throw",arg:t}}}t.wrap=l;var h="suspendedStart",f="suspendedYield",d="executing",p="completed",g={};function m(){}function v(){}function y(){}var _={};_[o]=function(){return this};var b=Object.getPrototypeOf,A=b&&b(b(R([])));A&&A!==r&&n.call(A,o)&&(_=A);var x=y.prototype=m.prototype=Object.create(_);function S(t){["next","throw","return"].forEach((function(e){c(t,e,(function(t){return this._invoke(e,t)}))}))}function w(t,e){function r(i,o,a,s){var c=u(t[i],t,o);if("throw"!==c.type){var l=c.arg,h=l.value;return h&&"object"==typeof h&&n.call(h,"__await")?e.resolve(h.__await).then((function(t){r("next",t,a,s)}),(function(t){r("throw",t,a,s)})):e.resolve(h).then((function(t){l.value=t,a(l)}),(function(t){return r("throw",t,a,s)}))}s(c.arg)}var i;this._invoke=function(t,n){function o(){return new e((function(e,i){r(t,n,e,i)}))}return i=i?i.then(o,o):o()}}function C(t,r){var n=t.iterator[r.method];if(n===e){if(r.delegate=null,"throw"===r.method){if(t.iterator.return&&(r.method="return",r.arg=e,C(t,r),"throw"===r.method))return g;r.method="throw",r.arg=new TypeError("The iterator does not provide a 'throw' method")}return g}var i=u(n,t.iterator,r.arg);if("throw"===i.type)return r.method="throw",r.arg=i.arg,r.delegate=null,g;var o=i.arg;return o?o.done?(r[t.resultName]=o.value,r.next=t.nextLoc,"return"!==r.method&&(r.method="next",r.arg=e),r.delegate=null,g):o:(r.method="throw",r.arg=new TypeError("iterator result is not an object"),r.delegate=null,g)}function E(t){var e={tryLoc:t[0]};1 in t&&(e.catchLoc=t[1]),2 in t&&(e.finallyLoc=t[2],e.afterLoc=t[3]),this.tryEntries.push(e)}function k(t){var e=t.completion||{};e.type="normal",delete e.arg,t.completion=e}function P(t){this.tryEntries=[{tryLoc:"root"}],t.forEach(E,this),this.reset(!0)}function R(t){if(t){var r=t[o];if(r)return r.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var i=-1,a=function r(){for(;++i<t.length;)if(n.call(t,i))return r.value=t[i],r.done=!1,r;return r.value=e,r.done=!0,r};return a.next=a}}return{next:T}}function T(){return{value:e,done:!0}}return v.prototype=x.constructor=y,y.constructor=v,v.displayName=c(y,s,"GeneratorFunction"),t.isGeneratorFunction=function(t){var e="function"==typeof t&&t.constructor;return!!e&&(e===v||"GeneratorFunction"===(e.displayName||e.name))},t.mark=function(t){return Object.setPrototypeOf?Object.setPrototypeOf(t,y):(t.__proto__=y,c(t,s,"GeneratorFunction")),t.prototype=Object.create(x),t},t.awrap=function(t){return{__await:t}},S(w.prototype),w.prototype[a]=function(){return this},t.AsyncIterator=w,t.async=function(e,r,n,i,o){void 0===o&&(o=Promise);var a=new w(l(e,r,n,i),o);return t.isGeneratorFunction(r)?a:a.next().then((function(t){return t.done?t.value:a.next()}))},S(x),c(x,s,"Generator"),x[o]=function(){return this},x.toString=function(){return"[object Generator]"},t.keys=function(t){var e=[];for(var r in t)e.push(r);return e.reverse(),function r(){for(;e.length;){var n=e.pop();if(n in t)return r.value=n,r.done=!1,r}return r.done=!0,r}},t.values=R,P.prototype={constructor:P,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=e,this.done=!1,this.delegate=null,this.method="next",this.arg=e,this.tryEntries.forEach(k),!t)for(var r in this)"t"===r.charAt(0)&&n.call(this,r)&&!isNaN(+r.slice(1))&&(this[r]=e)},stop:function(){this.done=!0;var t=this.tryEntries[0].completion;if("throw"===t.type)throw t.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var r=this;function i(n,i){return s.type="throw",s.arg=t,r.next=n,i&&(r.method="next",r.arg=e),!!i}for(var o=this.tryEntries.length-1;o>=0;--o){var a=this.tryEntries[o],s=a.completion;if("root"===a.tryLoc)return i("end");if(a.tryLoc<=this.prev){var c=n.call(a,"catchLoc"),l=n.call(a,"finallyLoc");if(c&&l){if(this.prev<a.catchLoc)return i(a.catchLoc,!0);if(this.prev<a.finallyLoc)return i(a.finallyLoc)}else if(c){if(this.prev<a.catchLoc)return i(a.catchLoc,!0)}else{if(!l)throw new Error("try statement without catch or finally");if(this.prev<a.finallyLoc)return i(a.finallyLoc)}}}},abrupt:function(t,e){for(var r=this.tryEntries.length-1;r>=0;--r){var i=this.tryEntries[r];if(i.tryLoc<=this.prev&&n.call(i,"finallyLoc")&&this.prev<i.finallyLoc){var o=i;break}}o&&("break"===t||"continue"===t)&&o.tryLoc<=e&&e<=o.finallyLoc&&(o=null);var a=o?o.completion:{};return a.type=t,a.arg=e,o?(this.method="next",this.next=o.finallyLoc,g):this.complete(a)},complete:function(t,e){if("throw"===t.type)throw t.arg;return"break"===t.type||"continue"===t.type?this.next=t.arg:"return"===t.type?(this.rval=this.arg=t.arg,this.method="return",this.next="end"):"normal"===t.type&&e&&(this.next=e),g},finish:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var r=this.tryEntries[e];if(r.finallyLoc===t)return this.complete(r.completion,r.afterLoc),k(r),g}},catch:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var r=this.tryEntries[e];if(r.tryLoc===t){var n=r.completion;if("throw"===n.type){var i=n.arg;k(r)}return i}}throw new Error("illegal catch attempt")},delegateYield:function(t,r,n){return this.delegate={iterator:R(t),resultName:r,nextLoc:n},"next"===this.method&&(this.arg=e),g}},t}(t.exports);try{regeneratorRuntime=e}catch(t){Function("r","regeneratorRuntime = r")(e)}},2993:function(){},8618:function(){},120:function(){},6355:function(){},5804:function(){}},__webpack_module_cache__={};function __webpack_require__(t){if(__webpack_module_cache__[t])return __webpack_module_cache__[t].exports;var e=__webpack_module_cache__[t]={exports:{}};return __webpack_modules__[t].call(e.exports,e,e.exports,__webpack_require__),e.exports}__webpack_require__.d=function(t,e){for(var r in e)__webpack_require__.o(e,r)&&!__webpack_require__.o(t,r)&&Object.defineProperty(t,r,{enumerable:!0,get:e[r]})},__webpack_require__.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(t){if("object"==typeof window)return window}}(),__webpack_require__.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},__webpack_require__.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},function(){"use strict";var t={};__webpack_require__.r(t);var e=__webpack_require__(6400),r=__webpack_require__(4141);__webpack_require__(8594),__webpack_require__(5666),t.pdfjs&&(t.pdfjs.GlobalWorkerOptions.workerSrc="//cdnjs.cloudflare.com/ajax/libs/pdf.js/"+t.pdfjs.version+"/pdf.worker.js");var n="https://ojisan-toybox.github.io/universal-pdf-component/example.pdf";(0,e.sY)((0,e.h)((function(){return(0,e.h)("div",null,(0,e.h)("h1",null,"iframe"),(0,e.h)("iframe",{src:n,scrolling:"no"},(0,e.h)("p",null,"It appears your web browser doesn't support iframes.")),(0,e.h)("h1",null,"object"),(0,e.h)("object",{data:n,type:"application/pdf"},(0,e.h)("p",null,"It appears you don't have Adobe Reader or PDF support in this web browser. ",(0,e.h)("a",{href:n},"Click here to download the PDF"),". Or"," ",(0,e.h)("a",{href:"http://get.adobe.com/reader/",target:"_blank"},"click here to install Adobe Reader"),"."),(0,e.h)("embed",{src:n,type:"application/pdf"})),(0,e.h)("h1",null,"object and embed"),(0,e.h)("object",{data:n,type:"application/pdf"},(0,e.h)("p",null,"It appears you don't have Adobe Reader or PDF support in this web browser. ",(0,e.h)("a",{href:n},"Click here to download the PDF"),". Or"," ",(0,e.h)("a",{href:"http://get.adobe.com/reader/",target:"_blank"},"click here to install Adobe Reader"),"."),(0,e.h)("embed",{src:n,type:"application/pdf"})),(0,e.h)("h1",null,"embed"),(0,e.h)("embed",{width:"500",height:"375",src:n,type:"application/pdf"}),(0,e.h)("h1",null,"google drive"),(0,e.h)("embed",{src:"https://drive.google.com/viewerng/\nviewer?embedded=true&url="+n,width:"500",height:"375"}),(0,e.h)("h1",null,"react-pdf"),(0,e.h)(t.Document,{file:n},(0,e.h)(t.Page,{pageNumber:1})),(0,e.h)("h1",null,"react-pd-viewer"),(0,e.h)(r.Viewer,{fileUrl:n}))}),null),document.body),t.pdfjs&&(t.pdfjs.GlobalWorkerOptions.workerSrc="//cdnjs.cloudflare.com/ajax/libs/pdf.js/"+t.pdfjs.version+"/pdf.worker.js");var i="https://ojisan-toybox.github.io/universal-pdf-component/example.pdf";(0,e.sY)((0,e.h)((function(){return(0,e.h)("div",null,(0,e.h)("h1",null,"iframe"),(0,e.h)("iframe",{src:i,scrolling:"no"},(0,e.h)("p",null,"It appears your web browser doesn't support iframes.")),(0,e.h)("h1",null,"object"),(0,e.h)("object",{data:i,type:"application/pdf"},(0,e.h)("p",null,"It appears you don't have Adobe Reader or PDF support in this web browser. ",(0,e.h)("a",{href:i},"Click here to download the PDF"),". Or"," ",(0,e.h)("a",{href:"http://get.adobe.com/reader/",target:"_blank"},"click here to install Adobe Reader"),"."),(0,e.h)("embed",{src:i,type:"application/pdf"})),(0,e.h)("h1",null,"object and embed"),(0,e.h)("object",{data:i,type:"application/pdf"},(0,e.h)("p",null,"It appears you don't have Adobe Reader or PDF support in this web browser. ",(0,e.h)("a",{href:i},"Click here to download the PDF"),". Or"," ",(0,e.h)("a",{href:"http://get.adobe.com/reader/",target:"_blank"},"click here to install Adobe Reader"),"."),(0,e.h)("embed",{src:i,type:"application/pdf"})),(0,e.h)("h1",null,"embed"),(0,e.h)("embed",{width:"500",height:"375",src:i,type:"application/pdf"}),(0,e.h)("h1",null,"google drive"),(0,e.h)("embed",{src:"https://drive.google.com/viewerng/\nviewer?embedded=true&url="+i,width:"500",height:"375"}),(0,e.h)("h1",null,"react-pdf"),(0,e.h)(t.Document,{file:i},(0,e.h)(t.Page,{pageNumber:1})),(0,e.h)("h1",null,"react-pd-viewer"),(0,e.h)(r.Viewer,{fileUrl:i}))}),null),document.body)}()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly91bml2ZXJzYWwtcGRmLWNvbXBvbmVudC8uL25vZGVfbW9kdWxlcy9AcmVhY3QtcGRmLXZpZXdlci9jb3JlL2xpYi9janMvY29yZS5taW4uanMiLCJ3ZWJwYWNrOi8vdW5pdmVyc2FsLXBkZi1jb21wb25lbnQvLi9ub2RlX21vZHVsZXMvQHJlYWN0LXBkZi12aWV3ZXIvY29yZS9saWIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdW5pdmVyc2FsLXBkZi1jb21wb25lbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9lcy9pbmRleC5qcyIsIndlYnBhY2s6Ly91bml2ZXJzYWwtcGRmLWNvbXBvbmVudC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9hLWZ1bmN0aW9uLmpzIiwid2VicGFjazovL3VuaXZlcnNhbC1wZGYtY29tcG9uZW50Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2EtcG9zc2libGUtcHJvdG90eXBlLmpzIiwid2VicGFjazovL3VuaXZlcnNhbC1wZGYtY29tcG9uZW50Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2FkZC10by11bnNjb3BhYmxlcy5qcyIsIndlYnBhY2s6Ly91bml2ZXJzYWwtcGRmLWNvbXBvbmVudC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9hZHZhbmNlLXN0cmluZy1pbmRleC5qcyIsIndlYnBhY2s6Ly91bml2ZXJzYWwtcGRmLWNvbXBvbmVudC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9hbi1pbnN0YW5jZS5qcyIsIndlYnBhY2s6Ly91bml2ZXJzYWwtcGRmLWNvbXBvbmVudC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9hbi1vYmplY3QuanMiLCJ3ZWJwYWNrOi8vdW5pdmVyc2FsLXBkZi1jb21wb25lbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvYXJyYXktYnVmZmVyLW5hdGl2ZS5qcyIsIndlYnBhY2s6Ly91bml2ZXJzYWwtcGRmLWNvbXBvbmVudC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9hcnJheS1idWZmZXItdmlldy1jb3JlLmpzIiwid2VicGFjazovL3VuaXZlcnNhbC1wZGYtY29tcG9uZW50Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2FycmF5LWJ1ZmZlci5qcyIsIndlYnBhY2s6Ly91bml2ZXJzYWwtcGRmLWNvbXBvbmVudC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9hcnJheS1jb3B5LXdpdGhpbi5qcyIsIndlYnBhY2s6Ly91bml2ZXJzYWwtcGRmLWNvbXBvbmVudC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9hcnJheS1maWxsLmpzIiwid2VicGFjazovL3VuaXZlcnNhbC1wZGYtY29tcG9uZW50Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2FycmF5LWZvci1lYWNoLmpzIiwid2VicGFjazovL3VuaXZlcnNhbC1wZGYtY29tcG9uZW50Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2FycmF5LWZyb20uanMiLCJ3ZWJwYWNrOi8vdW5pdmVyc2FsLXBkZi1jb21wb25lbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvYXJyYXktaW5jbHVkZXMuanMiLCJ3ZWJwYWNrOi8vdW5pdmVyc2FsLXBkZi1jb21wb25lbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvYXJyYXktaXRlcmF0aW9uLmpzIiwid2VicGFjazovL3VuaXZlcnNhbC1wZGYtY29tcG9uZW50Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2FycmF5LWxhc3QtaW5kZXgtb2YuanMiLCJ3ZWJwYWNrOi8vdW5pdmVyc2FsLXBkZi1jb21wb25lbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvYXJyYXktbWV0aG9kLWhhcy1zcGVjaWVzLXN1cHBvcnQuanMiLCJ3ZWJwYWNrOi8vdW5pdmVyc2FsLXBkZi1jb21wb25lbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvYXJyYXktbWV0aG9kLWlzLXN0cmljdC5qcyIsIndlYnBhY2s6Ly91bml2ZXJzYWwtcGRmLWNvbXBvbmVudC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9hcnJheS1tZXRob2QtdXNlcy10by1sZW5ndGguanMiLCJ3ZWJwYWNrOi8vdW5pdmVyc2FsLXBkZi1jb21wb25lbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvYXJyYXktcmVkdWNlLmpzIiwid2VicGFjazovL3VuaXZlcnNhbC1wZGYtY29tcG9uZW50Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2FycmF5LXNwZWNpZXMtY3JlYXRlLmpzIiwid2VicGFjazovL3VuaXZlcnNhbC1wZGYtY29tcG9uZW50Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2NhbGwtd2l0aC1zYWZlLWl0ZXJhdGlvbi1jbG9zaW5nLmpzIiwid2VicGFjazovL3VuaXZlcnNhbC1wZGYtY29tcG9uZW50Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2NoZWNrLWNvcnJlY3RuZXNzLW9mLWl0ZXJhdGlvbi5qcyIsIndlYnBhY2s6Ly91bml2ZXJzYWwtcGRmLWNvbXBvbmVudC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9jbGFzc29mLXJhdy5qcyIsIndlYnBhY2s6Ly91bml2ZXJzYWwtcGRmLWNvbXBvbmVudC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9jbGFzc29mLmpzIiwid2VicGFjazovL3VuaXZlcnNhbC1wZGYtY29tcG9uZW50Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2NvbGxlY3Rpb24tc3Ryb25nLmpzIiwid2VicGFjazovL3VuaXZlcnNhbC1wZGYtY29tcG9uZW50Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2NvbGxlY3Rpb24td2Vhay5qcyIsIndlYnBhY2s6Ly91bml2ZXJzYWwtcGRmLWNvbXBvbmVudC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9jb2xsZWN0aW9uLmpzIiwid2VicGFjazovL3VuaXZlcnNhbC1wZGYtY29tcG9uZW50Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2NvcHktY29uc3RydWN0b3ItcHJvcGVydGllcy5qcyIsIndlYnBhY2s6Ly91bml2ZXJzYWwtcGRmLWNvbXBvbmVudC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9jb3JyZWN0LWlzLXJlZ2V4cC1sb2dpYy5qcyIsIndlYnBhY2s6Ly91bml2ZXJzYWwtcGRmLWNvbXBvbmVudC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9jb3JyZWN0LXByb3RvdHlwZS1nZXR0ZXIuanMiLCJ3ZWJwYWNrOi8vdW5pdmVyc2FsLXBkZi1jb21wb25lbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvY3JlYXRlLWh0bWwuanMiLCJ3ZWJwYWNrOi8vdW5pdmVyc2FsLXBkZi1jb21wb25lbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvY3JlYXRlLWl0ZXJhdG9yLWNvbnN0cnVjdG9yLmpzIiwid2VicGFjazovL3VuaXZlcnNhbC1wZGYtY29tcG9uZW50Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2NyZWF0ZS1ub24tZW51bWVyYWJsZS1wcm9wZXJ0eS5qcyIsIndlYnBhY2s6Ly91bml2ZXJzYWwtcGRmLWNvbXBvbmVudC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9jcmVhdGUtcHJvcGVydHktZGVzY3JpcHRvci5qcyIsIndlYnBhY2s6Ly91bml2ZXJzYWwtcGRmLWNvbXBvbmVudC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9jcmVhdGUtcHJvcGVydHkuanMiLCJ3ZWJwYWNrOi8vdW5pdmVyc2FsLXBkZi1jb21wb25lbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZGF0ZS10by1pc28tc3RyaW5nLmpzIiwid2VicGFjazovL3VuaXZlcnNhbC1wZGYtY29tcG9uZW50Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2RhdGUtdG8tcHJpbWl0aXZlLmpzIiwid2VicGFjazovL3VuaXZlcnNhbC1wZGYtY29tcG9uZW50Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2RlZmluZS1pdGVyYXRvci5qcyIsIndlYnBhY2s6Ly91bml2ZXJzYWwtcGRmLWNvbXBvbmVudC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9kZWZpbmUtd2VsbC1rbm93bi1zeW1ib2wuanMiLCJ3ZWJwYWNrOi8vdW5pdmVyc2FsLXBkZi1jb21wb25lbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZGVzY3JpcHRvcnMuanMiLCJ3ZWJwYWNrOi8vdW5pdmVyc2FsLXBkZi1jb21wb25lbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZG9jdW1lbnQtY3JlYXRlLWVsZW1lbnQuanMiLCJ3ZWJwYWNrOi8vdW5pdmVyc2FsLXBkZi1jb21wb25lbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZG9tLWl0ZXJhYmxlcy5qcyIsIndlYnBhY2s6Ly91bml2ZXJzYWwtcGRmLWNvbXBvbmVudC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9lbmdpbmUtaXMtaW9zLmpzIiwid2VicGFjazovL3VuaXZlcnNhbC1wZGYtY29tcG9uZW50Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2VuZ2luZS1pcy1ub2RlLmpzIiwid2VicGFjazovL3VuaXZlcnNhbC1wZGYtY29tcG9uZW50Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2VuZ2luZS1pcy13ZWJvcy13ZWJraXQuanMiLCJ3ZWJwYWNrOi8vdW5pdmVyc2FsLXBkZi1jb21wb25lbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZW5naW5lLXVzZXItYWdlbnQuanMiLCJ3ZWJwYWNrOi8vdW5pdmVyc2FsLXBkZi1jb21wb25lbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZW5naW5lLXY4LXZlcnNpb24uanMiLCJ3ZWJwYWNrOi8vdW5pdmVyc2FsLXBkZi1jb21wb25lbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZW51bS1idWcta2V5cy5qcyIsIndlYnBhY2s6Ly91bml2ZXJzYWwtcGRmLWNvbXBvbmVudC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9leHBvcnQuanMiLCJ3ZWJwYWNrOi8vdW5pdmVyc2FsLXBkZi1jb21wb25lbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZmFpbHMuanMiLCJ3ZWJwYWNrOi8vdW5pdmVyc2FsLXBkZi1jb21wb25lbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZml4LXJlZ2V4cC13ZWxsLWtub3duLXN5bWJvbC1sb2dpYy5qcyIsIndlYnBhY2s6Ly91bml2ZXJzYWwtcGRmLWNvbXBvbmVudC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9mbGF0dGVuLWludG8tYXJyYXkuanMiLCJ3ZWJwYWNrOi8vdW5pdmVyc2FsLXBkZi1jb21wb25lbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZnJlZXppbmcuanMiLCJ3ZWJwYWNrOi8vdW5pdmVyc2FsLXBkZi1jb21wb25lbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZnVuY3Rpb24tYmluZC1jb250ZXh0LmpzIiwid2VicGFjazovL3VuaXZlcnNhbC1wZGYtY29tcG9uZW50Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2Z1bmN0aW9uLWJpbmQuanMiLCJ3ZWJwYWNrOi8vdW5pdmVyc2FsLXBkZi1jb21wb25lbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZ2V0LWJ1aWx0LWluLmpzIiwid2VicGFjazovL3VuaXZlcnNhbC1wZGYtY29tcG9uZW50Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2dldC1pdGVyYXRvci1tZXRob2QuanMiLCJ3ZWJwYWNrOi8vdW5pdmVyc2FsLXBkZi1jb21wb25lbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZ2V0LWl0ZXJhdG9yLmpzIiwid2VicGFjazovL3VuaXZlcnNhbC1wZGYtY29tcG9uZW50Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2dldC1zdWJzdGl0dXRpb24uanMiLCJ3ZWJwYWNrOi8vdW5pdmVyc2FsLXBkZi1jb21wb25lbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZ2xvYmFsLmpzIiwid2VicGFjazovL3VuaXZlcnNhbC1wZGYtY29tcG9uZW50Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2hhcy5qcyIsIndlYnBhY2s6Ly91bml2ZXJzYWwtcGRmLWNvbXBvbmVudC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9oaWRkZW4ta2V5cy5qcyIsIndlYnBhY2s6Ly91bml2ZXJzYWwtcGRmLWNvbXBvbmVudC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9ob3N0LXJlcG9ydC1lcnJvcnMuanMiLCJ3ZWJwYWNrOi8vdW5pdmVyc2FsLXBkZi1jb21wb25lbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaHRtbC5qcyIsIndlYnBhY2s6Ly91bml2ZXJzYWwtcGRmLWNvbXBvbmVudC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9pZTgtZG9tLWRlZmluZS5qcyIsIndlYnBhY2s6Ly91bml2ZXJzYWwtcGRmLWNvbXBvbmVudC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9pZWVlNzU0LmpzIiwid2VicGFjazovL3VuaXZlcnNhbC1wZGYtY29tcG9uZW50Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2luZGV4ZWQtb2JqZWN0LmpzIiwid2VicGFjazovL3VuaXZlcnNhbC1wZGYtY29tcG9uZW50Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2luaGVyaXQtaWYtcmVxdWlyZWQuanMiLCJ3ZWJwYWNrOi8vdW5pdmVyc2FsLXBkZi1jb21wb25lbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaW5zcGVjdC1zb3VyY2UuanMiLCJ3ZWJwYWNrOi8vdW5pdmVyc2FsLXBkZi1jb21wb25lbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaW50ZXJuYWwtbWV0YWRhdGEuanMiLCJ3ZWJwYWNrOi8vdW5pdmVyc2FsLXBkZi1jb21wb25lbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaW50ZXJuYWwtc3RhdGUuanMiLCJ3ZWJwYWNrOi8vdW5pdmVyc2FsLXBkZi1jb21wb25lbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaXMtYXJyYXktaXRlcmF0b3ItbWV0aG9kLmpzIiwid2VicGFjazovL3VuaXZlcnNhbC1wZGYtY29tcG9uZW50Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2lzLWFycmF5LmpzIiwid2VicGFjazovL3VuaXZlcnNhbC1wZGYtY29tcG9uZW50Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2lzLWZvcmNlZC5qcyIsIndlYnBhY2s6Ly91bml2ZXJzYWwtcGRmLWNvbXBvbmVudC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9pcy1pbnRlZ2VyLmpzIiwid2VicGFjazovL3VuaXZlcnNhbC1wZGYtY29tcG9uZW50Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2lzLW9iamVjdC5qcyIsIndlYnBhY2s6Ly91bml2ZXJzYWwtcGRmLWNvbXBvbmVudC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9pcy1wdXJlLmpzIiwid2VicGFjazovL3VuaXZlcnNhbC1wZGYtY29tcG9uZW50Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2lzLXJlZ2V4cC5qcyIsIndlYnBhY2s6Ly91bml2ZXJzYWwtcGRmLWNvbXBvbmVudC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9pdGVyYXRlLmpzIiwid2VicGFjazovL3VuaXZlcnNhbC1wZGYtY29tcG9uZW50Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2l0ZXJhdG9yLWNsb3NlLmpzIiwid2VicGFjazovL3VuaXZlcnNhbC1wZGYtY29tcG9uZW50Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2l0ZXJhdG9ycy1jb3JlLmpzIiwid2VicGFjazovL3VuaXZlcnNhbC1wZGYtY29tcG9uZW50Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2l0ZXJhdG9ycy5qcyIsIndlYnBhY2s6Ly91bml2ZXJzYWwtcGRmLWNvbXBvbmVudC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9tYXRoLWV4cG0xLmpzIiwid2VicGFjazovL3VuaXZlcnNhbC1wZGYtY29tcG9uZW50Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL21hdGgtZnJvdW5kLmpzIiwid2VicGFjazovL3VuaXZlcnNhbC1wZGYtY29tcG9uZW50Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL21hdGgtbG9nMXAuanMiLCJ3ZWJwYWNrOi8vdW5pdmVyc2FsLXBkZi1jb21wb25lbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvbWF0aC1zaWduLmpzIiwid2VicGFjazovL3VuaXZlcnNhbC1wZGYtY29tcG9uZW50Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL21pY3JvdGFzay5qcyIsIndlYnBhY2s6Ly91bml2ZXJzYWwtcGRmLWNvbXBvbmVudC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9uYXRpdmUtcHJvbWlzZS1jb25zdHJ1Y3Rvci5qcyIsIndlYnBhY2s6Ly91bml2ZXJzYWwtcGRmLWNvbXBvbmVudC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9uYXRpdmUtc3ltYm9sLmpzIiwid2VicGFjazovL3VuaXZlcnNhbC1wZGYtY29tcG9uZW50Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL25hdGl2ZS11cmwuanMiLCJ3ZWJwYWNrOi8vdW5pdmVyc2FsLXBkZi1jb21wb25lbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvbmF0aXZlLXdlYWstbWFwLmpzIiwid2VicGFjazovL3VuaXZlcnNhbC1wZGYtY29tcG9uZW50Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL25ldy1wcm9taXNlLWNhcGFiaWxpdHkuanMiLCJ3ZWJwYWNrOi8vdW5pdmVyc2FsLXBkZi1jb21wb25lbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvbm90LWEtcmVnZXhwLmpzIiwid2VicGFjazovL3VuaXZlcnNhbC1wZGYtY29tcG9uZW50Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL251bWJlci1pcy1maW5pdGUuanMiLCJ3ZWJwYWNrOi8vdW5pdmVyc2FsLXBkZi1jb21wb25lbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvbnVtYmVyLXBhcnNlLWZsb2F0LmpzIiwid2VicGFjazovL3VuaXZlcnNhbC1wZGYtY29tcG9uZW50Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL251bWJlci1wYXJzZS1pbnQuanMiLCJ3ZWJwYWNrOi8vdW5pdmVyc2FsLXBkZi1jb21wb25lbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvb2JqZWN0LWFzc2lnbi5qcyIsIndlYnBhY2s6Ly91bml2ZXJzYWwtcGRmLWNvbXBvbmVudC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9vYmplY3QtY3JlYXRlLmpzIiwid2VicGFjazovL3VuaXZlcnNhbC1wZGYtY29tcG9uZW50Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL29iamVjdC1kZWZpbmUtcHJvcGVydGllcy5qcyIsIndlYnBhY2s6Ly91bml2ZXJzYWwtcGRmLWNvbXBvbmVudC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9vYmplY3QtZGVmaW5lLXByb3BlcnR5LmpzIiwid2VicGFjazovL3VuaXZlcnNhbC1wZGYtY29tcG9uZW50Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL29iamVjdC1nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3IuanMiLCJ3ZWJwYWNrOi8vdW5pdmVyc2FsLXBkZi1jb21wb25lbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvb2JqZWN0LWdldC1vd24tcHJvcGVydHktbmFtZXMtZXh0ZXJuYWwuanMiLCJ3ZWJwYWNrOi8vdW5pdmVyc2FsLXBkZi1jb21wb25lbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvb2JqZWN0LWdldC1vd24tcHJvcGVydHktbmFtZXMuanMiLCJ3ZWJwYWNrOi8vdW5pdmVyc2FsLXBkZi1jb21wb25lbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvb2JqZWN0LWdldC1vd24tcHJvcGVydHktc3ltYm9scy5qcyIsIndlYnBhY2s6Ly91bml2ZXJzYWwtcGRmLWNvbXBvbmVudC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9vYmplY3QtZ2V0LXByb3RvdHlwZS1vZi5qcyIsIndlYnBhY2s6Ly91bml2ZXJzYWwtcGRmLWNvbXBvbmVudC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9vYmplY3Qta2V5cy1pbnRlcm5hbC5qcyIsIndlYnBhY2s6Ly91bml2ZXJzYWwtcGRmLWNvbXBvbmVudC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9vYmplY3Qta2V5cy5qcyIsIndlYnBhY2s6Ly91bml2ZXJzYWwtcGRmLWNvbXBvbmVudC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9vYmplY3QtcHJvcGVydHktaXMtZW51bWVyYWJsZS5qcyIsIndlYnBhY2s6Ly91bml2ZXJzYWwtcGRmLWNvbXBvbmVudC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9vYmplY3QtcHJvdG90eXBlLWFjY2Vzc29ycy1mb3JjZWQuanMiLCJ3ZWJwYWNrOi8vdW5pdmVyc2FsLXBkZi1jb21wb25lbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvb2JqZWN0LXNldC1wcm90b3R5cGUtb2YuanMiLCJ3ZWJwYWNrOi8vdW5pdmVyc2FsLXBkZi1jb21wb25lbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvb2JqZWN0LXRvLWFycmF5LmpzIiwid2VicGFjazovL3VuaXZlcnNhbC1wZGYtY29tcG9uZW50Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL29iamVjdC10by1zdHJpbmcuanMiLCJ3ZWJwYWNrOi8vdW5pdmVyc2FsLXBkZi1jb21wb25lbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvb3duLWtleXMuanMiLCJ3ZWJwYWNrOi8vdW5pdmVyc2FsLXBkZi1jb21wb25lbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvcGF0aC5qcyIsIndlYnBhY2s6Ly91bml2ZXJzYWwtcGRmLWNvbXBvbmVudC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9wZXJmb3JtLmpzIiwid2VicGFjazovL3VuaXZlcnNhbC1wZGYtY29tcG9uZW50Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3Byb21pc2UtcmVzb2x2ZS5qcyIsIndlYnBhY2s6Ly91bml2ZXJzYWwtcGRmLWNvbXBvbmVudC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9yZWRlZmluZS1hbGwuanMiLCJ3ZWJwYWNrOi8vdW5pdmVyc2FsLXBkZi1jb21wb25lbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvcmVkZWZpbmUuanMiLCJ3ZWJwYWNrOi8vdW5pdmVyc2FsLXBkZi1jb21wb25lbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvcmVnZXhwLWV4ZWMtYWJzdHJhY3QuanMiLCJ3ZWJwYWNrOi8vdW5pdmVyc2FsLXBkZi1jb21wb25lbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvcmVnZXhwLWV4ZWMuanMiLCJ3ZWJwYWNrOi8vdW5pdmVyc2FsLXBkZi1jb21wb25lbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvcmVnZXhwLWZsYWdzLmpzIiwid2VicGFjazovL3VuaXZlcnNhbC1wZGYtY29tcG9uZW50Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3JlZ2V4cC1zdGlja3ktaGVscGVycy5qcyIsIndlYnBhY2s6Ly91bml2ZXJzYWwtcGRmLWNvbXBvbmVudC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9yZXF1aXJlLW9iamVjdC1jb2VyY2libGUuanMiLCJ3ZWJwYWNrOi8vdW5pdmVyc2FsLXBkZi1jb21wb25lbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvc2FtZS12YWx1ZS5qcyIsIndlYnBhY2s6Ly91bml2ZXJzYWwtcGRmLWNvbXBvbmVudC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9zZXQtZ2xvYmFsLmpzIiwid2VicGFjazovL3VuaXZlcnNhbC1wZGYtY29tcG9uZW50Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3NldC1zcGVjaWVzLmpzIiwid2VicGFjazovL3VuaXZlcnNhbC1wZGYtY29tcG9uZW50Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3NldC10by1zdHJpbmctdGFnLmpzIiwid2VicGFjazovL3VuaXZlcnNhbC1wZGYtY29tcG9uZW50Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3NoYXJlZC1rZXkuanMiLCJ3ZWJwYWNrOi8vdW5pdmVyc2FsLXBkZi1jb21wb25lbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvc2hhcmVkLXN0b3JlLmpzIiwid2VicGFjazovL3VuaXZlcnNhbC1wZGYtY29tcG9uZW50Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3NoYXJlZC5qcyIsIndlYnBhY2s6Ly91bml2ZXJzYWwtcGRmLWNvbXBvbmVudC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9zcGVjaWVzLWNvbnN0cnVjdG9yLmpzIiwid2VicGFjazovL3VuaXZlcnNhbC1wZGYtY29tcG9uZW50Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3N0cmluZy1odG1sLWZvcmNlZC5qcyIsIndlYnBhY2s6Ly91bml2ZXJzYWwtcGRmLWNvbXBvbmVudC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9zdHJpbmctbXVsdGlieXRlLmpzIiwid2VicGFjazovL3VuaXZlcnNhbC1wZGYtY29tcG9uZW50Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3N0cmluZy1wYWQtd2Via2l0LWJ1Zy5qcyIsIndlYnBhY2s6Ly91bml2ZXJzYWwtcGRmLWNvbXBvbmVudC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9zdHJpbmctcGFkLmpzIiwid2VicGFjazovL3VuaXZlcnNhbC1wZGYtY29tcG9uZW50Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3N0cmluZy1wdW55Y29kZS10by1hc2NpaS5qcyIsIndlYnBhY2s6Ly91bml2ZXJzYWwtcGRmLWNvbXBvbmVudC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9zdHJpbmctcmVwZWF0LmpzIiwid2VicGFjazovL3VuaXZlcnNhbC1wZGYtY29tcG9uZW50Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3N0cmluZy10cmltLWZvcmNlZC5qcyIsIndlYnBhY2s6Ly91bml2ZXJzYWwtcGRmLWNvbXBvbmVudC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9zdHJpbmctdHJpbS5qcyIsIndlYnBhY2s6Ly91bml2ZXJzYWwtcGRmLWNvbXBvbmVudC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy90YXNrLmpzIiwid2VicGFjazovL3VuaXZlcnNhbC1wZGYtY29tcG9uZW50Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3RoaXMtbnVtYmVyLXZhbHVlLmpzIiwid2VicGFjazovL3VuaXZlcnNhbC1wZGYtY29tcG9uZW50Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3RvLWFic29sdXRlLWluZGV4LmpzIiwid2VicGFjazovL3VuaXZlcnNhbC1wZGYtY29tcG9uZW50Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3RvLWluZGV4LmpzIiwid2VicGFjazovL3VuaXZlcnNhbC1wZGYtY29tcG9uZW50Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3RvLWluZGV4ZWQtb2JqZWN0LmpzIiwid2VicGFjazovL3VuaXZlcnNhbC1wZGYtY29tcG9uZW50Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3RvLWludGVnZXIuanMiLCJ3ZWJwYWNrOi8vdW5pdmVyc2FsLXBkZi1jb21wb25lbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvdG8tbGVuZ3RoLmpzIiwid2VicGFjazovL3VuaXZlcnNhbC1wZGYtY29tcG9uZW50Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3RvLW9iamVjdC5qcyIsIndlYnBhY2s6Ly91bml2ZXJzYWwtcGRmLWNvbXBvbmVudC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy90by1vZmZzZXQuanMiLCJ3ZWJwYWNrOi8vdW5pdmVyc2FsLXBkZi1jb21wb25lbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvdG8tcG9zaXRpdmUtaW50ZWdlci5qcyIsIndlYnBhY2s6Ly91bml2ZXJzYWwtcGRmLWNvbXBvbmVudC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy90by1wcmltaXRpdmUuanMiLCJ3ZWJwYWNrOi8vdW5pdmVyc2FsLXBkZi1jb21wb25lbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvdG8tc3RyaW5nLXRhZy1zdXBwb3J0LmpzIiwid2VicGFjazovL3VuaXZlcnNhbC1wZGYtY29tcG9uZW50Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3R5cGVkLWFycmF5LWNvbnN0cnVjdG9yLmpzIiwid2VicGFjazovL3VuaXZlcnNhbC1wZGYtY29tcG9uZW50Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3R5cGVkLWFycmF5LWNvbnN0cnVjdG9ycy1yZXF1aXJlLXdyYXBwZXJzLmpzIiwid2VicGFjazovL3VuaXZlcnNhbC1wZGYtY29tcG9uZW50Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3R5cGVkLWFycmF5LWZyb20uanMiLCJ3ZWJwYWNrOi8vdW5pdmVyc2FsLXBkZi1jb21wb25lbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvdWlkLmpzIiwid2VicGFjazovL3VuaXZlcnNhbC1wZGYtY29tcG9uZW50Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3VzZS1zeW1ib2wtYXMtdWlkLmpzIiwid2VicGFjazovL3VuaXZlcnNhbC1wZGYtY29tcG9uZW50Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sLXdyYXBwZWQuanMiLCJ3ZWJwYWNrOi8vdW5pdmVyc2FsLXBkZi1jb21wb25lbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wuanMiLCJ3ZWJwYWNrOi8vdW5pdmVyc2FsLXBkZi1jb21wb25lbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvd2hpdGVzcGFjZXMuanMiLCJ3ZWJwYWNrOi8vdW5pdmVyc2FsLXBkZi1jb21wb25lbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLmFnZ3JlZ2F0ZS1lcnJvci5qcyIsIndlYnBhY2s6Ly91bml2ZXJzYWwtcGRmLWNvbXBvbmVudC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuYXJyYXktYnVmZmVyLmNvbnN0cnVjdG9yLmpzIiwid2VicGFjazovL3VuaXZlcnNhbC1wZGYtY29tcG9uZW50Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5hcnJheS1idWZmZXIuaXMtdmlldy5qcyIsIndlYnBhY2s6Ly91bml2ZXJzYWwtcGRmLWNvbXBvbmVudC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuYXJyYXktYnVmZmVyLnNsaWNlLmpzIiwid2VicGFjazovL3VuaXZlcnNhbC1wZGYtY29tcG9uZW50Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5jb25jYXQuanMiLCJ3ZWJwYWNrOi8vdW5pdmVyc2FsLXBkZi1jb21wb25lbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LmNvcHktd2l0aGluLmpzIiwid2VicGFjazovL3VuaXZlcnNhbC1wZGYtY29tcG9uZW50Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5ldmVyeS5qcyIsIndlYnBhY2s6Ly91bml2ZXJzYWwtcGRmLWNvbXBvbmVudC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuZmlsbC5qcyIsIndlYnBhY2s6Ly91bml2ZXJzYWwtcGRmLWNvbXBvbmVudC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuZmlsdGVyLmpzIiwid2VicGFjazovL3VuaXZlcnNhbC1wZGYtY29tcG9uZW50Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5maW5kLWluZGV4LmpzIiwid2VicGFjazovL3VuaXZlcnNhbC1wZGYtY29tcG9uZW50Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5maW5kLmpzIiwid2VicGFjazovL3VuaXZlcnNhbC1wZGYtY29tcG9uZW50Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5mbGF0LW1hcC5qcyIsIndlYnBhY2s6Ly91bml2ZXJzYWwtcGRmLWNvbXBvbmVudC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuZmxhdC5qcyIsIndlYnBhY2s6Ly91bml2ZXJzYWwtcGRmLWNvbXBvbmVudC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuZm9yLWVhY2guanMiLCJ3ZWJwYWNrOi8vdW5pdmVyc2FsLXBkZi1jb21wb25lbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LmZyb20uanMiLCJ3ZWJwYWNrOi8vdW5pdmVyc2FsLXBkZi1jb21wb25lbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LmluY2x1ZGVzLmpzIiwid2VicGFjazovL3VuaXZlcnNhbC1wZGYtY29tcG9uZW50Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5pbmRleC1vZi5qcyIsIndlYnBhY2s6Ly91bml2ZXJzYWwtcGRmLWNvbXBvbmVudC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuaXMtYXJyYXkuanMiLCJ3ZWJwYWNrOi8vdW5pdmVyc2FsLXBkZi1jb21wb25lbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5Lml0ZXJhdG9yLmpzIiwid2VicGFjazovL3VuaXZlcnNhbC1wZGYtY29tcG9uZW50Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5qb2luLmpzIiwid2VicGFjazovL3VuaXZlcnNhbC1wZGYtY29tcG9uZW50Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5sYXN0LWluZGV4LW9mLmpzIiwid2VicGFjazovL3VuaXZlcnNhbC1wZGYtY29tcG9uZW50Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5tYXAuanMiLCJ3ZWJwYWNrOi8vdW5pdmVyc2FsLXBkZi1jb21wb25lbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5Lm9mLmpzIiwid2VicGFjazovL3VuaXZlcnNhbC1wZGYtY29tcG9uZW50Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5yZWR1Y2UtcmlnaHQuanMiLCJ3ZWJwYWNrOi8vdW5pdmVyc2FsLXBkZi1jb21wb25lbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LnJlZHVjZS5qcyIsIndlYnBhY2s6Ly91bml2ZXJzYWwtcGRmLWNvbXBvbmVudC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkucmV2ZXJzZS5qcyIsIndlYnBhY2s6Ly91bml2ZXJzYWwtcGRmLWNvbXBvbmVudC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuc2xpY2UuanMiLCJ3ZWJwYWNrOi8vdW5pdmVyc2FsLXBkZi1jb21wb25lbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LnNvbWUuanMiLCJ3ZWJwYWNrOi8vdW5pdmVyc2FsLXBkZi1jb21wb25lbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LnNvcnQuanMiLCJ3ZWJwYWNrOi8vdW5pdmVyc2FsLXBkZi1jb21wb25lbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LnNwZWNpZXMuanMiLCJ3ZWJwYWNrOi8vdW5pdmVyc2FsLXBkZi1jb21wb25lbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LnNwbGljZS5qcyIsIndlYnBhY2s6Ly91bml2ZXJzYWwtcGRmLWNvbXBvbmVudC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkudW5zY29wYWJsZXMuZmxhdC1tYXAuanMiLCJ3ZWJwYWNrOi8vdW5pdmVyc2FsLXBkZi1jb21wb25lbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LnVuc2NvcGFibGVzLmZsYXQuanMiLCJ3ZWJwYWNrOi8vdW5pdmVyc2FsLXBkZi1jb21wb25lbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLmRhdGEtdmlldy5qcyIsIndlYnBhY2s6Ly91bml2ZXJzYWwtcGRmLWNvbXBvbmVudC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuZGF0ZS5ub3cuanMiLCJ3ZWJwYWNrOi8vdW5pdmVyc2FsLXBkZi1jb21wb25lbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLmRhdGUudG8taXNvLXN0cmluZy5qcyIsIndlYnBhY2s6Ly91bml2ZXJzYWwtcGRmLWNvbXBvbmVudC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuZGF0ZS50by1qc29uLmpzIiwid2VicGFjazovL3VuaXZlcnNhbC1wZGYtY29tcG9uZW50Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5kYXRlLnRvLXByaW1pdGl2ZS5qcyIsIndlYnBhY2s6Ly91bml2ZXJzYWwtcGRmLWNvbXBvbmVudC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuZGF0ZS50by1zdHJpbmcuanMiLCJ3ZWJwYWNrOi8vdW5pdmVyc2FsLXBkZi1jb21wb25lbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLmZ1bmN0aW9uLmJpbmQuanMiLCJ3ZWJwYWNrOi8vdW5pdmVyc2FsLXBkZi1jb21wb25lbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLmZ1bmN0aW9uLmhhcy1pbnN0YW5jZS5qcyIsIndlYnBhY2s6Ly91bml2ZXJzYWwtcGRmLWNvbXBvbmVudC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuZnVuY3Rpb24ubmFtZS5qcyIsIndlYnBhY2s6Ly91bml2ZXJzYWwtcGRmLWNvbXBvbmVudC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuZ2xvYmFsLXRoaXMuanMiLCJ3ZWJwYWNrOi8vdW5pdmVyc2FsLXBkZi1jb21wb25lbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLmpzb24uc3RyaW5naWZ5LmpzIiwid2VicGFjazovL3VuaXZlcnNhbC1wZGYtY29tcG9uZW50Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5qc29uLnRvLXN0cmluZy10YWcuanMiLCJ3ZWJwYWNrOi8vdW5pdmVyc2FsLXBkZi1jb21wb25lbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLm1hcC5qcyIsIndlYnBhY2s6Ly91bml2ZXJzYWwtcGRmLWNvbXBvbmVudC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMubWF0aC5hY29zaC5qcyIsIndlYnBhY2s6Ly91bml2ZXJzYWwtcGRmLWNvbXBvbmVudC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMubWF0aC5hc2luaC5qcyIsIndlYnBhY2s6Ly91bml2ZXJzYWwtcGRmLWNvbXBvbmVudC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMubWF0aC5hdGFuaC5qcyIsIndlYnBhY2s6Ly91bml2ZXJzYWwtcGRmLWNvbXBvbmVudC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMubWF0aC5jYnJ0LmpzIiwid2VicGFjazovL3VuaXZlcnNhbC1wZGYtY29tcG9uZW50Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5tYXRoLmNsejMyLmpzIiwid2VicGFjazovL3VuaXZlcnNhbC1wZGYtY29tcG9uZW50Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5tYXRoLmNvc2guanMiLCJ3ZWJwYWNrOi8vdW5pdmVyc2FsLXBkZi1jb21wb25lbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLm1hdGguZXhwbTEuanMiLCJ3ZWJwYWNrOi8vdW5pdmVyc2FsLXBkZi1jb21wb25lbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLm1hdGguZnJvdW5kLmpzIiwid2VicGFjazovL3VuaXZlcnNhbC1wZGYtY29tcG9uZW50Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5tYXRoLmh5cG90LmpzIiwid2VicGFjazovL3VuaXZlcnNhbC1wZGYtY29tcG9uZW50Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5tYXRoLmltdWwuanMiLCJ3ZWJwYWNrOi8vdW5pdmVyc2FsLXBkZi1jb21wb25lbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLm1hdGgubG9nMTAuanMiLCJ3ZWJwYWNrOi8vdW5pdmVyc2FsLXBkZi1jb21wb25lbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLm1hdGgubG9nMXAuanMiLCJ3ZWJwYWNrOi8vdW5pdmVyc2FsLXBkZi1jb21wb25lbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLm1hdGgubG9nMi5qcyIsIndlYnBhY2s6Ly91bml2ZXJzYWwtcGRmLWNvbXBvbmVudC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMubWF0aC5zaWduLmpzIiwid2VicGFjazovL3VuaXZlcnNhbC1wZGYtY29tcG9uZW50Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5tYXRoLnNpbmguanMiLCJ3ZWJwYWNrOi8vdW5pdmVyc2FsLXBkZi1jb21wb25lbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLm1hdGgudGFuaC5qcyIsIndlYnBhY2s6Ly91bml2ZXJzYWwtcGRmLWNvbXBvbmVudC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMubWF0aC50by1zdHJpbmctdGFnLmpzIiwid2VicGFjazovL3VuaXZlcnNhbC1wZGYtY29tcG9uZW50Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5tYXRoLnRydW5jLmpzIiwid2VicGFjazovL3VuaXZlcnNhbC1wZGYtY29tcG9uZW50Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5udW1iZXIuY29uc3RydWN0b3IuanMiLCJ3ZWJwYWNrOi8vdW5pdmVyc2FsLXBkZi1jb21wb25lbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLm51bWJlci5lcHNpbG9uLmpzIiwid2VicGFjazovL3VuaXZlcnNhbC1wZGYtY29tcG9uZW50Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5udW1iZXIuaXMtZmluaXRlLmpzIiwid2VicGFjazovL3VuaXZlcnNhbC1wZGYtY29tcG9uZW50Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5udW1iZXIuaXMtaW50ZWdlci5qcyIsIndlYnBhY2s6Ly91bml2ZXJzYWwtcGRmLWNvbXBvbmVudC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMubnVtYmVyLmlzLW5hbi5qcyIsIndlYnBhY2s6Ly91bml2ZXJzYWwtcGRmLWNvbXBvbmVudC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMubnVtYmVyLmlzLXNhZmUtaW50ZWdlci5qcyIsIndlYnBhY2s6Ly91bml2ZXJzYWwtcGRmLWNvbXBvbmVudC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMubnVtYmVyLm1heC1zYWZlLWludGVnZXIuanMiLCJ3ZWJwYWNrOi8vdW5pdmVyc2FsLXBkZi1jb21wb25lbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLm51bWJlci5taW4tc2FmZS1pbnRlZ2VyLmpzIiwid2VicGFjazovL3VuaXZlcnNhbC1wZGYtY29tcG9uZW50Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5udW1iZXIucGFyc2UtZmxvYXQuanMiLCJ3ZWJwYWNrOi8vdW5pdmVyc2FsLXBkZi1jb21wb25lbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLm51bWJlci5wYXJzZS1pbnQuanMiLCJ3ZWJwYWNrOi8vdW5pdmVyc2FsLXBkZi1jb21wb25lbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLm51bWJlci50by1maXhlZC5qcyIsIndlYnBhY2s6Ly91bml2ZXJzYWwtcGRmLWNvbXBvbmVudC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMubnVtYmVyLnRvLXByZWNpc2lvbi5qcyIsIndlYnBhY2s6Ly91bml2ZXJzYWwtcGRmLWNvbXBvbmVudC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMub2JqZWN0LmFzc2lnbi5qcyIsIndlYnBhY2s6Ly91bml2ZXJzYWwtcGRmLWNvbXBvbmVudC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMub2JqZWN0LmNyZWF0ZS5qcyIsIndlYnBhY2s6Ly91bml2ZXJzYWwtcGRmLWNvbXBvbmVudC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMub2JqZWN0LmRlZmluZS1nZXR0ZXIuanMiLCJ3ZWJwYWNrOi8vdW5pdmVyc2FsLXBkZi1jb21wb25lbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLm9iamVjdC5kZWZpbmUtcHJvcGVydGllcy5qcyIsIndlYnBhY2s6Ly91bml2ZXJzYWwtcGRmLWNvbXBvbmVudC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMub2JqZWN0LmRlZmluZS1wcm9wZXJ0eS5qcyIsIndlYnBhY2s6Ly91bml2ZXJzYWwtcGRmLWNvbXBvbmVudC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMub2JqZWN0LmRlZmluZS1zZXR0ZXIuanMiLCJ3ZWJwYWNrOi8vdW5pdmVyc2FsLXBkZi1jb21wb25lbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLm9iamVjdC5lbnRyaWVzLmpzIiwid2VicGFjazovL3VuaXZlcnNhbC1wZGYtY29tcG9uZW50Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5vYmplY3QuZnJlZXplLmpzIiwid2VicGFjazovL3VuaXZlcnNhbC1wZGYtY29tcG9uZW50Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5vYmplY3QuZnJvbS1lbnRyaWVzLmpzIiwid2VicGFjazovL3VuaXZlcnNhbC1wZGYtY29tcG9uZW50Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5vYmplY3QuZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9yLmpzIiwid2VicGFjazovL3VuaXZlcnNhbC1wZGYtY29tcG9uZW50Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5vYmplY3QuZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9ycy5qcyIsIndlYnBhY2s6Ly91bml2ZXJzYWwtcGRmLWNvbXBvbmVudC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMub2JqZWN0LmdldC1vd24tcHJvcGVydHktbmFtZXMuanMiLCJ3ZWJwYWNrOi8vdW5pdmVyc2FsLXBkZi1jb21wb25lbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLm9iamVjdC5nZXQtcHJvdG90eXBlLW9mLmpzIiwid2VicGFjazovL3VuaXZlcnNhbC1wZGYtY29tcG9uZW50Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5vYmplY3QuaXMtZXh0ZW5zaWJsZS5qcyIsIndlYnBhY2s6Ly91bml2ZXJzYWwtcGRmLWNvbXBvbmVudC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMub2JqZWN0LmlzLWZyb3plbi5qcyIsIndlYnBhY2s6Ly91bml2ZXJzYWwtcGRmLWNvbXBvbmVudC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMub2JqZWN0LmlzLXNlYWxlZC5qcyIsIndlYnBhY2s6Ly91bml2ZXJzYWwtcGRmLWNvbXBvbmVudC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMub2JqZWN0LmlzLmpzIiwid2VicGFjazovL3VuaXZlcnNhbC1wZGYtY29tcG9uZW50Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5vYmplY3Qua2V5cy5qcyIsIndlYnBhY2s6Ly91bml2ZXJzYWwtcGRmLWNvbXBvbmVudC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMub2JqZWN0Lmxvb2t1cC1nZXR0ZXIuanMiLCJ3ZWJwYWNrOi8vdW5pdmVyc2FsLXBkZi1jb21wb25lbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLm9iamVjdC5sb29rdXAtc2V0dGVyLmpzIiwid2VicGFjazovL3VuaXZlcnNhbC1wZGYtY29tcG9uZW50Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5vYmplY3QucHJldmVudC1leHRlbnNpb25zLmpzIiwid2VicGFjazovL3VuaXZlcnNhbC1wZGYtY29tcG9uZW50Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5vYmplY3Quc2VhbC5qcyIsIndlYnBhY2s6Ly91bml2ZXJzYWwtcGRmLWNvbXBvbmVudC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMub2JqZWN0LnNldC1wcm90b3R5cGUtb2YuanMiLCJ3ZWJwYWNrOi8vdW5pdmVyc2FsLXBkZi1jb21wb25lbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLm9iamVjdC50by1zdHJpbmcuanMiLCJ3ZWJwYWNrOi8vdW5pdmVyc2FsLXBkZi1jb21wb25lbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLm9iamVjdC52YWx1ZXMuanMiLCJ3ZWJwYWNrOi8vdW5pdmVyc2FsLXBkZi1jb21wb25lbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnBhcnNlLWZsb2F0LmpzIiwid2VicGFjazovL3VuaXZlcnNhbC1wZGYtY29tcG9uZW50Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5wYXJzZS1pbnQuanMiLCJ3ZWJwYWNrOi8vdW5pdmVyc2FsLXBkZi1jb21wb25lbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnByb21pc2UuYWxsLXNldHRsZWQuanMiLCJ3ZWJwYWNrOi8vdW5pdmVyc2FsLXBkZi1jb21wb25lbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnByb21pc2UuYW55LmpzIiwid2VicGFjazovL3VuaXZlcnNhbC1wZGYtY29tcG9uZW50Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5wcm9taXNlLmZpbmFsbHkuanMiLCJ3ZWJwYWNrOi8vdW5pdmVyc2FsLXBkZi1jb21wb25lbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnByb21pc2UuanMiLCJ3ZWJwYWNrOi8vdW5pdmVyc2FsLXBkZi1jb21wb25lbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnJlZmxlY3QuYXBwbHkuanMiLCJ3ZWJwYWNrOi8vdW5pdmVyc2FsLXBkZi1jb21wb25lbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnJlZmxlY3QuY29uc3RydWN0LmpzIiwid2VicGFjazovL3VuaXZlcnNhbC1wZGYtY29tcG9uZW50Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5yZWZsZWN0LmRlZmluZS1wcm9wZXJ0eS5qcyIsIndlYnBhY2s6Ly91bml2ZXJzYWwtcGRmLWNvbXBvbmVudC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMucmVmbGVjdC5kZWxldGUtcHJvcGVydHkuanMiLCJ3ZWJwYWNrOi8vdW5pdmVyc2FsLXBkZi1jb21wb25lbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnJlZmxlY3QuZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9yLmpzIiwid2VicGFjazovL3VuaXZlcnNhbC1wZGYtY29tcG9uZW50Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5yZWZsZWN0LmdldC1wcm90b3R5cGUtb2YuanMiLCJ3ZWJwYWNrOi8vdW5pdmVyc2FsLXBkZi1jb21wb25lbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnJlZmxlY3QuZ2V0LmpzIiwid2VicGFjazovL3VuaXZlcnNhbC1wZGYtY29tcG9uZW50Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5yZWZsZWN0Lmhhcy5qcyIsIndlYnBhY2s6Ly91bml2ZXJzYWwtcGRmLWNvbXBvbmVudC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMucmVmbGVjdC5pcy1leHRlbnNpYmxlLmpzIiwid2VicGFjazovL3VuaXZlcnNhbC1wZGYtY29tcG9uZW50Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5yZWZsZWN0Lm93bi1rZXlzLmpzIiwid2VicGFjazovL3VuaXZlcnNhbC1wZGYtY29tcG9uZW50Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5yZWZsZWN0LnByZXZlbnQtZXh0ZW5zaW9ucy5qcyIsIndlYnBhY2s6Ly91bml2ZXJzYWwtcGRmLWNvbXBvbmVudC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMucmVmbGVjdC5zZXQtcHJvdG90eXBlLW9mLmpzIiwid2VicGFjazovL3VuaXZlcnNhbC1wZGYtY29tcG9uZW50Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5yZWZsZWN0LnNldC5qcyIsIndlYnBhY2s6Ly91bml2ZXJzYWwtcGRmLWNvbXBvbmVudC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMucmVmbGVjdC50by1zdHJpbmctdGFnLmpzIiwid2VicGFjazovL3VuaXZlcnNhbC1wZGYtY29tcG9uZW50Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5yZWdleHAuY29uc3RydWN0b3IuanMiLCJ3ZWJwYWNrOi8vdW5pdmVyc2FsLXBkZi1jb21wb25lbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnJlZ2V4cC5leGVjLmpzIiwid2VicGFjazovL3VuaXZlcnNhbC1wZGYtY29tcG9uZW50Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5yZWdleHAuZmxhZ3MuanMiLCJ3ZWJwYWNrOi8vdW5pdmVyc2FsLXBkZi1jb21wb25lbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnJlZ2V4cC5zdGlja3kuanMiLCJ3ZWJwYWNrOi8vdW5pdmVyc2FsLXBkZi1jb21wb25lbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnJlZ2V4cC50ZXN0LmpzIiwid2VicGFjazovL3VuaXZlcnNhbC1wZGYtY29tcG9uZW50Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5yZWdleHAudG8tc3RyaW5nLmpzIiwid2VicGFjazovL3VuaXZlcnNhbC1wZGYtY29tcG9uZW50Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5zZXQuanMiLCJ3ZWJwYWNrOi8vdW5pdmVyc2FsLXBkZi1jb21wb25lbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnN0cmluZy5hbmNob3IuanMiLCJ3ZWJwYWNrOi8vdW5pdmVyc2FsLXBkZi1jb21wb25lbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnN0cmluZy5iaWcuanMiLCJ3ZWJwYWNrOi8vdW5pdmVyc2FsLXBkZi1jb21wb25lbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnN0cmluZy5ibGluay5qcyIsIndlYnBhY2s6Ly91bml2ZXJzYWwtcGRmLWNvbXBvbmVudC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuc3RyaW5nLmJvbGQuanMiLCJ3ZWJwYWNrOi8vdW5pdmVyc2FsLXBkZi1jb21wb25lbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnN0cmluZy5jb2RlLXBvaW50LWF0LmpzIiwid2VicGFjazovL3VuaXZlcnNhbC1wZGYtY29tcG9uZW50Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5zdHJpbmcuZW5kcy13aXRoLmpzIiwid2VicGFjazovL3VuaXZlcnNhbC1wZGYtY29tcG9uZW50Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5zdHJpbmcuZml4ZWQuanMiLCJ3ZWJwYWNrOi8vdW5pdmVyc2FsLXBkZi1jb21wb25lbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnN0cmluZy5mb250Y29sb3IuanMiLCJ3ZWJwYWNrOi8vdW5pdmVyc2FsLXBkZi1jb21wb25lbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnN0cmluZy5mb250c2l6ZS5qcyIsIndlYnBhY2s6Ly91bml2ZXJzYWwtcGRmLWNvbXBvbmVudC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuc3RyaW5nLmZyb20tY29kZS1wb2ludC5qcyIsIndlYnBhY2s6Ly91bml2ZXJzYWwtcGRmLWNvbXBvbmVudC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuc3RyaW5nLmluY2x1ZGVzLmpzIiwid2VicGFjazovL3VuaXZlcnNhbC1wZGYtY29tcG9uZW50Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5zdHJpbmcuaXRhbGljcy5qcyIsIndlYnBhY2s6Ly91bml2ZXJzYWwtcGRmLWNvbXBvbmVudC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuc3RyaW5nLml0ZXJhdG9yLmpzIiwid2VicGFjazovL3VuaXZlcnNhbC1wZGYtY29tcG9uZW50Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5zdHJpbmcubGluay5qcyIsIndlYnBhY2s6Ly91bml2ZXJzYWwtcGRmLWNvbXBvbmVudC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuc3RyaW5nLm1hdGNoLWFsbC5qcyIsIndlYnBhY2s6Ly91bml2ZXJzYWwtcGRmLWNvbXBvbmVudC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuc3RyaW5nLm1hdGNoLmpzIiwid2VicGFjazovL3VuaXZlcnNhbC1wZGYtY29tcG9uZW50Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5zdHJpbmcucGFkLWVuZC5qcyIsIndlYnBhY2s6Ly91bml2ZXJzYWwtcGRmLWNvbXBvbmVudC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuc3RyaW5nLnBhZC1zdGFydC5qcyIsIndlYnBhY2s6Ly91bml2ZXJzYWwtcGRmLWNvbXBvbmVudC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuc3RyaW5nLnJhdy5qcyIsIndlYnBhY2s6Ly91bml2ZXJzYWwtcGRmLWNvbXBvbmVudC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuc3RyaW5nLnJlcGVhdC5qcyIsIndlYnBhY2s6Ly91bml2ZXJzYWwtcGRmLWNvbXBvbmVudC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuc3RyaW5nLnJlcGxhY2UtYWxsLmpzIiwid2VicGFjazovL3VuaXZlcnNhbC1wZGYtY29tcG9uZW50Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5zdHJpbmcucmVwbGFjZS5qcyIsIndlYnBhY2s6Ly91bml2ZXJzYWwtcGRmLWNvbXBvbmVudC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuc3RyaW5nLnNlYXJjaC5qcyIsIndlYnBhY2s6Ly91bml2ZXJzYWwtcGRmLWNvbXBvbmVudC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuc3RyaW5nLnNtYWxsLmpzIiwid2VicGFjazovL3VuaXZlcnNhbC1wZGYtY29tcG9uZW50Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5zdHJpbmcuc3BsaXQuanMiLCJ3ZWJwYWNrOi8vdW5pdmVyc2FsLXBkZi1jb21wb25lbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnN0cmluZy5zdGFydHMtd2l0aC5qcyIsIndlYnBhY2s6Ly91bml2ZXJzYWwtcGRmLWNvbXBvbmVudC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuc3RyaW5nLnN0cmlrZS5qcyIsIndlYnBhY2s6Ly91bml2ZXJzYWwtcGRmLWNvbXBvbmVudC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuc3RyaW5nLnN1Yi5qcyIsIndlYnBhY2s6Ly91bml2ZXJzYWwtcGRmLWNvbXBvbmVudC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuc3RyaW5nLnN1cC5qcyIsIndlYnBhY2s6Ly91bml2ZXJzYWwtcGRmLWNvbXBvbmVudC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuc3RyaW5nLnRyaW0tZW5kLmpzIiwid2VicGFjazovL3VuaXZlcnNhbC1wZGYtY29tcG9uZW50Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5zdHJpbmcudHJpbS1zdGFydC5qcyIsIndlYnBhY2s6Ly91bml2ZXJzYWwtcGRmLWNvbXBvbmVudC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuc3RyaW5nLnRyaW0uanMiLCJ3ZWJwYWNrOi8vdW5pdmVyc2FsLXBkZi1jb21wb25lbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnN5bWJvbC5hc3luYy1pdGVyYXRvci5qcyIsIndlYnBhY2s6Ly91bml2ZXJzYWwtcGRmLWNvbXBvbmVudC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuc3ltYm9sLmRlc2NyaXB0aW9uLmpzIiwid2VicGFjazovL3VuaXZlcnNhbC1wZGYtY29tcG9uZW50Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5zeW1ib2wuaGFzLWluc3RhbmNlLmpzIiwid2VicGFjazovL3VuaXZlcnNhbC1wZGYtY29tcG9uZW50Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5zeW1ib2wuaXMtY29uY2F0LXNwcmVhZGFibGUuanMiLCJ3ZWJwYWNrOi8vdW5pdmVyc2FsLXBkZi1jb21wb25lbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnN5bWJvbC5pdGVyYXRvci5qcyIsIndlYnBhY2s6Ly91bml2ZXJzYWwtcGRmLWNvbXBvbmVudC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuc3ltYm9sLmpzIiwid2VicGFjazovL3VuaXZlcnNhbC1wZGYtY29tcG9uZW50Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5zeW1ib2wubWF0Y2gtYWxsLmpzIiwid2VicGFjazovL3VuaXZlcnNhbC1wZGYtY29tcG9uZW50Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5zeW1ib2wubWF0Y2guanMiLCJ3ZWJwYWNrOi8vdW5pdmVyc2FsLXBkZi1jb21wb25lbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnN5bWJvbC5yZXBsYWNlLmpzIiwid2VicGFjazovL3VuaXZlcnNhbC1wZGYtY29tcG9uZW50Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5zeW1ib2wuc2VhcmNoLmpzIiwid2VicGFjazovL3VuaXZlcnNhbC1wZGYtY29tcG9uZW50Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5zeW1ib2wuc3BlY2llcy5qcyIsIndlYnBhY2s6Ly91bml2ZXJzYWwtcGRmLWNvbXBvbmVudC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuc3ltYm9sLnNwbGl0LmpzIiwid2VicGFjazovL3VuaXZlcnNhbC1wZGYtY29tcG9uZW50Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5zeW1ib2wudG8tcHJpbWl0aXZlLmpzIiwid2VicGFjazovL3VuaXZlcnNhbC1wZGYtY29tcG9uZW50Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5zeW1ib2wudG8tc3RyaW5nLXRhZy5qcyIsIndlYnBhY2s6Ly91bml2ZXJzYWwtcGRmLWNvbXBvbmVudC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuc3ltYm9sLnVuc2NvcGFibGVzLmpzIiwid2VicGFjazovL3VuaXZlcnNhbC1wZGYtY29tcG9uZW50Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy50eXBlZC1hcnJheS5jb3B5LXdpdGhpbi5qcyIsIndlYnBhY2s6Ly91bml2ZXJzYWwtcGRmLWNvbXBvbmVudC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMudHlwZWQtYXJyYXkuZXZlcnkuanMiLCJ3ZWJwYWNrOi8vdW5pdmVyc2FsLXBkZi1jb21wb25lbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnR5cGVkLWFycmF5LmZpbGwuanMiLCJ3ZWJwYWNrOi8vdW5pdmVyc2FsLXBkZi1jb21wb25lbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnR5cGVkLWFycmF5LmZpbHRlci5qcyIsIndlYnBhY2s6Ly91bml2ZXJzYWwtcGRmLWNvbXBvbmVudC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMudHlwZWQtYXJyYXkuZmluZC1pbmRleC5qcyIsIndlYnBhY2s6Ly91bml2ZXJzYWwtcGRmLWNvbXBvbmVudC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMudHlwZWQtYXJyYXkuZmluZC5qcyIsIndlYnBhY2s6Ly91bml2ZXJzYWwtcGRmLWNvbXBvbmVudC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMudHlwZWQtYXJyYXkuZmxvYXQzMi1hcnJheS5qcyIsIndlYnBhY2s6Ly91bml2ZXJzYWwtcGRmLWNvbXBvbmVudC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMudHlwZWQtYXJyYXkuZmxvYXQ2NC1hcnJheS5qcyIsIndlYnBhY2s6Ly91bml2ZXJzYWwtcGRmLWNvbXBvbmVudC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMudHlwZWQtYXJyYXkuZm9yLWVhY2guanMiLCJ3ZWJwYWNrOi8vdW5pdmVyc2FsLXBkZi1jb21wb25lbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnR5cGVkLWFycmF5LmZyb20uanMiLCJ3ZWJwYWNrOi8vdW5pdmVyc2FsLXBkZi1jb21wb25lbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnR5cGVkLWFycmF5LmluY2x1ZGVzLmpzIiwid2VicGFjazovL3VuaXZlcnNhbC1wZGYtY29tcG9uZW50Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy50eXBlZC1hcnJheS5pbmRleC1vZi5qcyIsIndlYnBhY2s6Ly91bml2ZXJzYWwtcGRmLWNvbXBvbmVudC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMudHlwZWQtYXJyYXkuaW50MTYtYXJyYXkuanMiLCJ3ZWJwYWNrOi8vdW5pdmVyc2FsLXBkZi1jb21wb25lbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnR5cGVkLWFycmF5LmludDMyLWFycmF5LmpzIiwid2VicGFjazovL3VuaXZlcnNhbC1wZGYtY29tcG9uZW50Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy50eXBlZC1hcnJheS5pbnQ4LWFycmF5LmpzIiwid2VicGFjazovL3VuaXZlcnNhbC1wZGYtY29tcG9uZW50Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy50eXBlZC1hcnJheS5pdGVyYXRvci5qcyIsIndlYnBhY2s6Ly91bml2ZXJzYWwtcGRmLWNvbXBvbmVudC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMudHlwZWQtYXJyYXkuam9pbi5qcyIsIndlYnBhY2s6Ly91bml2ZXJzYWwtcGRmLWNvbXBvbmVudC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMudHlwZWQtYXJyYXkubGFzdC1pbmRleC1vZi5qcyIsIndlYnBhY2s6Ly91bml2ZXJzYWwtcGRmLWNvbXBvbmVudC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMudHlwZWQtYXJyYXkubWFwLmpzIiwid2VicGFjazovL3VuaXZlcnNhbC1wZGYtY29tcG9uZW50Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy50eXBlZC1hcnJheS5vZi5qcyIsIndlYnBhY2s6Ly91bml2ZXJzYWwtcGRmLWNvbXBvbmVudC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMudHlwZWQtYXJyYXkucmVkdWNlLXJpZ2h0LmpzIiwid2VicGFjazovL3VuaXZlcnNhbC1wZGYtY29tcG9uZW50Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy50eXBlZC1hcnJheS5yZWR1Y2UuanMiLCJ3ZWJwYWNrOi8vdW5pdmVyc2FsLXBkZi1jb21wb25lbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnR5cGVkLWFycmF5LnJldmVyc2UuanMiLCJ3ZWJwYWNrOi8vdW5pdmVyc2FsLXBkZi1jb21wb25lbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnR5cGVkLWFycmF5LnNldC5qcyIsIndlYnBhY2s6Ly91bml2ZXJzYWwtcGRmLWNvbXBvbmVudC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMudHlwZWQtYXJyYXkuc2xpY2UuanMiLCJ3ZWJwYWNrOi8vdW5pdmVyc2FsLXBkZi1jb21wb25lbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnR5cGVkLWFycmF5LnNvbWUuanMiLCJ3ZWJwYWNrOi8vdW5pdmVyc2FsLXBkZi1jb21wb25lbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnR5cGVkLWFycmF5LnNvcnQuanMiLCJ3ZWJwYWNrOi8vdW5pdmVyc2FsLXBkZi1jb21wb25lbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnR5cGVkLWFycmF5LnN1YmFycmF5LmpzIiwid2VicGFjazovL3VuaXZlcnNhbC1wZGYtY29tcG9uZW50Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy50eXBlZC1hcnJheS50by1sb2NhbGUtc3RyaW5nLmpzIiwid2VicGFjazovL3VuaXZlcnNhbC1wZGYtY29tcG9uZW50Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy50eXBlZC1hcnJheS50by1zdHJpbmcuanMiLCJ3ZWJwYWNrOi8vdW5pdmVyc2FsLXBkZi1jb21wb25lbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnR5cGVkLWFycmF5LnVpbnQxNi1hcnJheS5qcyIsIndlYnBhY2s6Ly91bml2ZXJzYWwtcGRmLWNvbXBvbmVudC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMudHlwZWQtYXJyYXkudWludDMyLWFycmF5LmpzIiwid2VicGFjazovL3VuaXZlcnNhbC1wZGYtY29tcG9uZW50Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy50eXBlZC1hcnJheS51aW50OC1hcnJheS5qcyIsIndlYnBhY2s6Ly91bml2ZXJzYWwtcGRmLWNvbXBvbmVudC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMudHlwZWQtYXJyYXkudWludDgtY2xhbXBlZC1hcnJheS5qcyIsIndlYnBhY2s6Ly91bml2ZXJzYWwtcGRmLWNvbXBvbmVudC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMud2Vhay1tYXAuanMiLCJ3ZWJwYWNrOi8vdW5pdmVyc2FsLXBkZi1jb21wb25lbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLndlYWstc2V0LmpzIiwid2VicGFjazovL3VuaXZlcnNhbC1wZGYtY29tcG9uZW50Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy93ZWIuZG9tLWNvbGxlY3Rpb25zLmZvci1lYWNoLmpzIiwid2VicGFjazovL3VuaXZlcnNhbC1wZGYtY29tcG9uZW50Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy93ZWIuZG9tLWNvbGxlY3Rpb25zLml0ZXJhdG9yLmpzIiwid2VicGFjazovL3VuaXZlcnNhbC1wZGYtY29tcG9uZW50Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy93ZWIuaW1tZWRpYXRlLmpzIiwid2VicGFjazovL3VuaXZlcnNhbC1wZGYtY29tcG9uZW50Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy93ZWIucXVldWUtbWljcm90YXNrLmpzIiwid2VicGFjazovL3VuaXZlcnNhbC1wZGYtY29tcG9uZW50Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy93ZWIudGltZXJzLmpzIiwid2VicGFjazovL3VuaXZlcnNhbC1wZGYtY29tcG9uZW50Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy93ZWIudXJsLXNlYXJjaC1wYXJhbXMuanMiLCJ3ZWJwYWNrOi8vdW5pdmVyc2FsLXBkZi1jb21wb25lbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL3dlYi51cmwuanMiLCJ3ZWJwYWNrOi8vdW5pdmVyc2FsLXBkZi1jb21wb25lbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL3dlYi51cmwudG8tanNvbi5qcyIsIndlYnBhY2s6Ly91bml2ZXJzYWwtcGRmLWNvbXBvbmVudC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL3N0YWJsZS9pbmRleC5qcyIsIndlYnBhY2s6Ly91bml2ZXJzYWwtcGRmLWNvbXBvbmVudC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL3dlYi9pbmRleC5qcyIsIndlYnBhY2s6Ly91bml2ZXJzYWwtcGRmLWNvbXBvbmVudC8uL25vZGVfbW9kdWxlcy9wZGZqcy1kaXN0L2J1aWxkL3BkZi5qcyIsIndlYnBhY2s6Ly91bml2ZXJzYWwtcGRmLWNvbXBvbmVudC8uL25vZGVfbW9kdWxlcy9wcmVhY3QvaG9va3MvZGlzdC9ob29rcy5tb2R1bGUuanMiLCJ3ZWJwYWNrOi8vdW5pdmVyc2FsLXBkZi1jb21wb25lbnQvLi9ub2RlX21vZHVsZXMvcHJlYWN0L2NvbXBhdC9kaXN0L2NvbXBhdC5tb2R1bGUuanMiLCJ3ZWJwYWNrOi8vdW5pdmVyc2FsLXBkZi1jb21wb25lbnQvLi9ub2RlX21vZHVsZXMvcHJlYWN0L2Rpc3QvcHJlYWN0Lm1vZHVsZS5qcyIsIndlYnBhY2s6Ly91bml2ZXJzYWwtcGRmLWNvbXBvbmVudC8uL25vZGVfbW9kdWxlcy9yZWdlbmVyYXRvci1ydW50aW1lL3J1bnRpbWUuanMiLCJ3ZWJwYWNrOi8vdW5pdmVyc2FsLXBkZi1jb21wb25lbnQvd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vdW5pdmVyc2FsLXBkZi1jb21wb25lbnQvd2VicGFjay9ydW50aW1lL2RlZmluZSBwcm9wZXJ0eSBnZXR0ZXJzIiwid2VicGFjazovL3VuaXZlcnNhbC1wZGYtY29tcG9uZW50L3dlYnBhY2svcnVudGltZS9nbG9iYWwiLCJ3ZWJwYWNrOi8vdW5pdmVyc2FsLXBkZi1jb21wb25lbnQvd2VicGFjay9ydW50aW1lL2hhc093blByb3BlcnR5IHNob3J0aGFuZCIsIndlYnBhY2s6Ly91bml2ZXJzYWwtcGRmLWNvbXBvbmVudC93ZWJwYWNrL3J1bnRpbWUvbWFrZSBuYW1lc3BhY2Ugb2JqZWN0Iiwid2VicGFjazovL3VuaXZlcnNhbC1wZGYtY29tcG9uZW50Ly4vbm9kZV9tb2R1bGVzL3JlYWN0LXBkZi9kaXN0L2VzbS9lbnRyeS5qcyIsIndlYnBhY2s6Ly91bml2ZXJzYWwtcGRmLWNvbXBvbmVudC8uL3NyYy9pbmRleC50c3giXSwibmFtZXMiOlsibiIsImUiLCJyIiwiX19lc01vZHVsZSIsInQiLCJPYmplY3QiLCJjcmVhdGUiLCJrZXlzIiwiZm9yRWFjaCIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsImRlZmluZVByb3BlcnR5IiwiZ2V0IiwiZW51bWVyYWJsZSIsImRlZmF1bHQiLCJmcmVlemUiLCJUZXh0IiwiTGluayIsIkZyZWVUZXh0IiwiTGluZSIsIlNxdWFyZSIsIkNpcmNsZSIsIlBvbHlnb24iLCJQb2x5bGluZSIsIkhpZ2hsaWdodCIsIlVuZGVybGluZSIsIlNxdWlnZ2x5IiwiU3RyaWtlT3V0IiwiU3RhbXAiLCJDYXJldCIsIkluayIsIlBvcHVwIiwiRmlsZUF0dGFjaG1lbnQiLCJhIiwibyIsImkiLCJjcmVhdGVDb250ZXh0IiwicHJlZml4Q2xhc3MiLCJjIiwiY2hpbGRyZW4iLCJzaXplIiwidXNlQ29udGV4dCIsInMiLCJjcmVhdGVFbGVtZW50IiwiY2xhc3NOYW1lIiwiaGVpZ2h0Iiwidmlld0JveCIsIndpZHRoIiwibCIsImQiLCJwIiwiY3giLCJjeSIsInN0cm9rZURhc2hhcnJheSIsIk1hdGgiLCJQSSIsInUiLCJ0aHJlc2hvbGQiLCJvblZpc2liaWxpdHlDaGFuZ2VkIiwidXNlUmVmIiwidXNlTGF5b3V0RWZmZWN0IiwiSW50ZXJzZWN0aW9uT2JzZXJ2ZXIiLCJpc0ludGVyc2VjdGluZyIsImludGVyc2VjdGlvblJhdGlvIiwiaXNWaXNpYmxlIiwicmF0aW8iLCJjdXJyZW50Iiwib2JzZXJ2ZSIsInVub2JzZXJ2ZSIsInJlZiIsImYiLCJjb3JlIiwiYXNraW5nUGFzc3dvcmQiLCJyZXF1aXJlUGFzc3dvcmRUb09wZW4iLCJzdWJtaXQiLCJ3cm9uZ1Bhc3N3b3JkIiwidHJ5QWdhaW4iLCJnIiwibG9jYWxpemF0aW9uIiwidXNlU3RhdGUiLCJQcm92aWRlciIsInZhbHVlIiwiQ2xvc2UiLCJPcGVuIiwiVG9nZ2xlIiwieCIsIkMiLCJvcGVuZWQiLCJ0b2dnbGUiLCJUb3BMZWZ0IiwiVG9wQ2VudGVyIiwiVG9wUmlnaHQiLCJSaWdodFRvcCIsIlJpZ2h0Q2VudGVyIiwiUmlnaHRCb3R0b20iLCJCb3R0b21MZWZ0IiwiQm90dG9tQ2VudGVyIiwiQm90dG9tUmlnaHQiLCJMZWZ0VG9wIiwiTGVmdENlbnRlciIsIkxlZnRCb3R0b20iLCJ5IiwiQWN0dWFsU2l6ZSIsIlBhZ2VGaXQiLCJQYWdlV2lkdGgiLCJUIiwiTSIsInNldFByb3RvdHlwZU9mIiwiX19wcm90b19fIiwiQXJyYXkiLCJoYXNPd25Qcm9wZXJ0eSIsIk4iLCJ0aGlzIiwiY29uc3RydWN0b3IiLCJwcm90b3R5cGUiLCJTIiwiSCIsImFzc2lnbiIsImFyZ3VtZW50cyIsImxlbmd0aCIsImNhbGwiLCJhcHBseSIsIlByZVJlbmRlciIsIkRpZFJlbmRlciIsIkIiLCJGIiwiU29saWQiLCJEYXNoZWQiLCJCZXZlbGVkIiwiSW5zZXQiLCJJIiwiQSIsIkQiLCJSZWdFeHAiLCJXIiwicGFyc2VJbnQiLCJWIiwiYW5ub3RhdGlvbiIsIm1vZGlmaWNhdGlvbkRhdGUiLCJleGVjIiwiRGF0ZSIsIlVUQyIsInRvTG9jYWxlRGF0ZVN0cmluZyIsInRvTG9jYWxlVGltZVN0cmluZyIsInN0eWxlIiwidG9wIiwiYW5ub3RhdGlvblR5cGUiLCJ0aXRsZSIsImNvbnRlbnRzIiwic3BsaXQiLCJtYXAiLCJGcmFnbWVudCIsImtleSIsIkNsaWNrIiwiSG92ZXIiLCJqIiwiaWdub3JlQm9yZGVyIiwiaGFzUG9wdXAiLCJpc1JlbmRlcmFibGUiLCJwYWdlIiwidmlld3BvcnQiLCJyZWN0IiwiY2xvc2VPbkhvdmVyIiwib3Blbk9uSG92ZXIiLCJ0b2dnbGVPbkNsaWNrIiwibSIsImgiLCJ2IiwidmlldyIsIm1pbiIsIm1heCIsIkUiLCJ3IiwiYm9yZGVyQ29sb3IiLCJib3JkZXJSYWRpdXMiLCJib3JkZXJTdHlsZSIsImJvcmRlcldpZHRoIiwiYm9yZGVyQm90dG9tU3R5bGUiLCJrIiwiYiIsImhvcml6b250YWxDb3JuZXJSYWRpdXMiLCJQIiwidmVydGljYWxDb3JuZXJSYWRpdXMiLCJjb2xvciIsInBvcHVwIiwic2xvdCIsImF0dHJzIiwibGVmdCIsInRyYW5zZm9ybSIsImpvaW4iLCJ0cmFuc2Zvcm1PcmlnaW4iLCJfIiwiaWQiLCJvbkNsaWNrIiwib25Nb3VzZUVudGVyIiwib25Nb3VzZUxlYXZlIiwieiIsInByZXNlcnZlQXNwZWN0UmF0aW8iLCJ2ZXJzaW9uIiwiZmlsbCIsInJ4IiwicnkiLCJzdHJva2UiLCJzdHJva2VXaWR0aCIsInEiLCJmaWxlIiwiZmlsZW5hbWUiLCJjb250ZW50IiwiVVJMIiwiY3JlYXRlT2JqZWN0VVJMIiwiQmxvYiIsInR5cGUiLCJkb2N1bWVudCIsImRpc3BsYXkiLCJocmVmIiwic2V0QXR0cmlidXRlIiwicG9wIiwiYm9keSIsImFwcGVuZENoaWxkIiwiY2xpY2siLCJyZW1vdmVDaGlsZCIsInJldm9rZU9iamVjdFVSTCIsIm9uRG91YmxlQ2xpY2siLCJVIiwiWiIsIkciLCJpbmtMaXN0cyIsInBvaW50cyIsIkoiLCJ4MSIsImxpbmVDb29yZGluYXRlcyIsIngyIiwieTEiLCJ5MiIsIlkiLCJkb2MiLCJvbkV4ZWN1dGVOYW1lZEFjdGlvbiIsIm9uSnVtcFRvRGVzdCIsInVybCIsImRlc3QiLCJhY3Rpb24iLCJyZWwiLCJ0YXJnZXQiLCJuZXdXaW5kb3ciLCJwcmV2ZW50RGVmYXVsdCIsIlByb21pc2UiLCJnZXREZXN0aW5hdGlvbiIsInRoZW4iLCJnZXRQYWdlSW5kZXgiLCJuYW1lIiwiYm90dG9tT2Zmc2V0IiwicGFnZUluZGV4Iiwic2NhbGVUbyIsIlgiLCJLIiwidmVydGljZXMiLCJRIiwiJCIsInBhcmVudFR5cGUiLCJpbmRleE9mIiwicGFyZW50SWQiLCJxdWVyeVNlbGVjdG9yIiwicGFyc2VGbG9hdCIsImVlIiwidGUiLCJuZSIsInJlIiwiYWUiLCJvZSIsImllIiwic2UiLCJjZSIsImxlIiwicGUiLCJjaGlsZEFubm90YXRpb24iLCJ0b0xvd2VyQ2FzZSIsInVlIiwiZGUiLCJhbm5vdGF0aW9ucyIsImNvbnRhaW5lclJlZiIsInBsdWdpbnMiLCJyb3RhdGlvbiIsInNjYWxlIiwiZ2V0Vmlld3BvcnQiLCJjbG9uZSIsImRvbnRGbGlwIiwiZmlsdGVyIiwidXNlRWZmZWN0Iiwib25Bbm5vdGF0aW9uTGF5ZXJSZW5kZXIiLCJjb250YWluZXIiLCJmaW5kIiwiZmUiLCJyZW5kZXJBbm5vdGF0aW9ucyIsImxvYWRpbmciLCJnZXRBbm5vdGF0aW9ucyIsImludGVudCIsImdlIiwiY3JlYXRlUmVmIiwibWUiLCJjYWxsYmFjayIsImhlIiwid2luZG93IiwiZGV2aWNlUGl4ZWxSYXRpbyIsImNhbmNlbCIsIm9uQ2FudmFzTGF5ZXJSZW5kZXIiLCJlbGUiLCJzdGF0dXMiLCJvcGFjaXR5IiwiZ2V0Q29udGV4dCIsImFscGhhIiwicmVuZGVyIiwiY2FudmFzQ29udGV4dCIsInByb21pc2UiLCJyZW1vdmVQcm9wZXJ0eSIsInZlIiwiZ2V0T3BlcmF0b3JMaXN0IiwiaW5uZXJIVE1MIiwiU1ZHR3JhcGhpY3MiLCJjb21tb25PYmpzIiwib2JqcyIsImdldFNWRyIsIkVlIiwib25UZXh0TGF5ZXJSZW5kZXIiLCJnZXRUZXh0Q29udGVudCIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJyZW5kZXJUZXh0TGF5ZXIiLCJ0ZXh0Q29udGVudCIsImNoaWxkTm9kZXMiLCJjbGFzc0xpc3QiLCJhZGQiLCJ4ZSIsImN1cnJlbnRQYWdlIiwicmVuZGVyUGFnZSIsIm9uUGFnZVZpc2liaWxpdHlDaGFuZ2VkIiwicGFnZUhlaWdodCIsInBhZ2VXaWR0aCIsInZpZXdwb3J0Um90YXRpb24iLCJPIiwiTCIsIlIiLCJhYnMiLCJnZXRQYWdlIiwiY2FudmFzTGF5ZXIiLCJ0ZXh0TGF5ZXIiLCJhbm5vdGF0aW9uTGF5ZXIiLCJzdmdMYXllciIsInJlbmRlclBhZ2VMYXllciIsIkNlIiwiZGVmYXVsdFNjYWxlIiwiaW5pdGlhbFBhZ2UiLCJwYWdlU2l6ZSIsInZpZXdlclN0YXRlIiwib25Eb2N1bWVudExvYWQiLCJvbk9wZW5GaWxlIiwib25QYWdlQ2hhbmdlIiwib25ab29tIiwibnVtUGFnZXMiLCJvblZpZXdlclN0YXRlQ2hhbmdlIiwic2Nyb2xsVG9wIiwib2Zmc2V0VG9wIiwic2Nyb2xsTGVmdCIsIm9mZnNldExlZnQiLCJGaWxlUmVhZGVyIiwicmVhZEFzQXJyYXlCdWZmZXIiLCJvbmxvYWQiLCJVaW50OEFycmF5IiwicmVzdWx0IiwiY2xpZW50V2lkdGgiLCJjbGllbnRIZWlnaHQiLCJnZXRQYWdlRWxlbWVudCIsImdldFBhZ2VzQ29udGFpbmVyIiwiZ2V0Vmlld2VyU3RhdGUiLCJqdW1wVG9EZXN0aW5hdGlvbiIsImp1bXBUb1BhZ2UiLCJvcGVuRmlsZSIsInJvdGF0ZSIsInNldFZpZXdlclN0YXRlIiwiem9vbSIsImluc3RhbGwiLCJ1bmluc3RhbGwiLCJyZWR1Y2UiLCJzdWJTbG90Iiwib3ZlcmZsb3ciLCJwb3NpdGlvbiIsInJlbmRlclZpZXdlciIsIndlIiwieWUiLCJmaW5kSW5kZXgiLCJrZSIsImJlIiwidmVyaWZ5UGFzc3dvcmRGbiIsIlBlIiwib25DaGFuZ2UiLCJPZSIsIkxlIiwiZXJyb3IiLCJSZSIsInBlcmNlbnRhZ2VzIiwiVGUiLCJNZSIsIk5lIiwiY2hhcmFjdGVyTWFwIiwiaHR0cEhlYWRlcnMiLCJyZW5kZXJFcnJvciIsInJlbmRlckxvYWRlciIsIndpdGhDcmVkZW50aWFscyIsImRhdGEiLCJjTWFwVXJsIiwiY01hcFBhY2tlZCIsImlzQ29tcHJlc3NlZCIsImdldERvY3VtZW50Iiwib25QYXNzd29yZCIsIlBhc3N3b3JkUmVzcG9uc2VzIiwiTkVFRF9QQVNTV09SRCIsIklOQ09SUkVDVF9QQVNTV09SRCIsIm9uUHJvZ3Jlc3MiLCJ0b3RhbCIsImxvYWRlZCIsIm1lc3NhZ2UiLCJkZXN0cm95IiwiU2UiLCJleHBvcnRzIiwiVmlld2VyIiwiZmlsZVVybCIsIm1vZHVsZSIsInBhdGgiLCJpdCIsIlR5cGVFcnJvciIsIlN0cmluZyIsImlzT2JqZWN0Iiwid2VsbEtub3duU3ltYm9sIiwiZGVmaW5lUHJvcGVydHlNb2R1bGUiLCJVTlNDT1BBQkxFUyIsIkFycmF5UHJvdG90eXBlIiwidW5kZWZpbmVkIiwiY29uZmlndXJhYmxlIiwiY2hhckF0IiwiaW5kZXgiLCJ1bmljb2RlIiwiQ29uc3RydWN0b3IiLCJBcnJheUJ1ZmZlciIsIkRhdGFWaWV3IiwiTkFNRSIsIk5BVElWRV9BUlJBWV9CVUZGRVIiLCJERVNDUklQVE9SUyIsImdsb2JhbCIsImhhcyIsImNsYXNzb2YiLCJjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkiLCJyZWRlZmluZSIsImdldFByb3RvdHlwZU9mIiwidWlkIiwiSW50OEFycmF5IiwiSW50OEFycmF5UHJvdG90eXBlIiwiVWludDhDbGFtcGVkQXJyYXkiLCJVaW50OENsYW1wZWRBcnJheVByb3RvdHlwZSIsIlR5cGVkQXJyYXkiLCJUeXBlZEFycmF5UHJvdG90eXBlIiwiT2JqZWN0UHJvdG90eXBlIiwiaXNQcm90b3R5cGVPZiIsIlRPX1NUUklOR19UQUciLCJUWVBFRF9BUlJBWV9UQUciLCJOQVRJVkVfQVJSQVlfQlVGRkVSX1ZJRVdTIiwib3BlcmEiLCJUWVBFRF9BUlJBWV9UQUdfUkVRSVJFRCIsIlR5cGVkQXJyYXlDb25zdHJ1Y3RvcnNMaXN0IiwiSW50MTZBcnJheSIsIlVpbnQxNkFycmF5IiwiSW50MzJBcnJheSIsIlVpbnQzMkFycmF5IiwiRmxvYXQzMkFycmF5IiwiRmxvYXQ2NEFycmF5IiwiQmlnSW50QXJyYXlDb25zdHJ1Y3RvcnNMaXN0IiwiQmlnSW50NjRBcnJheSIsIkJpZ1VpbnQ2NEFycmF5IiwiaXNUeXBlZEFycmF5Iiwia2xhc3MiLCJGdW5jdGlvbiIsImFUeXBlZEFycmF5IiwiYVR5cGVkQXJyYXlDb25zdHJ1Y3RvciIsIkFSUkFZIiwiVHlwZWRBcnJheUNvbnN0cnVjdG9yIiwiZXhwb3J0VHlwZWRBcnJheU1ldGhvZCIsIktFWSIsInByb3BlcnR5IiwiZm9yY2VkIiwiZXhwb3J0VHlwZWRBcnJheVN0YXRpY01ldGhvZCIsImlzVmlldyIsInJlZGVmaW5lQWxsIiwiZmFpbHMiLCJhbkluc3RhbmNlIiwidG9JbnRlZ2VyIiwidG9MZW5ndGgiLCJ0b0luZGV4IiwiSUVFRTc1NCIsImdldE93blByb3BlcnR5TmFtZXMiLCJhcnJheUZpbGwiLCJzZXRUb1N0cmluZ1RhZyIsIkludGVybmFsU3RhdGVNb2R1bGUiLCJnZXRJbnRlcm5hbFN0YXRlIiwic2V0SW50ZXJuYWxTdGF0ZSIsInNldCIsIkFSUkFZX0JVRkZFUiIsIkRBVEFfVklFVyIsIldST05HX0lOREVYIiwiTmF0aXZlQXJyYXlCdWZmZXIiLCIkQXJyYXlCdWZmZXIiLCIkRGF0YVZpZXciLCIkRGF0YVZpZXdQcm90b3R5cGUiLCJSYW5nZUVycm9yIiwicGFja0lFRUU3NTQiLCJwYWNrIiwidW5wYWNrSUVFRTc1NCIsInVucGFjayIsInBhY2tJbnQ4IiwibnVtYmVyIiwicGFja0ludDE2IiwicGFja0ludDMyIiwidW5wYWNrSW50MzIiLCJidWZmZXIiLCJwYWNrRmxvYXQzMiIsInBhY2tGbG9hdDY0IiwiYWRkR2V0dGVyIiwiY291bnQiLCJpc0xpdHRsZUVuZGlhbiIsImludEluZGV4Iiwic3RvcmUiLCJieXRlTGVuZ3RoIiwiYnl0ZXMiLCJzdGFydCIsImJ5dGVPZmZzZXQiLCJzbGljZSIsInJldmVyc2UiLCJjb252ZXJzaW9uIiwiTmFOIiwiQXJyYXlCdWZmZXJQcm90b3R5cGUiLCJ0ZXN0VmlldyIsIm5hdGl2ZVNldEludDgiLCJzZXRJbnQ4IiwiZ2V0SW50OCIsInNldFVpbnQ4IiwidW5zYWZlIiwiYnVmZmVyTGVuZ3RoIiwib2Zmc2V0IiwiZ2V0VWludDgiLCJnZXRJbnQxNiIsImdldFVpbnQxNiIsImdldEludDMyIiwiZ2V0VWludDMyIiwiZ2V0RmxvYXQzMiIsImdldEZsb2F0NjQiLCJzZXRJbnQxNiIsInNldFVpbnQxNiIsInNldEludDMyIiwic2V0VWludDMyIiwic2V0RmxvYXQzMiIsInNldEZsb2F0NjQiLCJ0b09iamVjdCIsInRvQWJzb2x1dGVJbmRleCIsImNvcHlXaXRoaW4iLCJsZW4iLCJ0byIsImZyb20iLCJlbmQiLCJpbmMiLCJhcmd1bWVudHNMZW5ndGgiLCJlbmRQb3MiLCIkZm9yRWFjaCIsImFycmF5TWV0aG9kSXNTdHJpY3QiLCJhcnJheU1ldGhvZFVzZXNUb0xlbmd0aCIsIlNUUklDVF9NRVRIT0QiLCJVU0VTX1RPX0xFTkdUSCIsImNhbGxiYWNrZm4iLCJiaW5kIiwiY2FsbFdpdGhTYWZlSXRlcmF0aW9uQ2xvc2luZyIsImlzQXJyYXlJdGVyYXRvck1ldGhvZCIsImNyZWF0ZVByb3BlcnR5IiwiZ2V0SXRlcmF0b3JNZXRob2QiLCJhcnJheUxpa2UiLCJzdGVwIiwiaXRlcmF0b3IiLCJuZXh0IiwibWFwZm4iLCJtYXBwaW5nIiwiaXRlcmF0b3JNZXRob2QiLCJkb25lIiwidG9JbmRleGVkT2JqZWN0IiwiY3JlYXRlTWV0aG9kIiwiSVNfSU5DTFVERVMiLCIkdGhpcyIsImVsIiwiZnJvbUluZGV4IiwiaW5jbHVkZXMiLCJJbmRleGVkT2JqZWN0IiwiYXJyYXlTcGVjaWVzQ3JlYXRlIiwicHVzaCIsIlRZUEUiLCJJU19NQVAiLCJJU19GSUxURVIiLCJJU19TT01FIiwiSVNfRVZFUlkiLCJJU19GSU5EX0lOREVYIiwiSVNfRklMVEVSX09VVCIsIk5PX0hPTEVTIiwidGhhdCIsInNwZWNpZmljQ3JlYXRlIiwic2VsZiIsImJvdW5kRnVuY3Rpb24iLCJzb21lIiwiZXZlcnkiLCJmaWx0ZXJPdXQiLCJuYXRpdmVMYXN0SW5kZXhPZiIsImxhc3RJbmRleE9mIiwiTkVHQVRJVkVfWkVSTyIsIkFDQ0VTU09SUyIsIjEiLCJGT1JDRUQiLCJzZWFyY2hFbGVtZW50IiwiVjhfVkVSU0lPTiIsIlNQRUNJRVMiLCJNRVRIT0RfTkFNRSIsImFycmF5IiwiZm9vIiwiQm9vbGVhbiIsImFyZ3VtZW50IiwibWV0aG9kIiwiY2FjaGUiLCJ0aHJvd2VyIiwib3B0aW9ucyIsImFyZ3VtZW50MCIsImFyZ3VtZW50MSIsImFGdW5jdGlvbiIsIklTX1JJR0hUIiwibWVtbyIsInJpZ2h0IiwiaXNBcnJheSIsIm9yaWdpbmFsQXJyYXkiLCJhbk9iamVjdCIsIml0ZXJhdG9yQ2xvc2UiLCJmbiIsIkVOVFJJRVMiLCJJVEVSQVRPUiIsIlNBRkVfQ0xPU0lORyIsImNhbGxlZCIsIml0ZXJhdG9yV2l0aFJldHVybiIsIlNLSVBfQ0xPU0lORyIsIklURVJBVElPTl9TVVBQT1JUIiwib2JqZWN0IiwidG9TdHJpbmciLCJUT19TVFJJTkdfVEFHX1NVUFBPUlQiLCJjbGFzc29mUmF3IiwiQ09SUkVDVF9BUkdVTUVOVFMiLCJ0YWciLCJ0cnlHZXQiLCJjYWxsZWUiLCJpdGVyYXRlIiwiZGVmaW5lSXRlcmF0b3IiLCJzZXRTcGVjaWVzIiwiZmFzdEtleSIsImludGVybmFsU3RhdGVHZXR0ZXJGb3IiLCJnZXR0ZXJGb3IiLCJnZXRDb25zdHJ1Y3RvciIsIndyYXBwZXIiLCJDT05TVFJVQ1RPUl9OQU1FIiwiQURERVIiLCJpdGVyYWJsZSIsImZpcnN0IiwibGFzdCIsIkFTX0VOVFJJRVMiLCJkZWZpbmUiLCJwcmV2aW91cyIsInN0YXRlIiwiZW50cnkiLCJnZXRFbnRyeSIsInJlbW92ZWQiLCJjbGVhciIsInByZXYiLCJzZXRTdHJvbmciLCJJVEVSQVRPUl9OQU1FIiwiZ2V0SW50ZXJuYWxDb2xsZWN0aW9uU3RhdGUiLCJnZXRJbnRlcm5hbEl0ZXJhdG9yU3RhdGUiLCJpdGVyYXRlZCIsImtpbmQiLCJnZXRXZWFrRGF0YSIsIkFycmF5SXRlcmF0aW9uTW9kdWxlIiwiJGhhcyIsInVuY2F1Z2h0RnJvemVuU3RvcmUiLCJmcm96ZW4iLCJVbmNhdWdodEZyb3plblN0b3JlIiwiZW50cmllcyIsImZpbmRVbmNhdWdodEZyb3plbiIsInNwbGljZSIsImlzRm9yY2VkIiwiSW50ZXJuYWxNZXRhZGF0YU1vZHVsZSIsImNoZWNrQ29ycmVjdG5lc3NPZkl0ZXJhdGlvbiIsImluaGVyaXRJZlJlcXVpcmVkIiwiY29tbW9uIiwiSVNfV0VBSyIsIk5hdGl2ZUNvbnN0cnVjdG9yIiwiTmF0aXZlUHJvdG90eXBlIiwiZXhwb3J0ZWQiLCJmaXhNZXRob2QiLCJuYXRpdmVNZXRob2QiLCJSRVFVSVJFRCIsImluc3RhbmNlIiwiSEFTTlRfQ0hBSU5JTkciLCJUSFJPV1NfT05fUFJJTUlUSVZFUyIsIkFDQ0VQVF9JVEVSQUJMRVMiLCJCVUdHWV9aRVJPIiwiJGluc3RhbmNlIiwiZHVtbXkiLCJvd25LZXlzIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yTW9kdWxlIiwic291cmNlIiwiTUFUQ0giLCJyZWdleHAiLCJlcnJvcjEiLCJlcnJvcjIiLCJyZXF1aXJlT2JqZWN0Q29lcmNpYmxlIiwicXVvdCIsInN0cmluZyIsImF0dHJpYnV0ZSIsInAxIiwicmVwbGFjZSIsIkl0ZXJhdG9yUHJvdG90eXBlIiwiY3JlYXRlUHJvcGVydHlEZXNjcmlwdG9yIiwiSXRlcmF0b3JzIiwicmV0dXJuVGhpcyIsIkl0ZXJhdG9yQ29uc3RydWN0b3IiLCJiaXRtYXAiLCJ3cml0YWJsZSIsInRvUHJpbWl0aXZlIiwicHJvcGVydHlLZXkiLCJwYWRTdGFydCIsIkRhdGVQcm90b3R5cGUiLCJnZXRUaW1lIiwibmF0aXZlRGF0ZVRvSVNPU3RyaW5nIiwidG9JU09TdHJpbmciLCJpc0Zpbml0ZSIsImRhdGUiLCJ5ZWFyIiwiZ2V0VVRDRnVsbFllYXIiLCJtaWxsaXNlY29uZHMiLCJnZXRVVENNaWxsaXNlY29uZHMiLCJzaWduIiwiZ2V0VVRDTW9udGgiLCJnZXRVVENEYXRlIiwiZ2V0VVRDSG91cnMiLCJnZXRVVENNaW51dGVzIiwiZ2V0VVRDU2Vjb25kcyIsImhpbnQiLCJjcmVhdGVJdGVyYXRvckNvbnN0cnVjdG9yIiwiSVNfUFVSRSIsIkl0ZXJhdG9yc0NvcmUiLCJCVUdHWV9TQUZBUklfSVRFUkFUT1JTIiwiS0VZUyIsIlZBTFVFUyIsIkl0ZXJhYmxlIiwiREVGQVVMVCIsIklTX1NFVCIsIkN1cnJlbnRJdGVyYXRvclByb3RvdHlwZSIsIm1ldGhvZHMiLCJnZXRJdGVyYXRpb25NZXRob2QiLCJLSU5EIiwiZGVmYXVsdEl0ZXJhdG9yIiwiSXRlcmFibGVQcm90b3R5cGUiLCJJTkNPUlJFQ1RfVkFMVUVTX05BTUUiLCJuYXRpdmVJdGVyYXRvciIsImFueU5hdGl2ZUl0ZXJhdG9yIiwidmFsdWVzIiwicHJvdG8iLCJ3cmFwcGVkV2VsbEtub3duU3ltYm9sTW9kdWxlIiwiU3ltYm9sIiwiRVhJU1RTIiwiQ1NTUnVsZUxpc3QiLCJDU1NTdHlsZURlY2xhcmF0aW9uIiwiQ1NTVmFsdWVMaXN0IiwiQ2xpZW50UmVjdExpc3QiLCJET01SZWN0TGlzdCIsIkRPTVN0cmluZ0xpc3QiLCJET01Ub2tlbkxpc3QiLCJEYXRhVHJhbnNmZXJJdGVtTGlzdCIsIkZpbGVMaXN0IiwiSFRNTEFsbENvbGxlY3Rpb24iLCJIVE1MQ29sbGVjdGlvbiIsIkhUTUxGb3JtRWxlbWVudCIsIkhUTUxTZWxlY3RFbGVtZW50IiwiTWVkaWFMaXN0IiwiTWltZVR5cGVBcnJheSIsIk5hbWVkTm9kZU1hcCIsIk5vZGVMaXN0IiwiUGFpbnRSZXF1ZXN0TGlzdCIsIlBsdWdpbiIsIlBsdWdpbkFycmF5IiwiU1ZHTGVuZ3RoTGlzdCIsIlNWR051bWJlckxpc3QiLCJTVkdQYXRoU2VnTGlzdCIsIlNWR1BvaW50TGlzdCIsIlNWR1N0cmluZ0xpc3QiLCJTVkdUcmFuc2Zvcm1MaXN0IiwiU291cmNlQnVmZmVyTGlzdCIsIlN0eWxlU2hlZXRMaXN0IiwiVGV4dFRyYWNrQ3VlTGlzdCIsIlRleHRUcmFja0xpc3QiLCJUb3VjaExpc3QiLCJ1c2VyQWdlbnQiLCJ0ZXN0IiwicHJvY2VzcyIsImdldEJ1aWx0SW4iLCJtYXRjaCIsInZlcnNpb25zIiwidjgiLCJzZXRHbG9iYWwiLCJjb3B5Q29uc3RydWN0b3JQcm9wZXJ0aWVzIiwidGFyZ2V0UHJvcGVydHkiLCJzb3VyY2VQcm9wZXJ0eSIsImRlc2NyaXB0b3IiLCJUQVJHRVQiLCJHTE9CQUwiLCJTVEFUSUMiLCJzdGF0Iiwibm9UYXJnZXRHZXQiLCJzaGFtIiwicmVnZXhwRXhlYyIsIlJFUExBQ0VfU1VQUE9SVFNfTkFNRURfR1JPVVBTIiwiZ3JvdXBzIiwiUkVQTEFDRV9LRUVQU18kMCIsIlJFUExBQ0UiLCJSRUdFWFBfUkVQTEFDRV9TVUJTVElUVVRFU19VTkRFRklORURfQ0FQVFVSRSIsIlNQTElUX1dPUktTX1dJVEhfT1ZFUldSSVRURU5fRVhFQyIsIm9yaWdpbmFsRXhlYyIsIlNZTUJPTCIsIkRFTEVHQVRFU19UT19TWU1CT0wiLCJERUxFR0FURVNfVE9fRVhFQyIsImV4ZWNDYWxsZWQiLCJmbGFncyIsIm5hdGl2ZVJlZ0V4cE1ldGhvZCIsInN0ciIsImFyZzIiLCJmb3JjZVN0cmluZ01ldGhvZCIsInN0cmluZ01ldGhvZCIsInJlZ2V4TWV0aG9kIiwiYXJnIiwiZmxhdHRlbkludG9BcnJheSIsIm9yaWdpbmFsIiwic291cmNlTGVuIiwiZGVwdGgiLCJtYXBwZXIiLCJ0aGlzQXJnIiwiZWxlbWVudCIsInRhcmdldEluZGV4Iiwic291cmNlSW5kZXgiLCJtYXBGbiIsImlzRXh0ZW5zaWJsZSIsInByZXZlbnRFeHRlbnNpb25zIiwiZmFjdG9yaWVzIiwiY29uc3RydWN0IiwiYXJnc0xlbmd0aCIsImFyZ3MiLCJsaXN0IiwicGFydEFyZ3MiLCJjb25jYXQiLCJ2YXJpYWJsZSIsIm5hbWVzcGFjZSIsImZsb29yIiwiU1VCU1RJVFVUSU9OX1NZTUJPTFMiLCJTVUJTVElUVVRJT05fU1lNQk9MU19OT19OQU1FRCIsIm1hdGNoZWQiLCJjYXB0dXJlcyIsIm5hbWVkQ2FwdHVyZXMiLCJyZXBsYWNlbWVudCIsInRhaWxQb3MiLCJzeW1ib2xzIiwiY2giLCJjYXB0dXJlIiwiY2hlY2siLCJnbG9iYWxUaGlzIiwiY29uc29sZSIsIkluZmluaXR5IiwicG93IiwibG9nIiwiTE4yIiwibWFudGlzc2FMZW5ndGgiLCJleHBvbmVudCIsIm1hbnRpc3NhIiwiZXhwb25lbnRMZW5ndGgiLCJlTWF4IiwiZUJpYXMiLCJydCIsIm5CaXRzIiwicHJvcGVydHlJc0VudW1lcmFibGUiLCJXcmFwcGVyIiwiTmV3VGFyZ2V0IiwiTmV3VGFyZ2V0UHJvdG90eXBlIiwiZnVuY3Rpb25Ub1N0cmluZyIsImluc3BlY3RTb3VyY2UiLCJoaWRkZW5LZXlzIiwiRlJFRVpJTkciLCJNRVRBREFUQSIsInNldE1ldGFkYXRhIiwib2JqZWN0SUQiLCJ3ZWFrRGF0YSIsIm1ldGEiLCJvbkZyZWV6ZSIsIk5BVElWRV9XRUFLX01BUCIsIm9iamVjdEhhcyIsInNoYXJlZCIsInNoYXJlZEtleSIsIldlYWtNYXAiLCJ3bWdldCIsIndtaGFzIiwid21zZXQiLCJtZXRhZGF0YSIsImZhY2FkZSIsIlNUQVRFIiwiZW5mb3JjZSIsImZlYXR1cmUiLCJkZXRlY3Rpb24iLCJub3JtYWxpemUiLCJQT0xZRklMTCIsIk5BVElWRSIsImlzUmVnRXhwIiwiUmVzdWx0Iiwic3RvcHBlZCIsInVuYm91bmRGdW5jdGlvbiIsIml0ZXJGbiIsIklTX0lURVJBVE9SIiwiSU5URVJSVVBURUQiLCJzdG9wIiwiY29uZGl0aW9uIiwiY2FsbEZuIiwicmV0dXJuTWV0aG9kIiwiUHJvdG90eXBlT2ZBcnJheUl0ZXJhdG9yUHJvdG90eXBlIiwiYXJyYXlJdGVyYXRvciIsIm5hdGl2ZUV4cG0xIiwiZXhwbTEiLCJleHAiLCJFUFNJTE9OIiwiRVBTSUxPTjMyIiwiTUFYMzIiLCJNSU4zMiIsImZyb3VuZCIsIiRhYnMiLCIkc2lnbiIsImxvZzFwIiwiZmx1c2giLCJoZWFkIiwibm90aWZ5Iiwibm9kZSIsIm1hY3JvdGFzayIsIklTX0lPUyIsIklTX1dFQk9TX1dFQktJVCIsIklTX05PREUiLCJNdXRhdGlvbk9ic2VydmVyIiwiV2ViS2l0TXV0YXRpb25PYnNlcnZlciIsInF1ZXVlTWljcm90YXNrRGVzY3JpcHRvciIsInF1ZXVlTWljcm90YXNrIiwicGFyZW50IiwiZG9tYWluIiwiZXhpdCIsImVudGVyIiwicmVzb2x2ZSIsIm5leHRUaWNrIiwiY3JlYXRlVGV4dE5vZGUiLCJjaGFyYWN0ZXJEYXRhIiwidGFzayIsImdldE93blByb3BlcnR5U3ltYm9scyIsInNlYXJjaFBhcmFtcyIsInBhdGhuYW1lIiwidG9KU09OIiwic29ydCIsIlVSTFNlYXJjaFBhcmFtcyIsInVzZXJuYW1lIiwiaG9zdCIsImhhc2giLCJQcm9taXNlQ2FwYWJpbGl0eSIsInJlamVjdCIsIiQkcmVzb2x2ZSIsIiQkcmVqZWN0IiwiZ2xvYmFsSXNGaW5pdGUiLCJOdW1iZXIiLCJ0cmltIiwid2hpdGVzcGFjZXMiLCIkcGFyc2VGbG9hdCIsInRyaW1tZWRTdHJpbmciLCIkcGFyc2VJbnQiLCJoZXgiLCJyYWRpeCIsIm9iamVjdEtleXMiLCJnZXRPd25Qcm9wZXJ0eVN5bWJvbHNNb2R1bGUiLCJwcm9wZXJ0eUlzRW51bWVyYWJsZU1vZHVsZSIsIm5hdGl2ZUFzc2lnbiIsInN5bWJvbCIsImFscGhhYmV0IiwiY2hyIiwiYWN0aXZlWERvY3VtZW50IiwiZGVmaW5lUHJvcGVydGllcyIsImVudW1CdWdLZXlzIiwiaHRtbCIsImRvY3VtZW50Q3JlYXRlRWxlbWVudCIsIklFX1BST1RPIiwiRW1wdHlDb25zdHJ1Y3RvciIsInNjcmlwdFRhZyIsIkxUIiwiTnVsbFByb3RvT2JqZWN0IiwiQWN0aXZlWE9iamVjdCIsImlmcmFtZURvY3VtZW50IiwiaWZyYW1lIiwid3JpdGUiLCJjbG9zZSIsInRlbXAiLCJwYXJlbnRXaW5kb3ciLCJOdWxsUHJvdG9PYmplY3RWaWFBY3RpdmVYIiwic3JjIiwiY29udGVudFdpbmRvdyIsIm9wZW4iLCJQcm9wZXJ0aWVzIiwiSUU4X0RPTV9ERUZJTkUiLCJuYXRpdmVEZWZpbmVQcm9wZXJ0eSIsIkF0dHJpYnV0ZXMiLCJuYXRpdmVHZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJuYXRpdmVHZXRPd25Qcm9wZXJ0eU5hbWVzIiwid2luZG93TmFtZXMiLCJnZXRXaW5kb3dOYW1lcyIsImludGVybmFsT2JqZWN0S2V5cyIsIkNPUlJFQ1RfUFJPVE9UWVBFX0dFVFRFUiIsIm5hbWVzIiwibmF0aXZlUHJvcGVydHlJc0VudW1lcmFibGUiLCJOQVNIT1JOX0JVRyIsInJhbmRvbSIsIl9fZGVmaW5lU2V0dGVyX18iLCJhUG9zc2libGVQcm90b3R5cGUiLCJzZXR0ZXIiLCJDT1JSRUNUX1NFVFRFUiIsIlRPX0VOVFJJRVMiLCJnZXRPd25Qcm9wZXJ0eU5hbWVzTW9kdWxlIiwibmV3UHJvbWlzZUNhcGFiaWxpdHkiLCJwcm9taXNlQ2FwYWJpbGl0eSIsImVuZm9yY2VJbnRlcm5hbFN0YXRlIiwiVEVNUExBVEUiLCJzaW1wbGUiLCJyZTEiLCJyZTIiLCJyZWdleHBGbGFncyIsInN0aWNreUhlbHBlcnMiLCJuYXRpdmVFeGVjIiwibmF0aXZlUmVwbGFjZSIsInBhdGNoZWRFeGVjIiwiVVBEQVRFU19MQVNUX0lOREVYX1dST05HIiwibGFzdEluZGV4IiwiVU5TVVBQT1JURURfWSIsIkJST0tFTl9DQVJFVCIsIk5QQ0dfSU5DTFVERUQiLCJyZUNvcHkiLCJzdGlja3kiLCJjaGFyc0FkZGVkIiwic3RyQ29weSIsIm11bHRpbGluZSIsImlucHV0IiwiaWdub3JlQ2FzZSIsImRvdEFsbCIsIlJFIiwiaXMiLCJUQUciLCJTSEFSRUQiLCJtb2RlIiwiY29weXJpZ2h0IiwiZGVmYXVsdENvbnN0cnVjdG9yIiwiQ09OVkVSVF9UT19TVFJJTkciLCJwb3MiLCJzZWNvbmQiLCJjaGFyQ29kZUF0IiwiY29kZUF0IiwicmVwZWF0IiwiY2VpbCIsIklTX0VORCIsIm1heExlbmd0aCIsImZpbGxTdHJpbmciLCJmaWxsTGVuIiwic3RyaW5nRmlsbGVyIiwic3RyaW5nTGVuZ3RoIiwiZmlsbFN0ciIsImludE1heExlbmd0aCIsIm1heEludCIsInJlZ2V4Tm9uQVNDSUkiLCJyZWdleFNlcGFyYXRvcnMiLCJPVkVSRkxPV19FUlJPUiIsInN0cmluZ0Zyb21DaGFyQ29kZSIsImZyb21DaGFyQ29kZSIsImRpZ2l0VG9CYXNpYyIsImRpZ2l0IiwiYWRhcHQiLCJkZWx0YSIsIm51bVBvaW50cyIsImZpcnN0VGltZSIsImJhc2VNaW51c1RNaW4iLCJiYXNlIiwiZW5jb2RlIiwiY3VycmVudFZhbHVlIiwib3V0cHV0IiwiaW5wdXRMZW5ndGgiLCJjb3VudGVyIiwiZXh0cmEiLCJ1Y3MyZGVjb2RlIiwiYmlhcyIsImJhc2ljTGVuZ3RoIiwiaGFuZGxlZENQQ291bnQiLCJoYW5kbGVkQ1BDb3VudFBsdXNPbmUiLCJxTWludXNUIiwiYmFzZU1pbnVzVCIsImxhYmVsIiwiZW5jb2RlZCIsImxhYmVscyIsIndoaXRlc3BhY2UiLCJsdHJpbSIsInJ0cmltIiwiZGVmZXIiLCJjaGFubmVsIiwicG9ydCIsImxvY2F0aW9uIiwic2V0SW1tZWRpYXRlIiwiY2xlYXJJbW1lZGlhdGUiLCJNZXNzYWdlQ2hhbm5lbCIsIkRpc3BhdGNoIiwicXVldWUiLCJydW4iLCJydW5uZXIiLCJsaXN0ZW5lciIsImV2ZW50IiwicG9zdCIsInBvc3RNZXNzYWdlIiwicHJvdG9jb2wiLCJub3ciLCJwb3J0MiIsInBvcnQxIiwib25tZXNzYWdlIiwiYWRkRXZlbnRMaXN0ZW5lciIsImltcG9ydFNjcmlwdHMiLCJzZXRUaW1lb3V0IiwiaW50ZWdlciIsImlzTmFOIiwidG9Qb3NpdGl2ZUludGVnZXIiLCJCWVRFUyIsIlBSRUZFUlJFRF9TVFJJTkciLCJ2YWwiLCJ2YWx1ZU9mIiwiVFlQRURfQVJSQVlTX0NPTlNUUlVDVE9SU19SRVFVSVJFU19XUkFQUEVSUyIsIkFycmF5QnVmZmVyVmlld0NvcmUiLCJBcnJheUJ1ZmZlck1vZHVsZSIsInRvT2Zmc2V0IiwidHlwZWRBcnJheUZyb20iLCJyb3VuZCIsIkJZVEVTX1BFUl9FTEVNRU5UIiwiV1JPTkdfTEVOR1RIIiwiZnJvbUxpc3QiLCJpc0FycmF5QnVmZmVyIiwiaXNUeXBlZEFycmF5SW5kZXgiLCJ3cmFwcGVkR2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwid3JhcHBlZERlZmluZVByb3BlcnR5IiwiQ0xBTVBFRCIsIkdFVFRFUiIsIlNFVFRFUiIsIk5hdGl2ZVR5cGVkQXJyYXlDb25zdHJ1Y3RvciIsIlR5cGVkQXJyYXlDb25zdHJ1Y3RvclByb3RvdHlwZSIsImFkZEVsZW1lbnQiLCJnZXR0ZXIiLCJ0eXBlZEFycmF5T2Zmc2V0IiwiJGxlbmd0aCIsIiRsZW4iLCJwb3N0Zml4IiwiTkFUSVZFX1NZTUJPTCIsIlVTRV9TWU1CT0xfQVNfVUlEIiwiV2VsbEtub3duU3ltYm9sc1N0b3JlIiwiY3JlYXRlV2VsbEtub3duU3ltYm9sIiwid2l0aG91dFNldHRlciIsIiRBZ2dyZWdhdGVFcnJvciIsImVycm9ycyIsIkVycm9yIiwiZXJyb3JzQXJyYXkiLCJBZ2dyZWdhdGVFcnJvciIsImFycmF5QnVmZmVyTW9kdWxlIiwic3BlY2llc0NvbnN0cnVjdG9yIiwibmF0aXZlQXJyYXlCdWZmZXJTbGljZSIsImZpbiIsInZpZXdTb3VyY2UiLCJ2aWV3VGFyZ2V0IiwiYXJyYXlNZXRob2RIYXNTcGVjaWVzU3VwcG9ydCIsIklTX0NPTkNBVF9TUFJFQURBQkxFIiwiTUFYX1NBRkVfSU5URUdFUiIsIk1BWElNVU1fQUxMT1dFRF9JTkRFWF9FWENFRURFRCIsIklTX0NPTkNBVF9TUFJFQURBQkxFX1NVUFBPUlQiLCJTUEVDSUVTX1NVUFBPUlQiLCJpc0NvbmNhdFNwcmVhZGFibGUiLCJzcHJlYWRhYmxlIiwiYWRkVG9VbnNjb3BhYmxlcyIsIiRldmVyeSIsIiRmaWx0ZXIiLCJIQVNfU1BFQ0lFU19TVVBQT1JUIiwiJGZpbmRJbmRleCIsIkZJTkRfSU5ERVgiLCJTS0lQU19IT0xFUyIsIiRmaW5kIiwiRklORCIsImZsYXRNYXAiLCJmbGF0IiwiZGVwdGhBcmciLCIkaW5jbHVkZXMiLCIkaW5kZXhPZiIsIm5hdGl2ZUluZGV4T2YiLCJBUlJBWV9JVEVSQVRPUiIsIkFyZ3VtZW50cyIsIm5hdGl2ZUpvaW4iLCJFUzNfU1RSSU5HUyIsInNlcGFyYXRvciIsIiRtYXAiLCJvZiIsIiRyZWR1Y2VSaWdodCIsIkNIUk9NRV9WRVJTSU9OIiwicmVkdWNlUmlnaHQiLCIkcmVkdWNlIiwibmF0aXZlUmV2ZXJzZSIsIjAiLCJuYXRpdmVTbGljZSIsIiRzb21lIiwibmF0aXZlU29ydCIsIkZBSUxTX09OX1VOREVGSU5FRCIsIkZBSUxTX09OX05VTEwiLCJjb21wYXJlZm4iLCJNQVhJTVVNX0FMTE9XRURfTEVOR1RIX0VYQ0VFREVEIiwiZGVsZXRlQ291bnQiLCJpbnNlcnRDb3VudCIsImFjdHVhbERlbGV0ZUNvdW50IiwiYWN0dWFsU3RhcnQiLCJwdiIsImRhdGVUb1ByaW1pdGl2ZSIsIlRPX1BSSU1JVElWRSIsIklOVkFMSURfREFURSIsIm5hdGl2ZURhdGVUb1N0cmluZyIsIkhBU19JTlNUQU5DRSIsIkZ1bmN0aW9uUHJvdG90eXBlIiwiRnVuY3Rpb25Qcm90b3R5cGVUb1N0cmluZyIsIm5hbWVSRSIsIiRzdHJpbmdpZnkiLCJsb3ciLCJoaSIsImZpeCIsInN0cmluZ2lmeSIsInJlcGxhY2VyIiwic3BhY2UiLCJKU09OIiwiY29sbGVjdGlvbiIsImNvbGxlY3Rpb25TdHJvbmciLCJpbml0IiwibmF0aXZlQWNvc2giLCJhY29zaCIsInNxcnQiLCJNQVhfVkFMVUUiLCJuYXRpdmVBc2luaCIsImFzaW5oIiwibmF0aXZlQXRhbmgiLCJhdGFuaCIsImNicnQiLCJMT0cyRSIsImNsejMyIiwibmF0aXZlQ29zaCIsImNvc2giLCIkaHlwb3QiLCJoeXBvdCIsInZhbHVlMSIsInZhbHVlMiIsImRpdiIsInN1bSIsImFMZW4iLCJsYXJnIiwibmF0aXZlSW11bCIsImltdWwiLCJVSU5UMTYiLCJ4biIsInluIiwieGwiLCJ5bCIsIkxPRzEwRSIsImxvZzEwIiwibG9nMiIsInNpbmgiLCJ0YW5oIiwidHJ1bmMiLCJOVU1CRVIiLCJOYXRpdmVOdW1iZXIiLCJOdW1iZXJQcm90b3R5cGUiLCJCUk9LRU5fQ0xBU1NPRiIsInRvTnVtYmVyIiwidGhpcmQiLCJtYXhDb2RlIiwiZGlnaXRzIiwiY29kZSIsIk51bWJlcldyYXBwZXIiLCJpc0ludGVnZXIiLCJpc1NhZmVJbnRlZ2VyIiwiTUlOX1NBRkVfSU5URUdFUiIsInRoaXNOdW1iZXJWYWx1ZSIsIm5hdGl2ZVRvRml4ZWQiLCJ0b0ZpeGVkIiwiYWNjIiwiZnJhY3Rpb25EaWdpdHMiLCJmcmFjdERpZ2l0cyIsIm11bHRpcGx5IiwiYzIiLCJkaXZpZGUiLCJkYXRhVG9TdHJpbmciLCJuYXRpdmVUb1ByZWNpc2lvbiIsInRvUHJlY2lzaW9uIiwicHJlY2lzaW9uIiwiX19kZWZpbmVHZXR0ZXJfXyIsIiRlbnRyaWVzIiwibmF0aXZlRnJlZXplIiwiZnJvbUVudHJpZXMiLCJvYmoiLCJGQUlMU19PTl9QUklNSVRJVkVTIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyIsIm5hdGl2ZUdldFByb3RvdHlwZU9mIiwibmF0aXZlSXNFeHRlbnNpYmxlIiwibmF0aXZlSXNGcm96ZW4iLCJpc0Zyb3plbiIsIm5hdGl2ZUlzU2VhbGVkIiwiaXNTZWFsZWQiLCJuYXRpdmVLZXlzIiwiX19sb29rdXBHZXR0ZXJfXyIsImRlc2MiLCJfX2xvb2t1cFNldHRlcl9fIiwibmF0aXZlUHJldmVudEV4dGVuc2lvbnMiLCJuYXRpdmVTZWFsIiwic2VhbCIsIiR2YWx1ZXMiLCJwYXJzZUZsb2F0SW1wbGVtZW50YXRpb24iLCJwYXJzZUludEltcGxlbWVudGF0aW9uIiwibmV3UHJvbWlzZUNhcGFiaWxpdHlNb2R1bGUiLCJwZXJmb3JtIiwiYWxsU2V0dGxlZCIsImNhcGFiaWxpdHkiLCJwcm9taXNlUmVzb2x2ZSIsInJlbWFpbmluZyIsImFscmVhZHlDYWxsZWQiLCJyZWFzb24iLCJQUk9NSVNFX0FOWV9FUlJPUiIsImFueSIsImFscmVhZHlSZXNvbHZlZCIsImFscmVhZHlSZWplY3RlZCIsIk5hdGl2ZVByb21pc2UiLCJyZWFsIiwib25GaW5hbGx5IiwiaXNGdW5jdGlvbiIsIkludGVybmFsIiwiT3duUHJvbWlzZUNhcGFiaWxpdHkiLCJQcm9taXNlV3JhcHBlciIsIm5hdGl2ZVRoZW4iLCJtaWNyb3Rhc2siLCJob3N0UmVwb3J0RXJyb3JzIiwiUFJPTUlTRSIsImdldEludGVybmFsUHJvbWlzZVN0YXRlIiwiUHJvbWlzZUNvbnN0cnVjdG9yIiwiJGZldGNoIiwibmV3R2VuZXJpY1Byb21pc2VDYXBhYmlsaXR5IiwiRElTUEFUQ0hfRVZFTlQiLCJjcmVhdGVFdmVudCIsImRpc3BhdGNoRXZlbnQiLCJOQVRJVkVfUkVKRUNUSU9OX0VWRU5UIiwiUHJvbWlzZVJlamVjdGlvbkV2ZW50IiwiVU5IQU5ETEVEX1JFSkVDVElPTiIsIkZha2VQcm9taXNlIiwiSU5DT1JSRUNUX0lURVJBVElPTiIsImFsbCIsImlzVGhlbmFibGUiLCJpc1JlamVjdCIsIm5vdGlmaWVkIiwiY2hhaW4iLCJyZWFjdGlvbnMiLCJvayIsImV4aXRlZCIsInJlYWN0aW9uIiwiaGFuZGxlciIsImZhaWwiLCJyZWplY3Rpb24iLCJvbkhhbmRsZVVuaGFuZGxlZCIsIm9uVW5oYW5kbGVkIiwiaW5pdEV2ZW50IiwiaXNVbmhhbmRsZWQiLCJlbWl0IiwidW53cmFwIiwiaW50ZXJuYWxSZWplY3QiLCJpbnRlcm5hbFJlc29sdmUiLCJleGVjdXRvciIsIm9uRnVsZmlsbGVkIiwib25SZWplY3RlZCIsImZldGNoIiwid3JhcCIsIiRwcm9taXNlUmVzb2x2ZSIsInJhY2UiLCJuYXRpdmVBcHBseSIsImZ1bmN0aW9uQXBwbHkiLCJ0aGlzQXJndW1lbnQiLCJhcmd1bWVudHNMaXN0IiwibmF0aXZlQ29uc3RydWN0IiwiTkVXX1RBUkdFVF9CVUciLCJBUkdTX0JVRyIsIlRhcmdldCIsIm5ld1RhcmdldCIsIiRhcmdzIiwiUmVmbGVjdCIsImF0dHJpYnV0ZXMiLCJkZWxldGVQcm9wZXJ0eSIsIm9iamVjdEdldFByb3RvdHlwZU9mIiwicmVjZWl2ZXIiLCJvYmplY3RJc0V4dGVuc2libGUiLCJvYmplY3RQcmV2ZW50RXh0ZW5zaW9ucyIsIm9iamVjdFNldFByb3RvdHlwZU9mIiwiZXhpc3RpbmdEZXNjcmlwdG9yIiwib3duRGVzY3JpcHRvciIsImdldEZsYWdzIiwiTmF0aXZlUmVnRXhwIiwiUmVnRXhwUHJvdG90eXBlIiwiQ09SUkVDVF9ORVciLCJSZWdFeHBXcmFwcGVyIiwicGF0dGVybiIsInRoaXNJc1JlZ0V4cCIsInBhdHRlcm5Jc1JlZ0V4cCIsImZsYWdzQXJlVW5kZWZpbmVkIiwicHJveHkiLCJvYmplY3REZWZpbmVQcm9wZXJ0eU1vZHVsZSIsInJlZ0V4cEZsYWdzIiwibmF0aXZlVGVzdCIsIlRPX1NUUklORyIsIm5hdGl2ZVRvU3RyaW5nIiwiTk9UX0dFTkVSSUMiLCJJTkNPUlJFQ1RfTkFNRSIsInJmIiwiY3JlYXRlSFRNTCIsImZvcmNlZFN0cmluZ0hUTUxNZXRob2QiLCJhbmNob3IiLCJiaWciLCJibGluayIsImJvbGQiLCJjb2RlUG9pbnRBdCIsIm5vdEFSZWdFeHAiLCJjb3JyZWN0SXNSZWdFeHBMb2dpYyIsIm5hdGl2ZUVuZHNXaXRoIiwiZW5kc1dpdGgiLCJDT1JSRUNUX0lTX1JFR0VYUF9MT0dJQyIsInNlYXJjaFN0cmluZyIsImVuZFBvc2l0aW9uIiwic2VhcmNoIiwiZml4ZWQiLCJmb250Y29sb3IiLCJmb250c2l6ZSIsIm5hdGl2ZUZyb21Db2RlUG9pbnQiLCJmcm9tQ29kZVBvaW50IiwiZWxlbWVudHMiLCJpdGFsaWNzIiwiU1RSSU5HX0lURVJBVE9SIiwicG9pbnQiLCJsaW5rIiwiZ2V0UmVnRXhwRmxhZ3MiLCJhZHZhbmNlU3RyaW5nSW5kZXgiLCJNQVRDSF9BTEwiLCJSRUdFWFBfU1RSSU5HX0lURVJBVE9SIiwiUkVHRVhQX1NUUklORyIsInJlZ0V4cEJ1aWx0aW5FeGVjIiwibmF0aXZlTWF0Y2hBbGwiLCJtYXRjaEFsbCIsIldPUktTX1dJVEhfTk9OX0dMT0JBTF9SRUdFWCIsIiRSZWdFeHBTdHJpbmdJdGVyYXRvciIsImZ1bGxVbmljb2RlIiwicmVnRXhwRXhlYyIsIiRtYXRjaEFsbCIsImZsYWdzVmFsdWUiLCJtYXRjaGVyIiwiZml4UmVnRXhwV2VsbEtub3duU3ltYm9sTG9naWMiLCJuYXRpdmVNYXRjaCIsIm1heWJlQ2FsbE5hdGl2ZSIsInJlcyIsIm1hdGNoU3RyIiwiJHBhZEVuZCIsInBhZEVuZCIsIiRwYWRTdGFydCIsInJhdyIsInRlbXBsYXRlIiwicmF3VGVtcGxhdGUiLCJsaXRlcmFsU2VnbWVudHMiLCJnZXRTdWJzdGl0dXRpb24iLCJzdHJpbmdJbmRleE9mIiwic2VhcmNoVmFsdWUiLCJyZXBsYWNlQWxsIiwicmVwbGFjZVZhbHVlIiwiSVNfUkVHX0VYUCIsImZ1bmN0aW9uYWxSZXBsYWNlIiwic2VhcmNoTGVuZ3RoIiwiYWR2YW5jZUJ5IiwiZW5kT2ZMYXN0TWF0Y2giLCJVTlNBRkVfU1VCU1RJVFVURSIsInJlc3VsdHMiLCJhY2N1bXVsYXRlZFJlc3VsdCIsIm5leHRTb3VyY2VQb3NpdGlvbiIsInJlcGxhY2VyQXJncyIsInNhbWVWYWx1ZSIsIlNFQVJDSCIsIm5hdGl2ZVNlYXJjaCIsInNlYXJjaGVyIiwicHJldmlvdXNMYXN0SW5kZXgiLCJzbWFsbCIsImNhbGxSZWdFeHBFeGVjIiwiYXJyYXlQdXNoIiwiTUFYX1VJTlQzMiIsIlNVUFBPUlRTX1kiLCJTUExJVCIsIm5hdGl2ZVNwbGl0IiwiaW50ZXJuYWxTcGxpdCIsImxpbWl0IiwibGltIiwibGFzdExlbmd0aCIsImxhc3RMYXN0SW5kZXgiLCJzZXBhcmF0b3JDb3B5Iiwic3BsaXR0ZXIiLCJ1bmljb2RlTWF0Y2hpbmciLCJuYXRpdmVTdGFydHNXaXRoIiwic3RhcnRzV2l0aCIsInN0cmlrZSIsInN1YiIsInN1cCIsIiR0cmltRW5kIiwiZm9yY2VkU3RyaW5nVHJpbU1ldGhvZCIsInRyaW1FbmQiLCJ0cmltUmlnaHQiLCIkdHJpbVN0YXJ0IiwidHJpbVN0YXJ0IiwidHJpbUxlZnQiLCIkdHJpbSIsImRlZmluZVdlbGxLbm93blN5bWJvbCIsIk5hdGl2ZVN5bWJvbCIsImRlc2NyaXB0aW9uIiwiRW1wdHlTdHJpbmdEZXNjcmlwdGlvblN0b3JlIiwiU3ltYm9sV3JhcHBlciIsInN5bWJvbFByb3RvdHlwZSIsInN5bWJvbFRvU3RyaW5nIiwibmF0aXZlIiwibmF0aXZlT2JqZWN0Q3JlYXRlIiwiZ2V0T3duUHJvcGVydHlOYW1lc0V4dGVybmFsIiwiSElEREVOIiwiJFN5bWJvbCIsIkFsbFN5bWJvbHMiLCJPYmplY3RQcm90b3R5cGVTeW1ib2xzIiwiU3RyaW5nVG9TeW1ib2xSZWdpc3RyeSIsIlN5bWJvbFRvU3RyaW5nUmVnaXN0cnkiLCJRT2JqZWN0IiwiVVNFX1NFVFRFUiIsImZpbmRDaGlsZCIsInNldFN5bWJvbERlc2NyaXB0b3IiLCJPYmplY3RQcm90b3R5cGVEZXNjcmlwdG9yIiwiaXNTeW1ib2wiLCIkZGVmaW5lUHJvcGVydHkiLCIkZGVmaW5lUHJvcGVydGllcyIsInByb3BlcnRpZXMiLCIkZ2V0T3duUHJvcGVydHlTeW1ib2xzIiwiJHByb3BlcnR5SXNFbnVtZXJhYmxlIiwiJGdldE93blByb3BlcnR5RGVzY3JpcHRvciIsIiRnZXRPd25Qcm9wZXJ0eU5hbWVzIiwiSVNfT0JKRUNUX1BST1RPVFlQRSIsImtleUZvciIsInN5bSIsInVzZVNldHRlciIsInVzZVNpbXBsZSIsIiRyZXBsYWNlciIsIiRjb3B5V2l0aGluIiwiJGZpbGwiLCJwcmVkaWNhdGUiLCJjcmVhdGVUeXBlZEFycmF5Q29uc3RydWN0b3IiLCJBcnJheUl0ZXJhdG9ycyIsImFycmF5VmFsdWVzIiwiYXJyYXlLZXlzIiwiYXJyYXlFbnRyaWVzIiwibmF0aXZlVHlwZWRBcnJheUl0ZXJhdG9yIiwiQ09SUkVDVF9JVEVSX05BTUUiLCJ0eXBlZEFycmF5VmFsdWVzIiwiJGpvaW4iLCIkbGFzdEluZGV4T2YiLCJtaWRkbGUiLCIkc2xpY2UiLCIkc29ydCIsImJlZ2luIiwiYmVnaW5JbmRleCIsIiR0b0xvY2FsZVN0cmluZyIsInRvTG9jYWxlU3RyaW5nIiwiVE9fTE9DQUxFX1NUUklOR19CVUciLCJVaW50OEFycmF5UHJvdG90eXBlIiwiYXJyYXlUb1N0cmluZyIsImFycmF5Sm9pbiIsIklTX05PVF9BUlJBWV9NRVRIT0QiLCJJbnRlcm5hbFdlYWtNYXAiLCJjb2xsZWN0aW9uV2VhayIsImVuZm9yY2VJdGVybmFsU3RhdGUiLCJJU19JRTExIiwiJFdlYWtNYXAiLCJXZWFrTWFwUHJvdG90eXBlIiwibmF0aXZlRGVsZXRlIiwibmF0aXZlSGFzIiwibmF0aXZlR2V0IiwibmF0aXZlU2V0IiwiRE9NSXRlcmFibGVzIiwiQ09MTEVDVElPTl9OQU1FIiwiQ29sbGVjdGlvbiIsIkNvbGxlY3Rpb25Qcm90b3R5cGUiLCJBcnJheUl0ZXJhdG9yTWV0aG9kcyIsIkFycmF5VmFsdWVzIiwic2NoZWR1bGVyIiwidGltZW91dCIsImJvdW5kQXJncyIsInNldEludGVydmFsIiwiVVNFX05BVElWRV9VUkwiLCJoYXNPd24iLCJnZXRJdGVyYXRvciIsIkhlYWRlcnMiLCJVUkxfU0VBUkNIX1BBUkFNUyIsIlVSTF9TRUFSQ0hfUEFSQU1TX0lURVJBVE9SIiwiZ2V0SW50ZXJuYWxQYXJhbXNTdGF0ZSIsInBsdXMiLCJzZXF1ZW5jZXMiLCJwZXJjZW50U2VxdWVuY2UiLCJwZXJjZW50RGVjb2RlIiwic2VxdWVuY2UiLCJkZWNvZGVVUklDb21wb25lbnQiLCJkZXNlcmlhbGl6ZSIsInNlcmlhbGl6ZSIsImVuY29kZVVSSUNvbXBvbmVudCIsInBhcnNlU2VhcmNoUGFyYW1zIiwicXVlcnkiLCJzaGlmdCIsInVwZGF0ZVNlYXJjaFBhcmFtcyIsInZhbGlkYXRlQXJndW1lbnRzTGVuZ3RoIiwicGFzc2VkIiwicmVxdWlyZWQiLCJVUkxTZWFyY2hQYXJhbXNJdGVyYXRvciIsInBhcmFtcyIsIlVSTFNlYXJjaFBhcmFtc0NvbnN0cnVjdG9yIiwiZW50cnlJdGVyYXRvciIsImVudHJ5TmV4dCIsInVwZGF0ZVVSTCIsIlVSTFNlYXJjaFBhcmFtc1Byb3RvdHlwZSIsImFwcGVuZCIsImdldEFsbCIsImZvdW5kIiwiZW50cmllc0luZGV4Iiwic2xpY2VJbmRleCIsImhlYWRlcnMiLCJnZXRTdGF0ZSIsIkVPRiIsImFycmF5RnJvbSIsInRvQVNDSUkiLCJVUkxTZWFyY2hQYXJhbXNNb2R1bGUiLCJOYXRpdmVVUkwiLCJnZXRJbnRlcm5hbFNlYXJjaFBhcmFtc1N0YXRlIiwiZ2V0SW50ZXJuYWxVUkxTdGF0ZSIsIklOVkFMSURfU0NIRU1FIiwiSU5WQUxJRF9IT1NUIiwiSU5WQUxJRF9QT1JUIiwiQUxQSEEiLCJBTFBIQU5VTUVSSUMiLCJESUdJVCIsIkhFWF9TVEFSVCIsIk9DVCIsIkRFQyIsIkhFWCIsIkZPUkJJRERFTl9IT1NUX0NPREVfUE9JTlQiLCJGT1JCSURERU5fSE9TVF9DT0RFX1BPSU5UX0VYQ0xVRElOR19QRVJDRU5UIiwiTEVBRElOR19BTkRfVFJBSUxJTkdfQzBfQ09OVFJPTF9PUl9TUEFDRSIsIlRBQl9BTkRfTkVXX0xJTkUiLCJwYXJzZUhvc3QiLCJjb2RlUG9pbnRzIiwicGFyc2VJUHY2IiwiaXNTcGVjaWFsIiwicGFyc2VJUHY0IiwicGVyY2VudEVuY29kZSIsIkMwQ29udHJvbFBlcmNlbnRFbmNvZGVTZXQiLCJwYXJ0c0xlbmd0aCIsIm51bWJlcnMiLCJwYXJ0IiwiaXB2NCIsInBhcnRzIiwibnVtYmVyc1NlZW4iLCJpcHY0UGllY2UiLCJzd2FwcyIsInN3YXAiLCJhZGRyZXNzIiwicGllY2VJbmRleCIsImNvbXByZXNzIiwicG9pbnRlciIsImNoYXIiLCJzZXJpYWxpemVIb3N0IiwiaWdub3JlMCIsInVuc2hpZnQiLCJpcHY2IiwibWF4SW5kZXgiLCJjdXJyU3RhcnQiLCJjdXJyTGVuZ3RoIiwiZmluZExvbmdlc3RaZXJvU2VxdWVuY2UiLCJmcmFnbWVudFBlcmNlbnRFbmNvZGVTZXQiLCJwYXRoUGVyY2VudEVuY29kZVNldCIsInVzZXJpbmZvUGVyY2VudEVuY29kZVNldCIsInNwZWNpYWxTY2hlbWVzIiwiZnRwIiwiaHR0cCIsImh0dHBzIiwid3MiLCJ3c3MiLCJzY2hlbWUiLCJpbmNsdWRlc0NyZWRlbnRpYWxzIiwicGFzc3dvcmQiLCJjYW5ub3RIYXZlVXNlcm5hbWVQYXNzd29yZFBvcnQiLCJjYW5ub3RCZUFCYXNlVVJMIiwiaXNXaW5kb3dzRHJpdmVMZXR0ZXIiLCJub3JtYWxpemVkIiwic3RhcnRzV2l0aFdpbmRvd3NEcml2ZUxldHRlciIsInNob3J0ZW5VUkxzUGF0aCIsInBhdGhTaXplIiwiaXNTaW5nbGVEb3QiLCJzZWdtZW50IiwiU0NIRU1FX1NUQVJUIiwiU0NIRU1FIiwiTk9fU0NIRU1FIiwiU1BFQ0lBTF9SRUxBVElWRV9PUl9BVVRIT1JJVFkiLCJQQVRIX09SX0FVVEhPUklUWSIsIlJFTEFUSVZFIiwiUkVMQVRJVkVfU0xBU0giLCJTUEVDSUFMX0FVVEhPUklUWV9TTEFTSEVTIiwiU1BFQ0lBTF9BVVRIT1JJVFlfSUdOT1JFX1NMQVNIRVMiLCJBVVRIT1JJVFkiLCJIT1NUIiwiSE9TVE5BTUUiLCJQT1JUIiwiRklMRSIsIkZJTEVfU0xBU0giLCJGSUxFX0hPU1QiLCJQQVRIX1NUQVJUIiwiUEFUSCIsIkNBTk5PVF9CRV9BX0JBU0VfVVJMX1BBVEgiLCJRVUVSWSIsIkZSQUdNRU5UIiwicGFyc2VVUkwiLCJzdGF0ZU92ZXJyaWRlIiwiYnVmZmVyQ29kZVBvaW50cyIsImZhaWx1cmUiLCJzZWVuQXQiLCJzZWVuQnJhY2tldCIsInNlZW5QYXNzd29yZFRva2VuIiwiZnJhZ21lbnQiLCJjb2RlUG9pbnQiLCJlbmNvZGVkQ29kZVBvaW50cyIsIlVSTENvbnN0cnVjdG9yIiwiYmFzZVN0YXRlIiwidXJsU3RyaW5nIiwic2VhcmNoUGFyYW1zU3RhdGUiLCJzZXJpYWxpemVVUkwiLCJvcmlnaW4iLCJnZXRPcmlnaW4iLCJnZXRQcm90b2NvbCIsImdldFVzZXJuYW1lIiwiZ2V0UGFzc3dvcmQiLCJnZXRIb3N0IiwiaG9zdG5hbWUiLCJnZXRIb3N0bmFtZSIsImdldFBvcnQiLCJnZXRQYXRobmFtZSIsImdldFNlYXJjaCIsImdldFNlYXJjaFBhcmFtcyIsImdldEhhc2giLCJVUkxQcm90b3R5cGUiLCJhY2Nlc3NvckRlc2NyaXB0b3IiLCJuYXRpdmVDcmVhdGVPYmplY3RVUkwiLCJuYXRpdmVSZXZva2VPYmplY3RVUkwiLCJibG9iIiwiZmFjdG9yeSIsIm1vZHVsZXMiLCJpbnN0YWxsZWRNb2R1bGVzIiwiX193X3BkZmpzX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwidG9TdHJpbmdUYWciLCJucyIsIl9kaXNwbGF5X3V0aWxzIiwiYWRkTGlua0F0dHJpYnV0ZXMiLCJnZXRGaWxlbmFtZUZyb21VcmwiLCJMaW5rVGFyZ2V0IiwibG9hZFNjcmlwdCIsIlBERkRhdGVTdHJpbmciLCJSZW5kZXJpbmdDYW5jZWxsZWRFeGNlcHRpb24iLCJfYXBpIiwiYnVpbGQiLCJMb29wYmFja1BvcnQiLCJQREZEYXRhUmFuZ2VUcmFuc3BvcnQiLCJQREZXb3JrZXIiLCJfdXRpbCIsIkNNYXBDb21wcmVzc2lvblR5cGUiLCJjcmVhdGVQcm9taXNlQ2FwYWJpbGl0eSIsImNyZWF0ZVZhbGlkQWJzb2x1dGVVcmwiLCJJbnZhbGlkUERGRXhjZXB0aW9uIiwiTWlzc2luZ1BERkV4Y2VwdGlvbiIsIk9QUyIsIlBlcm1pc3Npb25GbGFnIiwicmVtb3ZlTnVsbENoYXJhY3RlcnMiLCJzaGFkb3ciLCJVbmV4cGVjdGVkUmVzcG9uc2VFeGNlcHRpb24iLCJVTlNVUFBPUlRFRF9GRUFUVVJFUyIsIlV0aWwiLCJWZXJib3NpdHlMZXZlbCIsIl9hbm5vdGF0aW9uX2xheWVyIiwiQW5ub3RhdGlvbkxheWVyIiwiX2FwaV9jb21wYXRpYmlsaXR5IiwiYXBpQ29tcGF0aWJpbGl0eVBhcmFtcyIsIl93b3JrZXJfb3B0aW9ucyIsIkdsb2JhbFdvcmtlck9wdGlvbnMiLCJfdGV4dF9sYXllciIsIl9zdmciLCJpc05vZGVKUyIsIlBERk5vZGVTdHJlYW0iLCJzZXRQREZOZXR3b3JrU3RyZWFtRmFjdG9yeSIsIlBERk5ldHdvcmtTdHJlYW0iLCJQREZGZXRjaFN0cmVhbSIsImlzRmV0Y2hTdXBwb3J0ZWQiLCJpc1ZhbGlkRmV0Y2hVcmwiLCJlbmFibGVkIiwiYXNzZXJ0IiwidXJsTnVsbFJlbW92ZWQiLCJvbmNsaWNrIiwidGFyZ2V0U3RyIiwiTk9ORSIsIlNFTEYiLCJCTEFOSyIsIlBBUkVOVCIsIlRPUCIsIkRFRkFVTFRfTElOS19SRUwiLCJzdWJzdHJpbmciLCJzY3JpcHQiLCJvbmVycm9yIiwiZG9jdW1lbnRFbGVtZW50IiwiZGVwcmVjYXRlZCIsImRldGFpbHMiLCJTdGF0VGltZXIiLCJET01TVkdGYWN0b3J5IiwiRE9NQ01hcFJlYWRlckZhY3RvcnkiLCJET01DYW52YXNGYWN0b3J5IiwiUGFnZVZpZXdwb3J0IiwiU1ZHX05TIiwiY2FudmFzIiwiY29udGV4dCIsImNhbnZhc0FuZENvbnRleHQiLCJiYXNlVXJsIiwiY29tcHJlc3Npb25UeXBlIiwiQklOQVJZIiwiYmFzZVVSSSIsImFzeW5jIiwicmVzcG9uc2UiLCJzdGF0dXNUZXh0IiwiY01hcERhdGEiLCJhcnJheUJ1ZmZlciIsInN0cmluZ1RvQnl0ZXMiLCJ0ZXh0IiwiY2F0Y2giLCJyZXF1ZXN0IiwiWE1MSHR0cFJlcXVlc3QiLCJyZXNwb25zZVR5cGUiLCJvbnJlYWR5c3RhdGVjaGFuZ2UiLCJyZWFkeVN0YXRlIiwiRE9ORSIsInJlc3BvbnNlVGV4dCIsInNlbmQiLCJzdmciLCJjcmVhdGVFbGVtZW50TlMiLCJvZmZzZXRYIiwib2Zmc2V0WSIsImNlbnRlclgiLCJjZW50ZXJZIiwicm90YXRlQSIsInJvdGF0ZUIiLCJyb3RhdGVDIiwicm90YXRlRCIsIm9mZnNldENhbnZhc1giLCJvZmZzZXRDYW52YXNZIiwiYXBwbHlUcmFuc2Zvcm0iLCJ0b3BMZWZ0IiwiYm90dG9tUmlnaHQiLCJhcHBseUludmVyc2VUcmFuc2Zvcm0iLCJCYXNlRXhjZXB0aW9uIiwibXNnIiwic3VwZXIiLCJSZXNwb25zZSIsIlJlYWRhYmxlU3RyZWFtIiwiZXgiLCJwZGZEYXRlU3RyaW5nUmVnZXgiLCJzdGFydGVkIiwidGltZXMiLCJ3YXJuIiwib3V0QnVmIiwibG9uZ2VzdCIsInRpbWUiLCJkdXJhdGlvbiIsImlzU3RyaW5nIiwibWF0Y2hlcyIsIm1vbnRoIiwiZGF5IiwiaG91ciIsIm1pbnV0ZSIsInVuaXZlcnNhbFRpbWVSZWxhdGlvbiIsIm9mZnNldEhvdXIiLCJvZmZzZXRNaW51dGUiLCJhcnJheUJ5dGVMZW5ndGgiLCJhcnJheXNUb0J5dGVzIiwiYXJyIiwicmVzdWx0TGVuZ3RoIiwiaXRlbSIsIml0ZW1MZW5ndGgiLCJieXRlc1RvU3RyaW5nIiwiTUFYX0FSR1VNRU5UX0NPVU5UIiwic3RyQnVmIiwiY2h1bmtFbmQiLCJjaHVuayIsInN1YmFycmF5IiwiaXNTZXR0bGVkIiwiZ2V0VmVyYm9zaXR5TGV2ZWwiLCJ2ZXJib3NpdHkiLCJpbmZvIiwiSU5GT1MiLCJpc0FycmF5RXF1YWwiLCJhcnIxIiwiYXJyMiIsImlzQm9vbCIsImlzRW1wdHlPYmoiLCJpc051bSIsImlzU2FtZU9yaWdpbiIsIm90aGVyVXJsIiwib3RoZXIiLCJhYnNvbHV0ZVVybCIsIl9pc1ZhbGlkUHJvdG9jb2wiLCJOdWxsQ2hhcmFjdGVyc1JlZ0V4cCIsInNldFZlcmJvc2l0eUxldmVsIiwibGV2ZWwiLCJzdHJpbmczMiIsInN0cmluZ1RvUERGU3RyaW5nIiwiUERGU3RyaW5nVHJhbnNsYXRlVGFibGUiLCJzdHJpbmdUb1VURjhTdHJpbmciLCJlc2NhcGUiLCJ1dGY4U3RyaW5nVG9TdHJpbmciLCJ1bmVzY2FwZSIsInVucmVhY2hhYmxlIiwiSXNFdmFsU3VwcG9ydGVkQ2FjaGVkIiwiSXNMaXR0bGVFbmRpYW5DYWNoZWQiLCJGb3JtYXRFcnJvciIsIlVua25vd25FcnJvckV4Y2VwdGlvbiIsIlRleHRSZW5kZXJpbmdNb2RlIiwiU3RyZWFtVHlwZSIsIlBhc3N3b3JkRXhjZXB0aW9uIiwiQWJvcnRFeGNlcHRpb24iLCJJbWFnZUtpbmQiLCJGb250VHlwZSIsIkFubm90YXRpb25UeXBlIiwiQW5ub3RhdGlvblN0YXRlTW9kZWxUeXBlIiwiQW5ub3RhdGlvblJldmlld1N0YXRlIiwiQW5ub3RhdGlvblJlcGx5VHlwZSIsIkFubm90YXRpb25NYXJrZWRTdGF0ZSIsIkFubm90YXRpb25GbGFnIiwiQW5ub3RhdGlvbkZpZWxkRmxhZyIsIkFubm90YXRpb25Cb3JkZXJTdHlsZVR5cGUiLCJJREVOVElUWV9NQVRSSVgiLCJGT05UX0lERU5USVRZX01BVFJJWCIsIlBSSU5UIiwiTU9ESUZZX0NPTlRFTlRTIiwiQ09QWSIsIk1PRElGWV9BTk5PVEFUSU9OUyIsIkZJTExfSU5URVJBQ1RJVkVfRk9STVMiLCJDT1BZX0ZPUl9BQ0NFU1NJQklMSVRZIiwiQVNTRU1CTEUiLCJQUklOVF9ISUdIX1FVQUxJVFkiLCJGSUxMIiwiU1RST0tFIiwiRklMTF9TVFJPS0UiLCJJTlZJU0lCTEUiLCJGSUxMX0FERF9UT19QQVRIIiwiU1RST0tFX0FERF9UT19QQVRIIiwiRklMTF9TVFJPS0VfQUREX1RPX1BBVEgiLCJBRERfVE9fUEFUSCIsIkZJTExfU1RST0tFX01BU0siLCJBRERfVE9fUEFUSF9GTEFHIiwiR1JBWVNDQUxFXzFCUFAiLCJSR0JfMjRCUFAiLCJSR0JBXzMyQlBQIiwiVEVYVCIsIkxJTksiLCJGUkVFVEVYVCIsIkxJTkUiLCJTUVVBUkUiLCJDSVJDTEUiLCJQT0xZR09OIiwiUE9MWUxJTkUiLCJISUdITElHSFQiLCJVTkRFUkxJTkUiLCJTUVVJR0dMWSIsIlNUUklLRU9VVCIsIlNUQU1QIiwiQ0FSRVQiLCJJTksiLCJQT1BVUCIsIkZJTEVBVFRBQ0hNRU5UIiwiU09VTkQiLCJNT1ZJRSIsIldJREdFVCIsIlNDUkVFTiIsIlBSSU5URVJNQVJLIiwiVFJBUE5FVCIsIldBVEVSTUFSSyIsIlRIUkVFRCIsIlJFREFDVCIsIk1BUktFRCIsIlJFVklFVyIsIlVOTUFSS0VEIiwiQUNDRVBURUQiLCJSRUpFQ1RFRCIsIkNBTkNFTExFRCIsIkNPTVBMRVRFRCIsIkdST1VQIiwiUkVQTFkiLCJOT1pPT00iLCJOT1JPVEFURSIsIk5PVklFVyIsIlJFQURPTkxZIiwiTE9DS0VEIiwiVE9HR0xFTk9WSUVXIiwiTE9DS0VEQ09OVEVOVFMiLCJOT0VYUE9SVCIsIk1VTFRJTElORSIsIlBBU1NXT1JEIiwiTk9UT0dHTEVUT09GRiIsIlJBRElPIiwiUFVTSEJVVFRPTiIsIkNPTUJPIiwiRURJVCIsIlNPUlQiLCJGSUxFU0VMRUNUIiwiTVVMVElTRUxFQ1QiLCJET05PVFNQRUxMQ0hFQ0siLCJET05PVFNDUk9MTCIsIkNPTUIiLCJSSUNIVEVYVCIsIlJBRElPU0lOVU5JU09OIiwiQ09NTUlUT05TRUxDSEFOR0UiLCJTT0xJRCIsIkRBU0hFRCIsIkJFVkVMRUQiLCJJTlNFVCIsIlVOS05PV04iLCJGTEFURSIsIkxaVyIsIkRDVCIsIkpQWCIsIkpCSUciLCJBODUiLCJBSFgiLCJDQ0YiLCJSTFgiLCJUWVBFMSIsIlRZUEUxQyIsIkNJREZPTlRUWVBFMCIsIkNJREZPTlRUWVBFMEMiLCJUUlVFVFlQRSIsIkNJREZPTlRUWVBFMiIsIlRZUEUzIiwiT1BFTlRZUEUiLCJUWVBFMCIsIk1NVFlQRTEiLCJFUlJPUlMiLCJXQVJOSU5HUyIsIlNUUkVBTSIsImRlcGVuZGVuY3kiLCJzZXRMaW5lV2lkdGgiLCJzZXRMaW5lQ2FwIiwic2V0TGluZUpvaW4iLCJzZXRNaXRlckxpbWl0Iiwic2V0RGFzaCIsInNldFJlbmRlcmluZ0ludGVudCIsInNldEZsYXRuZXNzIiwic2V0R1N0YXRlIiwic2F2ZSIsInJlc3RvcmUiLCJtb3ZlVG8iLCJsaW5lVG8iLCJjdXJ2ZVRvIiwiY3VydmVUbzIiLCJjdXJ2ZVRvMyIsImNsb3NlUGF0aCIsInJlY3RhbmdsZSIsImNsb3NlU3Ryb2tlIiwiZW9GaWxsIiwiZmlsbFN0cm9rZSIsImVvRmlsbFN0cm9rZSIsImNsb3NlRmlsbFN0cm9rZSIsImNsb3NlRU9GaWxsU3Ryb2tlIiwiZW5kUGF0aCIsImNsaXAiLCJlb0NsaXAiLCJiZWdpblRleHQiLCJlbmRUZXh0Iiwic2V0Q2hhclNwYWNpbmciLCJzZXRXb3JkU3BhY2luZyIsInNldEhTY2FsZSIsInNldExlYWRpbmciLCJzZXRGb250Iiwic2V0VGV4dFJlbmRlcmluZ01vZGUiLCJzZXRUZXh0UmlzZSIsIm1vdmVUZXh0Iiwic2V0TGVhZGluZ01vdmVUZXh0Iiwic2V0VGV4dE1hdHJpeCIsIm5leHRMaW5lIiwic2hvd1RleHQiLCJzaG93U3BhY2VkVGV4dCIsIm5leHRMaW5lU2hvd1RleHQiLCJuZXh0TGluZVNldFNwYWNpbmdTaG93VGV4dCIsInNldENoYXJXaWR0aCIsInNldENoYXJXaWR0aEFuZEJvdW5kcyIsInNldFN0cm9rZUNvbG9yU3BhY2UiLCJzZXRGaWxsQ29sb3JTcGFjZSIsInNldFN0cm9rZUNvbG9yIiwic2V0U3Ryb2tlQ29sb3JOIiwic2V0RmlsbENvbG9yIiwic2V0RmlsbENvbG9yTiIsInNldFN0cm9rZUdyYXkiLCJzZXRGaWxsR3JheSIsInNldFN0cm9rZVJHQkNvbG9yIiwic2V0RmlsbFJHQkNvbG9yIiwic2V0U3Ryb2tlQ01ZS0NvbG9yIiwic2V0RmlsbENNWUtDb2xvciIsInNoYWRpbmdGaWxsIiwiYmVnaW5JbmxpbmVJbWFnZSIsImJlZ2luSW1hZ2VEYXRhIiwiZW5kSW5saW5lSW1hZ2UiLCJwYWludFhPYmplY3QiLCJtYXJrUG9pbnQiLCJtYXJrUG9pbnRQcm9wcyIsImJlZ2luTWFya2VkQ29udGVudCIsImJlZ2luTWFya2VkQ29udGVudFByb3BzIiwiZW5kTWFya2VkQ29udGVudCIsImJlZ2luQ29tcGF0IiwiZW5kQ29tcGF0IiwicGFpbnRGb3JtWE9iamVjdEJlZ2luIiwicGFpbnRGb3JtWE9iamVjdEVuZCIsImJlZ2luR3JvdXAiLCJlbmRHcm91cCIsImJlZ2luQW5ub3RhdGlvbnMiLCJlbmRBbm5vdGF0aW9ucyIsImJlZ2luQW5ub3RhdGlvbiIsImVuZEFubm90YXRpb24iLCJwYWludEpwZWdYT2JqZWN0IiwicGFpbnRJbWFnZU1hc2tYT2JqZWN0IiwicGFpbnRJbWFnZU1hc2tYT2JqZWN0R3JvdXAiLCJwYWludEltYWdlWE9iamVjdCIsInBhaW50SW5saW5lSW1hZ2VYT2JqZWN0IiwicGFpbnRJbmxpbmVJbWFnZVhPYmplY3RHcm91cCIsInBhaW50SW1hZ2VYT2JqZWN0UmVwZWF0IiwicGFpbnRJbWFnZU1hc2tYT2JqZWN0UmVwZWF0IiwicGFpbnRTb2xpZENvbG9ySW1hZ2VNYXNrIiwiY29uc3RydWN0UGF0aCIsInVua25vd24iLCJmb3JtcyIsImphdmFTY3JpcHQiLCJzbWFzayIsInNoYWRpbmdQYXR0ZXJuIiwiZm9udCIsImVycm9yVGlsaW5nUGF0dGVybiIsImVycm9yRXh0R1N0YXRlIiwiZXJyb3JYT2JqZWN0IiwiZXJyb3JGb250TG9hZFR5cGUzIiwiZXJyb3JGb250U3RhdGUiLCJlcnJvckZvbnRNaXNzaW5nIiwiZXJyb3JGb250VHJhbnNsYXRlIiwiZXJyb3JDb2xvclNwYWNlIiwiZXJyb3JPcGVyYXRvckxpc3QiLCJlcnJvckZvbnRUb1VuaWNvZGUiLCJlcnJvckZvbnRMb2FkTmF0aXZlIiwiZXJyb3JGb250R2V0UGF0aCIsImNvbmQiLCJwcm9wIiwiYnVmZmVyOCIsImlzRXZhbFN1cHBvcnRlZCIsInJnYkJ1ZiIsIm0xIiwibTIiLCJwMiIsInAzIiwicDQiLCJ0cmFuc3Bvc2UiLCJzeCIsInN5IiwicmVjdDEiLCJyZWN0MiIsImNvbXBhcmUiLCJvcmRlcmVkWCIsIm9yZGVyZWRZIiwibm9ybWFsaXplUmVjdCIsImNvbnRlbnRUeXBlIiwiZm9yY2VEYXRhU2NoZW1hIiwiaWkiLCJiMSIsImIyIiwiYjMiLCJudyIsImVsZWN0cm9uIiwiUERGUGFnZVByb3h5IiwiUERGRG9jdW1lbnRQcm94eSIsIl9mb250X2xvYWRlciIsIl9jYW52YXMiLCJfaXNfbm9kZSIsIl9tZXNzYWdlX2hhbmRsZXIiLCJfbWV0YWRhdGEiLCJfdHJhbnNwb3J0X3N0cmVhbSIsIl93ZWJnbCIsIkRFRkFVTFRfUkFOR0VfQ0hVTktfU0laRSIsIlJFTkRFUklOR19DQU5DRUxMRURfVElNRU9VVCIsImNyZWF0ZVBERk5ldHdvcmtTdHJlYW0iLCJwZGZOZXR3b3JrU3RyZWFtRmFjdG9yeSIsIlBERkRvY3VtZW50TG9hZGluZ1Rhc2siLCJyYW5nZSIsInJhbmdlVHJhbnNwb3J0Iiwid29ya2VyIiwicGRmQnl0ZXMiLCJyYW5nZUNodW5rU2l6ZSIsIkNNYXBSZWFkZXJGYWN0b3J5IiwiaWdub3JlRXJyb3JzIiwic3RvcEF0RXJyb3JzIiwiZm9udEV4dHJhUHJvcGVydGllcyIsInBkZkJ1ZyIsIm1heEltYWdlU2l6ZSIsImRpc2FibGVGb250RmFjZSIsImRpc2FibGVSYW5nZSIsImRpc2FibGVTdHJlYW0iLCJkaXNhYmxlQXV0b0ZldGNoIiwid29ya2VyUGFyYW1zIiwid29ya2VyUG9ydCIsImZyb21Qb3J0IiwiX3dvcmtlciIsImRvY0lkIiwiZGVzdHJveWVkIiwid29ya2VySWRQcm9taXNlIiwiX2ZldGNoRG9jdW1lbnQiLCJuZXR3b3JrU3RyZWFtUHJvbWlzZSIsIm5ldHdvcmtTdHJlYW0iLCJQREZEYXRhVHJhbnNwb3J0U3RyZWFtIiwiaW5pdGlhbERhdGEiLCJwcm9ncmVzc2l2ZURvbmUiLCJ3b3JrZXJJZCIsIm1lc3NhZ2VIYW5kbGVyIiwiTWVzc2FnZUhhbmRsZXIiLCJwb3N0TWVzc2FnZVRyYW5zZmVycyIsInRyYW5zcG9ydCIsIldvcmtlclRyYW5zcG9ydCIsIl90cmFuc3BvcnQiLCJfY2FwYWJpbGl0eSIsInBkZkRhdGFSYW5nZVRyYW5zcG9ydCIsInNlbmRXaXRoUHJvbWlzZSIsImFwaVZlcnNpb24iLCJkb2NCYXNlVXJsIiwibmV4dERvY3VtZW50SWQiLCJvblVuc3VwcG9ydGVkRmVhdHVyZSIsIl9yYW5nZUxpc3RlbmVycyIsIl9wcm9ncmVzc0xpc3RlbmVycyIsIl9wcm9ncmVzc2l2ZVJlYWRMaXN0ZW5lcnMiLCJfcHJvZ3Jlc3NpdmVEb25lTGlzdGVuZXJzIiwiX3JlYWR5Q2FwYWJpbGl0eSIsInBkZkluZm8iLCJfcGRmSW5mbyIsImZpbmdlcnByaW50IiwicGFnZU51bWJlciIsImdldERlc3RpbmF0aW9ucyIsImdldFBhZ2VMYWJlbHMiLCJnZXRQYWdlTGF5b3V0IiwiZ2V0UGFnZU1vZGUiLCJnZXRWaWV3ZXJQcmVmZXJlbmNlcyIsImdldE9wZW5BY3Rpb24iLCJvcGVuQWN0aW9uIiwiZ2V0QXR0YWNobWVudHMiLCJnZXRKYXZhU2NyaXB0IiwiZ2V0T3V0bGluZSIsImdldFBlcm1pc3Npb25zIiwiZ2V0TWV0YWRhdGEiLCJnZXREYXRhIiwiZG93bmxvYWRJbmZvQ2FwYWJpbGl0eSIsImdldFN0YXRzIiwic3RhcnRDbGVhbnVwIiwibG9hZGluZ1Rhc2siLCJsb2FkaW5nUGFyYW1zIiwicGFnZUluZm8iLCJfcGFnZUluZGV4IiwiX3BhZ2VJbmZvIiwiX3N0YXRzIiwiX3BkZkJ1ZyIsIlBERk9iamVjdHMiLCJjbGVhbnVwQWZ0ZXJSZW5kZXIiLCJwZW5kaW5nQ2xlYW51cCIsImludGVudFN0YXRlcyIsInVzZXJVbml0IiwiYW5ub3RhdGlvbnNQcm9taXNlIiwiYW5ub3RhdGlvbnNJbnRlbnQiLCJlbmFibGVXZWJHTCIsInJlbmRlckludGVyYWN0aXZlRm9ybXMiLCJpbWFnZUxheWVyIiwiY2FudmFzRmFjdG9yeSIsImJhY2tncm91bmQiLCJyZW5kZXJpbmdJbnRlbnQiLCJpbnRlbnRTdGF0ZSIsInN0cmVhbVJlYWRlckNhbmNlbFRpbWVvdXQiLCJjbGVhclRpbWVvdXQiLCJjYW52YXNGYWN0b3J5SW5zdGFuY2UiLCJ3ZWJHTENvbnRleHQiLCJXZWJHTENvbnRleHQiLCJlbmFibGUiLCJkaXNwbGF5UmVhZHlDYXBhYmlsaXR5Iiwib3BlcmF0b3JMaXN0IiwiZm5BcnJheSIsImFyZ3NBcnJheSIsImxhc3RDaHVuayIsIl9wdW1wT3BlcmF0b3JMaXN0IiwiY29tcGxldGUiLCJyZW5kZXJUYXNrcyIsImludGVybmFsUmVuZGVyVGFzayIsIl90cnlDbGVhbnVwIiwiX2Fib3J0T3BlcmF0b3JMaXN0IiwidGltZUVuZCIsIkludGVybmFsUmVuZGVyVGFzayIsInVzZVJlcXVlc3RBbmltYXRpb25GcmFtZSIsInJlbmRlclRhc2siLCJ0cmFuc3BhcmVuY3kiLCJpbml0aWFsaXplR3JhcGhpY3MiLCJvcGVyYXRvckxpc3RDaGFuZ2VkIiwib3BMaXN0VGFzayIsIm9wTGlzdFJlYWRDYXBhYmlsaXR5Iiwibm9ybWFsaXplV2hpdGVzcGFjZSIsImRpc2FibGVDb21iaW5lVGV4dEl0ZW1zIiwic2VuZFdpdGhTdHJlYW0iLCJjb21iaW5lVGV4dEl0ZW1zIiwiaGlnaFdhdGVyTWFyayIsIml0ZW1zIiwicmVhZGFibGVTdHJlYW0iLCJzdHJlYW1UZXh0Q29udGVudCIsInJlYWRlciIsImdldFJlYWRlciIsInN0eWxlcyIsInB1bXAiLCJyZWFkIiwicGFnZUNhY2hlIiwid2FpdE9uIiwiZm9yY2UiLCJyZW5kZXJDb21wbGV0ZWQiLCJyZXNldFN0YXRzIiwib3BlcmF0b3JMaXN0Q2h1bmsiLCJzdHJlYW1SZWFkZXIiLCJfcmVuZGVyUGFnZUNodW5rIiwiY2xlYW51cCIsIl9saXN0ZW5lcnMiLCJfZGVmZXIiLCJfZGVmZXJyZWQiLCJ0cmFuc2ZlcnMiLCJjbG9uZWQiLCJjbG9uZVZhbHVlIiwiUERGV29ya2VyQ2xvc3VyZSIsInBkZldvcmtlclBvcnRzIiwiaXNXb3JrZXJEaXNhYmxlZCIsImZhbGxiYWNrV29ya2VyU3JjIiwibmV4dEZha2VXb3JrZXJJZCIsImZha2VXb3JrZXJDYXBhYmlsaXR5IiwicGRmanNGaWxlUGF0aCIsImN1cnJlbnRTY3JpcHQiLCJnZXRXb3JrZXJTcmMiLCJ3b3JrZXJTcmMiLCJnZXRNYWluVGhyZWFkV29ya2VyTWVzc2FnZUhhbmRsZXIiLCJtYWluV29ya2VyTWVzc2FnZUhhbmRsZXIiLCJwZGZqc1dvcmtlciIsIldvcmtlck1lc3NhZ2VIYW5kbGVyIiwic2V0dXBGYWtlV29ya2VyR2xvYmFsIiwibG9hZGVyIiwiZXZhbCIsImNyZWF0ZUNETldyYXBwZXIiLCJfcG9ydCIsIl93ZWJXb3JrZXIiLCJfbWVzc2FnZUhhbmRsZXIiLCJfaW5pdGlhbGl6ZUZyb21Qb3J0IiwiX2luaXRpYWxpemUiLCJvbiIsIldvcmtlciIsInRlcm1pbmF0ZUVhcmx5IiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsIm9uV29ya2VyRXJyb3IiLCJ0ZXJtaW5hdGUiLCJfc2V0dXBGYWtlV29ya2VyIiwic3VwcG9ydFRyYW5zZmVycyIsInNlbmRUZXN0IiwidGVzdE9iaiIsIndvcmtlckhhbmRsZXIiLCJzZXR1cCIsImRlbGV0ZSIsImZvbnRMb2FkZXIiLCJGb250TG9hZGVyIiwiX29uVW5zdXBwb3J0ZWRGZWF0dXJlIiwiX3BhcmFtcyIsImRlc3Ryb3lDYXBhYmlsaXR5IiwiX3Bhc3N3b3JkQ2FwYWJpbGl0eSIsIl9uZXR3b3JrU3RyZWFtIiwiX2Z1bGxSZWFkZXIiLCJfbGFzdFByb2dyZXNzIiwicGFnZVByb21pc2VzIiwic2V0dXBNZXNzYWdlSGFuZGxlciIsIl9kZXN0cm95IiwidGVybWluYXRlZCIsImNhbmNlbEFsbFJlcXVlc3RzIiwic2luayIsImdldEZ1bGxSZWFkZXIiLCJldnQiLCJvblB1bGwiLCJlbnF1ZXVlIiwib25DYW5jZWwiLCJoZWFkZXJzQ2FwYWJpbGl0eSIsImZ1bGxSZWFkZXIiLCJoZWFkZXJzUmVhZHkiLCJpc1N0cmVhbWluZ1N1cHBvcnRlZCIsImlzUmFuZ2VTdXBwb3J0ZWQiLCJjb250ZW50TGVuZ3RoIiwicmFuZ2VSZWFkZXIiLCJnZXRSYW5nZVJlYWRlciIsIl9udW1QYWdlcyIsImV4Y2VwdGlvbiIsInVwZGF0ZVBhc3N3b3JkIiwiX3N0YXJ0UmVuZGVyUGFnZSIsImV4cG9ydGVkRGF0YSIsImV4cG9ydGVkRXJyb3IiLCJmb250UmVnaXN0cnkiLCJGb250SW5zcGVjdG9yIiwiZm9udEFkZGVkIiwiRm9udEZhY2VPYmplY3QiLCJmaW5hbGx5IiwiaW1hZ2VEYXRhIiwicGFnZVByb3h5IiwiTUFYX0lNQUdFX1NJWkVfVE9fU1RPUkUiLCJmZXRjaGVkIiwiYnVpbHRJbkNNYXAiLCJmZWF0dXJlSWQiLCJNZXRhZGF0YSIsImNvbnRlbnREaXNwb3NpdGlvbkZpbGVuYW1lIiwiX29ianMiLCJvYmpJZCIsInJlc29sdmVkIiwiX2Vuc3VyZU9iaiIsIlJlbmRlclRhc2siLCJfaW50ZXJuYWxSZW5kZXJUYXNrIiwib25Db250aW51ZSIsImNhbnZhc0luUmVuZGVyaW5nIiwiV2Vha1NldCIsIm9wZXJhdG9yTGlzdElkeCIsInJ1bm5pbmciLCJncmFwaGljc1JlYWR5Q2FsbGJhY2siLCJncmFwaGljc1JlYWR5IiwiX3VzZVJlcXVlc3RBbmltYXRpb25GcmFtZSIsImNhbmNlbGxlZCIsIl9jb250aW51ZUJvdW5kIiwiX2NvbnRpbnVlIiwiX3NjaGVkdWxlTmV4dEJvdW5kIiwiX3NjaGVkdWxlTmV4dCIsIl9uZXh0Qm91bmQiLCJfbmV4dCIsIlN0ZXBwZXJNYW5hZ2VyIiwic3RlcHBlciIsIm5leHRCcmVha1BvaW50IiwiZ2V0TmV4dEJyZWFrUG9pbnQiLCJnZngiLCJDYW52YXNHcmFwaGljcyIsImJlZ2luRHJhd2luZyIsImVuZERyYXdpbmciLCJ1cGRhdGVPcGVyYXRvckxpc3QiLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJleGVjdXRlT3BlcmF0b3JMaXN0IiwiQmFzZUZvbnRMb2FkZXIiLCJuYXRpdmVGb250RmFjZXMiLCJzdHlsZUVsZW1lbnQiLCJuYXRpdmVGb250RmFjZSIsImZvbnRzIiwicnVsZSIsImdldEVsZW1lbnRzQnlUYWdOYW1lIiwic3R5bGVTaGVldCIsInNoZWV0IiwiaW5zZXJ0UnVsZSIsImNzc1J1bGVzIiwicmVtb3ZlIiwiYXR0YWNoZWQiLCJtaXNzaW5nRmlsZSIsImlzRm9udExvYWRpbmdBUElTdXBwb3J0ZWQiLCJjcmVhdGVOYXRpdmVGb250RmFjZSIsImFkZE5hdGl2ZUZvbnRGYWNlIiwiZmFtaWx5IiwiY3JlYXRlRm9udEZhY2VSdWxlIiwiaXNTeW5jRm9udExvYWRpbmdTdXBwb3J0ZWQiLCJfcXVldWVMb2FkaW5nQ2FsbGJhY2siLCJfcHJlcGFyZUZvbnRMb2FkRXZlbnQiLCJzdXBwb3J0ZWQiLCJydWxlcyIsImZvbnRzVG9Mb2FkIiwibG9hZGluZ0NvbnRleHQiLCJyZXF1ZXN0cyIsIm5leHRSZXF1ZXN0SWQiLCJsb2FkVGVzdEZvbnRJZCIsIm5hdmlnYXRvciIsIm90aGVyUmVxdWVzdCIsImF0b2IiLCJpbnQzMiIsInNwbGljZVN0cmluZyIsImluc2VydCIsImN0eCIsIl9sb2FkVGVzdEZvbnQiLCJYWFhYX1ZBTFVFIiwiY2hlY2tzdW0iLCJidG9hIiwibG9hZGVkTmFtZSIsInZpc2liaWxpdHkiLCJzcGFuIiwiZm9udEZhbWlseSIsImlzRm9udFJlYWR5IiwiZmlsbFRleHQiLCJnZXRJbWFnZURhdGEiLCJ0cmFuc2xhdGVkRGF0YSIsImNvbXBpbGVkR2x5cGhzIiwiRm9udEZhY2UiLCJyZWdpc3RlckZvbnQiLCJtaW1ldHlwZSIsImNoYXJhY3RlciIsImNtZHMiLCJqcyIsImNtZCIsImNvbXBhdGliaWxpdHlQYXJhbXMiLCJfcGF0dGVybl9oZWxwZXIiLCJNQVhfR1JPVVBfU0laRSIsIk1JTl9XSURUSF9GQUNUT1IiLCJGVUxMX0NIVU5LX0hFSUdIVCIsImFkZENvbnRleHRDdXJyZW50VHJhbnNmb3JtIiwibW96Q3VycmVudFRyYW5zZm9ybSIsIl9vcmlnaW5hbFNhdmUiLCJfb3JpZ2luYWxSZXN0b3JlIiwiX29yaWdpbmFsUm90YXRlIiwiX29yaWdpbmFsU2NhbGUiLCJfb3JpZ2luYWxUcmFuc2xhdGUiLCJ0cmFuc2xhdGUiLCJfb3JpZ2luYWxUcmFuc2Zvcm0iLCJfb3JpZ2luYWxTZXRUcmFuc2Zvcm0iLCJzZXRUcmFuc2Zvcm0iLCJfdHJhbnNmb3JtTWF0cml4IiwiX3RyYW5zZm9ybVN0YWNrIiwiYWRfYmMiLCJiY19hZCIsIm9sZCIsImFuZ2xlIiwiY29zVmFsdWUiLCJjb3MiLCJzaW5WYWx1ZSIsInNpbiIsIkNhY2hlZENhbnZhc2VzIiwiZ2V0Q2FudmFzIiwidHJhY2tUcmFuc2Zvcm0iLCJjYW52YXNFbnRyeSIsInJlc2V0IiwiQ2FudmFzRXh0cmFTdGF0ZSIsImFscGhhSXNTaGFwZSIsImZvbnRTaXplIiwiZm9udFNpemVTY2FsZSIsInRleHRNYXRyaXgiLCJ0ZXh0TWF0cml4U2NhbGUiLCJmb250TWF0cml4IiwibGVhZGluZyIsImxpbmVYIiwibGluZVkiLCJjaGFyU3BhY2luZyIsIndvcmRTcGFjaW5nIiwidGV4dEhTY2FsZSIsInRleHRSZW5kZXJpbmdNb2RlIiwidGV4dFJpc2UiLCJmaWxsQ29sb3IiLCJzdHJva2VDb2xvciIsInBhdHRlcm5GaWxsIiwiZmlsbEFscGhhIiwic3Ryb2tlQWxwaGEiLCJsaW5lV2lkdGgiLCJhY3RpdmVTTWFzayIsInJlc3VtZVNNYXNrQ3R4Iiwic2V0Q3VycmVudFBvaW50IiwiY2FudmFzQ3R4Iiwic3RhdGVTdGFjayIsInBlbmRpbmdDbGlwIiwicGVuZGluZ0VPRmlsbCIsInhvYmpzIiwiZ3JvdXBTdGFjayIsInByb2Nlc3NpbmdUeXBlMyIsImJhc2VUcmFuc2Zvcm0iLCJiYXNlVHJhbnNmb3JtU3RhY2siLCJncm91cExldmVsIiwic21hc2tTdGFjayIsInNtYXNrQ291bnRlciIsInRlbXBTTWFzayIsImNhY2hlZENhbnZhc2VzIiwiX2NhY2hlZEdldFNpbmdsZVBpeGVsV2lkdGgiLCJwdXRCaW5hcnlJbWFnZURhdGEiLCJpbWdEYXRhIiwiSW1hZ2VEYXRhIiwicHV0SW1hZ2VEYXRhIiwiZGVzdFBvcyIsInRoaXNDaHVua0hlaWdodCIsImVsZW1zSW5UaGlzQ2h1bmsiLCJwYXJ0aWFsQ2h1bmtIZWlnaHQiLCJmdWxsQ2h1bmtzIiwidG90YWxDaHVua3MiLCJjaHVua0ltZ0RhdGEiLCJjcmVhdGVJbWFnZURhdGEiLCJzcmNQb3MiLCJzcmNMZW5ndGgiLCJkZXN0MzIiLCJkZXN0MzJEYXRhTGVuZ3RoIiwiZnVsbFNyY0RpZmYiLCJ3aGl0ZSIsImJsYWNrIiwic3JjRGlmZiIsImtFbmQiLCJrRW5kVW5yb2xsZWQiLCJtYXNrIiwic3JjQnl0ZSIsInB1dEJpbmFyeUltYWdlTWFzayIsImVsZW0iLCJjb3B5Q3R4U3RhdGUiLCJzb3VyY2VDdHgiLCJkZXN0Q3R4Iiwic2V0TGluZURhc2giLCJnZXRMaW5lRGFzaCIsImxpbmVEYXNoT2Zmc2V0IiwicmVzZXRDdHhUb0RlZmF1bHQiLCJzdHJva2VTdHlsZSIsImZpbGxTdHlsZSIsImZpbGxSdWxlIiwiZ2xvYmFsQWxwaGEiLCJsaW5lQ2FwIiwibGluZUpvaW4iLCJtaXRlckxpbWl0IiwiZ2xvYmFsQ29tcG9zaXRlT3BlcmF0aW9uIiwiY29tcG9zZVNNYXNrQmFja2Ryb3AiLCJyMCIsImcwIiwiYjAiLCJhbHBoYV8iLCJjb21wb3NlU01hc2tBbHBoYSIsIm1hc2tEYXRhIiwibGF5ZXJEYXRhIiwidHJhbnNmZXJNYXAiLCJjb21wb3NlU01hc2tMdW1pbm9zaXR5IiwiY29tcG9zZVNNYXNrIiwibGF5ZXJDdHgiLCJtYXNrQ3R4Iiwic2NhbGVYIiwic2NhbGVZIiwiYmFja2Ryb3AiLCJpc0VuYWJsZWQiLCJjb21wb3NlZCIsImxheWVyIiwic3VidHlwZSIsImRyYXdJbWFnZSIsImNvbXBvc2VGbiIsImhhc0JhY2tkcm9wIiwiY2h1bmtTaXplIiwicm93IiwiY2h1bmtIZWlnaHQiLCJnZW5lcmljQ29tcG9zZVNNYXNrIiwiTElORV9DQVBfU1RZTEVTIiwiTElORV9KT0lOX1NUWUxFUyIsIk5PUk1BTF9DTElQIiwiRU9fQ0xJUCIsIm9wIiwiZmlsbFJlY3QiLCJ0cmFuc3BhcmVudENhbnZhcyIsImNvbXBvc2l0ZUN0eCIsImJlZ2luTGF5b3V0IiwiZXhlY3V0aW9uU3RhcnRJZHgiLCJjb250aW51ZUNhbGxiYWNrIiwiYXJnc0FycmF5TGVuIiwiZm5JZCIsImNodW5rT3BlcmF0aW9ucyIsImVuZFRpbWUiLCJzdGVwcyIsImJyZWFrSXQiLCJkZXBPYmpJZCIsIm9ianNQb29sIiwiZW5kU01hc2tHcm91cCIsImVuZExheW91dCIsImRhc2hBcnJheSIsImRhc2hQaGFzZSIsImZsYXRuZXNzIiwic3RhdGVzIiwic3VzcGVuZFNNYXNrR3JvdXAiLCJiZWdpblNNYXNrR3JvdXAiLCJkcmF3bldpZHRoIiwiZHJhd25IZWlnaHQiLCJjYWNoZUlkIiwic2NyYXRjaENhbnZhcyIsImN1cnJlbnRDdHgiLCJjdXJyZW50VHJhbnNmb3JtIiwiZ3JvdXBDdHgiLCJzdGFydFRyYW5zZm9ybUludmVyc2UiLCJtb3pDdXJyZW50VHJhbnNmb3JtSW52ZXJzZSIsImRlbHRhVHJhbnNmb3JtIiwiY2xlYXJSZWN0IiwicmVzdW1lU01hc2tHcm91cCIsIm9wcyIsImdldFNpbmdsZVBpeGVsV2lkdGgiLCJ4dyIsInloIiwiYmV6aWVyQ3VydmVUbyIsImNvbnN1bWVQYXRoIiwic2luZ3VsYXJWYWx1ZURlY29tcG9zZTJkU2NhbGUiLCJnZXRQYXR0ZXJuIiwibmVlZFJlc3RvcmUiLCJwYXRocyIsInBlbmRpbmdUZXh0UGF0aHMiLCJiZWdpblBhdGgiLCJhZGRUb1BhdGgiLCJzcGFjaW5nIiwiZm9udFJlZk5hbWUiLCJmb250T2JqIiwiZm9udERpcmVjdGlvbiIsImlzVHlwZTNGb250IiwiaXRhbGljIiwidHlwZWZhY2UiLCJmYWxsYmFja05hbWUiLCJicm93c2VyRm9udFNpemUiLCJyaXNlIiwicGF0dGVyblRyYW5zZm9ybSIsImZpbGxTdHJva2VNb2RlIiwiaXNBZGRUb1BhdGhTZXQiLCJnZXRQYXRoR2VuZXJhdG9yIiwic3Ryb2tlVGV4dCIsImdseXBocyIsInNob3dUeXBlM1RleHQiLCJnbHlwaHNMZW5ndGgiLCJ2ZXJ0aWNhbCIsInNwYWNpbmdEaXIiLCJkZWZhdWx0Vk1ldHJpY3MiLCJ3aWR0aEFkdmFuY2VTY2FsZSIsInNpbXBsZUZpbGxUZXh0IiwiZ2x5cGgiLCJzY2FsZWRYIiwic2NhbGVkWSIsInNjYWxlZEFjY2VudFgiLCJzY2FsZWRBY2NlbnRZIiwidm1ldHJpYyIsInZ4IiwidnkiLCJyZXN0b3JlTmVlZGVkIiwiaXNTcGFjZSIsImZvbnRDaGFyIiwiYWNjZW50IiwicmVtZWFzdXJlIiwibWVhc3VyZWRXaWR0aCIsIm1lYXN1cmVUZXh0IiwiaXNGb250U3VicGl4ZWxBQUVuYWJsZWQiLCJjaGFyYWN0ZXJTY2FsZVgiLCJpc0luRm9udCIsInBhaW50Q2hhciIsInNwYWNpbmdMZW5ndGgiLCJjaGFyUHJvY09wZXJhdG9yTGlzdCIsIm9wZXJhdG9yTGlzdElkIiwieFdpZHRoIiwieVdpZHRoIiwibGx4IiwibGx5IiwidXJ4IiwidXJ5IiwiZ2V0Q29sb3JOX1BhdHRlcm4iLCJJUiIsImNhbnZhc0dyYXBoaWNzRmFjdG9yeSIsImNyZWF0ZUNhbnZhc0dyYXBoaWNzIiwiVGlsaW5nUGF0dGVybiIsImdldFNoYWRpbmdQYXR0ZXJuRnJvbUlSIiwibWFrZUNzc1JnYiIsInBhdHRlcm5JUiIsImludiIsImJsIiwiYnIiLCJ1bCIsInVyIiwieDAiLCJ5MCIsIm1hdHJpeCIsImJib3giLCJncm91cCIsImlzb2xhdGVkIiwia25vY2tvdXQiLCJib3VuZHMiLCJnZXRBeGlhbEFsaWduZWRCb3VuZGluZ0JveCIsImNhbnZhc0JvdW5kcyIsImludGVyc2VjdCIsImltYWdlU21vb3RoaW5nRW5hYmxlZCIsIm1vekltYWdlU21vb3RoaW5nRW5hYmxlZCIsImltZyIsImlzUGF0dGVybkZpbGwiLCJjb21waWxlZCIsImowIiwid2lkdGgxIiwiUE9JTlRfVFlQRVMiLCJsaW5lU2l6ZSIsImRhdGEwIiwib3V0bGluZXMiLCJwcCIsImNvb3JkcyIsInAwIiwia2siLCJsbCIsImNvbXBpbGVUeXBlM0dseXBoIiwibWFza0NhbnZhcyIsInBvc2l0aW9ucyIsImltYWdlcyIsImltYWdlIiwiaW1nVG9QYWludCIsInRtcENhbnZhcyIsIndpZHRoU2NhbGUiLCJoZWlnaHRTY2FsZSIsIkhUTUxFbGVtZW50IiwidG1wQ3R4IiwicGFpbnRXaWR0aCIsInBhaW50SGVpZ2h0IiwidG1wQ2FudmFzSWQiLCJuZXdXaWR0aCIsIm5ld0hlaWdodCIsImdldENhbnZhc1Bvc2l0aW9uIiwiYXBwZW5kSW1hZ2UiLCJpbnZlcnNlIiwic2hhZGluZ0lSIiwiU2hhZGluZ0lScyIsImZyb21JUiIsImFwcGx5Qm91bmRpbmdCb3giLCJQYXRoMkQiLCJyZWdpb24iLCJSYWRpYWxBeGlhbCIsImNvbG9yU3RvcHMiLCJyMSIsImdyYWQiLCJjcmVhdGVMaW5lYXJHcmFkaWVudCIsImNyZWF0ZVJhZGlhbEdyYWRpZW50IiwiYWRkQ29sb3JTdG9wIiwiY3JlYXRlTWVzaENhbnZhcyIsImRyYXdUcmlhbmdsZSIsImMxIiwiYzMiLCJ0bXAiLCJjb2xvcnMiLCJyb3dTaXplIiwieDMiLCJ5MyIsInhhIiwiY2FyIiwiY2FnIiwiY2FiIiwieGIiLCJjYnIiLCJjYmciLCJjYmIiLCJjMXIiLCJjMWciLCJjMWIiLCJjMnIiLCJjMmciLCJjMmIiLCJjM3IiLCJjM2ciLCJjM2IiLCJtaW5ZIiwibWF4WSIsIngxXyIsIngyXyIsImRyYXdGaWd1cmUiLCJmaWd1cmUiLCJwcyIsImNzIiwidmVydGljZXNQZXJSb3ciLCJyb3dzIiwiY29scyIsImNvbWJpbmVzU2NhbGUiLCJmaWd1cmVzIiwiYmFja2dyb3VuZENvbG9yIiwiYm91bmRzV2lkdGgiLCJib3VuZHNIZWlnaHQiLCJwYWRkZWRXaWR0aCIsIkJPUkRFUl9TSVpFIiwicGFkZGVkSGVpZ2h0IiwiZHJhd0ZpZ3VyZXMiLCJNZXNoIiwib3duZXIiLCJtYXRyaXhTY2FsZSIsInRlbXBvcmFyeVBhdHRlcm5DYW52YXMiLCJjcmVhdGVQYXR0ZXJuIiwiRHVtbXkiLCJ4c3RlcCIsInlzdGVwIiwicGFpbnRUeXBlIiwidGlsaW5nVHlwZSIsImNyZWF0ZVBhdHRlcm5DYW52YXMiLCJjdXJNYXRyaXhTY2FsZSIsImNvbWJpbmVkU2NhbGUiLCJkaW14IiwiZ2V0U2l6ZUFuZFNjYWxlIiwiZGlteSIsImdyYXBoaWNzIiwic2V0RmlsbEFuZFN0cm9rZVN0eWxlVG9Db250ZXh0IiwiY2xpcEJib3giLCJyZWFsT3V0cHV0U2l6ZSIsIm1heFNpemUiLCJiYm94V2lkdGgiLCJiYm94SGVpZ2h0IiwiY3NzQ29sb3IiLCJ3cmFwUmVhc29uIiwic291cmNlTmFtZSIsInRhcmdldE5hbWUiLCJjb21PYmoiLCJjYWxsYmFja0lkIiwic3RyZWFtSWQiLCJzdHJlYW1TaW5rcyIsInN0cmVhbUNvbnRyb2xsZXJzIiwiY2FsbGJhY2tDYXBhYmlsaXRpZXMiLCJhY3Rpb25IYW5kbGVyIiwiX29uQ29tT2JqT25NZXNzYWdlIiwic3RyZWFtIiwiX3Byb2Nlc3NTdHJlYW1NZXNzYWdlIiwiY2JTb3VyY2VOYW1lIiwiY2JUYXJnZXROYW1lIiwiX2NyZWF0ZVN0cmVhbVNpbmsiLCJhY3Rpb25OYW1lIiwiYWgiLCJfcG9zdE1lc3NhZ2UiLCJxdWV1ZWluZ1N0cmF0ZWd5IiwiY29udHJvbGxlciIsInN0YXJ0Q2FwYWJpbGl0eSIsInN0YXJ0Q2FsbCIsInB1bGxDYWxsIiwiY2FuY2VsQ2FsbCIsImlzQ2xvc2VkIiwiZGVzaXJlZFNpemUiLCJwdWxsIiwicHVsbENhcGFiaWxpdHkiLCJjYW5jZWxDYXBhYmlsaXR5Iiwic3RyZWFtU2luayIsImlzQ2FuY2VsbGVkIiwibGFzdERlc2lyZWRTaXplIiwic2lua0NhcGFiaWxpdHkiLCJyZWFkeSIsInN1Y2Nlc3MiLCJfZGVsZXRlU3RyZWFtQ29udHJvbGxlciIsIl94bWxfcGFyc2VyIiwiX3JlcGFpciIsInhtbERvY3VtZW50IiwiU2ltcGxlWE1MUGFyc2VyIiwicGFyc2VGcm9tU3RyaW5nIiwiX21ldGFkYXRhTWFwIiwiTWFwIiwiX3BhcnNlIiwiY29kZXMiLCJkMSIsImQyIiwiZDMiLCJjaGFycyIsInJkZiIsIm5vZGVOYW1lIiwiZmlyc3RDaGlsZCIsIm5leHRTaWJsaW5nIiwiaGFzQ2hpbGROb2RlcyIsImpqIiwiaXNXaGl0ZXNwYWNlIiwiU2ltcGxlRE9NTm9kZSIsIm5vZGVWYWx1ZSIsInBhcmVudE5vZGUiLCJjaGlsZCIsImVudGl0eSIsIm9uUmVzb2x2ZUVudGl0eSIsInNraXBXcyIsImF0dHJOYW1lIiwiYXR0clZhbHVlIiwiYXR0ckVuZENoYXIiLCJhdHRyRW5kSW5kZXgiLCJfcmVzb2x2ZUVudGl0aWVzIiwicGFyc2VkIiwiYXR0clN0YXJ0Iiwib25FcnJvciIsIm9uRW5kRWxlbWVudCIsInBpIiwiX3BhcnNlUHJvY2Vzc2luZ0luc3RydWN0aW9uIiwib25QaSIsIm9uQ29tbWVudCIsIm9uQ2RhdGEiLCJxMiIsImNvbXBsZXhEb2N0eXBlIiwiZG9jdHlwZUNvbnRlbnQiLCJvbkRvY3R5cGUiLCJfcGFyc2VDb250ZW50Iiwib25CZWdpbkVsZW1lbnQiLCJvblRleHQiLCJpc0VtcHR5IiwiX2N1cnJlbnRGcmFnbWVudCIsIl9zdGFjayIsIl9lcnJvckNvZGUiLCJwYXJzZVhtbCIsImlzV2hpdGVzcGFjZVN0cmluZyIsImxhc3RFbGVtZW50IiwiX3F1ZXVlZENodW5rcyIsIl9wcm9ncmVzc2l2ZURvbmUiLCJfcGRmRGF0YVJhbmdlVHJhbnNwb3J0IiwiX2lzU3RyZWFtaW5nU3VwcG9ydGVkIiwiX2lzUmFuZ2VTdXBwb3J0ZWQiLCJfY29udGVudExlbmd0aCIsIl9mdWxsUmVxdWVzdFJlYWRlciIsIl9yYW5nZVJlYWRlcnMiLCJhZGRSYW5nZUxpc3RlbmVyIiwiX29uUmVjZWl2ZURhdGEiLCJhZGRQcm9ncmVzc0xpc3RlbmVyIiwiX29uUHJvZ3Jlc3MiLCJhZGRQcm9ncmVzc2l2ZVJlYWRMaXN0ZW5lciIsImFkZFByb2dyZXNzaXZlRG9uZUxpc3RlbmVyIiwiX29uUHJvZ3Jlc3NpdmVEb25lIiwidHJhbnNwb3J0UmVhZHkiLCJfZW5xdWV1ZSIsIl9iZWdpbiIsIl9sb2FkZWQiLCJmaXJzdFJlYWRlciIsInF1ZXVlZENodW5rcyIsIlBERkRhdGFUcmFuc3BvcnRTdHJlYW1SZWFkZXIiLCJfcHJvZ3Jlc3NpdmVEYXRhTGVuZ3RoIiwiUERGRGF0YVRyYW5zcG9ydFN0cmVhbVJhbmdlUmVhZGVyIiwicmVxdWVzdERhdGFSYW5nZSIsImFib3J0IiwiX3N0cmVhbSIsIl9kb25lIiwiX2ZpbGVuYW1lIiwiX3JlcXVlc3RzIiwiX2hlYWRlcnNSZWFkeSIsInJlcXVlc3RDYXBhYmlsaXR5IiwiX2VuZCIsIl9xdWV1ZWRDaHVuayIsIl9yZW1vdmVSYW5nZVJlYWRlciIsIl9lbmFibGVkIiwiV2ViR0xVdGlscyIsInRyeUluaXRHTCIsImxvYWRTaGFkZXIiLCJnbCIsInNoYWRlclR5cGUiLCJzaGFkZXIiLCJjcmVhdGVTaGFkZXIiLCJzaGFkZXJTb3VyY2UiLCJjb21waWxlU2hhZGVyIiwiZ2V0U2hhZGVyUGFyYW1ldGVyIiwiQ09NUElMRV9TVEFUVVMiLCJlcnJvck1zZyIsImdldFNoYWRlckluZm9Mb2ciLCJjcmVhdGVWZXJ0ZXhTaGFkZXIiLCJWRVJURVhfU0hBREVSIiwiY3JlYXRlRnJhZ21lbnRTaGFkZXIiLCJGUkFHTUVOVF9TSEFERVIiLCJjcmVhdGVQcm9ncmFtIiwic2hhZGVycyIsInByb2dyYW0iLCJhdHRhY2hTaGFkZXIiLCJsaW5rUHJvZ3JhbSIsImdldFByb2dyYW1QYXJhbWV0ZXIiLCJMSU5LX1NUQVRVUyIsImdldFByb2dyYW1JbmZvTG9nIiwiY3JlYXRlVGV4dHVyZSIsInRleHR1cmVJZCIsImFjdGl2ZVRleHR1cmUiLCJ0ZXh0dXJlIiwiYmluZFRleHR1cmUiLCJURVhUVVJFXzJEIiwidGV4UGFyYW1ldGVyaSIsIlRFWFRVUkVfV1JBUF9TIiwiQ0xBTVBfVE9fRURHRSIsIlRFWFRVUkVfV1JBUF9UIiwiVEVYVFVSRV9NSU5fRklMVEVSIiwiTkVBUkVTVCIsIlRFWFRVUkVfTUFHX0ZJTFRFUiIsInRleEltYWdlMkQiLCJSR0JBIiwiVU5TSUdORURfQllURSIsImN1cnJlbnRHTCIsImN1cnJlbnRDYW52YXMiLCJnZW5lcmF0ZUdMIiwicHJlbXVsdGlwbGllZGFscGhhIiwic21hc2tDYWNoZSIsImZpZ3VyZXNDYWNoZSIsInVzZVByb2dyYW0iLCJyZXNvbHV0aW9uTG9jYXRpb24iLCJnZXRVbmlmb3JtTG9jYXRpb24iLCJwb3NpdGlvbkxvY2F0aW9uIiwiZ2V0QXR0cmliTG9jYXRpb24iLCJiYWNrZHJvcExvY2F0aW9uIiwic3VidHlwZUxvY2F0aW9uIiwidGV4Q29vcmRMb2NhdGlvbiIsInRleExheWVyTG9jYXRpb24iLCJ0ZXhNYXNrTG9jYXRpb24iLCJ0ZXhDb29yZEJ1ZmZlciIsImNyZWF0ZUJ1ZmZlciIsImJpbmRCdWZmZXIiLCJidWZmZXJEYXRhIiwiU1RBVElDX0RSQVciLCJlbmFibGVWZXJ0ZXhBdHRyaWJBcnJheSIsInZlcnRleEF0dHJpYlBvaW50ZXIiLCJGTE9BVCIsInVuaWZvcm0xaSIsImluaXRTbWFza0dMIiwiZHJhd2luZ0J1ZmZlcldpZHRoIiwiZHJhd2luZ0J1ZmZlckhlaWdodCIsInVuaWZvcm0yZiIsInVuaWZvcm00ZiIsIlRFWFRVUkUwIiwibWFza1RleHR1cmUiLCJURVhUVVJFMSIsImNsZWFyQ29sb3IiLCJCTEVORCIsImJsZW5kRnVuYyIsIk9ORSIsIk9ORV9NSU5VU19TUkNfQUxQSEEiLCJDT0xPUl9CVUZGRVJfQklUIiwiZHJhd0FycmF5cyIsIlRSSUFOR0xFUyIsImRlbGV0ZVRleHR1cmUiLCJkZWxldGVCdWZmZXIiLCJzY2FsZUxvY2F0aW9uIiwib2Zmc2V0TG9jYXRpb24iLCJjb2xvckxvY2F0aW9uIiwiaW5pdEZpZ3VyZXNHTCIsImNvb3Jkc01hcCIsImNvbG9yc01hcCIsInBJbmRleCIsImNJbmRleCIsImNvbCIsImNvb3Jkc0J1ZmZlciIsImNvbG9yc0J1ZmZlciIsIkFubm90YXRpb25FbGVtZW50RmFjdG9yeSIsInBhcmFtZXRlcnMiLCJMaW5rQW5ub3RhdGlvbkVsZW1lbnQiLCJUZXh0QW5ub3RhdGlvbkVsZW1lbnQiLCJmaWVsZFR5cGUiLCJUZXh0V2lkZ2V0QW5ub3RhdGlvbkVsZW1lbnQiLCJyYWRpb0J1dHRvbiIsIlJhZGlvQnV0dG9uV2lkZ2V0QW5ub3RhdGlvbkVsZW1lbnQiLCJjaGVja0JveCIsIkNoZWNrYm94V2lkZ2V0QW5ub3RhdGlvbkVsZW1lbnQiLCJQdXNoQnV0dG9uV2lkZ2V0QW5ub3RhdGlvbkVsZW1lbnQiLCJDaG9pY2VXaWRnZXRBbm5vdGF0aW9uRWxlbWVudCIsIldpZGdldEFubm90YXRpb25FbGVtZW50IiwiUG9wdXBBbm5vdGF0aW9uRWxlbWVudCIsIkZyZWVUZXh0QW5ub3RhdGlvbkVsZW1lbnQiLCJMaW5lQW5ub3RhdGlvbkVsZW1lbnQiLCJTcXVhcmVBbm5vdGF0aW9uRWxlbWVudCIsIkNpcmNsZUFubm90YXRpb25FbGVtZW50IiwiUG9seWxpbmVBbm5vdGF0aW9uRWxlbWVudCIsIkNhcmV0QW5ub3RhdGlvbkVsZW1lbnQiLCJJbmtBbm5vdGF0aW9uRWxlbWVudCIsIlBvbHlnb25Bbm5vdGF0aW9uRWxlbWVudCIsIkhpZ2hsaWdodEFubm90YXRpb25FbGVtZW50IiwiVW5kZXJsaW5lQW5ub3RhdGlvbkVsZW1lbnQiLCJTcXVpZ2dseUFubm90YXRpb25FbGVtZW50IiwiU3RyaWtlT3V0QW5ub3RhdGlvbkVsZW1lbnQiLCJTdGFtcEFubm90YXRpb25FbGVtZW50IiwiRmlsZUF0dGFjaG1lbnRBbm5vdGF0aW9uRWxlbWVudCIsIkFubm90YXRpb25FbGVtZW50IiwibGlua1NlcnZpY2UiLCJkb3dubG9hZE1hbmFnZXIiLCJpbWFnZVJlc291cmNlc1BhdGgiLCJzdmdGYWN0b3J5IiwiX2NyZWF0ZUNvbnRhaW5lciIsImhvcml6b250YWxSYWRpdXMiLCJ2ZXJ0aWNhbFJhZGl1cyIsInJhZGl1cyIsInRyaWdnZXIiLCJQb3B1cEVsZW1lbnQiLCJoaWRlV3JhcHBlciIsImV4dGVybmFsTGlua1RhcmdldCIsImV4dGVybmFsTGlua1JlbCIsImV4dGVybmFsTGlua0VuYWJsZWQiLCJfYmluZE5hbWVkQWN0aW9uIiwiX2JpbmRMaW5rIiwiZGVzdGluYXRpb24iLCJnZXREZXN0aW5hdGlvbkhhc2giLCJuYXZpZ2F0ZVRvIiwiZ2V0QW5jaG9yVXJsIiwiZXhlY3V0ZU5hbWVkQWN0aW9uIiwiYWx0IiwiZGF0YXNldCIsImwxMG5JZCIsImwxMG5BcmdzIiwiX2NyZWF0ZVBvcHVwIiwiaGFzQXBwZWFyYW5jZSIsImZpZWxkVmFsdWUiLCJtdWx0aUxpbmUiLCJkaXNhYmxlZCIsInJlYWRPbmx5IiwiZmllbGROYW1lIiwibWF4TGVuIiwiY29tYiIsImNvbWJXaWR0aCIsImxldHRlclNwYWNpbmciLCJ2ZXJ0aWNhbEFsaWduIiwiX3NldFRleHRTdHlsZSIsInRleHRBbGlnbm1lbnQiLCJ0ZXh0QWxpZ24iLCJkaXJlY3Rpb24iLCJmb250V2VpZ2h0IiwiZm9udFN0eWxlIiwiYnV0dG9uVmFsdWUiLCJzZWxlY3RFbGVtZW50IiwiY29tYm8iLCJtdWx0aVNlbGVjdCIsIm11bHRpcGxlIiwib3B0aW9uIiwib3B0aW9uRWxlbWVudCIsImRpc3BsYXlWYWx1ZSIsImV4cG9ydFZhbHVlIiwic2VsZWN0b3IiLCJwYXJlbnRFbGVtZW50IiwicGFyZW50TGVmdCIsInBhcmVudFdpZHRoIiwicGlubmVkIiwiaGlkZUVsZW1lbnQiLCJkYXRlT2JqZWN0IiwidG9EYXRlT2JqZWN0IiwiX2Zvcm1hdENvbnRlbnRzIiwiX3RvZ2dsZSIsIl9zaG93IiwiX2hpZGUiLCJsaW5lcyIsImxpbmUiLCJwaW4iLCJoYXNBdHRyaWJ1dGUiLCJyZW1vdmVBdHRyaWJ1dGUiLCJ6SW5kZXgiLCJ1bnBpbiIsInNxdWFyZSIsImNpcmNsZSIsImNvbnRhaW5lckNsYXNzTmFtZSIsInN2Z0VsZW1lbnROYW1lIiwiY29vcmRpbmF0ZSIsInBvbHlsaW5lIiwiaW5rTGlzdCIsImV2ZW50QnVzIiwiZGlzcGF0Y2giLCJfZG93bmxvYWQiLCJkb3dubG9hZERhdGEiLCJzb3J0ZWRBbm5vdGF0aW9ucyIsInBvcHVwQW5ub3RhdGlvbnMiLCJOb25XaGl0ZXNwYWNlUmVnZXhwIiwiYXBwZW5kVGV4dCIsImdlb20iLCJ0ZXh0RGl2IiwidGV4dERpdlByb3BlcnRpZXMiLCJjYW52YXNXaWR0aCIsIm9yaWdpbmFsVHJhbnNmb3JtIiwicGFkZGluZ0JvdHRvbSIsInBhZGRpbmdMZWZ0IiwicGFkZGluZ1JpZ2h0IiwicGFkZGluZ1RvcCIsIl90ZXh0RGl2cyIsIl90ZXh0RGl2UHJvcGVydGllcyIsInR4IiwiX3ZpZXdwb3J0IiwiYXRhbjIiLCJmb250TmFtZSIsImZvbnRIZWlnaHQiLCJmb250QXNjZW50IiwiYXNjZW50IiwiZGVzY2VudCIsIl9mb250SW5zcGVjdG9yRW5hYmxlZCIsInNob3VsZFNjYWxlVGV4dCIsImFic1NjYWxlWCIsImFic1NjYWxlWSIsIl90ZXh0Q29udGVudFN0cmVhbSIsIl9sYXlvdXRUZXh0IiwiX2VuaGFuY2VUZXh0U2VsZWN0aW9uIiwiYW5nbGVDb3MiLCJhbmdsZVNpbiIsImRpdldpZHRoIiwiZGl2SGVpZ2h0IiwiX2JvdW5kcyIsImJvdHRvbSIsIl9jYW5jZWxlZCIsInRleHREaXZzIiwidGV4dERpdnNMZW5ndGgiLCJfcmVuZGVyaW5nRG9uZSIsImZpbmRQb3NpdGl2ZU1pbiIsInRzIiwiZXhwYW5kQm91bmRzTFRSIiwiaG9yaXpvbiIsImJvdW5kYXJ5IiwieDFOZXciLCJ4Mk5ldyIsImhvcml6b25QYXJ0IiwiYWZmZWN0ZWRCb3VuZGFyeSIsIm1heFhOZXciLCJ4TmV3IiwiY2hhbmdlZEhvcml6b24iLCJsYXN0Qm91bmRhcnkiLCJ1c2VCb3VuZGFyeSIsInVzZWQiLCJUZXh0TGF5ZXJSZW5kZXJUYXNrIiwidGV4dENvbnRlbnRTdHJlYW0iLCJ0ZXh0Q29udGVudEl0ZW1zU3RyIiwiZW5oYW5jZVRleHRTZWxlY3Rpb24iLCJfdGV4dENvbnRlbnQiLCJfY29udGFpbmVyIiwiX3RleHRDb250ZW50SXRlbXNTdHIiLCJfcmVhZGVyIiwiX2xheW91dFRleHRMYXN0Rm9udFNpemUiLCJfbGF5b3V0VGV4dExhc3RGb250RmFtaWx5IiwiX2xheW91dFRleHRDdHgiLCJfcmVuZGVyVGltZXIiLCJzdHlsZUNhY2hlIiwiX3JlbmRlciIsIm1vek9wYXF1ZSIsInRleHRJdGVtcyIsInRleHRTdHlsZXMiLCJfcHJvY2Vzc0l0ZW1zIiwiZXhwYW5kVGV4dERpdnMiLCJleHBhbmREaXZzIiwiZXhwYW5kZWQiLCJib3hlcyIsImJveCIsImV4cGFuZEJvdW5kcyIsImRpdlByb3BlcnRpZXMiLCJib3hTY2FsZSIsImV4cGFuZCIsInRyYW5zZm9ybUJ1ZiIsInBhZGRpbmdCdWYiLCJkaXZQcm9wcyIsInBhZGRpbmciLCJyZW5kZXJQYXJhbWV0ZXJzIiwiU1ZHX0RFRkFVTFRTIiwiWE1MX05TIiwiWExJTktfTlMiLCJjb252ZXJ0SW1nRGF0YVRvUG5nIiwiUE5HX0hFQURFUiIsImNyY1RhYmxlIiwid3JpdGVQbmdDaHVuayIsImNyYyIsImNyYzMyIiwiZGVmbGF0ZVN5bmNVbmNvbXByZXNzZWQiLCJsaXRlcmFscyIsIm1heEJsb2NrTGVuZ3RoIiwiZGVmbGF0ZUJsb2NrcyIsImlkYXQiLCJhZGxlciIsImFkbGVyMzIiLCJpc01hc2siLCJiaXREZXB0aCIsImNvbG9yVHlwZSIsIm9mZnNldExpdGVyYWxzIiwib2Zmc2V0Qnl0ZXMiLCJpaGRyIiwiQnVmZmVyIiwiZGVmbGF0ZVN5bmMiLCJwbmdMZW5ndGgiLCJDSFVOS19XUkFQUEVSX1NJWkUiLCJTVkdFeHRyYVN0YXRlIiwiZGVwZW5kZW5jaWVzIiwiYWN0aXZlQ2xpcFVybCIsImNsaXBHcm91cCIsIm1hc2tJZCIsInBmIiwicG0iLCJhY29zIiwiY2xpcENvdW50IiwibWFza0NvdW50Iiwic2hhZGluZ0NvdW50IiwidHJhbnNmb3JtTWF0cml4IiwidHJhbnNmb3JtU3RhY2siLCJleHRyYVN0YWNrIiwiZW1iZWRGb250cyIsImVtYmVkZGVkRm9udHMiLCJjc3NTdHlsZSIsIl9vcGVyYXRvcklkTWFwcGluZyIsInRncnAiLCJleGVjdXRlT3BUcmVlIiwic3ZnRWxlbWVudCIsImxvYWREZXBlbmRlbmNpZXMiLCJjb252ZXJ0T3BMaXN0Iiwib3BlcmF0b3JJZE1hcHBpbmciLCJvcExpc3QiLCJvcFRyZWUiLCJvcExpc3RFbGVtZW50Iiwib3BMaXN0VG9UcmVlIiwib3BUcmVlRWxlbWVudCIsImxpbmVNYXRyaXgiLCJ4Y29vcmRzIiwieWNvb3JkcyIsInRzcGFuIiwic2V0QXR0cmlidXRlTlMiLCJ0eHRFbGVtZW50IiwidHh0Z3JwIiwiY2hhcldpZHRoIiwibGluZVdpZHRoU2NhbGUiLCJfc2V0U3Ryb2tlQXR0cmlidXRlcyIsIl9lbnN1cmVUcmFuc2Zvcm1Hcm91cCIsImRlZnMiLCJhZGRGb250U3R5bGUiLCJfbWFrZUNvbG9yTl9QYXR0ZXJuIiwiaW52ZXJzZVRyYW5zZm9ybSIsIl9tYWtlU2hhZGluZ1BhdHRlcm4iLCJfbWFrZVRpbGluZ1BhdHRlcm4iLCJ0aWxpbmdJZCIsInR4MCIsInR5MCIsInR4MSIsInR5MSIsInhzY2FsZSIsInlzY2FsZSIsInR4c3RlcCIsInR5c3RlcCIsInRpbGluZyIsInNoYWRpbmdJZCIsImdyYWRpZW50IiwicG9pbnQwIiwicG9pbnQxIiwiZm9jYWxQb2ludCIsImNpcmNsZVBvaW50IiwiZm9jYWxSYWRpdXMiLCJjaXJjbGVSYWRpdXMiLCJjb2xvclN0b3AiLCJnZXRBdHRyaWJ1dGVOUyIsImNsaXBJZCIsImNsaXBQYXRoIiwiY2xpcEVsZW1lbnQiLCJjbG9uZU5vZGUiLCJzZXRTdHJva2VBbHBoYSIsInNldEZpbGxBbHBoYSIsImltZ1NyYyIsImNsaXByZWN0IiwiaW1nRWwiLCJkZWZpbml0aW9ucyIsInJvb3RHcm91cCIsIl9lbnN1cmVDbGlwR3JvdXAiLCJfbmV0d29ya191dGlscyIsImZzIiwiZmlsZVVyaVJlZ2V4Iiwic291cmNlVXJsIiwicGFyc2VkVXJsIiwicGFyc2UiLCJwYXJzZVVybCIsImlzSHR0cCIsImlzRnNVcmwiLCJfcmFuZ2VSZXF1ZXN0UmVhZGVycyIsIlBERk5vZGVTdHJlYW1Gc0Z1bGxSZWFkZXIiLCJQREZOb2RlU3RyZWFtRnVsbFJlYWRlciIsIlBERk5vZGVTdHJlYW1Gc1JhbmdlUmVhZGVyIiwiUERGTm9kZVN0cmVhbVJhbmdlUmVhZGVyIiwiQmFzZUZ1bGxSZWFkZXIiLCJfdXJsIiwiX3N0b3JlZEVycm9yIiwiX2Rpc2FibGVSYW5nZSIsIl9yYW5nZUNodW5rU2l6ZSIsIl9yZWFkYWJsZVN0cmVhbSIsIl9yZWFkQ2FwYWJpbGl0eSIsIl9oZWFkZXJzQ2FwYWJpbGl0eSIsIl9lcnJvciIsIkJhc2VSYW5nZVJlYWRlciIsImNyZWF0ZVJlcXVlc3RPcHRpb25zIiwiYXV0aCIsImhhbmRsZVJlc3BvbnNlIiwic3RhdHVzQ29kZSIsIl9zZXRSZWFkYWJsZVN0cmVhbSIsImdldFJlc3BvbnNlSGVhZGVyIiwiYWxsb3dSYW5nZVJlcXVlc3RzIiwic3VnZ2VzdGVkTGVuZ3RoIiwidmFsaWRhdGVSYW5nZVJlcXVlc3RDYXBhYmlsaXRpZXMiLCJleHRyYWN0RmlsZW5hbWVGcm9tSGVhZGVyIiwiX3JlcXVlc3QiLCJfaHR0cEhlYWRlcnMiLCJSYW5nZSIsImxzdGF0IiwiY3JlYXRlUmVhZFN0cmVhbSIsImNyZWF0ZVJlc3BvbnNlU3RhdHVzRXJyb3IiLCJjb250ZW50RGlzcG9zaXRpb24iLCJfY29udGVudF9kaXNwb3NpdGlvbiIsImdldEZpbGVuYW1lRnJvbUNvbnRlbnREaXNwb3NpdGlvbkhlYWRlciIsInJldHVyblZhbHVlcyIsInZhbGlkYXRlUmVzcG9uc2VTdGF0dXMiLCJuZWVkc0VuY29kaW5nRml4dXAiLCJ0b1BhcmFtUmVnRXhwIiwicmZjMjYxNnVucXVvdGUiLCJyZmM1OTg3ZGVjb2RlIiwicmZjMjA0N2RlY29kZSIsImZpeHVwRW5jb2RpbmciLCJjb250ZW50RGlzcG9zaXRpb25TdHIiLCJpdGVyIiwicmZjMjIzMWdldHBhcmFtIiwiYXR0cmlidXRlUGF0dGVybiIsInRleHRkZWNvZGUiLCJlbmNvZGluZyIsImRlY29kZXIiLCJUZXh0RGVjb2RlciIsImZhdGFsIiwiZGVjb2RlIiwiZXJyIiwicXVvdGluZGV4IiwiZXh0dmFsdWUiLCJlbmNvZGluZ2VuZCIsImNoYXJzZXQiLCJOZXR3b3JrTWFuYWdlciIsImdldFhociIsImN1cnJYaHJJZCIsInBlbmRpbmdSZXF1ZXN0cyIsImxpc3RlbmVycyIsInhociIsInhocklkIiwicGVuZGluZ1JlcXVlc3QiLCJzZXRSZXF1ZXN0SGVhZGVyIiwiZXhwZWN0ZWRTdGF0dXMiLCJvblN0YXRlQ2hhbmdlIiwib25wcm9ncmVzcyIsIm9uSGVhZGVyc1JlY2VpdmVkIiwib25Eb25lIiwieGhyU3RhdHVzIiwiZ2V0QXJyYXlCdWZmZXIiLCJyYW5nZUhlYWRlciIsImFib3J0UmVxdWVzdCIsIl9zb3VyY2UiLCJfbWFuYWdlciIsIlBERk5ldHdvcmtTdHJlYW1GdWxsUmVxdWVzdFJlYWRlciIsIlBERk5ldHdvcmtTdHJlYW1SYW5nZVJlcXVlc3RSZWFkZXIiLCJvbkNsb3NlZCIsIl9vblJhbmdlUmVxdWVzdFJlYWRlckNsb3NlZCIsIm1hbmFnZXIiLCJfb25IZWFkZXJzUmVjZWl2ZWQiLCJfb25Eb25lIiwiX29uRXJyb3IiLCJfZnVsbFJlcXVlc3RJZCIsInJlcXVlc3RGdWxsIiwiX2hlYWRlcnNSZWNlaXZlZENhcGFiaWxpdHkiLCJfY2FjaGVkQ2h1bmtzIiwiZnVsbFJlcXVlc3RYaHJJZCIsImZ1bGxSZXF1ZXN0WGhyIiwiZ2V0UmVxdWVzdFhociIsImxlbmd0aENvbXB1dGFibGUiLCJpc1BlbmRpbmdSZXF1ZXN0IiwiX3JlcXVlc3RJZCIsInJlcXVlc3RSYW5nZSIsIl9jbG9zZSIsImNyZWF0ZUZldGNoT3B0aW9ucyIsImFib3J0Q29udHJvbGxlciIsInNpZ25hbCIsImNyZWRlbnRpYWxzIiwicmVkaXJlY3QiLCJjcmVhdGVIZWFkZXJzIiwiUERGRmV0Y2hTdHJlYW1SZWFkZXIiLCJQREZGZXRjaFN0cmVhbVJhbmdlUmVhZGVyIiwiX3dpdGhDcmVkZW50aWFscyIsIkFib3J0Q29udHJvbGxlciIsIl9hYm9ydENvbnRyb2xsZXIiLCJfaGVhZGVycyIsIl9fSCIsIl9fIiwiX19oIiwiX19jIiwic2V0U3RhdGUiLCJwcm9wcyIsImNvbXBvbmVudERpZENhdGNoIiwiX19QIiwiX192IiwiY2FuY2VsQW5pbWF0aW9uRnJhbWUiLCJzaG91bGRDb21wb25lbnRVcGRhdGUiLCJkaXNwbGF5TmFtZSIsImlzUmVhY3RDb21wb25lbnQiLCJfX2YiLCJpc1B1cmVSZWFjdENvbXBvbmVudCIsImZvciIsIiQkdHlwZW9mIiwib25seSIsInRvQXJyYXkiLCJfX2siLCJfX3UiLCJfX2IiLCJfX2UiLCJjb21wb25lbnRXaWxsVW5tb3VudCIsImZvcmNlVXBkYXRlIiwiZmFsbGJhY2siLCJyZXZlYWxPcmRlciIsImdldENoaWxkQ29udGV4dCIsIm5vZGVUeXBlIiwiaW5zZXJ0QmVmb3JlIiwiY29tcG9uZW50RGlkVXBkYXRlIiwiY29tcG9uZW50RGlkTW91bnQiLCJjYW5jZWxCdWJibGUiLCJkZWZhdWx0UHJldmVudGVkIiwicGVyc2lzdCIsImlzUHJvcGFnYXRpb25TdG9wcGVkIiwiaXNEZWZhdWx0UHJldmVudGVkIiwibmF0aXZlRXZlbnQiLCJjbGFzcyIsInNlbGVjdGVkIiwiZGVmYXVsdFZhbHVlIiwiUmVhY3RDdXJyZW50RGlzcGF0Y2hlciIsInJlYWRDb250ZXh0IiwiX19uIiwibm4iLCJ0biIsImVuIiwicm4iLCJ1biIsImxuIiwiY24iLCJ1c2VSZWR1Y2VyIiwidXNlSW1wZXJhdGl2ZUhhbmRsZSIsInVzZU1lbW8iLCJ1c2VDYWxsYmFjayIsInVzZURlYnVnVmFsdWUiLCJDaGlsZHJlbiIsImh5ZHJhdGUiLCJ1bm1vdW50Q29tcG9uZW50QXROb2RlIiwiY3JlYXRlUG9ydGFsIiwiY3JlYXRlRmFjdG9yeSIsImNsb25lRWxlbWVudCIsImlzVmFsaWRFbGVtZW50IiwiZmluZERPTU5vZGUiLCJDb21wb25lbnQiLCJQdXJlQ29tcG9uZW50IiwiZm9yd2FyZFJlZiIsInVuc3RhYmxlX2JhdGNoZWRVcGRhdGVzIiwiU3RyaWN0TW9kZSIsIlN1c3BlbnNlIiwiU3VzcGVuc2VMaXN0IiwibGF6eSIsIl9fU0VDUkVUX0lOVEVSTkFMU19ET19OT1RfVVNFX09SX1lPVV9XSUxMX0JFX0ZJUkVEIiwiZGVmYXVsdFByb3BzIiwiX19kIiwidm5vZGUiLCJfX3IiLCJkZWJvdW5jZVJlbmRlcmluZyIsIm93bmVyU1ZHRWxlbWVudCIsInNldFByb3BlcnR5IiwiY3NzVGV4dCIsInJlbW92ZUF0dHJpYnV0ZU5TIiwiY29udGV4dFR5cGUiLCJfX0UiLCJfX3MiLCJnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMiLCJjb21wb25lbnRXaWxsTW91bnQiLCJjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzIiwiY29tcG9uZW50V2lsbFVwZGF0ZSIsImdldFNuYXBzaG90QmVmb3JlVXBkYXRlIiwiZGlmZmVkIiwibG9jYWxOYW1lIiwiZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwiLCJfX2h0bWwiLCJjaGVja2VkIiwidW5tb3VudCIsIkNvbnN1bWVyIiwiZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yIiwicnVudGltZSIsIk9wIiwiaXRlcmF0b3JTeW1ib2wiLCJhc3luY0l0ZXJhdG9yU3ltYm9sIiwiYXN5bmNJdGVyYXRvciIsInRvU3RyaW5nVGFnU3ltYm9sIiwiaW5uZXJGbiIsIm91dGVyRm4iLCJ0cnlMb2NzTGlzdCIsInByb3RvR2VuZXJhdG9yIiwiR2VuZXJhdG9yIiwiZ2VuZXJhdG9yIiwiQ29udGV4dCIsIl9pbnZva2UiLCJHZW5TdGF0ZVN1c3BlbmRlZFN0YXJ0IiwiR2VuU3RhdGVFeGVjdXRpbmciLCJHZW5TdGF0ZUNvbXBsZXRlZCIsImRvbmVSZXN1bHQiLCJkZWxlZ2F0ZSIsImRlbGVnYXRlUmVzdWx0IiwibWF5YmVJbnZva2VEZWxlZ2F0ZSIsIkNvbnRpbnVlU2VudGluZWwiLCJzZW50IiwiX3NlbnQiLCJkaXNwYXRjaEV4Y2VwdGlvbiIsImFicnVwdCIsInJlY29yZCIsInRyeUNhdGNoIiwiR2VuU3RhdGVTdXNwZW5kZWRZaWVsZCIsIm1ha2VJbnZva2VNZXRob2QiLCJHZW5lcmF0b3JGdW5jdGlvbiIsIkdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlIiwiZ2V0UHJvdG8iLCJOYXRpdmVJdGVyYXRvclByb3RvdHlwZSIsIkdwIiwiZGVmaW5lSXRlcmF0b3JNZXRob2RzIiwiQXN5bmNJdGVyYXRvciIsIlByb21pc2VJbXBsIiwiaW52b2tlIiwiX19hd2FpdCIsInVud3JhcHBlZCIsInByZXZpb3VzUHJvbWlzZSIsImNhbGxJbnZva2VXaXRoTWV0aG9kQW5kQXJnIiwicmVzdWx0TmFtZSIsIm5leHRMb2MiLCJwdXNoVHJ5RW50cnkiLCJsb2NzIiwidHJ5TG9jIiwiY2F0Y2hMb2MiLCJmaW5hbGx5TG9jIiwiYWZ0ZXJMb2MiLCJ0cnlFbnRyaWVzIiwicmVzZXRUcnlFbnRyeSIsImNvbXBsZXRpb24iLCJpc0dlbmVyYXRvckZ1bmN0aW9uIiwiZ2VuRnVuIiwiY3RvciIsIm1hcmsiLCJhd3JhcCIsInNraXBUZW1wUmVzZXQiLCJyb290UmVjb3JkIiwicnZhbCIsImhhbmRsZSIsImxvYyIsImNhdWdodCIsImhhc0NhdGNoIiwiaGFzRmluYWxseSIsImZpbmFsbHlFbnRyeSIsImZpbmlzaCIsInRocm93biIsImRlbGVnYXRlWWllbGQiLCJyZWdlbmVyYXRvclJ1bnRpbWUiLCJhY2NpZGVudGFsU3RyaWN0TW9kZSIsIl9fd2VicGFja19tb2R1bGVfY2FjaGVfXyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJfX3dlYnBhY2tfbW9kdWxlc19fIiwiZGVmaW5pdGlvbiIsInBkZmpzIiwic2Nyb2xsaW5nIiwiRG9jdW1lbnQiLCJQYWdlIl0sIm1hcHBpbmdzIjoiO3VFQUFvRSxJQUEwVEEsRUFBdFRDLEVBQUUsRUFBUSxNQUE4U0MsRUFBclMsU0FB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QVEsTUFDUixFQUFRLE1BQ1IsRUFBUSxNQUNSLEVBQVEsTUFDUixFQUFRLE1BQ1IsRUFBUSxNQUNSLEVBQVEsTUFDUixFQUFRLE1BQ1IsRUFBUSxNQUNSLEVBQVEsTUFDUixFQUFRLE1BQ1IsRUFBUSxNQUNSLEVBQVEsS0FDUixFQUFRLE1BQ1IsRUFBUSxNQUNSLEVBQVEsTUFDUixFQUFRLE1BQ1IsRUFBUSxNQUNSLEVBQVEsTUFDUixFQUFRLE1BQ1IsRUFBUSxNQUNSLEVBQVEsTUFDUixFQUFRLE1BQ1IsRUFBUSxNQUNSLEVBQVEsTUFDUixFQUFRLE1BQ1IsRUFBUSxNQUNSLEVBQVEsTUFDUixFQUFRLE1BQ1IsRUFBUSxNQUNSLEVBQVEsTUFDUixFQUFRLEtBQ1IsRUFBUSxNQUNSLEVBQVEsTUFDUixFQUFRLE1BQ1IsRUFBUSxNQUNSLEVBQVEsTUFDUixFQUFRLE1BQ1IsRUFBUSxLQUNSLEVBQVEsTUFDUixFQUFRLE1BQ1IsRUFBUSxNQUNSLEVBQVEsTUFDUixFQUFRLE1BQ1IsRUFBUSxNQUNSLEVBQVEsTUFDUixFQUFRLE1BQ1IsRUFBUSxNQUNSLEVBQVEsTUFDUixFQUFRLE1BQ1IsRUFBUSxNQUNSLEVBQVEsTUFDUixFQUFRLE1BQ1IsRUFBUSxNQUNSLEVBQVEsTUFDUixFQUFRLE1BQ1IsRUFBUSxNQUNSLEVBQVEsTUFDUixFQUFRLE1BQ1IsRUFBUSxNQUNSLEVBQVEsTUFDUixFQUFRLE1BQ1IsRUFBUSxNQUNSLEVBQVEsTUFDUixFQUFRLE1BQ1IsRUFBUSxNQUNSLEVBQVEsTUFDUixFQUFRLEtBQ1IsRUFBUSxNQUNSLEVBQVEsTUFDUixFQUFRLE1BQ1IsRUFBUSxNQUNSLEVBQVEsTUFDUixFQUFRLE1BQ1IsRUFBUSxNQUNSLEVBQVEsSUFDUixFQUFRLEtBQ1IsRUFBUSxNQUNSLEVBQVEsTUFDUixFQUFRLE1BQ1IsRUFBUSxNQUNSLEVBQVEsTUFDUixFQUFRLE1BQ1IsRUFBUSxNQUNSLEVBQVEsTUFDUixFQUFRLE1BQ1IsRUFBUSxNQUNSLEVBQVEsTUFDUixFQUFRLE1BQ1IsRUFBUSxNQUNSLEVBQVEsTUFDUixFQUFRLE1BQ1IsRUFBUSxNQUNSLEVBQVEsTUFDUixFQUFRLE1BQ1IsRUFBUSxNQUNSLEVBQVEsTUFDUixFQUFRLE1BQ1IsRUFBUSxNQUNSLEVBQVEsTUFDUixFQUFRLE1BQ1IsRUFBUSxNQUNSLEVBQVEsTUFDUixFQUFRLE1BQ1IsRUFBUSxLQUNSLEVBQVEsTUFDUixFQUFRLE1BQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxNQUNSLEVBQVEsTUFDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsTUFDUixFQUFRLE1BQ1IsRUFBUSxNQUNSLEVBQVEsTUFDUixFQUFRLE1BQ1IsRUFBUSxNQUNSLEVBQVEsTUFDUixFQUFRLE1BQ1IsRUFBUSxNQUNSLEVBQVEsTUFDUixFQUFRLE1BQ1IsRUFBUSxNQUNSLEVBQVEsTUFDUixFQUFRLE1BQ1IsRUFBUSxLQUNSLEVBQVEsTUFDUixFQUFRLE1BQ1IsRUFBUSxNQUNSLEVBQVEsTUFDUixFQUFRLE1BQ1IsRUFBUSxNQUNSLEVBQVEsTUFDUixFQUFRLE1BQ1IsRUFBUSxNQUNSLEVBQVEsTUFDUixFQUFRLE1BQ1IsRUFBUSxNQUNSLEVBQVEsTUFDUixFQUFRLE1BQ1IsRUFBUSxNQUNSLEVBQVEsTUFDUixFQUFRLE1BQ1IsRUFBUSxNQUNSLEVBQVEsTUFDUixFQUFRLE1BQ1IsRUFBUSxNQUNSLEVBQVEsTUFDUixFQUFRLE1BQ1IsRUFBUSxNQUNSLEVBQVEsTUFDUixFQUFRLE1BQ1IsRUFBUSxNQUNSLEVBQVEsTUFDUixFQUFRLE1BQ1IsRUFBUSxNQUNSLEVBQVEsTUFDUixFQUFRLE1BQ1IsRUFBUSxNQUNSLEVBQVEsTUFDUixFQUFRLEtBQ1IsRUFBUSxNQUNSLEVBQVEsTUFDUixFQUFRLE1BQ1IsRUFBUSxNQUNSLEVBQVEsTUFDUixFQUFRLEtBQ1IsRUFBUSxNQUNSLEVBQVEsTUFDUixFQUFRLE1BQ1IsRUFBUSxNQUNSLEVBQVEsTUFDUixFQUFRLE1BQ1IsRUFBUSxNQUNSLEVBQVEsTUFDUixFQUFRLE1BQ1IsRUFBUSxNQUNSLEVB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RCxFQUFPLEdBQUsweUQsRUFBUyxHQUNyQjF5RCxFQUFPLEdBQUsweUQsRUFBUyxHQUtoQjF5RCxHQUhFLE1BUEEsTUFlYnVELEVBQVE0MkMsS0FBT0EsRUFDZixNQUFNdUksRUFBMEIsQ0FBQyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxJQUFPLElBQU8sSUFBTyxJQUFPLElBQU8sSUFBTyxJQUFPLElBQU8sRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsS0FBUSxLQUFRLEtBQVEsS0FBUSxLQUFRLEtBQVEsSUFBTyxLQUFRLEtBQVEsS0FBUSxLQUFRLEtBQVEsS0FBUSxLQUFRLEtBQVEsS0FBUSxLQUFRLEtBQVEsS0FBUSxNQUFRLE1BQVEsSUFBTyxJQUFPLElBQU8sSUFBTyxJQUFPLElBQU8sSUFBTyxJQUFPLElBQU8s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TSxDQUFFMzdDLFdBQVksTUFDMUIsSUFBQTVqRSxHQUFFLEtBQU0sS0FBTSxvQkFDZCxJQUFBQSxHQUFFLEVBQUFnUSxPQUFRLENBQUVDLFFBQVMsT0FFZCxNQUFPbk4sU0FBU0ssTSIsImZpbGUiOiJidWlsZC5qcyIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO09iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pO3ZhciBlPXJlcXVpcmUoXCJyZWFjdFwiKTtmdW5jdGlvbiB0KGUpe2lmKGUmJmUuX19lc01vZHVsZSlyZXR1cm4gZTt2YXIgdD1PYmplY3QuY3JlYXRlKG51bGwpO3JldHVybiBlJiZPYmplY3Qua2V5cyhlKS5mb3JFYWNoKChmdW5jdGlvbihuKXtpZihcImRlZmF1bHRcIiE9PW4pe3ZhciByPU9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoZSxuKTtPYmplY3QuZGVmaW5lUHJvcGVydHkodCxuLHIuZ2V0P3I6e2VudW1lcmFibGU6ITAsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIGVbbl19fSl9fSkpLHQuZGVmYXVsdD1lLE9iamVjdC5mcmVlemUodCl9dmFyIG4scj10KHJlcXVpcmUoXCJwZGZqcy1kaXN0XCIpKTshZnVuY3Rpb24oZSl7ZVtlLlRleHQ9MV09XCJUZXh0XCIsZVtlLkxpbms9Ml09XCJMaW5rXCIsZVtlLkZyZWVUZXh0PTNdPVwiRnJlZVRleHRcIixlW2UuTGluZT00XT1cIkxpbmVcIixlW2UuU3F1YXJlPTVdPVwiU3F1YXJlXCIsZVtlLkNpcmNsZT02XT1cIkNpcmNsZVwiLGVbZS5Qb2x5Z29uPTddPVwiUG9seWdvblwiLGVbZS5Qb2x5bGluZT04XT1cIlBvbHlsaW5lXCIsZVtlLkhpZ2hsaWdodD05XT1cIkhpZ2hsaWdodFwiLGVbZS5VbmRlcmxpbmU9MTBdPVwiVW5kZXJsaW5lXCIsZVtlLlNxdWlnZ2x5PTExXT1cIlNxdWlnZ2x5XCIsZVtlLlN0cmlrZU91dD0xMl09XCJTdHJpa2VPdXRcIixlW2UuU3RhbXA9MTNdPVwiU3RhbXBcIixlW2UuQ2FyZXQ9MTRdPVwiQ2FyZXRcIixlW2UuSW5rPTE1XT1cIklua1wiLGVbZS5Qb3B1cD0xNl09XCJQb3B1cFwiLGVbZS5GaWxlQXR0YWNobWVudD0xN109XCJGaWxlQXR0YWNobWVudFwifShufHwobj17fSkpO3ZhciBhLG89bixpPWUuY3JlYXRlQ29udGV4dCh7cHJlZml4Q2xhc3M6XCJycHYtY29yZVwifSkscz1mdW5jdGlvbihlKXt2YXIgdD1bXTtyZXR1cm4gT2JqZWN0LmtleXMoZSkuZm9yRWFjaCgoZnVuY3Rpb24obil7biYmZVtuXSYmdC5wdXNoKG4pfSkpLHQuam9pbihcIiBcIil9LGM9ZnVuY3Rpb24odCl7dmFyIG49dC5jaGlsZHJlbixyPXQuc2l6ZSxhPXZvaWQgMD09PXI/MjQ6cixvPWUudXNlQ29udGV4dChpKSxzPShhfHwyNCkrXCJweFwiO3JldHVybiBlLmNyZWF0ZUVsZW1lbnQoXCJzdmdcIix7Y2xhc3NOYW1lOm8ucHJlZml4Q2xhc3MrXCItaWNvblwiLGhlaWdodDpzLHZpZXdCb3g6XCIwIDAgMjQgMjRcIix3aWR0aDpzfSxuKX0sbD1mdW5jdGlvbigpe3JldHVybiBlLmNyZWF0ZUVsZW1lbnQoYyx7c2l6ZToxNn0sZS5jcmVhdGVFbGVtZW50KFwicGF0aFwiLHtkOlwiTTIzLjUsMC40OTlsLTE2LjUsMjNsLTYuNS02LjVcIn0pKX0scD1mdW5jdGlvbigpe3ZhciB0PWUudXNlQ29udGV4dChpKTtyZXR1cm4gZS5jcmVhdGVFbGVtZW50KFwic3ZnXCIse2NsYXNzTmFtZTp0LnByZWZpeENsYXNzK1wiLXNwaW5uZXJcIix3aWR0aDpcIjY0cHhcIixoZWlnaHQ6XCI2NHB4XCIsdmlld0JveDpcIjAgMCAzMiAzMlwifSxlLmNyZWF0ZUVsZW1lbnQoXCJjaXJjbGVcIix7Y2xhc3NOYW1lOnQucHJlZml4Q2xhc3MrXCItc3Bpbm5lci1jaXJjbGVcIixjeDpcIjE2XCIsY3k6XCIxNlwiLHI6XCIxMlwiLHN0cm9rZURhc2hhcnJheToyKk1hdGguUEkqOX0pKX0sdT1mdW5jdGlvbih0KXt2YXIgbj10LmNoaWxkcmVuLHI9dC50aHJlc2hvbGQsYT10Lm9uVmlzaWJpbGl0eUNoYW5nZWQsbz1lLnVzZVJlZihudWxsKTtyZXR1cm4gZS51c2VMYXlvdXRFZmZlY3QoKGZ1bmN0aW9uKCl7dmFyIGU9bmV3IEludGVyc2VjdGlvbk9ic2VydmVyKChmdW5jdGlvbihlKXtlLmZvckVhY2goKGZ1bmN0aW9uKGUpe3ZhciB0PWUuaXNJbnRlcnNlY3Rpbmcsbj1lLmludGVyc2VjdGlvblJhdGlvO2Eoe2lzVmlzaWJsZTp0LHJhdGlvOm59KX0pKX0pLHt0aHJlc2hvbGQ6cnx8MH0pLHQ9by5jdXJyZW50O2lmKHQpcmV0dXJuIGUub2JzZXJ2ZSh0KSxmdW5jdGlvbigpe2UudW5vYnNlcnZlKHQpfX0pLFtdKSxlLmNyZWF0ZUVsZW1lbnQoXCJkaXZcIix7cmVmOm99LG4pfSxkPWUuY3JlYXRlQ29udGV4dCh7fSksZj17Y29yZTp7YXNraW5nUGFzc3dvcmQ6e3JlcXVpcmVQYXNzd29yZFRvT3BlbjpcIlRoaXMgZG9jdW1lbnQgcmVxdWlyZXMgYSBwYXNzd29yZCB0byBvcGVuXCIsc3VibWl0OlwiU3VibWl0XCJ9LHdyb25nUGFzc3dvcmQ6e3N1Ym1pdDpcIlN1Ym1pdFwiLHRyeUFnYWluOlwiVGhlIHBhc3N3b3JkIGlzIHdyb25nLiBQbGVhc2UgdHJ5IGFnYWluXCJ9fX0sZz1mdW5jdGlvbih0KXt2YXIgbj10LmNoaWxkcmVuLHI9dC5sb2NhbGl6YXRpb24sYT1mLG89ZS51c2VTdGF0ZShyfHxhKSxpPW9bMF0scz1vWzFdO3JldHVybiBlLmNyZWF0ZUVsZW1lbnQoZC5Qcm92aWRlcix7dmFsdWU6aX0sbigoZnVuY3Rpb24oZSl7cmV0dXJuIHMoZSl9KSkpfSxtPWZ1bmN0aW9uKHQsbixyKXt2YXIgYT1mdW5jdGlvbihlKXt2YXIgdD1uLmN1cnJlbnQ7dCYmIXQuY29udGFpbnMoZS50YXJnZXQpJiZyKCl9O2UudXNlRWZmZWN0KChmdW5jdGlvbigpe2lmKHQpcmV0dXJuIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLGEpLGZ1bmN0aW9uKCl7ZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsYSl9fSksW10pfSxoPWZ1bmN0aW9uKHQsbil7dmFyIHI9ZnVuY3Rpb24oZSl7ZS5rZXlDb2RlPT09dCYmbigpfTtlLnVzZUVmZmVjdCgoZnVuY3Rpb24oKXtyZXR1cm4gZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcImtleXVwXCIsciksZnVuY3Rpb24oKXtkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKFwia2V5dXBcIixyKX19KSxbXSl9LHY9ZnVuY3Rpb24odCl7dmFyIG49dC5jaGlsZHJlbixyPXQuY2xvc2VPbkNsaWNrT3V0c2lkZSxhPXQuY2xvc2VPbkVzY2FwZSxvPXQub25Ub2dnbGUscz1lLnVzZUNvbnRleHQoaSksYz1lLmNyZWF0ZVJlZigpO3JldHVybiBlLnVzZUVmZmVjdCgoZnVuY3Rpb24oKXt2YXIgZT13aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShkb2N1bWVudC5ib2R5KS5vdmVyZmxvdztyZXR1cm4gZG9jdW1lbnQuYm9keS5zdHlsZS5vdmVyZmxvdz1cImhpZGRlblwiLGZ1bmN0aW9uKCl7ZG9jdW1lbnQuYm9keS5zdHlsZS5vdmVyZmxvdz1lfX0pLFtdKSxoKDI3LChmdW5jdGlvbigpe3JldHVybiBhJiZvKCl9KSksbShyLGMsbyksZS5jcmVhdGVFbGVtZW50KFwiZGl2XCIse2NsYXNzTmFtZTpzLnByZWZpeENsYXNzK1wiLW1vZGFsLWJvZHlcIixyZWY6Y30sbil9LEU9ZnVuY3Rpb24odCl7dmFyIG49dC5jaGlsZHJlbixyPWUudXNlQ29udGV4dChpKTtyZXR1cm4gZS5jcmVhdGVFbGVtZW50KFwiZGl2XCIse2NsYXNzTmFtZTpyLnByZWZpeENsYXNzK1wiLW1vZGFsLW92ZXJsYXlcIn0sbil9OyFmdW5jdGlvbihlKXtlLkNsb3NlPVwiQ2xvc2VcIixlLk9wZW49XCJPcGVuXCIsZS5Ub2dnbGU9XCJUb2dnbGVcIn0oYXx8KGE9e30pKTt2YXIgeCxDPWZ1bmN0aW9uKCl7dmFyIHQ9ZS51c2VTdGF0ZSghMSksbj10WzBdLHI9dFsxXTtyZXR1cm57b3BlbmVkOm4sdG9nZ2xlOmZ1bmN0aW9uKGUpe3N3aXRjaChlKXtjYXNlIGEuQ2xvc2U6cighMSk7YnJlYWs7Y2FzZSBhLk9wZW46cighMCk7YnJlYWs7Y2FzZSBhLlRvZ2dsZTpkZWZhdWx0OnIoKGZ1bmN0aW9uKGUpe3JldHVybiFlfSkpfX19fSx3PWZ1bmN0aW9uKHQpe3ZhciBuPXQuY29udGVudCxyPXQudGFyZ2V0LGE9QygpLG89YS5vcGVuZWQsaT1hLnRvZ2dsZTtyZXR1cm4gZS5jcmVhdGVFbGVtZW50KGUuRnJhZ21lbnQsbnVsbCxyKGksbyksbyYmbihpKSl9OyFmdW5jdGlvbihlKXtlLlRvcExlZnQ9XCJUT1BfTEVGVFwiLGUuVG9wQ2VudGVyPVwiVE9QX0NFTlRFUlwiLGUuVG9wUmlnaHQ9XCJUT1BfUklHSFRcIixlLlJpZ2h0VG9wPVwiUklHSFRfVE9QXCIsZS5SaWdodENlbnRlcj1cIlJJR0hUX0NFTlRFUlwiLGUuUmlnaHRCb3R0b209XCJSSUdIVF9CT1RUT01cIixlLkJvdHRvbUxlZnQ9XCJCT1RUT01fTEVGVFwiLGUuQm90dG9tQ2VudGVyPVwiQk9UVE9NX0NFTlRFUlwiLGUuQm90dG9tUmlnaHQ9XCJCT1RUT01fUklHSFRcIixlLkxlZnRUb3A9XCJMRUZUX1RPUFwiLGUuTGVmdENlbnRlcj1cIkxFRlRfQ0VOVEVSXCIsZS5MZWZ0Qm90dG9tPVwiTEVGVF9CT1RUT01cIn0oeHx8KHg9e30pKTt2YXIgeSxrPXgsYj1mdW5jdGlvbih0LG4scixhLG8pe2UudXNlTGF5b3V0RWZmZWN0KChmdW5jdGlvbigpe3ZhciBlPW4uY3VycmVudCxpPXQuY3VycmVudCxzPXIuY3VycmVudDtpZihpJiZlJiZzKXt2YXIgYz1zLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLGw9ZnVuY3Rpb24oZSx0LG4scil7dmFyIGE9dC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKSxvPWUuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCksaT1vLmhlaWdodCxzPW8ud2lkdGgsYz0wLGw9MDtzd2l0Y2gobil7Y2FzZSBrLlRvcExlZnQ6Yz1hLnRvcC1pLGw9YS5sZWZ0O2JyZWFrO2Nhc2Ugay5Ub3BDZW50ZXI6Yz1hLnRvcC1pLGw9YS5sZWZ0K2Eud2lkdGgvMi1zLzI7YnJlYWs7Y2FzZSBrLlRvcFJpZ2h0OmM9YS50b3AtaSxsPWEubGVmdCthLndpZHRoLXM7YnJlYWs7Y2FzZSBrLlJpZ2h0VG9wOmM9YS50b3AsbD1hLmxlZnQrYS53aWR0aDticmVhaztjYXNlIGsuUmlnaHRDZW50ZXI6Yz1hLnRvcCthLmhlaWdodC8yLWkvMixsPWEubGVmdCthLndpZHRoO2JyZWFrO2Nhc2Ugay5SaWdodEJvdHRvbTpjPWEudG9wK2EuaGVpZ2h0LWksbD1hLmxlZnQrYS53aWR0aDticmVhaztjYXNlIGsuQm90dG9tTGVmdDpjPWEudG9wK2EuaGVpZ2h0LGw9YS5sZWZ0O2JyZWFrO2Nhc2Ugay5Cb3R0b21DZW50ZXI6Yz1hLnRvcCthLmhlaWdodCxsPWEubGVmdCthLndpZHRoLzItcy8yO2JyZWFrO2Nhc2Ugay5Cb3R0b21SaWdodDpjPWEudG9wK2EuaGVpZ2h0LGw9YS5sZWZ0K2Eud2lkdGgtczticmVhaztjYXNlIGsuTGVmdFRvcDpjPWEudG9wLGw9YS5sZWZ0LXM7YnJlYWs7Y2FzZSBrLkxlZnRDZW50ZXI6Yz1hLnRvcCthLmhlaWdodC8yLWkvMixsPWEubGVmdC1zO2JyZWFrO2Nhc2Ugay5MZWZ0Qm90dG9tOmM9YS50b3ArYS5oZWlnaHQtaSxsPWEubGVmdC1zfXJldHVybntsZWZ0OmwrKHIubGVmdHx8MCksdG9wOmMrKHIudG9wfHwwKX19KGksZSxhLG8pLHA9bC50b3AsdT1sLmxlZnQ7aS5zdHlsZS50b3A9cC1jLnRvcCtcInB4XCIsaS5zdHlsZS5sZWZ0PXUtYy5sZWZ0K1wicHhcIn19KSxbXSl9LFA9ZnVuY3Rpb24odCl7dmFyIG4scj10LmN1c3RvbUNsYXNzTmFtZSxhPXQucG9zaXRpb24sbz1lLnVzZUNvbnRleHQoaSk7cmV0dXJuIGUuY3JlYXRlRWxlbWVudChcImRpdlwiLHtjbGFzc05hbWU6cygobj17fSxuW28ucHJlZml4Q2xhc3MrXCItYXJyb3dcIl09ITAsbltvLnByZWZpeENsYXNzK1wiLWFycm93LXRsXCJdPWE9PT1rLlRvcExlZnQsbltvLnByZWZpeENsYXNzK1wiLWFycm93LXRjXCJdPWE9PT1rLlRvcENlbnRlcixuW28ucHJlZml4Q2xhc3MrXCItYXJyb3ctdHJcIl09YT09PWsuVG9wUmlnaHQsbltvLnByZWZpeENsYXNzK1wiLWFycm93LXJ0XCJdPWE9PT1rLlJpZ2h0VG9wLG5bby5wcmVmaXhDbGFzcytcIi1hcnJvdy1yY1wiXT1hPT09ay5SaWdodENlbnRlcixuW28ucHJlZml4Q2xhc3MrXCItYXJyb3ctcmJcIl09YT09PWsuUmlnaHRCb3R0b20sbltvLnByZWZpeENsYXNzK1wiLWFycm93LWJsXCJdPWE9PT1rLkJvdHRvbUxlZnQsbltvLnByZWZpeENsYXNzK1wiLWFycm93LWJjXCJdPWE9PT1rLkJvdHRvbUNlbnRlcixuW28ucHJlZml4Q2xhc3MrXCItYXJyb3ctYnJcIl09YT09PWsuQm90dG9tUmlnaHQsbltvLnByZWZpeENsYXNzK1wiLWFycm93LWx0XCJdPWE9PT1rLkxlZnRUb3AsbltvLnByZWZpeENsYXNzK1wiLWFycm93LWxjXCJdPWE9PT1rLkxlZnRDZW50ZXIsbltvLnByZWZpeENsYXNzK1wiLWFycm93LWxiXCJdPWE9PT1rLkxlZnRCb3R0b20sbltcIlwiK3JdPVwiXCIhPT1yLG4pKX0pfSxPPWZ1bmN0aW9uKHQpe3ZhciBuPXQuY2hpbGRyZW4scj10LmNsb3NlT25DbGlja091dHNpZGUsYT10Lm9mZnNldCxvPXQucG9zaXRpb24scz10LnRhcmdldFJlZixjPXQub25DbG9zZSxsPWUudXNlQ29udGV4dChpKSxwPWUuY3JlYXRlUmVmKCksdT1lLmNyZWF0ZVJlZigpO3JldHVybiBtKHIscCxjKSxiKHAscyx1LG8sYSksZS5jcmVhdGVFbGVtZW50KGUuRnJhZ21lbnQsbnVsbCxlLmNyZWF0ZUVsZW1lbnQoXCJkaXZcIix7cmVmOnUsc3R5bGU6e2xlZnQ6MCxwb3NpdGlvbjpcImFic29sdXRlXCIsdG9wOjB9fSksZS5jcmVhdGVFbGVtZW50KFwiZGl2XCIse2NsYXNzTmFtZTpsLnByZWZpeENsYXNzK1wiLXBvcG92ZXItYm9keVwiLHJlZjpwfSxlLmNyZWF0ZUVsZW1lbnQoUCx7Y3VzdG9tQ2xhc3NOYW1lOmwucHJlZml4Q2xhc3MrXCItcG9wb3Zlci1ib2R5LWFycm93XCIscG9zaXRpb246b30pLG4pKX0sTD1mdW5jdGlvbih0KXt2YXIgbj10LmNsb3NlT25Fc2NhcGUscj10Lm9uQ2xvc2UsYT1lLnVzZUNvbnRleHQoaSk7cmV0dXJuIGgoMjcsKGZ1bmN0aW9uKCl7cmV0dXJuIG4mJnIoKX0pKSxlLmNyZWF0ZUVsZW1lbnQoXCJkaXZcIix7Y2xhc3NOYW1lOmEucHJlZml4Q2xhc3MrXCItcG9wb3Zlci1vdmVybGF5XCJ9KX0sUj1mdW5jdGlvbih0KXt2YXIgbj10LmNoaWxkcmVuLHI9dC5vZmZzZXQsYT10LnBvc2l0aW9uLG89dC50YXJnZXRSZWYscz1lLnVzZUNvbnRleHQoaSksYz1lLmNyZWF0ZVJlZigpLGw9ZS5jcmVhdGVSZWYoKTtyZXR1cm4gYihjLG8sbCxhLHIpLGUuY3JlYXRlRWxlbWVudChlLkZyYWdtZW50LG51bGwsZS5jcmVhdGVFbGVtZW50KFwiZGl2XCIse3JlZjpsLHN0eWxlOntsZWZ0OjAscG9zaXRpb246XCJhYnNvbHV0ZVwiLHRvcDowfX0pLGUuY3JlYXRlRWxlbWVudChcImRpdlwiLHtjbGFzc05hbWU6cy5wcmVmaXhDbGFzcytcIi10b29sdGlwLWJvZHlcIixyZWY6Y30sZS5jcmVhdGVFbGVtZW50KFAse2N1c3RvbUNsYXNzTmFtZTpzLnByZWZpeENsYXNzK1wiLXRvb2x0aXAtYm9keS1hcnJvd1wiLHBvc2l0aW9uOmF9KSxlLmNyZWF0ZUVsZW1lbnQoXCJkaXZcIix7Y2xhc3NOYW1lOnMucHJlZml4Q2xhc3MrXCItdG9vbHRpcC1ib2R5LWNvbnRlbnRcIn0sbikpKX07IWZ1bmN0aW9uKGUpe2UuQWN0dWFsU2l6ZT1cIkFjdHVhbFNpemVcIixlLlBhZ2VGaXQ9XCJQYWdlRml0XCIsZS5QYWdlV2lkdGg9XCJQYWdlV2lkdGhcIn0oeXx8KHk9e30pKTt2YXIgVD15LE09ZnVuY3Rpb24oZSx0KXtyZXR1cm4oTT1PYmplY3Quc2V0UHJvdG90eXBlT2Z8fHtfX3Byb3RvX186W119aW5zdGFuY2VvZiBBcnJheSYmZnVuY3Rpb24oZSx0KXtlLl9fcHJvdG9fXz10fXx8ZnVuY3Rpb24oZSx0KXtmb3IodmFyIG4gaW4gdCl0Lmhhc093blByb3BlcnR5KG4pJiYoZVtuXT10W25dKX0pKGUsdCl9O1xuLyohICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXG5Db3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi5cblxuUGVybWlzc2lvbiB0byB1c2UsIGNvcHksIG1vZGlmeSwgYW5kL29yIGRpc3RyaWJ1dGUgdGhpcyBzb2Z0d2FyZSBmb3IgYW55XG5wdXJwb3NlIHdpdGggb3Igd2l0aG91dCBmZWUgaXMgaGVyZWJ5IGdyYW50ZWQuXG5cblRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIgQU5EIFRIRSBBVVRIT1IgRElTQ0xBSU1TIEFMTCBXQVJSQU5USUVTIFdJVEhcblJFR0FSRCBUTyBUSElTIFNPRlRXQVJFIElOQ0xVRElORyBBTEwgSU1QTElFRCBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWVxuQU5EIEZJVE5FU1MuIElOIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1IgQkUgTElBQkxFIEZPUiBBTlkgU1BFQ0lBTCwgRElSRUNULFxuSU5ESVJFQ1QsIE9SIENPTlNFUVVFTlRJQUwgREFNQUdFUyBPUiBBTlkgREFNQUdFUyBXSEFUU09FVkVSIFJFU1VMVElORyBGUk9NXG5MT1NTIE9GIFVTRSwgREFUQSBPUiBQUk9GSVRTLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgTkVHTElHRU5DRSBPUlxuT1RIRVIgVE9SVElPVVMgQUNUSU9OLCBBUklTSU5HIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFVTRSBPUlxuUEVSRk9STUFOQ0UgT0YgVEhJUyBTT0ZUV0FSRS5cbioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqICovZnVuY3Rpb24gTihlLHQpe2Z1bmN0aW9uIG4oKXt0aGlzLmNvbnN0cnVjdG9yPWV9TShlLHQpLGUucHJvdG90eXBlPW51bGw9PT10P09iamVjdC5jcmVhdGUodCk6KG4ucHJvdG90eXBlPXQucHJvdG90eXBlLG5ldyBuKX12YXIgUyxIPWZ1bmN0aW9uKCl7cmV0dXJuKEg9T2JqZWN0LmFzc2lnbnx8ZnVuY3Rpb24oZSl7Zm9yKHZhciB0LG49MSxyPWFyZ3VtZW50cy5sZW5ndGg7bjxyO24rKylmb3IodmFyIGEgaW4gdD1hcmd1bWVudHNbbl0pT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHQsYSkmJihlW2FdPXRbYV0pO3JldHVybiBlfSkuYXBwbHkodGhpcyxhcmd1bWVudHMpfTshZnVuY3Rpb24oZSl7ZVtlLlByZVJlbmRlcj0wXT1cIlByZVJlbmRlclwiLGVbZS5EaWRSZW5kZXI9MV09XCJEaWRSZW5kZXJcIn0oU3x8KFM9e30pKTt2YXIgQixGPVM7IWZ1bmN0aW9uKGUpe2VbZS5Tb2xpZD0xXT1cIlNvbGlkXCIsZVtlLkRhc2hlZD0yXT1cIkRhc2hlZFwiLGVbZS5CZXZlbGVkPTNdPVwiQmV2ZWxlZFwiLGVbZS5JbnNldD00XT1cIkluc2V0XCIsZVtlLlVuZGVybGluZT01XT1cIlVuZGVybGluZVwifShCfHwoQj17fSkpO3ZhciBJLEE9QixEPW5ldyBSZWdFeHAoXCJeRDooXFxcXGR7NH0pKFxcXFxkezJ9KT8oXFxcXGR7Mn0pPyhcXFxcZHsyfSk/KFxcXFxkezJ9KT8oXFxcXGR7Mn0pPyhbWnwrfC1dKT8oXFxcXGR7Mn0pPyc/KFxcXFxkezJ9KT8nP1wiKSxXPWZ1bmN0aW9uKGUsdCxuLHIpe3ZhciBhPXBhcnNlSW50KGUsMTApO3JldHVybiBhPj10JiZhPD1uP2E6cn0sVj1mdW5jdGlvbih0KXt2YXIgbj10LmFubm90YXRpb24scj1lLnVzZUNvbnRleHQoaSksYT1cIlwiO2lmKG4ubW9kaWZpY2F0aW9uRGF0ZSl7dmFyIHM9ZnVuY3Rpb24oZSl7dmFyIHQ9RC5leGVjKGUpO2lmKCF0KXJldHVybiBudWxsO3ZhciBuPXBhcnNlSW50KHRbMV0sMTApLHI9Vyh0WzJdLDEsMTIsMSktMSxhPVcodFszXSwxLDMxLDEpLG89Vyh0WzRdLDAsMjMsMCksaT1XKHRbNV0sMCw1OSwwKSxzPVcodFs2XSwwLDU5LDApLGM9dFs3XXx8XCJaXCIsbD1XKHRbOF0sMCwyMywwKSxwPVcodFs5XSwwLDU5LDApO3N3aXRjaChjKXtjYXNlXCItXCI6bys9bCxpKz1wO2JyZWFrO2Nhc2VcIitcIjpvLT1sLGktPXB9cmV0dXJuIG5ldyBEYXRlKERhdGUuVVRDKG4scixhLG8saSxzKSl9KG4ubW9kaWZpY2F0aW9uRGF0ZSk7YT1zP3MudG9Mb2NhbGVEYXRlU3RyaW5nKCkrXCIsIFwiK3MudG9Mb2NhbGVUaW1lU3RyaW5nKCk6XCJcIn1yZXR1cm4gZS5jcmVhdGVFbGVtZW50KFwiZGl2XCIse2NsYXNzTmFtZTpyLnByZWZpeENsYXNzK1wiLWFubm90YXRpb24tcG9wdXAtd3JhcHBlclwiLHN0eWxlOnt0b3A6bi5hbm5vdGF0aW9uVHlwZT09PW8uUG9wdXA/XCJcIjpcIjEwMCVcIn19LG4udGl0bGUmJmUuY3JlYXRlRWxlbWVudChcImRpdlwiLHtjbGFzc05hbWU6ci5wcmVmaXhDbGFzcytcIi1hbm5vdGF0aW9uLXBvcHVwLXdyYXBwZXItaGVhZGVyXCJ9LGUuY3JlYXRlRWxlbWVudChcImRpdlwiLHtjbGFzc05hbWU6ci5wcmVmaXhDbGFzcytcIi1hbm5vdGF0aW9uLXBvcHVwLXdyYXBwZXItdGl0bGVcIn0sbi50aXRsZSksZS5jcmVhdGVFbGVtZW50KFwic3BhblwiLHtjbGFzc05hbWU6ci5wcmVmaXhDbGFzcytcIi1hbm5vdGF0aW9uLXBvcHVwLXdyYXBwZXItZGF0ZVwifSxhKSksbi5jb250ZW50cyYmZS5jcmVhdGVFbGVtZW50KFwiZGl2XCIse2NsYXNzTmFtZTpyLnByZWZpeENsYXNzK1wiLWFubm90YXRpb24tcG9wdXAtd3JhcHBlci1jb250ZW50XCJ9LG4uY29udGVudHMuc3BsaXQoXCJcXG5cIikubWFwKChmdW5jdGlvbih0LG4pe3JldHVybiBlLmNyZWF0ZUVsZW1lbnQoZS5GcmFnbWVudCx7a2V5Om59LHQsZS5jcmVhdGVFbGVtZW50KFwiYnJcIixudWxsKSl9KSkpKX07IWZ1bmN0aW9uKGUpe2UuQ2xpY2s9XCJDbGlja1wiLGUuSG92ZXI9XCJIb3ZlclwifShJfHwoST17fSkpO3ZhciBqPWZ1bmN0aW9uKHQpe3ZhciBuLHI9dC5hbm5vdGF0aW9uLG89dC5jaGlsZHJlbixpPXQuaWdub3JlQm9yZGVyLHM9dC5oYXNQb3B1cCxjPXQuaXNSZW5kZXJhYmxlLGw9dC5wYWdlLHA9dC52aWV3cG9ydCx1PXIucmVjdCxkPWZ1bmN0aW9uKCl7dmFyIHQ9QygpLG49dC5vcGVuZWQscj10LnRvZ2dsZSxvPWUudXNlU3RhdGUoSS5Ib3ZlciksaT1vWzBdLHM9b1sxXTtyZXR1cm57b3BlbmVkOm4sY2xvc2VPbkhvdmVyOmZ1bmN0aW9uKCl7aT09PUkuSG92ZXImJnIoYS5DbG9zZSl9LG9wZW5PbkhvdmVyOmZ1bmN0aW9uKCl7aT09PUkuSG92ZXImJnIoYS5PcGVuKX0sdG9nZ2xlT25DbGljazpmdW5jdGlvbigpe3N3aXRjaChpKXtjYXNlIEkuQ2xpY2s6biYmcyhJLkhvdmVyKSxyKGEuVG9nZ2xlKTticmVhaztjYXNlIEkuSG92ZXI6cyhJLkNsaWNrKSxyKGEuT3Blbil9fX19KCksZj1kLmNsb3NlT25Ib3ZlcixnPWQub3BlbmVkLG09ZC5vcGVuT25Ib3ZlcixoPWQudG9nZ2xlT25DbGljayx2PShuPVt1WzBdLGwudmlld1szXStsLnZpZXdbMV0tdVsxXSx1WzJdLGwudmlld1szXStsLnZpZXdbMV0tdVszXV0sW01hdGgubWluKG5bMF0sblsyXSksTWF0aC5taW4oblsxXSxuWzNdKSxNYXRoLm1heChuWzBdLG5bMl0pLE1hdGgubWF4KG5bMV0sblszXSldKSxFPXVbMl0tdVswXSx4PXVbM10tdVsxXSx3PXtib3JkZXJDb2xvcjpcIlwiLGJvcmRlclJhZGl1czpcIlwiLGJvcmRlclN0eWxlOlwiXCIsYm9yZGVyV2lkdGg6XCJcIn07aWYoIWkmJnIuYm9yZGVyU3R5bGUud2lkdGg+MCl7c3dpdGNoKHIuYm9yZGVyU3R5bGUuc3R5bGUpe2Nhc2UgQS5EYXNoZWQ6dy5ib3JkZXJTdHlsZT1cImRhc2hlZFwiO2JyZWFrO2Nhc2UgQS5Tb2xpZDp3LmJvcmRlclN0eWxlPVwic29saWRcIjticmVhaztjYXNlIEEuVW5kZXJsaW5lOnc9T2JqZWN0LmFzc2lnbih7Ym9yZGVyQm90dG9tU3R5bGU6XCJzb2xpZFwifSx3KTticmVhaztjYXNlIEEuQmV2ZWxlZDpjYXNlIEEuSW5zZXQ6fXZhciB5PXIuYm9yZGVyU3R5bGUud2lkdGg7dy5ib3JkZXJXaWR0aD15K1wicHhcIixyLmJvcmRlclN0eWxlLnN0eWxlIT09QS5VbmRlcmxpbmUmJihFLT0yKnkseC09Mip5KTt2YXIgaz1yLmJvcmRlclN0eWxlLGI9ay5ob3Jpem9udGFsQ29ybmVyUmFkaXVzLFA9ay52ZXJ0aWNhbENvcm5lclJhZGl1czsoYj4wfHxQPjApJiYody5ib3JkZXJSYWRpdXM9YitcInB4IC8gXCIrUCtcInB4XCIpLHIuY29sb3I/dy5ib3JkZXJDb2xvcj1cInJnYihcIisoMHxyLmNvbG9yWzBdKStcIiwgXCIrKDB8ci5jb2xvclsxXSkrXCIsIFwiKygwfHIuY29sb3JbMl0pK1wiKVwiOncuYm9yZGVyV2lkdGg9XCIwXCJ9cmV0dXJuIGUuY3JlYXRlRWxlbWVudChlLkZyYWdtZW50LG51bGwsYyYmbyh7cG9wdXA6e29wZW5lZDpnLGNsb3NlT25Ib3ZlcjpmLG9wZW5PbkhvdmVyOm0sdG9nZ2xlT25DbGljazpofSxzbG90OnthdHRyczp7c3R5bGU6T2JqZWN0LmFzc2lnbih7aGVpZ2h0OngrXCJweFwiLGxlZnQ6dlswXStcInB4XCIsdG9wOnZbMV0rXCJweFwiLHRyYW5zZm9ybTpcIm1hdHJpeChcIitwLnRyYW5zZm9ybS5qb2luKFwiLFwiKStcIilcIix0cmFuc2Zvcm1PcmlnaW46XCItXCIrdlswXStcInB4IC1cIit2WzFdK1wicHhcIix3aWR0aDpFK1wicHhcIn0sdyl9LGNoaWxkcmVuOmUuY3JlYXRlRWxlbWVudChlLkZyYWdtZW50LG51bGwscyYmZyYmZS5jcmVhdGVFbGVtZW50KFYse2Fubm90YXRpb246cn0pKX19KSl9LF89ZnVuY3Rpb24odCl7dmFyIG49dC5hbm5vdGF0aW9uLHI9dC5wYWdlLGE9dC52aWV3cG9ydCxvPWUudXNlQ29udGV4dChpKSxzPSExPT09bi5oYXNQb3B1cCxjPSEhKG4uaGFzUG9wdXB8fG4udGl0bGV8fG4uY29udGVudHMpO3JldHVybiBlLmNyZWF0ZUVsZW1lbnQoaix7YW5ub3RhdGlvbjpuLGhhc1BvcHVwOnMsaWdub3JlQm9yZGVyOiEwLGlzUmVuZGVyYWJsZTpjLHBhZ2U6cix2aWV3cG9ydDphfSwoZnVuY3Rpb24odCl7cmV0dXJuIGUuY3JlYXRlRWxlbWVudChcImRpdlwiLEgoe30sdC5zbG90LmF0dHJzLHtjbGFzc05hbWU6by5wcmVmaXhDbGFzcytcIi1hbm5vdGF0aW9uIFwiK28ucHJlZml4Q2xhc3MrXCItYW5ub3RhdGlvbi1jYXJldFwiLFwiZGF0YS1hbm5vdGF0aW9uLWlkXCI6bi5pZCxvbkNsaWNrOnQucG9wdXAudG9nZ2xlT25DbGljayxvbk1vdXNlRW50ZXI6dC5wb3B1cC5vcGVuT25Ib3Zlcixvbk1vdXNlTGVhdmU6dC5wb3B1cC5jbG9zZU9uSG92ZXJ9KSx0LnNsb3QuY2hpbGRyZW4pfSkpfSx6PWZ1bmN0aW9uKHQpe3ZhciBuPXQuYW5ub3RhdGlvbixyPXQucGFnZSxhPXQudmlld3BvcnQsbz1lLnVzZUNvbnRleHQoaSkscz0hMT09PW4uaGFzUG9wdXAsYz0hIShuLmhhc1BvcHVwfHxuLnRpdGxlfHxuLmNvbnRlbnRzKSxsPW4ucmVjdCxwPWxbMl0tbFswXSx1PWxbM10tbFsxXSxkPW4uYm9yZGVyU3R5bGUud2lkdGg7cmV0dXJuIGUuY3JlYXRlRWxlbWVudChqLHthbm5vdGF0aW9uOm4saGFzUG9wdXA6cyxpZ25vcmVCb3JkZXI6ITAsaXNSZW5kZXJhYmxlOmMscGFnZTpyLHZpZXdwb3J0OmF9LChmdW5jdGlvbih0KXtyZXR1cm4gZS5jcmVhdGVFbGVtZW50KFwiZGl2XCIsSCh7fSx0LnNsb3QuYXR0cnMse2NsYXNzTmFtZTpvLnByZWZpeENsYXNzK1wiLWFubm90YXRpb24gXCIrby5wcmVmaXhDbGFzcytcIi1hbm5vdGF0aW9uLWNpcmNsZVwiLFwiZGF0YS1hbm5vdGF0aW9uLWlkXCI6bi5pZCxvbkNsaWNrOnQucG9wdXAudG9nZ2xlT25DbGljayxvbk1vdXNlRW50ZXI6dC5wb3B1cC5vcGVuT25Ib3Zlcixvbk1vdXNlTGVhdmU6dC5wb3B1cC5jbG9zZU9uSG92ZXJ9KSxlLmNyZWF0ZUVsZW1lbnQoXCJzdmdcIix7aGVpZ2h0OnUrXCJweFwiLHByZXNlcnZlQXNwZWN0UmF0aW86XCJub25lXCIsdmVyc2lvbjpcIjEuMVwiLHZpZXdCb3g6XCIwIDAgXCIrcCtcIiBcIit1LHdpZHRoOnArXCJweFwifSxlLmNyZWF0ZUVsZW1lbnQoXCJjaXJjbGVcIix7Y3k6dS8yLGZpbGw6XCJub25lXCIscng6cC8yLWQvMixyeTp1LzItZC8yLHN0cm9rZTpcInRyYW5zcGFyZW50XCIsc3Ryb2tlV2lkdGg6ZHx8MX0pKSx0LnNsb3QuY2hpbGRyZW4pfSkpfSxxPWZ1bmN0aW9uKHQpe3ZhciBuPXQuYW5ub3RhdGlvbixyPXQucGFnZSxhPXQudmlld3BvcnQsbz1lLnVzZUNvbnRleHQoaSkscz0hKCExIT09bi5oYXNQb3B1cHx8IW4udGl0bGUmJiFuLmNvbnRlbnRzKSxjPWZ1bmN0aW9uKCl7dmFyIGUsdCxyLGEsbz1uLmZpbGU7byYmKGU9by5maWxlbmFtZSx0PW8uY29udGVudCxyPVwic3RyaW5nXCI9PXR5cGVvZiB0P1wiXCI6VVJMLmNyZWF0ZU9iamVjdFVSTChuZXcgQmxvYihbdF0se3R5cGU6XCJcIn0pKSwoYT1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiYVwiKSkuc3R5bGUuZGlzcGxheT1cIm5vbmVcIixhLmhyZWY9cnx8ZSxhLnNldEF0dHJpYnV0ZShcImRvd25sb2FkXCIsZnVuY3Rpb24oZSl7dmFyIHQ9ZS5zcGxpdChcIi9cIikucG9wKCk7cmV0dXJuIHQ/dC5zcGxpdChcIiNcIilbMF0uc3BsaXQoXCI/XCIpWzBdOmV9KGUpKSxkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKGEpLGEuY2xpY2soKSxkb2N1bWVudC5ib2R5LnJlbW92ZUNoaWxkKGEpLHImJlVSTC5yZXZva2VPYmplY3RVUkwocikpfTtyZXR1cm4gZS5jcmVhdGVFbGVtZW50KGose2Fubm90YXRpb246bixoYXNQb3B1cDpzLGlnbm9yZUJvcmRlcjohMCxpc1JlbmRlcmFibGU6ITAscGFnZTpyLHZpZXdwb3J0OmF9LChmdW5jdGlvbih0KXtyZXR1cm4gZS5jcmVhdGVFbGVtZW50KFwiZGl2XCIsSCh7fSx0LnNsb3QuYXR0cnMse2NsYXNzTmFtZTpvLnByZWZpeENsYXNzK1wiLWFubm90YXRpb24gXCIrby5wcmVmaXhDbGFzcytcIi1hbm5vdGF0aW9uLWZpbGUtYXR0YWNobWVudFwiLFwiZGF0YS1hbm5vdGF0aW9uLWlkXCI6bi5pZCxvbkNsaWNrOnQucG9wdXAudG9nZ2xlT25DbGljayxvbkRvdWJsZUNsaWNrOmMsb25Nb3VzZUVudGVyOnQucG9wdXAub3Blbk9uSG92ZXIsb25Nb3VzZUxlYXZlOnQucG9wdXAuY2xvc2VPbkhvdmVyfSksdC5zbG90LmNoaWxkcmVuKX0pKX0sVT1mdW5jdGlvbih0KXt2YXIgbj10LmFubm90YXRpb24scj10LnBhZ2UsYT10LnZpZXdwb3J0LG89ZS51c2VDb250ZXh0KGkpLHM9ITE9PT1uLmhhc1BvcHVwLGM9ISEobi5oYXNQb3B1cHx8bi50aXRsZXx8bi5jb250ZW50cyk7cmV0dXJuIGUuY3JlYXRlRWxlbWVudChqLHthbm5vdGF0aW9uOm4saGFzUG9wdXA6cyxpZ25vcmVCb3JkZXI6ITAsaXNSZW5kZXJhYmxlOmMscGFnZTpyLHZpZXdwb3J0OmF9LChmdW5jdGlvbih0KXtyZXR1cm4gZS5jcmVhdGVFbGVtZW50KFwiZGl2XCIsSCh7fSx0LnNsb3QuYXR0cnMse2NsYXNzTmFtZTpvLnByZWZpeENsYXNzK1wiLWFubm90YXRpb24gXCIrby5wcmVmaXhDbGFzcytcIi1hbm5vdGF0aW9uLWZyZWUtdGV4dFwiLFwiZGF0YS1hbm5vdGF0aW9uLWlkXCI6bi5pZCxvbkNsaWNrOnQucG9wdXAudG9nZ2xlT25DbGljayxvbk1vdXNlRW50ZXI6dC5wb3B1cC5vcGVuT25Ib3Zlcixvbk1vdXNlTGVhdmU6dC5wb3B1cC5jbG9zZU9uSG92ZXJ9KSx0LnNsb3QuY2hpbGRyZW4pfSkpfSxaPWZ1bmN0aW9uKHQpe3ZhciBuPXQuYW5ub3RhdGlvbixyPXQucGFnZSxhPXQudmlld3BvcnQsbz1lLnVzZUNvbnRleHQoaSkscz0hMT09PW4uaGFzUG9wdXAsYz0hIShuLmhhc1BvcHVwfHxuLnRpdGxlfHxuLmNvbnRlbnRzKTtyZXR1cm4gZS5jcmVhdGVFbGVtZW50KGose2Fubm90YXRpb246bixoYXNQb3B1cDpzLGlnbm9yZUJvcmRlcjohMCxpc1JlbmRlcmFibGU6YyxwYWdlOnIsdmlld3BvcnQ6YX0sKGZ1bmN0aW9uKHQpe3JldHVybiBlLmNyZWF0ZUVsZW1lbnQoXCJkaXZcIixIKHt9LHQuc2xvdC5hdHRycyx7Y2xhc3NOYW1lOm8ucHJlZml4Q2xhc3MrXCItYW5ub3RhdGlvbiBcIitvLnByZWZpeENsYXNzK1wiLWFubm90YXRpb24taGlnaGxpZ2h0XCIsXCJkYXRhLWFubm90YXRpb24taWRcIjpuLmlkLG9uQ2xpY2s6dC5wb3B1cC50b2dnbGVPbkNsaWNrLG9uTW91c2VFbnRlcjp0LnBvcHVwLm9wZW5PbkhvdmVyLG9uTW91c2VMZWF2ZTp0LnBvcHVwLmNsb3NlT25Ib3Zlcn0pLHQuc2xvdC5jaGlsZHJlbil9KSl9LEc9ZnVuY3Rpb24odCl7dmFyIG49dC5hbm5vdGF0aW9uLHI9dC5wYWdlLGE9dC52aWV3cG9ydCxvPWUudXNlQ29udGV4dChpKSxzPSExPT09bi5oYXNQb3B1cCxjPSEhKG4uaGFzUG9wdXB8fG4udGl0bGV8fG4uY29udGVudHMpLGw9bi5yZWN0LHA9bFsyXS1sWzBdLHU9bFszXS1sWzFdLGQ9bi5ib3JkZXJTdHlsZS53aWR0aDtyZXR1cm4gZS5jcmVhdGVFbGVtZW50KGose2Fubm90YXRpb246bixoYXNQb3B1cDpzLGlnbm9yZUJvcmRlcjohMCxpc1JlbmRlcmFibGU6YyxwYWdlOnIsdmlld3BvcnQ6YX0sKGZ1bmN0aW9uKHQpe3JldHVybiBlLmNyZWF0ZUVsZW1lbnQoXCJkaXZcIixIKHt9LHQuc2xvdC5hdHRycyx7Y2xhc3NOYW1lOm8ucHJlZml4Q2xhc3MrXCItYW5ub3RhdGlvbiBcIitvLnByZWZpeENsYXNzK1wiLWFubm90YXRpb24taW5rXCIsXCJkYXRhLWFubm90YXRpb24taWRcIjpuLmlkLG9uQ2xpY2s6dC5wb3B1cC50b2dnbGVPbkNsaWNrLG9uTW91c2VFbnRlcjp0LnBvcHVwLm9wZW5PbkhvdmVyLG9uTW91c2VMZWF2ZTp0LnBvcHVwLmNsb3NlT25Ib3Zlcn0pLG4uaW5rTGlzdHMmJm4uaW5rTGlzdHMubGVuZ3RoJiZlLmNyZWF0ZUVsZW1lbnQoXCJzdmdcIix7aGVpZ2h0OnUrXCJweFwiLHByZXNlcnZlQXNwZWN0UmF0aW86XCJub25lXCIsdmVyc2lvbjpcIjEuMVwiLHZpZXdCb3g6XCIwIDAgXCIrcCtcIiBcIit1LHdpZHRoOnArXCJweFwifSxuLmlua0xpc3RzLm1hcCgoZnVuY3Rpb24odCxuKXtyZXR1cm4gZS5jcmVhdGVFbGVtZW50KFwicG9seWxpbmVcIix7a2V5Om4sZmlsbDpcIm5vbmVcIixzdHJva2U6XCJ0cmFuc3BhcmVudFwiLHN0cm9rZVdpZHRoOmR8fDEscG9pbnRzOnQubWFwKChmdW5jdGlvbihlKXtyZXR1cm4gZS54LWxbMF0rXCIsXCIrKGxbM10tZS55KX0pKS5qb2luKFwiIFwiKX0pfSkpKSx0LnNsb3QuY2hpbGRyZW4pfSkpfSxKPWZ1bmN0aW9uKHQpe3ZhciBuPXQuYW5ub3RhdGlvbixyPXQucGFnZSxhPXQudmlld3BvcnQsbz1lLnVzZUNvbnRleHQoaSkscz0hMT09PW4uaGFzUG9wdXAsYz0hIShuLmhhc1BvcHVwfHxuLnRpdGxlfHxuLmNvbnRlbnRzKSxsPW4ucmVjdCxwPWxbMl0tbFswXSx1PWxbM10tbFsxXSxkPW4uYm9yZGVyU3R5bGUud2lkdGg7cmV0dXJuIGUuY3JlYXRlRWxlbWVudChqLHthbm5vdGF0aW9uOm4saGFzUG9wdXA6cyxpZ25vcmVCb3JkZXI6ITAsaXNSZW5kZXJhYmxlOmMscGFnZTpyLHZpZXdwb3J0OmF9LChmdW5jdGlvbih0KXtyZXR1cm4gZS5jcmVhdGVFbGVtZW50KFwiZGl2XCIsSCh7fSx0LnNsb3QuYXR0cnMse2NsYXNzTmFtZTpvLnByZWZpeENsYXNzK1wiLWFubm90YXRpb24gXCIrby5wcmVmaXhDbGFzcytcIi1hbm5vdGF0aW9uLWxpbmVcIixcImRhdGEtYW5ub3RhdGlvbi1pZFwiOm4uaWQsb25DbGljazp0LnBvcHVwLnRvZ2dsZU9uQ2xpY2ssb25Nb3VzZUVudGVyOnQucG9wdXAub3Blbk9uSG92ZXIsb25Nb3VzZUxlYXZlOnQucG9wdXAuY2xvc2VPbkhvdmVyfSksZS5jcmVhdGVFbGVtZW50KFwic3ZnXCIse2hlaWdodDp1K1wicHhcIixwcmVzZXJ2ZUFzcGVjdFJhdGlvOlwibm9uZVwiLHZlcnNpb246XCIxLjFcIix2aWV3Qm94OlwiMCAwIFwiK3ArXCIgXCIrdSx3aWR0aDpwK1wicHhcIn0sZS5jcmVhdGVFbGVtZW50KFwibGluZVwiLHtzdHJva2U6XCJ0cmFuc3BhcmVudFwiLHN0cm9rZVdpZHRoOmR8fDEseDE6bFsyXS1uLmxpbmVDb29yZGluYXRlc1swXSx4MjpsWzJdLW4ubGluZUNvb3JkaW5hdGVzWzJdLHkxOmxbM10tbi5saW5lQ29vcmRpbmF0ZXNbMV0seTI6bFszXS1uLmxpbmVDb29yZGluYXRlc1szXX0pKSx0LnNsb3QuY2hpbGRyZW4pfSkpfSxYPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIG5ldyBQcm9taXNlKChmdW5jdGlvbihuKXtuZXcgUHJvbWlzZSgoZnVuY3Rpb24obil7XCJzdHJpbmdcIj09dHlwZW9mIHQ/ZS5nZXREZXN0aW5hdGlvbih0KS50aGVuKChmdW5jdGlvbihlKXtuKGUpfSkpOm4odCl9KSkudGhlbigoZnVuY3Rpb24odCl7ZS5nZXRQYWdlSW5kZXgodFswXSkudGhlbigoZnVuY3Rpb24oZSl7dmFyIHI9ZnVuY3Rpb24oZSx0KXtzd2l0Y2godFsxXS5uYW1lKXtjYXNlXCJYWVpcIjpyZXR1cm57Ym90dG9tT2Zmc2V0OnRbM10scGFnZUluZGV4OmUtMSxzY2FsZVRvOnRbNF19O2Nhc2VcIkZpdFwiOnJldHVybntib3R0b21PZmZzZXQ6MCxwYWdlSW5kZXg6ZS0xLHNjYWxlVG86VC5QYWdlRml0fTtkZWZhdWx0OnJldHVybntib3R0b21PZmZzZXQ6MCxwYWdlSW5kZXg6ZS0xLHNjYWxlVG86MX19fShlLHQpO24ocil9KSl9KSl9KSl9LFk9ZnVuY3Rpb24odCl7dmFyIG49dC5hbm5vdGF0aW9uLHI9dC5kb2MsYT10LnBhZ2Usbz10LnZpZXdwb3J0LHM9dC5vbkV4ZWN1dGVOYW1lZEFjdGlvbixjPXQub25KdW1wVG9EZXN0LGw9ZS51c2VDb250ZXh0KGkpLHA9ISEobi51cmx8fG4uZGVzdHx8bi5hY3Rpb24pLHU9bi51cmw/e2hyZWY6bi51cmwscmVsOlwibm9vcGVuZXIgbm9yZWZlcnJlciBub2ZvbGxvd1wiLHRhcmdldDpuLm5ld1dpbmRvdz9cIl9ibGFua1wiOlwiXCIsdGl0bGU6bi51cmx9OntocmVmOlwiXCIsb25DbGljazpmdW5jdGlvbihlKXtlLnByZXZlbnREZWZhdWx0KCksbi5hY3Rpb24/cyhuLmFjdGlvbik6WChyLG4uZGVzdCkudGhlbigoZnVuY3Rpb24oZSl7dmFyIHQ9ZS5wYWdlSW5kZXgsbj1lLmJvdHRvbU9mZnNldCxyPWUuc2NhbGVUbztjKHQrMSxuLDAscil9KSl9fTtyZXR1cm4gZS5jcmVhdGVFbGVtZW50KGose2Fubm90YXRpb246bixoYXNQb3B1cDohMSxpZ25vcmVCb3JkZXI6ITEsaXNSZW5kZXJhYmxlOnAscGFnZTphLHZpZXdwb3J0Om99LChmdW5jdGlvbih0KXtyZXR1cm4gZS5jcmVhdGVFbGVtZW50KFwiZGl2XCIsSCh7fSx0LnNsb3QuYXR0cnMse2NsYXNzTmFtZTpsLnByZWZpeENsYXNzK1wiLWFubm90YXRpb24gXCIrbC5wcmVmaXhDbGFzcytcIi1hbm5vdGF0aW9uLWxpbmtcIixcImRhdGEtYW5ub3RhdGlvbi1pZFwiOm4uaWR9KSxlLmNyZWF0ZUVsZW1lbnQoXCJhXCIsSCh7fSx1KSkpfSkpfSxLPWZ1bmN0aW9uKHQpe3ZhciBuPXQuYW5ub3RhdGlvbixyPXQucGFnZSxhPXQudmlld3BvcnQsbz1lLnVzZUNvbnRleHQoaSkscz0hMT09PW4uaGFzUG9wdXAsYz0hIShuLmhhc1BvcHVwfHxuLnRpdGxlfHxuLmNvbnRlbnRzKSxsPW4ucmVjdCxwPWxbMl0tbFswXSx1PWxbM10tbFsxXSxkPW4uYm9yZGVyU3R5bGUud2lkdGg7cmV0dXJuIGUuY3JlYXRlRWxlbWVudChqLHthbm5vdGF0aW9uOm4saGFzUG9wdXA6cyxpZ25vcmVCb3JkZXI6ITAsaXNSZW5kZXJhYmxlOmMscGFnZTpyLHZpZXdwb3J0OmF9LChmdW5jdGlvbih0KXtyZXR1cm4gZS5jcmVhdGVFbGVtZW50KFwiZGl2XCIsSCh7fSx0LnNsb3QuYXR0cnMse2NsYXNzTmFtZTpvLnByZWZpeENsYXNzK1wiLWFubm90YXRpb24gXCIrby5wcmVmaXhDbGFzcytcIi1hbm5vdGF0aW9uLXBvbHlnb25cIixcImRhdGEtYW5ub3RhdGlvbi1pZFwiOm4uaWQsb25DbGljazp0LnBvcHVwLnRvZ2dsZU9uQ2xpY2ssb25Nb3VzZUVudGVyOnQucG9wdXAub3Blbk9uSG92ZXIsb25Nb3VzZUxlYXZlOnQucG9wdXAuY2xvc2VPbkhvdmVyfSksbi52ZXJ0aWNlcyYmbi52ZXJ0aWNlcy5sZW5ndGgmJmUuY3JlYXRlRWxlbWVudChcInN2Z1wiLHtoZWlnaHQ6dStcInB4XCIscHJlc2VydmVBc3BlY3RSYXRpbzpcIm5vbmVcIix2ZXJzaW9uOlwiMS4xXCIsdmlld0JveDpcIjAgMCBcIitwK1wiIFwiK3Usd2lkdGg6cCtcInB4XCJ9LGUuY3JlYXRlRWxlbWVudChcInBvbHlnb25cIix7ZmlsbDpcIm5vbmVcIixzdHJva2U6XCJ0cmFuc3BhcmVudFwiLHN0cm9rZVdpZHRoOmR8fDEscG9pbnRzOm4udmVydGljZXMubWFwKChmdW5jdGlvbihlKXtyZXR1cm4gZS54LWxbMF0rXCIsXCIrKGxbM10tZS55KX0pKS5qb2luKFwiIFwiKX0pKSx0LnNsb3QuY2hpbGRyZW4pfSkpfSxRPWZ1bmN0aW9uKHQpe3ZhciBuPXQuYW5ub3RhdGlvbixyPXQucGFnZSxhPXQudmlld3BvcnQsbz1lLnVzZUNvbnRleHQoaSkscz0hMT09PW4uaGFzUG9wdXAsYz0hIShuLmhhc1BvcHVwfHxuLnRpdGxlfHxuLmNvbnRlbnRzKSxsPW4ucmVjdCxwPWxbMl0tbFswXSx1PWxbM10tbFsxXSxkPW4uYm9yZGVyU3R5bGUud2lkdGg7cmV0dXJuIGUuY3JlYXRlRWxlbWVudChqLHthbm5vdGF0aW9uOm4saGFzUG9wdXA6cyxpZ25vcmVCb3JkZXI6ITAsaXNSZW5kZXJhYmxlOmMscGFnZTpyLHZpZXdwb3J0OmF9LChmdW5jdGlvbih0KXtyZXR1cm4gZS5jcmVhdGVFbGVtZW50KFwiZGl2XCIsSCh7fSx0LnNsb3QuYXR0cnMse2NsYXNzTmFtZTpvLnByZWZpeENsYXNzK1wiLWFubm90YXRpb24gXCIrby5wcmVmaXhDbGFzcytcIi1hbm5vdGF0aW9uLXBvbHlsaW5lXCIsXCJkYXRhLWFubm90YXRpb24taWRcIjpuLmlkLG9uQ2xpY2s6dC5wb3B1cC50b2dnbGVPbkNsaWNrLG9uTW91c2VFbnRlcjp0LnBvcHVwLm9wZW5PbkhvdmVyLG9uTW91c2VMZWF2ZTp0LnBvcHVwLmNsb3NlT25Ib3Zlcn0pLG4udmVydGljZXMmJm4udmVydGljZXMubGVuZ3RoJiZlLmNyZWF0ZUVsZW1lbnQoXCJzdmdcIix7aGVpZ2h0OnUrXCJweFwiLHByZXNlcnZlQXNwZWN0UmF0aW86XCJub25lXCIsdmVyc2lvbjpcIjEuMVwiLHZpZXdCb3g6XCIwIDAgXCIrcCtcIiBcIit1LHdpZHRoOnArXCJweFwifSxlLmNyZWF0ZUVsZW1lbnQoXCJwb2x5bGluZVwiLHtmaWxsOlwibm9uZVwiLHN0cm9rZTpcInRyYW5zcGFyZW50XCIsc3Ryb2tlV2lkdGg6ZHx8MSxwb2ludHM6bi52ZXJ0aWNlcy5tYXAoKGZ1bmN0aW9uKGUpe3JldHVybiBlLngtbFswXStcIixcIisobFszXS1lLnkpfSkpLmpvaW4oXCIgXCIpfSkpLHQuc2xvdC5jaGlsZHJlbil9KSl9LCQ9ZnVuY3Rpb24odCl7dmFyIG49dC5hbm5vdGF0aW9uLHI9dC5wYWdlLGE9dC52aWV3cG9ydCxvPWUudXNlQ29udGV4dChpKSxzPSEoIW4udGl0bGUmJiFuLmNvbnRlbnRzKSxjPSFuLnBhcmVudFR5cGV8fC0xIT09W1wiQ2lyY2xlXCIsXCJJbmtcIixcIkxpbmVcIixcIlBvbHlnb25cIixcIlBvbHlMaW5lXCIsXCJTcXVhcmVcIl0uaW5kZXhPZihuLnBhcmVudFR5cGUpO3JldHVybiBlLnVzZUxheW91dEVmZmVjdCgoZnVuY3Rpb24oKXtpZihuLnBhcmVudElkKXt2YXIgZT1kb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdbZGF0YS1hbm5vdGF0aW9uLWlkPVwiJytuLnBhcmVudElkKydcIl0nKSx0PWRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ1tkYXRhLWFubm90YXRpb24taWQ9XCInK24uaWQrJ1wiXScpO2lmKGUmJnQpe3ZhciByPXBhcnNlRmxvYXQoZS5zdHlsZS5sZWZ0KSxhPXBhcnNlRmxvYXQoZS5zdHlsZS50b3ApK3BhcnNlRmxvYXQoZS5zdHlsZS5oZWlnaHQpO3Quc3R5bGUubGVmdD1yK1wicHhcIix0LnN0eWxlLnRvcD1hK1wicHhcIix0LnN0eWxlLnRyYW5zZm9ybU9yaWdpbj1cIi1cIityK1wicHggLVwiK2ErXCJweFwifX19KSxbXSksZS5jcmVhdGVFbGVtZW50KGose2Fubm90YXRpb246bixoYXNQb3B1cDpjLGlnbm9yZUJvcmRlcjohMSxpc1JlbmRlcmFibGU6cyxwYWdlOnIsdmlld3BvcnQ6YX0sKGZ1bmN0aW9uKHQpe3JldHVybiBlLmNyZWF0ZUVsZW1lbnQoXCJkaXZcIixIKHt9LHQuc2xvdC5hdHRycyx7Y2xhc3NOYW1lOm8ucHJlZml4Q2xhc3MrXCItYW5ub3RhdGlvbiBcIitvLnByZWZpeENsYXNzK1wiLWFubm90YXRpb24tcG9wdXBcIixcImRhdGEtYW5ub3RhdGlvbi1pZFwiOm4uaWR9KSxlLmNyZWF0ZUVsZW1lbnQoVix7YW5ub3RhdGlvbjpufSkpfSkpfSxlZT1mdW5jdGlvbih0KXt2YXIgbj10LmFubm90YXRpb24scj10LnBhZ2UsYT10LnZpZXdwb3J0LG89ZS51c2VDb250ZXh0KGkpLHM9ITE9PT1uLmhhc1BvcHVwLGM9ISEobi5oYXNQb3B1cHx8bi50aXRsZXx8bi5jb250ZW50cyksbD1uLnJlY3QscD1sWzJdLWxbMF0sdT1sWzNdLWxbMV0sZD1uLmJvcmRlclN0eWxlLndpZHRoO3JldHVybiBlLmNyZWF0ZUVsZW1lbnQoaix7YW5ub3RhdGlvbjpuLGhhc1BvcHVwOnMsaWdub3JlQm9yZGVyOiEwLGlzUmVuZGVyYWJsZTpjLHBhZ2U6cix2aWV3cG9ydDphfSwoZnVuY3Rpb24odCl7cmV0dXJuIGUuY3JlYXRlRWxlbWVudChcImRpdlwiLEgoe30sdC5zbG90LmF0dHJzLHtjbGFzc05hbWU6by5wcmVmaXhDbGFzcytcIi1hbm5vdGF0aW9uIFwiK28ucHJlZml4Q2xhc3MrXCItYW5ub3RhdGlvbi1zcXVhcmVcIixcImRhdGEtYW5ub3RhdGlvbi1pZFwiOm4uaWQsb25DbGljazp0LnBvcHVwLnRvZ2dsZU9uQ2xpY2ssb25Nb3VzZUVudGVyOnQucG9wdXAub3Blbk9uSG92ZXIsb25Nb3VzZUxlYXZlOnQucG9wdXAuY2xvc2VPbkhvdmVyfSksZS5jcmVhdGVFbGVtZW50KFwic3ZnXCIse2hlaWdodDp1K1wicHhcIixwcmVzZXJ2ZUFzcGVjdFJhdGlvOlwibm9uZVwiLHZlcnNpb246XCIxLjFcIix2aWV3Qm94OlwiMCAwIFwiK3ArXCIgXCIrdSx3aWR0aDpwK1wicHhcIn0sZS5jcmVhdGVFbGVtZW50KFwicmVjdFwiLHtoZWlnaHQ6dS1kLGZpbGw6XCJub25lXCIsc3Ryb2tlOlwidHJhbnNwYXJlbnRcIixzdHJva2VXaWR0aDpkfHwxLHg6ZC8yLHk6ZC8yLHdpZHRoOnAtZH0pKSx0LnNsb3QuY2hpbGRyZW4pfSkpfSx0ZT1mdW5jdGlvbih0KXt2YXIgbj10LmFubm90YXRpb24scj10LnBhZ2UsYT10LnZpZXdwb3J0LG89ZS51c2VDb250ZXh0KGkpLHM9ITE9PT1uLmhhc1BvcHVwLGM9ISEobi5oYXNQb3B1cHx8bi50aXRsZXx8bi5jb250ZW50cyk7cmV0dXJuIGUuY3JlYXRlRWxlbWVudChqLHthbm5vdGF0aW9uOm4saGFzUG9wdXA6cyxpZ25vcmVCb3JkZXI6ITAsaXNSZW5kZXJhYmxlOmMscGFnZTpyLHZpZXdwb3J0OmF9LChmdW5jdGlvbih0KXtyZXR1cm4gZS5jcmVhdGVFbGVtZW50KFwiZGl2XCIsSCh7fSx0LnNsb3QuYXR0cnMse2NsYXNzTmFtZTpvLnByZWZpeENsYXNzK1wiLWFubm90YXRpb24gXCIrby5wcmVmaXhDbGFzcytcIi1hbm5vdGF0aW9uLXNxdWlnZ2x5XCIsXCJkYXRhLWFubm90YXRpb24taWRcIjpuLmlkLG9uQ2xpY2s6dC5wb3B1cC50b2dnbGVPbkNsaWNrLG9uTW91c2VFbnRlcjp0LnBvcHVwLm9wZW5PbkhvdmVyLG9uTW91c2VMZWF2ZTp0LnBvcHVwLmNsb3NlT25Ib3Zlcn0pLHQuc2xvdC5jaGlsZHJlbil9KSl9LG5lPWZ1bmN0aW9uKHQpe3ZhciBuPXQuYW5ub3RhdGlvbixyPXQucGFnZSxhPXQudmlld3BvcnQsbz1lLnVzZUNvbnRleHQoaSkscz0hMT09PW4uaGFzUG9wdXAsYz0hIShuLmhhc1BvcHVwfHxuLnRpdGxlfHxuLmNvbnRlbnRzKTtyZXR1cm4gZS5jcmVhdGVFbGVtZW50KGose2Fubm90YXRpb246bixoYXNQb3B1cDpzLGlnbm9yZUJvcmRlcjohMCxpc1JlbmRlcmFibGU6YyxwYWdlOnIsdmlld3BvcnQ6YX0sKGZ1bmN0aW9uKHQpe3JldHVybiBlLmNyZWF0ZUVsZW1lbnQoXCJkaXZcIixIKHt9LHQuc2xvdC5hdHRycyx7Y2xhc3NOYW1lOm8ucHJlZml4Q2xhc3MrXCItYW5ub3RhdGlvbiBcIitvLnByZWZpeENsYXNzK1wiLWFubm90YXRpb24tc3RhbXBcIixcImRhdGEtYW5ub3RhdGlvbi1pZFwiOm4uaWQsb25DbGljazp0LnBvcHVwLnRvZ2dsZU9uQ2xpY2ssb25Nb3VzZUVudGVyOnQucG9wdXAub3Blbk9uSG92ZXIsb25Nb3VzZUxlYXZlOnQucG9wdXAuY2xvc2VPbkhvdmVyfSksdC5zbG90LmNoaWxkcmVuKX0pKX0scmU9ZnVuY3Rpb24odCl7dmFyIG49dC5hbm5vdGF0aW9uLHI9dC5wYWdlLGE9dC52aWV3cG9ydCxvPWUudXNlQ29udGV4dChpKSxzPSExPT09bi5oYXNQb3B1cCxjPSEhKG4uaGFzUG9wdXB8fG4udGl0bGV8fG4uY29udGVudHMpO3JldHVybiBlLmNyZWF0ZUVsZW1lbnQoaix7YW5ub3RhdGlvbjpuLGhhc1BvcHVwOnMsaWdub3JlQm9yZGVyOiEwLGlzUmVuZGVyYWJsZTpjLHBhZ2U6cix2aWV3cG9ydDphfSwoZnVuY3Rpb24odCl7cmV0dXJuIGUuY3JlYXRlRWxlbWVudChcImRpdlwiLEgoe30sdC5zbG90LmF0dHJzLHtjbGFzc05hbWU6by5wcmVmaXhDbGFzcytcIi1hbm5vdGF0aW9uIFwiK28ucHJlZml4Q2xhc3MrXCItYW5ub3RhdGlvbi1zdHJpa2Utb3V0XCIsXCJkYXRhLWFubm90YXRpb24taWRcIjpuLmlkLG9uQ2xpY2s6dC5wb3B1cC50b2dnbGVPbkNsaWNrLG9uTW91c2VFbnRlcjp0LnBvcHVwLm9wZW5PbkhvdmVyLG9uTW91c2VMZWF2ZTp0LnBvcHVwLmNsb3NlT25Ib3Zlcn0pLHQuc2xvdC5jaGlsZHJlbil9KSl9LGFlPWZ1bmN0aW9uKCl7cmV0dXJuIGUuY3JlYXRlRWxlbWVudChjLHtzaXplOjE2fSxlLmNyZWF0ZUVsZW1lbnQoXCJwYXRoXCIse2Q6XCJNLjUsMTYuNWExLDEsMCwwLDAsMSwxaDJ2NGw0LTRoMTVhMSwxLDAsMCwwLDEtMVYzLjVhMSwxLDAsMCwwLTEtMUgxLjVhMSwxLDAsMCwwLTEsMVpcIn0pLGUuY3JlYXRlRWxlbWVudChcInBhdGhcIix7ZDpcIk03LjI1LDkuNzVBLjI1LjI1LDAsMSwxLDcsMTBhLjI1LjI1LDAsMCwxLC4yNS0uMjVcIn0pLGUuY3JlYXRlRWxlbWVudChcInBhdGhcIix7ZDpcIk0xMiw5Ljc1YS4yNS4yNSwwLDEsMS0uMjUuMjVBLjI1LjI1LDAsMCwxLDEyLDkuNzVcIn0pLGUuY3JlYXRlRWxlbWVudChcInBhdGhcIix7ZDpcIk0xNi43NSw5Ljc1YS4yNS4yNSwwLDEsMS0uMjUuMjUuMjUuMjUsMCwwLDEsLjI1LS4yNVwifSkpfSxvZT1mdW5jdGlvbigpe3JldHVybiBlLmNyZWF0ZUVsZW1lbnQoYyx7c2l6ZToxNn0sZS5jcmVhdGVFbGVtZW50KFwicGF0aFwiLHtkOlwiTTAuNTAwIDEyLjAwMSBBMTEuNTAwIDExLjUwMCAwIDEgMCAyMy41MDAgMTIuMDAxIEExMS41MDAgMTEuNTAwIDAgMSAwIDAuNTAwIDEyLjAwMSBaXCJ9KSxlLmNyZWF0ZUVsZW1lbnQoXCJwYXRoXCIse2Q6XCJNNi4wMDAgMTIuMDAxIEE2LjAwMCA2LjAwMCAwIDEgMCAxOC4wMDAgMTIuMDAxIEE2LjAwMCA2LjAwMCAwIDEgMCA2LjAwMCAxMi4wMDEgWlwifSksZS5jcmVhdGVFbGVtZW50KFwicGF0aFwiLHtkOlwiTTIxLjQyMyA1LjQwNkwxNy40MTUgOS40MTRcIn0pLGUuY3JlYXRlRWxlbWVudChcInBhdGhcIix7ZDpcIk0xNC41ODcgNi41ODVMMTguNjA3IDIuNTY1XCJ9KSxlLmNyZWF0ZUVsZW1lbnQoXCJwYXRoXCIse2Q6XCJNNS40MDUgMjEuNDI0TDkuNDEzIDE3LjQxNlwifSksZS5jcmVhdGVFbGVtZW50KFwicGF0aFwiLHtkOlwiTTYuNTg1IDE0LjU4OEwyLjU3NyAxOC41OTZcIn0pLGUuY3JlYXRlRWxlbWVudChcInBhdGhcIix7ZDpcIk0xOC42MDIgMjEuNDE5TDE0LjU5NSAxNy40MTJcIn0pLGUuY3JlYXRlRWxlbWVudChcInBhdGhcIix7ZDpcIk0xNy40MTkgMTQuNThMMjEuNDI4IDE4LjU4OVwifSksZS5jcmVhdGVFbGVtZW50KFwicGF0aFwiLHtkOlwiTTIuNTgyIDUuMzk5TDYuNTg4IDkuNDA2XCJ9KSxlLmNyZWF0ZUVsZW1lbnQoXCJwYXRoXCIse2Q6XCJNOS40MjEgNi41ODFMNS40MTIgMi41NzJcIn0pKX0saWU9ZnVuY3Rpb24oKXtyZXR1cm4gZS5jcmVhdGVFbGVtZW50KGMse3NpemU6MTZ9LGUuY3JlYXRlRWxlbWVudChcInBhdGhcIix7ZDpcIk00LjAwMCAxOC41MDAgQTEuNTAwIDEuNTAwIDAgMSAwIDcuMDAwIDE4LjUwMCBBMS41MDAgMS41MDAgMCAxIDAgNC4wMDAgMTguNTAwIFpcIn0pLGUuY3JlYXRlRWxlbWVudChcInBhdGhcIix7ZDpcIk0yMC41LjVsLTkuNzgyLDkuNzgzYTcsNywwLDEsMCwzLDNMMTcsMTBoMS41VjguNUwxOSw4aDEuNVY2LjVMMjEsNmgxLjVWNC41bDEtMVYuNVpcIn0pKX0sc2U9ZnVuY3Rpb24oKXtyZXR1cm4gZS5jcmVhdGVFbGVtZW50KGMse3NpemU6MTZ9LGUuY3JlYXRlRWxlbWVudChcInBhdGhcIix7ZDpcIk0yLjAwMCAyLjUwMCBMMjIuMDAwIDIuNTAwIEwyMi4wMDAgMjMuNTAwIEwyLjAwMCAyMy41MDAgWlwifSksZS5jcmVhdGVFbGVtZW50KFwicGF0aFwiLHtkOlwiTTYgNC41TDYgMC41XCJ9KSxlLmNyZWF0ZUVsZW1lbnQoXCJwYXRoXCIse2Q6XCJNMTggNC41TDE4IDAuNVwifSksZS5jcmVhdGVFbGVtZW50KFwicGF0aFwiLHtkOlwiTTEwIDQuNUwxMCAwLjVcIn0pLGUuY3JlYXRlRWxlbWVudChcInBhdGhcIix7ZDpcIk0xNCA0LjVMMTQgMC41XCJ9KSl9LGNlPWZ1bmN0aW9uKCl7cmV0dXJuIGUuY3JlYXRlRWxlbWVudChjLHtzaXplOjE2fSxlLmNyZWF0ZUVsZW1lbnQoXCJwYXRoXCIse2Q6XCJNMTcuNSAwLjQ5OEwxNy41IDIzLjQ5OFwifSksZS5jcmVhdGVFbGVtZW50KFwicGF0aFwiLHtkOlwiTTEwLjUgMC40OThMMTAuNSAyMy40OThcIn0pLGUuY3JlYXRlRWxlbWVudChcInBhdGhcIix7ZDpcIk0yMy41LjVINi41YTYsNiwwLDAsMCwwLDEyaDRcIn0pKX0sbGU9ZnVuY3Rpb24oKXtyZXR1cm4gZS5jcmVhdGVFbGVtZW50KGMse3NpemU6MTZ9LGUuY3JlYXRlRWxlbWVudChcInBhdGhcIix7ZDpcIk0yLjUgMjIuOTk1TDEyIDYuMDA1IDIxLjUgMjIuOTk1IDIuNSAyMi45OTV6XCJ9KSl9LHBlPWZ1bmN0aW9uKHQpe3ZhciBuPXQuYW5ub3RhdGlvbixyPXQuY2hpbGRBbm5vdGF0aW9uLGE9dC5wYWdlLHM9dC52aWV3cG9ydCxjPWUudXNlQ29udGV4dChpKSxwPSExPT09bi5oYXNQb3B1cCx1PSEhKG4uaGFzUG9wdXB8fG4udGl0bGV8fG4uY29udGVudHMpLGQ9bi5uYW1lP24ubmFtZS50b0xvd2VyQ2FzZSgpOlwiXCI7cmV0dXJuIGUuY3JlYXRlRWxlbWVudChqLHthbm5vdGF0aW9uOm4saGFzUG9wdXA6cCxpZ25vcmVCb3JkZXI6ITEsaXNSZW5kZXJhYmxlOnUscGFnZTphLHZpZXdwb3J0OnN9LChmdW5jdGlvbih0KXtyZXR1cm4gZS5jcmVhdGVFbGVtZW50KGUuRnJhZ21lbnQsbnVsbCxlLmNyZWF0ZUVsZW1lbnQoXCJkaXZcIixIKHt9LHQuc2xvdC5hdHRycyx7Y2xhc3NOYW1lOmMucHJlZml4Q2xhc3MrXCItYW5ub3RhdGlvbiBcIitjLnByZWZpeENsYXNzK1wiLWFubm90YXRpb24tdGV4dFwiLFwiZGF0YS1hbm5vdGF0aW9uLWlkXCI6bi5pZCxvbkNsaWNrOnQucG9wdXAudG9nZ2xlT25DbGljayxvbk1vdXNlRW50ZXI6dC5wb3B1cC5vcGVuT25Ib3Zlcixvbk1vdXNlTGVhdmU6dC5wb3B1cC5jbG9zZU9uSG92ZXJ9KSxkJiZlLmNyZWF0ZUVsZW1lbnQoXCJkaXZcIix7Y2xhc3NOYW1lOmMucHJlZml4Q2xhc3MrXCItYW5ub3RhdGlvbi10ZXh0LWljb25cIn0sXCJjaGVja1wiPT09ZCYmZS5jcmVhdGVFbGVtZW50KGwsbnVsbCksXCJjb21tZW50XCI9PT1kJiZlLmNyZWF0ZUVsZW1lbnQoYWUsbnVsbCksXCJoZWxwXCI9PT1kJiZlLmNyZWF0ZUVsZW1lbnQob2UsbnVsbCksXCJpbnNlcnRcIj09PWQmJmUuY3JlYXRlRWxlbWVudChsZSxudWxsKSxcImtleVwiPT09ZCYmZS5jcmVhdGVFbGVtZW50KGllLG51bGwpLFwibm90ZVwiPT09ZCYmZS5jcmVhdGVFbGVtZW50KHNlLG51bGwpLChcIm5ld3BhcmFncmFwaFwiPT09ZHx8XCJwYXJhZ3JhcGhcIj09PWQpJiZlLmNyZWF0ZUVsZW1lbnQoY2UsbnVsbCkpLHQuc2xvdC5jaGlsZHJlbiksciYmci5hbm5vdGF0aW9uVHlwZT09PW8uUG9wdXAmJnQucG9wdXAub3BlbmVkJiZlLmNyZWF0ZUVsZW1lbnQoJCx7YW5ub3RhdGlvbjpyLHBhZ2U6YSx2aWV3cG9ydDpzfSkpfSkpfSx1ZT1mdW5jdGlvbih0KXt2YXIgbj10LmFubm90YXRpb24scj10LnBhZ2UsYT10LnZpZXdwb3J0LG89ZS51c2VDb250ZXh0KGkpLHM9ITE9PT1uLmhhc1BvcHVwLGM9ISEobi5oYXNQb3B1cHx8bi50aXRsZXx8bi5jb250ZW50cyk7cmV0dXJuIGUuY3JlYXRlRWxlbWVudChqLHthbm5vdGF0aW9uOm4saGFzUG9wdXA6cyxpZ25vcmVCb3JkZXI6ITAsaXNSZW5kZXJhYmxlOmMscGFnZTpyLHZpZXdwb3J0OmF9LChmdW5jdGlvbih0KXtyZXR1cm4gZS5jcmVhdGVFbGVtZW50KFwiZGl2XCIsSCh7fSx0LnNsb3QuYXR0cnMse2NsYXNzTmFtZTpvLnByZWZpeENsYXNzK1wiLWFubm90YXRpb24gXCIrby5wcmVmaXhDbGFzcytcIi1hbm5vdGF0aW9uLXVuZGVybGluZVwiLFwiZGF0YS1hbm5vdGF0aW9uLWlkXCI6bi5pZCxvbkNsaWNrOnQucG9wdXAudG9nZ2xlT25DbGljayxvbk1vdXNlRW50ZXI6dC5wb3B1cC5vcGVuT25Ib3Zlcixvbk1vdXNlTGVhdmU6dC5wb3B1cC5jbG9zZU9uSG92ZXJ9KSx0LnNsb3QuY2hpbGRyZW4pfSkpfSxkZT1mdW5jdGlvbih0KXt2YXIgbj10LmFubm90YXRpb25zLHI9dC5jb250YWluZXJSZWYsYT10LmRvYyxpPXQucGFnZSxzPXQucGFnZUluZGV4LGM9dC5wbHVnaW5zLGw9dC5yb3RhdGlvbixwPXQuc2NhbGUsdT10Lm9uRXhlY3V0ZU5hbWVkQWN0aW9uLGQ9dC5vbkp1bXBUb0Rlc3QsZj1pLmdldFZpZXdwb3J0KHtyb3RhdGlvbjpsLHNjYWxlOnB9KS5jbG9uZSh7ZG9udEZsaXA6ITB9KSxnPW4uZmlsdGVyKChmdW5jdGlvbihlKXtyZXR1cm4hZS5wYXJlbnRJZH0pKTtyZXR1cm4gZS51c2VFZmZlY3QoKGZ1bmN0aW9uKCl7dmFyIGU9ci5jdXJyZW50O2UmJmMuZm9yRWFjaCgoZnVuY3Rpb24odCl7dC5vbkFubm90YXRpb25MYXllclJlbmRlciYmdC5vbkFubm90YXRpb25MYXllclJlbmRlcih7YW5ub3RhdGlvbnM6Zyxjb250YWluZXI6ZSxwYWdlSW5kZXg6cyxyb3RhdGlvbjpsLHNjYWxlOnB9KX0pKX0pLFtdKSxlLmNyZWF0ZUVsZW1lbnQoZS5GcmFnbWVudCxudWxsLGcubWFwKChmdW5jdGlvbih0KXt2YXIgcj1uLmZpbmQoKGZ1bmN0aW9uKGUpe3JldHVybiBlLnBhcmVudElkPT09dC5pZH0pKTtzd2l0Y2godC5hbm5vdGF0aW9uVHlwZSl7Y2FzZSBvLkNhcmV0OnJldHVybiBlLmNyZWF0ZUVsZW1lbnQoXyx7a2V5OnQuaWQsYW5ub3RhdGlvbjp0LHBhZ2U6aSx2aWV3cG9ydDpmfSk7Y2FzZSBvLkNpcmNsZTpyZXR1cm4gZS5jcmVhdGVFbGVtZW50KHose2tleTp0LmlkLGFubm90YXRpb246dCxwYWdlOmksdmlld3BvcnQ6Zn0pO2Nhc2Ugby5GaWxlQXR0YWNobWVudDpyZXR1cm4gZS5jcmVhdGVFbGVtZW50KHEse2tleTp0LmlkLGFubm90YXRpb246dCxwYWdlOmksdmlld3BvcnQ6Zn0pO2Nhc2Ugby5GcmVlVGV4dDpyZXR1cm4gZS5jcmVhdGVFbGVtZW50KFUse2tleTp0LmlkLGFubm90YXRpb246dCxwYWdlOmksdmlld3BvcnQ6Zn0pO2Nhc2Ugby5IaWdobGlnaHQ6cmV0dXJuIGUuY3JlYXRlRWxlbWVudChaLHtrZXk6dC5pZCxhbm5vdGF0aW9uOnQscGFnZTppLHZpZXdwb3J0OmZ9KTtjYXNlIG8uSW5rOnJldHVybiBlLmNyZWF0ZUVsZW1lbnQoRyx7a2V5OnQuaWQsYW5ub3RhdGlvbjp0LHBhZ2U6aSx2aWV3cG9ydDpmfSk7Y2FzZSBvLkxpbmU6cmV0dXJuIGUuY3JlYXRlRWxlbWVudChKLHtrZXk6dC5pZCxhbm5vdGF0aW9uOnQscGFnZTppLHZpZXdwb3J0OmZ9KTtjYXNlIG8uTGluazpyZXR1cm4gZS5jcmVhdGVFbGVtZW50KFkse2tleTp0LmlkLGFubm90YXRpb246dCxkb2M6YSxwYWdlOmksdmlld3BvcnQ6ZixvbkV4ZWN1dGVOYW1lZEFjdGlvbjp1LG9uSnVtcFRvRGVzdDpkfSk7Y2FzZSBvLlBvbHlnb246cmV0dXJuIGUuY3JlYXRlRWxlbWVudChLLHtrZXk6dC5pZCxhbm5vdGF0aW9uOnQscGFnZTppLHZpZXdwb3J0OmZ9KTtjYXNlIG8uUG9seWxpbmU6cmV0dXJuIGUuY3JlYXRlRWxlbWVudChRLHtrZXk6dC5pZCxhbm5vdGF0aW9uOnQscGFnZTppLHZpZXdwb3J0OmZ9KTtjYXNlIG8uUG9wdXA6cmV0dXJuIGUuY3JlYXRlRWxlbWVudCgkLHtrZXk6dC5pZCxhbm5vdGF0aW9uOnQscGFnZTppLHZpZXdwb3J0OmZ9KTtjYXNlIG8uU3F1YXJlOnJldHVybiBlLmNyZWF0ZUVsZW1lbnQoZWUse2tleTp0LmlkLGFubm90YXRpb246dCxwYWdlOmksdmlld3BvcnQ6Zn0pO2Nhc2Ugby5TcXVpZ2dseTpyZXR1cm4gZS5jcmVhdGVFbGVtZW50KHRlLHtrZXk6dC5pZCxhbm5vdGF0aW9uOnQscGFnZTppLHZpZXdwb3J0OmZ9KTtjYXNlIG8uU3RhbXA6cmV0dXJuIGUuY3JlYXRlRWxlbWVudChuZSx7a2V5OnQuaWQsYW5ub3RhdGlvbjp0LHBhZ2U6aSx2aWV3cG9ydDpmfSk7Y2FzZSBvLlN0cmlrZU91dDpyZXR1cm4gZS5jcmVhdGVFbGVtZW50KHJlLHtrZXk6dC5pZCxhbm5vdGF0aW9uOnQscGFnZTppLHZpZXdwb3J0OmZ9KTtjYXNlIG8uVGV4dDpyZXR1cm4gZS5jcmVhdGVFbGVtZW50KHBlLHtrZXk6dC5pZCxhbm5vdGF0aW9uOnQsY2hpbGRBbm5vdGF0aW9uOnIscGFnZTppLHZpZXdwb3J0OmZ9KTtjYXNlIG8uVW5kZXJsaW5lOnJldHVybiBlLmNyZWF0ZUVsZW1lbnQodWUse2tleTp0LmlkLGFubm90YXRpb246dCxwYWdlOmksdmlld3BvcnQ6Zn0pO2RlZmF1bHQ6cmV0dXJuIGUuY3JlYXRlRWxlbWVudChlLkZyYWdtZW50LHtrZXk6dC5pZH0pfX0pKSl9LGZlPWZ1bmN0aW9uKHQpe3ZhciBuPXQucGFnZSxyPXQucmVuZGVyQW5ub3RhdGlvbnMsYT1lLnVzZVN0YXRlKHtsb2FkaW5nOiEwLGFubm90YXRpb25zOltdfSksbz1hWzBdLGk9YVsxXTtyZXR1cm4gZS51c2VFZmZlY3QoKGZ1bmN0aW9uKCl7bi5nZXRBbm5vdGF0aW9ucyh7aW50ZW50OlwiZGlzcGxheVwifSkudGhlbigoZnVuY3Rpb24oZSl7aSh7bG9hZGluZzohMSxhbm5vdGF0aW9uczplfSl9KSl9KSxbXSksby5sb2FkaW5nP2UuY3JlYXRlRWxlbWVudChlLkZyYWdtZW50LG51bGwpOnIoby5hbm5vdGF0aW9ucyl9LGdlPWZ1bmN0aW9uKHQpe3ZhciBuPXQuZG9jLHI9dC5wYWdlLGE9dC5wYWdlSW5kZXgsbz10LnBsdWdpbnMscz10LnJvdGF0aW9uLGM9dC5zY2FsZSxsPXQub25FeGVjdXRlTmFtZWRBY3Rpb24scD10Lm9uSnVtcFRvRGVzdCx1PWUudXNlQ29udGV4dChpKSxkPWUuY3JlYXRlUmVmKCk7cmV0dXJuIGUuY3JlYXRlRWxlbWVudChcImRpdlwiLHtyZWY6ZCxjbGFzc05hbWU6dS5wcmVmaXhDbGFzcytcIi1hbm5vdGF0aW9uLWxheWVyXCJ9LGUuY3JlYXRlRWxlbWVudChmZSx7cGFnZTpyLHJlbmRlckFubm90YXRpb25zOmZ1bmN0aW9uKHQpe3JldHVybiBlLmNyZWF0ZUVsZW1lbnQoZGUse2Fubm90YXRpb25zOnQsY29udGFpbmVyUmVmOmQsZG9jOm4scGFnZTpyLHBhZ2VJbmRleDphLHBsdWdpbnM6byxyb3RhdGlvbjpzLHNjYWxlOmMsb25FeGVjdXRlTmFtZWRBY3Rpb246bCxvbkp1bXBUb0Rlc3Q6cH0pfX0pKX0sbWU9ZnVuY3Rpb24odCl7dmFyIG49dC5jYWxsYmFjayxyPXQuY2hpbGRyZW4sYT10LnJvdGF0aW9uLG89dC5zY2FsZTtyZXR1cm4gZS51c2VMYXlvdXRFZmZlY3QoKGZ1bmN0aW9uKCl7bigpfSksW2Esb10pLGUuY3JlYXRlRWxlbWVudChlLkZyYWdtZW50LG51bGwscil9LGhlPWZ1bmN0aW9uKHQpe3ZhciBuPXQuaGVpZ2h0LHI9dC5wYWdlLGE9dC5wYWdlSW5kZXgsbz10LnBsdWdpbnMscz10LnJvdGF0aW9uLGM9dC5zY2FsZSxsPXQud2lkdGgscD1lLnVzZUNvbnRleHQoaSksdT1lLmNyZWF0ZVJlZigpLGQ9ZS51c2VSZWYoKSxmPXdpbmRvdy5kZXZpY2VQaXhlbFJhdGlvfHwxO3JldHVybiBlLmNyZWF0ZUVsZW1lbnQobWUse2NhbGxiYWNrOmZ1bmN0aW9uKCl7dmFyIGU9ZC5jdXJyZW50O2UmJmUuY2FuY2VsKCk7dmFyIHQ9dS5jdXJyZW50O28uZm9yRWFjaCgoZnVuY3Rpb24oZSl7ZS5vbkNhbnZhc0xheWVyUmVuZGVyJiZlLm9uQ2FudmFzTGF5ZXJSZW5kZXIoe2VsZTp0LHBhZ2VJbmRleDphLHJvdGF0aW9uOnMsc2NhbGU6YyxzdGF0dXM6Ri5QcmVSZW5kZXJ9KX0pKSx0LmhlaWdodD1uKmYsdC53aWR0aD1sKmYsdC5zdHlsZS5vcGFjaXR5PVwiMFwiO3ZhciBpPXQuZ2V0Q29udGV4dChcIjJkXCIse2FscGhhOiExfSkscD1yLmdldFZpZXdwb3J0KHtyb3RhdGlvbjpzLHNjYWxlOmMqZn0pO2QuY3VycmVudD1yLnJlbmRlcih7Y2FudmFzQ29udGV4dDppLHZpZXdwb3J0OnB9KSxkLmN1cnJlbnQucHJvbWlzZS50aGVuKChmdW5jdGlvbigpe3Quc3R5bGUucmVtb3ZlUHJvcGVydHkoXCJvcGFjaXR5XCIpLG8uZm9yRWFjaCgoZnVuY3Rpb24oZSl7ZS5vbkNhbnZhc0xheWVyUmVuZGVyJiZlLm9uQ2FudmFzTGF5ZXJSZW5kZXIoe2VsZTp0LHBhZ2VJbmRleDphLHJvdGF0aW9uOnMsc2NhbGU6YyxzdGF0dXM6Ri5EaWRSZW5kZXJ9KX0pKX0pLChmdW5jdGlvbigpe30pKX0scm90YXRpb246cyxzY2FsZTpjfSxlLmNyZWF0ZUVsZW1lbnQoXCJkaXZcIix7Y2xhc3NOYW1lOnAucHJlZml4Q2xhc3MrXCItY2FudmFzLWxheWVyXCIsc3R5bGU6e2hlaWdodDpuK1wicHhcIix3aWR0aDpsK1wicHhcIn19LGUuY3JlYXRlRWxlbWVudChcImNhbnZhc1wiLHtyZWY6dSxzdHlsZTp7dHJhbnNmb3JtOlwic2NhbGUoXCIrMS9mK1wiKVwiLHRyYW5zZm9ybU9yaWdpbjpcInRvcCBsZWZ0XCJ9fSkpKX0sdmU9ZnVuY3Rpb24odCl7dmFyIG49dC5oZWlnaHQsYT10LnBhZ2Usbz10LnJvdGF0aW9uLHM9dC5zY2FsZSxjPXQud2lkdGgsbD1lLnVzZUNvbnRleHQoaSkscD1lLmNyZWF0ZVJlZigpO3JldHVybiBlLmNyZWF0ZUVsZW1lbnQobWUse2NhbGxiYWNrOmZ1bmN0aW9uKCl7dmFyIGU9cC5jdXJyZW50LHQ9YS5nZXRWaWV3cG9ydCh7cm90YXRpb246byxzY2FsZTpzfSk7YS5nZXRPcGVyYXRvckxpc3QoKS50aGVuKChmdW5jdGlvbihvKXshZnVuY3Rpb24oKXt2YXIgZT1wLmN1cnJlbnQ7ZSYmKGUuaW5uZXJIVE1MPVwiXCIpfSgpLG5ldyByLlNWR0dyYXBoaWNzKGEuY29tbW9uT2JqcyxhLm9ianMpLmdldFNWRyhvLHQpLnRoZW4oKGZ1bmN0aW9uKHQpe3Quc3R5bGUuaGVpZ2h0PW4rXCJweFwiLHQuc3R5bGUud2lkdGg9YytcInB4XCIsZS5hcHBlbmRDaGlsZCh0KX0pKX0pKX0scm90YXRpb246byxzY2FsZTpzfSxlLmNyZWF0ZUVsZW1lbnQoXCJkaXZcIix7Y2xhc3NOYW1lOmwucHJlZml4Q2xhc3MrXCItc3ZnLWxheWVyXCIscmVmOnB9KSl9LEVlPWZ1bmN0aW9uKHQpe3ZhciBuPXQucGFnZSxhPXQucGFnZUluZGV4LG89dC5wbHVnaW5zLHM9dC5yb3RhdGlvbixjPXQuc2NhbGUsbD1lLnVzZUNvbnRleHQoaSkscD1lLmNyZWF0ZVJlZigpLHU9ZS51c2VSZWYoKTtyZXR1cm4gZS5jcmVhdGVFbGVtZW50KG1lLHtjYWxsYmFjazpmdW5jdGlvbigpe3ZhciBlPXUuY3VycmVudDtlJiZlLmNhbmNlbCgpO3ZhciB0PXAuY3VycmVudDtpZih0KXt2YXIgaT1uLmdldFZpZXdwb3J0KHtyb3RhdGlvbjpzLHNjYWxlOmN9KTtvLmZvckVhY2goKGZ1bmN0aW9uKGUpe2Uub25UZXh0TGF5ZXJSZW5kZXImJmUub25UZXh0TGF5ZXJSZW5kZXIoe2VsZTp0LHBhZ2VJbmRleDphLHNjYWxlOmMsc3RhdHVzOkYuUHJlUmVuZGVyfSl9KSksbi5nZXRUZXh0Q29udGVudCgpLnRoZW4oKGZ1bmN0aW9uKGUpeyFmdW5jdGlvbigpe3ZhciBlPXAuY3VycmVudDtpZihlKWZvcih2YXIgdD1lLnF1ZXJ5U2VsZWN0b3JBbGwoXCJzcGFuLlwiK2wucHJlZml4Q2xhc3MrXCItdGV4dFwiKSxuPXQubGVuZ3RoLHI9MDtyPG47cisrKXt2YXIgYT10W3JdO2UucmVtb3ZlQ2hpbGQoYSl9fSgpLHUuY3VycmVudD1yLnJlbmRlclRleHRMYXllcih7Y29udGFpbmVyOnQsdGV4dENvbnRlbnQ6ZSx2aWV3cG9ydDppfSksdS5jdXJyZW50LnByb21pc2UudGhlbigoZnVuY3Rpb24oKXtmb3IodmFyIGU9dC5jaGlsZE5vZGVzLG49ZS5sZW5ndGgscj0wO3I8bjtyKyspe2Vbcl0uY2xhc3NMaXN0LmFkZChsLnByZWZpeENsYXNzK1wiLXRleHRcIil9by5mb3JFYWNoKChmdW5jdGlvbihlKXtlLm9uVGV4dExheWVyUmVuZGVyJiZlLm9uVGV4dExheWVyUmVuZGVyKHtlbGU6dCxwYWdlSW5kZXg6YSxzY2FsZTpjLHN0YXR1czpGLkRpZFJlbmRlcn0pfSkpfSksKGZ1bmN0aW9uKCl7fSkpfSkpfX0scm90YXRpb246cyxzY2FsZTpjfSxlLmNyZWF0ZUVsZW1lbnQoXCJkaXZcIix7Y2xhc3NOYW1lOmwucHJlZml4Q2xhc3MrXCItdGV4dC1sYXllclwiLHJlZjpwfSkpfSx4ZT1mdW5jdGlvbih0KXt2YXIgbj10LmN1cnJlbnRQYWdlLHI9dC5kb2MsYT10LmhlaWdodCxvPXQucGFnZUluZGV4LHM9dC5wbHVnaW5zLGM9dC5yZW5kZXJQYWdlLGw9dC5yb3RhdGlvbixkPXQuc2NhbGUsZj10LndpZHRoLGc9dC5vbkV4ZWN1dGVOYW1lZEFjdGlvbixtPXQub25KdW1wVG9EZXN0LGg9dC5vblBhZ2VWaXNpYmlsaXR5Q2hhbmdlZCx2PWUudXNlQ29udGV4dChpKSxFPWUudXNlU3RhdGUoe3BhZ2U6bnVsbCxwYWdlSGVpZ2h0OmEscGFnZVdpZHRoOmYsdmlld3BvcnRSb3RhdGlvbjowfSkseD1FWzBdLEM9RVsxXSx3PXgucGFnZSx5PXgucGFnZUhlaWdodCxrPXgucGFnZVdpZHRoLGI9ZS51c2VSZWYoITEpLFA9QXJyYXkoMTApLmZpbGwobnVsbCkubWFwKChmdW5jdGlvbihlLHQpe3JldHVybiB0LzEwfSkpLE89aypkLEw9eSpkLFI9TWF0aC5hYnMobCklMTgwPT0wLFQ9Uj9POkwsTT1SP0w6TyxOPWZ1bmN0aW9uKCl7Yi5jdXJyZW50fHwoYi5jdXJyZW50PSEwLHIuZ2V0UGFnZShvKzEpLnRoZW4oKGZ1bmN0aW9uKGUpe3ZhciB0PWUuZ2V0Vmlld3BvcnQoe3NjYWxlOjF9KTtDKHtwYWdlOmUscGFnZUhlaWdodDp0LmhlaWdodCxwYWdlV2lkdGg6dC53aWR0aCx2aWV3cG9ydFJvdGF0aW9uOnQucm90YXRpb259KX0pKSl9LFM9Y3x8ZnVuY3Rpb24odCl7cmV0dXJuIGUuY3JlYXRlRWxlbWVudChlLkZyYWdtZW50LG51bGwsdC5jYW52YXNMYXllci5jaGlsZHJlbix0LnRleHRMYXllci5jaGlsZHJlbix0LmFubm90YXRpb25MYXllci5jaGlsZHJlbil9LEg9KGwreC52aWV3cG9ydFJvdGF0aW9uKSUzNjA7cmV0dXJuIGUudXNlRWZmZWN0KChmdW5jdGlvbigpe24tMjw9byYmbzw9bisyJiZOKCl9KSxbbl0pLGUuY3JlYXRlRWxlbWVudCh1LHtvblZpc2liaWxpdHlDaGFuZ2VkOmZ1bmN0aW9uKGUpe2gobyxlLmlzVmlzaWJsZT9lLnJhdGlvOi0xKSxlLmlzVmlzaWJsZSYmTigpfSx0aHJlc2hvbGQ6UH0sZS5jcmVhdGVFbGVtZW50KFwiZGl2XCIse2NsYXNzTmFtZTp2LnByZWZpeENsYXNzK1wiLXBhZ2UtbGF5ZXJcIixzdHlsZTp7aGVpZ2h0Ok0rXCJweFwiLHdpZHRoOlQrXCJweFwifX0sdz9lLmNyZWF0ZUVsZW1lbnQoZS5GcmFnbWVudCxudWxsLFMoe2Fubm90YXRpb25MYXllcjp7YXR0cnM6e30sY2hpbGRyZW46ZS5jcmVhdGVFbGVtZW50KGdlLHtkb2M6cixwYWdlOncscGFnZUluZGV4Om8scGx1Z2luczpzLHJvdGF0aW9uOkgsc2NhbGU6ZCxvbkV4ZWN1dGVOYW1lZEFjdGlvbjpnLG9uSnVtcFRvRGVzdDptfSl9LGNhbnZhc0xheWVyOnthdHRyczp7fSxjaGlsZHJlbjplLmNyZWF0ZUVsZW1lbnQoaGUse2hlaWdodDpNLHBhZ2U6dyxwYWdlSW5kZXg6byxwbHVnaW5zOnMscm90YXRpb246SCxzY2FsZTpkLHdpZHRoOlR9KX0sZG9jOnIsaGVpZ2h0Ok0scGFnZUluZGV4Om8scm90YXRpb246bCxzY2FsZTpkLHN2Z0xheWVyOnthdHRyczp7fSxjaGlsZHJlbjplLmNyZWF0ZUVsZW1lbnQodmUse2hlaWdodDpNLHBhZ2U6dyxyb3RhdGlvbjpILHNjYWxlOmQsd2lkdGg6VH0pfSx0ZXh0TGF5ZXI6e2F0dHJzOnt9LGNoaWxkcmVuOmUuY3JlYXRlRWxlbWVudChFZSx7cGFnZTp3LHBhZ2VJbmRleDpvLHBsdWdpbnM6cyxyb3RhdGlvbjpILHNjYWxlOmR9KX0sd2lkdGg6VH0pLHMubWFwKChmdW5jdGlvbih0LG4pe3JldHVybiB0LnJlbmRlclBhZ2VMYXllcj9lLmNyZWF0ZUVsZW1lbnQoZS5GcmFnbWVudCx7a2V5Om59LHQucmVuZGVyUGFnZUxheWVyKHtkb2M6cixoZWlnaHQ6TSxwYWdlSW5kZXg6byxyb3RhdGlvbjpsLHNjYWxlOmQsd2lkdGg6VH0pKTplLmNyZWF0ZUVsZW1lbnQoZS5GcmFnbWVudCx7a2V5Om59KX0pKSk6ZS5jcmVhdGVFbGVtZW50KHAsbnVsbCkpKX0sQ2U9ZnVuY3Rpb24odCl7dmFyIG49dC5kZWZhdWx0U2NhbGUscj10LmRvYyxhPXQuaW5pdGlhbFBhZ2Usbz10LnBhZ2VTaXplLHM9dC5wbHVnaW5zLGM9dC5yZW5kZXJQYWdlLGw9dC52aWV3ZXJTdGF0ZSxwPXQub25Eb2N1bWVudExvYWQsdT10Lm9uT3BlbkZpbGUsZD10Lm9uUGFnZUNoYW5nZSxmPXQub25ab29tLGc9ZS51c2VDb250ZXh0KGkpLG09ZS51c2VSZWYobnVsbCksaD1lLnVzZVJlZihudWxsKSx2PWUudXNlU3RhdGUoby5zY2FsZSksRT12WzBdLHg9dlsxXSxDPWUudXNlU3RhdGUoMCksdz1DWzBdLHk9Q1sxXSxrPWUudXNlU3RhdGUoMCksYj1rWzBdLFA9a1sxXSxPPWUudXNlUmVmKGwpLEw9ci5udW1QYWdlcyxSPW8ucGFnZVdpZHRoLE09by5wYWdlSGVpZ2h0LE49QXJyYXkoTCkuZmlsbChudWxsKSxTPU4ubWFwKChmdW5jdGlvbigpe3JldHVybiAwfSkpLEI9Ti5tYXAoKGZ1bmN0aW9uKCl7cmV0dXJuIGUudXNlUmVmKCl9KSksRj1mdW5jdGlvbihlKXt2YXIgdD1lO3MuZm9yRWFjaCgoZnVuY3Rpb24oZSl7ZS5vblZpZXdlclN0YXRlQ2hhbmdlJiYodD1lLm9uVmlld2VyU3RhdGVDaGFuZ2UodCkpfSkpLE8uY3VycmVudD10fSxJPWZ1bmN0aW9uKCl7cmV0dXJuIGguY3VycmVudH0sQT1mdW5jdGlvbihlKXtyZXR1cm4gZTwwfHxlPj1MP251bGw6QltlXS5jdXJyZW50fSxEPWZ1bmN0aW9uKCl7cmV0dXJuIE8uY3VycmVudH0sVz1mdW5jdGlvbihlLHQsbixhKXt2YXIgbz1oLmN1cnJlbnQsaT1PLmN1cnJlbnQ7aWYobyYmaSl7dmFyIHM9ZSsxO3IuZ2V0UGFnZShzKS50aGVuKChmdW5jdGlvbihyKXt2YXIgcz1yLmdldFZpZXdwb3J0KHtzY2FsZToxfSksYz0wLGw9dHx8MCxwPW58fDA7c3dpdGNoKGEpe2Nhc2UgVC5QYWdlRml0OmM9MCxwPTAseihULlBhZ2VGaXQpO2JyZWFrO2RlZmF1bHQ6Yz0ocy5oZWlnaHQtbCkqaS5zY2FsZSxwKj1pLnNjYWxlfXZhciB1PUJbZV0uY3VycmVudDt1JiYoby5zY3JvbGxUb3A9dS5vZmZzZXRUb3ArYyxvLnNjcm9sbExlZnQ9dS5vZmZzZXRMZWZ0K3ApfSkpfX0sVj1mdW5jdGlvbihlKXtpZighKGU8MHx8ZT49TCkpe3ZhciB0PWguY3VycmVudCxuPUJbZV0uY3VycmVudDt0JiZuJiYodC5zY3JvbGxUb3A9bi5vZmZzZXRUb3AsdC5zY3JvbGxMZWZ0PW4ub2Zmc2V0TGVmdCkseShlKX19LGo9ZnVuY3Rpb24oZSl7dmFyIHQsbjtcInBkZlwiPT09KHQ9ZS5uYW1lLG49dC5zcGxpdCgvXFwuLykucG9wKCksbj9uLnRvTG93ZXJDYXNlKCk6XCJcIikudG9Mb3dlckNhc2UoKSYmbmV3IFByb21pc2UoKGZ1bmN0aW9uKHQpe3ZhciBuPW5ldyBGaWxlUmVhZGVyO24ucmVhZEFzQXJyYXlCdWZmZXIoZSksbi5vbmxvYWQ9ZnVuY3Rpb24oKXt2YXIgZT1uZXcgVWludDhBcnJheShuLnJlc3VsdCk7dChlKX19KSkudGhlbigoZnVuY3Rpb24odCl7dShlLm5hbWUsdCl9KSl9LF89ZnVuY3Rpb24oZSl7UChlKSxGKHtmaWxlOmwuZmlsZSxwYWdlSW5kZXg6dyxwYWdlSGVpZ2h0Ok0scGFnZVdpZHRoOlIscm90YXRpb246ZSxzY2FsZTpFfSl9LHo9ZnVuY3Rpb24oZSl7dmFyIHQ9aC5jdXJyZW50LG49Ty5jdXJyZW50O2lmKHQmJm4pe3ZhciBhPTE7c3dpdGNoKGUpe2Nhc2UgVC5BY3R1YWxTaXplOmE9MTticmVhaztjYXNlIFQuUGFnZUZpdDphPU1hdGgubWluKCh0LmNsaWVudFdpZHRoLTE3KS9SLCh0LmNsaWVudEhlaWdodC0xNikvTSk7YnJlYWs7Y2FzZSBULlBhZ2VXaWR0aDphPSh0LmNsaWVudFdpZHRoLTE3KS9SO2JyZWFrO2RlZmF1bHQ6YT1lfXgoYSksZih7ZG9jOnIsc2NhbGU6YX0pfX07ZS51c2VFZmZlY3QoKGZ1bmN0aW9uKCl7dmFyIGU9aC5jdXJyZW50LHQ9Ty5jdXJyZW50O2UmJnQmJihlLnNjcm9sbFRvcD1lLnNjcm9sbFRvcCpFL3Quc2NhbGUsZS5zY3JvbGxMZWZ0PWUuc2Nyb2xsTGVmdCpFL3Quc2NhbGUsRih7ZmlsZTpsLmZpbGUscGFnZUluZGV4OnQucGFnZUluZGV4LHBhZ2VIZWlnaHQ6TSxwYWdlV2lkdGg6Uixyb3RhdGlvbjpiLHNjYWxlOkV9KSl9KSxbRV0pO2UudXNlRWZmZWN0KChmdW5jdGlvbigpe3ZhciBlPXtnZXRQYWdlRWxlbWVudDpBLGdldFBhZ2VzQ29udGFpbmVyOkksZ2V0Vmlld2VyU3RhdGU6RCxqdW1wVG9EZXN0aW5hdGlvbjpXLGp1bXBUb1BhZ2U6VixvcGVuRmlsZTpqLHJvdGF0ZTpfLHNldFZpZXdlclN0YXRlOkYsem9vbTp6fTtyZXR1cm4gcy5mb3JFYWNoKChmdW5jdGlvbih0KXt0Lmluc3RhbGwmJnQuaW5zdGFsbChlKX0pKSxmdW5jdGlvbigpe3MuZm9yRWFjaCgoZnVuY3Rpb24odCl7dC51bmluc3RhbGwmJnQudW5pbnN0YWxsKGUpfSkpfX0pLFtdKSxlLnVzZUVmZmVjdCgoZnVuY3Rpb24oKXtwKHtkb2M6cn0pLHMuZm9yRWFjaCgoZnVuY3Rpb24oZSl7ZS5vbkRvY3VtZW50TG9hZCYmZS5vbkRvY3VtZW50TG9hZCh7ZG9jOnJ9KX0pKSxhJiZWKGEpfSksW10pLGUudXNlRWZmZWN0KChmdW5jdGlvbigpe2Qoe2N1cnJlbnRQYWdlOncsZG9jOnJ9KSxGKHtmaWxlOmwuZmlsZSxwYWdlSW5kZXg6dyxwYWdlSGVpZ2h0Ok0scGFnZVdpZHRoOlIscm90YXRpb246YixzY2FsZTpFfSl9KSxbd10pLGUudXNlRWZmZWN0KChmdW5jdGlvbigpe24mJnoobil9KSxbXSk7dmFyIHEsVT1mdW5jdGlvbihlLHQpe1NbZV09dDt2YXIgbj1TLnJlZHVjZSgoZnVuY3Rpb24oZSx0LG4scil7cmV0dXJuIHQ+cltlXT9uOmV9KSwwKTt5KG4pfSxaPWZ1bmN0aW9uKGUpe3ZhciB0PXctMSxuPXcrMTtzd2l0Y2goZSl7Y2FzZVwiRmlyc3RQYWdlXCI6VigwKTticmVhaztjYXNlXCJMYXN0UGFnZVwiOlYoTC0xKTticmVhaztjYXNlXCJOZXh0UGFnZVwiOm48TCYmVihuKTticmVhaztjYXNlXCJQcmV2UGFnZVwiOnQ+PTAmJlYodCl9fSxHPWZ1bmN0aW9uKHQpe3JldHVybiBlLmNyZWF0ZUVsZW1lbnQoXCJkaXZcIixIKHt9LHQuYXR0cnMse3N0eWxlOnQuYXR0cnMmJnQuYXR0cnMuc3R5bGU/dC5hdHRycy5zdHlsZTp7fX0pLHQuY2hpbGRyZW4sdC5zdWJTbG90JiZHKHQuc3ViU2xvdCkpfTtyZXR1cm4gRygocT17YXR0cnM6e3JlZjptLHN0eWxlOntoZWlnaHQ6XCIxMDAlXCJ9fSxjaGlsZHJlbjplLmNyZWF0ZUVsZW1lbnQoZS5GcmFnbWVudCxudWxsKSxzdWJTbG90OnthdHRyczp7cmVmOmgsc3R5bGU6e2hlaWdodDpcIjEwMCVcIixvdmVyZmxvdzpcImF1dG9cIixwb3NpdGlvbjpcInJlbGF0aXZlXCJ9fSxjaGlsZHJlbjplLmNyZWF0ZUVsZW1lbnQoZS5GcmFnbWVudCxudWxsLEFycmF5KEwpLmZpbGwoMCkubWFwKChmdW5jdGlvbih0LG4pe3JldHVybiBlLmNyZWF0ZUVsZW1lbnQoXCJkaXZcIix7Y2xhc3NOYW1lOmcucHJlZml4Q2xhc3MrXCItaW5uZXItcGFnZVwiLGtleTpcInBhZ2VsYXllci1cIituLHJlZjpmdW5jdGlvbihlKXtCW25dLmN1cnJlbnQ9ZX19LGUuY3JlYXRlRWxlbWVudCh4ZSx7Y3VycmVudFBhZ2U6dyxkb2M6cixoZWlnaHQ6TSxwYWdlSW5kZXg6bixwbHVnaW5zOnMscmVuZGVyUGFnZTpjLHJvdGF0aW9uOmIsc2NhbGU6RSx3aWR0aDpSLG9uRXhlY3V0ZU5hbWVkQWN0aW9uOlosb25KdW1wVG9EZXN0Olcsb25QYWdlVmlzaWJpbGl0eUNoYW5nZWQ6VX0pKX0pKSl9fSxzLmZvckVhY2goKGZ1bmN0aW9uKGUpe2UucmVuZGVyVmlld2VyJiYocT1lLnJlbmRlclZpZXdlcih7Y29udGFpbmVyUmVmOm0sZG9jOnIscGFnZUhlaWdodDpNLHBhZ2VXaWR0aDpSLHJvdGF0aW9uOmIsc2xvdDpxLGp1bXBUb1BhZ2U6VixvcGVuRmlsZTpqLHJvdGF0ZTpfLHpvb206en0pKX0pKSxxKSl9LHdlPVsuMSwuMiwuMywuNCwuNSwuNiwuNywuOCwuOSwxLDEuMSwxLjMsMS41LDEuNywxLjksMi4xLDIuNCwyLjcsMywzLjMsMy43LDQuMSw0LjYsNS4xLDUuNyw2LjMsNyw3LjcsOC41LDkuNCwxMF0seWU9ZnVuY3Rpb24odCl7dmFyIG49dC5kb2Mscj10LnJlbmRlcixhPWUudXNlQ29udGV4dChpKSxvPWUudXNlUmVmKG51bGwpLHM9ZS51c2VTdGF0ZSh7cGFnZUhlaWdodDowLHBhZ2VXaWR0aDowLHNjYWxlOjF9KSxjPXNbMF0sbD1zWzFdO3JldHVybiBlLnVzZUVmZmVjdCgoZnVuY3Rpb24oKXtuLmdldFBhZ2UoMSkudGhlbigoZnVuY3Rpb24oZSl7dmFyIHQ9ZS5nZXRWaWV3cG9ydCh7c2NhbGU6MX0pLG49dC53aWR0aCxyPXQuaGVpZ2h0LGE9by5jdXJyZW50O2lmKGEpe3ZhciBpLHMsYz0oYS5jbGllbnRXaWR0aC0xMDApL24scD0oaT1NYXRoLm1heCgxLGMpLC0xPT09KHM9d2UuZmluZEluZGV4KChmdW5jdGlvbihlKXtyZXR1cm4gZT49aX0pKSl8fDA9PT1zP2k6d2Vbcy0xXSk7bCh7cGFnZUhlaWdodDpyLHBhZ2VXaWR0aDpuLHNjYWxlOnB9KX19KSl9KSxbbl0pLDA9PT1jLnBhZ2VXaWR0aD9lLmNyZWF0ZUVsZW1lbnQoXCJkaXZcIix7Y2xhc3NOYW1lOmEucHJlZml4Q2xhc3MrXCItcGFnZS1zaXplLWNhbGN1bGF0b3JcIixyZWY6b30sZS5jcmVhdGVFbGVtZW50KHAsbnVsbCkpOnIoYyl9LGtlPWZ1bmN0aW9uKCl7fSxiZT1mdW5jdGlvbihlKXtmdW5jdGlvbiB0KHQpe3ZhciBuPWUuY2FsbCh0aGlzKXx8dGhpcztyZXR1cm4gbi52ZXJpZnlQYXNzd29yZEZuPXQsbn1yZXR1cm4gTih0LGUpLHR9KGtlKSxQZT1mdW5jdGlvbih0KXt2YXIgbj10LnZlcmlmeVBhc3N3b3JkRm4scj1lLnVzZUNvbnRleHQoZCksYT1lLnVzZUNvbnRleHQoaSksbz1lLnVzZVN0YXRlKFwiXCIpLHM9b1swXSxjPW9bMV07cmV0dXJuIGUuY3JlYXRlRWxlbWVudChcImRpdlwiLHtjbGFzc05hbWU6YS5wcmVmaXhDbGFzcytcIi1hc2tpbmctcGFzc3dvcmRcIn0sZS5jcmVhdGVFbGVtZW50KFwiZGl2XCIsbnVsbCxlLmNyZWF0ZUVsZW1lbnQoXCJkaXZcIix7Y2xhc3NOYW1lOmEucHJlZml4Q2xhc3MrXCItYXNraW5nLXBhc3N3b3JkLW1lc3NhZ2VcIn0sci5jb3JlLmFza2luZ1Bhc3N3b3JkLnJlcXVpcmVQYXNzd29yZFRvT3BlbixcIjpcIiksZS5jcmVhdGVFbGVtZW50KFwiZGl2XCIse2NsYXNzTmFtZTphLnByZWZpeENsYXNzK1wiLWFza2luZy1wYXNzd29yZC1pbnB1dC1jb250YWluZXJcIn0sZS5jcmVhdGVFbGVtZW50KFwiaW5wdXRcIix7Y2xhc3NOYW1lOmEucHJlZml4Q2xhc3MrXCItYXNraW5nLXBhc3N3b3JkLWlucHV0XCIsdHlwZTpcInBhc3N3b3JkXCIsb25DaGFuZ2U6ZnVuY3Rpb24oZSl7cmV0dXJuIGMoZS50YXJnZXQudmFsdWUpfX0pLGUuY3JlYXRlRWxlbWVudChcImJ1dHRvblwiLHtjbGFzc05hbWU6YS5wcmVmaXhDbGFzcytcIi1hc2tpbmctcGFzc3dvcmQtYnV0dG9uXCIsb25DbGljazpmdW5jdGlvbigpe3JldHVybiBuKHMpfX0sci5jb3JlLmFza2luZ1Bhc3N3b3JkLnN1Ym1pdCkpKSl9LE9lPWZ1bmN0aW9uKGUpe2Z1bmN0aW9uIHQodCl7dmFyIG49ZS5jYWxsKHRoaXMpfHx0aGlzO3JldHVybiBuLmRvYz10LG59cmV0dXJuIE4odCxlKSx0fShrZSksTGU9ZnVuY3Rpb24oZSl7ZnVuY3Rpb24gdCh0KXt2YXIgbj1lLmNhbGwodGhpcyl8fHRoaXM7cmV0dXJuIG4uZXJyb3I9dCxufXJldHVybiBOKHQsZSksdH0oa2UpLFJlPWZ1bmN0aW9uKGUpe2Z1bmN0aW9uIHQodCl7dmFyIG49ZS5jYWxsKHRoaXMpfHx0aGlzO3JldHVybiBuLnBlcmNlbnRhZ2VzPXQsbn1yZXR1cm4gTih0LGUpLHR9KGtlKSxUZT1mdW5jdGlvbih0KXt2YXIgbj10LnZlcmlmeVBhc3N3b3JkRm4scj1lLnVzZUNvbnRleHQoZCksYT1lLnVzZUNvbnRleHQoaSksbz1lLnVzZVN0YXRlKFwiXCIpLHM9b1swXSxjPW9bMV07cmV0dXJuIGUuY3JlYXRlRWxlbWVudChcImRpdlwiLHtjbGFzc05hbWU6YS5wcmVmaXhDbGFzcytcIi1hc2tpbmctcGFzc3dvcmRcIn0sZS5jcmVhdGVFbGVtZW50KFwiZGl2XCIsbnVsbCxlLmNyZWF0ZUVsZW1lbnQoXCJkaXZcIix7Y2xhc3NOYW1lOmEucHJlZml4Q2xhc3MrXCItYXNraW5nLXBhc3N3b3JkLW1lc3NhZ2VcIn0sci5jb3JlLndyb25nUGFzc3dvcmQudHJ5QWdhaW4sXCI6XCIpLGUuY3JlYXRlRWxlbWVudChcImRpdlwiLHtjbGFzc05hbWU6YS5wcmVmaXhDbGFzcytcIi1hc2tpbmctcGFzc3dvcmQtaW5wdXQtY29udGFpbmVyXCJ9LGUuY3JlYXRlRWxlbWVudChcImlucHV0XCIse2NsYXNzTmFtZTphLnByZWZpeENsYXNzK1wiLWFza2luZy1wYXNzd29yZC1pbnB1dFwiLHR5cGU6XCJwYXNzd29yZFwiLG9uQ2hhbmdlOmZ1bmN0aW9uKGUpe3JldHVybiBjKGUudGFyZ2V0LnZhbHVlKX19KSxlLmNyZWF0ZUVsZW1lbnQoXCJidXR0b25cIix7Y2xhc3NOYW1lOmEucHJlZml4Q2xhc3MrXCItYXNraW5nLXBhc3N3b3JkLWJ1dHRvblwiLG9uQ2xpY2s6ZnVuY3Rpb24oKXtyZXR1cm4gbihzKX19LHIuY29yZS53cm9uZ1Bhc3N3b3JkLnN1Ym1pdCkpKSl9LE1lPWZ1bmN0aW9uKGUpe2Z1bmN0aW9uIHQodCl7dmFyIG49ZS5jYWxsKHRoaXMpfHx0aGlzO3JldHVybiBuLnZlcmlmeVBhc3N3b3JkRm49dCxufXJldHVybiBOKHQsZSksdH0oa2UpLE5lPWZ1bmN0aW9uKHQpe3ZhciBuPXQuY2hhcmFjdGVyTWFwLGE9dC5maWxlLG89dC5odHRwSGVhZGVycyxzPXQucmVuZGVyLGM9dC5yZW5kZXJFcnJvcixsPXQucmVuZGVyTG9hZGVyLHU9dC53aXRoQ3JlZGVudGlhbHMsZD1lLnVzZUNvbnRleHQoaSksZj1lLnVzZVN0YXRlKG5ldyBSZSgwKSksZz1mWzBdLG09ZlsxXSxoPWUudXNlU3RhdGUoMCksdj1oWzBdLEU9aFsxXSx4PWUudXNlU3RhdGUobnVsbCksQz14WzBdLHc9eFsxXTtzd2l0Y2goZS51c2VFZmZlY3QoKGZ1bmN0aW9uKCl7bShuZXcgUmUoMCkpO3ZhciBlPU9iamVjdC5hc3NpZ24oe2h0dHBIZWFkZXJzOm8sd2l0aENyZWRlbnRpYWxzOnV9LFwic3RyaW5nXCI9PXR5cGVvZiBhP3t1cmw6YX06e2RhdGE6YX0sbj97Y01hcFVybDpuLnVybCxjTWFwUGFja2VkOm4uaXNDb21wcmVzc2VkfTp7fSksdD1yLmdldERvY3VtZW50KGUpO3JldHVybiB0Lm9uUGFzc3dvcmQ9ZnVuY3Rpb24oZSx0KXtzd2l0Y2godCl7Y2FzZSByLlBhc3N3b3JkUmVzcG9uc2VzLk5FRURfUEFTU1dPUkQ6bShuZXcgYmUoZSkpO2JyZWFrO2Nhc2Ugci5QYXNzd29yZFJlc3BvbnNlcy5JTkNPUlJFQ1RfUEFTU1dPUkQ6bShuZXcgTWUoZSkpfX0sdC5vblByb2dyZXNzPWZ1bmN0aW9uKGUpe2UudG90YWw+MD9FKE1hdGgubWluKDEwMCwxMDAqZS5sb2FkZWQvZS50b3RhbCkpOkUoMTAwKX0sdC5wcm9taXNlLnRoZW4oKGZ1bmN0aW9uKGUpe3JldHVybiB3KGUpfSksKGZ1bmN0aW9uKGUpe3JldHVybiBtKG5ldyBMZSh7bWVzc2FnZTplLm1lc3NhZ2V8fFwiQ2Fubm90IGxvYWQgZG9jdW1lbnRcIixuYW1lOmUubmFtZX0pKX0pKSxmdW5jdGlvbigpe3QuZGVzdHJveSgpfX0pLFthXSksZS51c2VFZmZlY3QoKGZ1bmN0aW9uKCl7bSgxMDA9PT12JiZDP25ldyBPZShDKTpuZXcgUmUodikpfSksW3YsQ10pLCEwKXtjYXNlIGcgaW5zdGFuY2VvZiBiZTpyZXR1cm4gZS5jcmVhdGVFbGVtZW50KFBlLHt2ZXJpZnlQYXNzd29yZEZuOmcudmVyaWZ5UGFzc3dvcmRGbn0pO2Nhc2UgZyBpbnN0YW5jZW9mIE1lOnJldHVybiBlLmNyZWF0ZUVsZW1lbnQoVGUse3ZlcmlmeVBhc3N3b3JkRm46Zy52ZXJpZnlQYXNzd29yZEZufSk7Y2FzZSBnIGluc3RhbmNlb2YgT2U6cmV0dXJuIHMoZy5kb2MpO2Nhc2UgZyBpbnN0YW5jZW9mIExlOnJldHVybiBjP2MoZy5lcnJvcik6ZS5jcmVhdGVFbGVtZW50KFwiZGl2XCIse2NsYXNzTmFtZTpkLnByZWZpeENsYXNzK1wiLWRvYy1lcnJvclwifSxlLmNyZWF0ZUVsZW1lbnQoXCJkaXZcIix7Y2xhc3NOYW1lOmQucHJlZml4Q2xhc3MrXCItZG9jLWVycm9yLXRleHRcIn0sZy5lcnJvci5tZXNzYWdlKSk7Y2FzZSBnIGluc3RhbmNlb2YgUmU6cmV0dXJuIGUuY3JlYXRlRWxlbWVudChcImRpdlwiLHtjbGFzc05hbWU6ZC5wcmVmaXhDbGFzcytcIi1kb2MtbG9hZGluZ1wifSxsP2woZy5wZXJjZW50YWdlcyk6ZS5jcmVhdGVFbGVtZW50KHAsbnVsbCkpO2RlZmF1bHQ6cmV0dXJuIGUuY3JlYXRlRWxlbWVudChcImRpdlwiLHtjbGFzc05hbWU6ZC5wcmVmaXhDbGFzcytcIi1kb2MtbG9hZGluZ1wifSxlLmNyZWF0ZUVsZW1lbnQocCxudWxsKSl9fSxTZT1mdW5jdGlvbih0KXt2YXIgbj10LmNoaWxkcmVuLHI9dC5wcmVmaXhDbGFzcztyZXR1cm4gZS5jcmVhdGVFbGVtZW50KGkuUHJvdmlkZXIse3ZhbHVlOntwcmVmaXhDbGFzczpyfHxcInJwdi1jb3JlXCJ9fSxuKX07ZXhwb3J0cy5Bbm5vdGF0aW9uVHlwZT1vLGV4cG9ydHMuQnV0dG9uPWZ1bmN0aW9uKHQpe3ZhciBuLHI9dC5jaGlsZHJlbixhPXQuaXNTZWxlY3RlZCxvPXZvaWQgMCE9PWEmJmEsYz10Lm9uQ2xpY2ssbD1lLnVzZUNvbnRleHQoaSk7cmV0dXJuIGUuY3JlYXRlRWxlbWVudChcImJ1dHRvblwiLHtjbGFzc05hbWU6cygobj17fSxuW2wucHJlZml4Q2xhc3MrXCItYnV0dG9uXCJdPSEwLG5bbC5wcmVmaXhDbGFzcytcIi1idXR0b24tc2VsZWN0ZWRcIl09byxuKSksb25DbGljazpjfSxyKX0sZXhwb3J0cy5JY29uPWMsZXhwb3J0cy5MYXllclJlbmRlclN0YXR1cz1GLGV4cG9ydHMuTG9jYWxpemF0aW9uQ29udGV4dD1kLGV4cG9ydHMuTG9jYWxpemF0aW9uUHJvdmlkZXI9ZyxleHBvcnRzLk1lbnU9ZnVuY3Rpb24odCl7dmFyIG49dC5jaGlsZHJlbixyPWUudXNlQ29udGV4dChpKTtyZXR1cm4gZS5jcmVhdGVFbGVtZW50KFwidWxcIix7Y2xhc3NOYW1lOnIucHJlZml4Q2xhc3MrXCItbWVudVwifSxuKX0sZXhwb3J0cy5NZW51RGl2aWRlcj1mdW5jdGlvbigpe3ZhciB0PWUudXNlQ29udGV4dChpKTtyZXR1cm4gZS5jcmVhdGVFbGVtZW50KFwibGlcIix7Y2xhc3NOYW1lOnQucHJlZml4Q2xhc3MrXCItbWVudS1kaXZpZGVyXCJ9KX0sZXhwb3J0cy5NZW51SXRlbT1mdW5jdGlvbih0KXt2YXIgbj10LmNoZWNrZWQscj12b2lkIDAhPT1uJiZuLGE9dC5jaGlsZHJlbixvPXQuaWNvbixzPXZvaWQgMD09PW8/bnVsbDpvLGM9dC5vbkNsaWNrLHA9ZS51c2VDb250ZXh0KGkpO3JldHVybiBlLmNyZWF0ZUVsZW1lbnQoXCJsaVwiLHtjbGFzc05hbWU6cC5wcmVmaXhDbGFzcytcIi1tZW51LWl0ZW1cIixvbkNsaWNrOmN9LGUuY3JlYXRlRWxlbWVudChcImRpdlwiLHtjbGFzc05hbWU6cC5wcmVmaXhDbGFzcytcIi1tZW51LWl0ZW0taWNvblwifSxzKSxlLmNyZWF0ZUVsZW1lbnQoXCJkaXZcIix7Y2xhc3NOYW1lOnAucHJlZml4Q2xhc3MrXCItbWVudS1pdGVtLWxhYmVsXCJ9LGEpLGUuY3JlYXRlRWxlbWVudChcImRpdlwiLHtjbGFzc05hbWU6cC5wcmVmaXhDbGFzcytcIi1tZW51LWl0ZW0tY2hlY2tcIn0sciYmZS5jcmVhdGVFbGVtZW50KGwsbnVsbCkpKX0sZXhwb3J0cy5Nb2RhbD1mdW5jdGlvbih0KXt2YXIgbj10LmNsb3NlT25DbGlja091dHNpZGUscj10LmNsb3NlT25Fc2NhcGUsYT10LmNvbnRlbnQsbz10LnRhcmdldDtyZXR1cm4gZS5jcmVhdGVFbGVtZW50KHcse3RhcmdldDpvLGNvbnRlbnQ6ZnVuY3Rpb24odCl7cmV0dXJuIGUuY3JlYXRlRWxlbWVudChFLG51bGwsZS5jcmVhdGVFbGVtZW50KHYse2Nsb3NlT25DbGlja091dHNpZGU6bixjbG9zZU9uRXNjYXBlOnIsb25Ub2dnbGU6dH0sYSh0KSkpfX0pfSxleHBvcnRzLk9ic2VydmVyPXUsZXhwb3J0cy5Qb3BvdmVyPWZ1bmN0aW9uKHQpe3ZhciBuPXQuY2xvc2VPbkNsaWNrT3V0c2lkZSxyPXQuY2xvc2VPbkVzY2FwZSxhPXQuY29udGVudCxvPXQub2Zmc2V0LGk9dC5wb3NpdGlvbixzPXQudGFyZ2V0LGM9ZS5jcmVhdGVSZWYoKTtyZXR1cm4gZS5jcmVhdGVFbGVtZW50KHcse2NvbnRlbnQ6ZnVuY3Rpb24odCl7cmV0dXJuIGUuY3JlYXRlRWxlbWVudChlLkZyYWdtZW50LG51bGwsZS5jcmVhdGVFbGVtZW50KEwse2Nsb3NlT25Fc2NhcGU6cixvbkNsb3NlOnR9KSxlLmNyZWF0ZUVsZW1lbnQoTyx7Y2xvc2VPbkNsaWNrT3V0c2lkZTpuLG9mZnNldDpvLHBvc2l0aW9uOmksdGFyZ2V0UmVmOmMsb25DbG9zZTp0fSxhKHQpKSl9LHRhcmdldDpmdW5jdGlvbih0LG4pe3JldHVybiBlLmNyZWF0ZUVsZW1lbnQoXCJkaXZcIix7cmVmOmN9LHModCxuKSl9fSl9LGV4cG9ydHMuUG9zaXRpb249ayxleHBvcnRzLlByaW1hcnlCdXR0b249ZnVuY3Rpb24odCl7dmFyIG49dC5jaGlsZHJlbixyPXQub25DbGljayxhPWUudXNlQ29udGV4dChpKTtyZXR1cm4gZS5jcmVhdGVFbGVtZW50KFwiYnV0dG9uXCIse2NsYXNzTmFtZTphLnByZWZpeENsYXNzK1wiLXByaW1hcnktYnV0dG9uXCIsb25DbGljazpyfSxuKX0sZXhwb3J0cy5Qcm9ncmVzc0Jhcj1mdW5jdGlvbih0KXt2YXIgbj10LnByb2dyZXNzLHI9ZS51c2VDb250ZXh0KGkpO3JldHVybiBlLmNyZWF0ZUVsZW1lbnQoXCJkaXZcIix7Y2xhc3NOYW1lOnIucHJlZml4Q2xhc3MrXCItcHJvZ3Jlc3MtYmFyXCJ9LGUuY3JlYXRlRWxlbWVudChcImRpdlwiLHtjbGFzc05hbWU6ci5wcmVmaXhDbGFzcytcIi1wcm9ncmVzcy1iYXItaW5uZXJcIixzdHlsZTp7d2lkdGg6bitcIiVcIn19LG4sXCIlXCIpKX0sZXhwb3J0cy5TZXBhcmF0b3I9ZnVuY3Rpb24oKXt2YXIgdD1lLnVzZUNvbnRleHQoaSk7cmV0dXJuIGUuY3JlYXRlRWxlbWVudChcImRpdlwiLHtjbGFzc05hbWU6dC5wcmVmaXhDbGFzcytcIi1zZXBhcmF0b3JcIn0pfSxleHBvcnRzLlNwZWNpYWxab29tTGV2ZWw9VCxleHBvcnRzLlNwaW5uZXI9cCxleHBvcnRzLlRvb2x0aXA9ZnVuY3Rpb24odCl7dmFyIG49dC5jb250ZW50LHI9dC5vZmZzZXQsbz10LnBvc2l0aW9uLGk9dC50YXJnZXQscz1lLmNyZWF0ZVJlZigpO3JldHVybiBlLmNyZWF0ZUVsZW1lbnQodyx7dGFyZ2V0OmZ1bmN0aW9uKHQpe3JldHVybiBlLmNyZWF0ZUVsZW1lbnQoXCJkaXZcIix7cmVmOnMsb25Nb3VzZUVudGVyOmZ1bmN0aW9uKCl7dChhLk9wZW4pfSxvbk1vdXNlTGVhdmU6ZnVuY3Rpb24oKXt0KGEuQ2xvc2UpfX0saSl9LGNvbnRlbnQ6ZnVuY3Rpb24oKXtyZXR1cm4gZS5jcmVhdGVFbGVtZW50KFIse29mZnNldDpyLHBvc2l0aW9uOm8sdGFyZ2V0UmVmOnN9LG4oKSl9fSl9LGV4cG9ydHMuVmlld2VyPWZ1bmN0aW9uKHQpe3ZhciBuPXQuY2hhcmFjdGVyTWFwLHI9dC5kZWZhdWx0U2NhbGUsYT10LmZpbGVVcmwsbz10Lmh0dHBIZWFkZXJzLGk9dm9pZCAwPT09bz97fTpvLHM9dC5pbml0aWFsUGFnZSxjPXZvaWQgMD09PXM/MDpzLGw9dC5sb2NhbGl6YXRpb24scD10LnBsdWdpbnMsdT12b2lkIDA9PT1wP1tdOnAsZD10LnByZWZpeENsYXNzLGY9dC5yZW5kZXJFcnJvcixtPXQucmVuZGVyUGFnZSxoPXQucmVuZGVyTG9hZGVyLHY9dC53aXRoQ3JlZGVudGlhbHMsRT12b2lkIDAhPT12JiZ2LHg9dC5vbkRvY3VtZW50TG9hZCxDPXZvaWQgMD09PXg/ZnVuY3Rpb24oKXt9Ongsdz10Lm9uUGFnZUNoYW5nZSx5PXZvaWQgMD09PXc/ZnVuY3Rpb24oKXt9Oncsaz10Lm9uWm9vbSxiPXZvaWQgMD09PWs/ZnVuY3Rpb24oKXt9OmssUD1lLnVzZVN0YXRlKHtkYXRhOmEsbmFtZTpcInN0cmluZ1wiPT10eXBlb2YgYT9hOlwiXCJ9KSxPPVBbMF0sTD1QWzFdLFI9ZnVuY3Rpb24oZSx0KXtMKHtkYXRhOnQsbmFtZTplfSl9O3JldHVybiBlLnVzZUVmZmVjdCgoZnVuY3Rpb24oKXtMKHtkYXRhOmEsbmFtZTpcInN0cmluZ1wiPT10eXBlb2YgYT9hOlwiXCJ9KX0pLFthXSksZS5jcmVhdGVFbGVtZW50KFNlLHtwcmVmaXhDbGFzczpkfSxlLmNyZWF0ZUVsZW1lbnQoZyx7bG9jYWxpemF0aW9uOmx9LChmdW5jdGlvbih0KXtyZXR1cm4gZS5jcmVhdGVFbGVtZW50KE5lLHtjaGFyYWN0ZXJNYXA6bixmaWxlOk8uZGF0YSxodHRwSGVhZGVyczppLHJlbmRlcjpmdW5jdGlvbih0KXtyZXR1cm4gZS5jcmVhdGVFbGVtZW50KHllLHtkb2M6dCxyZW5kZXI6ZnVuY3Rpb24obil7cmV0dXJuIGUuY3JlYXRlRWxlbWVudChDZSx7ZGVmYXVsdFNjYWxlOnIsZG9jOnQsaW5pdGlhbFBhZ2U6YyxwYWdlU2l6ZTpuLHBsdWdpbnM6dSxyZW5kZXJQYWdlOm0sdmlld2VyU3RhdGU6e2ZpbGU6TyxwYWdlSW5kZXg6YyxwYWdlSGVpZ2h0Om4ucGFnZUhlaWdodCxwYWdlV2lkdGg6bi5wYWdlV2lkdGgscm90YXRpb246MCxzY2FsZTpuLnNjYWxlfSxvbkRvY3VtZW50TG9hZDpDLG9uT3BlbkZpbGU6UixvblBhZ2VDaGFuZ2U6eSxvblpvb206Yn0pfX0pfSxyZW5kZXJFcnJvcjpmLHJlbmRlckxvYWRlcjpoLHdpdGhDcmVkZW50aWFsczpFfSl9KSkpfSxleHBvcnRzLldvcmtlcj1mdW5jdGlvbih0KXt2YXIgbj10LmNoaWxkcmVuLGE9dC53b3JrZXJVcmw7cmV0dXJuIHIuR2xvYmFsV29ya2VyT3B0aW9ucy53b3JrZXJTcmM9YSxlLmNyZWF0ZUVsZW1lbnQoZS5GcmFnbWVudCxudWxsLG4pfSxleHBvcnRzLmNyZWF0ZVN0b3JlPWZ1bmN0aW9uKGUpe3ZhciB0PWV8fHt9LG49e307cmV0dXJue3N1YnNjcmliZTpmdW5jdGlvbihlLHQpe25bZV09KG5bZV18fFtdKS5jb25jYXQodCl9LHVuc3Vic2NyaWJlOmZ1bmN0aW9uKGUsdCl7bltlXT0obltlXXx8W10pLmZpbHRlcigoZnVuY3Rpb24oZSl7cmV0dXJuIGUhPT10fSkpfSx1cGRhdGU6ZnVuY3Rpb24oZSxyKXt2YXIgYTt0PUgoSCh7fSx0KSwoKGE9e30pW2VdPXIsYSkpLChuW2VdfHxbXSkuZm9yRWFjaCgoZnVuY3Rpb24obil7cmV0dXJuIG4odFtlXSl9KSl9LGdldDpmdW5jdGlvbihlKXtyZXR1cm4gdFtlXX19fTtcbiIsIi8qKlxuICogQSBSZWFjdCBjb21wb25lbnQgdG8gdmlldyBhIFBERiBkb2N1bWVudFxuICpcbiAqIEBzZWUgaHR0cHM6Ly9yZWFjdC1wZGYtdmlld2VyLmRldlxuICogQGxpY2Vuc2UgaHR0cHM6Ly9yZWFjdC1wZGYtdmlld2VyLmRldi9saWNlbnNlXG4gKiBAY29weXJpZ2h0IDIwMTktMjAyMCBOZ3V5ZW4gSHV1IFBodW9jIDxtZUBwaHVvYy5uZz5cbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9jb3JlLm1pbi5qcycpO1xufSBlbHNlIHtcbiAgICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL2NvcmUuanMnKTtcbn1cbiIsInJlcXVpcmUoJy4uL21vZHVsZXMvZXMuc3ltYm9sJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLnN5bWJvbC5hc3luYy1pdGVyYXRvcicpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5zeW1ib2wuZGVzY3JpcHRpb24nKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMuc3ltYm9sLmhhcy1pbnN0YW5jZScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5zeW1ib2wuaXMtY29uY2F0LXNwcmVhZGFibGUnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMuc3ltYm9sLml0ZXJhdG9yJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLnN5bWJvbC5tYXRjaCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5zeW1ib2wubWF0Y2gtYWxsJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLnN5bWJvbC5yZXBsYWNlJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLnN5bWJvbC5zZWFyY2gnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMuc3ltYm9sLnNwZWNpZXMnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMuc3ltYm9sLnNwbGl0Jyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLnN5bWJvbC50by1wcmltaXRpdmUnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMuc3ltYm9sLnRvLXN0cmluZy10YWcnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMuc3ltYm9sLnVuc2NvcGFibGVzJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLmFnZ3JlZ2F0ZS1lcnJvcicpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5hcnJheS5mcm9tJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLmFycmF5LmlzLWFycmF5Jyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLmFycmF5Lm9mJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLmFycmF5LmNvbmNhdCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5hcnJheS5jb3B5LXdpdGhpbicpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5hcnJheS5ldmVyeScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5hcnJheS5maWxsJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLmFycmF5LmZpbHRlcicpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5hcnJheS5maW5kJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLmFycmF5LmZpbmQtaW5kZXgnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMuYXJyYXkuZmxhdCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5hcnJheS5mbGF0LW1hcCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5hcnJheS5mb3ItZWFjaCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5hcnJheS5pbmNsdWRlcycpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5hcnJheS5pbmRleC1vZicpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5hcnJheS5qb2luJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLmFycmF5Lmxhc3QtaW5kZXgtb2YnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMuYXJyYXkubWFwJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLmFycmF5LnJlZHVjZScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5hcnJheS5yZWR1Y2UtcmlnaHQnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMuYXJyYXkucmV2ZXJzZScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5hcnJheS5zbGljZScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5hcnJheS5zb21lJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLmFycmF5LnNvcnQnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMuYXJyYXkuc3BsaWNlJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLmFycmF5LnNwZWNpZXMnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMuYXJyYXkudW5zY29wYWJsZXMuZmxhdCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5hcnJheS51bnNjb3BhYmxlcy5mbGF0LW1hcCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5hcnJheS5pdGVyYXRvcicpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5mdW5jdGlvbi5iaW5kJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLmZ1bmN0aW9uLm5hbWUnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMuZnVuY3Rpb24uaGFzLWluc3RhbmNlJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLmdsb2JhbC10aGlzJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLm9iamVjdC5hc3NpZ24nKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMub2JqZWN0LmNyZWF0ZScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5vYmplY3QuZGVmaW5lLXByb3BlcnR5Jyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLm9iamVjdC5kZWZpbmUtcHJvcGVydGllcycpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5vYmplY3QuZW50cmllcycpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5vYmplY3QuZnJlZXplJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLm9iamVjdC5mcm9tLWVudHJpZXMnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMub2JqZWN0LmdldC1vd24tcHJvcGVydHktZGVzY3JpcHRvcicpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5vYmplY3QuZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9ycycpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5vYmplY3QuZ2V0LW93bi1wcm9wZXJ0eS1uYW1lcycpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5vYmplY3QuZ2V0LXByb3RvdHlwZS1vZicpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5vYmplY3QuaXMnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMub2JqZWN0LmlzLWV4dGVuc2libGUnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMub2JqZWN0LmlzLWZyb3plbicpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5vYmplY3QuaXMtc2VhbGVkJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLm9iamVjdC5rZXlzJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLm9iamVjdC5wcmV2ZW50LWV4dGVuc2lvbnMnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMub2JqZWN0LnNlYWwnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMub2JqZWN0LnNldC1wcm90b3R5cGUtb2YnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMub2JqZWN0LnZhbHVlcycpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5vYmplY3QudG8tc3RyaW5nJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLm9iamVjdC5kZWZpbmUtZ2V0dGVyJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLm9iamVjdC5kZWZpbmUtc2V0dGVyJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLm9iamVjdC5sb29rdXAtZ2V0dGVyJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLm9iamVjdC5sb29rdXAtc2V0dGVyJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLnN0cmluZy5mcm9tLWNvZGUtcG9pbnQnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMuc3RyaW5nLnJhdycpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5zdHJpbmcuY29kZS1wb2ludC1hdCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5zdHJpbmcuZW5kcy13aXRoJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLnN0cmluZy5pbmNsdWRlcycpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5zdHJpbmcubWF0Y2gnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMuc3RyaW5nLm1hdGNoLWFsbCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5zdHJpbmcucGFkLWVuZCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5zdHJpbmcucGFkLXN0YXJ0Jyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLnN0cmluZy5yZXBlYXQnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMuc3RyaW5nLnJlcGxhY2UnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMuc3RyaW5nLnNlYXJjaCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5zdHJpbmcuc3BsaXQnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMuc3RyaW5nLnN0YXJ0cy13aXRoJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLnN0cmluZy50cmltJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLnN0cmluZy50cmltLXN0YXJ0Jyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLnN0cmluZy50cmltLWVuZCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5zdHJpbmcuaXRlcmF0b3InKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMuc3RyaW5nLmFuY2hvcicpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5zdHJpbmcuYmlnJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLnN0cmluZy5ibGluaycpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5zdHJpbmcuYm9sZCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5zdHJpbmcuZml4ZWQnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMuc3RyaW5nLmZvbnRjb2xvcicpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5zdHJpbmcuZm9udHNpemUnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMuc3RyaW5nLml0YWxpY3MnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMuc3RyaW5nLmxpbmsnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMuc3RyaW5nLnNtYWxsJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLnN0cmluZy5zdHJpa2UnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMuc3RyaW5nLnN1YicpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5zdHJpbmcuc3VwJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLnN0cmluZy5yZXBsYWNlLWFsbCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5yZWdleHAuY29uc3RydWN0b3InKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMucmVnZXhwLmV4ZWMnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMucmVnZXhwLmZsYWdzJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLnJlZ2V4cC5zdGlja3knKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMucmVnZXhwLnRlc3QnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMucmVnZXhwLnRvLXN0cmluZycpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5wYXJzZS1pbnQnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMucGFyc2UtZmxvYXQnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMubnVtYmVyLmNvbnN0cnVjdG9yJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLm51bWJlci5lcHNpbG9uJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLm51bWJlci5pcy1maW5pdGUnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMubnVtYmVyLmlzLWludGVnZXInKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMubnVtYmVyLmlzLW5hbicpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5udW1iZXIuaXMtc2FmZS1pbnRlZ2VyJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLm51bWJlci5tYXgtc2FmZS1pbnRlZ2VyJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLm51bWJlci5taW4tc2FmZS1pbnRlZ2VyJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLm51bWJlci5wYXJzZS1mbG9hdCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5udW1iZXIucGFyc2UtaW50Jyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLm51bWJlci50by1maXhlZCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5udW1iZXIudG8tcHJlY2lzaW9uJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLm1hdGguYWNvc2gnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMubWF0aC5hc2luaCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5tYXRoLmF0YW5oJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLm1hdGguY2JydCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5tYXRoLmNsejMyJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLm1hdGguY29zaCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5tYXRoLmV4cG0xJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLm1hdGguZnJvdW5kJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLm1hdGguaHlwb3QnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMubWF0aC5pbXVsJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLm1hdGgubG9nMTAnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMubWF0aC5sb2cxcCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5tYXRoLmxvZzInKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMubWF0aC5zaWduJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLm1hdGguc2luaCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5tYXRoLnRhbmgnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMubWF0aC50by1zdHJpbmctdGFnJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLm1hdGgudHJ1bmMnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMuZGF0ZS5ub3cnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMuZGF0ZS50by1qc29uJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLmRhdGUudG8taXNvLXN0cmluZycpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5kYXRlLnRvLXN0cmluZycpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5kYXRlLnRvLXByaW1pdGl2ZScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5qc29uLnN0cmluZ2lmeScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5qc29uLnRvLXN0cmluZy10YWcnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMucHJvbWlzZScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5wcm9taXNlLmFsbC1zZXR0bGVkJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLnByb21pc2UuYW55Jyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLnByb21pc2UuZmluYWxseScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5tYXAnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMuc2V0Jyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLndlYWstbWFwJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLndlYWstc2V0Jyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLmFycmF5LWJ1ZmZlci5jb25zdHJ1Y3RvcicpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5hcnJheS1idWZmZXIuaXMtdmlldycpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5hcnJheS1idWZmZXIuc2xpY2UnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMuZGF0YS12aWV3Jyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLnR5cGVkLWFycmF5LmludDgtYXJyYXknKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMudHlwZWQtYXJyYXkudWludDgtYXJyYXknKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMudHlwZWQtYXJyYXkudWludDgtY2xhbXBlZC1hcnJheScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy50eXBlZC1hcnJheS5pbnQxNi1hcnJheScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy50eXBlZC1hcnJheS51aW50MTYtYXJyYXknKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMudHlwZWQtYXJyYXkuaW50MzItYXJyYXknKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMudHlwZWQtYXJyYXkudWludDMyLWFycmF5Jyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLnR5cGVkLWFycmF5LmZsb2F0MzItYXJyYXknKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMudHlwZWQtYXJyYXkuZmxvYXQ2NC1hcnJheScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy50eXBlZC1hcnJheS5mcm9tJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLnR5cGVkLWFycmF5Lm9mJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLnR5cGVkLWFycmF5LmNvcHktd2l0aGluJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLnR5cGVkLWFycmF5LmV2ZXJ5Jyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLnR5cGVkLWFycmF5LmZpbGwnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMudHlwZWQtYXJyYXkuZmlsdGVyJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLnR5cGVkLWFycmF5LmZpbmQnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMudHlwZWQtYXJyYXkuZmluZC1pbmRleCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy50eXBlZC1hcnJheS5mb3ItZWFjaCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy50eXBlZC1hcnJheS5pbmNsdWRlcycpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy50eXBlZC1hcnJheS5pbmRleC1vZicpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy50eXBlZC1hcnJheS5pdGVyYXRvcicpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy50eXBlZC1hcnJheS5qb2luJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLnR5cGVkLWFycmF5Lmxhc3QtaW5kZXgtb2YnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMudHlwZWQtYXJyYXkubWFwJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLnR5cGVkLWFycmF5LnJlZHVjZScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy50eXBlZC1hcnJheS5yZWR1Y2UtcmlnaHQnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMudHlwZWQtYXJyYXkucmV2ZXJzZScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy50eXBlZC1hcnJheS5zZXQnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMudHlwZWQtYXJyYXkuc2xpY2UnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMudHlwZWQtYXJyYXkuc29tZScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy50eXBlZC1hcnJheS5zb3J0Jyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLnR5cGVkLWFycmF5LnN1YmFycmF5Jyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLnR5cGVkLWFycmF5LnRvLWxvY2FsZS1zdHJpbmcnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMudHlwZWQtYXJyYXkudG8tc3RyaW5nJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLnJlZmxlY3QuYXBwbHknKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMucmVmbGVjdC5jb25zdHJ1Y3QnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMucmVmbGVjdC5kZWZpbmUtcHJvcGVydHknKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMucmVmbGVjdC5kZWxldGUtcHJvcGVydHknKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMucmVmbGVjdC5nZXQnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMucmVmbGVjdC5nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3InKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMucmVmbGVjdC5nZXQtcHJvdG90eXBlLW9mJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLnJlZmxlY3QuaGFzJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLnJlZmxlY3QuaXMtZXh0ZW5zaWJsZScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5yZWZsZWN0Lm93bi1rZXlzJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLnJlZmxlY3QucHJldmVudC1leHRlbnNpb25zJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLnJlZmxlY3Quc2V0Jyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLnJlZmxlY3Quc2V0LXByb3RvdHlwZS1vZicpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5yZWZsZWN0LnRvLXN0cmluZy10YWcnKTtcbnZhciBwYXRoID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3BhdGgnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBwYXRoO1xuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgaWYgKHR5cGVvZiBpdCAhPSAnZnVuY3Rpb24nKSB7XG4gICAgdGhyb3cgVHlwZUVycm9yKFN0cmluZyhpdCkgKyAnIGlzIG5vdCBhIGZ1bmN0aW9uJyk7XG4gIH0gcmV0dXJuIGl0O1xufTtcbiIsInZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1vYmplY3QnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgaWYgKCFpc09iamVjdChpdCkgJiYgaXQgIT09IG51bGwpIHtcbiAgICB0aHJvdyBUeXBlRXJyb3IoXCJDYW4ndCBzZXQgXCIgKyBTdHJpbmcoaXQpICsgJyBhcyBhIHByb3RvdHlwZScpO1xuICB9IHJldHVybiBpdDtcbn07XG4iLCJ2YXIgd2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sJyk7XG52YXIgY3JlYXRlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1jcmVhdGUnKTtcbnZhciBkZWZpbmVQcm9wZXJ0eU1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZGVmaW5lLXByb3BlcnR5Jyk7XG5cbnZhciBVTlNDT1BBQkxFUyA9IHdlbGxLbm93blN5bWJvbCgndW5zY29wYWJsZXMnKTtcbnZhciBBcnJheVByb3RvdHlwZSA9IEFycmF5LnByb3RvdHlwZTtcblxuLy8gQXJyYXkucHJvdG90eXBlW0BAdW5zY29wYWJsZXNdXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS1AQHVuc2NvcGFibGVzXG5pZiAoQXJyYXlQcm90b3R5cGVbVU5TQ09QQUJMRVNdID09IHVuZGVmaW5lZCkge1xuICBkZWZpbmVQcm9wZXJ0eU1vZHVsZS5mKEFycmF5UHJvdG90eXBlLCBVTlNDT1BBQkxFUywge1xuICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICB2YWx1ZTogY3JlYXRlKG51bGwpXG4gIH0pO1xufVxuXG4vLyBhZGQgYSBrZXkgdG8gQXJyYXkucHJvdG90eXBlW0BAdW5zY29wYWJsZXNdXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChrZXkpIHtcbiAgQXJyYXlQcm90b3R5cGVbVU5TQ09QQUJMRVNdW2tleV0gPSB0cnVlO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBjaGFyQXQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc3RyaW5nLW11bHRpYnl0ZScpLmNoYXJBdDtcblxuLy8gYEFkdmFuY2VTdHJpbmdJbmRleGAgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFkdmFuY2VzdHJpbmdpbmRleFxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoUywgaW5kZXgsIHVuaWNvZGUpIHtcbiAgcmV0dXJuIGluZGV4ICsgKHVuaWNvZGUgPyBjaGFyQXQoUywgaW5kZXgpLmxlbmd0aCA6IDEpO1xufTtcbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0LCBDb25zdHJ1Y3RvciwgbmFtZSkge1xuICBpZiAoIShpdCBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkge1xuICAgIHRocm93IFR5cGVFcnJvcignSW5jb3JyZWN0ICcgKyAobmFtZSA/IG5hbWUgKyAnICcgOiAnJykgKyAnaW52b2NhdGlvbicpO1xuICB9IHJldHVybiBpdDtcbn07XG4iLCJ2YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtb2JqZWN0Jyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIGlmICghaXNPYmplY3QoaXQpKSB7XG4gICAgdGhyb3cgVHlwZUVycm9yKFN0cmluZyhpdCkgKyAnIGlzIG5vdCBhbiBvYmplY3QnKTtcbiAgfSByZXR1cm4gaXQ7XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSB0eXBlb2YgQXJyYXlCdWZmZXIgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBEYXRhVmlldyAhPT0gJ3VuZGVmaW5lZCc7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgTkFUSVZFX0FSUkFZX0JVRkZFUiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1idWZmZXItbmF0aXZlJyk7XG52YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVzY3JpcHRvcnMnKTtcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtb2JqZWN0Jyk7XG52YXIgaGFzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hhcycpO1xudmFyIGNsYXNzb2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY2xhc3NvZicpO1xudmFyIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtbm9uLWVudW1lcmFibGUtcHJvcGVydHknKTtcbnZhciByZWRlZmluZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZWRlZmluZScpO1xudmFyIGRlZmluZVByb3BlcnR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1kZWZpbmUtcHJvcGVydHknKS5mO1xudmFyIGdldFByb3RvdHlwZU9mID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1nZXQtcHJvdG90eXBlLW9mJyk7XG52YXIgc2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LXNldC1wcm90b3R5cGUtb2YnKTtcbnZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcbnZhciB1aWQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdWlkJyk7XG5cbnZhciBJbnQ4QXJyYXkgPSBnbG9iYWwuSW50OEFycmF5O1xudmFyIEludDhBcnJheVByb3RvdHlwZSA9IEludDhBcnJheSAmJiBJbnQ4QXJyYXkucHJvdG90eXBlO1xudmFyIFVpbnQ4Q2xhbXBlZEFycmF5ID0gZ2xvYmFsLlVpbnQ4Q2xhbXBlZEFycmF5O1xudmFyIFVpbnQ4Q2xhbXBlZEFycmF5UHJvdG90eXBlID0gVWludDhDbGFtcGVkQXJyYXkgJiYgVWludDhDbGFtcGVkQXJyYXkucHJvdG90eXBlO1xudmFyIFR5cGVkQXJyYXkgPSBJbnQ4QXJyYXkgJiYgZ2V0UHJvdG90eXBlT2YoSW50OEFycmF5KTtcbnZhciBUeXBlZEFycmF5UHJvdG90eXBlID0gSW50OEFycmF5UHJvdG90eXBlICYmIGdldFByb3RvdHlwZU9mKEludDhBcnJheVByb3RvdHlwZSk7XG52YXIgT2JqZWN0UHJvdG90eXBlID0gT2JqZWN0LnByb3RvdHlwZTtcbnZhciBpc1Byb3RvdHlwZU9mID0gT2JqZWN0UHJvdG90eXBlLmlzUHJvdG90eXBlT2Y7XG5cbnZhciBUT19TVFJJTkdfVEFHID0gd2VsbEtub3duU3ltYm9sKCd0b1N0cmluZ1RhZycpO1xudmFyIFRZUEVEX0FSUkFZX1RBRyA9IHVpZCgnVFlQRURfQVJSQVlfVEFHJyk7XG4vLyBGaXhpbmcgbmF0aXZlIHR5cGVkIGFycmF5cyBpbiBPcGVyYSBQcmVzdG8gY3Jhc2hlcyB0aGUgYnJvd3Nlciwgc2VlICM1OTVcbnZhciBOQVRJVkVfQVJSQVlfQlVGRkVSX1ZJRVdTID0gTkFUSVZFX0FSUkFZX0JVRkZFUiAmJiAhIXNldFByb3RvdHlwZU9mICYmIGNsYXNzb2YoZ2xvYmFsLm9wZXJhKSAhPT0gJ09wZXJhJztcbnZhciBUWVBFRF9BUlJBWV9UQUdfUkVRSVJFRCA9IGZhbHNlO1xudmFyIE5BTUU7XG5cbnZhciBUeXBlZEFycmF5Q29uc3RydWN0b3JzTGlzdCA9IHtcbiAgSW50OEFycmF5OiAxLFxuICBVaW50OEFycmF5OiAxLFxuICBVaW50OENsYW1wZWRBcnJheTogMSxcbiAgSW50MTZBcnJheTogMixcbiAgVWludDE2QXJyYXk6IDIsXG4gIEludDMyQXJyYXk6IDQsXG4gIFVpbnQzMkFycmF5OiA0LFxuICBGbG9hdDMyQXJyYXk6IDQsXG4gIEZsb2F0NjRBcnJheTogOFxufTtcblxudmFyIEJpZ0ludEFycmF5Q29uc3RydWN0b3JzTGlzdCA9IHtcbiAgQmlnSW50NjRBcnJheTogOCxcbiAgQmlnVWludDY0QXJyYXk6IDhcbn07XG5cbnZhciBpc1ZpZXcgPSBmdW5jdGlvbiBpc1ZpZXcoaXQpIHtcbiAgaWYgKCFpc09iamVjdChpdCkpIHJldHVybiBmYWxzZTtcbiAgdmFyIGtsYXNzID0gY2xhc3NvZihpdCk7XG4gIHJldHVybiBrbGFzcyA9PT0gJ0RhdGFWaWV3J1xuICAgIHx8IGhhcyhUeXBlZEFycmF5Q29uc3RydWN0b3JzTGlzdCwga2xhc3MpXG4gICAgfHwgaGFzKEJpZ0ludEFycmF5Q29uc3RydWN0b3JzTGlzdCwga2xhc3MpO1xufTtcblxudmFyIGlzVHlwZWRBcnJheSA9IGZ1bmN0aW9uIChpdCkge1xuICBpZiAoIWlzT2JqZWN0KGl0KSkgcmV0dXJuIGZhbHNlO1xuICB2YXIga2xhc3MgPSBjbGFzc29mKGl0KTtcbiAgcmV0dXJuIGhhcyhUeXBlZEFycmF5Q29uc3RydWN0b3JzTGlzdCwga2xhc3MpXG4gICAgfHwgaGFzKEJpZ0ludEFycmF5Q29uc3RydWN0b3JzTGlzdCwga2xhc3MpO1xufTtcblxudmFyIGFUeXBlZEFycmF5ID0gZnVuY3Rpb24gKGl0KSB7XG4gIGlmIChpc1R5cGVkQXJyYXkoaXQpKSByZXR1cm4gaXQ7XG4gIHRocm93IFR5cGVFcnJvcignVGFyZ2V0IGlzIG5vdCBhIHR5cGVkIGFycmF5Jyk7XG59O1xuXG52YXIgYVR5cGVkQXJyYXlDb25zdHJ1Y3RvciA9IGZ1bmN0aW9uIChDKSB7XG4gIGlmIChzZXRQcm90b3R5cGVPZikge1xuICAgIGlmIChpc1Byb3RvdHlwZU9mLmNhbGwoVHlwZWRBcnJheSwgQykpIHJldHVybiBDO1xuICB9IGVsc2UgZm9yICh2YXIgQVJSQVkgaW4gVHlwZWRBcnJheUNvbnN0cnVjdG9yc0xpc3QpIGlmIChoYXMoVHlwZWRBcnJheUNvbnN0cnVjdG9yc0xpc3QsIE5BTUUpKSB7XG4gICAgdmFyIFR5cGVkQXJyYXlDb25zdHJ1Y3RvciA9IGdsb2JhbFtBUlJBWV07XG4gICAgaWYgKFR5cGVkQXJyYXlDb25zdHJ1Y3RvciAmJiAoQyA9PT0gVHlwZWRBcnJheUNvbnN0cnVjdG9yIHx8IGlzUHJvdG90eXBlT2YuY2FsbChUeXBlZEFycmF5Q29uc3RydWN0b3IsIEMpKSkge1xuICAgICAgcmV0dXJuIEM7XG4gICAgfVxuICB9IHRocm93IFR5cGVFcnJvcignVGFyZ2V0IGlzIG5vdCBhIHR5cGVkIGFycmF5IGNvbnN0cnVjdG9yJyk7XG59O1xuXG52YXIgZXhwb3J0VHlwZWRBcnJheU1ldGhvZCA9IGZ1bmN0aW9uIChLRVksIHByb3BlcnR5LCBmb3JjZWQpIHtcbiAgaWYgKCFERVNDUklQVE9SUykgcmV0dXJuO1xuICBpZiAoZm9yY2VkKSBmb3IgKHZhciBBUlJBWSBpbiBUeXBlZEFycmF5Q29uc3RydWN0b3JzTGlzdCkge1xuICAgIHZhciBUeXBlZEFycmF5Q29uc3RydWN0b3IgPSBnbG9iYWxbQVJSQVldO1xuICAgIGlmIChUeXBlZEFycmF5Q29uc3RydWN0b3IgJiYgaGFzKFR5cGVkQXJyYXlDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIEtFWSkpIHtcbiAgICAgIGRlbGV0ZSBUeXBlZEFycmF5Q29uc3RydWN0b3IucHJvdG90eXBlW0tFWV07XG4gICAgfVxuICB9XG4gIGlmICghVHlwZWRBcnJheVByb3RvdHlwZVtLRVldIHx8IGZvcmNlZCkge1xuICAgIHJlZGVmaW5lKFR5cGVkQXJyYXlQcm90b3R5cGUsIEtFWSwgZm9yY2VkID8gcHJvcGVydHlcbiAgICAgIDogTkFUSVZFX0FSUkFZX0JVRkZFUl9WSUVXUyAmJiBJbnQ4QXJyYXlQcm90b3R5cGVbS0VZXSB8fCBwcm9wZXJ0eSk7XG4gIH1cbn07XG5cbnZhciBleHBvcnRUeXBlZEFycmF5U3RhdGljTWV0aG9kID0gZnVuY3Rpb24gKEtFWSwgcHJvcGVydHksIGZvcmNlZCkge1xuICB2YXIgQVJSQVksIFR5cGVkQXJyYXlDb25zdHJ1Y3RvcjtcbiAgaWYgKCFERVNDUklQVE9SUykgcmV0dXJuO1xuICBpZiAoc2V0UHJvdG90eXBlT2YpIHtcbiAgICBpZiAoZm9yY2VkKSBmb3IgKEFSUkFZIGluIFR5cGVkQXJyYXlDb25zdHJ1Y3RvcnNMaXN0KSB7XG4gICAgICBUeXBlZEFycmF5Q29uc3RydWN0b3IgPSBnbG9iYWxbQVJSQVldO1xuICAgICAgaWYgKFR5cGVkQXJyYXlDb25zdHJ1Y3RvciAmJiBoYXMoVHlwZWRBcnJheUNvbnN0cnVjdG9yLCBLRVkpKSB7XG4gICAgICAgIGRlbGV0ZSBUeXBlZEFycmF5Q29uc3RydWN0b3JbS0VZXTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKCFUeXBlZEFycmF5W0tFWV0gfHwgZm9yY2VkKSB7XG4gICAgICAvLyBWOCB+IENocm9tZSA0OS01MCBgJVR5cGVkQXJyYXklYCBtZXRob2RzIGFyZSBub24td3JpdGFibGUgbm9uLWNvbmZpZ3VyYWJsZVxuICAgICAgdHJ5IHtcbiAgICAgICAgcmV0dXJuIHJlZGVmaW5lKFR5cGVkQXJyYXksIEtFWSwgZm9yY2VkID8gcHJvcGVydHkgOiBOQVRJVkVfQVJSQVlfQlVGRkVSX1ZJRVdTICYmIEludDhBcnJheVtLRVldIHx8IHByb3BlcnR5KTtcbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7IC8qIGVtcHR5ICovIH1cbiAgICB9IGVsc2UgcmV0dXJuO1xuICB9XG4gIGZvciAoQVJSQVkgaW4gVHlwZWRBcnJheUNvbnN0cnVjdG9yc0xpc3QpIHtcbiAgICBUeXBlZEFycmF5Q29uc3RydWN0b3IgPSBnbG9iYWxbQVJSQVldO1xuICAgIGlmIChUeXBlZEFycmF5Q29uc3RydWN0b3IgJiYgKCFUeXBlZEFycmF5Q29uc3RydWN0b3JbS0VZXSB8fCBmb3JjZWQpKSB7XG4gICAgICByZWRlZmluZShUeXBlZEFycmF5Q29uc3RydWN0b3IsIEtFWSwgcHJvcGVydHkpO1xuICAgIH1cbiAgfVxufTtcblxuZm9yIChOQU1FIGluIFR5cGVkQXJyYXlDb25zdHJ1Y3RvcnNMaXN0KSB7XG4gIGlmICghZ2xvYmFsW05BTUVdKSBOQVRJVkVfQVJSQVlfQlVGRkVSX1ZJRVdTID0gZmFsc2U7XG59XG5cbi8vIFdlYktpdCBidWcgLSB0eXBlZCBhcnJheXMgY29uc3RydWN0b3JzIHByb3RvdHlwZSBpcyBPYmplY3QucHJvdG90eXBlXG5pZiAoIU5BVElWRV9BUlJBWV9CVUZGRVJfVklFV1MgfHwgdHlwZW9mIFR5cGVkQXJyYXkgIT0gJ2Z1bmN0aW9uJyB8fCBUeXBlZEFycmF5ID09PSBGdW5jdGlvbi5wcm90b3R5cGUpIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNoYWRvd1xuICBUeXBlZEFycmF5ID0gZnVuY3Rpb24gVHlwZWRBcnJheSgpIHtcbiAgICB0aHJvdyBUeXBlRXJyb3IoJ0luY29ycmVjdCBpbnZvY2F0aW9uJyk7XG4gIH07XG4gIGlmIChOQVRJVkVfQVJSQVlfQlVGRkVSX1ZJRVdTKSBmb3IgKE5BTUUgaW4gVHlwZWRBcnJheUNvbnN0cnVjdG9yc0xpc3QpIHtcbiAgICBpZiAoZ2xvYmFsW05BTUVdKSBzZXRQcm90b3R5cGVPZihnbG9iYWxbTkFNRV0sIFR5cGVkQXJyYXkpO1xuICB9XG59XG5cbmlmICghTkFUSVZFX0FSUkFZX0JVRkZFUl9WSUVXUyB8fCAhVHlwZWRBcnJheVByb3RvdHlwZSB8fCBUeXBlZEFycmF5UHJvdG90eXBlID09PSBPYmplY3RQcm90b3R5cGUpIHtcbiAgVHlwZWRBcnJheVByb3RvdHlwZSA9IFR5cGVkQXJyYXkucHJvdG90eXBlO1xuICBpZiAoTkFUSVZFX0FSUkFZX0JVRkZFUl9WSUVXUykgZm9yIChOQU1FIGluIFR5cGVkQXJyYXlDb25zdHJ1Y3RvcnNMaXN0KSB7XG4gICAgaWYgKGdsb2JhbFtOQU1FXSkgc2V0UHJvdG90eXBlT2YoZ2xvYmFsW05BTUVdLnByb3RvdHlwZSwgVHlwZWRBcnJheVByb3RvdHlwZSk7XG4gIH1cbn1cblxuLy8gV2ViS2l0IGJ1ZyAtIG9uZSBtb3JlIG9iamVjdCBpbiBVaW50OENsYW1wZWRBcnJheSBwcm90b3R5cGUgY2hhaW5cbmlmIChOQVRJVkVfQVJSQVlfQlVGRkVSX1ZJRVdTICYmIGdldFByb3RvdHlwZU9mKFVpbnQ4Q2xhbXBlZEFycmF5UHJvdG90eXBlKSAhPT0gVHlwZWRBcnJheVByb3RvdHlwZSkge1xuICBzZXRQcm90b3R5cGVPZihVaW50OENsYW1wZWRBcnJheVByb3RvdHlwZSwgVHlwZWRBcnJheVByb3RvdHlwZSk7XG59XG5cbmlmIChERVNDUklQVE9SUyAmJiAhaGFzKFR5cGVkQXJyYXlQcm90b3R5cGUsIFRPX1NUUklOR19UQUcpKSB7XG4gIFRZUEVEX0FSUkFZX1RBR19SRVFJUkVEID0gdHJ1ZTtcbiAgZGVmaW5lUHJvcGVydHkoVHlwZWRBcnJheVByb3RvdHlwZSwgVE9fU1RSSU5HX1RBRywgeyBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gaXNPYmplY3QodGhpcykgPyB0aGlzW1RZUEVEX0FSUkFZX1RBR10gOiB1bmRlZmluZWQ7XG4gIH0gfSk7XG4gIGZvciAoTkFNRSBpbiBUeXBlZEFycmF5Q29uc3RydWN0b3JzTGlzdCkgaWYgKGdsb2JhbFtOQU1FXSkge1xuICAgIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eShnbG9iYWxbTkFNRV0sIFRZUEVEX0FSUkFZX1RBRywgTkFNRSk7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIE5BVElWRV9BUlJBWV9CVUZGRVJfVklFV1M6IE5BVElWRV9BUlJBWV9CVUZGRVJfVklFV1MsXG4gIFRZUEVEX0FSUkFZX1RBRzogVFlQRURfQVJSQVlfVEFHX1JFUUlSRUQgJiYgVFlQRURfQVJSQVlfVEFHLFxuICBhVHlwZWRBcnJheTogYVR5cGVkQXJyYXksXG4gIGFUeXBlZEFycmF5Q29uc3RydWN0b3I6IGFUeXBlZEFycmF5Q29uc3RydWN0b3IsXG4gIGV4cG9ydFR5cGVkQXJyYXlNZXRob2Q6IGV4cG9ydFR5cGVkQXJyYXlNZXRob2QsXG4gIGV4cG9ydFR5cGVkQXJyYXlTdGF0aWNNZXRob2Q6IGV4cG9ydFR5cGVkQXJyYXlTdGF0aWNNZXRob2QsXG4gIGlzVmlldzogaXNWaWV3LFxuICBpc1R5cGVkQXJyYXk6IGlzVHlwZWRBcnJheSxcbiAgVHlwZWRBcnJheTogVHlwZWRBcnJheSxcbiAgVHlwZWRBcnJheVByb3RvdHlwZTogVHlwZWRBcnJheVByb3RvdHlwZVxufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVzY3JpcHRvcnMnKTtcbnZhciBOQVRJVkVfQVJSQVlfQlVGRkVSID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LWJ1ZmZlci1uYXRpdmUnKTtcbnZhciBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLW5vbi1lbnVtZXJhYmxlLXByb3BlcnR5Jyk7XG52YXIgcmVkZWZpbmVBbGwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVkZWZpbmUtYWxsJyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcbnZhciBhbkluc3RhbmNlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLWluc3RhbmNlJyk7XG52YXIgdG9JbnRlZ2VyID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWludGVnZXInKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1sZW5ndGgnKTtcbnZhciB0b0luZGV4ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWluZGV4Jyk7XG52YXIgSUVFRTc1NCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pZWVlNzU0Jyk7XG52YXIgZ2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1wcm90b3R5cGUtb2YnKTtcbnZhciBzZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3Qtc2V0LXByb3RvdHlwZS1vZicpO1xudmFyIGdldE93blByb3BlcnR5TmFtZXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1vd24tcHJvcGVydHktbmFtZXMnKS5mO1xudmFyIGRlZmluZVByb3BlcnR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1kZWZpbmUtcHJvcGVydHknKS5mO1xudmFyIGFycmF5RmlsbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1maWxsJyk7XG52YXIgc2V0VG9TdHJpbmdUYWcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2V0LXRvLXN0cmluZy10YWcnKTtcbnZhciBJbnRlcm5hbFN0YXRlTW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ludGVybmFsLXN0YXRlJyk7XG5cbnZhciBnZXRJbnRlcm5hbFN0YXRlID0gSW50ZXJuYWxTdGF0ZU1vZHVsZS5nZXQ7XG52YXIgc2V0SW50ZXJuYWxTdGF0ZSA9IEludGVybmFsU3RhdGVNb2R1bGUuc2V0O1xudmFyIEFSUkFZX0JVRkZFUiA9ICdBcnJheUJ1ZmZlcic7XG52YXIgREFUQV9WSUVXID0gJ0RhdGFWaWV3JztcbnZhciBQUk9UT1RZUEUgPSAncHJvdG90eXBlJztcbnZhciBXUk9OR19MRU5HVEggPSAnV3JvbmcgbGVuZ3RoJztcbnZhciBXUk9OR19JTkRFWCA9ICdXcm9uZyBpbmRleCc7XG52YXIgTmF0aXZlQXJyYXlCdWZmZXIgPSBnbG9iYWxbQVJSQVlfQlVGRkVSXTtcbnZhciAkQXJyYXlCdWZmZXIgPSBOYXRpdmVBcnJheUJ1ZmZlcjtcbnZhciAkRGF0YVZpZXcgPSBnbG9iYWxbREFUQV9WSUVXXTtcbnZhciAkRGF0YVZpZXdQcm90b3R5cGUgPSAkRGF0YVZpZXcgJiYgJERhdGFWaWV3W1BST1RPVFlQRV07XG52YXIgT2JqZWN0UHJvdG90eXBlID0gT2JqZWN0LnByb3RvdHlwZTtcbnZhciBSYW5nZUVycm9yID0gZ2xvYmFsLlJhbmdlRXJyb3I7XG5cbnZhciBwYWNrSUVFRTc1NCA9IElFRUU3NTQucGFjaztcbnZhciB1bnBhY2tJRUVFNzU0ID0gSUVFRTc1NC51bnBhY2s7XG5cbnZhciBwYWNrSW50OCA9IGZ1bmN0aW9uIChudW1iZXIpIHtcbiAgcmV0dXJuIFtudW1iZXIgJiAweEZGXTtcbn07XG5cbnZhciBwYWNrSW50MTYgPSBmdW5jdGlvbiAobnVtYmVyKSB7XG4gIHJldHVybiBbbnVtYmVyICYgMHhGRiwgbnVtYmVyID4+IDggJiAweEZGXTtcbn07XG5cbnZhciBwYWNrSW50MzIgPSBmdW5jdGlvbiAobnVtYmVyKSB7XG4gIHJldHVybiBbbnVtYmVyICYgMHhGRiwgbnVtYmVyID4+IDggJiAweEZGLCBudW1iZXIgPj4gMTYgJiAweEZGLCBudW1iZXIgPj4gMjQgJiAweEZGXTtcbn07XG5cbnZhciB1bnBhY2tJbnQzMiA9IGZ1bmN0aW9uIChidWZmZXIpIHtcbiAgcmV0dXJuIGJ1ZmZlclszXSA8PCAyNCB8IGJ1ZmZlclsyXSA8PCAxNiB8IGJ1ZmZlclsxXSA8PCA4IHwgYnVmZmVyWzBdO1xufTtcblxudmFyIHBhY2tGbG9hdDMyID0gZnVuY3Rpb24gKG51bWJlcikge1xuICByZXR1cm4gcGFja0lFRUU3NTQobnVtYmVyLCAyMywgNCk7XG59O1xuXG52YXIgcGFja0Zsb2F0NjQgPSBmdW5jdGlvbiAobnVtYmVyKSB7XG4gIHJldHVybiBwYWNrSUVFRTc1NChudW1iZXIsIDUyLCA4KTtcbn07XG5cbnZhciBhZGRHZXR0ZXIgPSBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIGtleSkge1xuICBkZWZpbmVQcm9wZXJ0eShDb25zdHJ1Y3RvcltQUk9UT1RZUEVdLCBrZXksIHsgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBnZXRJbnRlcm5hbFN0YXRlKHRoaXMpW2tleV07IH0gfSk7XG59O1xuXG52YXIgZ2V0ID0gZnVuY3Rpb24gKHZpZXcsIGNvdW50LCBpbmRleCwgaXNMaXR0bGVFbmRpYW4pIHtcbiAgdmFyIGludEluZGV4ID0gdG9JbmRleChpbmRleCk7XG4gIHZhciBzdG9yZSA9IGdldEludGVybmFsU3RhdGUodmlldyk7XG4gIGlmIChpbnRJbmRleCArIGNvdW50ID4gc3RvcmUuYnl0ZUxlbmd0aCkgdGhyb3cgUmFuZ2VFcnJvcihXUk9OR19JTkRFWCk7XG4gIHZhciBieXRlcyA9IGdldEludGVybmFsU3RhdGUoc3RvcmUuYnVmZmVyKS5ieXRlcztcbiAgdmFyIHN0YXJ0ID0gaW50SW5kZXggKyBzdG9yZS5ieXRlT2Zmc2V0O1xuICB2YXIgcGFjayA9IGJ5dGVzLnNsaWNlKHN0YXJ0LCBzdGFydCArIGNvdW50KTtcbiAgcmV0dXJuIGlzTGl0dGxlRW5kaWFuID8gcGFjayA6IHBhY2sucmV2ZXJzZSgpO1xufTtcblxudmFyIHNldCA9IGZ1bmN0aW9uICh2aWV3LCBjb3VudCwgaW5kZXgsIGNvbnZlcnNpb24sIHZhbHVlLCBpc0xpdHRsZUVuZGlhbikge1xuICB2YXIgaW50SW5kZXggPSB0b0luZGV4KGluZGV4KTtcbiAgdmFyIHN0b3JlID0gZ2V0SW50ZXJuYWxTdGF0ZSh2aWV3KTtcbiAgaWYgKGludEluZGV4ICsgY291bnQgPiBzdG9yZS5ieXRlTGVuZ3RoKSB0aHJvdyBSYW5nZUVycm9yKFdST05HX0lOREVYKTtcbiAgdmFyIGJ5dGVzID0gZ2V0SW50ZXJuYWxTdGF0ZShzdG9yZS5idWZmZXIpLmJ5dGVzO1xuICB2YXIgc3RhcnQgPSBpbnRJbmRleCArIHN0b3JlLmJ5dGVPZmZzZXQ7XG4gIHZhciBwYWNrID0gY29udmVyc2lvbigrdmFsdWUpO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGNvdW50OyBpKyspIGJ5dGVzW3N0YXJ0ICsgaV0gPSBwYWNrW2lzTGl0dGxlRW5kaWFuID8gaSA6IGNvdW50IC0gaSAtIDFdO1xufTtcblxuaWYgKCFOQVRJVkVfQVJSQVlfQlVGRkVSKSB7XG4gICRBcnJheUJ1ZmZlciA9IGZ1bmN0aW9uIEFycmF5QnVmZmVyKGxlbmd0aCkge1xuICAgIGFuSW5zdGFuY2UodGhpcywgJEFycmF5QnVmZmVyLCBBUlJBWV9CVUZGRVIpO1xuICAgIHZhciBieXRlTGVuZ3RoID0gdG9JbmRleChsZW5ndGgpO1xuICAgIHNldEludGVybmFsU3RhdGUodGhpcywge1xuICAgICAgYnl0ZXM6IGFycmF5RmlsbC5jYWxsKG5ldyBBcnJheShieXRlTGVuZ3RoKSwgMCksXG4gICAgICBieXRlTGVuZ3RoOiBieXRlTGVuZ3RoXG4gICAgfSk7XG4gICAgaWYgKCFERVNDUklQVE9SUykgdGhpcy5ieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aDtcbiAgfTtcblxuICAkRGF0YVZpZXcgPSBmdW5jdGlvbiBEYXRhVmlldyhidWZmZXIsIGJ5dGVPZmZzZXQsIGJ5dGVMZW5ndGgpIHtcbiAgICBhbkluc3RhbmNlKHRoaXMsICREYXRhVmlldywgREFUQV9WSUVXKTtcbiAgICBhbkluc3RhbmNlKGJ1ZmZlciwgJEFycmF5QnVmZmVyLCBEQVRBX1ZJRVcpO1xuICAgIHZhciBidWZmZXJMZW5ndGggPSBnZXRJbnRlcm5hbFN0YXRlKGJ1ZmZlcikuYnl0ZUxlbmd0aDtcbiAgICB2YXIgb2Zmc2V0ID0gdG9JbnRlZ2VyKGJ5dGVPZmZzZXQpO1xuICAgIGlmIChvZmZzZXQgPCAwIHx8IG9mZnNldCA+IGJ1ZmZlckxlbmd0aCkgdGhyb3cgUmFuZ2VFcnJvcignV3Jvbmcgb2Zmc2V0Jyk7XG4gICAgYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGggPT09IHVuZGVmaW5lZCA/IGJ1ZmZlckxlbmd0aCAtIG9mZnNldCA6IHRvTGVuZ3RoKGJ5dGVMZW5ndGgpO1xuICAgIGlmIChvZmZzZXQgKyBieXRlTGVuZ3RoID4gYnVmZmVyTGVuZ3RoKSB0aHJvdyBSYW5nZUVycm9yKFdST05HX0xFTkdUSCk7XG4gICAgc2V0SW50ZXJuYWxTdGF0ZSh0aGlzLCB7XG4gICAgICBidWZmZXI6IGJ1ZmZlcixcbiAgICAgIGJ5dGVMZW5ndGg6IGJ5dGVMZW5ndGgsXG4gICAgICBieXRlT2Zmc2V0OiBvZmZzZXRcbiAgICB9KTtcbiAgICBpZiAoIURFU0NSSVBUT1JTKSB7XG4gICAgICB0aGlzLmJ1ZmZlciA9IGJ1ZmZlcjtcbiAgICAgIHRoaXMuYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGg7XG4gICAgICB0aGlzLmJ5dGVPZmZzZXQgPSBvZmZzZXQ7XG4gICAgfVxuICB9O1xuXG4gIGlmIChERVNDUklQVE9SUykge1xuICAgIGFkZEdldHRlcigkQXJyYXlCdWZmZXIsICdieXRlTGVuZ3RoJyk7XG4gICAgYWRkR2V0dGVyKCREYXRhVmlldywgJ2J1ZmZlcicpO1xuICAgIGFkZEdldHRlcigkRGF0YVZpZXcsICdieXRlTGVuZ3RoJyk7XG4gICAgYWRkR2V0dGVyKCREYXRhVmlldywgJ2J5dGVPZmZzZXQnKTtcbiAgfVxuXG4gIHJlZGVmaW5lQWxsKCREYXRhVmlld1tQUk9UT1RZUEVdLCB7XG4gICAgZ2V0SW50ODogZnVuY3Rpb24gZ2V0SW50OChieXRlT2Zmc2V0KSB7XG4gICAgICByZXR1cm4gZ2V0KHRoaXMsIDEsIGJ5dGVPZmZzZXQpWzBdIDw8IDI0ID4+IDI0O1xuICAgIH0sXG4gICAgZ2V0VWludDg6IGZ1bmN0aW9uIGdldFVpbnQ4KGJ5dGVPZmZzZXQpIHtcbiAgICAgIHJldHVybiBnZXQodGhpcywgMSwgYnl0ZU9mZnNldClbMF07XG4gICAgfSxcbiAgICBnZXRJbnQxNjogZnVuY3Rpb24gZ2V0SW50MTYoYnl0ZU9mZnNldCAvKiAsIGxpdHRsZUVuZGlhbiAqLykge1xuICAgICAgdmFyIGJ5dGVzID0gZ2V0KHRoaXMsIDIsIGJ5dGVPZmZzZXQsIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbiAgICAgIHJldHVybiAoYnl0ZXNbMV0gPDwgOCB8IGJ5dGVzWzBdKSA8PCAxNiA+PiAxNjtcbiAgICB9LFxuICAgIGdldFVpbnQxNjogZnVuY3Rpb24gZ2V0VWludDE2KGJ5dGVPZmZzZXQgLyogLCBsaXR0bGVFbmRpYW4gKi8pIHtcbiAgICAgIHZhciBieXRlcyA9IGdldCh0aGlzLCAyLCBieXRlT2Zmc2V0LCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4gICAgICByZXR1cm4gYnl0ZXNbMV0gPDwgOCB8IGJ5dGVzWzBdO1xuICAgIH0sXG4gICAgZ2V0SW50MzI6IGZ1bmN0aW9uIGdldEludDMyKGJ5dGVPZmZzZXQgLyogLCBsaXR0bGVFbmRpYW4gKi8pIHtcbiAgICAgIHJldHVybiB1bnBhY2tJbnQzMihnZXQodGhpcywgNCwgYnl0ZU9mZnNldCwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpKTtcbiAgICB9LFxuICAgIGdldFVpbnQzMjogZnVuY3Rpb24gZ2V0VWludDMyKGJ5dGVPZmZzZXQgLyogLCBsaXR0bGVFbmRpYW4gKi8pIHtcbiAgICAgIHJldHVybiB1bnBhY2tJbnQzMihnZXQodGhpcywgNCwgYnl0ZU9mZnNldCwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpKSA+Pj4gMDtcbiAgICB9LFxuICAgIGdldEZsb2F0MzI6IGZ1bmN0aW9uIGdldEZsb2F0MzIoYnl0ZU9mZnNldCAvKiAsIGxpdHRsZUVuZGlhbiAqLykge1xuICAgICAgcmV0dXJuIHVucGFja0lFRUU3NTQoZ2V0KHRoaXMsIDQsIGJ5dGVPZmZzZXQsIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKSwgMjMpO1xuICAgIH0sXG4gICAgZ2V0RmxvYXQ2NDogZnVuY3Rpb24gZ2V0RmxvYXQ2NChieXRlT2Zmc2V0IC8qICwgbGl0dGxlRW5kaWFuICovKSB7XG4gICAgICByZXR1cm4gdW5wYWNrSUVFRTc1NChnZXQodGhpcywgOCwgYnl0ZU9mZnNldCwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpLCA1Mik7XG4gICAgfSxcbiAgICBzZXRJbnQ4OiBmdW5jdGlvbiBzZXRJbnQ4KGJ5dGVPZmZzZXQsIHZhbHVlKSB7XG4gICAgICBzZXQodGhpcywgMSwgYnl0ZU9mZnNldCwgcGFja0ludDgsIHZhbHVlKTtcbiAgICB9LFxuICAgIHNldFVpbnQ4OiBmdW5jdGlvbiBzZXRVaW50OChieXRlT2Zmc2V0LCB2YWx1ZSkge1xuICAgICAgc2V0KHRoaXMsIDEsIGJ5dGVPZmZzZXQsIHBhY2tJbnQ4LCB2YWx1ZSk7XG4gICAgfSxcbiAgICBzZXRJbnQxNjogZnVuY3Rpb24gc2V0SW50MTYoYnl0ZU9mZnNldCwgdmFsdWUgLyogLCBsaXR0bGVFbmRpYW4gKi8pIHtcbiAgICAgIHNldCh0aGlzLCAyLCBieXRlT2Zmc2V0LCBwYWNrSW50MTYsIHZhbHVlLCBhcmd1bWVudHMubGVuZ3RoID4gMiA/IGFyZ3VtZW50c1syXSA6IHVuZGVmaW5lZCk7XG4gICAgfSxcbiAgICBzZXRVaW50MTY6IGZ1bmN0aW9uIHNldFVpbnQxNihieXRlT2Zmc2V0LCB2YWx1ZSAvKiAsIGxpdHRsZUVuZGlhbiAqLykge1xuICAgICAgc2V0KHRoaXMsIDIsIGJ5dGVPZmZzZXQsIHBhY2tJbnQxNiwgdmFsdWUsIGFyZ3VtZW50cy5sZW5ndGggPiAyID8gYXJndW1lbnRzWzJdIDogdW5kZWZpbmVkKTtcbiAgICB9LFxuICAgIHNldEludDMyOiBmdW5jdGlvbiBzZXRJbnQzMihieXRlT2Zmc2V0LCB2YWx1ZSAvKiAsIGxpdHRsZUVuZGlhbiAqLykge1xuICAgICAgc2V0KHRoaXMsIDQsIGJ5dGVPZmZzZXQsIHBhY2tJbnQzMiwgdmFsdWUsIGFyZ3VtZW50cy5sZW5ndGggPiAyID8gYXJndW1lbnRzWzJdIDogdW5kZWZpbmVkKTtcbiAgICB9LFxuICAgIHNldFVpbnQzMjogZnVuY3Rpb24gc2V0VWludDMyKGJ5dGVPZmZzZXQsIHZhbHVlIC8qICwgbGl0dGxlRW5kaWFuICovKSB7XG4gICAgICBzZXQodGhpcywgNCwgYnl0ZU9mZnNldCwgcGFja0ludDMyLCB2YWx1ZSwgYXJndW1lbnRzLmxlbmd0aCA+IDIgPyBhcmd1bWVudHNbMl0gOiB1bmRlZmluZWQpO1xuICAgIH0sXG4gICAgc2V0RmxvYXQzMjogZnVuY3Rpb24gc2V0RmxvYXQzMihieXRlT2Zmc2V0LCB2YWx1ZSAvKiAsIGxpdHRsZUVuZGlhbiAqLykge1xuICAgICAgc2V0KHRoaXMsIDQsIGJ5dGVPZmZzZXQsIHBhY2tGbG9hdDMyLCB2YWx1ZSwgYXJndW1lbnRzLmxlbmd0aCA+IDIgPyBhcmd1bWVudHNbMl0gOiB1bmRlZmluZWQpO1xuICAgIH0sXG4gICAgc2V0RmxvYXQ2NDogZnVuY3Rpb24gc2V0RmxvYXQ2NChieXRlT2Zmc2V0LCB2YWx1ZSAvKiAsIGxpdHRsZUVuZGlhbiAqLykge1xuICAgICAgc2V0KHRoaXMsIDgsIGJ5dGVPZmZzZXQsIHBhY2tGbG9hdDY0LCB2YWx1ZSwgYXJndW1lbnRzLmxlbmd0aCA+IDIgPyBhcmd1bWVudHNbMl0gOiB1bmRlZmluZWQpO1xuICAgIH1cbiAgfSk7XG59IGVsc2Uge1xuICBpZiAoIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICBOYXRpdmVBcnJheUJ1ZmZlcigxKTtcbiAgfSkgfHwgIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICBuZXcgTmF0aXZlQXJyYXlCdWZmZXIoLTEpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLW5ld1xuICB9KSB8fCBmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgbmV3IE5hdGl2ZUFycmF5QnVmZmVyKCk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tbmV3XG4gICAgbmV3IE5hdGl2ZUFycmF5QnVmZmVyKDEuNSk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tbmV3XG4gICAgbmV3IE5hdGl2ZUFycmF5QnVmZmVyKE5hTik7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tbmV3XG4gICAgcmV0dXJuIE5hdGl2ZUFycmF5QnVmZmVyLm5hbWUgIT0gQVJSQVlfQlVGRkVSO1xuICB9KSkge1xuICAgICRBcnJheUJ1ZmZlciA9IGZ1bmN0aW9uIEFycmF5QnVmZmVyKGxlbmd0aCkge1xuICAgICAgYW5JbnN0YW5jZSh0aGlzLCAkQXJyYXlCdWZmZXIpO1xuICAgICAgcmV0dXJuIG5ldyBOYXRpdmVBcnJheUJ1ZmZlcih0b0luZGV4KGxlbmd0aCkpO1xuICAgIH07XG4gICAgdmFyIEFycmF5QnVmZmVyUHJvdG90eXBlID0gJEFycmF5QnVmZmVyW1BST1RPVFlQRV0gPSBOYXRpdmVBcnJheUJ1ZmZlcltQUk9UT1RZUEVdO1xuICAgIGZvciAodmFyIGtleXMgPSBnZXRPd25Qcm9wZXJ0eU5hbWVzKE5hdGl2ZUFycmF5QnVmZmVyKSwgaiA9IDAsIGtleTsga2V5cy5sZW5ndGggPiBqOykge1xuICAgICAgaWYgKCEoKGtleSA9IGtleXNbaisrXSkgaW4gJEFycmF5QnVmZmVyKSkge1xuICAgICAgICBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkoJEFycmF5QnVmZmVyLCBrZXksIE5hdGl2ZUFycmF5QnVmZmVyW2tleV0pO1xuICAgICAgfVxuICAgIH1cbiAgICBBcnJheUJ1ZmZlclByb3RvdHlwZS5jb25zdHJ1Y3RvciA9ICRBcnJheUJ1ZmZlcjtcbiAgfVxuXG4gIC8vIFdlYktpdCBidWcgLSB0aGUgc2FtZSBwYXJlbnQgcHJvdG90eXBlIGZvciB0eXBlZCBhcnJheXMgYW5kIGRhdGEgdmlld1xuICBpZiAoc2V0UHJvdG90eXBlT2YgJiYgZ2V0UHJvdG90eXBlT2YoJERhdGFWaWV3UHJvdG90eXBlKSAhPT0gT2JqZWN0UHJvdG90eXBlKSB7XG4gICAgc2V0UHJvdG90eXBlT2YoJERhdGFWaWV3UHJvdG90eXBlLCBPYmplY3RQcm90b3R5cGUpO1xuICB9XG5cbiAgLy8gaU9TIFNhZmFyaSA3LnggYnVnXG4gIHZhciB0ZXN0VmlldyA9IG5ldyAkRGF0YVZpZXcobmV3ICRBcnJheUJ1ZmZlcigyKSk7XG4gIHZhciBuYXRpdmVTZXRJbnQ4ID0gJERhdGFWaWV3UHJvdG90eXBlLnNldEludDg7XG4gIHRlc3RWaWV3LnNldEludDgoMCwgMjE0NzQ4MzY0OCk7XG4gIHRlc3RWaWV3LnNldEludDgoMSwgMjE0NzQ4MzY0OSk7XG4gIGlmICh0ZXN0Vmlldy5nZXRJbnQ4KDApIHx8ICF0ZXN0Vmlldy5nZXRJbnQ4KDEpKSByZWRlZmluZUFsbCgkRGF0YVZpZXdQcm90b3R5cGUsIHtcbiAgICBzZXRJbnQ4OiBmdW5jdGlvbiBzZXRJbnQ4KGJ5dGVPZmZzZXQsIHZhbHVlKSB7XG4gICAgICBuYXRpdmVTZXRJbnQ4LmNhbGwodGhpcywgYnl0ZU9mZnNldCwgdmFsdWUgPDwgMjQgPj4gMjQpO1xuICAgIH0sXG4gICAgc2V0VWludDg6IGZ1bmN0aW9uIHNldFVpbnQ4KGJ5dGVPZmZzZXQsIHZhbHVlKSB7XG4gICAgICBuYXRpdmVTZXRJbnQ4LmNhbGwodGhpcywgYnl0ZU9mZnNldCwgdmFsdWUgPDwgMjQgPj4gMjQpO1xuICAgIH1cbiAgfSwgeyB1bnNhZmU6IHRydWUgfSk7XG59XG5cbnNldFRvU3RyaW5nVGFnKCRBcnJheUJ1ZmZlciwgQVJSQVlfQlVGRkVSKTtcbnNldFRvU3RyaW5nVGFnKCREYXRhVmlldywgREFUQV9WSUVXKTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIEFycmF5QnVmZmVyOiAkQXJyYXlCdWZmZXIsXG4gIERhdGFWaWV3OiAkRGF0YVZpZXdcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tb2JqZWN0Jyk7XG52YXIgdG9BYnNvbHV0ZUluZGV4ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWFic29sdXRlLWluZGV4Jyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tbGVuZ3RoJyk7XG5cbnZhciBtaW4gPSBNYXRoLm1pbjtcblxuLy8gYEFycmF5LnByb3RvdHlwZS5jb3B5V2l0aGluYCBtZXRob2QgaW1wbGVtZW50YXRpb25cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLmNvcHl3aXRoaW5cbm1vZHVsZS5leHBvcnRzID0gW10uY29weVdpdGhpbiB8fCBmdW5jdGlvbiBjb3B5V2l0aGluKHRhcmdldCAvKiA9IDAgKi8sIHN0YXJ0IC8qID0gMCwgZW5kID0gQGxlbmd0aCAqLykge1xuICB2YXIgTyA9IHRvT2JqZWN0KHRoaXMpO1xuICB2YXIgbGVuID0gdG9MZW5ndGgoTy5sZW5ndGgpO1xuICB2YXIgdG8gPSB0b0Fic29sdXRlSW5kZXgodGFyZ2V0LCBsZW4pO1xuICB2YXIgZnJvbSA9IHRvQWJzb2x1dGVJbmRleChzdGFydCwgbGVuKTtcbiAgdmFyIGVuZCA9IGFyZ3VtZW50cy5sZW5ndGggPiAyID8gYXJndW1lbnRzWzJdIDogdW5kZWZpbmVkO1xuICB2YXIgY291bnQgPSBtaW4oKGVuZCA9PT0gdW5kZWZpbmVkID8gbGVuIDogdG9BYnNvbHV0ZUluZGV4KGVuZCwgbGVuKSkgLSBmcm9tLCBsZW4gLSB0byk7XG4gIHZhciBpbmMgPSAxO1xuICBpZiAoZnJvbSA8IHRvICYmIHRvIDwgZnJvbSArIGNvdW50KSB7XG4gICAgaW5jID0gLTE7XG4gICAgZnJvbSArPSBjb3VudCAtIDE7XG4gICAgdG8gKz0gY291bnQgLSAxO1xuICB9XG4gIHdoaWxlIChjb3VudC0tID4gMCkge1xuICAgIGlmIChmcm9tIGluIE8pIE9bdG9dID0gT1tmcm9tXTtcbiAgICBlbHNlIGRlbGV0ZSBPW3RvXTtcbiAgICB0byArPSBpbmM7XG4gICAgZnJvbSArPSBpbmM7XG4gIH0gcmV0dXJuIE87XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLW9iamVjdCcpO1xudmFyIHRvQWJzb2x1dGVJbmRleCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1hYnNvbHV0ZS1pbmRleCcpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWxlbmd0aCcpO1xuXG4vLyBgQXJyYXkucHJvdG90eXBlLmZpbGxgIG1ldGhvZCBpbXBsZW1lbnRhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUuZmlsbFxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBmaWxsKHZhbHVlIC8qICwgc3RhcnQgPSAwLCBlbmQgPSBAbGVuZ3RoICovKSB7XG4gIHZhciBPID0gdG9PYmplY3QodGhpcyk7XG4gIHZhciBsZW5ndGggPSB0b0xlbmd0aChPLmxlbmd0aCk7XG4gIHZhciBhcmd1bWVudHNMZW5ndGggPSBhcmd1bWVudHMubGVuZ3RoO1xuICB2YXIgaW5kZXggPSB0b0Fic29sdXRlSW5kZXgoYXJndW1lbnRzTGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCwgbGVuZ3RoKTtcbiAgdmFyIGVuZCA9IGFyZ3VtZW50c0xlbmd0aCA+IDIgPyBhcmd1bWVudHNbMl0gOiB1bmRlZmluZWQ7XG4gIHZhciBlbmRQb3MgPSBlbmQgPT09IHVuZGVmaW5lZCA/IGxlbmd0aCA6IHRvQWJzb2x1dGVJbmRleChlbmQsIGxlbmd0aCk7XG4gIHdoaWxlIChlbmRQb3MgPiBpbmRleCkgT1tpbmRleCsrXSA9IHZhbHVlO1xuICByZXR1cm4gTztcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJGZvckVhY2ggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktaXRlcmF0aW9uJykuZm9yRWFjaDtcbnZhciBhcnJheU1ldGhvZElzU3RyaWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LW1ldGhvZC1pcy1zdHJpY3QnKTtcbnZhciBhcnJheU1ldGhvZFVzZXNUb0xlbmd0aCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1tZXRob2QtdXNlcy10by1sZW5ndGgnKTtcblxudmFyIFNUUklDVF9NRVRIT0QgPSBhcnJheU1ldGhvZElzU3RyaWN0KCdmb3JFYWNoJyk7XG52YXIgVVNFU19UT19MRU5HVEggPSBhcnJheU1ldGhvZFVzZXNUb0xlbmd0aCgnZm9yRWFjaCcpO1xuXG4vLyBgQXJyYXkucHJvdG90eXBlLmZvckVhY2hgIG1ldGhvZCBpbXBsZW1lbnRhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUuZm9yZWFjaFxubW9kdWxlLmV4cG9ydHMgPSAoIVNUUklDVF9NRVRIT0QgfHwgIVVTRVNfVE9fTEVOR1RIKSA/IGZ1bmN0aW9uIGZvckVhY2goY2FsbGJhY2tmbiAvKiAsIHRoaXNBcmcgKi8pIHtcbiAgcmV0dXJuICRmb3JFYWNoKHRoaXMsIGNhbGxiYWNrZm4sIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbn0gOiBbXS5mb3JFYWNoO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGJpbmQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tYmluZC1jb250ZXh0Jyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tb2JqZWN0Jyk7XG52YXIgY2FsbFdpdGhTYWZlSXRlcmF0aW9uQ2xvc2luZyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jYWxsLXdpdGgtc2FmZS1pdGVyYXRpb24tY2xvc2luZycpO1xudmFyIGlzQXJyYXlJdGVyYXRvck1ldGhvZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1hcnJheS1pdGVyYXRvci1tZXRob2QnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1sZW5ndGgnKTtcbnZhciBjcmVhdGVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtcHJvcGVydHknKTtcbnZhciBnZXRJdGVyYXRvck1ldGhvZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nZXQtaXRlcmF0b3ItbWV0aG9kJyk7XG5cbi8vIGBBcnJheS5mcm9tYCBtZXRob2QgaW1wbGVtZW50YXRpb25cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkuZnJvbVxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBmcm9tKGFycmF5TGlrZSAvKiAsIG1hcGZuID0gdW5kZWZpbmVkLCB0aGlzQXJnID0gdW5kZWZpbmVkICovKSB7XG4gIHZhciBPID0gdG9PYmplY3QoYXJyYXlMaWtlKTtcbiAgdmFyIEMgPSB0eXBlb2YgdGhpcyA9PSAnZnVuY3Rpb24nID8gdGhpcyA6IEFycmF5O1xuICB2YXIgYXJndW1lbnRzTGVuZ3RoID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgdmFyIG1hcGZuID0gYXJndW1lbnRzTGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZDtcbiAgdmFyIG1hcHBpbmcgPSBtYXBmbiAhPT0gdW5kZWZpbmVkO1xuICB2YXIgaXRlcmF0b3JNZXRob2QgPSBnZXRJdGVyYXRvck1ldGhvZChPKTtcbiAgdmFyIGluZGV4ID0gMDtcbiAgdmFyIGxlbmd0aCwgcmVzdWx0LCBzdGVwLCBpdGVyYXRvciwgbmV4dCwgdmFsdWU7XG4gIGlmIChtYXBwaW5nKSBtYXBmbiA9IGJpbmQobWFwZm4sIGFyZ3VtZW50c0xlbmd0aCA+IDIgPyBhcmd1bWVudHNbMl0gOiB1bmRlZmluZWQsIDIpO1xuICAvLyBpZiB0aGUgdGFyZ2V0IGlzIG5vdCBpdGVyYWJsZSBvciBpdCdzIGFuIGFycmF5IHdpdGggdGhlIGRlZmF1bHQgaXRlcmF0b3IgLSB1c2UgYSBzaW1wbGUgY2FzZVxuICBpZiAoaXRlcmF0b3JNZXRob2QgIT0gdW5kZWZpbmVkICYmICEoQyA9PSBBcnJheSAmJiBpc0FycmF5SXRlcmF0b3JNZXRob2QoaXRlcmF0b3JNZXRob2QpKSkge1xuICAgIGl0ZXJhdG9yID0gaXRlcmF0b3JNZXRob2QuY2FsbChPKTtcbiAgICBuZXh0ID0gaXRlcmF0b3IubmV4dDtcbiAgICByZXN1bHQgPSBuZXcgQygpO1xuICAgIGZvciAoOyEoc3RlcCA9IG5leHQuY2FsbChpdGVyYXRvcikpLmRvbmU7IGluZGV4KyspIHtcbiAgICAgIHZhbHVlID0gbWFwcGluZyA/IGNhbGxXaXRoU2FmZUl0ZXJhdGlvbkNsb3NpbmcoaXRlcmF0b3IsIG1hcGZuLCBbc3RlcC52YWx1ZSwgaW5kZXhdLCB0cnVlKSA6IHN0ZXAudmFsdWU7XG4gICAgICBjcmVhdGVQcm9wZXJ0eShyZXN1bHQsIGluZGV4LCB2YWx1ZSk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGxlbmd0aCA9IHRvTGVuZ3RoKE8ubGVuZ3RoKTtcbiAgICByZXN1bHQgPSBuZXcgQyhsZW5ndGgpO1xuICAgIGZvciAoO2xlbmd0aCA+IGluZGV4OyBpbmRleCsrKSB7XG4gICAgICB2YWx1ZSA9IG1hcHBpbmcgPyBtYXBmbihPW2luZGV4XSwgaW5kZXgpIDogT1tpbmRleF07XG4gICAgICBjcmVhdGVQcm9wZXJ0eShyZXN1bHQsIGluZGV4LCB2YWx1ZSk7XG4gICAgfVxuICB9XG4gIHJlc3VsdC5sZW5ndGggPSBpbmRleDtcbiAgcmV0dXJuIHJlc3VsdDtcbn07XG4iLCJ2YXIgdG9JbmRleGVkT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWluZGV4ZWQtb2JqZWN0Jyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tbGVuZ3RoJyk7XG52YXIgdG9BYnNvbHV0ZUluZGV4ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWFic29sdXRlLWluZGV4Jyk7XG5cbi8vIGBBcnJheS5wcm90b3R5cGUueyBpbmRleE9mLCBpbmNsdWRlcyB9YCBtZXRob2RzIGltcGxlbWVudGF0aW9uXG52YXIgY3JlYXRlTWV0aG9kID0gZnVuY3Rpb24gKElTX0lOQ0xVREVTKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoJHRoaXMsIGVsLCBmcm9tSW5kZXgpIHtcbiAgICB2YXIgTyA9IHRvSW5kZXhlZE9iamVjdCgkdGhpcyk7XG4gICAgdmFyIGxlbmd0aCA9IHRvTGVuZ3RoKE8ubGVuZ3RoKTtcbiAgICB2YXIgaW5kZXggPSB0b0Fic29sdXRlSW5kZXgoZnJvbUluZGV4LCBsZW5ndGgpO1xuICAgIHZhciB2YWx1ZTtcbiAgICAvLyBBcnJheSNpbmNsdWRlcyB1c2VzIFNhbWVWYWx1ZVplcm8gZXF1YWxpdHkgYWxnb3JpdGhtXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZVxuICAgIGlmIChJU19JTkNMVURFUyAmJiBlbCAhPSBlbCkgd2hpbGUgKGxlbmd0aCA+IGluZGV4KSB7XG4gICAgICB2YWx1ZSA9IE9baW5kZXgrK107XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlXG4gICAgICBpZiAodmFsdWUgIT0gdmFsdWUpIHJldHVybiB0cnVlO1xuICAgIC8vIEFycmF5I2luZGV4T2YgaWdub3JlcyBob2xlcywgQXJyYXkjaW5jbHVkZXMgLSBub3RcbiAgICB9IGVsc2UgZm9yICg7bGVuZ3RoID4gaW5kZXg7IGluZGV4KyspIHtcbiAgICAgIGlmICgoSVNfSU5DTFVERVMgfHwgaW5kZXggaW4gTykgJiYgT1tpbmRleF0gPT09IGVsKSByZXR1cm4gSVNfSU5DTFVERVMgfHwgaW5kZXggfHwgMDtcbiAgICB9IHJldHVybiAhSVNfSU5DTFVERVMgJiYgLTE7XG4gIH07XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgLy8gYEFycmF5LnByb3RvdHlwZS5pbmNsdWRlc2AgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLmluY2x1ZGVzXG4gIGluY2x1ZGVzOiBjcmVhdGVNZXRob2QodHJ1ZSksXG4gIC8vIGBBcnJheS5wcm90b3R5cGUuaW5kZXhPZmAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLmluZGV4b2ZcbiAgaW5kZXhPZjogY3JlYXRlTWV0aG9kKGZhbHNlKVxufTtcbiIsInZhciBiaW5kID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLWJpbmQtY29udGV4dCcpO1xudmFyIEluZGV4ZWRPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaW5kZXhlZC1vYmplY3QnKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1vYmplY3QnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1sZW5ndGgnKTtcbnZhciBhcnJheVNwZWNpZXNDcmVhdGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktc3BlY2llcy1jcmVhdGUnKTtcblxudmFyIHB1c2ggPSBbXS5wdXNoO1xuXG4vLyBgQXJyYXkucHJvdG90eXBlLnsgZm9yRWFjaCwgbWFwLCBmaWx0ZXIsIHNvbWUsIGV2ZXJ5LCBmaW5kLCBmaW5kSW5kZXgsIGZpbHRlck91dCB9YCBtZXRob2RzIGltcGxlbWVudGF0aW9uXG52YXIgY3JlYXRlTWV0aG9kID0gZnVuY3Rpb24gKFRZUEUpIHtcbiAgdmFyIElTX01BUCA9IFRZUEUgPT0gMTtcbiAgdmFyIElTX0ZJTFRFUiA9IFRZUEUgPT0gMjtcbiAgdmFyIElTX1NPTUUgPSBUWVBFID09IDM7XG4gIHZhciBJU19FVkVSWSA9IFRZUEUgPT0gNDtcbiAgdmFyIElTX0ZJTkRfSU5ERVggPSBUWVBFID09IDY7XG4gIHZhciBJU19GSUxURVJfT1VUID0gVFlQRSA9PSA3O1xuICB2YXIgTk9fSE9MRVMgPSBUWVBFID09IDUgfHwgSVNfRklORF9JTkRFWDtcbiAgcmV0dXJuIGZ1bmN0aW9uICgkdGhpcywgY2FsbGJhY2tmbiwgdGhhdCwgc3BlY2lmaWNDcmVhdGUpIHtcbiAgICB2YXIgTyA9IHRvT2JqZWN0KCR0aGlzKTtcbiAgICB2YXIgc2VsZiA9IEluZGV4ZWRPYmplY3QoTyk7XG4gICAgdmFyIGJvdW5kRnVuY3Rpb24gPSBiaW5kKGNhbGxiYWNrZm4sIHRoYXQsIDMpO1xuICAgIHZhciBsZW5ndGggPSB0b0xlbmd0aChzZWxmLmxlbmd0aCk7XG4gICAgdmFyIGluZGV4ID0gMDtcbiAgICB2YXIgY3JlYXRlID0gc3BlY2lmaWNDcmVhdGUgfHwgYXJyYXlTcGVjaWVzQ3JlYXRlO1xuICAgIHZhciB0YXJnZXQgPSBJU19NQVAgPyBjcmVhdGUoJHRoaXMsIGxlbmd0aCkgOiBJU19GSUxURVIgfHwgSVNfRklMVEVSX09VVCA/IGNyZWF0ZSgkdGhpcywgMCkgOiB1bmRlZmluZWQ7XG4gICAgdmFyIHZhbHVlLCByZXN1bHQ7XG4gICAgZm9yICg7bGVuZ3RoID4gaW5kZXg7IGluZGV4KyspIGlmIChOT19IT0xFUyB8fCBpbmRleCBpbiBzZWxmKSB7XG4gICAgICB2YWx1ZSA9IHNlbGZbaW5kZXhdO1xuICAgICAgcmVzdWx0ID0gYm91bmRGdW5jdGlvbih2YWx1ZSwgaW5kZXgsIE8pO1xuICAgICAgaWYgKFRZUEUpIHtcbiAgICAgICAgaWYgKElTX01BUCkgdGFyZ2V0W2luZGV4XSA9IHJlc3VsdDsgLy8gbWFwXG4gICAgICAgIGVsc2UgaWYgKHJlc3VsdCkgc3dpdGNoIChUWVBFKSB7XG4gICAgICAgICAgY2FzZSAzOiByZXR1cm4gdHJ1ZTsgICAgICAgICAgICAgIC8vIHNvbWVcbiAgICAgICAgICBjYXNlIDU6IHJldHVybiB2YWx1ZTsgICAgICAgICAgICAgLy8gZmluZFxuICAgICAgICAgIGNhc2UgNjogcmV0dXJuIGluZGV4OyAgICAgICAgICAgICAvLyBmaW5kSW5kZXhcbiAgICAgICAgICBjYXNlIDI6IHB1c2guY2FsbCh0YXJnZXQsIHZhbHVlKTsgLy8gZmlsdGVyXG4gICAgICAgIH0gZWxzZSBzd2l0Y2ggKFRZUEUpIHtcbiAgICAgICAgICBjYXNlIDQ6IHJldHVybiBmYWxzZTsgICAgICAgICAgICAgLy8gZXZlcnlcbiAgICAgICAgICBjYXNlIDc6IHB1c2guY2FsbCh0YXJnZXQsIHZhbHVlKTsgLy8gZmlsdGVyT3V0XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIElTX0ZJTkRfSU5ERVggPyAtMSA6IElTX1NPTUUgfHwgSVNfRVZFUlkgPyBJU19FVkVSWSA6IHRhcmdldDtcbiAgfTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICAvLyBgQXJyYXkucHJvdG90eXBlLmZvckVhY2hgIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5mb3JlYWNoXG4gIGZvckVhY2g6IGNyZWF0ZU1ldGhvZCgwKSxcbiAgLy8gYEFycmF5LnByb3RvdHlwZS5tYXBgIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5tYXBcbiAgbWFwOiBjcmVhdGVNZXRob2QoMSksXG4gIC8vIGBBcnJheS5wcm90b3R5cGUuZmlsdGVyYCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUuZmlsdGVyXG4gIGZpbHRlcjogY3JlYXRlTWV0aG9kKDIpLFxuICAvLyBgQXJyYXkucHJvdG90eXBlLnNvbWVgIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5zb21lXG4gIHNvbWU6IGNyZWF0ZU1ldGhvZCgzKSxcbiAgLy8gYEFycmF5LnByb3RvdHlwZS5ldmVyeWAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLmV2ZXJ5XG4gIGV2ZXJ5OiBjcmVhdGVNZXRob2QoNCksXG4gIC8vIGBBcnJheS5wcm90b3R5cGUuZmluZGAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLmZpbmRcbiAgZmluZDogY3JlYXRlTWV0aG9kKDUpLFxuICAvLyBgQXJyYXkucHJvdG90eXBlLmZpbmRJbmRleGAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLmZpbmRJbmRleFxuICBmaW5kSW5kZXg6IGNyZWF0ZU1ldGhvZCg2KSxcbiAgLy8gYEFycmF5LnByb3RvdHlwZS5maWx0ZXJPdXRgIG1ldGhvZFxuICAvLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1hcnJheS1maWx0ZXJpbmdcbiAgZmlsdGVyT3V0OiBjcmVhdGVNZXRob2QoNylcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgdG9JbmRleGVkT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWluZGV4ZWQtb2JqZWN0Jyk7XG52YXIgdG9JbnRlZ2VyID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWludGVnZXInKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1sZW5ndGgnKTtcbnZhciBhcnJheU1ldGhvZElzU3RyaWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LW1ldGhvZC1pcy1zdHJpY3QnKTtcbnZhciBhcnJheU1ldGhvZFVzZXNUb0xlbmd0aCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1tZXRob2QtdXNlcy10by1sZW5ndGgnKTtcblxudmFyIG1pbiA9IE1hdGgubWluO1xudmFyIG5hdGl2ZUxhc3RJbmRleE9mID0gW10ubGFzdEluZGV4T2Y7XG52YXIgTkVHQVRJVkVfWkVSTyA9ICEhbmF0aXZlTGFzdEluZGV4T2YgJiYgMSAvIFsxXS5sYXN0SW5kZXhPZigxLCAtMCkgPCAwO1xudmFyIFNUUklDVF9NRVRIT0QgPSBhcnJheU1ldGhvZElzU3RyaWN0KCdsYXN0SW5kZXhPZicpO1xuLy8gRm9yIHByZXZlbnRpbmcgcG9zc2libGUgYWxtb3N0IGluZmluaXRlIGxvb3AgaW4gbm9uLXN0YW5kYXJkIGltcGxlbWVudGF0aW9ucywgdGVzdCB0aGUgZm9yd2FyZCB2ZXJzaW9uIG9mIHRoZSBtZXRob2RcbnZhciBVU0VTX1RPX0xFTkdUSCA9IGFycmF5TWV0aG9kVXNlc1RvTGVuZ3RoKCdpbmRleE9mJywgeyBBQ0NFU1NPUlM6IHRydWUsIDE6IDAgfSk7XG52YXIgRk9SQ0VEID0gTkVHQVRJVkVfWkVSTyB8fCAhU1RSSUNUX01FVEhPRCB8fCAhVVNFU19UT19MRU5HVEg7XG5cbi8vIGBBcnJheS5wcm90b3R5cGUubGFzdEluZGV4T2ZgIG1ldGhvZCBpbXBsZW1lbnRhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUubGFzdGluZGV4b2Zcbm1vZHVsZS5leHBvcnRzID0gRk9SQ0VEID8gZnVuY3Rpb24gbGFzdEluZGV4T2Yoc2VhcmNoRWxlbWVudCAvKiAsIGZyb21JbmRleCA9IEBbKi0xXSAqLykge1xuICAvLyBjb252ZXJ0IC0wIHRvICswXG4gIGlmIChORUdBVElWRV9aRVJPKSByZXR1cm4gbmF0aXZlTGFzdEluZGV4T2YuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCAwO1xuICB2YXIgTyA9IHRvSW5kZXhlZE9iamVjdCh0aGlzKTtcbiAgdmFyIGxlbmd0aCA9IHRvTGVuZ3RoKE8ubGVuZ3RoKTtcbiAgdmFyIGluZGV4ID0gbGVuZ3RoIC0gMTtcbiAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPiAxKSBpbmRleCA9IG1pbihpbmRleCwgdG9JbnRlZ2VyKGFyZ3VtZW50c1sxXSkpO1xuICBpZiAoaW5kZXggPCAwKSBpbmRleCA9IGxlbmd0aCArIGluZGV4O1xuICBmb3IgKDtpbmRleCA+PSAwOyBpbmRleC0tKSBpZiAoaW5kZXggaW4gTyAmJiBPW2luZGV4XSA9PT0gc2VhcmNoRWxlbWVudCkgcmV0dXJuIGluZGV4IHx8IDA7XG4gIHJldHVybiAtMTtcbn0gOiBuYXRpdmVMYXN0SW5kZXhPZjtcbiIsInZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xudmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xudmFyIFY4X1ZFUlNJT04gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZW5naW5lLXY4LXZlcnNpb24nKTtcblxudmFyIFNQRUNJRVMgPSB3ZWxsS25vd25TeW1ib2woJ3NwZWNpZXMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoTUVUSE9EX05BTUUpIHtcbiAgLy8gV2UgY2FuJ3QgdXNlIHRoaXMgZmVhdHVyZSBkZXRlY3Rpb24gaW4gVjggc2luY2UgaXQgY2F1c2VzXG4gIC8vIGRlb3B0aW1pemF0aW9uIGFuZCBzZXJpb3VzIHBlcmZvcm1hbmNlIGRlZ3JhZGF0aW9uXG4gIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS96bG9pcm9jay9jb3JlLWpzL2lzc3Vlcy82NzdcbiAgcmV0dXJuIFY4X1ZFUlNJT04gPj0gNTEgfHwgIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgYXJyYXkgPSBbXTtcbiAgICB2YXIgY29uc3RydWN0b3IgPSBhcnJheS5jb25zdHJ1Y3RvciA9IHt9O1xuICAgIGNvbnN0cnVjdG9yW1NQRUNJRVNdID0gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIHsgZm9vOiAxIH07XG4gICAgfTtcbiAgICByZXR1cm4gYXJyYXlbTUVUSE9EX05BTUVdKEJvb2xlYW4pLmZvbyAhPT0gMTtcbiAgfSk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKE1FVEhPRF9OQU1FLCBhcmd1bWVudCkge1xuICB2YXIgbWV0aG9kID0gW11bTUVUSE9EX05BTUVdO1xuICByZXR1cm4gISFtZXRob2QgJiYgZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11c2VsZXNzLWNhbGwsbm8tdGhyb3ctbGl0ZXJhbFxuICAgIG1ldGhvZC5jYWxsKG51bGwsIGFyZ3VtZW50IHx8IGZ1bmN0aW9uICgpIHsgdGhyb3cgMTsgfSwgMSk7XG4gIH0pO1xufTtcbiIsInZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZXNjcmlwdG9ycycpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG52YXIgaGFzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hhcycpO1xuXG52YXIgZGVmaW5lUHJvcGVydHkgPSBPYmplY3QuZGVmaW5lUHJvcGVydHk7XG52YXIgY2FjaGUgPSB7fTtcblxudmFyIHRocm93ZXIgPSBmdW5jdGlvbiAoaXQpIHsgdGhyb3cgaXQ7IH07XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKE1FVEhPRF9OQU1FLCBvcHRpb25zKSB7XG4gIGlmIChoYXMoY2FjaGUsIE1FVEhPRF9OQU1FKSkgcmV0dXJuIGNhY2hlW01FVEhPRF9OQU1FXTtcbiAgaWYgKCFvcHRpb25zKSBvcHRpb25zID0ge307XG4gIHZhciBtZXRob2QgPSBbXVtNRVRIT0RfTkFNRV07XG4gIHZhciBBQ0NFU1NPUlMgPSBoYXMob3B0aW9ucywgJ0FDQ0VTU09SUycpID8gb3B0aW9ucy5BQ0NFU1NPUlMgOiBmYWxzZTtcbiAgdmFyIGFyZ3VtZW50MCA9IGhhcyhvcHRpb25zLCAwKSA/IG9wdGlvbnNbMF0gOiB0aHJvd2VyO1xuICB2YXIgYXJndW1lbnQxID0gaGFzKG9wdGlvbnMsIDEpID8gb3B0aW9uc1sxXSA6IHVuZGVmaW5lZDtcblxuICByZXR1cm4gY2FjaGVbTUVUSE9EX05BTUVdID0gISFtZXRob2QgJiYgIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoQUNDRVNTT1JTICYmICFERVNDUklQVE9SUykgcmV0dXJuIHRydWU7XG4gICAgdmFyIE8gPSB7IGxlbmd0aDogLTEgfTtcblxuICAgIGlmIChBQ0NFU1NPUlMpIGRlZmluZVByb3BlcnR5KE8sIDEsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiB0aHJvd2VyIH0pO1xuICAgIGVsc2UgT1sxXSA9IDE7XG5cbiAgICBtZXRob2QuY2FsbChPLCBhcmd1bWVudDAsIGFyZ3VtZW50MSk7XG4gIH0pO1xufTtcbiIsInZhciBhRnVuY3Rpb24gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYS1mdW5jdGlvbicpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLW9iamVjdCcpO1xudmFyIEluZGV4ZWRPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaW5kZXhlZC1vYmplY3QnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1sZW5ndGgnKTtcblxuLy8gYEFycmF5LnByb3RvdHlwZS57IHJlZHVjZSwgcmVkdWNlUmlnaHQgfWAgbWV0aG9kcyBpbXBsZW1lbnRhdGlvblxudmFyIGNyZWF0ZU1ldGhvZCA9IGZ1bmN0aW9uIChJU19SSUdIVCkge1xuICByZXR1cm4gZnVuY3Rpb24gKHRoYXQsIGNhbGxiYWNrZm4sIGFyZ3VtZW50c0xlbmd0aCwgbWVtbykge1xuICAgIGFGdW5jdGlvbihjYWxsYmFja2ZuKTtcbiAgICB2YXIgTyA9IHRvT2JqZWN0KHRoYXQpO1xuICAgIHZhciBzZWxmID0gSW5kZXhlZE9iamVjdChPKTtcbiAgICB2YXIgbGVuZ3RoID0gdG9MZW5ndGgoTy5sZW5ndGgpO1xuICAgIHZhciBpbmRleCA9IElTX1JJR0hUID8gbGVuZ3RoIC0gMSA6IDA7XG4gICAgdmFyIGkgPSBJU19SSUdIVCA/IC0xIDogMTtcbiAgICBpZiAoYXJndW1lbnRzTGVuZ3RoIDwgMikgd2hpbGUgKHRydWUpIHtcbiAgICAgIGlmIChpbmRleCBpbiBzZWxmKSB7XG4gICAgICAgIG1lbW8gPSBzZWxmW2luZGV4XTtcbiAgICAgICAgaW5kZXggKz0gaTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICBpbmRleCArPSBpO1xuICAgICAgaWYgKElTX1JJR0hUID8gaW5kZXggPCAwIDogbGVuZ3RoIDw9IGluZGV4KSB7XG4gICAgICAgIHRocm93IFR5cGVFcnJvcignUmVkdWNlIG9mIGVtcHR5IGFycmF5IHdpdGggbm8gaW5pdGlhbCB2YWx1ZScpO1xuICAgICAgfVxuICAgIH1cbiAgICBmb3IgKDtJU19SSUdIVCA/IGluZGV4ID49IDAgOiBsZW5ndGggPiBpbmRleDsgaW5kZXggKz0gaSkgaWYgKGluZGV4IGluIHNlbGYpIHtcbiAgICAgIG1lbW8gPSBjYWxsYmFja2ZuKG1lbW8sIHNlbGZbaW5kZXhdLCBpbmRleCwgTyk7XG4gICAgfVxuICAgIHJldHVybiBtZW1vO1xuICB9O1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIC8vIGBBcnJheS5wcm90b3R5cGUucmVkdWNlYCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUucmVkdWNlXG4gIGxlZnQ6IGNyZWF0ZU1ldGhvZChmYWxzZSksXG4gIC8vIGBBcnJheS5wcm90b3R5cGUucmVkdWNlUmlnaHRgIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5yZWR1Y2VyaWdodFxuICByaWdodDogY3JlYXRlTWV0aG9kKHRydWUpXG59O1xuIiwidmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLW9iamVjdCcpO1xudmFyIGlzQXJyYXkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtYXJyYXknKTtcbnZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcblxudmFyIFNQRUNJRVMgPSB3ZWxsS25vd25TeW1ib2woJ3NwZWNpZXMnKTtcblxuLy8gYEFycmF5U3BlY2llc0NyZWF0ZWAgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5c3BlY2llc2NyZWF0ZVxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAob3JpZ2luYWxBcnJheSwgbGVuZ3RoKSB7XG4gIHZhciBDO1xuICBpZiAoaXNBcnJheShvcmlnaW5hbEFycmF5KSkge1xuICAgIEMgPSBvcmlnaW5hbEFycmF5LmNvbnN0cnVjdG9yO1xuICAgIC8vIGNyb3NzLXJlYWxtIGZhbGxiYWNrXG4gICAgaWYgKHR5cGVvZiBDID09ICdmdW5jdGlvbicgJiYgKEMgPT09IEFycmF5IHx8IGlzQXJyYXkoQy5wcm90b3R5cGUpKSkgQyA9IHVuZGVmaW5lZDtcbiAgICBlbHNlIGlmIChpc09iamVjdChDKSkge1xuICAgICAgQyA9IENbU1BFQ0lFU107XG4gICAgICBpZiAoQyA9PT0gbnVsbCkgQyA9IHVuZGVmaW5lZDtcbiAgICB9XG4gIH0gcmV0dXJuIG5ldyAoQyA9PT0gdW5kZWZpbmVkID8gQXJyYXkgOiBDKShsZW5ndGggPT09IDAgPyAwIDogbGVuZ3RoKTtcbn07XG4iLCJ2YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4tb2JqZWN0Jyk7XG52YXIgaXRlcmF0b3JDbG9zZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pdGVyYXRvci1jbG9zZScpO1xuXG4vLyBjYWxsIHNvbWV0aGluZyBvbiBpdGVyYXRvciBzdGVwIHdpdGggc2FmZSBjbG9zaW5nIG9uIGVycm9yXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdGVyYXRvciwgZm4sIHZhbHVlLCBFTlRSSUVTKSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIEVOVFJJRVMgPyBmbihhbk9iamVjdCh2YWx1ZSlbMF0sIHZhbHVlWzFdKSA6IGZuKHZhbHVlKTtcbiAgLy8gNy40LjYgSXRlcmF0b3JDbG9zZShpdGVyYXRvciwgY29tcGxldGlvbilcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBpdGVyYXRvckNsb3NlKGl0ZXJhdG9yKTtcbiAgICB0aHJvdyBlcnJvcjtcbiAgfVxufTtcbiIsInZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcblxudmFyIElURVJBVE9SID0gd2VsbEtub3duU3ltYm9sKCdpdGVyYXRvcicpO1xudmFyIFNBRkVfQ0xPU0lORyA9IGZhbHNlO1xuXG50cnkge1xuICB2YXIgY2FsbGVkID0gMDtcbiAgdmFyIGl0ZXJhdG9yV2l0aFJldHVybiA9IHtcbiAgICBuZXh0OiBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4geyBkb25lOiAhIWNhbGxlZCsrIH07XG4gICAgfSxcbiAgICAncmV0dXJuJzogZnVuY3Rpb24gKCkge1xuICAgICAgU0FGRV9DTE9TSU5HID0gdHJ1ZTtcbiAgICB9XG4gIH07XG4gIGl0ZXJhdG9yV2l0aFJldHVybltJVEVSQVRPUl0gPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby10aHJvdy1saXRlcmFsXG4gIEFycmF5LmZyb20oaXRlcmF0b3JXaXRoUmV0dXJuLCBmdW5jdGlvbiAoKSB7IHRocm93IDI7IH0pO1xufSBjYXRjaCAoZXJyb3IpIHsgLyogZW1wdHkgKi8gfVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChleGVjLCBTS0lQX0NMT1NJTkcpIHtcbiAgaWYgKCFTS0lQX0NMT1NJTkcgJiYgIVNBRkVfQ0xPU0lORykgcmV0dXJuIGZhbHNlO1xuICB2YXIgSVRFUkFUSU9OX1NVUFBPUlQgPSBmYWxzZTtcbiAgdHJ5IHtcbiAgICB2YXIgb2JqZWN0ID0ge307XG4gICAgb2JqZWN0W0lURVJBVE9SXSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIG5leHQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICByZXR1cm4geyBkb25lOiBJVEVSQVRJT05fU1VQUE9SVCA9IHRydWUgfTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9O1xuICAgIGV4ZWMob2JqZWN0KTtcbiAgfSBjYXRjaCAoZXJyb3IpIHsgLyogZW1wdHkgKi8gfVxuICByZXR1cm4gSVRFUkFUSU9OX1NVUFBPUlQ7XG59O1xuIiwidmFyIHRvU3RyaW5nID0ge30udG9TdHJpbmc7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiB0b1N0cmluZy5jYWxsKGl0KS5zbGljZSg4LCAtMSk7XG59O1xuIiwidmFyIFRPX1NUUklOR19UQUdfU1VQUE9SVCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1zdHJpbmctdGFnLXN1cHBvcnQnKTtcbnZhciBjbGFzc29mUmF3ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NsYXNzb2YtcmF3Jyk7XG52YXIgd2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sJyk7XG5cbnZhciBUT19TVFJJTkdfVEFHID0gd2VsbEtub3duU3ltYm9sKCd0b1N0cmluZ1RhZycpO1xuLy8gRVMzIHdyb25nIGhlcmVcbnZhciBDT1JSRUNUX0FSR1VNRU5UUyA9IGNsYXNzb2ZSYXcoZnVuY3Rpb24gKCkgeyByZXR1cm4gYXJndW1lbnRzOyB9KCkpID09ICdBcmd1bWVudHMnO1xuXG4vLyBmYWxsYmFjayBmb3IgSUUxMSBTY3JpcHQgQWNjZXNzIERlbmllZCBlcnJvclxudmFyIHRyeUdldCA9IGZ1bmN0aW9uIChpdCwga2V5KSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIGl0W2tleV07XG4gIH0gY2F0Y2ggKGVycm9yKSB7IC8qIGVtcHR5ICovIH1cbn07XG5cbi8vIGdldHRpbmcgdGFnIGZyb20gRVM2KyBgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZ2Bcbm1vZHVsZS5leHBvcnRzID0gVE9fU1RSSU5HX1RBR19TVVBQT1JUID8gY2xhc3NvZlJhdyA6IGZ1bmN0aW9uIChpdCkge1xuICB2YXIgTywgdGFnLCByZXN1bHQ7XG4gIHJldHVybiBpdCA9PT0gdW5kZWZpbmVkID8gJ1VuZGVmaW5lZCcgOiBpdCA9PT0gbnVsbCA/ICdOdWxsJ1xuICAgIC8vIEBAdG9TdHJpbmdUYWcgY2FzZVxuICAgIDogdHlwZW9mICh0YWcgPSB0cnlHZXQoTyA9IE9iamVjdChpdCksIFRPX1NUUklOR19UQUcpKSA9PSAnc3RyaW5nJyA/IHRhZ1xuICAgIC8vIGJ1aWx0aW5UYWcgY2FzZVxuICAgIDogQ09SUkVDVF9BUkdVTUVOVFMgPyBjbGFzc29mUmF3KE8pXG4gICAgLy8gRVMzIGFyZ3VtZW50cyBmYWxsYmFja1xuICAgIDogKHJlc3VsdCA9IGNsYXNzb2ZSYXcoTykpID09ICdPYmplY3QnICYmIHR5cGVvZiBPLmNhbGxlZSA9PSAnZnVuY3Rpb24nID8gJ0FyZ3VtZW50cycgOiByZXN1bHQ7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGRlZmluZVByb3BlcnR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1kZWZpbmUtcHJvcGVydHknKS5mO1xudmFyIGNyZWF0ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtY3JlYXRlJyk7XG52YXIgcmVkZWZpbmVBbGwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVkZWZpbmUtYWxsJyk7XG52YXIgYmluZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi1iaW5kLWNvbnRleHQnKTtcbnZhciBhbkluc3RhbmNlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLWluc3RhbmNlJyk7XG52YXIgaXRlcmF0ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pdGVyYXRlJyk7XG52YXIgZGVmaW5lSXRlcmF0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVmaW5lLWl0ZXJhdG9yJyk7XG52YXIgc2V0U3BlY2llcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zZXQtc3BlY2llcycpO1xudmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Rlc2NyaXB0b3JzJyk7XG52YXIgZmFzdEtleSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pbnRlcm5hbC1tZXRhZGF0YScpLmZhc3RLZXk7XG52YXIgSW50ZXJuYWxTdGF0ZU1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pbnRlcm5hbC1zdGF0ZScpO1xuXG52YXIgc2V0SW50ZXJuYWxTdGF0ZSA9IEludGVybmFsU3RhdGVNb2R1bGUuc2V0O1xudmFyIGludGVybmFsU3RhdGVHZXR0ZXJGb3IgPSBJbnRlcm5hbFN0YXRlTW9kdWxlLmdldHRlckZvcjtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGdldENvbnN0cnVjdG9yOiBmdW5jdGlvbiAod3JhcHBlciwgQ09OU1RSVUNUT1JfTkFNRSwgSVNfTUFQLCBBRERFUikge1xuICAgIHZhciBDID0gd3JhcHBlcihmdW5jdGlvbiAodGhhdCwgaXRlcmFibGUpIHtcbiAgICAgIGFuSW5zdGFuY2UodGhhdCwgQywgQ09OU1RSVUNUT1JfTkFNRSk7XG4gICAgICBzZXRJbnRlcm5hbFN0YXRlKHRoYXQsIHtcbiAgICAgICAgdHlwZTogQ09OU1RSVUNUT1JfTkFNRSxcbiAgICAgICAgaW5kZXg6IGNyZWF0ZShudWxsKSxcbiAgICAgICAgZmlyc3Q6IHVuZGVmaW5lZCxcbiAgICAgICAgbGFzdDogdW5kZWZpbmVkLFxuICAgICAgICBzaXplOiAwXG4gICAgICB9KTtcbiAgICAgIGlmICghREVTQ1JJUFRPUlMpIHRoYXQuc2l6ZSA9IDA7XG4gICAgICBpZiAoaXRlcmFibGUgIT0gdW5kZWZpbmVkKSBpdGVyYXRlKGl0ZXJhYmxlLCB0aGF0W0FEREVSXSwgeyB0aGF0OiB0aGF0LCBBU19FTlRSSUVTOiBJU19NQVAgfSk7XG4gICAgfSk7XG5cbiAgICB2YXIgZ2V0SW50ZXJuYWxTdGF0ZSA9IGludGVybmFsU3RhdGVHZXR0ZXJGb3IoQ09OU1RSVUNUT1JfTkFNRSk7XG5cbiAgICB2YXIgZGVmaW5lID0gZnVuY3Rpb24gKHRoYXQsIGtleSwgdmFsdWUpIHtcbiAgICAgIHZhciBzdGF0ZSA9IGdldEludGVybmFsU3RhdGUodGhhdCk7XG4gICAgICB2YXIgZW50cnkgPSBnZXRFbnRyeSh0aGF0LCBrZXkpO1xuICAgICAgdmFyIHByZXZpb3VzLCBpbmRleDtcbiAgICAgIC8vIGNoYW5nZSBleGlzdGluZyBlbnRyeVxuICAgICAgaWYgKGVudHJ5KSB7XG4gICAgICAgIGVudHJ5LnZhbHVlID0gdmFsdWU7XG4gICAgICAvLyBjcmVhdGUgbmV3IGVudHJ5XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzdGF0ZS5sYXN0ID0gZW50cnkgPSB7XG4gICAgICAgICAgaW5kZXg6IGluZGV4ID0gZmFzdEtleShrZXksIHRydWUpLFxuICAgICAgICAgIGtleToga2V5LFxuICAgICAgICAgIHZhbHVlOiB2YWx1ZSxcbiAgICAgICAgICBwcmV2aW91czogcHJldmlvdXMgPSBzdGF0ZS5sYXN0LFxuICAgICAgICAgIG5leHQ6IHVuZGVmaW5lZCxcbiAgICAgICAgICByZW1vdmVkOiBmYWxzZVxuICAgICAgICB9O1xuICAgICAgICBpZiAoIXN0YXRlLmZpcnN0KSBzdGF0ZS5maXJzdCA9IGVudHJ5O1xuICAgICAgICBpZiAocHJldmlvdXMpIHByZXZpb3VzLm5leHQgPSBlbnRyeTtcbiAgICAgICAgaWYgKERFU0NSSVBUT1JTKSBzdGF0ZS5zaXplKys7XG4gICAgICAgIGVsc2UgdGhhdC5zaXplKys7XG4gICAgICAgIC8vIGFkZCB0byBpbmRleFxuICAgICAgICBpZiAoaW5kZXggIT09ICdGJykgc3RhdGUuaW5kZXhbaW5kZXhdID0gZW50cnk7XG4gICAgICB9IHJldHVybiB0aGF0O1xuICAgIH07XG5cbiAgICB2YXIgZ2V0RW50cnkgPSBmdW5jdGlvbiAodGhhdCwga2V5KSB7XG4gICAgICB2YXIgc3RhdGUgPSBnZXRJbnRlcm5hbFN0YXRlKHRoYXQpO1xuICAgICAgLy8gZmFzdCBjYXNlXG4gICAgICB2YXIgaW5kZXggPSBmYXN0S2V5KGtleSk7XG4gICAgICB2YXIgZW50cnk7XG4gICAgICBpZiAoaW5kZXggIT09ICdGJykgcmV0dXJuIHN0YXRlLmluZGV4W2luZGV4XTtcbiAgICAgIC8vIGZyb3plbiBvYmplY3QgY2FzZVxuICAgICAgZm9yIChlbnRyeSA9IHN0YXRlLmZpcnN0OyBlbnRyeTsgZW50cnkgPSBlbnRyeS5uZXh0KSB7XG4gICAgICAgIGlmIChlbnRyeS5rZXkgPT0ga2V5KSByZXR1cm4gZW50cnk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIHJlZGVmaW5lQWxsKEMucHJvdG90eXBlLCB7XG4gICAgICAvLyAyMy4xLjMuMSBNYXAucHJvdG90eXBlLmNsZWFyKClcbiAgICAgIC8vIDIzLjIuMy4yIFNldC5wcm90b3R5cGUuY2xlYXIoKVxuICAgICAgY2xlYXI6IGZ1bmN0aW9uIGNsZWFyKCkge1xuICAgICAgICB2YXIgdGhhdCA9IHRoaXM7XG4gICAgICAgIHZhciBzdGF0ZSA9IGdldEludGVybmFsU3RhdGUodGhhdCk7XG4gICAgICAgIHZhciBkYXRhID0gc3RhdGUuaW5kZXg7XG4gICAgICAgIHZhciBlbnRyeSA9IHN0YXRlLmZpcnN0O1xuICAgICAgICB3aGlsZSAoZW50cnkpIHtcbiAgICAgICAgICBlbnRyeS5yZW1vdmVkID0gdHJ1ZTtcbiAgICAgICAgICBpZiAoZW50cnkucHJldmlvdXMpIGVudHJ5LnByZXZpb3VzID0gZW50cnkucHJldmlvdXMubmV4dCA9IHVuZGVmaW5lZDtcbiAgICAgICAgICBkZWxldGUgZGF0YVtlbnRyeS5pbmRleF07XG4gICAgICAgICAgZW50cnkgPSBlbnRyeS5uZXh0O1xuICAgICAgICB9XG4gICAgICAgIHN0YXRlLmZpcnN0ID0gc3RhdGUubGFzdCA9IHVuZGVmaW5lZDtcbiAgICAgICAgaWYgKERFU0NSSVBUT1JTKSBzdGF0ZS5zaXplID0gMDtcbiAgICAgICAgZWxzZSB0aGF0LnNpemUgPSAwO1xuICAgICAgfSxcbiAgICAgIC8vIDIzLjEuMy4zIE1hcC5wcm90b3R5cGUuZGVsZXRlKGtleSlcbiAgICAgIC8vIDIzLjIuMy40IFNldC5wcm90b3R5cGUuZGVsZXRlKHZhbHVlKVxuICAgICAgJ2RlbGV0ZSc6IGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgdmFyIHRoYXQgPSB0aGlzO1xuICAgICAgICB2YXIgc3RhdGUgPSBnZXRJbnRlcm5hbFN0YXRlKHRoYXQpO1xuICAgICAgICB2YXIgZW50cnkgPSBnZXRFbnRyeSh0aGF0LCBrZXkpO1xuICAgICAgICBpZiAoZW50cnkpIHtcbiAgICAgICAgICB2YXIgbmV4dCA9IGVudHJ5Lm5leHQ7XG4gICAgICAgICAgdmFyIHByZXYgPSBlbnRyeS5wcmV2aW91cztcbiAgICAgICAgICBkZWxldGUgc3RhdGUuaW5kZXhbZW50cnkuaW5kZXhdO1xuICAgICAgICAgIGVudHJ5LnJlbW92ZWQgPSB0cnVlO1xuICAgICAgICAgIGlmIChwcmV2KSBwcmV2Lm5leHQgPSBuZXh0O1xuICAgICAgICAgIGlmIChuZXh0KSBuZXh0LnByZXZpb3VzID0gcHJldjtcbiAgICAgICAgICBpZiAoc3RhdGUuZmlyc3QgPT0gZW50cnkpIHN0YXRlLmZpcnN0ID0gbmV4dDtcbiAgICAgICAgICBpZiAoc3RhdGUubGFzdCA9PSBlbnRyeSkgc3RhdGUubGFzdCA9IHByZXY7XG4gICAgICAgICAgaWYgKERFU0NSSVBUT1JTKSBzdGF0ZS5zaXplLS07XG4gICAgICAgICAgZWxzZSB0aGF0LnNpemUtLTtcbiAgICAgICAgfSByZXR1cm4gISFlbnRyeTtcbiAgICAgIH0sXG4gICAgICAvLyAyMy4yLjMuNiBTZXQucHJvdG90eXBlLmZvckVhY2goY2FsbGJhY2tmbiwgdGhpc0FyZyA9IHVuZGVmaW5lZClcbiAgICAgIC8vIDIzLjEuMy41IE1hcC5wcm90b3R5cGUuZm9yRWFjaChjYWxsYmFja2ZuLCB0aGlzQXJnID0gdW5kZWZpbmVkKVxuICAgICAgZm9yRWFjaDogZnVuY3Rpb24gZm9yRWFjaChjYWxsYmFja2ZuIC8qICwgdGhhdCA9IHVuZGVmaW5lZCAqLykge1xuICAgICAgICB2YXIgc3RhdGUgPSBnZXRJbnRlcm5hbFN0YXRlKHRoaXMpO1xuICAgICAgICB2YXIgYm91bmRGdW5jdGlvbiA9IGJpbmQoY2FsbGJhY2tmbiwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQsIDMpO1xuICAgICAgICB2YXIgZW50cnk7XG4gICAgICAgIHdoaWxlIChlbnRyeSA9IGVudHJ5ID8gZW50cnkubmV4dCA6IHN0YXRlLmZpcnN0KSB7XG4gICAgICAgICAgYm91bmRGdW5jdGlvbihlbnRyeS52YWx1ZSwgZW50cnkua2V5LCB0aGlzKTtcbiAgICAgICAgICAvLyByZXZlcnQgdG8gdGhlIGxhc3QgZXhpc3RpbmcgZW50cnlcbiAgICAgICAgICB3aGlsZSAoZW50cnkgJiYgZW50cnkucmVtb3ZlZCkgZW50cnkgPSBlbnRyeS5wcmV2aW91cztcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIC8vIDIzLjEuMy43IE1hcC5wcm90b3R5cGUuaGFzKGtleSlcbiAgICAgIC8vIDIzLjIuMy43IFNldC5wcm90b3R5cGUuaGFzKHZhbHVlKVxuICAgICAgaGFzOiBmdW5jdGlvbiBoYXMoa2V5KSB7XG4gICAgICAgIHJldHVybiAhIWdldEVudHJ5KHRoaXMsIGtleSk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICByZWRlZmluZUFsbChDLnByb3RvdHlwZSwgSVNfTUFQID8ge1xuICAgICAgLy8gMjMuMS4zLjYgTWFwLnByb3RvdHlwZS5nZXQoa2V5KVxuICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoa2V5KSB7XG4gICAgICAgIHZhciBlbnRyeSA9IGdldEVudHJ5KHRoaXMsIGtleSk7XG4gICAgICAgIHJldHVybiBlbnRyeSAmJiBlbnRyeS52YWx1ZTtcbiAgICAgIH0sXG4gICAgICAvLyAyMy4xLjMuOSBNYXAucHJvdG90eXBlLnNldChrZXksIHZhbHVlKVxuICAgICAgc2V0OiBmdW5jdGlvbiBzZXQoa2V5LCB2YWx1ZSkge1xuICAgICAgICByZXR1cm4gZGVmaW5lKHRoaXMsIGtleSA9PT0gMCA/IDAgOiBrZXksIHZhbHVlKTtcbiAgICAgIH1cbiAgICB9IDoge1xuICAgICAgLy8gMjMuMi4zLjEgU2V0LnByb3RvdHlwZS5hZGQodmFsdWUpXG4gICAgICBhZGQ6IGZ1bmN0aW9uIGFkZCh2YWx1ZSkge1xuICAgICAgICByZXR1cm4gZGVmaW5lKHRoaXMsIHZhbHVlID0gdmFsdWUgPT09IDAgPyAwIDogdmFsdWUsIHZhbHVlKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICBpZiAoREVTQ1JJUFRPUlMpIGRlZmluZVByb3BlcnR5KEMucHJvdG90eXBlLCAnc2l6ZScsIHtcbiAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gZ2V0SW50ZXJuYWxTdGF0ZSh0aGlzKS5zaXplO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiBDO1xuICB9LFxuICBzZXRTdHJvbmc6IGZ1bmN0aW9uIChDLCBDT05TVFJVQ1RPUl9OQU1FLCBJU19NQVApIHtcbiAgICB2YXIgSVRFUkFUT1JfTkFNRSA9IENPTlNUUlVDVE9SX05BTUUgKyAnIEl0ZXJhdG9yJztcbiAgICB2YXIgZ2V0SW50ZXJuYWxDb2xsZWN0aW9uU3RhdGUgPSBpbnRlcm5hbFN0YXRlR2V0dGVyRm9yKENPTlNUUlVDVE9SX05BTUUpO1xuICAgIHZhciBnZXRJbnRlcm5hbEl0ZXJhdG9yU3RhdGUgPSBpbnRlcm5hbFN0YXRlR2V0dGVyRm9yKElURVJBVE9SX05BTUUpO1xuICAgIC8vIGFkZCAua2V5cywgLnZhbHVlcywgLmVudHJpZXMsIFtAQGl0ZXJhdG9yXVxuICAgIC8vIDIzLjEuMy40LCAyMy4xLjMuOCwgMjMuMS4zLjExLCAyMy4xLjMuMTIsIDIzLjIuMy41LCAyMy4yLjMuOCwgMjMuMi4zLjEwLCAyMy4yLjMuMTFcbiAgICBkZWZpbmVJdGVyYXRvcihDLCBDT05TVFJVQ1RPUl9OQU1FLCBmdW5jdGlvbiAoaXRlcmF0ZWQsIGtpbmQpIHtcbiAgICAgIHNldEludGVybmFsU3RhdGUodGhpcywge1xuICAgICAgICB0eXBlOiBJVEVSQVRPUl9OQU1FLFxuICAgICAgICB0YXJnZXQ6IGl0ZXJhdGVkLFxuICAgICAgICBzdGF0ZTogZ2V0SW50ZXJuYWxDb2xsZWN0aW9uU3RhdGUoaXRlcmF0ZWQpLFxuICAgICAgICBraW5kOiBraW5kLFxuICAgICAgICBsYXN0OiB1bmRlZmluZWRcbiAgICAgIH0pO1xuICAgIH0sIGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBzdGF0ZSA9IGdldEludGVybmFsSXRlcmF0b3JTdGF0ZSh0aGlzKTtcbiAgICAgIHZhciBraW5kID0gc3RhdGUua2luZDtcbiAgICAgIHZhciBlbnRyeSA9IHN0YXRlLmxhc3Q7XG4gICAgICAvLyByZXZlcnQgdG8gdGhlIGxhc3QgZXhpc3RpbmcgZW50cnlcbiAgICAgIHdoaWxlIChlbnRyeSAmJiBlbnRyeS5yZW1vdmVkKSBlbnRyeSA9IGVudHJ5LnByZXZpb3VzO1xuICAgICAgLy8gZ2V0IG5leHQgZW50cnlcbiAgICAgIGlmICghc3RhdGUudGFyZ2V0IHx8ICEoc3RhdGUubGFzdCA9IGVudHJ5ID0gZW50cnkgPyBlbnRyeS5uZXh0IDogc3RhdGUuc3RhdGUuZmlyc3QpKSB7XG4gICAgICAgIC8vIG9yIGZpbmlzaCB0aGUgaXRlcmF0aW9uXG4gICAgICAgIHN0YXRlLnRhcmdldCA9IHVuZGVmaW5lZDtcbiAgICAgICAgcmV0dXJuIHsgdmFsdWU6IHVuZGVmaW5lZCwgZG9uZTogdHJ1ZSB9O1xuICAgICAgfVxuICAgICAgLy8gcmV0dXJuIHN0ZXAgYnkga2luZFxuICAgICAgaWYgKGtpbmQgPT0gJ2tleXMnKSByZXR1cm4geyB2YWx1ZTogZW50cnkua2V5LCBkb25lOiBmYWxzZSB9O1xuICAgICAgaWYgKGtpbmQgPT0gJ3ZhbHVlcycpIHJldHVybiB7IHZhbHVlOiBlbnRyeS52YWx1ZSwgZG9uZTogZmFsc2UgfTtcbiAgICAgIHJldHVybiB7IHZhbHVlOiBbZW50cnkua2V5LCBlbnRyeS52YWx1ZV0sIGRvbmU6IGZhbHNlIH07XG4gICAgfSwgSVNfTUFQID8gJ2VudHJpZXMnIDogJ3ZhbHVlcycsICFJU19NQVAsIHRydWUpO1xuXG4gICAgLy8gYWRkIFtAQHNwZWNpZXNdLCAyMy4xLjIuMiwgMjMuMi4yLjJcbiAgICBzZXRTcGVjaWVzKENPTlNUUlVDVE9SX05BTUUpO1xuICB9XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIHJlZGVmaW5lQWxsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlZGVmaW5lLWFsbCcpO1xudmFyIGdldFdlYWtEYXRhID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ludGVybmFsLW1ldGFkYXRhJykuZ2V0V2Vha0RhdGE7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4tb2JqZWN0Jyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtb2JqZWN0Jyk7XG52YXIgYW5JbnN0YW5jZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1pbnN0YW5jZScpO1xudmFyIGl0ZXJhdGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXRlcmF0ZScpO1xudmFyIEFycmF5SXRlcmF0aW9uTW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LWl0ZXJhdGlvbicpO1xudmFyICRoYXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGFzJyk7XG52YXIgSW50ZXJuYWxTdGF0ZU1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pbnRlcm5hbC1zdGF0ZScpO1xuXG52YXIgc2V0SW50ZXJuYWxTdGF0ZSA9IEludGVybmFsU3RhdGVNb2R1bGUuc2V0O1xudmFyIGludGVybmFsU3RhdGVHZXR0ZXJGb3IgPSBJbnRlcm5hbFN0YXRlTW9kdWxlLmdldHRlckZvcjtcbnZhciBmaW5kID0gQXJyYXlJdGVyYXRpb25Nb2R1bGUuZmluZDtcbnZhciBmaW5kSW5kZXggPSBBcnJheUl0ZXJhdGlvbk1vZHVsZS5maW5kSW5kZXg7XG52YXIgaWQgPSAwO1xuXG4vLyBmYWxsYmFjayBmb3IgdW5jYXVnaHQgZnJvemVuIGtleXNcbnZhciB1bmNhdWdodEZyb3plblN0b3JlID0gZnVuY3Rpb24gKHN0b3JlKSB7XG4gIHJldHVybiBzdG9yZS5mcm96ZW4gfHwgKHN0b3JlLmZyb3plbiA9IG5ldyBVbmNhdWdodEZyb3plblN0b3JlKCkpO1xufTtcblxudmFyIFVuY2F1Z2h0RnJvemVuU3RvcmUgPSBmdW5jdGlvbiAoKSB7XG4gIHRoaXMuZW50cmllcyA9IFtdO1xufTtcblxudmFyIGZpbmRVbmNhdWdodEZyb3plbiA9IGZ1bmN0aW9uIChzdG9yZSwga2V5KSB7XG4gIHJldHVybiBmaW5kKHN0b3JlLmVudHJpZXMsIGZ1bmN0aW9uIChpdCkge1xuICAgIHJldHVybiBpdFswXSA9PT0ga2V5O1xuICB9KTtcbn07XG5cblVuY2F1Z2h0RnJvemVuU3RvcmUucHJvdG90eXBlID0ge1xuICBnZXQ6IGZ1bmN0aW9uIChrZXkpIHtcbiAgICB2YXIgZW50cnkgPSBmaW5kVW5jYXVnaHRGcm96ZW4odGhpcywga2V5KTtcbiAgICBpZiAoZW50cnkpIHJldHVybiBlbnRyeVsxXTtcbiAgfSxcbiAgaGFzOiBmdW5jdGlvbiAoa2V5KSB7XG4gICAgcmV0dXJuICEhZmluZFVuY2F1Z2h0RnJvemVuKHRoaXMsIGtleSk7XG4gIH0sXG4gIHNldDogZnVuY3Rpb24gKGtleSwgdmFsdWUpIHtcbiAgICB2YXIgZW50cnkgPSBmaW5kVW5jYXVnaHRGcm96ZW4odGhpcywga2V5KTtcbiAgICBpZiAoZW50cnkpIGVudHJ5WzFdID0gdmFsdWU7XG4gICAgZWxzZSB0aGlzLmVudHJpZXMucHVzaChba2V5LCB2YWx1ZV0pO1xuICB9LFxuICAnZGVsZXRlJzogZnVuY3Rpb24gKGtleSkge1xuICAgIHZhciBpbmRleCA9IGZpbmRJbmRleCh0aGlzLmVudHJpZXMsIGZ1bmN0aW9uIChpdCkge1xuICAgICAgcmV0dXJuIGl0WzBdID09PSBrZXk7XG4gICAgfSk7XG4gICAgaWYgKH5pbmRleCkgdGhpcy5lbnRyaWVzLnNwbGljZShpbmRleCwgMSk7XG4gICAgcmV0dXJuICEhfmluZGV4O1xuICB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgZ2V0Q29uc3RydWN0b3I6IGZ1bmN0aW9uICh3cmFwcGVyLCBDT05TVFJVQ1RPUl9OQU1FLCBJU19NQVAsIEFEREVSKSB7XG4gICAgdmFyIEMgPSB3cmFwcGVyKGZ1bmN0aW9uICh0aGF0LCBpdGVyYWJsZSkge1xuICAgICAgYW5JbnN0YW5jZSh0aGF0LCBDLCBDT05TVFJVQ1RPUl9OQU1FKTtcbiAgICAgIHNldEludGVybmFsU3RhdGUodGhhdCwge1xuICAgICAgICB0eXBlOiBDT05TVFJVQ1RPUl9OQU1FLFxuICAgICAgICBpZDogaWQrKyxcbiAgICAgICAgZnJvemVuOiB1bmRlZmluZWRcbiAgICAgIH0pO1xuICAgICAgaWYgKGl0ZXJhYmxlICE9IHVuZGVmaW5lZCkgaXRlcmF0ZShpdGVyYWJsZSwgdGhhdFtBRERFUl0sIHsgdGhhdDogdGhhdCwgQVNfRU5UUklFUzogSVNfTUFQIH0pO1xuICAgIH0pO1xuXG4gICAgdmFyIGdldEludGVybmFsU3RhdGUgPSBpbnRlcm5hbFN0YXRlR2V0dGVyRm9yKENPTlNUUlVDVE9SX05BTUUpO1xuXG4gICAgdmFyIGRlZmluZSA9IGZ1bmN0aW9uICh0aGF0LCBrZXksIHZhbHVlKSB7XG4gICAgICB2YXIgc3RhdGUgPSBnZXRJbnRlcm5hbFN0YXRlKHRoYXQpO1xuICAgICAgdmFyIGRhdGEgPSBnZXRXZWFrRGF0YShhbk9iamVjdChrZXkpLCB0cnVlKTtcbiAgICAgIGlmIChkYXRhID09PSB0cnVlKSB1bmNhdWdodEZyb3plblN0b3JlKHN0YXRlKS5zZXQoa2V5LCB2YWx1ZSk7XG4gICAgICBlbHNlIGRhdGFbc3RhdGUuaWRdID0gdmFsdWU7XG4gICAgICByZXR1cm4gdGhhdDtcbiAgICB9O1xuXG4gICAgcmVkZWZpbmVBbGwoQy5wcm90b3R5cGUsIHtcbiAgICAgIC8vIDIzLjMuMy4yIFdlYWtNYXAucHJvdG90eXBlLmRlbGV0ZShrZXkpXG4gICAgICAvLyAyMy40LjMuMyBXZWFrU2V0LnByb3RvdHlwZS5kZWxldGUodmFsdWUpXG4gICAgICAnZGVsZXRlJzogZnVuY3Rpb24gKGtleSkge1xuICAgICAgICB2YXIgc3RhdGUgPSBnZXRJbnRlcm5hbFN0YXRlKHRoaXMpO1xuICAgICAgICBpZiAoIWlzT2JqZWN0KGtleSkpIHJldHVybiBmYWxzZTtcbiAgICAgICAgdmFyIGRhdGEgPSBnZXRXZWFrRGF0YShrZXkpO1xuICAgICAgICBpZiAoZGF0YSA9PT0gdHJ1ZSkgcmV0dXJuIHVuY2F1Z2h0RnJvemVuU3RvcmUoc3RhdGUpWydkZWxldGUnXShrZXkpO1xuICAgICAgICByZXR1cm4gZGF0YSAmJiAkaGFzKGRhdGEsIHN0YXRlLmlkKSAmJiBkZWxldGUgZGF0YVtzdGF0ZS5pZF07XG4gICAgICB9LFxuICAgICAgLy8gMjMuMy4zLjQgV2Vha01hcC5wcm90b3R5cGUuaGFzKGtleSlcbiAgICAgIC8vIDIzLjQuMy40IFdlYWtTZXQucHJvdG90eXBlLmhhcyh2YWx1ZSlcbiAgICAgIGhhczogZnVuY3Rpb24gaGFzKGtleSkge1xuICAgICAgICB2YXIgc3RhdGUgPSBnZXRJbnRlcm5hbFN0YXRlKHRoaXMpO1xuICAgICAgICBpZiAoIWlzT2JqZWN0KGtleSkpIHJldHVybiBmYWxzZTtcbiAgICAgICAgdmFyIGRhdGEgPSBnZXRXZWFrRGF0YShrZXkpO1xuICAgICAgICBpZiAoZGF0YSA9PT0gdHJ1ZSkgcmV0dXJuIHVuY2F1Z2h0RnJvemVuU3RvcmUoc3RhdGUpLmhhcyhrZXkpO1xuICAgICAgICByZXR1cm4gZGF0YSAmJiAkaGFzKGRhdGEsIHN0YXRlLmlkKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIHJlZGVmaW5lQWxsKEMucHJvdG90eXBlLCBJU19NQVAgPyB7XG4gICAgICAvLyAyMy4zLjMuMyBXZWFrTWFwLnByb3RvdHlwZS5nZXQoa2V5KVxuICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoa2V5KSB7XG4gICAgICAgIHZhciBzdGF0ZSA9IGdldEludGVybmFsU3RhdGUodGhpcyk7XG4gICAgICAgIGlmIChpc09iamVjdChrZXkpKSB7XG4gICAgICAgICAgdmFyIGRhdGEgPSBnZXRXZWFrRGF0YShrZXkpO1xuICAgICAgICAgIGlmIChkYXRhID09PSB0cnVlKSByZXR1cm4gdW5jYXVnaHRGcm96ZW5TdG9yZShzdGF0ZSkuZ2V0KGtleSk7XG4gICAgICAgICAgcmV0dXJuIGRhdGEgPyBkYXRhW3N0YXRlLmlkXSA6IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIC8vIDIzLjMuMy41IFdlYWtNYXAucHJvdG90eXBlLnNldChrZXksIHZhbHVlKVxuICAgICAgc2V0OiBmdW5jdGlvbiBzZXQoa2V5LCB2YWx1ZSkge1xuICAgICAgICByZXR1cm4gZGVmaW5lKHRoaXMsIGtleSwgdmFsdWUpO1xuICAgICAgfVxuICAgIH0gOiB7XG4gICAgICAvLyAyMy40LjMuMSBXZWFrU2V0LnByb3RvdHlwZS5hZGQodmFsdWUpXG4gICAgICBhZGQ6IGZ1bmN0aW9uIGFkZCh2YWx1ZSkge1xuICAgICAgICByZXR1cm4gZGVmaW5lKHRoaXMsIHZhbHVlLCB0cnVlKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIHJldHVybiBDO1xuICB9XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIGlzRm9yY2VkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLWZvcmNlZCcpO1xudmFyIHJlZGVmaW5lID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlZGVmaW5lJyk7XG52YXIgSW50ZXJuYWxNZXRhZGF0YU1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pbnRlcm5hbC1tZXRhZGF0YScpO1xudmFyIGl0ZXJhdGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXRlcmF0ZScpO1xudmFyIGFuSW5zdGFuY2UgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4taW5zdGFuY2UnKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1vYmplY3QnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xudmFyIGNoZWNrQ29ycmVjdG5lc3NPZkl0ZXJhdGlvbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jaGVjay1jb3JyZWN0bmVzcy1vZi1pdGVyYXRpb24nKTtcbnZhciBzZXRUb1N0cmluZ1RhZyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zZXQtdG8tc3RyaW5nLXRhZycpO1xudmFyIGluaGVyaXRJZlJlcXVpcmVkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2luaGVyaXQtaWYtcmVxdWlyZWQnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoQ09OU1RSVUNUT1JfTkFNRSwgd3JhcHBlciwgY29tbW9uKSB7XG4gIHZhciBJU19NQVAgPSBDT05TVFJVQ1RPUl9OQU1FLmluZGV4T2YoJ01hcCcpICE9PSAtMTtcbiAgdmFyIElTX1dFQUsgPSBDT05TVFJVQ1RPUl9OQU1FLmluZGV4T2YoJ1dlYWsnKSAhPT0gLTE7XG4gIHZhciBBRERFUiA9IElTX01BUCA/ICdzZXQnIDogJ2FkZCc7XG4gIHZhciBOYXRpdmVDb25zdHJ1Y3RvciA9IGdsb2JhbFtDT05TVFJVQ1RPUl9OQU1FXTtcbiAgdmFyIE5hdGl2ZVByb3RvdHlwZSA9IE5hdGl2ZUNvbnN0cnVjdG9yICYmIE5hdGl2ZUNvbnN0cnVjdG9yLnByb3RvdHlwZTtcbiAgdmFyIENvbnN0cnVjdG9yID0gTmF0aXZlQ29uc3RydWN0b3I7XG4gIHZhciBleHBvcnRlZCA9IHt9O1xuXG4gIHZhciBmaXhNZXRob2QgPSBmdW5jdGlvbiAoS0VZKSB7XG4gICAgdmFyIG5hdGl2ZU1ldGhvZCA9IE5hdGl2ZVByb3RvdHlwZVtLRVldO1xuICAgIHJlZGVmaW5lKE5hdGl2ZVByb3RvdHlwZSwgS0VZLFxuICAgICAgS0VZID09ICdhZGQnID8gZnVuY3Rpb24gYWRkKHZhbHVlKSB7XG4gICAgICAgIG5hdGl2ZU1ldGhvZC5jYWxsKHRoaXMsIHZhbHVlID09PSAwID8gMCA6IHZhbHVlKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9IDogS0VZID09ICdkZWxldGUnID8gZnVuY3Rpb24gKGtleSkge1xuICAgICAgICByZXR1cm4gSVNfV0VBSyAmJiAhaXNPYmplY3Qoa2V5KSA/IGZhbHNlIDogbmF0aXZlTWV0aG9kLmNhbGwodGhpcywga2V5ID09PSAwID8gMCA6IGtleSk7XG4gICAgICB9IDogS0VZID09ICdnZXQnID8gZnVuY3Rpb24gZ2V0KGtleSkge1xuICAgICAgICByZXR1cm4gSVNfV0VBSyAmJiAhaXNPYmplY3Qoa2V5KSA/IHVuZGVmaW5lZCA6IG5hdGl2ZU1ldGhvZC5jYWxsKHRoaXMsIGtleSA9PT0gMCA/IDAgOiBrZXkpO1xuICAgICAgfSA6IEtFWSA9PSAnaGFzJyA/IGZ1bmN0aW9uIGhhcyhrZXkpIHtcbiAgICAgICAgcmV0dXJuIElTX1dFQUsgJiYgIWlzT2JqZWN0KGtleSkgPyBmYWxzZSA6IG5hdGl2ZU1ldGhvZC5jYWxsKHRoaXMsIGtleSA9PT0gMCA/IDAgOiBrZXkpO1xuICAgICAgfSA6IGZ1bmN0aW9uIHNldChrZXksIHZhbHVlKSB7XG4gICAgICAgIG5hdGl2ZU1ldGhvZC5jYWxsKHRoaXMsIGtleSA9PT0gMCA/IDAgOiBrZXksIHZhbHVlKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9XG4gICAgKTtcbiAgfTtcblxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbWF4LWxlblxuICBpZiAoaXNGb3JjZWQoQ09OU1RSVUNUT1JfTkFNRSwgdHlwZW9mIE5hdGl2ZUNvbnN0cnVjdG9yICE9ICdmdW5jdGlvbicgfHwgIShJU19XRUFLIHx8IE5hdGl2ZVByb3RvdHlwZS5mb3JFYWNoICYmICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgbmV3IE5hdGl2ZUNvbnN0cnVjdG9yKCkuZW50cmllcygpLm5leHQoKTtcbiAgfSkpKSkge1xuICAgIC8vIGNyZWF0ZSBjb2xsZWN0aW9uIGNvbnN0cnVjdG9yXG4gICAgQ29uc3RydWN0b3IgPSBjb21tb24uZ2V0Q29uc3RydWN0b3Iod3JhcHBlciwgQ09OU1RSVUNUT1JfTkFNRSwgSVNfTUFQLCBBRERFUik7XG4gICAgSW50ZXJuYWxNZXRhZGF0YU1vZHVsZS5SRVFVSVJFRCA9IHRydWU7XG4gIH0gZWxzZSBpZiAoaXNGb3JjZWQoQ09OU1RSVUNUT1JfTkFNRSwgdHJ1ZSkpIHtcbiAgICB2YXIgaW5zdGFuY2UgPSBuZXcgQ29uc3RydWN0b3IoKTtcbiAgICAvLyBlYXJseSBpbXBsZW1lbnRhdGlvbnMgbm90IHN1cHBvcnRzIGNoYWluaW5nXG4gICAgdmFyIEhBU05UX0NIQUlOSU5HID0gaW5zdGFuY2VbQURERVJdKElTX1dFQUsgPyB7fSA6IC0wLCAxKSAhPSBpbnN0YW5jZTtcbiAgICAvLyBWOCB+IENocm9taXVtIDQwLSB3ZWFrLWNvbGxlY3Rpb25zIHRocm93cyBvbiBwcmltaXRpdmVzLCBidXQgc2hvdWxkIHJldHVybiBmYWxzZVxuICAgIHZhciBUSFJPV1NfT05fUFJJTUlUSVZFUyA9IGZhaWxzKGZ1bmN0aW9uICgpIHsgaW5zdGFuY2UuaGFzKDEpOyB9KTtcbiAgICAvLyBtb3N0IGVhcmx5IGltcGxlbWVudGF0aW9ucyBkb2Vzbid0IHN1cHBvcnRzIGl0ZXJhYmxlcywgbW9zdCBtb2Rlcm4gLSBub3QgY2xvc2UgaXQgY29ycmVjdGx5XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLW5ld1xuICAgIHZhciBBQ0NFUFRfSVRFUkFCTEVTID0gY2hlY2tDb3JyZWN0bmVzc09mSXRlcmF0aW9uKGZ1bmN0aW9uIChpdGVyYWJsZSkgeyBuZXcgTmF0aXZlQ29uc3RydWN0b3IoaXRlcmFibGUpOyB9KTtcbiAgICAvLyBmb3IgZWFybHkgaW1wbGVtZW50YXRpb25zIC0wIGFuZCArMCBub3QgdGhlIHNhbWVcbiAgICB2YXIgQlVHR1lfWkVSTyA9ICFJU19XRUFLICYmIGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICAgIC8vIFY4IH4gQ2hyb21pdW0gNDItIGZhaWxzIG9ubHkgd2l0aCA1KyBlbGVtZW50c1xuICAgICAgdmFyICRpbnN0YW5jZSA9IG5ldyBOYXRpdmVDb25zdHJ1Y3RvcigpO1xuICAgICAgdmFyIGluZGV4ID0gNTtcbiAgICAgIHdoaWxlIChpbmRleC0tKSAkaW5zdGFuY2VbQURERVJdKGluZGV4LCBpbmRleCk7XG4gICAgICByZXR1cm4gISRpbnN0YW5jZS5oYXMoLTApO1xuICAgIH0pO1xuXG4gICAgaWYgKCFBQ0NFUFRfSVRFUkFCTEVTKSB7XG4gICAgICBDb25zdHJ1Y3RvciA9IHdyYXBwZXIoZnVuY3Rpb24gKGR1bW15LCBpdGVyYWJsZSkge1xuICAgICAgICBhbkluc3RhbmNlKGR1bW15LCBDb25zdHJ1Y3RvciwgQ09OU1RSVUNUT1JfTkFNRSk7XG4gICAgICAgIHZhciB0aGF0ID0gaW5oZXJpdElmUmVxdWlyZWQobmV3IE5hdGl2ZUNvbnN0cnVjdG9yKCksIGR1bW15LCBDb25zdHJ1Y3Rvcik7XG4gICAgICAgIGlmIChpdGVyYWJsZSAhPSB1bmRlZmluZWQpIGl0ZXJhdGUoaXRlcmFibGUsIHRoYXRbQURERVJdLCB7IHRoYXQ6IHRoYXQsIEFTX0VOVFJJRVM6IElTX01BUCB9KTtcbiAgICAgICAgcmV0dXJuIHRoYXQ7XG4gICAgICB9KTtcbiAgICAgIENvbnN0cnVjdG9yLnByb3RvdHlwZSA9IE5hdGl2ZVByb3RvdHlwZTtcbiAgICAgIE5hdGl2ZVByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IENvbnN0cnVjdG9yO1xuICAgIH1cblxuICAgIGlmIChUSFJPV1NfT05fUFJJTUlUSVZFUyB8fCBCVUdHWV9aRVJPKSB7XG4gICAgICBmaXhNZXRob2QoJ2RlbGV0ZScpO1xuICAgICAgZml4TWV0aG9kKCdoYXMnKTtcbiAgICAgIElTX01BUCAmJiBmaXhNZXRob2QoJ2dldCcpO1xuICAgIH1cblxuICAgIGlmIChCVUdHWV9aRVJPIHx8IEhBU05UX0NIQUlOSU5HKSBmaXhNZXRob2QoQURERVIpO1xuXG4gICAgLy8gd2VhayBjb2xsZWN0aW9ucyBzaG91bGQgbm90IGNvbnRhaW5zIC5jbGVhciBtZXRob2RcbiAgICBpZiAoSVNfV0VBSyAmJiBOYXRpdmVQcm90b3R5cGUuY2xlYXIpIGRlbGV0ZSBOYXRpdmVQcm90b3R5cGUuY2xlYXI7XG4gIH1cblxuICBleHBvcnRlZFtDT05TVFJVQ1RPUl9OQU1FXSA9IENvbnN0cnVjdG9yO1xuICAkKHsgZ2xvYmFsOiB0cnVlLCBmb3JjZWQ6IENvbnN0cnVjdG9yICE9IE5hdGl2ZUNvbnN0cnVjdG9yIH0sIGV4cG9ydGVkKTtcblxuICBzZXRUb1N0cmluZ1RhZyhDb25zdHJ1Y3RvciwgQ09OU1RSVUNUT1JfTkFNRSk7XG5cbiAgaWYgKCFJU19XRUFLKSBjb21tb24uc2V0U3Ryb25nKENvbnN0cnVjdG9yLCBDT05TVFJVQ1RPUl9OQU1FLCBJU19NQVApO1xuXG4gIHJldHVybiBDb25zdHJ1Y3Rvcjtcbn07XG4iLCJ2YXIgaGFzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hhcycpO1xudmFyIG93bktleXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb3duLWtleXMnKTtcbnZhciBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1vd24tcHJvcGVydHktZGVzY3JpcHRvcicpO1xudmFyIGRlZmluZVByb3BlcnR5TW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1kZWZpbmUtcHJvcGVydHknKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAodGFyZ2V0LCBzb3VyY2UpIHtcbiAgdmFyIGtleXMgPSBvd25LZXlzKHNvdXJjZSk7XG4gIHZhciBkZWZpbmVQcm9wZXJ0eSA9IGRlZmluZVByb3BlcnR5TW9kdWxlLmY7XG4gIHZhciBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPSBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JNb2R1bGUuZjtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGtleSA9IGtleXNbaV07XG4gICAgaWYgKCFoYXModGFyZ2V0LCBrZXkpKSBkZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHNvdXJjZSwga2V5KSk7XG4gIH1cbn07XG4iLCJ2YXIgd2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sJyk7XG5cbnZhciBNQVRDSCA9IHdlbGxLbm93blN5bWJvbCgnbWF0Y2gnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoTUVUSE9EX05BTUUpIHtcbiAgdmFyIHJlZ2V4cCA9IC8uLztcbiAgdHJ5IHtcbiAgICAnLy4vJ1tNRVRIT0RfTkFNRV0ocmVnZXhwKTtcbiAgfSBjYXRjaCAoZXJyb3IxKSB7XG4gICAgdHJ5IHtcbiAgICAgIHJlZ2V4cFtNQVRDSF0gPSBmYWxzZTtcbiAgICAgIHJldHVybiAnLy4vJ1tNRVRIT0RfTkFNRV0ocmVnZXhwKTtcbiAgICB9IGNhdGNoIChlcnJvcjIpIHsgLyogZW1wdHkgKi8gfVxuICB9IHJldHVybiBmYWxzZTtcbn07XG4iLCJ2YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBGKCkgeyAvKiBlbXB0eSAqLyB9XG4gIEYucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gbnVsbDtcbiAgcmV0dXJuIE9iamVjdC5nZXRQcm90b3R5cGVPZihuZXcgRigpKSAhPT0gRi5wcm90b3R5cGU7XG59KTtcbiIsInZhciByZXF1aXJlT2JqZWN0Q29lcmNpYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlcXVpcmUtb2JqZWN0LWNvZXJjaWJsZScpO1xuXG52YXIgcXVvdCA9IC9cIi9nO1xuXG4vLyBCLjIuMy4yLjEgQ3JlYXRlSFRNTChzdHJpbmcsIHRhZywgYXR0cmlidXRlLCB2YWx1ZSlcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtY3JlYXRlaHRtbFxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoc3RyaW5nLCB0YWcsIGF0dHJpYnV0ZSwgdmFsdWUpIHtcbiAgdmFyIFMgPSBTdHJpbmcocmVxdWlyZU9iamVjdENvZXJjaWJsZShzdHJpbmcpKTtcbiAgdmFyIHAxID0gJzwnICsgdGFnO1xuICBpZiAoYXR0cmlidXRlICE9PSAnJykgcDEgKz0gJyAnICsgYXR0cmlidXRlICsgJz1cIicgKyBTdHJpbmcodmFsdWUpLnJlcGxhY2UocXVvdCwgJyZxdW90OycpICsgJ1wiJztcbiAgcmV0dXJuIHAxICsgJz4nICsgUyArICc8LycgKyB0YWcgKyAnPic7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIEl0ZXJhdG9yUHJvdG90eXBlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2l0ZXJhdG9ycy1jb3JlJykuSXRlcmF0b3JQcm90b3R5cGU7XG52YXIgY3JlYXRlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1jcmVhdGUnKTtcbnZhciBjcmVhdGVQcm9wZXJ0eURlc2NyaXB0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLXByb3BlcnR5LWRlc2NyaXB0b3InKTtcbnZhciBzZXRUb1N0cmluZ1RhZyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zZXQtdG8tc3RyaW5nLXRhZycpO1xudmFyIEl0ZXJhdG9ycyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pdGVyYXRvcnMnKTtcblxudmFyIHJldHVyblRoaXMgPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChJdGVyYXRvckNvbnN0cnVjdG9yLCBOQU1FLCBuZXh0KSB7XG4gIHZhciBUT19TVFJJTkdfVEFHID0gTkFNRSArICcgSXRlcmF0b3InO1xuICBJdGVyYXRvckNvbnN0cnVjdG9yLnByb3RvdHlwZSA9IGNyZWF0ZShJdGVyYXRvclByb3RvdHlwZSwgeyBuZXh0OiBjcmVhdGVQcm9wZXJ0eURlc2NyaXB0b3IoMSwgbmV4dCkgfSk7XG4gIHNldFRvU3RyaW5nVGFnKEl0ZXJhdG9yQ29uc3RydWN0b3IsIFRPX1NUUklOR19UQUcsIGZhbHNlLCB0cnVlKTtcbiAgSXRlcmF0b3JzW1RPX1NUUklOR19UQUddID0gcmV0dXJuVGhpcztcbiAgcmV0dXJuIEl0ZXJhdG9yQ29uc3RydWN0b3I7XG59O1xuIiwidmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Rlc2NyaXB0b3JzJyk7XG52YXIgZGVmaW5lUHJvcGVydHlNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWRlZmluZS1wcm9wZXJ0eScpO1xudmFyIGNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtcHJvcGVydHktZGVzY3JpcHRvcicpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IERFU0NSSVBUT1JTID8gZnVuY3Rpb24gKG9iamVjdCwga2V5LCB2YWx1ZSkge1xuICByZXR1cm4gZGVmaW5lUHJvcGVydHlNb2R1bGUuZihvYmplY3QsIGtleSwgY3JlYXRlUHJvcGVydHlEZXNjcmlwdG9yKDEsIHZhbHVlKSk7XG59IDogZnVuY3Rpb24gKG9iamVjdCwga2V5LCB2YWx1ZSkge1xuICBvYmplY3Rba2V5XSA9IHZhbHVlO1xuICByZXR1cm4gb2JqZWN0O1xufTtcbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGJpdG1hcCwgdmFsdWUpIHtcbiAgcmV0dXJuIHtcbiAgICBlbnVtZXJhYmxlOiAhKGJpdG1hcCAmIDEpLFxuICAgIGNvbmZpZ3VyYWJsZTogIShiaXRtYXAgJiAyKSxcbiAgICB3cml0YWJsZTogIShiaXRtYXAgJiA0KSxcbiAgICB2YWx1ZTogdmFsdWVcbiAgfTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgdG9QcmltaXRpdmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tcHJpbWl0aXZlJyk7XG52YXIgZGVmaW5lUHJvcGVydHlNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWRlZmluZS1wcm9wZXJ0eScpO1xudmFyIGNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtcHJvcGVydHktZGVzY3JpcHRvcicpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChvYmplY3QsIGtleSwgdmFsdWUpIHtcbiAgdmFyIHByb3BlcnR5S2V5ID0gdG9QcmltaXRpdmUoa2V5KTtcbiAgaWYgKHByb3BlcnR5S2V5IGluIG9iamVjdCkgZGVmaW5lUHJvcGVydHlNb2R1bGUuZihvYmplY3QsIHByb3BlcnR5S2V5LCBjcmVhdGVQcm9wZXJ0eURlc2NyaXB0b3IoMCwgdmFsdWUpKTtcbiAgZWxzZSBvYmplY3RbcHJvcGVydHlLZXldID0gdmFsdWU7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG52YXIgcGFkU3RhcnQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc3RyaW5nLXBhZCcpLnN0YXJ0O1xuXG52YXIgYWJzID0gTWF0aC5hYnM7XG52YXIgRGF0ZVByb3RvdHlwZSA9IERhdGUucHJvdG90eXBlO1xudmFyIGdldFRpbWUgPSBEYXRlUHJvdG90eXBlLmdldFRpbWU7XG52YXIgbmF0aXZlRGF0ZVRvSVNPU3RyaW5nID0gRGF0ZVByb3RvdHlwZS50b0lTT1N0cmluZztcblxuLy8gYERhdGUucHJvdG90eXBlLnRvSVNPU3RyaW5nYCBtZXRob2QgaW1wbGVtZW50YXRpb25cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtZGF0ZS5wcm90b3R5cGUudG9pc29zdHJpbmdcbi8vIFBoYW50b21KUyAvIG9sZCBXZWJLaXQgZmFpbHMgaGVyZTpcbm1vZHVsZS5leHBvcnRzID0gKGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIG5hdGl2ZURhdGVUb0lTT1N0cmluZy5jYWxsKG5ldyBEYXRlKC01ZTEzIC0gMSkpICE9ICcwMzg1LTA3LTI1VDA3OjA2OjM5Ljk5OVonO1xufSkgfHwgIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgbmF0aXZlRGF0ZVRvSVNPU3RyaW5nLmNhbGwobmV3IERhdGUoTmFOKSk7XG59KSkgPyBmdW5jdGlvbiB0b0lTT1N0cmluZygpIHtcbiAgaWYgKCFpc0Zpbml0ZShnZXRUaW1lLmNhbGwodGhpcykpKSB0aHJvdyBSYW5nZUVycm9yKCdJbnZhbGlkIHRpbWUgdmFsdWUnKTtcbiAgdmFyIGRhdGUgPSB0aGlzO1xuICB2YXIgeWVhciA9IGRhdGUuZ2V0VVRDRnVsbFllYXIoKTtcbiAgdmFyIG1pbGxpc2Vjb25kcyA9IGRhdGUuZ2V0VVRDTWlsbGlzZWNvbmRzKCk7XG4gIHZhciBzaWduID0geWVhciA8IDAgPyAnLScgOiB5ZWFyID4gOTk5OSA/ICcrJyA6ICcnO1xuICByZXR1cm4gc2lnbiArIHBhZFN0YXJ0KGFicyh5ZWFyKSwgc2lnbiA/IDYgOiA0LCAwKSArXG4gICAgJy0nICsgcGFkU3RhcnQoZGF0ZS5nZXRVVENNb250aCgpICsgMSwgMiwgMCkgK1xuICAgICctJyArIHBhZFN0YXJ0KGRhdGUuZ2V0VVRDRGF0ZSgpLCAyLCAwKSArXG4gICAgJ1QnICsgcGFkU3RhcnQoZGF0ZS5nZXRVVENIb3VycygpLCAyLCAwKSArXG4gICAgJzonICsgcGFkU3RhcnQoZGF0ZS5nZXRVVENNaW51dGVzKCksIDIsIDApICtcbiAgICAnOicgKyBwYWRTdGFydChkYXRlLmdldFVUQ1NlY29uZHMoKSwgMiwgMCkgK1xuICAgICcuJyArIHBhZFN0YXJ0KG1pbGxpc2Vjb25kcywgMywgMCkgK1xuICAgICdaJztcbn0gOiBuYXRpdmVEYXRlVG9JU09TdHJpbmc7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4tb2JqZWN0Jyk7XG52YXIgdG9QcmltaXRpdmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tcHJpbWl0aXZlJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGhpbnQpIHtcbiAgaWYgKGhpbnQgIT09ICdzdHJpbmcnICYmIGhpbnQgIT09ICdudW1iZXInICYmIGhpbnQgIT09ICdkZWZhdWx0Jykge1xuICAgIHRocm93IFR5cGVFcnJvcignSW5jb3JyZWN0IGhpbnQnKTtcbiAgfSByZXR1cm4gdG9QcmltaXRpdmUoYW5PYmplY3QodGhpcyksIGhpbnQgIT09ICdudW1iZXInKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBjcmVhdGVJdGVyYXRvckNvbnN0cnVjdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1pdGVyYXRvci1jb25zdHJ1Y3RvcicpO1xudmFyIGdldFByb3RvdHlwZU9mID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1nZXQtcHJvdG90eXBlLW9mJyk7XG52YXIgc2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LXNldC1wcm90b3R5cGUtb2YnKTtcbnZhciBzZXRUb1N0cmluZ1RhZyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zZXQtdG8tc3RyaW5nLXRhZycpO1xudmFyIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtbm9uLWVudW1lcmFibGUtcHJvcGVydHknKTtcbnZhciByZWRlZmluZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZWRlZmluZScpO1xudmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xudmFyIElTX1BVUkUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtcHVyZScpO1xudmFyIEl0ZXJhdG9ycyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pdGVyYXRvcnMnKTtcbnZhciBJdGVyYXRvcnNDb3JlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2l0ZXJhdG9ycy1jb3JlJyk7XG5cbnZhciBJdGVyYXRvclByb3RvdHlwZSA9IEl0ZXJhdG9yc0NvcmUuSXRlcmF0b3JQcm90b3R5cGU7XG52YXIgQlVHR1lfU0FGQVJJX0lURVJBVE9SUyA9IEl0ZXJhdG9yc0NvcmUuQlVHR1lfU0FGQVJJX0lURVJBVE9SUztcbnZhciBJVEVSQVRPUiA9IHdlbGxLbm93blN5bWJvbCgnaXRlcmF0b3InKTtcbnZhciBLRVlTID0gJ2tleXMnO1xudmFyIFZBTFVFUyA9ICd2YWx1ZXMnO1xudmFyIEVOVFJJRVMgPSAnZW50cmllcyc7XG5cbnZhciByZXR1cm5UaGlzID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpczsgfTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoSXRlcmFibGUsIE5BTUUsIEl0ZXJhdG9yQ29uc3RydWN0b3IsIG5leHQsIERFRkFVTFQsIElTX1NFVCwgRk9SQ0VEKSB7XG4gIGNyZWF0ZUl0ZXJhdG9yQ29uc3RydWN0b3IoSXRlcmF0b3JDb25zdHJ1Y3RvciwgTkFNRSwgbmV4dCk7XG5cbiAgdmFyIGdldEl0ZXJhdGlvbk1ldGhvZCA9IGZ1bmN0aW9uIChLSU5EKSB7XG4gICAgaWYgKEtJTkQgPT09IERFRkFVTFQgJiYgZGVmYXVsdEl0ZXJhdG9yKSByZXR1cm4gZGVmYXVsdEl0ZXJhdG9yO1xuICAgIGlmICghQlVHR1lfU0FGQVJJX0lURVJBVE9SUyAmJiBLSU5EIGluIEl0ZXJhYmxlUHJvdG90eXBlKSByZXR1cm4gSXRlcmFibGVQcm90b3R5cGVbS0lORF07XG4gICAgc3dpdGNoIChLSU5EKSB7XG4gICAgICBjYXNlIEtFWVM6IHJldHVybiBmdW5jdGlvbiBrZXlzKCkgeyByZXR1cm4gbmV3IEl0ZXJhdG9yQ29uc3RydWN0b3IodGhpcywgS0lORCk7IH07XG4gICAgICBjYXNlIFZBTFVFUzogcmV0dXJuIGZ1bmN0aW9uIHZhbHVlcygpIHsgcmV0dXJuIG5ldyBJdGVyYXRvckNvbnN0cnVjdG9yKHRoaXMsIEtJTkQpOyB9O1xuICAgICAgY2FzZSBFTlRSSUVTOiByZXR1cm4gZnVuY3Rpb24gZW50cmllcygpIHsgcmV0dXJuIG5ldyBJdGVyYXRvckNvbnN0cnVjdG9yKHRoaXMsIEtJTkQpOyB9O1xuICAgIH0gcmV0dXJuIGZ1bmN0aW9uICgpIHsgcmV0dXJuIG5ldyBJdGVyYXRvckNvbnN0cnVjdG9yKHRoaXMpOyB9O1xuICB9O1xuXG4gIHZhciBUT19TVFJJTkdfVEFHID0gTkFNRSArICcgSXRlcmF0b3InO1xuICB2YXIgSU5DT1JSRUNUX1ZBTFVFU19OQU1FID0gZmFsc2U7XG4gIHZhciBJdGVyYWJsZVByb3RvdHlwZSA9IEl0ZXJhYmxlLnByb3RvdHlwZTtcbiAgdmFyIG5hdGl2ZUl0ZXJhdG9yID0gSXRlcmFibGVQcm90b3R5cGVbSVRFUkFUT1JdXG4gICAgfHwgSXRlcmFibGVQcm90b3R5cGVbJ0BAaXRlcmF0b3InXVxuICAgIHx8IERFRkFVTFQgJiYgSXRlcmFibGVQcm90b3R5cGVbREVGQVVMVF07XG4gIHZhciBkZWZhdWx0SXRlcmF0b3IgPSAhQlVHR1lfU0FGQVJJX0lURVJBVE9SUyAmJiBuYXRpdmVJdGVyYXRvciB8fCBnZXRJdGVyYXRpb25NZXRob2QoREVGQVVMVCk7XG4gIHZhciBhbnlOYXRpdmVJdGVyYXRvciA9IE5BTUUgPT0gJ0FycmF5JyA/IEl0ZXJhYmxlUHJvdG90eXBlLmVudHJpZXMgfHwgbmF0aXZlSXRlcmF0b3IgOiBuYXRpdmVJdGVyYXRvcjtcbiAgdmFyIEN1cnJlbnRJdGVyYXRvclByb3RvdHlwZSwgbWV0aG9kcywgS0VZO1xuXG4gIC8vIGZpeCBuYXRpdmVcbiAgaWYgKGFueU5hdGl2ZUl0ZXJhdG9yKSB7XG4gICAgQ3VycmVudEl0ZXJhdG9yUHJvdG90eXBlID0gZ2V0UHJvdG90eXBlT2YoYW55TmF0aXZlSXRlcmF0b3IuY2FsbChuZXcgSXRlcmFibGUoKSkpO1xuICAgIGlmIChJdGVyYXRvclByb3RvdHlwZSAhPT0gT2JqZWN0LnByb3RvdHlwZSAmJiBDdXJyZW50SXRlcmF0b3JQcm90b3R5cGUubmV4dCkge1xuICAgICAgaWYgKCFJU19QVVJFICYmIGdldFByb3RvdHlwZU9mKEN1cnJlbnRJdGVyYXRvclByb3RvdHlwZSkgIT09IEl0ZXJhdG9yUHJvdG90eXBlKSB7XG4gICAgICAgIGlmIChzZXRQcm90b3R5cGVPZikge1xuICAgICAgICAgIHNldFByb3RvdHlwZU9mKEN1cnJlbnRJdGVyYXRvclByb3RvdHlwZSwgSXRlcmF0b3JQcm90b3R5cGUpO1xuICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiBDdXJyZW50SXRlcmF0b3JQcm90b3R5cGVbSVRFUkFUT1JdICE9ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkoQ3VycmVudEl0ZXJhdG9yUHJvdG90eXBlLCBJVEVSQVRPUiwgcmV0dXJuVGhpcyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIC8vIFNldCBAQHRvU3RyaW5nVGFnIHRvIG5hdGl2ZSBpdGVyYXRvcnNcbiAgICAgIHNldFRvU3RyaW5nVGFnKEN1cnJlbnRJdGVyYXRvclByb3RvdHlwZSwgVE9fU1RSSU5HX1RBRywgdHJ1ZSwgdHJ1ZSk7XG4gICAgICBpZiAoSVNfUFVSRSkgSXRlcmF0b3JzW1RPX1NUUklOR19UQUddID0gcmV0dXJuVGhpcztcbiAgICB9XG4gIH1cblxuICAvLyBmaXggQXJyYXkje3ZhbHVlcywgQEBpdGVyYXRvcn0ubmFtZSBpbiBWOCAvIEZGXG4gIGlmIChERUZBVUxUID09IFZBTFVFUyAmJiBuYXRpdmVJdGVyYXRvciAmJiBuYXRpdmVJdGVyYXRvci5uYW1lICE9PSBWQUxVRVMpIHtcbiAgICBJTkNPUlJFQ1RfVkFMVUVTX05BTUUgPSB0cnVlO1xuICAgIGRlZmF1bHRJdGVyYXRvciA9IGZ1bmN0aW9uIHZhbHVlcygpIHsgcmV0dXJuIG5hdGl2ZUl0ZXJhdG9yLmNhbGwodGhpcyk7IH07XG4gIH1cblxuICAvLyBkZWZpbmUgaXRlcmF0b3JcbiAgaWYgKCghSVNfUFVSRSB8fCBGT1JDRUQpICYmIEl0ZXJhYmxlUHJvdG90eXBlW0lURVJBVE9SXSAhPT0gZGVmYXVsdEl0ZXJhdG9yKSB7XG4gICAgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5KEl0ZXJhYmxlUHJvdG90eXBlLCBJVEVSQVRPUiwgZGVmYXVsdEl0ZXJhdG9yKTtcbiAgfVxuICBJdGVyYXRvcnNbTkFNRV0gPSBkZWZhdWx0SXRlcmF0b3I7XG5cbiAgLy8gZXhwb3J0IGFkZGl0aW9uYWwgbWV0aG9kc1xuICBpZiAoREVGQVVMVCkge1xuICAgIG1ldGhvZHMgPSB7XG4gICAgICB2YWx1ZXM6IGdldEl0ZXJhdGlvbk1ldGhvZChWQUxVRVMpLFxuICAgICAga2V5czogSVNfU0VUID8gZGVmYXVsdEl0ZXJhdG9yIDogZ2V0SXRlcmF0aW9uTWV0aG9kKEtFWVMpLFxuICAgICAgZW50cmllczogZ2V0SXRlcmF0aW9uTWV0aG9kKEVOVFJJRVMpXG4gICAgfTtcbiAgICBpZiAoRk9SQ0VEKSBmb3IgKEtFWSBpbiBtZXRob2RzKSB7XG4gICAgICBpZiAoQlVHR1lfU0FGQVJJX0lURVJBVE9SUyB8fCBJTkNPUlJFQ1RfVkFMVUVTX05BTUUgfHwgIShLRVkgaW4gSXRlcmFibGVQcm90b3R5cGUpKSB7XG4gICAgICAgIHJlZGVmaW5lKEl0ZXJhYmxlUHJvdG90eXBlLCBLRVksIG1ldGhvZHNbS0VZXSk7XG4gICAgICB9XG4gICAgfSBlbHNlICQoeyB0YXJnZXQ6IE5BTUUsIHByb3RvOiB0cnVlLCBmb3JjZWQ6IEJVR0dZX1NBRkFSSV9JVEVSQVRPUlMgfHwgSU5DT1JSRUNUX1ZBTFVFU19OQU1FIH0sIG1ldGhvZHMpO1xuICB9XG5cbiAgcmV0dXJuIG1ldGhvZHM7XG59O1xuIiwidmFyIHBhdGggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcGF0aCcpO1xudmFyIGhhcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oYXMnKTtcbnZhciB3cmFwcGVkV2VsbEtub3duU3ltYm9sTW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sLXdyYXBwZWQnKTtcbnZhciBkZWZpbmVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZGVmaW5lLXByb3BlcnR5JykuZjtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoTkFNRSkge1xuICB2YXIgU3ltYm9sID0gcGF0aC5TeW1ib2wgfHwgKHBhdGguU3ltYm9sID0ge30pO1xuICBpZiAoIWhhcyhTeW1ib2wsIE5BTUUpKSBkZWZpbmVQcm9wZXJ0eShTeW1ib2wsIE5BTUUsIHtcbiAgICB2YWx1ZTogd3JhcHBlZFdlbGxLbm93blN5bWJvbE1vZHVsZS5mKE5BTUUpXG4gIH0pO1xufTtcbiIsInZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xuXG4vLyBEZXRlY3QgSUU4J3MgaW5jb21wbGV0ZSBkZWZpbmVQcm9wZXJ0eSBpbXBsZW1lbnRhdGlvblxubW9kdWxlLmV4cG9ydHMgPSAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICByZXR1cm4gT2JqZWN0LmRlZmluZVByb3BlcnR5KHt9LCAxLCB7IGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gNzsgfSB9KVsxXSAhPSA3O1xufSk7XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLW9iamVjdCcpO1xuXG52YXIgZG9jdW1lbnQgPSBnbG9iYWwuZG9jdW1lbnQ7XG4vLyB0eXBlb2YgZG9jdW1lbnQuY3JlYXRlRWxlbWVudCBpcyAnb2JqZWN0JyBpbiBvbGQgSUVcbnZhciBFWElTVFMgPSBpc09iamVjdChkb2N1bWVudCkgJiYgaXNPYmplY3QoZG9jdW1lbnQuY3JlYXRlRWxlbWVudCk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBFWElTVFMgPyBkb2N1bWVudC5jcmVhdGVFbGVtZW50KGl0KSA6IHt9O1xufTtcbiIsIi8vIGl0ZXJhYmxlIERPTSBjb2xsZWN0aW9uc1xuLy8gZmxhZyAtIGBpdGVyYWJsZWAgaW50ZXJmYWNlIC0gJ2VudHJpZXMnLCAna2V5cycsICd2YWx1ZXMnLCAnZm9yRWFjaCcgbWV0aG9kc1xubW9kdWxlLmV4cG9ydHMgPSB7XG4gIENTU1J1bGVMaXN0OiAwLFxuICBDU1NTdHlsZURlY2xhcmF0aW9uOiAwLFxuICBDU1NWYWx1ZUxpc3Q6IDAsXG4gIENsaWVudFJlY3RMaXN0OiAwLFxuICBET01SZWN0TGlzdDogMCxcbiAgRE9NU3RyaW5nTGlzdDogMCxcbiAgRE9NVG9rZW5MaXN0OiAxLFxuICBEYXRhVHJhbnNmZXJJdGVtTGlzdDogMCxcbiAgRmlsZUxpc3Q6IDAsXG4gIEhUTUxBbGxDb2xsZWN0aW9uOiAwLFxuICBIVE1MQ29sbGVjdGlvbjogMCxcbiAgSFRNTEZvcm1FbGVtZW50OiAwLFxuICBIVE1MU2VsZWN0RWxlbWVudDogMCxcbiAgTWVkaWFMaXN0OiAwLFxuICBNaW1lVHlwZUFycmF5OiAwLFxuICBOYW1lZE5vZGVNYXA6IDAsXG4gIE5vZGVMaXN0OiAxLFxuICBQYWludFJlcXVlc3RMaXN0OiAwLFxuICBQbHVnaW46IDAsXG4gIFBsdWdpbkFycmF5OiAwLFxuICBTVkdMZW5ndGhMaXN0OiAwLFxuICBTVkdOdW1iZXJMaXN0OiAwLFxuICBTVkdQYXRoU2VnTGlzdDogMCxcbiAgU1ZHUG9pbnRMaXN0OiAwLFxuICBTVkdTdHJpbmdMaXN0OiAwLFxuICBTVkdUcmFuc2Zvcm1MaXN0OiAwLFxuICBTb3VyY2VCdWZmZXJMaXN0OiAwLFxuICBTdHlsZVNoZWV0TGlzdDogMCxcbiAgVGV4dFRyYWNrQ3VlTGlzdDogMCxcbiAgVGV4dFRyYWNrTGlzdDogMCxcbiAgVG91Y2hMaXN0OiAwXG59O1xuIiwidmFyIHVzZXJBZ2VudCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9lbmdpbmUtdXNlci1hZ2VudCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IC8oaXBob25lfGlwb2R8aXBhZCkuKmFwcGxld2Via2l0L2kudGVzdCh1c2VyQWdlbnQpO1xuIiwidmFyIGNsYXNzb2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY2xhc3NvZi1yYXcnKTtcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gY2xhc3NvZihnbG9iYWwucHJvY2VzcykgPT0gJ3Byb2Nlc3MnO1xuIiwidmFyIHVzZXJBZ2VudCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9lbmdpbmUtdXNlci1hZ2VudCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IC93ZWIwcyg/IS4qY2hyb21lKS9pLnRlc3QodXNlckFnZW50KTtcbiIsInZhciBnZXRCdWlsdEluID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dldC1idWlsdC1pbicpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGdldEJ1aWx0SW4oJ25hdmlnYXRvcicsICd1c2VyQWdlbnQnKSB8fCAnJztcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgdXNlckFnZW50ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2VuZ2luZS11c2VyLWFnZW50Jyk7XG5cbnZhciBwcm9jZXNzID0gZ2xvYmFsLnByb2Nlc3M7XG52YXIgdmVyc2lvbnMgPSBwcm9jZXNzICYmIHByb2Nlc3MudmVyc2lvbnM7XG52YXIgdjggPSB2ZXJzaW9ucyAmJiB2ZXJzaW9ucy52ODtcbnZhciBtYXRjaCwgdmVyc2lvbjtcblxuaWYgKHY4KSB7XG4gIG1hdGNoID0gdjguc3BsaXQoJy4nKTtcbiAgdmVyc2lvbiA9IG1hdGNoWzBdICsgbWF0Y2hbMV07XG59IGVsc2UgaWYgKHVzZXJBZ2VudCkge1xuICBtYXRjaCA9IHVzZXJBZ2VudC5tYXRjaCgvRWRnZVxcLyhcXGQrKS8pO1xuICBpZiAoIW1hdGNoIHx8IG1hdGNoWzFdID49IDc0KSB7XG4gICAgbWF0Y2ggPSB1c2VyQWdlbnQubWF0Y2goL0Nocm9tZVxcLyhcXGQrKS8pO1xuICAgIGlmIChtYXRjaCkgdmVyc2lvbiA9IG1hdGNoWzFdO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gdmVyc2lvbiAmJiArdmVyc2lvbjtcbiIsIi8vIElFOC0gZG9uJ3QgZW51bSBidWcga2V5c1xubW9kdWxlLmV4cG9ydHMgPSBbXG4gICdjb25zdHJ1Y3RvcicsXG4gICdoYXNPd25Qcm9wZXJ0eScsXG4gICdpc1Byb3RvdHlwZU9mJyxcbiAgJ3Byb3BlcnR5SXNFbnVtZXJhYmxlJyxcbiAgJ3RvTG9jYWxlU3RyaW5nJyxcbiAgJ3RvU3RyaW5nJyxcbiAgJ3ZhbHVlT2YnXG5dO1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1vd24tcHJvcGVydHktZGVzY3JpcHRvcicpLmY7XG52YXIgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1ub24tZW51bWVyYWJsZS1wcm9wZXJ0eScpO1xudmFyIHJlZGVmaW5lID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlZGVmaW5lJyk7XG52YXIgc2V0R2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NldC1nbG9iYWwnKTtcbnZhciBjb3B5Q29uc3RydWN0b3JQcm9wZXJ0aWVzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NvcHktY29uc3RydWN0b3ItcHJvcGVydGllcycpO1xudmFyIGlzRm9yY2VkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLWZvcmNlZCcpO1xuXG4vKlxuICBvcHRpb25zLnRhcmdldCAgICAgIC0gbmFtZSBvZiB0aGUgdGFyZ2V0IG9iamVjdFxuICBvcHRpb25zLmdsb2JhbCAgICAgIC0gdGFyZ2V0IGlzIHRoZSBnbG9iYWwgb2JqZWN0XG4gIG9wdGlvbnMuc3RhdCAgICAgICAgLSBleHBvcnQgYXMgc3RhdGljIG1ldGhvZHMgb2YgdGFyZ2V0XG4gIG9wdGlvbnMucHJvdG8gICAgICAgLSBleHBvcnQgYXMgcHJvdG90eXBlIG1ldGhvZHMgb2YgdGFyZ2V0XG4gIG9wdGlvbnMucmVhbCAgICAgICAgLSByZWFsIHByb3RvdHlwZSBtZXRob2QgZm9yIHRoZSBgcHVyZWAgdmVyc2lvblxuICBvcHRpb25zLmZvcmNlZCAgICAgIC0gZXhwb3J0IGV2ZW4gaWYgdGhlIG5hdGl2ZSBmZWF0dXJlIGlzIGF2YWlsYWJsZVxuICBvcHRpb25zLmJpbmQgICAgICAgIC0gYmluZCBtZXRob2RzIHRvIHRoZSB0YXJnZXQsIHJlcXVpcmVkIGZvciB0aGUgYHB1cmVgIHZlcnNpb25cbiAgb3B0aW9ucy53cmFwICAgICAgICAtIHdyYXAgY29uc3RydWN0b3JzIHRvIHByZXZlbnRpbmcgZ2xvYmFsIHBvbGx1dGlvbiwgcmVxdWlyZWQgZm9yIHRoZSBgcHVyZWAgdmVyc2lvblxuICBvcHRpb25zLnVuc2FmZSAgICAgIC0gdXNlIHRoZSBzaW1wbGUgYXNzaWdubWVudCBvZiBwcm9wZXJ0eSBpbnN0ZWFkIG9mIGRlbGV0ZSArIGRlZmluZVByb3BlcnR5XG4gIG9wdGlvbnMuc2hhbSAgICAgICAgLSBhZGQgYSBmbGFnIHRvIG5vdCBjb21wbGV0ZWx5IGZ1bGwgcG9seWZpbGxzXG4gIG9wdGlvbnMuZW51bWVyYWJsZSAgLSBleHBvcnQgYXMgZW51bWVyYWJsZSBwcm9wZXJ0eVxuICBvcHRpb25zLm5vVGFyZ2V0R2V0IC0gcHJldmVudCBjYWxsaW5nIGEgZ2V0dGVyIG9uIHRhcmdldFxuKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG9wdGlvbnMsIHNvdXJjZSkge1xuICB2YXIgVEFSR0VUID0gb3B0aW9ucy50YXJnZXQ7XG4gIHZhciBHTE9CQUwgPSBvcHRpb25zLmdsb2JhbDtcbiAgdmFyIFNUQVRJQyA9IG9wdGlvbnMuc3RhdDtcbiAgdmFyIEZPUkNFRCwgdGFyZ2V0LCBrZXksIHRhcmdldFByb3BlcnR5LCBzb3VyY2VQcm9wZXJ0eSwgZGVzY3JpcHRvcjtcbiAgaWYgKEdMT0JBTCkge1xuICAgIHRhcmdldCA9IGdsb2JhbDtcbiAgfSBlbHNlIGlmIChTVEFUSUMpIHtcbiAgICB0YXJnZXQgPSBnbG9iYWxbVEFSR0VUXSB8fCBzZXRHbG9iYWwoVEFSR0VULCB7fSk7XG4gIH0gZWxzZSB7XG4gICAgdGFyZ2V0ID0gKGdsb2JhbFtUQVJHRVRdIHx8IHt9KS5wcm90b3R5cGU7XG4gIH1cbiAgaWYgKHRhcmdldCkgZm9yIChrZXkgaW4gc291cmNlKSB7XG4gICAgc291cmNlUHJvcGVydHkgPSBzb3VyY2Vba2V5XTtcbiAgICBpZiAob3B0aW9ucy5ub1RhcmdldEdldCkge1xuICAgICAgZGVzY3JpcHRvciA9IGdldE93blByb3BlcnR5RGVzY3JpcHRvcih0YXJnZXQsIGtleSk7XG4gICAgICB0YXJnZXRQcm9wZXJ0eSA9IGRlc2NyaXB0b3IgJiYgZGVzY3JpcHRvci52YWx1ZTtcbiAgICB9IGVsc2UgdGFyZ2V0UHJvcGVydHkgPSB0YXJnZXRba2V5XTtcbiAgICBGT1JDRUQgPSBpc0ZvcmNlZChHTE9CQUwgPyBrZXkgOiBUQVJHRVQgKyAoU1RBVElDID8gJy4nIDogJyMnKSArIGtleSwgb3B0aW9ucy5mb3JjZWQpO1xuICAgIC8vIGNvbnRhaW5lZCBpbiB0YXJnZXRcbiAgICBpZiAoIUZPUkNFRCAmJiB0YXJnZXRQcm9wZXJ0eSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBpZiAodHlwZW9mIHNvdXJjZVByb3BlcnR5ID09PSB0eXBlb2YgdGFyZ2V0UHJvcGVydHkpIGNvbnRpbnVlO1xuICAgICAgY29weUNvbnN0cnVjdG9yUHJvcGVydGllcyhzb3VyY2VQcm9wZXJ0eSwgdGFyZ2V0UHJvcGVydHkpO1xuICAgIH1cbiAgICAvLyBhZGQgYSBmbGFnIHRvIG5vdCBjb21wbGV0ZWx5IGZ1bGwgcG9seWZpbGxzXG4gICAgaWYgKG9wdGlvbnMuc2hhbSB8fCAodGFyZ2V0UHJvcGVydHkgJiYgdGFyZ2V0UHJvcGVydHkuc2hhbSkpIHtcbiAgICAgIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eShzb3VyY2VQcm9wZXJ0eSwgJ3NoYW0nLCB0cnVlKTtcbiAgICB9XG4gICAgLy8gZXh0ZW5kIGdsb2JhbFxuICAgIHJlZGVmaW5lKHRhcmdldCwga2V5LCBzb3VyY2VQcm9wZXJ0eSwgb3B0aW9ucyk7XG4gIH1cbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChleGVjKSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuICEhZXhlYygpO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gVE9ETzogUmVtb3ZlIGZyb20gYGNvcmUtanNANGAgc2luY2UgaXQncyBtb3ZlZCB0byBlbnRyeSBwb2ludHNcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMucmVnZXhwLmV4ZWMnKTtcbnZhciByZWRlZmluZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZWRlZmluZScpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG52YXIgd2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sJyk7XG52YXIgcmVnZXhwRXhlYyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZWdleHAtZXhlYycpO1xudmFyIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtbm9uLWVudW1lcmFibGUtcHJvcGVydHknKTtcblxudmFyIFNQRUNJRVMgPSB3ZWxsS25vd25TeW1ib2woJ3NwZWNpZXMnKTtcblxudmFyIFJFUExBQ0VfU1VQUE9SVFNfTkFNRURfR1JPVVBTID0gIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgLy8gI3JlcGxhY2UgbmVlZHMgYnVpbHQtaW4gc3VwcG9ydCBmb3IgbmFtZWQgZ3JvdXBzLlxuICAvLyAjbWF0Y2ggd29ya3MgZmluZSBiZWNhdXNlIGl0IGp1c3QgcmV0dXJuIHRoZSBleGVjIHJlc3VsdHMsIGV2ZW4gaWYgaXQgaGFzXG4gIC8vIGEgXCJncm9wc1wiIHByb3BlcnR5LlxuICB2YXIgcmUgPSAvLi87XG4gIHJlLmV4ZWMgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHJlc3VsdCA9IFtdO1xuICAgIHJlc3VsdC5ncm91cHMgPSB7IGE6ICc3JyB9O1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH07XG4gIHJldHVybiAnJy5yZXBsYWNlKHJlLCAnJDxhPicpICE9PSAnNyc7XG59KTtcblxuLy8gSUUgPD0gMTEgcmVwbGFjZXMgJDAgd2l0aCB0aGUgd2hvbGUgbWF0Y2gsIGFzIGlmIGl0IHdhcyAkJlxuLy8gaHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvNjAyNDY2Ni9nZXR0aW5nLWllLXRvLXJlcGxhY2UtYS1yZWdleC13aXRoLXRoZS1saXRlcmFsLXN0cmluZy0wXG52YXIgUkVQTEFDRV9LRUVQU18kMCA9IChmdW5jdGlvbiAoKSB7XG4gIHJldHVybiAnYScucmVwbGFjZSgvLi8sICckMCcpID09PSAnJDAnO1xufSkoKTtcblxudmFyIFJFUExBQ0UgPSB3ZWxsS25vd25TeW1ib2woJ3JlcGxhY2UnKTtcbi8vIFNhZmFyaSA8PSAxMy4wLjMoPykgc3Vic3RpdHV0ZXMgbnRoIGNhcHR1cmUgd2hlcmUgbj5tIHdpdGggYW4gZW1wdHkgc3RyaW5nXG52YXIgUkVHRVhQX1JFUExBQ0VfU1VCU1RJVFVURVNfVU5ERUZJTkVEX0NBUFRVUkUgPSAoZnVuY3Rpb24gKCkge1xuICBpZiAoLy4vW1JFUExBQ0VdKSB7XG4gICAgcmV0dXJuIC8uL1tSRVBMQUNFXSgnYScsICckMCcpID09PSAnJztcbiAgfVxuICByZXR1cm4gZmFsc2U7XG59KSgpO1xuXG4vLyBDaHJvbWUgNTEgaGFzIGEgYnVnZ3kgXCJzcGxpdFwiIGltcGxlbWVudGF0aW9uIHdoZW4gUmVnRXhwI2V4ZWMgIT09IG5hdGl2ZUV4ZWNcbi8vIFdlZXggSlMgaGFzIGZyb3plbiBidWlsdC1pbiBwcm90b3R5cGVzLCBzbyB1c2UgdHJ5IC8gY2F0Y2ggd3JhcHBlclxudmFyIFNQTElUX1dPUktTX1dJVEhfT1ZFUldSSVRURU5fRVhFQyA9ICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gIHZhciByZSA9IC8oPzopLztcbiAgdmFyIG9yaWdpbmFsRXhlYyA9IHJlLmV4ZWM7XG4gIHJlLmV4ZWMgPSBmdW5jdGlvbiAoKSB7IHJldHVybiBvcmlnaW5hbEV4ZWMuYXBwbHkodGhpcywgYXJndW1lbnRzKTsgfTtcbiAgdmFyIHJlc3VsdCA9ICdhYicuc3BsaXQocmUpO1xuICByZXR1cm4gcmVzdWx0Lmxlbmd0aCAhPT0gMiB8fCByZXN1bHRbMF0gIT09ICdhJyB8fCByZXN1bHRbMV0gIT09ICdiJztcbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChLRVksIGxlbmd0aCwgZXhlYywgc2hhbSkge1xuICB2YXIgU1lNQk9MID0gd2VsbEtub3duU3ltYm9sKEtFWSk7XG5cbiAgdmFyIERFTEVHQVRFU19UT19TWU1CT0wgPSAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgIC8vIFN0cmluZyBtZXRob2RzIGNhbGwgc3ltYm9sLW5hbWVkIFJlZ0VwIG1ldGhvZHNcbiAgICB2YXIgTyA9IHt9O1xuICAgIE9bU1lNQk9MXSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIDc7IH07XG4gICAgcmV0dXJuICcnW0tFWV0oTykgIT0gNztcbiAgfSk7XG5cbiAgdmFyIERFTEVHQVRFU19UT19FWEVDID0gREVMRUdBVEVTX1RPX1NZTUJPTCAmJiAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgIC8vIFN5bWJvbC1uYW1lZCBSZWdFeHAgbWV0aG9kcyBjYWxsIC5leGVjXG4gICAgdmFyIGV4ZWNDYWxsZWQgPSBmYWxzZTtcbiAgICB2YXIgcmUgPSAvYS87XG5cbiAgICBpZiAoS0VZID09PSAnc3BsaXQnKSB7XG4gICAgICAvLyBXZSBjYW4ndCB1c2UgcmVhbCByZWdleCBoZXJlIHNpbmNlIGl0IGNhdXNlcyBkZW9wdGltaXphdGlvblxuICAgICAgLy8gYW5kIHNlcmlvdXMgcGVyZm9ybWFuY2UgZGVncmFkYXRpb24gaW4gVjhcbiAgICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS96bG9pcm9jay9jb3JlLWpzL2lzc3Vlcy8zMDZcbiAgICAgIHJlID0ge307XG4gICAgICAvLyBSZWdFeHBbQEBzcGxpdF0gZG9lc24ndCBjYWxsIHRoZSByZWdleCdzIGV4ZWMgbWV0aG9kLCBidXQgZmlyc3QgY3JlYXRlc1xuICAgICAgLy8gYSBuZXcgb25lLiBXZSBuZWVkIHRvIHJldHVybiB0aGUgcGF0Y2hlZCByZWdleCB3aGVuIGNyZWF0aW5nIHRoZSBuZXcgb25lLlxuICAgICAgcmUuY29uc3RydWN0b3IgPSB7fTtcbiAgICAgIHJlLmNvbnN0cnVjdG9yW1NQRUNJRVNdID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gcmU7IH07XG4gICAgICByZS5mbGFncyA9ICcnO1xuICAgICAgcmVbU1lNQk9MXSA9IC8uL1tTWU1CT0xdO1xuICAgIH1cblxuICAgIHJlLmV4ZWMgPSBmdW5jdGlvbiAoKSB7IGV4ZWNDYWxsZWQgPSB0cnVlOyByZXR1cm4gbnVsbDsgfTtcblxuICAgIHJlW1NZTUJPTF0oJycpO1xuICAgIHJldHVybiAhZXhlY0NhbGxlZDtcbiAgfSk7XG5cbiAgaWYgKFxuICAgICFERUxFR0FURVNfVE9fU1lNQk9MIHx8XG4gICAgIURFTEVHQVRFU19UT19FWEVDIHx8XG4gICAgKEtFWSA9PT0gJ3JlcGxhY2UnICYmICEoXG4gICAgICBSRVBMQUNFX1NVUFBPUlRTX05BTUVEX0dST1VQUyAmJlxuICAgICAgUkVQTEFDRV9LRUVQU18kMCAmJlxuICAgICAgIVJFR0VYUF9SRVBMQUNFX1NVQlNUSVRVVEVTX1VOREVGSU5FRF9DQVBUVVJFXG4gICAgKSkgfHxcbiAgICAoS0VZID09PSAnc3BsaXQnICYmICFTUExJVF9XT1JLU19XSVRIX09WRVJXUklUVEVOX0VYRUMpXG4gICkge1xuICAgIHZhciBuYXRpdmVSZWdFeHBNZXRob2QgPSAvLi9bU1lNQk9MXTtcbiAgICB2YXIgbWV0aG9kcyA9IGV4ZWMoU1lNQk9MLCAnJ1tLRVldLCBmdW5jdGlvbiAobmF0aXZlTWV0aG9kLCByZWdleHAsIHN0ciwgYXJnMiwgZm9yY2VTdHJpbmdNZXRob2QpIHtcbiAgICAgIGlmIChyZWdleHAuZXhlYyA9PT0gcmVnZXhwRXhlYykge1xuICAgICAgICBpZiAoREVMRUdBVEVTX1RPX1NZTUJPTCAmJiAhZm9yY2VTdHJpbmdNZXRob2QpIHtcbiAgICAgICAgICAvLyBUaGUgbmF0aXZlIFN0cmluZyBtZXRob2QgYWxyZWFkeSBkZWxlZ2F0ZXMgdG8gQEBtZXRob2QgKHRoaXNcbiAgICAgICAgICAvLyBwb2x5ZmlsbGVkIGZ1bmN0aW9uKSwgbGVhc2luZyB0byBpbmZpbml0ZSByZWN1cnNpb24uXG4gICAgICAgICAgLy8gV2UgYXZvaWQgaXQgYnkgZGlyZWN0bHkgY2FsbGluZyB0aGUgbmF0aXZlIEBAbWV0aG9kIG1ldGhvZC5cbiAgICAgICAgICByZXR1cm4geyBkb25lOiB0cnVlLCB2YWx1ZTogbmF0aXZlUmVnRXhwTWV0aG9kLmNhbGwocmVnZXhwLCBzdHIsIGFyZzIpIH07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHsgZG9uZTogdHJ1ZSwgdmFsdWU6IG5hdGl2ZU1ldGhvZC5jYWxsKHN0ciwgcmVnZXhwLCBhcmcyKSB9O1xuICAgICAgfVxuICAgICAgcmV0dXJuIHsgZG9uZTogZmFsc2UgfTtcbiAgICB9LCB7XG4gICAgICBSRVBMQUNFX0tFRVBTXyQwOiBSRVBMQUNFX0tFRVBTXyQwLFxuICAgICAgUkVHRVhQX1JFUExBQ0VfU1VCU1RJVFVURVNfVU5ERUZJTkVEX0NBUFRVUkU6IFJFR0VYUF9SRVBMQUNFX1NVQlNUSVRVVEVTX1VOREVGSU5FRF9DQVBUVVJFXG4gICAgfSk7XG4gICAgdmFyIHN0cmluZ01ldGhvZCA9IG1ldGhvZHNbMF07XG4gICAgdmFyIHJlZ2V4TWV0aG9kID0gbWV0aG9kc1sxXTtcblxuICAgIHJlZGVmaW5lKFN0cmluZy5wcm90b3R5cGUsIEtFWSwgc3RyaW5nTWV0aG9kKTtcbiAgICByZWRlZmluZShSZWdFeHAucHJvdG90eXBlLCBTWU1CT0wsIGxlbmd0aCA9PSAyXG4gICAgICAvLyAyMS4yLjUuOCBSZWdFeHAucHJvdG90eXBlW0BAcmVwbGFjZV0oc3RyaW5nLCByZXBsYWNlVmFsdWUpXG4gICAgICAvLyAyMS4yLjUuMTEgUmVnRXhwLnByb3RvdHlwZVtAQHNwbGl0XShzdHJpbmcsIGxpbWl0KVxuICAgICAgPyBmdW5jdGlvbiAoc3RyaW5nLCBhcmcpIHsgcmV0dXJuIHJlZ2V4TWV0aG9kLmNhbGwoc3RyaW5nLCB0aGlzLCBhcmcpOyB9XG4gICAgICAvLyAyMS4yLjUuNiBSZWdFeHAucHJvdG90eXBlW0BAbWF0Y2hdKHN0cmluZylcbiAgICAgIC8vIDIxLjIuNS45IFJlZ0V4cC5wcm90b3R5cGVbQEBzZWFyY2hdKHN0cmluZylcbiAgICAgIDogZnVuY3Rpb24gKHN0cmluZykgeyByZXR1cm4gcmVnZXhNZXRob2QuY2FsbChzdHJpbmcsIHRoaXMpOyB9XG4gICAgKTtcbiAgfVxuXG4gIGlmIChzaGFtKSBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkoUmVnRXhwLnByb3RvdHlwZVtTWU1CT0xdLCAnc2hhbScsIHRydWUpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBpc0FycmF5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLWFycmF5Jyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tbGVuZ3RoJyk7XG52YXIgYmluZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi1iaW5kLWNvbnRleHQnKTtcblxuLy8gYEZsYXR0ZW5JbnRvQXJyYXlgIGFic3RyYWN0IG9wZXJhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9wcm9wb3NhbC1mbGF0TWFwLyNzZWMtRmxhdHRlbkludG9BcnJheVxudmFyIGZsYXR0ZW5JbnRvQXJyYXkgPSBmdW5jdGlvbiAodGFyZ2V0LCBvcmlnaW5hbCwgc291cmNlLCBzb3VyY2VMZW4sIHN0YXJ0LCBkZXB0aCwgbWFwcGVyLCB0aGlzQXJnKSB7XG4gIHZhciB0YXJnZXRJbmRleCA9IHN0YXJ0O1xuICB2YXIgc291cmNlSW5kZXggPSAwO1xuICB2YXIgbWFwRm4gPSBtYXBwZXIgPyBiaW5kKG1hcHBlciwgdGhpc0FyZywgMykgOiBmYWxzZTtcbiAgdmFyIGVsZW1lbnQ7XG5cbiAgd2hpbGUgKHNvdXJjZUluZGV4IDwgc291cmNlTGVuKSB7XG4gICAgaWYgKHNvdXJjZUluZGV4IGluIHNvdXJjZSkge1xuICAgICAgZWxlbWVudCA9IG1hcEZuID8gbWFwRm4oc291cmNlW3NvdXJjZUluZGV4XSwgc291cmNlSW5kZXgsIG9yaWdpbmFsKSA6IHNvdXJjZVtzb3VyY2VJbmRleF07XG5cbiAgICAgIGlmIChkZXB0aCA+IDAgJiYgaXNBcnJheShlbGVtZW50KSkge1xuICAgICAgICB0YXJnZXRJbmRleCA9IGZsYXR0ZW5JbnRvQXJyYXkodGFyZ2V0LCBvcmlnaW5hbCwgZWxlbWVudCwgdG9MZW5ndGgoZWxlbWVudC5sZW5ndGgpLCB0YXJnZXRJbmRleCwgZGVwdGggLSAxKSAtIDE7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAodGFyZ2V0SW5kZXggPj0gMHgxRkZGRkZGRkZGRkZGRikgdGhyb3cgVHlwZUVycm9yKCdFeGNlZWQgdGhlIGFjY2VwdGFibGUgYXJyYXkgbGVuZ3RoJyk7XG4gICAgICAgIHRhcmdldFt0YXJnZXRJbmRleF0gPSBlbGVtZW50O1xuICAgICAgfVxuXG4gICAgICB0YXJnZXRJbmRleCsrO1xuICAgIH1cbiAgICBzb3VyY2VJbmRleCsrO1xuICB9XG4gIHJldHVybiB0YXJnZXRJbmRleDtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gZmxhdHRlbkludG9BcnJheTtcbiIsInZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9ICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBPYmplY3QuaXNFeHRlbnNpYmxlKE9iamVjdC5wcmV2ZW50RXh0ZW5zaW9ucyh7fSkpO1xufSk7XG4iLCJ2YXIgYUZ1bmN0aW9uID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2EtZnVuY3Rpb24nKTtcblxuLy8gb3B0aW9uYWwgLyBzaW1wbGUgY29udGV4dCBiaW5kaW5nXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChmbiwgdGhhdCwgbGVuZ3RoKSB7XG4gIGFGdW5jdGlvbihmbik7XG4gIGlmICh0aGF0ID09PSB1bmRlZmluZWQpIHJldHVybiBmbjtcbiAgc3dpdGNoIChsZW5ndGgpIHtcbiAgICBjYXNlIDA6IHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gZm4uY2FsbCh0aGF0KTtcbiAgICB9O1xuICAgIGNhc2UgMTogcmV0dXJuIGZ1bmN0aW9uIChhKSB7XG4gICAgICByZXR1cm4gZm4uY2FsbCh0aGF0LCBhKTtcbiAgICB9O1xuICAgIGNhc2UgMjogcmV0dXJuIGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgICByZXR1cm4gZm4uY2FsbCh0aGF0LCBhLCBiKTtcbiAgICB9O1xuICAgIGNhc2UgMzogcmV0dXJuIGZ1bmN0aW9uIChhLCBiLCBjKSB7XG4gICAgICByZXR1cm4gZm4uY2FsbCh0aGF0LCBhLCBiLCBjKTtcbiAgICB9O1xuICB9XG4gIHJldHVybiBmdW5jdGlvbiAoLyogLi4uYXJncyAqLykge1xuICAgIHJldHVybiBmbi5hcHBseSh0aGF0LCBhcmd1bWVudHMpO1xuICB9O1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBhRnVuY3Rpb24gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYS1mdW5jdGlvbicpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLW9iamVjdCcpO1xuXG52YXIgc2xpY2UgPSBbXS5zbGljZTtcbnZhciBmYWN0b3JpZXMgPSB7fTtcblxudmFyIGNvbnN0cnVjdCA9IGZ1bmN0aW9uIChDLCBhcmdzTGVuZ3RoLCBhcmdzKSB7XG4gIGlmICghKGFyZ3NMZW5ndGggaW4gZmFjdG9yaWVzKSkge1xuICAgIGZvciAodmFyIGxpc3QgPSBbXSwgaSA9IDA7IGkgPCBhcmdzTGVuZ3RoOyBpKyspIGxpc3RbaV0gPSAnYVsnICsgaSArICddJztcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tbmV3LWZ1bmNcbiAgICBmYWN0b3JpZXNbYXJnc0xlbmd0aF0gPSBGdW5jdGlvbignQyxhJywgJ3JldHVybiBuZXcgQygnICsgbGlzdC5qb2luKCcsJykgKyAnKScpO1xuICB9IHJldHVybiBmYWN0b3JpZXNbYXJnc0xlbmd0aF0oQywgYXJncyk7XG59O1xuXG4vLyBgRnVuY3Rpb24ucHJvdG90eXBlLmJpbmRgIG1ldGhvZCBpbXBsZW1lbnRhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1mdW5jdGlvbi5wcm90b3R5cGUuYmluZFxubW9kdWxlLmV4cG9ydHMgPSBGdW5jdGlvbi5iaW5kIHx8IGZ1bmN0aW9uIGJpbmQodGhhdCAvKiAsIC4uLmFyZ3MgKi8pIHtcbiAgdmFyIGZuID0gYUZ1bmN0aW9uKHRoaXMpO1xuICB2YXIgcGFydEFyZ3MgPSBzbGljZS5jYWxsKGFyZ3VtZW50cywgMSk7XG4gIHZhciBib3VuZEZ1bmN0aW9uID0gZnVuY3Rpb24gYm91bmQoLyogYXJncy4uLiAqLykge1xuICAgIHZhciBhcmdzID0gcGFydEFyZ3MuY29uY2F0KHNsaWNlLmNhbGwoYXJndW1lbnRzKSk7XG4gICAgcmV0dXJuIHRoaXMgaW5zdGFuY2VvZiBib3VuZEZ1bmN0aW9uID8gY29uc3RydWN0KGZuLCBhcmdzLmxlbmd0aCwgYXJncykgOiBmbi5hcHBseSh0aGF0LCBhcmdzKTtcbiAgfTtcbiAgaWYgKGlzT2JqZWN0KGZuLnByb3RvdHlwZSkpIGJvdW5kRnVuY3Rpb24ucHJvdG90eXBlID0gZm4ucHJvdG90eXBlO1xuICByZXR1cm4gYm91bmRGdW5jdGlvbjtcbn07XG4iLCJ2YXIgcGF0aCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9wYXRoJyk7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xuXG52YXIgYUZ1bmN0aW9uID0gZnVuY3Rpb24gKHZhcmlhYmxlKSB7XG4gIHJldHVybiB0eXBlb2YgdmFyaWFibGUgPT0gJ2Z1bmN0aW9uJyA/IHZhcmlhYmxlIDogdW5kZWZpbmVkO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAobmFtZXNwYWNlLCBtZXRob2QpIHtcbiAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPCAyID8gYUZ1bmN0aW9uKHBhdGhbbmFtZXNwYWNlXSkgfHwgYUZ1bmN0aW9uKGdsb2JhbFtuYW1lc3BhY2VdKVxuICAgIDogcGF0aFtuYW1lc3BhY2VdICYmIHBhdGhbbmFtZXNwYWNlXVttZXRob2RdIHx8IGdsb2JhbFtuYW1lc3BhY2VdICYmIGdsb2JhbFtuYW1lc3BhY2VdW21ldGhvZF07XG59O1xuIiwidmFyIGNsYXNzb2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY2xhc3NvZicpO1xudmFyIEl0ZXJhdG9ycyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pdGVyYXRvcnMnKTtcbnZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcblxudmFyIElURVJBVE9SID0gd2VsbEtub3duU3ltYm9sKCdpdGVyYXRvcicpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICBpZiAoaXQgIT0gdW5kZWZpbmVkKSByZXR1cm4gaXRbSVRFUkFUT1JdXG4gICAgfHwgaXRbJ0BAaXRlcmF0b3InXVxuICAgIHx8IEl0ZXJhdG9yc1tjbGFzc29mKGl0KV07XG59O1xuIiwidmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLW9iamVjdCcpO1xudmFyIGdldEl0ZXJhdG9yTWV0aG9kID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dldC1pdGVyYXRvci1tZXRob2QnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgdmFyIGl0ZXJhdG9yTWV0aG9kID0gZ2V0SXRlcmF0b3JNZXRob2QoaXQpO1xuICBpZiAodHlwZW9mIGl0ZXJhdG9yTWV0aG9kICE9ICdmdW5jdGlvbicpIHtcbiAgICB0aHJvdyBUeXBlRXJyb3IoU3RyaW5nKGl0KSArICcgaXMgbm90IGl0ZXJhYmxlJyk7XG4gIH0gcmV0dXJuIGFuT2JqZWN0KGl0ZXJhdG9yTWV0aG9kLmNhbGwoaXQpKTtcbn07XG4iLCJ2YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tb2JqZWN0Jyk7XG5cbnZhciBmbG9vciA9IE1hdGguZmxvb3I7XG52YXIgcmVwbGFjZSA9ICcnLnJlcGxhY2U7XG52YXIgU1VCU1RJVFVUSU9OX1NZTUJPTFMgPSAvXFwkKFskJidgXXxcXGRcXGQ/fDxbXj5dKj4pL2c7XG52YXIgU1VCU1RJVFVUSU9OX1NZTUJPTFNfTk9fTkFNRUQgPSAvXFwkKFskJidgXXxcXGRcXGQ/KS9nO1xuXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWdldHN1YnN0aXR1dGlvblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAobWF0Y2hlZCwgc3RyLCBwb3NpdGlvbiwgY2FwdHVyZXMsIG5hbWVkQ2FwdHVyZXMsIHJlcGxhY2VtZW50KSB7XG4gIHZhciB0YWlsUG9zID0gcG9zaXRpb24gKyBtYXRjaGVkLmxlbmd0aDtcbiAgdmFyIG0gPSBjYXB0dXJlcy5sZW5ndGg7XG4gIHZhciBzeW1ib2xzID0gU1VCU1RJVFVUSU9OX1NZTUJPTFNfTk9fTkFNRUQ7XG4gIGlmIChuYW1lZENhcHR1cmVzICE9PSB1bmRlZmluZWQpIHtcbiAgICBuYW1lZENhcHR1cmVzID0gdG9PYmplY3QobmFtZWRDYXB0dXJlcyk7XG4gICAgc3ltYm9scyA9IFNVQlNUSVRVVElPTl9TWU1CT0xTO1xuICB9XG4gIHJldHVybiByZXBsYWNlLmNhbGwocmVwbGFjZW1lbnQsIHN5bWJvbHMsIGZ1bmN0aW9uIChtYXRjaCwgY2gpIHtcbiAgICB2YXIgY2FwdHVyZTtcbiAgICBzd2l0Y2ggKGNoLmNoYXJBdCgwKSkge1xuICAgICAgY2FzZSAnJCc6IHJldHVybiAnJCc7XG4gICAgICBjYXNlICcmJzogcmV0dXJuIG1hdGNoZWQ7XG4gICAgICBjYXNlICdgJzogcmV0dXJuIHN0ci5zbGljZSgwLCBwb3NpdGlvbik7XG4gICAgICBjYXNlIFwiJ1wiOiByZXR1cm4gc3RyLnNsaWNlKHRhaWxQb3MpO1xuICAgICAgY2FzZSAnPCc6XG4gICAgICAgIGNhcHR1cmUgPSBuYW1lZENhcHR1cmVzW2NoLnNsaWNlKDEsIC0xKV07XG4gICAgICAgIGJyZWFrO1xuICAgICAgZGVmYXVsdDogLy8gXFxkXFxkP1xuICAgICAgICB2YXIgbiA9ICtjaDtcbiAgICAgICAgaWYgKG4gPT09IDApIHJldHVybiBtYXRjaDtcbiAgICAgICAgaWYgKG4gPiBtKSB7XG4gICAgICAgICAgdmFyIGYgPSBmbG9vcihuIC8gMTApO1xuICAgICAgICAgIGlmIChmID09PSAwKSByZXR1cm4gbWF0Y2g7XG4gICAgICAgICAgaWYgKGYgPD0gbSkgcmV0dXJuIGNhcHR1cmVzW2YgLSAxXSA9PT0gdW5kZWZpbmVkID8gY2guY2hhckF0KDEpIDogY2FwdHVyZXNbZiAtIDFdICsgY2guY2hhckF0KDEpO1xuICAgICAgICAgIHJldHVybiBtYXRjaDtcbiAgICAgICAgfVxuICAgICAgICBjYXB0dXJlID0gY2FwdHVyZXNbbiAtIDFdO1xuICAgIH1cbiAgICByZXR1cm4gY2FwdHVyZSA9PT0gdW5kZWZpbmVkID8gJycgOiBjYXB0dXJlO1xuICB9KTtcbn07XG4iLCJ2YXIgY2hlY2sgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIGl0ICYmIGl0Lk1hdGggPT0gTWF0aCAmJiBpdDtcbn07XG5cbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS96bG9pcm9jay9jb3JlLWpzL2lzc3Vlcy84NiNpc3N1ZWNvbW1lbnQtMTE1NzU5MDI4XG5tb2R1bGUuZXhwb3J0cyA9XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bmRlZlxuICBjaGVjayh0eXBlb2YgZ2xvYmFsVGhpcyA9PSAnb2JqZWN0JyAmJiBnbG9iYWxUaGlzKSB8fFxuICBjaGVjayh0eXBlb2Ygd2luZG93ID09ICdvYmplY3QnICYmIHdpbmRvdykgfHxcbiAgY2hlY2sodHlwZW9mIHNlbGYgPT0gJ29iamVjdCcgJiYgc2VsZikgfHxcbiAgY2hlY2sodHlwZW9mIGdsb2JhbCA9PSAnb2JqZWN0JyAmJiBnbG9iYWwpIHx8XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1uZXctZnVuY1xuICAoZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpczsgfSkoKSB8fCBGdW5jdGlvbigncmV0dXJuIHRoaXMnKSgpO1xuIiwidmFyIGhhc093blByb3BlcnR5ID0ge30uaGFzT3duUHJvcGVydHk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0LCBrZXkpIHtcbiAgcmV0dXJuIGhhc093blByb3BlcnR5LmNhbGwoaXQsIGtleSk7XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSB7fTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGEsIGIpIHtcbiAgdmFyIGNvbnNvbGUgPSBnbG9iYWwuY29uc29sZTtcbiAgaWYgKGNvbnNvbGUgJiYgY29uc29sZS5lcnJvcikge1xuICAgIGFyZ3VtZW50cy5sZW5ndGggPT09IDEgPyBjb25zb2xlLmVycm9yKGEpIDogY29uc29sZS5lcnJvcihhLCBiKTtcbiAgfVxufTtcbiIsInZhciBnZXRCdWlsdEluID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dldC1idWlsdC1pbicpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGdldEJ1aWx0SW4oJ2RvY3VtZW50JywgJ2RvY3VtZW50RWxlbWVudCcpO1xuIiwidmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Rlc2NyaXB0b3JzJyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcbnZhciBjcmVhdGVFbGVtZW50ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2RvY3VtZW50LWNyZWF0ZS1lbGVtZW50Jyk7XG5cbi8vIFRoYW5rJ3MgSUU4IGZvciBoaXMgZnVubnkgZGVmaW5lUHJvcGVydHlcbm1vZHVsZS5leHBvcnRzID0gIURFU0NSSVBUT1JTICYmICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBPYmplY3QuZGVmaW5lUHJvcGVydHkoY3JlYXRlRWxlbWVudCgnZGl2JyksICdhJywge1xuICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gNzsgfVxuICB9KS5hICE9IDc7XG59KTtcbiIsIi8vIElFRUU3NTQgY29udmVyc2lvbnMgYmFzZWQgb24gaHR0cHM6Ly9naXRodWIuY29tL2Zlcm9zcy9pZWVlNzU0XG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2hhZG93LXJlc3RyaWN0ZWQtbmFtZXNcbnZhciBJbmZpbml0eSA9IDEgLyAwO1xudmFyIGFicyA9IE1hdGguYWJzO1xudmFyIHBvdyA9IE1hdGgucG93O1xudmFyIGZsb29yID0gTWF0aC5mbG9vcjtcbnZhciBsb2cgPSBNYXRoLmxvZztcbnZhciBMTjIgPSBNYXRoLkxOMjtcblxudmFyIHBhY2sgPSBmdW5jdGlvbiAobnVtYmVyLCBtYW50aXNzYUxlbmd0aCwgYnl0ZXMpIHtcbiAgdmFyIGJ1ZmZlciA9IG5ldyBBcnJheShieXRlcyk7XG4gIHZhciBleHBvbmVudExlbmd0aCA9IGJ5dGVzICogOCAtIG1hbnRpc3NhTGVuZ3RoIC0gMTtcbiAgdmFyIGVNYXggPSAoMSA8PCBleHBvbmVudExlbmd0aCkgLSAxO1xuICB2YXIgZUJpYXMgPSBlTWF4ID4+IDE7XG4gIHZhciBydCA9IG1hbnRpc3NhTGVuZ3RoID09PSAyMyA/IHBvdygyLCAtMjQpIC0gcG93KDIsIC03NykgOiAwO1xuICB2YXIgc2lnbiA9IG51bWJlciA8IDAgfHwgbnVtYmVyID09PSAwICYmIDEgLyBudW1iZXIgPCAwID8gMSA6IDA7XG4gIHZhciBpbmRleCA9IDA7XG4gIHZhciBleHBvbmVudCwgbWFudGlzc2EsIGM7XG4gIG51bWJlciA9IGFicyhudW1iZXIpO1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlXG4gIGlmIChudW1iZXIgIT0gbnVtYmVyIHx8IG51bWJlciA9PT0gSW5maW5pdHkpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlXG4gICAgbWFudGlzc2EgPSBudW1iZXIgIT0gbnVtYmVyID8gMSA6IDA7XG4gICAgZXhwb25lbnQgPSBlTWF4O1xuICB9IGVsc2Uge1xuICAgIGV4cG9uZW50ID0gZmxvb3IobG9nKG51bWJlcikgLyBMTjIpO1xuICAgIGlmIChudW1iZXIgKiAoYyA9IHBvdygyLCAtZXhwb25lbnQpKSA8IDEpIHtcbiAgICAgIGV4cG9uZW50LS07XG4gICAgICBjICo9IDI7XG4gICAgfVxuICAgIGlmIChleHBvbmVudCArIGVCaWFzID49IDEpIHtcbiAgICAgIG51bWJlciArPSBydCAvIGM7XG4gICAgfSBlbHNlIHtcbiAgICAgIG51bWJlciArPSBydCAqIHBvdygyLCAxIC0gZUJpYXMpO1xuICAgIH1cbiAgICBpZiAobnVtYmVyICogYyA+PSAyKSB7XG4gICAgICBleHBvbmVudCsrO1xuICAgICAgYyAvPSAyO1xuICAgIH1cbiAgICBpZiAoZXhwb25lbnQgKyBlQmlhcyA+PSBlTWF4KSB7XG4gICAgICBtYW50aXNzYSA9IDA7XG4gICAgICBleHBvbmVudCA9IGVNYXg7XG4gICAgfSBlbHNlIGlmIChleHBvbmVudCArIGVCaWFzID49IDEpIHtcbiAgICAgIG1hbnRpc3NhID0gKG51bWJlciAqIGMgLSAxKSAqIHBvdygyLCBtYW50aXNzYUxlbmd0aCk7XG4gICAgICBleHBvbmVudCA9IGV4cG9uZW50ICsgZUJpYXM7XG4gICAgfSBlbHNlIHtcbiAgICAgIG1hbnRpc3NhID0gbnVtYmVyICogcG93KDIsIGVCaWFzIC0gMSkgKiBwb3coMiwgbWFudGlzc2FMZW5ndGgpO1xuICAgICAgZXhwb25lbnQgPSAwO1xuICAgIH1cbiAgfVxuICBmb3IgKDsgbWFudGlzc2FMZW5ndGggPj0gODsgYnVmZmVyW2luZGV4KytdID0gbWFudGlzc2EgJiAyNTUsIG1hbnRpc3NhIC89IDI1NiwgbWFudGlzc2FMZW5ndGggLT0gOCk7XG4gIGV4cG9uZW50ID0gZXhwb25lbnQgPDwgbWFudGlzc2FMZW5ndGggfCBtYW50aXNzYTtcbiAgZXhwb25lbnRMZW5ndGggKz0gbWFudGlzc2FMZW5ndGg7XG4gIGZvciAoOyBleHBvbmVudExlbmd0aCA+IDA7IGJ1ZmZlcltpbmRleCsrXSA9IGV4cG9uZW50ICYgMjU1LCBleHBvbmVudCAvPSAyNTYsIGV4cG9uZW50TGVuZ3RoIC09IDgpO1xuICBidWZmZXJbLS1pbmRleF0gfD0gc2lnbiAqIDEyODtcbiAgcmV0dXJuIGJ1ZmZlcjtcbn07XG5cbnZhciB1bnBhY2sgPSBmdW5jdGlvbiAoYnVmZmVyLCBtYW50aXNzYUxlbmd0aCkge1xuICB2YXIgYnl0ZXMgPSBidWZmZXIubGVuZ3RoO1xuICB2YXIgZXhwb25lbnRMZW5ndGggPSBieXRlcyAqIDggLSBtYW50aXNzYUxlbmd0aCAtIDE7XG4gIHZhciBlTWF4ID0gKDEgPDwgZXhwb25lbnRMZW5ndGgpIC0gMTtcbiAgdmFyIGVCaWFzID0gZU1heCA+PiAxO1xuICB2YXIgbkJpdHMgPSBleHBvbmVudExlbmd0aCAtIDc7XG4gIHZhciBpbmRleCA9IGJ5dGVzIC0gMTtcbiAgdmFyIHNpZ24gPSBidWZmZXJbaW5kZXgtLV07XG4gIHZhciBleHBvbmVudCA9IHNpZ24gJiAxMjc7XG4gIHZhciBtYW50aXNzYTtcbiAgc2lnbiA+Pj0gNztcbiAgZm9yICg7IG5CaXRzID4gMDsgZXhwb25lbnQgPSBleHBvbmVudCAqIDI1NiArIGJ1ZmZlcltpbmRleF0sIGluZGV4LS0sIG5CaXRzIC09IDgpO1xuICBtYW50aXNzYSA9IGV4cG9uZW50ICYgKDEgPDwgLW5CaXRzKSAtIDE7XG4gIGV4cG9uZW50ID4+PSAtbkJpdHM7XG4gIG5CaXRzICs9IG1hbnRpc3NhTGVuZ3RoO1xuICBmb3IgKDsgbkJpdHMgPiAwOyBtYW50aXNzYSA9IG1hbnRpc3NhICogMjU2ICsgYnVmZmVyW2luZGV4XSwgaW5kZXgtLSwgbkJpdHMgLT0gOCk7XG4gIGlmIChleHBvbmVudCA9PT0gMCkge1xuICAgIGV4cG9uZW50ID0gMSAtIGVCaWFzO1xuICB9IGVsc2UgaWYgKGV4cG9uZW50ID09PSBlTWF4KSB7XG4gICAgcmV0dXJuIG1hbnRpc3NhID8gTmFOIDogc2lnbiA/IC1JbmZpbml0eSA6IEluZmluaXR5O1xuICB9IGVsc2Uge1xuICAgIG1hbnRpc3NhID0gbWFudGlzc2EgKyBwb3coMiwgbWFudGlzc2FMZW5ndGgpO1xuICAgIGV4cG9uZW50ID0gZXhwb25lbnQgLSBlQmlhcztcbiAgfSByZXR1cm4gKHNpZ24gPyAtMSA6IDEpICogbWFudGlzc2EgKiBwb3coMiwgZXhwb25lbnQgLSBtYW50aXNzYUxlbmd0aCk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgcGFjazogcGFjayxcbiAgdW5wYWNrOiB1bnBhY2tcbn07XG4iLCJ2YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcbnZhciBjbGFzc29mID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NsYXNzb2YtcmF3Jyk7XG5cbnZhciBzcGxpdCA9ICcnLnNwbGl0O1xuXG4vLyBmYWxsYmFjayBmb3Igbm9uLWFycmF5LWxpa2UgRVMzIGFuZCBub24tZW51bWVyYWJsZSBvbGQgVjggc3RyaW5nc1xubW9kdWxlLmV4cG9ydHMgPSBmYWlscyhmdW5jdGlvbiAoKSB7XG4gIC8vIHRocm93cyBhbiBlcnJvciBpbiByaGlubywgc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9tb3ppbGxhL3JoaW5vL2lzc3Vlcy8zNDZcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXByb3RvdHlwZS1idWlsdGluc1xuICByZXR1cm4gIU9iamVjdCgneicpLnByb3BlcnR5SXNFbnVtZXJhYmxlKDApO1xufSkgPyBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIGNsYXNzb2YoaXQpID09ICdTdHJpbmcnID8gc3BsaXQuY2FsbChpdCwgJycpIDogT2JqZWN0KGl0KTtcbn0gOiBPYmplY3Q7XG4iLCJ2YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtb2JqZWN0Jyk7XG52YXIgc2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LXNldC1wcm90b3R5cGUtb2YnKTtcblxuLy8gbWFrZXMgc3ViY2xhc3Npbmcgd29yayBjb3JyZWN0IGZvciB3cmFwcGVkIGJ1aWx0LWluc1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoJHRoaXMsIGR1bW15LCBXcmFwcGVyKSB7XG4gIHZhciBOZXdUYXJnZXQsIE5ld1RhcmdldFByb3RvdHlwZTtcbiAgaWYgKFxuICAgIC8vIGl0IGNhbiB3b3JrIG9ubHkgd2l0aCBuYXRpdmUgYHNldFByb3RvdHlwZU9mYFxuICAgIHNldFByb3RvdHlwZU9mICYmXG4gICAgLy8gd2UgaGF2ZW4ndCBjb21wbGV0ZWx5IGNvcnJlY3QgcHJlLUVTNiB3YXkgZm9yIGdldHRpbmcgYG5ldy50YXJnZXRgLCBzbyB1c2UgdGhpc1xuICAgIHR5cGVvZiAoTmV3VGFyZ2V0ID0gZHVtbXkuY29uc3RydWN0b3IpID09ICdmdW5jdGlvbicgJiZcbiAgICBOZXdUYXJnZXQgIT09IFdyYXBwZXIgJiZcbiAgICBpc09iamVjdChOZXdUYXJnZXRQcm90b3R5cGUgPSBOZXdUYXJnZXQucHJvdG90eXBlKSAmJlxuICAgIE5ld1RhcmdldFByb3RvdHlwZSAhPT0gV3JhcHBlci5wcm90b3R5cGVcbiAgKSBzZXRQcm90b3R5cGVPZigkdGhpcywgTmV3VGFyZ2V0UHJvdG90eXBlKTtcbiAgcmV0dXJuICR0aGlzO1xufTtcbiIsInZhciBzdG9yZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zaGFyZWQtc3RvcmUnKTtcblxudmFyIGZ1bmN0aW9uVG9TdHJpbmcgPSBGdW5jdGlvbi50b1N0cmluZztcblxuLy8gdGhpcyBoZWxwZXIgYnJva2VuIGluIGAzLjQuMS0zLjQuNGAsIHNvIHdlIGNhbid0IHVzZSBgc2hhcmVkYCBoZWxwZXJcbmlmICh0eXBlb2Ygc3RvcmUuaW5zcGVjdFNvdXJjZSAhPSAnZnVuY3Rpb24nKSB7XG4gIHN0b3JlLmluc3BlY3RTb3VyY2UgPSBmdW5jdGlvbiAoaXQpIHtcbiAgICByZXR1cm4gZnVuY3Rpb25Ub1N0cmluZy5jYWxsKGl0KTtcbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzdG9yZS5pbnNwZWN0U291cmNlO1xuIiwidmFyIGhpZGRlbktleXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGlkZGVuLWtleXMnKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1vYmplY3QnKTtcbnZhciBoYXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGFzJyk7XG52YXIgZGVmaW5lUHJvcGVydHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWRlZmluZS1wcm9wZXJ0eScpLmY7XG52YXIgdWlkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3VpZCcpO1xudmFyIEZSRUVaSU5HID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZyZWV6aW5nJyk7XG5cbnZhciBNRVRBREFUQSA9IHVpZCgnbWV0YScpO1xudmFyIGlkID0gMDtcblxudmFyIGlzRXh0ZW5zaWJsZSA9IE9iamVjdC5pc0V4dGVuc2libGUgfHwgZnVuY3Rpb24gKCkge1xuICByZXR1cm4gdHJ1ZTtcbn07XG5cbnZhciBzZXRNZXRhZGF0YSA9IGZ1bmN0aW9uIChpdCkge1xuICBkZWZpbmVQcm9wZXJ0eShpdCwgTUVUQURBVEEsIHsgdmFsdWU6IHtcbiAgICBvYmplY3RJRDogJ08nICsgKytpZCwgLy8gb2JqZWN0IElEXG4gICAgd2Vha0RhdGE6IHt9ICAgICAgICAgIC8vIHdlYWsgY29sbGVjdGlvbnMgSURzXG4gIH0gfSk7XG59O1xuXG52YXIgZmFzdEtleSA9IGZ1bmN0aW9uIChpdCwgY3JlYXRlKSB7XG4gIC8vIHJldHVybiBhIHByaW1pdGl2ZSB3aXRoIHByZWZpeFxuICBpZiAoIWlzT2JqZWN0KGl0KSkgcmV0dXJuIHR5cGVvZiBpdCA9PSAnc3ltYm9sJyA/IGl0IDogKHR5cGVvZiBpdCA9PSAnc3RyaW5nJyA/ICdTJyA6ICdQJykgKyBpdDtcbiAgaWYgKCFoYXMoaXQsIE1FVEFEQVRBKSkge1xuICAgIC8vIGNhbid0IHNldCBtZXRhZGF0YSB0byB1bmNhdWdodCBmcm96ZW4gb2JqZWN0XG4gICAgaWYgKCFpc0V4dGVuc2libGUoaXQpKSByZXR1cm4gJ0YnO1xuICAgIC8vIG5vdCBuZWNlc3NhcnkgdG8gYWRkIG1ldGFkYXRhXG4gICAgaWYgKCFjcmVhdGUpIHJldHVybiAnRSc7XG4gICAgLy8gYWRkIG1pc3NpbmcgbWV0YWRhdGFcbiAgICBzZXRNZXRhZGF0YShpdCk7XG4gIC8vIHJldHVybiBvYmplY3QgSURcbiAgfSByZXR1cm4gaXRbTUVUQURBVEFdLm9iamVjdElEO1xufTtcblxudmFyIGdldFdlYWtEYXRhID0gZnVuY3Rpb24gKGl0LCBjcmVhdGUpIHtcbiAgaWYgKCFoYXMoaXQsIE1FVEFEQVRBKSkge1xuICAgIC8vIGNhbid0IHNldCBtZXRhZGF0YSB0byB1bmNhdWdodCBmcm96ZW4gb2JqZWN0XG4gICAgaWYgKCFpc0V4dGVuc2libGUoaXQpKSByZXR1cm4gdHJ1ZTtcbiAgICAvLyBub3QgbmVjZXNzYXJ5IHRvIGFkZCBtZXRhZGF0YVxuICAgIGlmICghY3JlYXRlKSByZXR1cm4gZmFsc2U7XG4gICAgLy8gYWRkIG1pc3NpbmcgbWV0YWRhdGFcbiAgICBzZXRNZXRhZGF0YShpdCk7XG4gIC8vIHJldHVybiB0aGUgc3RvcmUgb2Ygd2VhayBjb2xsZWN0aW9ucyBJRHNcbiAgfSByZXR1cm4gaXRbTUVUQURBVEFdLndlYWtEYXRhO1xufTtcblxuLy8gYWRkIG1ldGFkYXRhIG9uIGZyZWV6ZS1mYW1pbHkgbWV0aG9kcyBjYWxsaW5nXG52YXIgb25GcmVlemUgPSBmdW5jdGlvbiAoaXQpIHtcbiAgaWYgKEZSRUVaSU5HICYmIG1ldGEuUkVRVUlSRUQgJiYgaXNFeHRlbnNpYmxlKGl0KSAmJiAhaGFzKGl0LCBNRVRBREFUQSkpIHNldE1ldGFkYXRhKGl0KTtcbiAgcmV0dXJuIGl0O1xufTtcblxudmFyIG1ldGEgPSBtb2R1bGUuZXhwb3J0cyA9IHtcbiAgUkVRVUlSRUQ6IGZhbHNlLFxuICBmYXN0S2V5OiBmYXN0S2V5LFxuICBnZXRXZWFrRGF0YTogZ2V0V2Vha0RhdGEsXG4gIG9uRnJlZXplOiBvbkZyZWV6ZVxufTtcblxuaGlkZGVuS2V5c1tNRVRBREFUQV0gPSB0cnVlO1xuIiwidmFyIE5BVElWRV9XRUFLX01BUCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9uYXRpdmUtd2Vhay1tYXAnKTtcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtb2JqZWN0Jyk7XG52YXIgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1ub24tZW51bWVyYWJsZS1wcm9wZXJ0eScpO1xudmFyIG9iamVjdEhhcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oYXMnKTtcbnZhciBzaGFyZWQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2hhcmVkLXN0b3JlJyk7XG52YXIgc2hhcmVkS2V5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NoYXJlZC1rZXknKTtcbnZhciBoaWRkZW5LZXlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hpZGRlbi1rZXlzJyk7XG5cbnZhciBXZWFrTWFwID0gZ2xvYmFsLldlYWtNYXA7XG52YXIgc2V0LCBnZXQsIGhhcztcblxudmFyIGVuZm9yY2UgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIGhhcyhpdCkgPyBnZXQoaXQpIDogc2V0KGl0LCB7fSk7XG59O1xuXG52YXIgZ2V0dGVyRm9yID0gZnVuY3Rpb24gKFRZUEUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIChpdCkge1xuICAgIHZhciBzdGF0ZTtcbiAgICBpZiAoIWlzT2JqZWN0KGl0KSB8fCAoc3RhdGUgPSBnZXQoaXQpKS50eXBlICE9PSBUWVBFKSB7XG4gICAgICB0aHJvdyBUeXBlRXJyb3IoJ0luY29tcGF0aWJsZSByZWNlaXZlciwgJyArIFRZUEUgKyAnIHJlcXVpcmVkJyk7XG4gICAgfSByZXR1cm4gc3RhdGU7XG4gIH07XG59O1xuXG5pZiAoTkFUSVZFX1dFQUtfTUFQKSB7XG4gIHZhciBzdG9yZSA9IHNoYXJlZC5zdGF0ZSB8fCAoc2hhcmVkLnN0YXRlID0gbmV3IFdlYWtNYXAoKSk7XG4gIHZhciB3bWdldCA9IHN0b3JlLmdldDtcbiAgdmFyIHdtaGFzID0gc3RvcmUuaGFzO1xuICB2YXIgd21zZXQgPSBzdG9yZS5zZXQ7XG4gIHNldCA9IGZ1bmN0aW9uIChpdCwgbWV0YWRhdGEpIHtcbiAgICBtZXRhZGF0YS5mYWNhZGUgPSBpdDtcbiAgICB3bXNldC5jYWxsKHN0b3JlLCBpdCwgbWV0YWRhdGEpO1xuICAgIHJldHVybiBtZXRhZGF0YTtcbiAgfTtcbiAgZ2V0ID0gZnVuY3Rpb24gKGl0KSB7XG4gICAgcmV0dXJuIHdtZ2V0LmNhbGwoc3RvcmUsIGl0KSB8fCB7fTtcbiAgfTtcbiAgaGFzID0gZnVuY3Rpb24gKGl0KSB7XG4gICAgcmV0dXJuIHdtaGFzLmNhbGwoc3RvcmUsIGl0KTtcbiAgfTtcbn0gZWxzZSB7XG4gIHZhciBTVEFURSA9IHNoYXJlZEtleSgnc3RhdGUnKTtcbiAgaGlkZGVuS2V5c1tTVEFURV0gPSB0cnVlO1xuICBzZXQgPSBmdW5jdGlvbiAoaXQsIG1ldGFkYXRhKSB7XG4gICAgbWV0YWRhdGEuZmFjYWRlID0gaXQ7XG4gICAgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5KGl0LCBTVEFURSwgbWV0YWRhdGEpO1xuICAgIHJldHVybiBtZXRhZGF0YTtcbiAgfTtcbiAgZ2V0ID0gZnVuY3Rpb24gKGl0KSB7XG4gICAgcmV0dXJuIG9iamVjdEhhcyhpdCwgU1RBVEUpID8gaXRbU1RBVEVdIDoge307XG4gIH07XG4gIGhhcyA9IGZ1bmN0aW9uIChpdCkge1xuICAgIHJldHVybiBvYmplY3RIYXMoaXQsIFNUQVRFKTtcbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIHNldDogc2V0LFxuICBnZXQ6IGdldCxcbiAgaGFzOiBoYXMsXG4gIGVuZm9yY2U6IGVuZm9yY2UsXG4gIGdldHRlckZvcjogZ2V0dGVyRm9yXG59O1xuIiwidmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xudmFyIEl0ZXJhdG9ycyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pdGVyYXRvcnMnKTtcblxudmFyIElURVJBVE9SID0gd2VsbEtub3duU3ltYm9sKCdpdGVyYXRvcicpO1xudmFyIEFycmF5UHJvdG90eXBlID0gQXJyYXkucHJvdG90eXBlO1xuXG4vLyBjaGVjayBvbiBkZWZhdWx0IEFycmF5IGl0ZXJhdG9yXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gaXQgIT09IHVuZGVmaW5lZCAmJiAoSXRlcmF0b3JzLkFycmF5ID09PSBpdCB8fCBBcnJheVByb3RvdHlwZVtJVEVSQVRPUl0gPT09IGl0KTtcbn07XG4iLCJ2YXIgY2xhc3NvZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jbGFzc29mLXJhdycpO1xuXG4vLyBgSXNBcnJheWAgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWlzYXJyYXlcbm1vZHVsZS5leHBvcnRzID0gQXJyYXkuaXNBcnJheSB8fCBmdW5jdGlvbiBpc0FycmF5KGFyZykge1xuICByZXR1cm4gY2xhc3NvZihhcmcpID09ICdBcnJheSc7XG59O1xuIiwidmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG5cbnZhciByZXBsYWNlbWVudCA9IC8jfFxcLnByb3RvdHlwZVxcLi87XG5cbnZhciBpc0ZvcmNlZCA9IGZ1bmN0aW9uIChmZWF0dXJlLCBkZXRlY3Rpb24pIHtcbiAgdmFyIHZhbHVlID0gZGF0YVtub3JtYWxpemUoZmVhdHVyZSldO1xuICByZXR1cm4gdmFsdWUgPT0gUE9MWUZJTEwgPyB0cnVlXG4gICAgOiB2YWx1ZSA9PSBOQVRJVkUgPyBmYWxzZVxuICAgIDogdHlwZW9mIGRldGVjdGlvbiA9PSAnZnVuY3Rpb24nID8gZmFpbHMoZGV0ZWN0aW9uKVxuICAgIDogISFkZXRlY3Rpb247XG59O1xuXG52YXIgbm9ybWFsaXplID0gaXNGb3JjZWQubm9ybWFsaXplID0gZnVuY3Rpb24gKHN0cmluZykge1xuICByZXR1cm4gU3RyaW5nKHN0cmluZykucmVwbGFjZShyZXBsYWNlbWVudCwgJy4nKS50b0xvd2VyQ2FzZSgpO1xufTtcblxudmFyIGRhdGEgPSBpc0ZvcmNlZC5kYXRhID0ge307XG52YXIgTkFUSVZFID0gaXNGb3JjZWQuTkFUSVZFID0gJ04nO1xudmFyIFBPTFlGSUxMID0gaXNGb3JjZWQuUE9MWUZJTEwgPSAnUCc7XG5cbm1vZHVsZS5leHBvcnRzID0gaXNGb3JjZWQ7XG4iLCJ2YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtb2JqZWN0Jyk7XG5cbnZhciBmbG9vciA9IE1hdGguZmxvb3I7XG5cbi8vIGBOdW1iZXIuaXNJbnRlZ2VyYCBtZXRob2QgaW1wbGVtZW50YXRpb25cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtbnVtYmVyLmlzaW50ZWdlclxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBpc0ludGVnZXIoaXQpIHtcbiAgcmV0dXJuICFpc09iamVjdChpdCkgJiYgaXNGaW5pdGUoaXQpICYmIGZsb29yKGl0KSA9PT0gaXQ7XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIHR5cGVvZiBpdCA9PT0gJ29iamVjdCcgPyBpdCAhPT0gbnVsbCA6IHR5cGVvZiBpdCA9PT0gJ2Z1bmN0aW9uJztcbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZhbHNlO1xuIiwidmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLW9iamVjdCcpO1xudmFyIGNsYXNzb2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY2xhc3NvZi1yYXcnKTtcbnZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcblxudmFyIE1BVENIID0gd2VsbEtub3duU3ltYm9sKCdtYXRjaCcpO1xuXG4vLyBgSXNSZWdFeHBgIGFic3RyYWN0IG9wZXJhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1pc3JlZ2V4cFxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgdmFyIGlzUmVnRXhwO1xuICByZXR1cm4gaXNPYmplY3QoaXQpICYmICgoaXNSZWdFeHAgPSBpdFtNQVRDSF0pICE9PSB1bmRlZmluZWQgPyAhIWlzUmVnRXhwIDogY2xhc3NvZihpdCkgPT0gJ1JlZ0V4cCcpO1xufTtcbiIsInZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1vYmplY3QnKTtcbnZhciBpc0FycmF5SXRlcmF0b3JNZXRob2QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtYXJyYXktaXRlcmF0b3ItbWV0aG9kJyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tbGVuZ3RoJyk7XG52YXIgYmluZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi1iaW5kLWNvbnRleHQnKTtcbnZhciBnZXRJdGVyYXRvck1ldGhvZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nZXQtaXRlcmF0b3ItbWV0aG9kJyk7XG52YXIgaXRlcmF0b3JDbG9zZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pdGVyYXRvci1jbG9zZScpO1xuXG52YXIgUmVzdWx0ID0gZnVuY3Rpb24gKHN0b3BwZWQsIHJlc3VsdCkge1xuICB0aGlzLnN0b3BwZWQgPSBzdG9wcGVkO1xuICB0aGlzLnJlc3VsdCA9IHJlc3VsdDtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0ZXJhYmxlLCB1bmJvdW5kRnVuY3Rpb24sIG9wdGlvbnMpIHtcbiAgdmFyIHRoYXQgPSBvcHRpb25zICYmIG9wdGlvbnMudGhhdDtcbiAgdmFyIEFTX0VOVFJJRVMgPSAhIShvcHRpb25zICYmIG9wdGlvbnMuQVNfRU5UUklFUyk7XG4gIHZhciBJU19JVEVSQVRPUiA9ICEhKG9wdGlvbnMgJiYgb3B0aW9ucy5JU19JVEVSQVRPUik7XG4gIHZhciBJTlRFUlJVUFRFRCA9ICEhKG9wdGlvbnMgJiYgb3B0aW9ucy5JTlRFUlJVUFRFRCk7XG4gIHZhciBmbiA9IGJpbmQodW5ib3VuZEZ1bmN0aW9uLCB0aGF0LCAxICsgQVNfRU5UUklFUyArIElOVEVSUlVQVEVEKTtcbiAgdmFyIGl0ZXJhdG9yLCBpdGVyRm4sIGluZGV4LCBsZW5ndGgsIHJlc3VsdCwgbmV4dCwgc3RlcDtcblxuICB2YXIgc3RvcCA9IGZ1bmN0aW9uIChjb25kaXRpb24pIHtcbiAgICBpZiAoaXRlcmF0b3IpIGl0ZXJhdG9yQ2xvc2UoaXRlcmF0b3IpO1xuICAgIHJldHVybiBuZXcgUmVzdWx0KHRydWUsIGNvbmRpdGlvbik7XG4gIH07XG5cbiAgdmFyIGNhbGxGbiA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgIGlmIChBU19FTlRSSUVTKSB7XG4gICAgICBhbk9iamVjdCh2YWx1ZSk7XG4gICAgICByZXR1cm4gSU5URVJSVVBURUQgPyBmbih2YWx1ZVswXSwgdmFsdWVbMV0sIHN0b3ApIDogZm4odmFsdWVbMF0sIHZhbHVlWzFdKTtcbiAgICB9IHJldHVybiBJTlRFUlJVUFRFRCA/IGZuKHZhbHVlLCBzdG9wKSA6IGZuKHZhbHVlKTtcbiAgfTtcblxuICBpZiAoSVNfSVRFUkFUT1IpIHtcbiAgICBpdGVyYXRvciA9IGl0ZXJhYmxlO1xuICB9IGVsc2Uge1xuICAgIGl0ZXJGbiA9IGdldEl0ZXJhdG9yTWV0aG9kKGl0ZXJhYmxlKTtcbiAgICBpZiAodHlwZW9mIGl0ZXJGbiAhPSAnZnVuY3Rpb24nKSB0aHJvdyBUeXBlRXJyb3IoJ1RhcmdldCBpcyBub3QgaXRlcmFibGUnKTtcbiAgICAvLyBvcHRpbWlzYXRpb24gZm9yIGFycmF5IGl0ZXJhdG9yc1xuICAgIGlmIChpc0FycmF5SXRlcmF0b3JNZXRob2QoaXRlckZuKSkge1xuICAgICAgZm9yIChpbmRleCA9IDAsIGxlbmd0aCA9IHRvTGVuZ3RoKGl0ZXJhYmxlLmxlbmd0aCk7IGxlbmd0aCA+IGluZGV4OyBpbmRleCsrKSB7XG4gICAgICAgIHJlc3VsdCA9IGNhbGxGbihpdGVyYWJsZVtpbmRleF0pO1xuICAgICAgICBpZiAocmVzdWx0ICYmIHJlc3VsdCBpbnN0YW5jZW9mIFJlc3VsdCkgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH0gcmV0dXJuIG5ldyBSZXN1bHQoZmFsc2UpO1xuICAgIH1cbiAgICBpdGVyYXRvciA9IGl0ZXJGbi5jYWxsKGl0ZXJhYmxlKTtcbiAgfVxuXG4gIG5leHQgPSBpdGVyYXRvci5uZXh0O1xuICB3aGlsZSAoIShzdGVwID0gbmV4dC5jYWxsKGl0ZXJhdG9yKSkuZG9uZSkge1xuICAgIHRyeSB7XG4gICAgICByZXN1bHQgPSBjYWxsRm4oc3RlcC52YWx1ZSk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGl0ZXJhdG9yQ2xvc2UoaXRlcmF0b3IpO1xuICAgICAgdGhyb3cgZXJyb3I7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgcmVzdWx0ID09ICdvYmplY3QnICYmIHJlc3VsdCAmJiByZXN1bHQgaW5zdGFuY2VvZiBSZXN1bHQpIHJldHVybiByZXN1bHQ7XG4gIH0gcmV0dXJuIG5ldyBSZXN1bHQoZmFsc2UpO1xufTtcbiIsInZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1vYmplY3QnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXRlcmF0b3IpIHtcbiAgdmFyIHJldHVybk1ldGhvZCA9IGl0ZXJhdG9yWydyZXR1cm4nXTtcbiAgaWYgKHJldHVybk1ldGhvZCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgcmV0dXJuIGFuT2JqZWN0KHJldHVybk1ldGhvZC5jYWxsKGl0ZXJhdG9yKSkudmFsdWU7XG4gIH1cbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgZ2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1wcm90b3R5cGUtb2YnKTtcbnZhciBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLW5vbi1lbnVtZXJhYmxlLXByb3BlcnR5Jyk7XG52YXIgaGFzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hhcycpO1xudmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xudmFyIElTX1BVUkUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtcHVyZScpO1xuXG52YXIgSVRFUkFUT1IgPSB3ZWxsS25vd25TeW1ib2woJ2l0ZXJhdG9yJyk7XG52YXIgQlVHR1lfU0FGQVJJX0lURVJBVE9SUyA9IGZhbHNlO1xuXG52YXIgcmV0dXJuVGhpcyA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH07XG5cbi8vIGAlSXRlcmF0b3JQcm90b3R5cGUlYCBvYmplY3Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtJWl0ZXJhdG9ycHJvdG90eXBlJS1vYmplY3RcbnZhciBJdGVyYXRvclByb3RvdHlwZSwgUHJvdG90eXBlT2ZBcnJheUl0ZXJhdG9yUHJvdG90eXBlLCBhcnJheUl0ZXJhdG9yO1xuXG5pZiAoW10ua2V5cykge1xuICBhcnJheUl0ZXJhdG9yID0gW10ua2V5cygpO1xuICAvLyBTYWZhcmkgOCBoYXMgYnVnZ3kgaXRlcmF0b3JzIHcvbyBgbmV4dGBcbiAgaWYgKCEoJ25leHQnIGluIGFycmF5SXRlcmF0b3IpKSBCVUdHWV9TQUZBUklfSVRFUkFUT1JTID0gdHJ1ZTtcbiAgZWxzZSB7XG4gICAgUHJvdG90eXBlT2ZBcnJheUl0ZXJhdG9yUHJvdG90eXBlID0gZ2V0UHJvdG90eXBlT2YoZ2V0UHJvdG90eXBlT2YoYXJyYXlJdGVyYXRvcikpO1xuICAgIGlmIChQcm90b3R5cGVPZkFycmF5SXRlcmF0b3JQcm90b3R5cGUgIT09IE9iamVjdC5wcm90b3R5cGUpIEl0ZXJhdG9yUHJvdG90eXBlID0gUHJvdG90eXBlT2ZBcnJheUl0ZXJhdG9yUHJvdG90eXBlO1xuICB9XG59XG5cbmlmIChJdGVyYXRvclByb3RvdHlwZSA9PSB1bmRlZmluZWQpIEl0ZXJhdG9yUHJvdG90eXBlID0ge307XG5cbi8vIDI1LjEuMi4xLjEgJUl0ZXJhdG9yUHJvdG90eXBlJVtAQGl0ZXJhdG9yXSgpXG5pZiAoIUlTX1BVUkUgJiYgIWhhcyhJdGVyYXRvclByb3RvdHlwZSwgSVRFUkFUT1IpKSB7XG4gIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eShJdGVyYXRvclByb3RvdHlwZSwgSVRFUkFUT1IsIHJldHVyblRoaXMpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgSXRlcmF0b3JQcm90b3R5cGU6IEl0ZXJhdG9yUHJvdG90eXBlLFxuICBCVUdHWV9TQUZBUklfSVRFUkFUT1JTOiBCVUdHWV9TQUZBUklfSVRFUkFUT1JTXG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSB7fTtcbiIsInZhciBuYXRpdmVFeHBtMSA9IE1hdGguZXhwbTE7XG52YXIgZXhwID0gTWF0aC5leHA7XG5cbi8vIGBNYXRoLmV4cG0xYCBtZXRob2QgaW1wbGVtZW50YXRpb25cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtbWF0aC5leHBtMVxubW9kdWxlLmV4cG9ydHMgPSAoIW5hdGl2ZUV4cG0xXG4gIC8vIE9sZCBGRiBidWdcbiAgfHwgbmF0aXZlRXhwbTEoMTApID4gMjIwMjUuNDY1Nzk0ODA2NzE5IHx8IG5hdGl2ZUV4cG0xKDEwKSA8IDIyMDI1LjQ2NTc5NDgwNjcxNjUxNjhcbiAgLy8gVG9yIEJyb3dzZXIgYnVnXG4gIHx8IG5hdGl2ZUV4cG0xKC0yZS0xNykgIT0gLTJlLTE3XG4pID8gZnVuY3Rpb24gZXhwbTEoeCkge1xuICByZXR1cm4gKHggPSAreCkgPT0gMCA/IHggOiB4ID4gLTFlLTYgJiYgeCA8IDFlLTYgPyB4ICsgeCAqIHggLyAyIDogZXhwKHgpIC0gMTtcbn0gOiBuYXRpdmVFeHBtMTtcbiIsInZhciBzaWduID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL21hdGgtc2lnbicpO1xuXG52YXIgYWJzID0gTWF0aC5hYnM7XG52YXIgcG93ID0gTWF0aC5wb3c7XG52YXIgRVBTSUxPTiA9IHBvdygyLCAtNTIpO1xudmFyIEVQU0lMT04zMiA9IHBvdygyLCAtMjMpO1xudmFyIE1BWDMyID0gcG93KDIsIDEyNykgKiAoMiAtIEVQU0lMT04zMik7XG52YXIgTUlOMzIgPSBwb3coMiwgLTEyNik7XG5cbnZhciByb3VuZFRpZXNUb0V2ZW4gPSBmdW5jdGlvbiAobikge1xuICByZXR1cm4gbiArIDEgLyBFUFNJTE9OIC0gMSAvIEVQU0lMT047XG59O1xuXG4vLyBgTWF0aC5mcm91bmRgIG1ldGhvZCBpbXBsZW1lbnRhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1tYXRoLmZyb3VuZFxubW9kdWxlLmV4cG9ydHMgPSBNYXRoLmZyb3VuZCB8fCBmdW5jdGlvbiBmcm91bmQoeCkge1xuICB2YXIgJGFicyA9IGFicyh4KTtcbiAgdmFyICRzaWduID0gc2lnbih4KTtcbiAgdmFyIGEsIHJlc3VsdDtcbiAgaWYgKCRhYnMgPCBNSU4zMikgcmV0dXJuICRzaWduICogcm91bmRUaWVzVG9FdmVuKCRhYnMgLyBNSU4zMiAvIEVQU0lMT04zMikgKiBNSU4zMiAqIEVQU0lMT04zMjtcbiAgYSA9ICgxICsgRVBTSUxPTjMyIC8gRVBTSUxPTikgKiAkYWJzO1xuICByZXN1bHQgPSBhIC0gKGEgLSAkYWJzKTtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZVxuICBpZiAocmVzdWx0ID4gTUFYMzIgfHwgcmVzdWx0ICE9IHJlc3VsdCkgcmV0dXJuICRzaWduICogSW5maW5pdHk7XG4gIHJldHVybiAkc2lnbiAqIHJlc3VsdDtcbn07XG4iLCJ2YXIgbG9nID0gTWF0aC5sb2c7XG5cbi8vIGBNYXRoLmxvZzFwYCBtZXRob2QgaW1wbGVtZW50YXRpb25cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtbWF0aC5sb2cxcFxubW9kdWxlLmV4cG9ydHMgPSBNYXRoLmxvZzFwIHx8IGZ1bmN0aW9uIGxvZzFwKHgpIHtcbiAgcmV0dXJuICh4ID0gK3gpID4gLTFlLTggJiYgeCA8IDFlLTggPyB4IC0geCAqIHggLyAyIDogbG9nKDEgKyB4KTtcbn07XG4iLCIvLyBgTWF0aC5zaWduYCBtZXRob2QgaW1wbGVtZW50YXRpb25cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtbWF0aC5zaWduXG5tb2R1bGUuZXhwb3J0cyA9IE1hdGguc2lnbiB8fCBmdW5jdGlvbiBzaWduKHgpIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZVxuICByZXR1cm4gKHggPSAreCkgPT0gMCB8fCB4ICE9IHggPyB4IDogeCA8IDAgPyAtMSA6IDE7XG59O1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1vd24tcHJvcGVydHktZGVzY3JpcHRvcicpLmY7XG52YXIgbWFjcm90YXNrID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3Rhc2snKS5zZXQ7XG52YXIgSVNfSU9TID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2VuZ2luZS1pcy1pb3MnKTtcbnZhciBJU19XRUJPU19XRUJLSVQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZW5naW5lLWlzLXdlYm9zLXdlYmtpdCcpO1xudmFyIElTX05PREUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZW5naW5lLWlzLW5vZGUnKTtcblxudmFyIE11dGF0aW9uT2JzZXJ2ZXIgPSBnbG9iYWwuTXV0YXRpb25PYnNlcnZlciB8fCBnbG9iYWwuV2ViS2l0TXV0YXRpb25PYnNlcnZlcjtcbnZhciBkb2N1bWVudCA9IGdsb2JhbC5kb2N1bWVudDtcbnZhciBwcm9jZXNzID0gZ2xvYmFsLnByb2Nlc3M7XG52YXIgUHJvbWlzZSA9IGdsb2JhbC5Qcm9taXNlO1xuLy8gTm9kZS5qcyAxMSBzaG93cyBFeHBlcmltZW50YWxXYXJuaW5nIG9uIGdldHRpbmcgYHF1ZXVlTWljcm90YXNrYFxudmFyIHF1ZXVlTWljcm90YXNrRGVzY3JpcHRvciA9IGdldE93blByb3BlcnR5RGVzY3JpcHRvcihnbG9iYWwsICdxdWV1ZU1pY3JvdGFzaycpO1xudmFyIHF1ZXVlTWljcm90YXNrID0gcXVldWVNaWNyb3Rhc2tEZXNjcmlwdG9yICYmIHF1ZXVlTWljcm90YXNrRGVzY3JpcHRvci52YWx1ZTtcblxudmFyIGZsdXNoLCBoZWFkLCBsYXN0LCBub3RpZnksIHRvZ2dsZSwgbm9kZSwgcHJvbWlzZSwgdGhlbjtcblxuLy8gbW9kZXJuIGVuZ2luZXMgaGF2ZSBxdWV1ZU1pY3JvdGFzayBtZXRob2RcbmlmICghcXVldWVNaWNyb3Rhc2spIHtcbiAgZmx1c2ggPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHBhcmVudCwgZm47XG4gICAgaWYgKElTX05PREUgJiYgKHBhcmVudCA9IHByb2Nlc3MuZG9tYWluKSkgcGFyZW50LmV4aXQoKTtcbiAgICB3aGlsZSAoaGVhZCkge1xuICAgICAgZm4gPSBoZWFkLmZuO1xuICAgICAgaGVhZCA9IGhlYWQubmV4dDtcbiAgICAgIHRyeSB7XG4gICAgICAgIGZuKCk7XG4gICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICBpZiAoaGVhZCkgbm90aWZ5KCk7XG4gICAgICAgIGVsc2UgbGFzdCA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICB9XG4gICAgfSBsYXN0ID0gdW5kZWZpbmVkO1xuICAgIGlmIChwYXJlbnQpIHBhcmVudC5lbnRlcigpO1xuICB9O1xuXG4gIC8vIGJyb3dzZXJzIHdpdGggTXV0YXRpb25PYnNlcnZlciwgZXhjZXB0IGlPUyAtIGh0dHBzOi8vZ2l0aHViLmNvbS96bG9pcm9jay9jb3JlLWpzL2lzc3Vlcy8zMzlcbiAgLy8gYWxzbyBleGNlcHQgV2ViT1MgV2Via2l0IGh0dHBzOi8vZ2l0aHViLmNvbS96bG9pcm9jay9jb3JlLWpzL2lzc3Vlcy84OThcbiAgaWYgKCFJU19JT1MgJiYgIUlTX05PREUgJiYgIUlTX1dFQk9TX1dFQktJVCAmJiBNdXRhdGlvbk9ic2VydmVyICYmIGRvY3VtZW50KSB7XG4gICAgdG9nZ2xlID0gdHJ1ZTtcbiAgICBub2RlID0gZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoJycpO1xuICAgIG5ldyBNdXRhdGlvbk9ic2VydmVyKGZsdXNoKS5vYnNlcnZlKG5vZGUsIHsgY2hhcmFjdGVyRGF0YTogdHJ1ZSB9KTtcbiAgICBub3RpZnkgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBub2RlLmRhdGEgPSB0b2dnbGUgPSAhdG9nZ2xlO1xuICAgIH07XG4gIC8vIGVudmlyb25tZW50cyB3aXRoIG1heWJlIG5vbi1jb21wbGV0ZWx5IGNvcnJlY3QsIGJ1dCBleGlzdGVudCBQcm9taXNlXG4gIH0gZWxzZSBpZiAoUHJvbWlzZSAmJiBQcm9taXNlLnJlc29sdmUpIHtcbiAgICAvLyBQcm9taXNlLnJlc29sdmUgd2l0aG91dCBhbiBhcmd1bWVudCB0aHJvd3MgYW4gZXJyb3IgaW4gTEcgV2ViT1MgMlxuICAgIHByb21pc2UgPSBQcm9taXNlLnJlc29sdmUodW5kZWZpbmVkKTtcbiAgICB0aGVuID0gcHJvbWlzZS50aGVuO1xuICAgIG5vdGlmeSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHRoZW4uY2FsbChwcm9taXNlLCBmbHVzaCk7XG4gICAgfTtcbiAgLy8gTm9kZS5qcyB3aXRob3V0IHByb21pc2VzXG4gIH0gZWxzZSBpZiAoSVNfTk9ERSkge1xuICAgIG5vdGlmeSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHByb2Nlc3MubmV4dFRpY2soZmx1c2gpO1xuICAgIH07XG4gIC8vIGZvciBvdGhlciBlbnZpcm9ubWVudHMgLSBtYWNyb3Rhc2sgYmFzZWQgb246XG4gIC8vIC0gc2V0SW1tZWRpYXRlXG4gIC8vIC0gTWVzc2FnZUNoYW5uZWxcbiAgLy8gLSB3aW5kb3cucG9zdE1lc3NhZ1xuICAvLyAtIG9ucmVhZHlzdGF0ZWNoYW5nZVxuICAvLyAtIHNldFRpbWVvdXRcbiAgfSBlbHNlIHtcbiAgICBub3RpZnkgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAvLyBzdHJhbmdlIElFICsgd2VicGFjayBkZXYgc2VydmVyIGJ1ZyAtIHVzZSAuY2FsbChnbG9iYWwpXG4gICAgICBtYWNyb3Rhc2suY2FsbChnbG9iYWwsIGZsdXNoKTtcbiAgICB9O1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gcXVldWVNaWNyb3Rhc2sgfHwgZnVuY3Rpb24gKGZuKSB7XG4gIHZhciB0YXNrID0geyBmbjogZm4sIG5leHQ6IHVuZGVmaW5lZCB9O1xuICBpZiAobGFzdCkgbGFzdC5uZXh0ID0gdGFzaztcbiAgaWYgKCFoZWFkKSB7XG4gICAgaGVhZCA9IHRhc2s7XG4gICAgbm90aWZ5KCk7XG4gIH0gbGFzdCA9IHRhc2s7XG59O1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBnbG9iYWwuUHJvbWlzZTtcbiIsInZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9ICEhT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyAmJiAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICAvLyBDaHJvbWUgMzggU3ltYm9sIGhhcyBpbmNvcnJlY3QgdG9TdHJpbmcgY29udmVyc2lvblxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW5kZWZcbiAgcmV0dXJuICFTdHJpbmcoU3ltYm9sKCkpO1xufSk7XG4iLCJ2YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcbnZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcbnZhciBJU19QVVJFID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLXB1cmUnKTtcblxudmFyIElURVJBVE9SID0gd2VsbEtub3duU3ltYm9sKCdpdGVyYXRvcicpO1xuXG5tb2R1bGUuZXhwb3J0cyA9ICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gIHZhciB1cmwgPSBuZXcgVVJMKCdiP2E9MSZiPTImYz0zJywgJ2h0dHA6Ly9hJyk7XG4gIHZhciBzZWFyY2hQYXJhbXMgPSB1cmwuc2VhcmNoUGFyYW1zO1xuICB2YXIgcmVzdWx0ID0gJyc7XG4gIHVybC5wYXRobmFtZSA9ICdjJTIwZCc7XG4gIHNlYXJjaFBhcmFtcy5mb3JFYWNoKGZ1bmN0aW9uICh2YWx1ZSwga2V5KSB7XG4gICAgc2VhcmNoUGFyYW1zWydkZWxldGUnXSgnYicpO1xuICAgIHJlc3VsdCArPSBrZXkgKyB2YWx1ZTtcbiAgfSk7XG4gIHJldHVybiAoSVNfUFVSRSAmJiAhdXJsLnRvSlNPTilcbiAgICB8fCAhc2VhcmNoUGFyYW1zLnNvcnRcbiAgICB8fCB1cmwuaHJlZiAhPT0gJ2h0dHA6Ly9hL2MlMjBkP2E9MSZjPTMnXG4gICAgfHwgc2VhcmNoUGFyYW1zLmdldCgnYycpICE9PSAnMydcbiAgICB8fCBTdHJpbmcobmV3IFVSTFNlYXJjaFBhcmFtcygnP2E9MScpKSAhPT0gJ2E9MSdcbiAgICB8fCAhc2VhcmNoUGFyYW1zW0lURVJBVE9SXVxuICAgIC8vIHRocm93cyBpbiBFZGdlXG4gICAgfHwgbmV3IFVSTCgnaHR0cHM6Ly9hQGInKS51c2VybmFtZSAhPT0gJ2EnXG4gICAgfHwgbmV3IFVSTFNlYXJjaFBhcmFtcyhuZXcgVVJMU2VhcmNoUGFyYW1zKCdhPWInKSkuZ2V0KCdhJykgIT09ICdiJ1xuICAgIC8vIG5vdCBwdW55Y29kZWQgaW4gRWRnZVxuICAgIHx8IG5ldyBVUkwoJ2h0dHA6Ly/RgtC10YHRgicpLmhvc3QgIT09ICd4bi0tZTFheWJjJ1xuICAgIC8vIG5vdCBlc2NhcGVkIGluIENocm9tZSA2Mi1cbiAgICB8fCBuZXcgVVJMKCdodHRwOi8vYSPQsScpLmhhc2ggIT09ICcjJUQwJUIxJ1xuICAgIC8vIGZhaWxzIGluIENocm9tZSA2Ni1cbiAgICB8fCByZXN1bHQgIT09ICdhMWMzJ1xuICAgIC8vIHRocm93cyBpbiBTYWZhcmlcbiAgICB8fCBuZXcgVVJMKCdodHRwOi8veCcsIHVuZGVmaW5lZCkuaG9zdCAhPT0gJ3gnO1xufSk7XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIGluc3BlY3RTb3VyY2UgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaW5zcGVjdC1zb3VyY2UnKTtcblxudmFyIFdlYWtNYXAgPSBnbG9iYWwuV2Vha01hcDtcblxubW9kdWxlLmV4cG9ydHMgPSB0eXBlb2YgV2Vha01hcCA9PT0gJ2Z1bmN0aW9uJyAmJiAvbmF0aXZlIGNvZGUvLnRlc3QoaW5zcGVjdFNvdXJjZShXZWFrTWFwKSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgYUZ1bmN0aW9uID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2EtZnVuY3Rpb24nKTtcblxudmFyIFByb21pc2VDYXBhYmlsaXR5ID0gZnVuY3Rpb24gKEMpIHtcbiAgdmFyIHJlc29sdmUsIHJlamVjdDtcbiAgdGhpcy5wcm9taXNlID0gbmV3IEMoZnVuY3Rpb24gKCQkcmVzb2x2ZSwgJCRyZWplY3QpIHtcbiAgICBpZiAocmVzb2x2ZSAhPT0gdW5kZWZpbmVkIHx8IHJlamVjdCAhPT0gdW5kZWZpbmVkKSB0aHJvdyBUeXBlRXJyb3IoJ0JhZCBQcm9taXNlIGNvbnN0cnVjdG9yJyk7XG4gICAgcmVzb2x2ZSA9ICQkcmVzb2x2ZTtcbiAgICByZWplY3QgPSAkJHJlamVjdDtcbiAgfSk7XG4gIHRoaXMucmVzb2x2ZSA9IGFGdW5jdGlvbihyZXNvbHZlKTtcbiAgdGhpcy5yZWplY3QgPSBhRnVuY3Rpb24ocmVqZWN0KTtcbn07XG5cbi8vIDI1LjQuMS41IE5ld1Byb21pc2VDYXBhYmlsaXR5KEMpXG5tb2R1bGUuZXhwb3J0cy5mID0gZnVuY3Rpb24gKEMpIHtcbiAgcmV0dXJuIG5ldyBQcm9taXNlQ2FwYWJpbGl0eShDKTtcbn07XG4iLCJ2YXIgaXNSZWdFeHAgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtcmVnZXhwJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIGlmIChpc1JlZ0V4cChpdCkpIHtcbiAgICB0aHJvdyBUeXBlRXJyb3IoXCJUaGUgbWV0aG9kIGRvZXNuJ3QgYWNjZXB0IHJlZ3VsYXIgZXhwcmVzc2lvbnNcIik7XG4gIH0gcmV0dXJuIGl0O1xufTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG5cbnZhciBnbG9iYWxJc0Zpbml0ZSA9IGdsb2JhbC5pc0Zpbml0ZTtcblxuLy8gYE51bWJlci5pc0Zpbml0ZWAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW51bWJlci5pc2Zpbml0ZVxubW9kdWxlLmV4cG9ydHMgPSBOdW1iZXIuaXNGaW5pdGUgfHwgZnVuY3Rpb24gaXNGaW5pdGUoaXQpIHtcbiAgcmV0dXJuIHR5cGVvZiBpdCA9PSAnbnVtYmVyJyAmJiBnbG9iYWxJc0Zpbml0ZShpdCk7XG59O1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciB0cmltID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3N0cmluZy10cmltJykudHJpbTtcbnZhciB3aGl0ZXNwYWNlcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93aGl0ZXNwYWNlcycpO1xuXG52YXIgJHBhcnNlRmxvYXQgPSBnbG9iYWwucGFyc2VGbG9hdDtcbnZhciBGT1JDRUQgPSAxIC8gJHBhcnNlRmxvYXQod2hpdGVzcGFjZXMgKyAnLTAnKSAhPT0gLUluZmluaXR5O1xuXG4vLyBgcGFyc2VGbG9hdGAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXBhcnNlZmxvYXQtc3RyaW5nXG5tb2R1bGUuZXhwb3J0cyA9IEZPUkNFRCA/IGZ1bmN0aW9uIHBhcnNlRmxvYXQoc3RyaW5nKSB7XG4gIHZhciB0cmltbWVkU3RyaW5nID0gdHJpbShTdHJpbmcoc3RyaW5nKSk7XG4gIHZhciByZXN1bHQgPSAkcGFyc2VGbG9hdCh0cmltbWVkU3RyaW5nKTtcbiAgcmV0dXJuIHJlc3VsdCA9PT0gMCAmJiB0cmltbWVkU3RyaW5nLmNoYXJBdCgwKSA9PSAnLScgPyAtMCA6IHJlc3VsdDtcbn0gOiAkcGFyc2VGbG9hdDtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgdHJpbSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zdHJpbmctdHJpbScpLnRyaW07XG52YXIgd2hpdGVzcGFjZXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2hpdGVzcGFjZXMnKTtcblxudmFyICRwYXJzZUludCA9IGdsb2JhbC5wYXJzZUludDtcbnZhciBoZXggPSAvXlsrLV0/MFtYeF0vO1xudmFyIEZPUkNFRCA9ICRwYXJzZUludCh3aGl0ZXNwYWNlcyArICcwOCcpICE9PSA4IHx8ICRwYXJzZUludCh3aGl0ZXNwYWNlcyArICcweDE2JykgIT09IDIyO1xuXG4vLyBgcGFyc2VJbnRgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1wYXJzZWludC1zdHJpbmctcmFkaXhcbm1vZHVsZS5leHBvcnRzID0gRk9SQ0VEID8gZnVuY3Rpb24gcGFyc2VJbnQoc3RyaW5nLCByYWRpeCkge1xuICB2YXIgUyA9IHRyaW0oU3RyaW5nKHN0cmluZykpO1xuICByZXR1cm4gJHBhcnNlSW50KFMsIChyYWRpeCA+Pj4gMCkgfHwgKGhleC50ZXN0KFMpID8gMTYgOiAxMCkpO1xufSA6ICRwYXJzZUludDtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZXNjcmlwdG9ycycpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG52YXIgb2JqZWN0S2V5cyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3Qta2V5cycpO1xudmFyIGdldE93blByb3BlcnR5U3ltYm9sc01vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZ2V0LW93bi1wcm9wZXJ0eS1zeW1ib2xzJyk7XG52YXIgcHJvcGVydHlJc0VudW1lcmFibGVNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LXByb3BlcnR5LWlzLWVudW1lcmFibGUnKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1vYmplY3QnKTtcbnZhciBJbmRleGVkT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2luZGV4ZWQtb2JqZWN0Jyk7XG5cbnZhciBuYXRpdmVBc3NpZ24gPSBPYmplY3QuYXNzaWduO1xudmFyIGRlZmluZVByb3BlcnR5ID0gT2JqZWN0LmRlZmluZVByb3BlcnR5O1xuXG4vLyBgT2JqZWN0LmFzc2lnbmAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW9iamVjdC5hc3NpZ25cbm1vZHVsZS5leHBvcnRzID0gIW5hdGl2ZUFzc2lnbiB8fCBmYWlscyhmdW5jdGlvbiAoKSB7XG4gIC8vIHNob3VsZCBoYXZlIGNvcnJlY3Qgb3JkZXIgb2Ygb3BlcmF0aW9ucyAoRWRnZSBidWcpXG4gIGlmIChERVNDUklQVE9SUyAmJiBuYXRpdmVBc3NpZ24oeyBiOiAxIH0sIG5hdGl2ZUFzc2lnbihkZWZpbmVQcm9wZXJ0eSh7fSwgJ2EnLCB7XG4gICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgIGRlZmluZVByb3BlcnR5KHRoaXMsICdiJywge1xuICAgICAgICB2YWx1ZTogMyxcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2VcbiAgICAgIH0pO1xuICAgIH1cbiAgfSksIHsgYjogMiB9KSkuYiAhPT0gMSkgcmV0dXJuIHRydWU7XG4gIC8vIHNob3VsZCB3b3JrIHdpdGggc3ltYm9scyBhbmQgc2hvdWxkIGhhdmUgZGV0ZXJtaW5pc3RpYyBwcm9wZXJ0eSBvcmRlciAoVjggYnVnKVxuICB2YXIgQSA9IHt9O1xuICB2YXIgQiA9IHt9O1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW5kZWZcbiAgdmFyIHN5bWJvbCA9IFN5bWJvbCgpO1xuICB2YXIgYWxwaGFiZXQgPSAnYWJjZGVmZ2hpamtsbW5vcHFyc3QnO1xuICBBW3N5bWJvbF0gPSA3O1xuICBhbHBoYWJldC5zcGxpdCgnJykuZm9yRWFjaChmdW5jdGlvbiAoY2hyKSB7IEJbY2hyXSA9IGNocjsgfSk7XG4gIHJldHVybiBuYXRpdmVBc3NpZ24oe30sIEEpW3N5bWJvbF0gIT0gNyB8fCBvYmplY3RLZXlzKG5hdGl2ZUFzc2lnbih7fSwgQikpLmpvaW4oJycpICE9IGFscGhhYmV0O1xufSkgPyBmdW5jdGlvbiBhc3NpZ24odGFyZ2V0LCBzb3VyY2UpIHsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtdmFyc1xuICB2YXIgVCA9IHRvT2JqZWN0KHRhcmdldCk7XG4gIHZhciBhcmd1bWVudHNMZW5ndGggPSBhcmd1bWVudHMubGVuZ3RoO1xuICB2YXIgaW5kZXggPSAxO1xuICB2YXIgZ2V0T3duUHJvcGVydHlTeW1ib2xzID0gZ2V0T3duUHJvcGVydHlTeW1ib2xzTW9kdWxlLmY7XG4gIHZhciBwcm9wZXJ0eUlzRW51bWVyYWJsZSA9IHByb3BlcnR5SXNFbnVtZXJhYmxlTW9kdWxlLmY7XG4gIHdoaWxlIChhcmd1bWVudHNMZW5ndGggPiBpbmRleCkge1xuICAgIHZhciBTID0gSW5kZXhlZE9iamVjdChhcmd1bWVudHNbaW5kZXgrK10pO1xuICAgIHZhciBrZXlzID0gZ2V0T3duUHJvcGVydHlTeW1ib2xzID8gb2JqZWN0S2V5cyhTKS5jb25jYXQoZ2V0T3duUHJvcGVydHlTeW1ib2xzKFMpKSA6IG9iamVjdEtleXMoUyk7XG4gICAgdmFyIGxlbmd0aCA9IGtleXMubGVuZ3RoO1xuICAgIHZhciBqID0gMDtcbiAgICB2YXIga2V5O1xuICAgIHdoaWxlIChsZW5ndGggPiBqKSB7XG4gICAgICBrZXkgPSBrZXlzW2orK107XG4gICAgICBpZiAoIURFU0NSSVBUT1JTIHx8IHByb3BlcnR5SXNFbnVtZXJhYmxlLmNhbGwoUywga2V5KSkgVFtrZXldID0gU1trZXldO1xuICAgIH1cbiAgfSByZXR1cm4gVDtcbn0gOiBuYXRpdmVBc3NpZ247XG4iLCJ2YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4tb2JqZWN0Jyk7XG52YXIgZGVmaW5lUHJvcGVydGllcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZGVmaW5lLXByb3BlcnRpZXMnKTtcbnZhciBlbnVtQnVnS2V5cyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9lbnVtLWJ1Zy1rZXlzJyk7XG52YXIgaGlkZGVuS2V5cyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oaWRkZW4ta2V5cycpO1xudmFyIGh0bWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaHRtbCcpO1xudmFyIGRvY3VtZW50Q3JlYXRlRWxlbWVudCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kb2N1bWVudC1jcmVhdGUtZWxlbWVudCcpO1xudmFyIHNoYXJlZEtleSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zaGFyZWQta2V5Jyk7XG5cbnZhciBHVCA9ICc+JztcbnZhciBMVCA9ICc8JztcbnZhciBQUk9UT1RZUEUgPSAncHJvdG90eXBlJztcbnZhciBTQ1JJUFQgPSAnc2NyaXB0JztcbnZhciBJRV9QUk9UTyA9IHNoYXJlZEtleSgnSUVfUFJPVE8nKTtcblxudmFyIEVtcHR5Q29uc3RydWN0b3IgPSBmdW5jdGlvbiAoKSB7IC8qIGVtcHR5ICovIH07XG5cbnZhciBzY3JpcHRUYWcgPSBmdW5jdGlvbiAoY29udGVudCkge1xuICByZXR1cm4gTFQgKyBTQ1JJUFQgKyBHVCArIGNvbnRlbnQgKyBMVCArICcvJyArIFNDUklQVCArIEdUO1xufTtcblxuLy8gQ3JlYXRlIG9iamVjdCB3aXRoIGZha2UgYG51bGxgIHByb3RvdHlwZTogdXNlIEFjdGl2ZVggT2JqZWN0IHdpdGggY2xlYXJlZCBwcm90b3R5cGVcbnZhciBOdWxsUHJvdG9PYmplY3RWaWFBY3RpdmVYID0gZnVuY3Rpb24gKGFjdGl2ZVhEb2N1bWVudCkge1xuICBhY3RpdmVYRG9jdW1lbnQud3JpdGUoc2NyaXB0VGFnKCcnKSk7XG4gIGFjdGl2ZVhEb2N1bWVudC5jbG9zZSgpO1xuICB2YXIgdGVtcCA9IGFjdGl2ZVhEb2N1bWVudC5wYXJlbnRXaW5kb3cuT2JqZWN0O1xuICBhY3RpdmVYRG9jdW1lbnQgPSBudWxsOyAvLyBhdm9pZCBtZW1vcnkgbGVha1xuICByZXR1cm4gdGVtcDtcbn07XG5cbi8vIENyZWF0ZSBvYmplY3Qgd2l0aCBmYWtlIGBudWxsYCBwcm90b3R5cGU6IHVzZSBpZnJhbWUgT2JqZWN0IHdpdGggY2xlYXJlZCBwcm90b3R5cGVcbnZhciBOdWxsUHJvdG9PYmplY3RWaWFJRnJhbWUgPSBmdW5jdGlvbiAoKSB7XG4gIC8vIFRocmFzaCwgd2FzdGUgYW5kIHNvZG9teTogSUUgR0MgYnVnXG4gIHZhciBpZnJhbWUgPSBkb2N1bWVudENyZWF0ZUVsZW1lbnQoJ2lmcmFtZScpO1xuICB2YXIgSlMgPSAnamF2YScgKyBTQ1JJUFQgKyAnOic7XG4gIHZhciBpZnJhbWVEb2N1bWVudDtcbiAgaWZyYW1lLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG4gIGh0bWwuYXBwZW5kQ2hpbGQoaWZyYW1lKTtcbiAgLy8gaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMvaXNzdWVzLzQ3NVxuICBpZnJhbWUuc3JjID0gU3RyaW5nKEpTKTtcbiAgaWZyYW1lRG9jdW1lbnQgPSBpZnJhbWUuY29udGVudFdpbmRvdy5kb2N1bWVudDtcbiAgaWZyYW1lRG9jdW1lbnQub3BlbigpO1xuICBpZnJhbWVEb2N1bWVudC53cml0ZShzY3JpcHRUYWcoJ2RvY3VtZW50LkY9T2JqZWN0JykpO1xuICBpZnJhbWVEb2N1bWVudC5jbG9zZSgpO1xuICByZXR1cm4gaWZyYW1lRG9jdW1lbnQuRjtcbn07XG5cbi8vIENoZWNrIGZvciBkb2N1bWVudC5kb21haW4gYW5kIGFjdGl2ZSB4IHN1cHBvcnRcbi8vIE5vIG5lZWQgdG8gdXNlIGFjdGl2ZSB4IGFwcHJvYWNoIHdoZW4gZG9jdW1lbnQuZG9tYWluIGlzIG5vdCBzZXRcbi8vIHNlZSBodHRwczovL2dpdGh1Yi5jb20vZXMtc2hpbXMvZXM1LXNoaW0vaXNzdWVzLzE1MFxuLy8gdmFyaWF0aW9uIG9mIGh0dHBzOi8vZ2l0aHViLmNvbS9raXRjYW1icmlkZ2UvZXM1LXNoaW0vY29tbWl0LzRmNzM4YWMwNjYzNDZcbi8vIGF2b2lkIElFIEdDIGJ1Z1xudmFyIGFjdGl2ZVhEb2N1bWVudDtcbnZhciBOdWxsUHJvdG9PYmplY3QgPSBmdW5jdGlvbiAoKSB7XG4gIHRyeSB7XG4gICAgLyogZ2xvYmFsIEFjdGl2ZVhPYmplY3QgKi9cbiAgICBhY3RpdmVYRG9jdW1lbnQgPSBkb2N1bWVudC5kb21haW4gJiYgbmV3IEFjdGl2ZVhPYmplY3QoJ2h0bWxmaWxlJyk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7IC8qIGlnbm9yZSAqLyB9XG4gIE51bGxQcm90b09iamVjdCA9IGFjdGl2ZVhEb2N1bWVudCA/IE51bGxQcm90b09iamVjdFZpYUFjdGl2ZVgoYWN0aXZlWERvY3VtZW50KSA6IE51bGxQcm90b09iamVjdFZpYUlGcmFtZSgpO1xuICB2YXIgbGVuZ3RoID0gZW51bUJ1Z0tleXMubGVuZ3RoO1xuICB3aGlsZSAobGVuZ3RoLS0pIGRlbGV0ZSBOdWxsUHJvdG9PYmplY3RbUFJPVE9UWVBFXVtlbnVtQnVnS2V5c1tsZW5ndGhdXTtcbiAgcmV0dXJuIE51bGxQcm90b09iamVjdCgpO1xufTtcblxuaGlkZGVuS2V5c1tJRV9QUk9UT10gPSB0cnVlO1xuXG4vLyBgT2JqZWN0LmNyZWF0ZWAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW9iamVjdC5jcmVhdGVcbm1vZHVsZS5leHBvcnRzID0gT2JqZWN0LmNyZWF0ZSB8fCBmdW5jdGlvbiBjcmVhdGUoTywgUHJvcGVydGllcykge1xuICB2YXIgcmVzdWx0O1xuICBpZiAoTyAhPT0gbnVsbCkge1xuICAgIEVtcHR5Q29uc3RydWN0b3JbUFJPVE9UWVBFXSA9IGFuT2JqZWN0KE8pO1xuICAgIHJlc3VsdCA9IG5ldyBFbXB0eUNvbnN0cnVjdG9yKCk7XG4gICAgRW1wdHlDb25zdHJ1Y3RvcltQUk9UT1RZUEVdID0gbnVsbDtcbiAgICAvLyBhZGQgXCJfX3Byb3RvX19cIiBmb3IgT2JqZWN0LmdldFByb3RvdHlwZU9mIHBvbHlmaWxsXG4gICAgcmVzdWx0W0lFX1BST1RPXSA9IE87XG4gIH0gZWxzZSByZXN1bHQgPSBOdWxsUHJvdG9PYmplY3QoKTtcbiAgcmV0dXJuIFByb3BlcnRpZXMgPT09IHVuZGVmaW5lZCA/IHJlc3VsdCA6IGRlZmluZVByb3BlcnRpZXMocmVzdWx0LCBQcm9wZXJ0aWVzKTtcbn07XG4iLCJ2YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVzY3JpcHRvcnMnKTtcbnZhciBkZWZpbmVQcm9wZXJ0eU1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZGVmaW5lLXByb3BlcnR5Jyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4tb2JqZWN0Jyk7XG52YXIgb2JqZWN0S2V5cyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3Qta2V5cycpO1xuXG4vLyBgT2JqZWN0LmRlZmluZVByb3BlcnRpZXNgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1vYmplY3QuZGVmaW5lcHJvcGVydGllc1xubW9kdWxlLmV4cG9ydHMgPSBERVNDUklQVE9SUyA/IE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzIDogZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyhPLCBQcm9wZXJ0aWVzKSB7XG4gIGFuT2JqZWN0KE8pO1xuICB2YXIga2V5cyA9IG9iamVjdEtleXMoUHJvcGVydGllcyk7XG4gIHZhciBsZW5ndGggPSBrZXlzLmxlbmd0aDtcbiAgdmFyIGluZGV4ID0gMDtcbiAgdmFyIGtleTtcbiAgd2hpbGUgKGxlbmd0aCA+IGluZGV4KSBkZWZpbmVQcm9wZXJ0eU1vZHVsZS5mKE8sIGtleSA9IGtleXNbaW5kZXgrK10sIFByb3BlcnRpZXNba2V5XSk7XG4gIHJldHVybiBPO1xufTtcbiIsInZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZXNjcmlwdG9ycycpO1xudmFyIElFOF9ET01fREVGSU5FID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2llOC1kb20tZGVmaW5lJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4tb2JqZWN0Jyk7XG52YXIgdG9QcmltaXRpdmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tcHJpbWl0aXZlJyk7XG5cbnZhciBuYXRpdmVEZWZpbmVQcm9wZXJ0eSA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eTtcblxuLy8gYE9iamVjdC5kZWZpbmVQcm9wZXJ0eWAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW9iamVjdC5kZWZpbmVwcm9wZXJ0eVxuZXhwb3J0cy5mID0gREVTQ1JJUFRPUlMgPyBuYXRpdmVEZWZpbmVQcm9wZXJ0eSA6IGZ1bmN0aW9uIGRlZmluZVByb3BlcnR5KE8sIFAsIEF0dHJpYnV0ZXMpIHtcbiAgYW5PYmplY3QoTyk7XG4gIFAgPSB0b1ByaW1pdGl2ZShQLCB0cnVlKTtcbiAgYW5PYmplY3QoQXR0cmlidXRlcyk7XG4gIGlmIChJRThfRE9NX0RFRklORSkgdHJ5IHtcbiAgICByZXR1cm4gbmF0aXZlRGVmaW5lUHJvcGVydHkoTywgUCwgQXR0cmlidXRlcyk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7IC8qIGVtcHR5ICovIH1cbiAgaWYgKCdnZXQnIGluIEF0dHJpYnV0ZXMgfHwgJ3NldCcgaW4gQXR0cmlidXRlcykgdGhyb3cgVHlwZUVycm9yKCdBY2Nlc3NvcnMgbm90IHN1cHBvcnRlZCcpO1xuICBpZiAoJ3ZhbHVlJyBpbiBBdHRyaWJ1dGVzKSBPW1BdID0gQXR0cmlidXRlcy52YWx1ZTtcbiAgcmV0dXJuIE87XG59O1xuIiwidmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Rlc2NyaXB0b3JzJyk7XG52YXIgcHJvcGVydHlJc0VudW1lcmFibGVNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LXByb3BlcnR5LWlzLWVudW1lcmFibGUnKTtcbnZhciBjcmVhdGVQcm9wZXJ0eURlc2NyaXB0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLXByb3BlcnR5LWRlc2NyaXB0b3InKTtcbnZhciB0b0luZGV4ZWRPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8taW5kZXhlZC1vYmplY3QnKTtcbnZhciB0b1ByaW1pdGl2ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1wcmltaXRpdmUnKTtcbnZhciBoYXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGFzJyk7XG52YXIgSUU4X0RPTV9ERUZJTkUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaWU4LWRvbS1kZWZpbmUnKTtcblxudmFyIG5hdGl2ZUdldE93blByb3BlcnR5RGVzY3JpcHRvciA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG5cbi8vIGBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtb2JqZWN0LmdldG93bnByb3BlcnR5ZGVzY3JpcHRvclxuZXhwb3J0cy5mID0gREVTQ1JJUFRPUlMgPyBuYXRpdmVHZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgOiBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoTywgUCkge1xuICBPID0gdG9JbmRleGVkT2JqZWN0KE8pO1xuICBQID0gdG9QcmltaXRpdmUoUCwgdHJ1ZSk7XG4gIGlmIChJRThfRE9NX0RFRklORSkgdHJ5IHtcbiAgICByZXR1cm4gbmF0aXZlR2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKE8sIFApO1xuICB9IGNhdGNoIChlcnJvcikgeyAvKiBlbXB0eSAqLyB9XG4gIGlmIChoYXMoTywgUCkpIHJldHVybiBjcmVhdGVQcm9wZXJ0eURlc2NyaXB0b3IoIXByb3BlcnR5SXNFbnVtZXJhYmxlTW9kdWxlLmYuY2FsbChPLCBQKSwgT1tQXSk7XG59O1xuIiwidmFyIHRvSW5kZXhlZE9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1pbmRleGVkLW9iamVjdCcpO1xudmFyIG5hdGl2ZUdldE93blByb3BlcnR5TmFtZXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1vd24tcHJvcGVydHktbmFtZXMnKS5mO1xuXG52YXIgdG9TdHJpbmcgPSB7fS50b1N0cmluZztcblxudmFyIHdpbmRvd05hbWVzID0gdHlwZW9mIHdpbmRvdyA9PSAnb2JqZWN0JyAmJiB3aW5kb3cgJiYgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXNcbiAgPyBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh3aW5kb3cpIDogW107XG5cbnZhciBnZXRXaW5kb3dOYW1lcyA9IGZ1bmN0aW9uIChpdCkge1xuICB0cnkge1xuICAgIHJldHVybiBuYXRpdmVHZXRPd25Qcm9wZXJ0eU5hbWVzKGl0KTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICByZXR1cm4gd2luZG93TmFtZXMuc2xpY2UoKTtcbiAgfVxufTtcblxuLy8gZmFsbGJhY2sgZm9yIElFMTEgYnVnZ3kgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMgd2l0aCBpZnJhbWUgYW5kIHdpbmRvd1xubW9kdWxlLmV4cG9ydHMuZiA9IGZ1bmN0aW9uIGdldE93blByb3BlcnR5TmFtZXMoaXQpIHtcbiAgcmV0dXJuIHdpbmRvd05hbWVzICYmIHRvU3RyaW5nLmNhbGwoaXQpID09ICdbb2JqZWN0IFdpbmRvd10nXG4gICAgPyBnZXRXaW5kb3dOYW1lcyhpdClcbiAgICA6IG5hdGl2ZUdldE93blByb3BlcnR5TmFtZXModG9JbmRleGVkT2JqZWN0KGl0KSk7XG59O1xuIiwidmFyIGludGVybmFsT2JqZWN0S2V5cyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3Qta2V5cy1pbnRlcm5hbCcpO1xudmFyIGVudW1CdWdLZXlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2VudW0tYnVnLWtleXMnKTtcblxudmFyIGhpZGRlbktleXMgPSBlbnVtQnVnS2V5cy5jb25jYXQoJ2xlbmd0aCcsICdwcm90b3R5cGUnKTtcblxuLy8gYE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtb2JqZWN0LmdldG93bnByb3BlcnR5bmFtZXNcbmV4cG9ydHMuZiA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzIHx8IGZ1bmN0aW9uIGdldE93blByb3BlcnR5TmFtZXMoTykge1xuICByZXR1cm4gaW50ZXJuYWxPYmplY3RLZXlzKE8sIGhpZGRlbktleXMpO1xufTtcbiIsImV4cG9ydHMuZiA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHM7XG4iLCJ2YXIgaGFzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hhcycpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLW9iamVjdCcpO1xudmFyIHNoYXJlZEtleSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zaGFyZWQta2V5Jyk7XG52YXIgQ09SUkVDVF9QUk9UT1RZUEVfR0VUVEVSID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NvcnJlY3QtcHJvdG90eXBlLWdldHRlcicpO1xuXG52YXIgSUVfUFJPVE8gPSBzaGFyZWRLZXkoJ0lFX1BST1RPJyk7XG52YXIgT2JqZWN0UHJvdG90eXBlID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLy8gYE9iamVjdC5nZXRQcm90b3R5cGVPZmAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW9iamVjdC5nZXRwcm90b3R5cGVvZlxubW9kdWxlLmV4cG9ydHMgPSBDT1JSRUNUX1BST1RPVFlQRV9HRVRURVIgPyBPYmplY3QuZ2V0UHJvdG90eXBlT2YgOiBmdW5jdGlvbiAoTykge1xuICBPID0gdG9PYmplY3QoTyk7XG4gIGlmIChoYXMoTywgSUVfUFJPVE8pKSByZXR1cm4gT1tJRV9QUk9UT107XG4gIGlmICh0eXBlb2YgTy5jb25zdHJ1Y3RvciA9PSAnZnVuY3Rpb24nICYmIE8gaW5zdGFuY2VvZiBPLmNvbnN0cnVjdG9yKSB7XG4gICAgcmV0dXJuIE8uY29uc3RydWN0b3IucHJvdG90eXBlO1xuICB9IHJldHVybiBPIGluc3RhbmNlb2YgT2JqZWN0ID8gT2JqZWN0UHJvdG90eXBlIDogbnVsbDtcbn07XG4iLCJ2YXIgaGFzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hhcycpO1xudmFyIHRvSW5kZXhlZE9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1pbmRleGVkLW9iamVjdCcpO1xudmFyIGluZGV4T2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktaW5jbHVkZXMnKS5pbmRleE9mO1xudmFyIGhpZGRlbktleXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGlkZGVuLWtleXMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAob2JqZWN0LCBuYW1lcykge1xuICB2YXIgTyA9IHRvSW5kZXhlZE9iamVjdChvYmplY3QpO1xuICB2YXIgaSA9IDA7XG4gIHZhciByZXN1bHQgPSBbXTtcbiAgdmFyIGtleTtcbiAgZm9yIChrZXkgaW4gTykgIWhhcyhoaWRkZW5LZXlzLCBrZXkpICYmIGhhcyhPLCBrZXkpICYmIHJlc3VsdC5wdXNoKGtleSk7XG4gIC8vIERvbid0IGVudW0gYnVnICYgaGlkZGVuIGtleXNcbiAgd2hpbGUgKG5hbWVzLmxlbmd0aCA+IGkpIGlmIChoYXMoTywga2V5ID0gbmFtZXNbaSsrXSkpIHtcbiAgICB+aW5kZXhPZihyZXN1bHQsIGtleSkgfHwgcmVzdWx0LnB1c2goa2V5KTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufTtcbiIsInZhciBpbnRlcm5hbE9iamVjdEtleXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWtleXMtaW50ZXJuYWwnKTtcbnZhciBlbnVtQnVnS2V5cyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9lbnVtLWJ1Zy1rZXlzJyk7XG5cbi8vIGBPYmplY3Qua2V5c2AgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW9iamVjdC5rZXlzXG5tb2R1bGUuZXhwb3J0cyA9IE9iamVjdC5rZXlzIHx8IGZ1bmN0aW9uIGtleXMoTykge1xuICByZXR1cm4gaW50ZXJuYWxPYmplY3RLZXlzKE8sIGVudW1CdWdLZXlzKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgbmF0aXZlUHJvcGVydHlJc0VudW1lcmFibGUgPSB7fS5wcm9wZXJ0eUlzRW51bWVyYWJsZTtcbnZhciBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO1xuXG4vLyBOYXNob3JuIH4gSkRLOCBidWdcbnZhciBOQVNIT1JOX0JVRyA9IGdldE93blByb3BlcnR5RGVzY3JpcHRvciAmJiAhbmF0aXZlUHJvcGVydHlJc0VudW1lcmFibGUuY2FsbCh7IDE6IDIgfSwgMSk7XG5cbi8vIGBPYmplY3QucHJvdG90eXBlLnByb3BlcnR5SXNFbnVtZXJhYmxlYCBtZXRob2QgaW1wbGVtZW50YXRpb25cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtb2JqZWN0LnByb3RvdHlwZS5wcm9wZXJ0eWlzZW51bWVyYWJsZVxuZXhwb3J0cy5mID0gTkFTSE9STl9CVUcgPyBmdW5jdGlvbiBwcm9wZXJ0eUlzRW51bWVyYWJsZShWKSB7XG4gIHZhciBkZXNjcmlwdG9yID0gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRoaXMsIFYpO1xuICByZXR1cm4gISFkZXNjcmlwdG9yICYmIGRlc2NyaXB0b3IuZW51bWVyYWJsZTtcbn0gOiBuYXRpdmVQcm9wZXJ0eUlzRW51bWVyYWJsZTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBJU19QVVJFID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLXB1cmUnKTtcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcblxuLy8gRm9yY2VkIHJlcGxhY2VtZW50IG9iamVjdCBwcm90b3R5cGUgYWNjZXNzb3JzIG1ldGhvZHNcbm1vZHVsZS5leHBvcnRzID0gSVNfUFVSRSB8fCAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICB2YXIga2V5ID0gTWF0aC5yYW5kb20oKTtcbiAgLy8gSW4gRkYgdGhyb3dzIG9ubHkgZGVmaW5lIG1ldGhvZHNcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVuZGVmLCBuby11c2VsZXNzLWNhbGxcbiAgX19kZWZpbmVTZXR0ZXJfXy5jYWxsKG51bGwsIGtleSwgZnVuY3Rpb24gKCkgeyAvKiBlbXB0eSAqLyB9KTtcbiAgZGVsZXRlIGdsb2JhbFtrZXldO1xufSk7XG4iLCJ2YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4tb2JqZWN0Jyk7XG52YXIgYVBvc3NpYmxlUHJvdG90eXBlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2EtcG9zc2libGUtcHJvdG90eXBlJyk7XG5cbi8vIGBPYmplY3Quc2V0UHJvdG90eXBlT2ZgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1vYmplY3Quc2V0cHJvdG90eXBlb2Zcbi8vIFdvcmtzIHdpdGggX19wcm90b19fIG9ubHkuIE9sZCB2OCBjYW4ndCB3b3JrIHdpdGggbnVsbCBwcm90byBvYmplY3RzLlxuLyogZXNsaW50LWRpc2FibGUgbm8tcHJvdG8gKi9cbm1vZHVsZS5leHBvcnRzID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8ICgnX19wcm90b19fJyBpbiB7fSA/IGZ1bmN0aW9uICgpIHtcbiAgdmFyIENPUlJFQ1RfU0VUVEVSID0gZmFsc2U7XG4gIHZhciB0ZXN0ID0ge307XG4gIHZhciBzZXR0ZXI7XG4gIHRyeSB7XG4gICAgc2V0dGVyID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihPYmplY3QucHJvdG90eXBlLCAnX19wcm90b19fJykuc2V0O1xuICAgIHNldHRlci5jYWxsKHRlc3QsIFtdKTtcbiAgICBDT1JSRUNUX1NFVFRFUiA9IHRlc3QgaW5zdGFuY2VvZiBBcnJheTtcbiAgfSBjYXRjaCAoZXJyb3IpIHsgLyogZW1wdHkgKi8gfVxuICByZXR1cm4gZnVuY3Rpb24gc2V0UHJvdG90eXBlT2YoTywgcHJvdG8pIHtcbiAgICBhbk9iamVjdChPKTtcbiAgICBhUG9zc2libGVQcm90b3R5cGUocHJvdG8pO1xuICAgIGlmIChDT1JSRUNUX1NFVFRFUikgc2V0dGVyLmNhbGwoTywgcHJvdG8pO1xuICAgIGVsc2UgTy5fX3Byb3RvX18gPSBwcm90bztcbiAgICByZXR1cm4gTztcbiAgfTtcbn0oKSA6IHVuZGVmaW5lZCk7XG4iLCJ2YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVzY3JpcHRvcnMnKTtcbnZhciBvYmplY3RLZXlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1rZXlzJyk7XG52YXIgdG9JbmRleGVkT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWluZGV4ZWQtb2JqZWN0Jyk7XG52YXIgcHJvcGVydHlJc0VudW1lcmFibGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LXByb3BlcnR5LWlzLWVudW1lcmFibGUnKS5mO1xuXG4vLyBgT2JqZWN0LnsgZW50cmllcywgdmFsdWVzIH1gIG1ldGhvZHMgaW1wbGVtZW50YXRpb25cbnZhciBjcmVhdGVNZXRob2QgPSBmdW5jdGlvbiAoVE9fRU5UUklFUykge1xuICByZXR1cm4gZnVuY3Rpb24gKGl0KSB7XG4gICAgdmFyIE8gPSB0b0luZGV4ZWRPYmplY3QoaXQpO1xuICAgIHZhciBrZXlzID0gb2JqZWN0S2V5cyhPKTtcbiAgICB2YXIgbGVuZ3RoID0ga2V5cy5sZW5ndGg7XG4gICAgdmFyIGkgPSAwO1xuICAgIHZhciByZXN1bHQgPSBbXTtcbiAgICB2YXIga2V5O1xuICAgIHdoaWxlIChsZW5ndGggPiBpKSB7XG4gICAgICBrZXkgPSBrZXlzW2krK107XG4gICAgICBpZiAoIURFU0NSSVBUT1JTIHx8IHByb3BlcnR5SXNFbnVtZXJhYmxlLmNhbGwoTywga2V5KSkge1xuICAgICAgICByZXN1bHQucHVzaChUT19FTlRSSUVTID8gW2tleSwgT1trZXldXSA6IE9ba2V5XSk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH07XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgLy8gYE9iamVjdC5lbnRyaWVzYCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1vYmplY3QuZW50cmllc1xuICBlbnRyaWVzOiBjcmVhdGVNZXRob2QodHJ1ZSksXG4gIC8vIGBPYmplY3QudmFsdWVzYCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1vYmplY3QudmFsdWVzXG4gIHZhbHVlczogY3JlYXRlTWV0aG9kKGZhbHNlKVxufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBUT19TVFJJTkdfVEFHX1NVUFBPUlQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tc3RyaW5nLXRhZy1zdXBwb3J0Jyk7XG52YXIgY2xhc3NvZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jbGFzc29mJyk7XG5cbi8vIGBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nYCBtZXRob2QgaW1wbGVtZW50YXRpb25cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtb2JqZWN0LnByb3RvdHlwZS50b3N0cmluZ1xubW9kdWxlLmV4cG9ydHMgPSBUT19TVFJJTkdfVEFHX1NVUFBPUlQgPyB7fS50b1N0cmluZyA6IGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICByZXR1cm4gJ1tvYmplY3QgJyArIGNsYXNzb2YodGhpcykgKyAnXSc7XG59O1xuIiwidmFyIGdldEJ1aWx0SW4gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2V0LWJ1aWx0LWluJyk7XG52YXIgZ2V0T3duUHJvcGVydHlOYW1lc01vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZ2V0LW93bi1wcm9wZXJ0eS1uYW1lcycpO1xudmFyIGdldE93blByb3BlcnR5U3ltYm9sc01vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZ2V0LW93bi1wcm9wZXJ0eS1zeW1ib2xzJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4tb2JqZWN0Jyk7XG5cbi8vIGFsbCBvYmplY3Qga2V5cywgaW5jbHVkZXMgbm9uLWVudW1lcmFibGUgYW5kIHN5bWJvbHNcbm1vZHVsZS5leHBvcnRzID0gZ2V0QnVpbHRJbignUmVmbGVjdCcsICdvd25LZXlzJykgfHwgZnVuY3Rpb24gb3duS2V5cyhpdCkge1xuICB2YXIga2V5cyA9IGdldE93blByb3BlcnR5TmFtZXNNb2R1bGUuZihhbk9iamVjdChpdCkpO1xuICB2YXIgZ2V0T3duUHJvcGVydHlTeW1ib2xzID0gZ2V0T3duUHJvcGVydHlTeW1ib2xzTW9kdWxlLmY7XG4gIHJldHVybiBnZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPyBrZXlzLmNvbmNhdChnZXRPd25Qcm9wZXJ0eVN5bWJvbHMoaXQpKSA6IGtleXM7XG59O1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBnbG9iYWw7XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChleGVjKSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIHsgZXJyb3I6IGZhbHNlLCB2YWx1ZTogZXhlYygpIH07XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgcmV0dXJuIHsgZXJyb3I6IHRydWUsIHZhbHVlOiBlcnJvciB9O1xuICB9XG59O1xuIiwidmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLW9iamVjdCcpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLW9iamVjdCcpO1xudmFyIG5ld1Byb21pc2VDYXBhYmlsaXR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL25ldy1wcm9taXNlLWNhcGFiaWxpdHknKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoQywgeCkge1xuICBhbk9iamVjdChDKTtcbiAgaWYgKGlzT2JqZWN0KHgpICYmIHguY29uc3RydWN0b3IgPT09IEMpIHJldHVybiB4O1xuICB2YXIgcHJvbWlzZUNhcGFiaWxpdHkgPSBuZXdQcm9taXNlQ2FwYWJpbGl0eS5mKEMpO1xuICB2YXIgcmVzb2x2ZSA9IHByb21pc2VDYXBhYmlsaXR5LnJlc29sdmU7XG4gIHJlc29sdmUoeCk7XG4gIHJldHVybiBwcm9taXNlQ2FwYWJpbGl0eS5wcm9taXNlO1xufTtcbiIsInZhciByZWRlZmluZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZWRlZmluZScpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICh0YXJnZXQsIHNyYywgb3B0aW9ucykge1xuICBmb3IgKHZhciBrZXkgaW4gc3JjKSByZWRlZmluZSh0YXJnZXQsIGtleSwgc3JjW2tleV0sIG9wdGlvbnMpO1xuICByZXR1cm4gdGFyZ2V0O1xufTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1ub24tZW51bWVyYWJsZS1wcm9wZXJ0eScpO1xudmFyIGhhcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oYXMnKTtcbnZhciBzZXRHbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2V0LWdsb2JhbCcpO1xudmFyIGluc3BlY3RTb3VyY2UgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaW5zcGVjdC1zb3VyY2UnKTtcbnZhciBJbnRlcm5hbFN0YXRlTW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ludGVybmFsLXN0YXRlJyk7XG5cbnZhciBnZXRJbnRlcm5hbFN0YXRlID0gSW50ZXJuYWxTdGF0ZU1vZHVsZS5nZXQ7XG52YXIgZW5mb3JjZUludGVybmFsU3RhdGUgPSBJbnRlcm5hbFN0YXRlTW9kdWxlLmVuZm9yY2U7XG52YXIgVEVNUExBVEUgPSBTdHJpbmcoU3RyaW5nKS5zcGxpdCgnU3RyaW5nJyk7XG5cbihtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChPLCBrZXksIHZhbHVlLCBvcHRpb25zKSB7XG4gIHZhciB1bnNhZmUgPSBvcHRpb25zID8gISFvcHRpb25zLnVuc2FmZSA6IGZhbHNlO1xuICB2YXIgc2ltcGxlID0gb3B0aW9ucyA/ICEhb3B0aW9ucy5lbnVtZXJhYmxlIDogZmFsc2U7XG4gIHZhciBub1RhcmdldEdldCA9IG9wdGlvbnMgPyAhIW9wdGlvbnMubm9UYXJnZXRHZXQgOiBmYWxzZTtcbiAgdmFyIHN0YXRlO1xuICBpZiAodHlwZW9mIHZhbHVlID09ICdmdW5jdGlvbicpIHtcbiAgICBpZiAodHlwZW9mIGtleSA9PSAnc3RyaW5nJyAmJiAhaGFzKHZhbHVlLCAnbmFtZScpKSB7XG4gICAgICBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkodmFsdWUsICduYW1lJywga2V5KTtcbiAgICB9XG4gICAgc3RhdGUgPSBlbmZvcmNlSW50ZXJuYWxTdGF0ZSh2YWx1ZSk7XG4gICAgaWYgKCFzdGF0ZS5zb3VyY2UpIHtcbiAgICAgIHN0YXRlLnNvdXJjZSA9IFRFTVBMQVRFLmpvaW4odHlwZW9mIGtleSA9PSAnc3RyaW5nJyA/IGtleSA6ICcnKTtcbiAgICB9XG4gIH1cbiAgaWYgKE8gPT09IGdsb2JhbCkge1xuICAgIGlmIChzaW1wbGUpIE9ba2V5XSA9IHZhbHVlO1xuICAgIGVsc2Ugc2V0R2xvYmFsKGtleSwgdmFsdWUpO1xuICAgIHJldHVybjtcbiAgfSBlbHNlIGlmICghdW5zYWZlKSB7XG4gICAgZGVsZXRlIE9ba2V5XTtcbiAgfSBlbHNlIGlmICghbm9UYXJnZXRHZXQgJiYgT1trZXldKSB7XG4gICAgc2ltcGxlID0gdHJ1ZTtcbiAgfVxuICBpZiAoc2ltcGxlKSBPW2tleV0gPSB2YWx1ZTtcbiAgZWxzZSBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkoTywga2V5LCB2YWx1ZSk7XG4vLyBhZGQgZmFrZSBGdW5jdGlvbiN0b1N0cmluZyBmb3IgY29ycmVjdCB3b3JrIHdyYXBwZWQgbWV0aG9kcyAvIGNvbnN0cnVjdG9ycyB3aXRoIG1ldGhvZHMgbGlrZSBMb0Rhc2ggaXNOYXRpdmVcbn0pKEZ1bmN0aW9uLnByb3RvdHlwZSwgJ3RvU3RyaW5nJywgZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gIHJldHVybiB0eXBlb2YgdGhpcyA9PSAnZnVuY3Rpb24nICYmIGdldEludGVybmFsU3RhdGUodGhpcykuc291cmNlIHx8IGluc3BlY3RTb3VyY2UodGhpcyk7XG59KTtcbiIsInZhciBjbGFzc29mID0gcmVxdWlyZSgnLi9jbGFzc29mLXJhdycpO1xudmFyIHJlZ2V4cEV4ZWMgPSByZXF1aXJlKCcuL3JlZ2V4cC1leGVjJyk7XG5cbi8vIGBSZWdFeHBFeGVjYCBhYnN0cmFjdCBvcGVyYXRpb25cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtcmVnZXhwZXhlY1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoUiwgUykge1xuICB2YXIgZXhlYyA9IFIuZXhlYztcbiAgaWYgKHR5cGVvZiBleGVjID09PSAnZnVuY3Rpb24nKSB7XG4gICAgdmFyIHJlc3VsdCA9IGV4ZWMuY2FsbChSLCBTKTtcbiAgICBpZiAodHlwZW9mIHJlc3VsdCAhPT0gJ29iamVjdCcpIHtcbiAgICAgIHRocm93IFR5cGVFcnJvcignUmVnRXhwIGV4ZWMgbWV0aG9kIHJldHVybmVkIHNvbWV0aGluZyBvdGhlciB0aGFuIGFuIE9iamVjdCBvciBudWxsJyk7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICBpZiAoY2xhc3NvZihSKSAhPT0gJ1JlZ0V4cCcpIHtcbiAgICB0aHJvdyBUeXBlRXJyb3IoJ1JlZ0V4cCNleGVjIGNhbGxlZCBvbiBpbmNvbXBhdGlibGUgcmVjZWl2ZXInKTtcbiAgfVxuXG4gIHJldHVybiByZWdleHBFeGVjLmNhbGwoUiwgUyk7XG59O1xuXG4iLCIndXNlIHN0cmljdCc7XG52YXIgcmVnZXhwRmxhZ3MgPSByZXF1aXJlKCcuL3JlZ2V4cC1mbGFncycpO1xudmFyIHN0aWNreUhlbHBlcnMgPSByZXF1aXJlKCcuL3JlZ2V4cC1zdGlja3ktaGVscGVycycpO1xuXG52YXIgbmF0aXZlRXhlYyA9IFJlZ0V4cC5wcm90b3R5cGUuZXhlYztcbi8vIFRoaXMgYWx3YXlzIHJlZmVycyB0byB0aGUgbmF0aXZlIGltcGxlbWVudGF0aW9uLCBiZWNhdXNlIHRoZVxuLy8gU3RyaW5nI3JlcGxhY2UgcG9seWZpbGwgdXNlcyAuL2ZpeC1yZWdleHAtd2VsbC1rbm93bi1zeW1ib2wtbG9naWMuanMsXG4vLyB3aGljaCBsb2FkcyB0aGlzIGZpbGUgYmVmb3JlIHBhdGNoaW5nIHRoZSBtZXRob2QuXG52YXIgbmF0aXZlUmVwbGFjZSA9IFN0cmluZy5wcm90b3R5cGUucmVwbGFjZTtcblxudmFyIHBhdGNoZWRFeGVjID0gbmF0aXZlRXhlYztcblxudmFyIFVQREFURVNfTEFTVF9JTkRFWF9XUk9ORyA9IChmdW5jdGlvbiAoKSB7XG4gIHZhciByZTEgPSAvYS87XG4gIHZhciByZTIgPSAvYiovZztcbiAgbmF0aXZlRXhlYy5jYWxsKHJlMSwgJ2EnKTtcbiAgbmF0aXZlRXhlYy5jYWxsKHJlMiwgJ2EnKTtcbiAgcmV0dXJuIHJlMS5sYXN0SW5kZXggIT09IDAgfHwgcmUyLmxhc3RJbmRleCAhPT0gMDtcbn0pKCk7XG5cbnZhciBVTlNVUFBPUlRFRF9ZID0gc3RpY2t5SGVscGVycy5VTlNVUFBPUlRFRF9ZIHx8IHN0aWNreUhlbHBlcnMuQlJPS0VOX0NBUkVUO1xuXG4vLyBub25wYXJ0aWNpcGF0aW5nIGNhcHR1cmluZyBncm91cCwgY29waWVkIGZyb20gZXM1LXNoaW0ncyBTdHJpbmcjc3BsaXQgcGF0Y2guXG52YXIgTlBDR19JTkNMVURFRCA9IC8oKT8/Ly5leGVjKCcnKVsxXSAhPT0gdW5kZWZpbmVkO1xuXG52YXIgUEFUQ0ggPSBVUERBVEVTX0xBU1RfSU5ERVhfV1JPTkcgfHwgTlBDR19JTkNMVURFRCB8fCBVTlNVUFBPUlRFRF9ZO1xuXG5pZiAoUEFUQ0gpIHtcbiAgcGF0Y2hlZEV4ZWMgPSBmdW5jdGlvbiBleGVjKHN0cikge1xuICAgIHZhciByZSA9IHRoaXM7XG4gICAgdmFyIGxhc3RJbmRleCwgcmVDb3B5LCBtYXRjaCwgaTtcbiAgICB2YXIgc3RpY2t5ID0gVU5TVVBQT1JURURfWSAmJiByZS5zdGlja3k7XG4gICAgdmFyIGZsYWdzID0gcmVnZXhwRmxhZ3MuY2FsbChyZSk7XG4gICAgdmFyIHNvdXJjZSA9IHJlLnNvdXJjZTtcbiAgICB2YXIgY2hhcnNBZGRlZCA9IDA7XG4gICAgdmFyIHN0ckNvcHkgPSBzdHI7XG5cbiAgICBpZiAoc3RpY2t5KSB7XG4gICAgICBmbGFncyA9IGZsYWdzLnJlcGxhY2UoJ3knLCAnJyk7XG4gICAgICBpZiAoZmxhZ3MuaW5kZXhPZignZycpID09PSAtMSkge1xuICAgICAgICBmbGFncyArPSAnZyc7XG4gICAgICB9XG5cbiAgICAgIHN0ckNvcHkgPSBTdHJpbmcoc3RyKS5zbGljZShyZS5sYXN0SW5kZXgpO1xuICAgICAgLy8gU3VwcG9ydCBhbmNob3JlZCBzdGlja3kgYmVoYXZpb3IuXG4gICAgICBpZiAocmUubGFzdEluZGV4ID4gMCAmJiAoIXJlLm11bHRpbGluZSB8fCByZS5tdWx0aWxpbmUgJiYgc3RyW3JlLmxhc3RJbmRleCAtIDFdICE9PSAnXFxuJykpIHtcbiAgICAgICAgc291cmNlID0gJyg/OiAnICsgc291cmNlICsgJyknO1xuICAgICAgICBzdHJDb3B5ID0gJyAnICsgc3RyQ29weTtcbiAgICAgICAgY2hhcnNBZGRlZCsrO1xuICAgICAgfVxuICAgICAgLy8gXig/ICsgcnggKyApIGlzIG5lZWRlZCwgaW4gY29tYmluYXRpb24gd2l0aCBzb21lIHN0ciBzbGljaW5nLCB0b1xuICAgICAgLy8gc2ltdWxhdGUgdGhlICd5JyBmbGFnLlxuICAgICAgcmVDb3B5ID0gbmV3IFJlZ0V4cCgnXig/OicgKyBzb3VyY2UgKyAnKScsIGZsYWdzKTtcbiAgICB9XG5cbiAgICBpZiAoTlBDR19JTkNMVURFRCkge1xuICAgICAgcmVDb3B5ID0gbmV3IFJlZ0V4cCgnXicgKyBzb3VyY2UgKyAnJCg/IVxcXFxzKScsIGZsYWdzKTtcbiAgICB9XG4gICAgaWYgKFVQREFURVNfTEFTVF9JTkRFWF9XUk9ORykgbGFzdEluZGV4ID0gcmUubGFzdEluZGV4O1xuXG4gICAgbWF0Y2ggPSBuYXRpdmVFeGVjLmNhbGwoc3RpY2t5ID8gcmVDb3B5IDogcmUsIHN0ckNvcHkpO1xuXG4gICAgaWYgKHN0aWNreSkge1xuICAgICAgaWYgKG1hdGNoKSB7XG4gICAgICAgIG1hdGNoLmlucHV0ID0gbWF0Y2guaW5wdXQuc2xpY2UoY2hhcnNBZGRlZCk7XG4gICAgICAgIG1hdGNoWzBdID0gbWF0Y2hbMF0uc2xpY2UoY2hhcnNBZGRlZCk7XG4gICAgICAgIG1hdGNoLmluZGV4ID0gcmUubGFzdEluZGV4O1xuICAgICAgICByZS5sYXN0SW5kZXggKz0gbWF0Y2hbMF0ubGVuZ3RoO1xuICAgICAgfSBlbHNlIHJlLmxhc3RJbmRleCA9IDA7XG4gICAgfSBlbHNlIGlmIChVUERBVEVTX0xBU1RfSU5ERVhfV1JPTkcgJiYgbWF0Y2gpIHtcbiAgICAgIHJlLmxhc3RJbmRleCA9IHJlLmdsb2JhbCA/IG1hdGNoLmluZGV4ICsgbWF0Y2hbMF0ubGVuZ3RoIDogbGFzdEluZGV4O1xuICAgIH1cbiAgICBpZiAoTlBDR19JTkNMVURFRCAmJiBtYXRjaCAmJiBtYXRjaC5sZW5ndGggPiAxKSB7XG4gICAgICAvLyBGaXggYnJvd3NlcnMgd2hvc2UgYGV4ZWNgIG1ldGhvZHMgZG9uJ3QgY29uc2lzdGVudGx5IHJldHVybiBgdW5kZWZpbmVkYFxuICAgICAgLy8gZm9yIE5QQ0csIGxpa2UgSUU4LiBOT1RFOiBUaGlzIGRvZXNuJyB3b3JrIGZvciAvKC4/KT8vXG4gICAgICBuYXRpdmVSZXBsYWNlLmNhbGwobWF0Y2hbMF0sIHJlQ29weSwgZnVuY3Rpb24gKCkge1xuICAgICAgICBmb3IgKGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aCAtIDI7IGkrKykge1xuICAgICAgICAgIGlmIChhcmd1bWVudHNbaV0gPT09IHVuZGVmaW5lZCkgbWF0Y2hbaV0gPSB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHJldHVybiBtYXRjaDtcbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBwYXRjaGVkRXhlYztcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1vYmplY3QnKTtcblxuLy8gYFJlZ0V4cC5wcm90b3R5cGUuZmxhZ3NgIGdldHRlciBpbXBsZW1lbnRhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1nZXQtcmVnZXhwLnByb3RvdHlwZS5mbGFnc1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciB0aGF0ID0gYW5PYmplY3QodGhpcyk7XG4gIHZhciByZXN1bHQgPSAnJztcbiAgaWYgKHRoYXQuZ2xvYmFsKSByZXN1bHQgKz0gJ2cnO1xuICBpZiAodGhhdC5pZ25vcmVDYXNlKSByZXN1bHQgKz0gJ2knO1xuICBpZiAodGhhdC5tdWx0aWxpbmUpIHJlc3VsdCArPSAnbSc7XG4gIGlmICh0aGF0LmRvdEFsbCkgcmVzdWx0ICs9ICdzJztcbiAgaWYgKHRoYXQudW5pY29kZSkgcmVzdWx0ICs9ICd1JztcbiAgaWYgKHRoYXQuc3RpY2t5KSByZXN1bHQgKz0gJ3knO1xuICByZXR1cm4gcmVzdWx0O1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGZhaWxzID0gcmVxdWlyZSgnLi9mYWlscycpO1xuXG4vLyBiYWJlbC1taW5pZnkgdHJhbnNwaWxlcyBSZWdFeHAoJ2EnLCAneScpIC0+IC9hL3kgYW5kIGl0IGNhdXNlcyBTeW50YXhFcnJvcixcbi8vIHNvIHdlIHVzZSBhbiBpbnRlcm1lZGlhdGUgZnVuY3Rpb24uXG5mdW5jdGlvbiBSRShzLCBmKSB7XG4gIHJldHVybiBSZWdFeHAocywgZik7XG59XG5cbmV4cG9ydHMuVU5TVVBQT1JURURfWSA9IGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgLy8gYmFiZWwtbWluaWZ5IHRyYW5zcGlsZXMgUmVnRXhwKCdhJywgJ3knKSAtPiAvYS95IGFuZCBpdCBjYXVzZXMgU3ludGF4RXJyb3JcbiAgdmFyIHJlID0gUkUoJ2EnLCAneScpO1xuICByZS5sYXN0SW5kZXggPSAyO1xuICByZXR1cm4gcmUuZXhlYygnYWJjZCcpICE9IG51bGw7XG59KTtcblxuZXhwb3J0cy5CUk9LRU5fQ0FSRVQgPSBmYWlscyhmdW5jdGlvbiAoKSB7XG4gIC8vIGh0dHBzOi8vYnVnemlsbGEubW96aWxsYS5vcmcvc2hvd19idWcuY2dpP2lkPTc3MzY4N1xuICB2YXIgcmUgPSBSRSgnXnInLCAnZ3knKTtcbiAgcmUubGFzdEluZGV4ID0gMjtcbiAgcmV0dXJuIHJlLmV4ZWMoJ3N0cicpICE9IG51bGw7XG59KTtcbiIsIi8vIGBSZXF1aXJlT2JqZWN0Q29lcmNpYmxlYCBhYnN0cmFjdCBvcGVyYXRpb25cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtcmVxdWlyZW9iamVjdGNvZXJjaWJsZVxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgaWYgKGl0ID09IHVuZGVmaW5lZCkgdGhyb3cgVHlwZUVycm9yKFwiQ2FuJ3QgY2FsbCBtZXRob2Qgb24gXCIgKyBpdCk7XG4gIHJldHVybiBpdDtcbn07XG4iLCIvLyBgU2FtZVZhbHVlYCBhYnN0cmFjdCBvcGVyYXRpb25cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc2FtZXZhbHVlXG5tb2R1bGUuZXhwb3J0cyA9IE9iamVjdC5pcyB8fCBmdW5jdGlvbiBpcyh4LCB5KSB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmVcbiAgcmV0dXJuIHggPT09IHkgPyB4ICE9PSAwIHx8IDEgLyB4ID09PSAxIC8geSA6IHggIT0geCAmJiB5ICE9IHk7XG59O1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLW5vbi1lbnVtZXJhYmxlLXByb3BlcnR5Jyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGtleSwgdmFsdWUpIHtcbiAgdHJ5IHtcbiAgICBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkoZ2xvYmFsLCBrZXksIHZhbHVlKTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBnbG9iYWxba2V5XSA9IHZhbHVlO1xuICB9IHJldHVybiB2YWx1ZTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgZ2V0QnVpbHRJbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nZXQtYnVpbHQtaW4nKTtcbnZhciBkZWZpbmVQcm9wZXJ0eU1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZGVmaW5lLXByb3BlcnR5Jyk7XG52YXIgd2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sJyk7XG52YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVzY3JpcHRvcnMnKTtcblxudmFyIFNQRUNJRVMgPSB3ZWxsS25vd25TeW1ib2woJ3NwZWNpZXMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoQ09OU1RSVUNUT1JfTkFNRSkge1xuICB2YXIgQ29uc3RydWN0b3IgPSBnZXRCdWlsdEluKENPTlNUUlVDVE9SX05BTUUpO1xuICB2YXIgZGVmaW5lUHJvcGVydHkgPSBkZWZpbmVQcm9wZXJ0eU1vZHVsZS5mO1xuXG4gIGlmIChERVNDUklQVE9SUyAmJiBDb25zdHJ1Y3RvciAmJiAhQ29uc3RydWN0b3JbU1BFQ0lFU10pIHtcbiAgICBkZWZpbmVQcm9wZXJ0eShDb25zdHJ1Y3RvciwgU1BFQ0lFUywge1xuICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9XG4gICAgfSk7XG4gIH1cbn07XG4iLCJ2YXIgZGVmaW5lUHJvcGVydHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWRlZmluZS1wcm9wZXJ0eScpLmY7XG52YXIgaGFzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hhcycpO1xudmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xuXG52YXIgVE9fU1RSSU5HX1RBRyA9IHdlbGxLbm93blN5bWJvbCgndG9TdHJpbmdUYWcnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQsIFRBRywgU1RBVElDKSB7XG4gIGlmIChpdCAmJiAhaGFzKGl0ID0gU1RBVElDID8gaXQgOiBpdC5wcm90b3R5cGUsIFRPX1NUUklOR19UQUcpKSB7XG4gICAgZGVmaW5lUHJvcGVydHkoaXQsIFRPX1NUUklOR19UQUcsIHsgY29uZmlndXJhYmxlOiB0cnVlLCB2YWx1ZTogVEFHIH0pO1xuICB9XG59O1xuIiwidmFyIHNoYXJlZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zaGFyZWQnKTtcbnZhciB1aWQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdWlkJyk7XG5cbnZhciBrZXlzID0gc2hhcmVkKCdrZXlzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGtleSkge1xuICByZXR1cm4ga2V5c1trZXldIHx8IChrZXlzW2tleV0gPSB1aWQoa2V5KSk7XG59O1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciBzZXRHbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2V0LWdsb2JhbCcpO1xuXG52YXIgU0hBUkVEID0gJ19fY29yZS1qc19zaGFyZWRfXyc7XG52YXIgc3RvcmUgPSBnbG9iYWxbU0hBUkVEXSB8fCBzZXRHbG9iYWwoU0hBUkVELCB7fSk7XG5cbm1vZHVsZS5leHBvcnRzID0gc3RvcmU7XG4iLCJ2YXIgSVNfUFVSRSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1wdXJlJyk7XG52YXIgc3RvcmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2hhcmVkLXN0b3JlJyk7XG5cbihtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChrZXksIHZhbHVlKSB7XG4gIHJldHVybiBzdG9yZVtrZXldIHx8IChzdG9yZVtrZXldID0gdmFsdWUgIT09IHVuZGVmaW5lZCA/IHZhbHVlIDoge30pO1xufSkoJ3ZlcnNpb25zJywgW10pLnB1c2goe1xuICB2ZXJzaW9uOiAnMy44LjInLFxuICBtb2RlOiBJU19QVVJFID8gJ3B1cmUnIDogJ2dsb2JhbCcsXG4gIGNvcHlyaWdodDogJ8KpIDIwMjEgRGVuaXMgUHVzaGthcmV2ICh6bG9pcm9jay5ydSknXG59KTtcbiIsInZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1vYmplY3QnKTtcbnZhciBhRnVuY3Rpb24gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYS1mdW5jdGlvbicpO1xudmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xuXG52YXIgU1BFQ0lFUyA9IHdlbGxLbm93blN5bWJvbCgnc3BlY2llcycpO1xuXG4vLyBgU3BlY2llc0NvbnN0cnVjdG9yYCBhYnN0cmFjdCBvcGVyYXRpb25cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc3BlY2llc2NvbnN0cnVjdG9yXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChPLCBkZWZhdWx0Q29uc3RydWN0b3IpIHtcbiAgdmFyIEMgPSBhbk9iamVjdChPKS5jb25zdHJ1Y3RvcjtcbiAgdmFyIFM7XG4gIHJldHVybiBDID09PSB1bmRlZmluZWQgfHwgKFMgPSBhbk9iamVjdChDKVtTUEVDSUVTXSkgPT0gdW5kZWZpbmVkID8gZGVmYXVsdENvbnN0cnVjdG9yIDogYUZ1bmN0aW9uKFMpO1xufTtcbiIsInZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xuXG4vLyBjaGVjayB0aGUgZXhpc3RlbmNlIG9mIGEgbWV0aG9kLCBsb3dlcmNhc2Vcbi8vIG9mIGEgdGFnIGFuZCBlc2NhcGluZyBxdW90ZXMgaW4gYXJndW1lbnRzXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChNRVRIT0RfTkFNRSkge1xuICByZXR1cm4gZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgIHZhciB0ZXN0ID0gJydbTUVUSE9EX05BTUVdKCdcIicpO1xuICAgIHJldHVybiB0ZXN0ICE9PSB0ZXN0LnRvTG93ZXJDYXNlKCkgfHwgdGVzdC5zcGxpdCgnXCInKS5sZW5ndGggPiAzO1xuICB9KTtcbn07XG4iLCJ2YXIgdG9JbnRlZ2VyID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWludGVnZXInKTtcbnZhciByZXF1aXJlT2JqZWN0Q29lcmNpYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlcXVpcmUtb2JqZWN0LWNvZXJjaWJsZScpO1xuXG4vLyBgU3RyaW5nLnByb3RvdHlwZS57IGNvZGVQb2ludEF0LCBhdCB9YCBtZXRob2RzIGltcGxlbWVudGF0aW9uXG52YXIgY3JlYXRlTWV0aG9kID0gZnVuY3Rpb24gKENPTlZFUlRfVE9fU1RSSU5HKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoJHRoaXMsIHBvcykge1xuICAgIHZhciBTID0gU3RyaW5nKHJlcXVpcmVPYmplY3RDb2VyY2libGUoJHRoaXMpKTtcbiAgICB2YXIgcG9zaXRpb24gPSB0b0ludGVnZXIocG9zKTtcbiAgICB2YXIgc2l6ZSA9IFMubGVuZ3RoO1xuICAgIHZhciBmaXJzdCwgc2Vjb25kO1xuICAgIGlmIChwb3NpdGlvbiA8IDAgfHwgcG9zaXRpb24gPj0gc2l6ZSkgcmV0dXJuIENPTlZFUlRfVE9fU1RSSU5HID8gJycgOiB1bmRlZmluZWQ7XG4gICAgZmlyc3QgPSBTLmNoYXJDb2RlQXQocG9zaXRpb24pO1xuICAgIHJldHVybiBmaXJzdCA8IDB4RDgwMCB8fCBmaXJzdCA+IDB4REJGRiB8fCBwb3NpdGlvbiArIDEgPT09IHNpemVcbiAgICAgIHx8IChzZWNvbmQgPSBTLmNoYXJDb2RlQXQocG9zaXRpb24gKyAxKSkgPCAweERDMDAgfHwgc2Vjb25kID4gMHhERkZGXG4gICAgICAgID8gQ09OVkVSVF9UT19TVFJJTkcgPyBTLmNoYXJBdChwb3NpdGlvbikgOiBmaXJzdFxuICAgICAgICA6IENPTlZFUlRfVE9fU1RSSU5HID8gUy5zbGljZShwb3NpdGlvbiwgcG9zaXRpb24gKyAyKSA6IChmaXJzdCAtIDB4RDgwMCA8PCAxMCkgKyAoc2Vjb25kIC0gMHhEQzAwKSArIDB4MTAwMDA7XG4gIH07XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgLy8gYFN0cmluZy5wcm90b3R5cGUuY29kZVBvaW50QXRgIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXN0cmluZy5wcm90b3R5cGUuY29kZXBvaW50YXRcbiAgY29kZUF0OiBjcmVhdGVNZXRob2QoZmFsc2UpLFxuICAvLyBgU3RyaW5nLnByb3RvdHlwZS5hdGAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9tYXRoaWFzYnluZW5zL1N0cmluZy5wcm90b3R5cGUuYXRcbiAgY2hhckF0OiBjcmVhdGVNZXRob2QodHJ1ZSlcbn07XG4iLCIvLyBodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcy9pc3N1ZXMvMjgwXG52YXIgdXNlckFnZW50ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2VuZ2luZS11c2VyLWFnZW50Jyk7XG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSB1bmljb3JuL25vLXVuc2FmZS1yZWdleFxubW9kdWxlLmV4cG9ydHMgPSAvVmVyc2lvblxcLzEwXFwuXFxkKyhcXC5cXGQrKT8oIE1vYmlsZVxcL1xcdyspPyBTYWZhcmlcXC8vLnRlc3QodXNlckFnZW50KTtcbiIsIi8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLXN0cmluZy1wYWQtc3RhcnQtZW5kXG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tbGVuZ3RoJyk7XG52YXIgcmVwZWF0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3N0cmluZy1yZXBlYXQnKTtcbnZhciByZXF1aXJlT2JqZWN0Q29lcmNpYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlcXVpcmUtb2JqZWN0LWNvZXJjaWJsZScpO1xuXG52YXIgY2VpbCA9IE1hdGguY2VpbDtcblxuLy8gYFN0cmluZy5wcm90b3R5cGUueyBwYWRTdGFydCwgcGFkRW5kIH1gIG1ldGhvZHMgaW1wbGVtZW50YXRpb25cbnZhciBjcmVhdGVNZXRob2QgPSBmdW5jdGlvbiAoSVNfRU5EKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoJHRoaXMsIG1heExlbmd0aCwgZmlsbFN0cmluZykge1xuICAgIHZhciBTID0gU3RyaW5nKHJlcXVpcmVPYmplY3RDb2VyY2libGUoJHRoaXMpKTtcbiAgICB2YXIgc3RyaW5nTGVuZ3RoID0gUy5sZW5ndGg7XG4gICAgdmFyIGZpbGxTdHIgPSBmaWxsU3RyaW5nID09PSB1bmRlZmluZWQgPyAnICcgOiBTdHJpbmcoZmlsbFN0cmluZyk7XG4gICAgdmFyIGludE1heExlbmd0aCA9IHRvTGVuZ3RoKG1heExlbmd0aCk7XG4gICAgdmFyIGZpbGxMZW4sIHN0cmluZ0ZpbGxlcjtcbiAgICBpZiAoaW50TWF4TGVuZ3RoIDw9IHN0cmluZ0xlbmd0aCB8fCBmaWxsU3RyID09ICcnKSByZXR1cm4gUztcbiAgICBmaWxsTGVuID0gaW50TWF4TGVuZ3RoIC0gc3RyaW5nTGVuZ3RoO1xuICAgIHN0cmluZ0ZpbGxlciA9IHJlcGVhdC5jYWxsKGZpbGxTdHIsIGNlaWwoZmlsbExlbiAvIGZpbGxTdHIubGVuZ3RoKSk7XG4gICAgaWYgKHN0cmluZ0ZpbGxlci5sZW5ndGggPiBmaWxsTGVuKSBzdHJpbmdGaWxsZXIgPSBzdHJpbmdGaWxsZXIuc2xpY2UoMCwgZmlsbExlbik7XG4gICAgcmV0dXJuIElTX0VORCA/IFMgKyBzdHJpbmdGaWxsZXIgOiBzdHJpbmdGaWxsZXIgKyBTO1xuICB9O1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIC8vIGBTdHJpbmcucHJvdG90eXBlLnBhZFN0YXJ0YCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zdHJpbmcucHJvdG90eXBlLnBhZHN0YXJ0XG4gIHN0YXJ0OiBjcmVhdGVNZXRob2QoZmFsc2UpLFxuICAvLyBgU3RyaW5nLnByb3RvdHlwZS5wYWRFbmRgIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXN0cmluZy5wcm90b3R5cGUucGFkZW5kXG4gIGVuZDogY3JlYXRlTWV0aG9kKHRydWUpXG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gYmFzZWQgb24gaHR0cHM6Ly9naXRodWIuY29tL2Jlc3RpZWpzL3B1bnljb2RlLmpzL2Jsb2IvbWFzdGVyL3B1bnljb2RlLmpzXG52YXIgbWF4SW50ID0gMjE0NzQ4MzY0NzsgLy8gYWthLiAweDdGRkZGRkZGIG9yIDJeMzEtMVxudmFyIGJhc2UgPSAzNjtcbnZhciB0TWluID0gMTtcbnZhciB0TWF4ID0gMjY7XG52YXIgc2tldyA9IDM4O1xudmFyIGRhbXAgPSA3MDA7XG52YXIgaW5pdGlhbEJpYXMgPSA3MjtcbnZhciBpbml0aWFsTiA9IDEyODsgLy8gMHg4MFxudmFyIGRlbGltaXRlciA9ICctJzsgLy8gJ1xceDJEJ1xudmFyIHJlZ2V4Tm9uQVNDSUkgPSAvW15cXDAtXFx1MDA3RV0vOyAvLyBub24tQVNDSUkgY2hhcnNcbnZhciByZWdleFNlcGFyYXRvcnMgPSAvWy5cXHUzMDAyXFx1RkYwRVxcdUZGNjFdL2c7IC8vIFJGQyAzNDkwIHNlcGFyYXRvcnNcbnZhciBPVkVSRkxPV19FUlJPUiA9ICdPdmVyZmxvdzogaW5wdXQgbmVlZHMgd2lkZXIgaW50ZWdlcnMgdG8gcHJvY2Vzcyc7XG52YXIgYmFzZU1pbnVzVE1pbiA9IGJhc2UgLSB0TWluO1xudmFyIGZsb29yID0gTWF0aC5mbG9vcjtcbnZhciBzdHJpbmdGcm9tQ2hhckNvZGUgPSBTdHJpbmcuZnJvbUNoYXJDb2RlO1xuXG4vKipcbiAqIENyZWF0ZXMgYW4gYXJyYXkgY29udGFpbmluZyB0aGUgbnVtZXJpYyBjb2RlIHBvaW50cyBvZiBlYWNoIFVuaWNvZGVcbiAqIGNoYXJhY3RlciBpbiB0aGUgc3RyaW5nLiBXaGlsZSBKYXZhU2NyaXB0IHVzZXMgVUNTLTIgaW50ZXJuYWxseSxcbiAqIHRoaXMgZnVuY3Rpb24gd2lsbCBjb252ZXJ0IGEgcGFpciBvZiBzdXJyb2dhdGUgaGFsdmVzIChlYWNoIG9mIHdoaWNoXG4gKiBVQ1MtMiBleHBvc2VzIGFzIHNlcGFyYXRlIGNoYXJhY3RlcnMpIGludG8gYSBzaW5nbGUgY29kZSBwb2ludCxcbiAqIG1hdGNoaW5nIFVURi0xNi5cbiAqL1xudmFyIHVjczJkZWNvZGUgPSBmdW5jdGlvbiAoc3RyaW5nKSB7XG4gIHZhciBvdXRwdXQgPSBbXTtcbiAgdmFyIGNvdW50ZXIgPSAwO1xuICB2YXIgbGVuZ3RoID0gc3RyaW5nLmxlbmd0aDtcbiAgd2hpbGUgKGNvdW50ZXIgPCBsZW5ndGgpIHtcbiAgICB2YXIgdmFsdWUgPSBzdHJpbmcuY2hhckNvZGVBdChjb3VudGVyKyspO1xuICAgIGlmICh2YWx1ZSA+PSAweEQ4MDAgJiYgdmFsdWUgPD0gMHhEQkZGICYmIGNvdW50ZXIgPCBsZW5ndGgpIHtcbiAgICAgIC8vIEl0J3MgYSBoaWdoIHN1cnJvZ2F0ZSwgYW5kIHRoZXJlIGlzIGEgbmV4dCBjaGFyYWN0ZXIuXG4gICAgICB2YXIgZXh0cmEgPSBzdHJpbmcuY2hhckNvZGVBdChjb3VudGVyKyspO1xuICAgICAgaWYgKChleHRyYSAmIDB4RkMwMCkgPT0gMHhEQzAwKSB7IC8vIExvdyBzdXJyb2dhdGUuXG4gICAgICAgIG91dHB1dC5wdXNoKCgodmFsdWUgJiAweDNGRikgPDwgMTApICsgKGV4dHJhICYgMHgzRkYpICsgMHgxMDAwMCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBJdCdzIGFuIHVubWF0Y2hlZCBzdXJyb2dhdGU7IG9ubHkgYXBwZW5kIHRoaXMgY29kZSB1bml0LCBpbiBjYXNlIHRoZVxuICAgICAgICAvLyBuZXh0IGNvZGUgdW5pdCBpcyB0aGUgaGlnaCBzdXJyb2dhdGUgb2YgYSBzdXJyb2dhdGUgcGFpci5cbiAgICAgICAgb3V0cHV0LnB1c2godmFsdWUpO1xuICAgICAgICBjb3VudGVyLS07XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIG91dHB1dC5wdXNoKHZhbHVlKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIG91dHB1dDtcbn07XG5cbi8qKlxuICogQ29udmVydHMgYSBkaWdpdC9pbnRlZ2VyIGludG8gYSBiYXNpYyBjb2RlIHBvaW50LlxuICovXG52YXIgZGlnaXRUb0Jhc2ljID0gZnVuY3Rpb24gKGRpZ2l0KSB7XG4gIC8vICAwLi4yNSBtYXAgdG8gQVNDSUkgYS4ueiBvciBBLi5aXG4gIC8vIDI2Li4zNSBtYXAgdG8gQVNDSUkgMC4uOVxuICByZXR1cm4gZGlnaXQgKyAyMiArIDc1ICogKGRpZ2l0IDwgMjYpO1xufTtcblxuLyoqXG4gKiBCaWFzIGFkYXB0YXRpb24gZnVuY3Rpb24gYXMgcGVyIHNlY3Rpb24gMy40IG9mIFJGQyAzNDkyLlxuICogaHR0cHM6Ly90b29scy5pZXRmLm9yZy9odG1sL3JmYzM0OTIjc2VjdGlvbi0zLjRcbiAqL1xudmFyIGFkYXB0ID0gZnVuY3Rpb24gKGRlbHRhLCBudW1Qb2ludHMsIGZpcnN0VGltZSkge1xuICB2YXIgayA9IDA7XG4gIGRlbHRhID0gZmlyc3RUaW1lID8gZmxvb3IoZGVsdGEgLyBkYW1wKSA6IGRlbHRhID4+IDE7XG4gIGRlbHRhICs9IGZsb29yKGRlbHRhIC8gbnVtUG9pbnRzKTtcbiAgZm9yICg7IGRlbHRhID4gYmFzZU1pbnVzVE1pbiAqIHRNYXggPj4gMTsgayArPSBiYXNlKSB7XG4gICAgZGVsdGEgPSBmbG9vcihkZWx0YSAvIGJhc2VNaW51c1RNaW4pO1xuICB9XG4gIHJldHVybiBmbG9vcihrICsgKGJhc2VNaW51c1RNaW4gKyAxKSAqIGRlbHRhIC8gKGRlbHRhICsgc2tldykpO1xufTtcblxuLyoqXG4gKiBDb252ZXJ0cyBhIHN0cmluZyBvZiBVbmljb2RlIHN5bWJvbHMgKGUuZy4gYSBkb21haW4gbmFtZSBsYWJlbCkgdG8gYVxuICogUHVueWNvZGUgc3RyaW5nIG9mIEFTQ0lJLW9ubHkgc3ltYm9scy5cbiAqL1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lICBtYXgtc3RhdGVtZW50c1xudmFyIGVuY29kZSA9IGZ1bmN0aW9uIChpbnB1dCkge1xuICB2YXIgb3V0cHV0ID0gW107XG5cbiAgLy8gQ29udmVydCB0aGUgaW5wdXQgaW4gVUNTLTIgdG8gYW4gYXJyYXkgb2YgVW5pY29kZSBjb2RlIHBvaW50cy5cbiAgaW5wdXQgPSB1Y3MyZGVjb2RlKGlucHV0KTtcblxuICAvLyBDYWNoZSB0aGUgbGVuZ3RoLlxuICB2YXIgaW5wdXRMZW5ndGggPSBpbnB1dC5sZW5ndGg7XG5cbiAgLy8gSW5pdGlhbGl6ZSB0aGUgc3RhdGUuXG4gIHZhciBuID0gaW5pdGlhbE47XG4gIHZhciBkZWx0YSA9IDA7XG4gIHZhciBiaWFzID0gaW5pdGlhbEJpYXM7XG4gIHZhciBpLCBjdXJyZW50VmFsdWU7XG5cbiAgLy8gSGFuZGxlIHRoZSBiYXNpYyBjb2RlIHBvaW50cy5cbiAgZm9yIChpID0gMDsgaSA8IGlucHV0Lmxlbmd0aDsgaSsrKSB7XG4gICAgY3VycmVudFZhbHVlID0gaW5wdXRbaV07XG4gICAgaWYgKGN1cnJlbnRWYWx1ZSA8IDB4ODApIHtcbiAgICAgIG91dHB1dC5wdXNoKHN0cmluZ0Zyb21DaGFyQ29kZShjdXJyZW50VmFsdWUpKTtcbiAgICB9XG4gIH1cblxuICB2YXIgYmFzaWNMZW5ndGggPSBvdXRwdXQubGVuZ3RoOyAvLyBudW1iZXIgb2YgYmFzaWMgY29kZSBwb2ludHMuXG4gIHZhciBoYW5kbGVkQ1BDb3VudCA9IGJhc2ljTGVuZ3RoOyAvLyBudW1iZXIgb2YgY29kZSBwb2ludHMgdGhhdCBoYXZlIGJlZW4gaGFuZGxlZDtcblxuICAvLyBGaW5pc2ggdGhlIGJhc2ljIHN0cmluZyB3aXRoIGEgZGVsaW1pdGVyIHVubGVzcyBpdCdzIGVtcHR5LlxuICBpZiAoYmFzaWNMZW5ndGgpIHtcbiAgICBvdXRwdXQucHVzaChkZWxpbWl0ZXIpO1xuICB9XG5cbiAgLy8gTWFpbiBlbmNvZGluZyBsb29wOlxuICB3aGlsZSAoaGFuZGxlZENQQ291bnQgPCBpbnB1dExlbmd0aCkge1xuICAgIC8vIEFsbCBub24tYmFzaWMgY29kZSBwb2ludHMgPCBuIGhhdmUgYmVlbiBoYW5kbGVkIGFscmVhZHkuIEZpbmQgdGhlIG5leHQgbGFyZ2VyIG9uZTpcbiAgICB2YXIgbSA9IG1heEludDtcbiAgICBmb3IgKGkgPSAwOyBpIDwgaW5wdXQubGVuZ3RoOyBpKyspIHtcbiAgICAgIGN1cnJlbnRWYWx1ZSA9IGlucHV0W2ldO1xuICAgICAgaWYgKGN1cnJlbnRWYWx1ZSA+PSBuICYmIGN1cnJlbnRWYWx1ZSA8IG0pIHtcbiAgICAgICAgbSA9IGN1cnJlbnRWYWx1ZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBJbmNyZWFzZSBgZGVsdGFgIGVub3VnaCB0byBhZHZhbmNlIHRoZSBkZWNvZGVyJ3MgPG4saT4gc3RhdGUgdG8gPG0sMD4sIGJ1dCBndWFyZCBhZ2FpbnN0IG92ZXJmbG93LlxuICAgIHZhciBoYW5kbGVkQ1BDb3VudFBsdXNPbmUgPSBoYW5kbGVkQ1BDb3VudCArIDE7XG4gICAgaWYgKG0gLSBuID4gZmxvb3IoKG1heEludCAtIGRlbHRhKSAvIGhhbmRsZWRDUENvdW50UGx1c09uZSkpIHtcbiAgICAgIHRocm93IFJhbmdlRXJyb3IoT1ZFUkZMT1dfRVJST1IpO1xuICAgIH1cblxuICAgIGRlbHRhICs9IChtIC0gbikgKiBoYW5kbGVkQ1BDb3VudFBsdXNPbmU7XG4gICAgbiA9IG07XG5cbiAgICBmb3IgKGkgPSAwOyBpIDwgaW5wdXQubGVuZ3RoOyBpKyspIHtcbiAgICAgIGN1cnJlbnRWYWx1ZSA9IGlucHV0W2ldO1xuICAgICAgaWYgKGN1cnJlbnRWYWx1ZSA8IG4gJiYgKytkZWx0YSA+IG1heEludCkge1xuICAgICAgICB0aHJvdyBSYW5nZUVycm9yKE9WRVJGTE9XX0VSUk9SKTtcbiAgICAgIH1cbiAgICAgIGlmIChjdXJyZW50VmFsdWUgPT0gbikge1xuICAgICAgICAvLyBSZXByZXNlbnQgZGVsdGEgYXMgYSBnZW5lcmFsaXplZCB2YXJpYWJsZS1sZW5ndGggaW50ZWdlci5cbiAgICAgICAgdmFyIHEgPSBkZWx0YTtcbiAgICAgICAgZm9yICh2YXIgayA9IGJhc2U7IC8qIG5vIGNvbmRpdGlvbiAqLzsgayArPSBiYXNlKSB7XG4gICAgICAgICAgdmFyIHQgPSBrIDw9IGJpYXMgPyB0TWluIDogKGsgPj0gYmlhcyArIHRNYXggPyB0TWF4IDogayAtIGJpYXMpO1xuICAgICAgICAgIGlmIChxIDwgdCkgYnJlYWs7XG4gICAgICAgICAgdmFyIHFNaW51c1QgPSBxIC0gdDtcbiAgICAgICAgICB2YXIgYmFzZU1pbnVzVCA9IGJhc2UgLSB0O1xuICAgICAgICAgIG91dHB1dC5wdXNoKHN0cmluZ0Zyb21DaGFyQ29kZShkaWdpdFRvQmFzaWModCArIHFNaW51c1QgJSBiYXNlTWludXNUKSkpO1xuICAgICAgICAgIHEgPSBmbG9vcihxTWludXNUIC8gYmFzZU1pbnVzVCk7XG4gICAgICAgIH1cblxuICAgICAgICBvdXRwdXQucHVzaChzdHJpbmdGcm9tQ2hhckNvZGUoZGlnaXRUb0Jhc2ljKHEpKSk7XG4gICAgICAgIGJpYXMgPSBhZGFwdChkZWx0YSwgaGFuZGxlZENQQ291bnRQbHVzT25lLCBoYW5kbGVkQ1BDb3VudCA9PSBiYXNpY0xlbmd0aCk7XG4gICAgICAgIGRlbHRhID0gMDtcbiAgICAgICAgKytoYW5kbGVkQ1BDb3VudDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICArK2RlbHRhO1xuICAgICsrbjtcbiAgfVxuICByZXR1cm4gb3V0cHV0LmpvaW4oJycpO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaW5wdXQpIHtcbiAgdmFyIGVuY29kZWQgPSBbXTtcbiAgdmFyIGxhYmVscyA9IGlucHV0LnRvTG93ZXJDYXNlKCkucmVwbGFjZShyZWdleFNlcGFyYXRvcnMsICdcXHUwMDJFJykuc3BsaXQoJy4nKTtcbiAgdmFyIGksIGxhYmVsO1xuICBmb3IgKGkgPSAwOyBpIDwgbGFiZWxzLmxlbmd0aDsgaSsrKSB7XG4gICAgbGFiZWwgPSBsYWJlbHNbaV07XG4gICAgZW5jb2RlZC5wdXNoKHJlZ2V4Tm9uQVNDSUkudGVzdChsYWJlbCkgPyAneG4tLScgKyBlbmNvZGUobGFiZWwpIDogbGFiZWwpO1xuICB9XG4gIHJldHVybiBlbmNvZGVkLmpvaW4oJy4nKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgdG9JbnRlZ2VyID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWludGVnZXInKTtcbnZhciByZXF1aXJlT2JqZWN0Q29lcmNpYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlcXVpcmUtb2JqZWN0LWNvZXJjaWJsZScpO1xuXG4vLyBgU3RyaW5nLnByb3RvdHlwZS5yZXBlYXRgIG1ldGhvZCBpbXBsZW1lbnRhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zdHJpbmcucHJvdG90eXBlLnJlcGVhdFxubW9kdWxlLmV4cG9ydHMgPSAnJy5yZXBlYXQgfHwgZnVuY3Rpb24gcmVwZWF0KGNvdW50KSB7XG4gIHZhciBzdHIgPSBTdHJpbmcocmVxdWlyZU9iamVjdENvZXJjaWJsZSh0aGlzKSk7XG4gIHZhciByZXN1bHQgPSAnJztcbiAgdmFyIG4gPSB0b0ludGVnZXIoY291bnQpO1xuICBpZiAobiA8IDAgfHwgbiA9PSBJbmZpbml0eSkgdGhyb3cgUmFuZ2VFcnJvcignV3JvbmcgbnVtYmVyIG9mIHJlcGV0aXRpb25zJyk7XG4gIGZvciAoO24gPiAwOyAobiA+Pj49IDEpICYmIChzdHIgKz0gc3RyKSkgaWYgKG4gJiAxKSByZXN1bHQgKz0gc3RyO1xuICByZXR1cm4gcmVzdWx0O1xufTtcbiIsInZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xudmFyIHdoaXRlc3BhY2VzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3doaXRlc3BhY2VzJyk7XG5cbnZhciBub24gPSAnXFx1MjAwQlxcdTAwODVcXHUxODBFJztcblxuLy8gY2hlY2sgdGhhdCBhIG1ldGhvZCB3b3JrcyB3aXRoIHRoZSBjb3JyZWN0IGxpc3Rcbi8vIG9mIHdoaXRlc3BhY2VzIGFuZCBoYXMgYSBjb3JyZWN0IG5hbWVcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKE1FVEhPRF9OQU1FKSB7XG4gIHJldHVybiBmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuICEhd2hpdGVzcGFjZXNbTUVUSE9EX05BTUVdKCkgfHwgbm9uW01FVEhPRF9OQU1FXSgpICE9IG5vbiB8fCB3aGl0ZXNwYWNlc1tNRVRIT0RfTkFNRV0ubmFtZSAhPT0gTUVUSE9EX05BTUU7XG4gIH0pO1xufTtcbiIsInZhciByZXF1aXJlT2JqZWN0Q29lcmNpYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlcXVpcmUtb2JqZWN0LWNvZXJjaWJsZScpO1xudmFyIHdoaXRlc3BhY2VzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3doaXRlc3BhY2VzJyk7XG5cbnZhciB3aGl0ZXNwYWNlID0gJ1snICsgd2hpdGVzcGFjZXMgKyAnXSc7XG52YXIgbHRyaW0gPSBSZWdFeHAoJ14nICsgd2hpdGVzcGFjZSArIHdoaXRlc3BhY2UgKyAnKicpO1xudmFyIHJ0cmltID0gUmVnRXhwKHdoaXRlc3BhY2UgKyB3aGl0ZXNwYWNlICsgJyokJyk7XG5cbi8vIGBTdHJpbmcucHJvdG90eXBlLnsgdHJpbSwgdHJpbVN0YXJ0LCB0cmltRW5kLCB0cmltTGVmdCwgdHJpbVJpZ2h0IH1gIG1ldGhvZHMgaW1wbGVtZW50YXRpb25cbnZhciBjcmVhdGVNZXRob2QgPSBmdW5jdGlvbiAoVFlQRSkge1xuICByZXR1cm4gZnVuY3Rpb24gKCR0aGlzKSB7XG4gICAgdmFyIHN0cmluZyA9IFN0cmluZyhyZXF1aXJlT2JqZWN0Q29lcmNpYmxlKCR0aGlzKSk7XG4gICAgaWYgKFRZUEUgJiAxKSBzdHJpbmcgPSBzdHJpbmcucmVwbGFjZShsdHJpbSwgJycpO1xuICAgIGlmIChUWVBFICYgMikgc3RyaW5nID0gc3RyaW5nLnJlcGxhY2UocnRyaW0sICcnKTtcbiAgICByZXR1cm4gc3RyaW5nO1xuICB9O1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIC8vIGBTdHJpbmcucHJvdG90eXBlLnsgdHJpbUxlZnQsIHRyaW1TdGFydCB9YCBtZXRob2RzXG4gIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc3RyaW5nLnByb3RvdHlwZS50cmltc3RhcnRcbiAgc3RhcnQ6IGNyZWF0ZU1ldGhvZCgxKSxcbiAgLy8gYFN0cmluZy5wcm90b3R5cGUueyB0cmltUmlnaHQsIHRyaW1FbmQgfWAgbWV0aG9kc1xuICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXN0cmluZy5wcm90b3R5cGUudHJpbWVuZFxuICBlbmQ6IGNyZWF0ZU1ldGhvZCgyKSxcbiAgLy8gYFN0cmluZy5wcm90b3R5cGUudHJpbWAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc3RyaW5nLnByb3RvdHlwZS50cmltXG4gIHRyaW06IGNyZWF0ZU1ldGhvZCgzKVxufTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcbnZhciBiaW5kID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLWJpbmQtY29udGV4dCcpO1xudmFyIGh0bWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaHRtbCcpO1xudmFyIGNyZWF0ZUVsZW1lbnQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZG9jdW1lbnQtY3JlYXRlLWVsZW1lbnQnKTtcbnZhciBJU19JT1MgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZW5naW5lLWlzLWlvcycpO1xudmFyIElTX05PREUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZW5naW5lLWlzLW5vZGUnKTtcblxudmFyIGxvY2F0aW9uID0gZ2xvYmFsLmxvY2F0aW9uO1xudmFyIHNldCA9IGdsb2JhbC5zZXRJbW1lZGlhdGU7XG52YXIgY2xlYXIgPSBnbG9iYWwuY2xlYXJJbW1lZGlhdGU7XG52YXIgcHJvY2VzcyA9IGdsb2JhbC5wcm9jZXNzO1xudmFyIE1lc3NhZ2VDaGFubmVsID0gZ2xvYmFsLk1lc3NhZ2VDaGFubmVsO1xudmFyIERpc3BhdGNoID0gZ2xvYmFsLkRpc3BhdGNoO1xudmFyIGNvdW50ZXIgPSAwO1xudmFyIHF1ZXVlID0ge307XG52YXIgT05SRUFEWVNUQVRFQ0hBTkdFID0gJ29ucmVhZHlzdGF0ZWNoYW5nZSc7XG52YXIgZGVmZXIsIGNoYW5uZWwsIHBvcnQ7XG5cbnZhciBydW4gPSBmdW5jdGlvbiAoaWQpIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXByb3RvdHlwZS1idWlsdGluc1xuICBpZiAocXVldWUuaGFzT3duUHJvcGVydHkoaWQpKSB7XG4gICAgdmFyIGZuID0gcXVldWVbaWRdO1xuICAgIGRlbGV0ZSBxdWV1ZVtpZF07XG4gICAgZm4oKTtcbiAgfVxufTtcblxudmFyIHJ1bm5lciA9IGZ1bmN0aW9uIChpZCkge1xuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIHJ1bihpZCk7XG4gIH07XG59O1xuXG52YXIgbGlzdGVuZXIgPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgcnVuKGV2ZW50LmRhdGEpO1xufTtcblxudmFyIHBvc3QgPSBmdW5jdGlvbiAoaWQpIHtcbiAgLy8gb2xkIGVuZ2luZXMgaGF2ZSBub3QgbG9jYXRpb24ub3JpZ2luXG4gIGdsb2JhbC5wb3N0TWVzc2FnZShpZCArICcnLCBsb2NhdGlvbi5wcm90b2NvbCArICcvLycgKyBsb2NhdGlvbi5ob3N0KTtcbn07XG5cbi8vIE5vZGUuanMgMC45KyAmIElFMTArIGhhcyBzZXRJbW1lZGlhdGUsIG90aGVyd2lzZTpcbmlmICghc2V0IHx8ICFjbGVhcikge1xuICBzZXQgPSBmdW5jdGlvbiBzZXRJbW1lZGlhdGUoZm4pIHtcbiAgICB2YXIgYXJncyA9IFtdO1xuICAgIHZhciBpID0gMTtcbiAgICB3aGlsZSAoYXJndW1lbnRzLmxlbmd0aCA+IGkpIGFyZ3MucHVzaChhcmd1bWVudHNbaSsrXSk7XG4gICAgcXVldWVbKytjb3VudGVyXSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1uZXctZnVuY1xuICAgICAgKHR5cGVvZiBmbiA9PSAnZnVuY3Rpb24nID8gZm4gOiBGdW5jdGlvbihmbikpLmFwcGx5KHVuZGVmaW5lZCwgYXJncyk7XG4gICAgfTtcbiAgICBkZWZlcihjb3VudGVyKTtcbiAgICByZXR1cm4gY291bnRlcjtcbiAgfTtcbiAgY2xlYXIgPSBmdW5jdGlvbiBjbGVhckltbWVkaWF0ZShpZCkge1xuICAgIGRlbGV0ZSBxdWV1ZVtpZF07XG4gIH07XG4gIC8vIE5vZGUuanMgMC44LVxuICBpZiAoSVNfTk9ERSkge1xuICAgIGRlZmVyID0gZnVuY3Rpb24gKGlkKSB7XG4gICAgICBwcm9jZXNzLm5leHRUaWNrKHJ1bm5lcihpZCkpO1xuICAgIH07XG4gIC8vIFNwaGVyZSAoSlMgZ2FtZSBlbmdpbmUpIERpc3BhdGNoIEFQSVxuICB9IGVsc2UgaWYgKERpc3BhdGNoICYmIERpc3BhdGNoLm5vdykge1xuICAgIGRlZmVyID0gZnVuY3Rpb24gKGlkKSB7XG4gICAgICBEaXNwYXRjaC5ub3cocnVubmVyKGlkKSk7XG4gICAgfTtcbiAgLy8gQnJvd3NlcnMgd2l0aCBNZXNzYWdlQ2hhbm5lbCwgaW5jbHVkZXMgV2ViV29ya2Vyc1xuICAvLyBleGNlcHQgaU9TIC0gaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMvaXNzdWVzLzYyNFxuICB9IGVsc2UgaWYgKE1lc3NhZ2VDaGFubmVsICYmICFJU19JT1MpIHtcbiAgICBjaGFubmVsID0gbmV3IE1lc3NhZ2VDaGFubmVsKCk7XG4gICAgcG9ydCA9IGNoYW5uZWwucG9ydDI7XG4gICAgY2hhbm5lbC5wb3J0MS5vbm1lc3NhZ2UgPSBsaXN0ZW5lcjtcbiAgICBkZWZlciA9IGJpbmQocG9ydC5wb3N0TWVzc2FnZSwgcG9ydCwgMSk7XG4gIC8vIEJyb3dzZXJzIHdpdGggcG9zdE1lc3NhZ2UsIHNraXAgV2ViV29ya2Vyc1xuICAvLyBJRTggaGFzIHBvc3RNZXNzYWdlLCBidXQgaXQncyBzeW5jICYgdHlwZW9mIGl0cyBwb3N0TWVzc2FnZSBpcyAnb2JqZWN0J1xuICB9IGVsc2UgaWYgKFxuICAgIGdsb2JhbC5hZGRFdmVudExpc3RlbmVyICYmXG4gICAgdHlwZW9mIHBvc3RNZXNzYWdlID09ICdmdW5jdGlvbicgJiZcbiAgICAhZ2xvYmFsLmltcG9ydFNjcmlwdHMgJiZcbiAgICBsb2NhdGlvbiAmJiBsb2NhdGlvbi5wcm90b2NvbCAhPT0gJ2ZpbGU6JyAmJlxuICAgICFmYWlscyhwb3N0KVxuICApIHtcbiAgICBkZWZlciA9IHBvc3Q7XG4gICAgZ2xvYmFsLmFkZEV2ZW50TGlzdGVuZXIoJ21lc3NhZ2UnLCBsaXN0ZW5lciwgZmFsc2UpO1xuICAvLyBJRTgtXG4gIH0gZWxzZSBpZiAoT05SRUFEWVNUQVRFQ0hBTkdFIGluIGNyZWF0ZUVsZW1lbnQoJ3NjcmlwdCcpKSB7XG4gICAgZGVmZXIgPSBmdW5jdGlvbiAoaWQpIHtcbiAgICAgIGh0bWwuYXBwZW5kQ2hpbGQoY3JlYXRlRWxlbWVudCgnc2NyaXB0JykpW09OUkVBRFlTVEFURUNIQU5HRV0gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGh0bWwucmVtb3ZlQ2hpbGQodGhpcyk7XG4gICAgICAgIHJ1bihpZCk7XG4gICAgICB9O1xuICAgIH07XG4gIC8vIFJlc3Qgb2xkIGJyb3dzZXJzXG4gIH0gZWxzZSB7XG4gICAgZGVmZXIgPSBmdW5jdGlvbiAoaWQpIHtcbiAgICAgIHNldFRpbWVvdXQocnVubmVyKGlkKSwgMCk7XG4gICAgfTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgc2V0OiBzZXQsXG4gIGNsZWFyOiBjbGVhclxufTtcbiIsInZhciBjbGFzc29mID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NsYXNzb2YtcmF3Jyk7XG5cbi8vIGB0aGlzTnVtYmVyVmFsdWVgIGFic3RyYWN0IG9wZXJhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy10aGlzbnVtYmVydmFsdWVcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gIGlmICh0eXBlb2YgdmFsdWUgIT0gJ251bWJlcicgJiYgY2xhc3NvZih2YWx1ZSkgIT0gJ051bWJlcicpIHtcbiAgICB0aHJvdyBUeXBlRXJyb3IoJ0luY29ycmVjdCBpbnZvY2F0aW9uJyk7XG4gIH1cbiAgcmV0dXJuICt2YWx1ZTtcbn07XG4iLCJ2YXIgdG9JbnRlZ2VyID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWludGVnZXInKTtcblxudmFyIG1heCA9IE1hdGgubWF4O1xudmFyIG1pbiA9IE1hdGgubWluO1xuXG4vLyBIZWxwZXIgZm9yIGEgcG9wdWxhciByZXBlYXRpbmcgY2FzZSBvZiB0aGUgc3BlYzpcbi8vIExldCBpbnRlZ2VyIGJlID8gVG9JbnRlZ2VyKGluZGV4KS5cbi8vIElmIGludGVnZXIgPCAwLCBsZXQgcmVzdWx0IGJlIG1heCgobGVuZ3RoICsgaW50ZWdlciksIDApOyBlbHNlIGxldCByZXN1bHQgYmUgbWluKGludGVnZXIsIGxlbmd0aCkuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpbmRleCwgbGVuZ3RoKSB7XG4gIHZhciBpbnRlZ2VyID0gdG9JbnRlZ2VyKGluZGV4KTtcbiAgcmV0dXJuIGludGVnZXIgPCAwID8gbWF4KGludGVnZXIgKyBsZW5ndGgsIDApIDogbWluKGludGVnZXIsIGxlbmd0aCk7XG59O1xuIiwidmFyIHRvSW50ZWdlciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1pbnRlZ2VyJyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tbGVuZ3RoJyk7XG5cbi8vIGBUb0luZGV4YCBhYnN0cmFjdCBvcGVyYXRpb25cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtdG9pbmRleFxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgaWYgKGl0ID09PSB1bmRlZmluZWQpIHJldHVybiAwO1xuICB2YXIgbnVtYmVyID0gdG9JbnRlZ2VyKGl0KTtcbiAgdmFyIGxlbmd0aCA9IHRvTGVuZ3RoKG51bWJlcik7XG4gIGlmIChudW1iZXIgIT09IGxlbmd0aCkgdGhyb3cgUmFuZ2VFcnJvcignV3JvbmcgbGVuZ3RoIG9yIGluZGV4Jyk7XG4gIHJldHVybiBsZW5ndGg7XG59O1xuIiwiLy8gdG9PYmplY3Qgd2l0aCBmYWxsYmFjayBmb3Igbm9uLWFycmF5LWxpa2UgRVMzIHN0cmluZ3NcbnZhciBJbmRleGVkT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2luZGV4ZWQtb2JqZWN0Jyk7XG52YXIgcmVxdWlyZU9iamVjdENvZXJjaWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZXF1aXJlLW9iamVjdC1jb2VyY2libGUnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIEluZGV4ZWRPYmplY3QocmVxdWlyZU9iamVjdENvZXJjaWJsZShpdCkpO1xufTtcbiIsInZhciBjZWlsID0gTWF0aC5jZWlsO1xudmFyIGZsb29yID0gTWF0aC5mbG9vcjtcblxuLy8gYFRvSW50ZWdlcmAgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXRvaW50ZWdlclxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoYXJndW1lbnQpIHtcbiAgcmV0dXJuIGlzTmFOKGFyZ3VtZW50ID0gK2FyZ3VtZW50KSA/IDAgOiAoYXJndW1lbnQgPiAwID8gZmxvb3IgOiBjZWlsKShhcmd1bWVudCk7XG59O1xuIiwidmFyIHRvSW50ZWdlciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1pbnRlZ2VyJyk7XG5cbnZhciBtaW4gPSBNYXRoLm1pbjtcblxuLy8gYFRvTGVuZ3RoYCBhYnN0cmFjdCBvcGVyYXRpb25cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtdG9sZW5ndGhcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGFyZ3VtZW50KSB7XG4gIHJldHVybiBhcmd1bWVudCA+IDAgPyBtaW4odG9JbnRlZ2VyKGFyZ3VtZW50KSwgMHgxRkZGRkZGRkZGRkZGRikgOiAwOyAvLyAyICoqIDUzIC0gMSA9PSA5MDA3MTk5MjU0NzQwOTkxXG59O1xuIiwidmFyIHJlcXVpcmVPYmplY3RDb2VyY2libGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVxdWlyZS1vYmplY3QtY29lcmNpYmxlJyk7XG5cbi8vIGBUb09iamVjdGAgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXRvb2JqZWN0XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChhcmd1bWVudCkge1xuICByZXR1cm4gT2JqZWN0KHJlcXVpcmVPYmplY3RDb2VyY2libGUoYXJndW1lbnQpKTtcbn07XG4iLCJ2YXIgdG9Qb3NpdGl2ZUludGVnZXIgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tcG9zaXRpdmUtaW50ZWdlcicpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCwgQllURVMpIHtcbiAgdmFyIG9mZnNldCA9IHRvUG9zaXRpdmVJbnRlZ2VyKGl0KTtcbiAgaWYgKG9mZnNldCAlIEJZVEVTKSB0aHJvdyBSYW5nZUVycm9yKCdXcm9uZyBvZmZzZXQnKTtcbiAgcmV0dXJuIG9mZnNldDtcbn07XG4iLCJ2YXIgdG9JbnRlZ2VyID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWludGVnZXInKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgdmFyIHJlc3VsdCA9IHRvSW50ZWdlcihpdCk7XG4gIGlmIChyZXN1bHQgPCAwKSB0aHJvdyBSYW5nZUVycm9yKFwiVGhlIGFyZ3VtZW50IGNhbid0IGJlIGxlc3MgdGhhbiAwXCIpO1xuICByZXR1cm4gcmVzdWx0O1xufTtcbiIsInZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1vYmplY3QnKTtcblxuLy8gYFRvUHJpbWl0aXZlYCBhYnN0cmFjdCBvcGVyYXRpb25cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtdG9wcmltaXRpdmVcbi8vIGluc3RlYWQgb2YgdGhlIEVTNiBzcGVjIHZlcnNpb24sIHdlIGRpZG4ndCBpbXBsZW1lbnQgQEB0b1ByaW1pdGl2ZSBjYXNlXG4vLyBhbmQgdGhlIHNlY29uZCBhcmd1bWVudCAtIGZsYWcgLSBwcmVmZXJyZWQgdHlwZSBpcyBhIHN0cmluZ1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaW5wdXQsIFBSRUZFUlJFRF9TVFJJTkcpIHtcbiAgaWYgKCFpc09iamVjdChpbnB1dCkpIHJldHVybiBpbnB1dDtcbiAgdmFyIGZuLCB2YWw7XG4gIGlmIChQUkVGRVJSRURfU1RSSU5HICYmIHR5cGVvZiAoZm4gPSBpbnB1dC50b1N0cmluZykgPT0gJ2Z1bmN0aW9uJyAmJiAhaXNPYmplY3QodmFsID0gZm4uY2FsbChpbnB1dCkpKSByZXR1cm4gdmFsO1xuICBpZiAodHlwZW9mIChmbiA9IGlucHV0LnZhbHVlT2YpID09ICdmdW5jdGlvbicgJiYgIWlzT2JqZWN0KHZhbCA9IGZuLmNhbGwoaW5wdXQpKSkgcmV0dXJuIHZhbDtcbiAgaWYgKCFQUkVGRVJSRURfU1RSSU5HICYmIHR5cGVvZiAoZm4gPSBpbnB1dC50b1N0cmluZykgPT0gJ2Z1bmN0aW9uJyAmJiAhaXNPYmplY3QodmFsID0gZm4uY2FsbChpbnB1dCkpKSByZXR1cm4gdmFsO1xuICB0aHJvdyBUeXBlRXJyb3IoXCJDYW4ndCBjb252ZXJ0IG9iamVjdCB0byBwcmltaXRpdmUgdmFsdWVcIik7XG59O1xuIiwidmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xuXG52YXIgVE9fU1RSSU5HX1RBRyA9IHdlbGxLbm93blN5bWJvbCgndG9TdHJpbmdUYWcnKTtcbnZhciB0ZXN0ID0ge307XG5cbnRlc3RbVE9fU1RSSU5HX1RBR10gPSAneic7XG5cbm1vZHVsZS5leHBvcnRzID0gU3RyaW5nKHRlc3QpID09PSAnW29iamVjdCB6XSc7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVzY3JpcHRvcnMnKTtcbnZhciBUWVBFRF9BUlJBWVNfQ09OU1RSVUNUT1JTX1JFUVVJUkVTX1dSQVBQRVJTID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3R5cGVkLWFycmF5LWNvbnN0cnVjdG9ycy1yZXF1aXJlLXdyYXBwZXJzJyk7XG52YXIgQXJyYXlCdWZmZXJWaWV3Q29yZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1idWZmZXItdmlldy1jb3JlJyk7XG52YXIgQXJyYXlCdWZmZXJNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktYnVmZmVyJyk7XG52YXIgYW5JbnN0YW5jZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1pbnN0YW5jZScpO1xudmFyIGNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtcHJvcGVydHktZGVzY3JpcHRvcicpO1xudmFyIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtbm9uLWVudW1lcmFibGUtcHJvcGVydHknKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1sZW5ndGgnKTtcbnZhciB0b0luZGV4ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWluZGV4Jyk7XG52YXIgdG9PZmZzZXQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tb2Zmc2V0Jyk7XG52YXIgdG9QcmltaXRpdmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tcHJpbWl0aXZlJyk7XG52YXIgaGFzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hhcycpO1xudmFyIGNsYXNzb2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY2xhc3NvZicpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLW9iamVjdCcpO1xudmFyIGNyZWF0ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtY3JlYXRlJyk7XG52YXIgc2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LXNldC1wcm90b3R5cGUtb2YnKTtcbnZhciBnZXRPd25Qcm9wZXJ0eU5hbWVzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1nZXQtb3duLXByb3BlcnR5LW5hbWVzJykuZjtcbnZhciB0eXBlZEFycmF5RnJvbSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90eXBlZC1hcnJheS1mcm9tJyk7XG52YXIgZm9yRWFjaCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1pdGVyYXRpb24nKS5mb3JFYWNoO1xudmFyIHNldFNwZWNpZXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2V0LXNwZWNpZXMnKTtcbnZhciBkZWZpbmVQcm9wZXJ0eU1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZGVmaW5lLXByb3BlcnR5Jyk7XG52YXIgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yTW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3InKTtcbnZhciBJbnRlcm5hbFN0YXRlTW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ludGVybmFsLXN0YXRlJyk7XG52YXIgaW5oZXJpdElmUmVxdWlyZWQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaW5oZXJpdC1pZi1yZXF1aXJlZCcpO1xuXG52YXIgZ2V0SW50ZXJuYWxTdGF0ZSA9IEludGVybmFsU3RhdGVNb2R1bGUuZ2V0O1xudmFyIHNldEludGVybmFsU3RhdGUgPSBJbnRlcm5hbFN0YXRlTW9kdWxlLnNldDtcbnZhciBuYXRpdmVEZWZpbmVQcm9wZXJ0eSA9IGRlZmluZVByb3BlcnR5TW9kdWxlLmY7XG52YXIgbmF0aXZlR2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yTW9kdWxlLmY7XG52YXIgcm91bmQgPSBNYXRoLnJvdW5kO1xudmFyIFJhbmdlRXJyb3IgPSBnbG9iYWwuUmFuZ2VFcnJvcjtcbnZhciBBcnJheUJ1ZmZlciA9IEFycmF5QnVmZmVyTW9kdWxlLkFycmF5QnVmZmVyO1xudmFyIERhdGFWaWV3ID0gQXJyYXlCdWZmZXJNb2R1bGUuRGF0YVZpZXc7XG52YXIgTkFUSVZFX0FSUkFZX0JVRkZFUl9WSUVXUyA9IEFycmF5QnVmZmVyVmlld0NvcmUuTkFUSVZFX0FSUkFZX0JVRkZFUl9WSUVXUztcbnZhciBUWVBFRF9BUlJBWV9UQUcgPSBBcnJheUJ1ZmZlclZpZXdDb3JlLlRZUEVEX0FSUkFZX1RBRztcbnZhciBUeXBlZEFycmF5ID0gQXJyYXlCdWZmZXJWaWV3Q29yZS5UeXBlZEFycmF5O1xudmFyIFR5cGVkQXJyYXlQcm90b3R5cGUgPSBBcnJheUJ1ZmZlclZpZXdDb3JlLlR5cGVkQXJyYXlQcm90b3R5cGU7XG52YXIgYVR5cGVkQXJyYXlDb25zdHJ1Y3RvciA9IEFycmF5QnVmZmVyVmlld0NvcmUuYVR5cGVkQXJyYXlDb25zdHJ1Y3RvcjtcbnZhciBpc1R5cGVkQXJyYXkgPSBBcnJheUJ1ZmZlclZpZXdDb3JlLmlzVHlwZWRBcnJheTtcbnZhciBCWVRFU19QRVJfRUxFTUVOVCA9ICdCWVRFU19QRVJfRUxFTUVOVCc7XG52YXIgV1JPTkdfTEVOR1RIID0gJ1dyb25nIGxlbmd0aCc7XG5cbnZhciBmcm9tTGlzdCA9IGZ1bmN0aW9uIChDLCBsaXN0KSB7XG4gIHZhciBpbmRleCA9IDA7XG4gIHZhciBsZW5ndGggPSBsaXN0Lmxlbmd0aDtcbiAgdmFyIHJlc3VsdCA9IG5ldyAoYVR5cGVkQXJyYXlDb25zdHJ1Y3RvcihDKSkobGVuZ3RoKTtcbiAgd2hpbGUgKGxlbmd0aCA+IGluZGV4KSByZXN1bHRbaW5kZXhdID0gbGlzdFtpbmRleCsrXTtcbiAgcmV0dXJuIHJlc3VsdDtcbn07XG5cbnZhciBhZGRHZXR0ZXIgPSBmdW5jdGlvbiAoaXQsIGtleSkge1xuICBuYXRpdmVEZWZpbmVQcm9wZXJ0eShpdCwga2V5LCB7IGdldDogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBnZXRJbnRlcm5hbFN0YXRlKHRoaXMpW2tleV07XG4gIH0gfSk7XG59O1xuXG52YXIgaXNBcnJheUJ1ZmZlciA9IGZ1bmN0aW9uIChpdCkge1xuICB2YXIga2xhc3M7XG4gIHJldHVybiBpdCBpbnN0YW5jZW9mIEFycmF5QnVmZmVyIHx8IChrbGFzcyA9IGNsYXNzb2YoaXQpKSA9PSAnQXJyYXlCdWZmZXInIHx8IGtsYXNzID09ICdTaGFyZWRBcnJheUJ1ZmZlcic7XG59O1xuXG52YXIgaXNUeXBlZEFycmF5SW5kZXggPSBmdW5jdGlvbiAodGFyZ2V0LCBrZXkpIHtcbiAgcmV0dXJuIGlzVHlwZWRBcnJheSh0YXJnZXQpXG4gICAgJiYgdHlwZW9mIGtleSAhPSAnc3ltYm9sJ1xuICAgICYmIGtleSBpbiB0YXJnZXRcbiAgICAmJiBTdHJpbmcoK2tleSkgPT0gU3RyaW5nKGtleSk7XG59O1xuXG52YXIgd3JhcHBlZEdldE93blByb3BlcnR5RGVzY3JpcHRvciA9IGZ1bmN0aW9uIGdldE93blByb3BlcnR5RGVzY3JpcHRvcih0YXJnZXQsIGtleSkge1xuICByZXR1cm4gaXNUeXBlZEFycmF5SW5kZXgodGFyZ2V0LCBrZXkgPSB0b1ByaW1pdGl2ZShrZXksIHRydWUpKVxuICAgID8gY3JlYXRlUHJvcGVydHlEZXNjcmlwdG9yKDIsIHRhcmdldFtrZXldKVxuICAgIDogbmF0aXZlR2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRhcmdldCwga2V5KTtcbn07XG5cbnZhciB3cmFwcGVkRGVmaW5lUHJvcGVydHkgPSBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgZGVzY3JpcHRvcikge1xuICBpZiAoaXNUeXBlZEFycmF5SW5kZXgodGFyZ2V0LCBrZXkgPSB0b1ByaW1pdGl2ZShrZXksIHRydWUpKVxuICAgICYmIGlzT2JqZWN0KGRlc2NyaXB0b3IpXG4gICAgJiYgaGFzKGRlc2NyaXB0b3IsICd2YWx1ZScpXG4gICAgJiYgIWhhcyhkZXNjcmlwdG9yLCAnZ2V0JylcbiAgICAmJiAhaGFzKGRlc2NyaXB0b3IsICdzZXQnKVxuICAgIC8vIFRPRE86IGFkZCB2YWxpZGF0aW9uIGRlc2NyaXB0b3Igdy9vIGNhbGxpbmcgYWNjZXNzb3JzXG4gICAgJiYgIWRlc2NyaXB0b3IuY29uZmlndXJhYmxlXG4gICAgJiYgKCFoYXMoZGVzY3JpcHRvciwgJ3dyaXRhYmxlJykgfHwgZGVzY3JpcHRvci53cml0YWJsZSlcbiAgICAmJiAoIWhhcyhkZXNjcmlwdG9yLCAnZW51bWVyYWJsZScpIHx8IGRlc2NyaXB0b3IuZW51bWVyYWJsZSlcbiAgKSB7XG4gICAgdGFyZ2V0W2tleV0gPSBkZXNjcmlwdG9yLnZhbHVlO1xuICAgIHJldHVybiB0YXJnZXQ7XG4gIH0gcmV0dXJuIG5hdGl2ZURlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBkZXNjcmlwdG9yKTtcbn07XG5cbmlmIChERVNDUklQVE9SUykge1xuICBpZiAoIU5BVElWRV9BUlJBWV9CVUZGRVJfVklFV1MpIHtcbiAgICBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JNb2R1bGUuZiA9IHdyYXBwZWRHZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG4gICAgZGVmaW5lUHJvcGVydHlNb2R1bGUuZiA9IHdyYXBwZWREZWZpbmVQcm9wZXJ0eTtcbiAgICBhZGRHZXR0ZXIoVHlwZWRBcnJheVByb3RvdHlwZSwgJ2J1ZmZlcicpO1xuICAgIGFkZEdldHRlcihUeXBlZEFycmF5UHJvdG90eXBlLCAnYnl0ZU9mZnNldCcpO1xuICAgIGFkZEdldHRlcihUeXBlZEFycmF5UHJvdG90eXBlLCAnYnl0ZUxlbmd0aCcpO1xuICAgIGFkZEdldHRlcihUeXBlZEFycmF5UHJvdG90eXBlLCAnbGVuZ3RoJyk7XG4gIH1cblxuICAkKHsgdGFyZ2V0OiAnT2JqZWN0Jywgc3RhdDogdHJ1ZSwgZm9yY2VkOiAhTkFUSVZFX0FSUkFZX0JVRkZFUl9WSUVXUyB9LCB7XG4gICAgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yOiB3cmFwcGVkR2V0T3duUHJvcGVydHlEZXNjcmlwdG9yLFxuICAgIGRlZmluZVByb3BlcnR5OiB3cmFwcGVkRGVmaW5lUHJvcGVydHlcbiAgfSk7XG5cbiAgbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoVFlQRSwgd3JhcHBlciwgQ0xBTVBFRCkge1xuICAgIHZhciBCWVRFUyA9IFRZUEUubWF0Y2goL1xcZCskLylbMF0gLyA4O1xuICAgIHZhciBDT05TVFJVQ1RPUl9OQU1FID0gVFlQRSArIChDTEFNUEVEID8gJ0NsYW1wZWQnIDogJycpICsgJ0FycmF5JztcbiAgICB2YXIgR0VUVEVSID0gJ2dldCcgKyBUWVBFO1xuICAgIHZhciBTRVRURVIgPSAnc2V0JyArIFRZUEU7XG4gICAgdmFyIE5hdGl2ZVR5cGVkQXJyYXlDb25zdHJ1Y3RvciA9IGdsb2JhbFtDT05TVFJVQ1RPUl9OQU1FXTtcbiAgICB2YXIgVHlwZWRBcnJheUNvbnN0cnVjdG9yID0gTmF0aXZlVHlwZWRBcnJheUNvbnN0cnVjdG9yO1xuICAgIHZhciBUeXBlZEFycmF5Q29uc3RydWN0b3JQcm90b3R5cGUgPSBUeXBlZEFycmF5Q29uc3RydWN0b3IgJiYgVHlwZWRBcnJheUNvbnN0cnVjdG9yLnByb3RvdHlwZTtcbiAgICB2YXIgZXhwb3J0ZWQgPSB7fTtcblxuICAgIHZhciBnZXR0ZXIgPSBmdW5jdGlvbiAodGhhdCwgaW5kZXgpIHtcbiAgICAgIHZhciBkYXRhID0gZ2V0SW50ZXJuYWxTdGF0ZSh0aGF0KTtcbiAgICAgIHJldHVybiBkYXRhLnZpZXdbR0VUVEVSXShpbmRleCAqIEJZVEVTICsgZGF0YS5ieXRlT2Zmc2V0LCB0cnVlKTtcbiAgICB9O1xuXG4gICAgdmFyIHNldHRlciA9IGZ1bmN0aW9uICh0aGF0LCBpbmRleCwgdmFsdWUpIHtcbiAgICAgIHZhciBkYXRhID0gZ2V0SW50ZXJuYWxTdGF0ZSh0aGF0KTtcbiAgICAgIGlmIChDTEFNUEVEKSB2YWx1ZSA9ICh2YWx1ZSA9IHJvdW5kKHZhbHVlKSkgPCAwID8gMCA6IHZhbHVlID4gMHhGRiA/IDB4RkYgOiB2YWx1ZSAmIDB4RkY7XG4gICAgICBkYXRhLnZpZXdbU0VUVEVSXShpbmRleCAqIEJZVEVTICsgZGF0YS5ieXRlT2Zmc2V0LCB2YWx1ZSwgdHJ1ZSk7XG4gICAgfTtcblxuICAgIHZhciBhZGRFbGVtZW50ID0gZnVuY3Rpb24gKHRoYXQsIGluZGV4KSB7XG4gICAgICBuYXRpdmVEZWZpbmVQcm9wZXJ0eSh0aGF0LCBpbmRleCwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICByZXR1cm4gZ2V0dGVyKHRoaXMsIGluZGV4KTtcbiAgICAgICAgfSxcbiAgICAgICAgc2V0OiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICByZXR1cm4gc2V0dGVyKHRoaXMsIGluZGV4LCB2YWx1ZSk7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IHRydWVcbiAgICAgIH0pO1xuICAgIH07XG5cbiAgICBpZiAoIU5BVElWRV9BUlJBWV9CVUZGRVJfVklFV1MpIHtcbiAgICAgIFR5cGVkQXJyYXlDb25zdHJ1Y3RvciA9IHdyYXBwZXIoZnVuY3Rpb24gKHRoYXQsIGRhdGEsIG9mZnNldCwgJGxlbmd0aCkge1xuICAgICAgICBhbkluc3RhbmNlKHRoYXQsIFR5cGVkQXJyYXlDb25zdHJ1Y3RvciwgQ09OU1RSVUNUT1JfTkFNRSk7XG4gICAgICAgIHZhciBpbmRleCA9IDA7XG4gICAgICAgIHZhciBieXRlT2Zmc2V0ID0gMDtcbiAgICAgICAgdmFyIGJ1ZmZlciwgYnl0ZUxlbmd0aCwgbGVuZ3RoO1xuICAgICAgICBpZiAoIWlzT2JqZWN0KGRhdGEpKSB7XG4gICAgICAgICAgbGVuZ3RoID0gdG9JbmRleChkYXRhKTtcbiAgICAgICAgICBieXRlTGVuZ3RoID0gbGVuZ3RoICogQllURVM7XG4gICAgICAgICAgYnVmZmVyID0gbmV3IEFycmF5QnVmZmVyKGJ5dGVMZW5ndGgpO1xuICAgICAgICB9IGVsc2UgaWYgKGlzQXJyYXlCdWZmZXIoZGF0YSkpIHtcbiAgICAgICAgICBidWZmZXIgPSBkYXRhO1xuICAgICAgICAgIGJ5dGVPZmZzZXQgPSB0b09mZnNldChvZmZzZXQsIEJZVEVTKTtcbiAgICAgICAgICB2YXIgJGxlbiA9IGRhdGEuYnl0ZUxlbmd0aDtcbiAgICAgICAgICBpZiAoJGxlbmd0aCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBpZiAoJGxlbiAlIEJZVEVTKSB0aHJvdyBSYW5nZUVycm9yKFdST05HX0xFTkdUSCk7XG4gICAgICAgICAgICBieXRlTGVuZ3RoID0gJGxlbiAtIGJ5dGVPZmZzZXQ7XG4gICAgICAgICAgICBpZiAoYnl0ZUxlbmd0aCA8IDApIHRocm93IFJhbmdlRXJyb3IoV1JPTkdfTEVOR1RIKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgYnl0ZUxlbmd0aCA9IHRvTGVuZ3RoKCRsZW5ndGgpICogQllURVM7XG4gICAgICAgICAgICBpZiAoYnl0ZUxlbmd0aCArIGJ5dGVPZmZzZXQgPiAkbGVuKSB0aHJvdyBSYW5nZUVycm9yKFdST05HX0xFTkdUSCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGxlbmd0aCA9IGJ5dGVMZW5ndGggLyBCWVRFUztcbiAgICAgICAgfSBlbHNlIGlmIChpc1R5cGVkQXJyYXkoZGF0YSkpIHtcbiAgICAgICAgICByZXR1cm4gZnJvbUxpc3QoVHlwZWRBcnJheUNvbnN0cnVjdG9yLCBkYXRhKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXR1cm4gdHlwZWRBcnJheUZyb20uY2FsbChUeXBlZEFycmF5Q29uc3RydWN0b3IsIGRhdGEpO1xuICAgICAgICB9XG4gICAgICAgIHNldEludGVybmFsU3RhdGUodGhhdCwge1xuICAgICAgICAgIGJ1ZmZlcjogYnVmZmVyLFxuICAgICAgICAgIGJ5dGVPZmZzZXQ6IGJ5dGVPZmZzZXQsXG4gICAgICAgICAgYnl0ZUxlbmd0aDogYnl0ZUxlbmd0aCxcbiAgICAgICAgICBsZW5ndGg6IGxlbmd0aCxcbiAgICAgICAgICB2aWV3OiBuZXcgRGF0YVZpZXcoYnVmZmVyKVxuICAgICAgICB9KTtcbiAgICAgICAgd2hpbGUgKGluZGV4IDwgbGVuZ3RoKSBhZGRFbGVtZW50KHRoYXQsIGluZGV4KyspO1xuICAgICAgfSk7XG5cbiAgICAgIGlmIChzZXRQcm90b3R5cGVPZikgc2V0UHJvdG90eXBlT2YoVHlwZWRBcnJheUNvbnN0cnVjdG9yLCBUeXBlZEFycmF5KTtcbiAgICAgIFR5cGVkQXJyYXlDb25zdHJ1Y3RvclByb3RvdHlwZSA9IFR5cGVkQXJyYXlDb25zdHJ1Y3Rvci5wcm90b3R5cGUgPSBjcmVhdGUoVHlwZWRBcnJheVByb3RvdHlwZSk7XG4gICAgfSBlbHNlIGlmIChUWVBFRF9BUlJBWVNfQ09OU1RSVUNUT1JTX1JFUVVJUkVTX1dSQVBQRVJTKSB7XG4gICAgICBUeXBlZEFycmF5Q29uc3RydWN0b3IgPSB3cmFwcGVyKGZ1bmN0aW9uIChkdW1teSwgZGF0YSwgdHlwZWRBcnJheU9mZnNldCwgJGxlbmd0aCkge1xuICAgICAgICBhbkluc3RhbmNlKGR1bW15LCBUeXBlZEFycmF5Q29uc3RydWN0b3IsIENPTlNUUlVDVE9SX05BTUUpO1xuICAgICAgICByZXR1cm4gaW5oZXJpdElmUmVxdWlyZWQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgIGlmICghaXNPYmplY3QoZGF0YSkpIHJldHVybiBuZXcgTmF0aXZlVHlwZWRBcnJheUNvbnN0cnVjdG9yKHRvSW5kZXgoZGF0YSkpO1xuICAgICAgICAgIGlmIChpc0FycmF5QnVmZmVyKGRhdGEpKSByZXR1cm4gJGxlbmd0aCAhPT0gdW5kZWZpbmVkXG4gICAgICAgICAgICA/IG5ldyBOYXRpdmVUeXBlZEFycmF5Q29uc3RydWN0b3IoZGF0YSwgdG9PZmZzZXQodHlwZWRBcnJheU9mZnNldCwgQllURVMpLCAkbGVuZ3RoKVxuICAgICAgICAgICAgOiB0eXBlZEFycmF5T2Zmc2V0ICE9PSB1bmRlZmluZWRcbiAgICAgICAgICAgICAgPyBuZXcgTmF0aXZlVHlwZWRBcnJheUNvbnN0cnVjdG9yKGRhdGEsIHRvT2Zmc2V0KHR5cGVkQXJyYXlPZmZzZXQsIEJZVEVTKSlcbiAgICAgICAgICAgICAgOiBuZXcgTmF0aXZlVHlwZWRBcnJheUNvbnN0cnVjdG9yKGRhdGEpO1xuICAgICAgICAgIGlmIChpc1R5cGVkQXJyYXkoZGF0YSkpIHJldHVybiBmcm9tTGlzdChUeXBlZEFycmF5Q29uc3RydWN0b3IsIGRhdGEpO1xuICAgICAgICAgIHJldHVybiB0eXBlZEFycmF5RnJvbS5jYWxsKFR5cGVkQXJyYXlDb25zdHJ1Y3RvciwgZGF0YSk7XG4gICAgICAgIH0oKSwgZHVtbXksIFR5cGVkQXJyYXlDb25zdHJ1Y3Rvcik7XG4gICAgICB9KTtcblxuICAgICAgaWYgKHNldFByb3RvdHlwZU9mKSBzZXRQcm90b3R5cGVPZihUeXBlZEFycmF5Q29uc3RydWN0b3IsIFR5cGVkQXJyYXkpO1xuICAgICAgZm9yRWFjaChnZXRPd25Qcm9wZXJ0eU5hbWVzKE5hdGl2ZVR5cGVkQXJyYXlDb25zdHJ1Y3RvciksIGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgaWYgKCEoa2V5IGluIFR5cGVkQXJyYXlDb25zdHJ1Y3RvcikpIHtcbiAgICAgICAgICBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkoVHlwZWRBcnJheUNvbnN0cnVjdG9yLCBrZXksIE5hdGl2ZVR5cGVkQXJyYXlDb25zdHJ1Y3RvcltrZXldKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICBUeXBlZEFycmF5Q29uc3RydWN0b3IucHJvdG90eXBlID0gVHlwZWRBcnJheUNvbnN0cnVjdG9yUHJvdG90eXBlO1xuICAgIH1cblxuICAgIGlmIChUeXBlZEFycmF5Q29uc3RydWN0b3JQcm90b3R5cGUuY29uc3RydWN0b3IgIT09IFR5cGVkQXJyYXlDb25zdHJ1Y3Rvcikge1xuICAgICAgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5KFR5cGVkQXJyYXlDb25zdHJ1Y3RvclByb3RvdHlwZSwgJ2NvbnN0cnVjdG9yJywgVHlwZWRBcnJheUNvbnN0cnVjdG9yKTtcbiAgICB9XG5cbiAgICBpZiAoVFlQRURfQVJSQVlfVEFHKSB7XG4gICAgICBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkoVHlwZWRBcnJheUNvbnN0cnVjdG9yUHJvdG90eXBlLCBUWVBFRF9BUlJBWV9UQUcsIENPTlNUUlVDVE9SX05BTUUpO1xuICAgIH1cblxuICAgIGV4cG9ydGVkW0NPTlNUUlVDVE9SX05BTUVdID0gVHlwZWRBcnJheUNvbnN0cnVjdG9yO1xuXG4gICAgJCh7XG4gICAgICBnbG9iYWw6IHRydWUsIGZvcmNlZDogVHlwZWRBcnJheUNvbnN0cnVjdG9yICE9IE5hdGl2ZVR5cGVkQXJyYXlDb25zdHJ1Y3Rvciwgc2hhbTogIU5BVElWRV9BUlJBWV9CVUZGRVJfVklFV1NcbiAgICB9LCBleHBvcnRlZCk7XG5cbiAgICBpZiAoIShCWVRFU19QRVJfRUxFTUVOVCBpbiBUeXBlZEFycmF5Q29uc3RydWN0b3IpKSB7XG4gICAgICBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkoVHlwZWRBcnJheUNvbnN0cnVjdG9yLCBCWVRFU19QRVJfRUxFTUVOVCwgQllURVMpO1xuICAgIH1cblxuICAgIGlmICghKEJZVEVTX1BFUl9FTEVNRU5UIGluIFR5cGVkQXJyYXlDb25zdHJ1Y3RvclByb3RvdHlwZSkpIHtcbiAgICAgIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eShUeXBlZEFycmF5Q29uc3RydWN0b3JQcm90b3R5cGUsIEJZVEVTX1BFUl9FTEVNRU5ULCBCWVRFUyk7XG4gICAgfVxuXG4gICAgc2V0U3BlY2llcyhDT05TVFJVQ1RPUl9OQU1FKTtcbiAgfTtcbn0gZWxzZSBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICgpIHsgLyogZW1wdHkgKi8gfTtcbiIsIi8qIGVzbGludC1kaXNhYmxlIG5vLW5ldyAqL1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xudmFyIGNoZWNrQ29ycmVjdG5lc3NPZkl0ZXJhdGlvbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jaGVjay1jb3JyZWN0bmVzcy1vZi1pdGVyYXRpb24nKTtcbnZhciBOQVRJVkVfQVJSQVlfQlVGRkVSX1ZJRVdTID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LWJ1ZmZlci12aWV3LWNvcmUnKS5OQVRJVkVfQVJSQVlfQlVGRkVSX1ZJRVdTO1xuXG52YXIgQXJyYXlCdWZmZXIgPSBnbG9iYWwuQXJyYXlCdWZmZXI7XG52YXIgSW50OEFycmF5ID0gZ2xvYmFsLkludDhBcnJheTtcblxubW9kdWxlLmV4cG9ydHMgPSAhTkFUSVZFX0FSUkFZX0JVRkZFUl9WSUVXUyB8fCAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICBJbnQ4QXJyYXkoMSk7XG59KSB8fCAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICBuZXcgSW50OEFycmF5KC0xKTtcbn0pIHx8ICFjaGVja0NvcnJlY3RuZXNzT2ZJdGVyYXRpb24oZnVuY3Rpb24gKGl0ZXJhYmxlKSB7XG4gIG5ldyBJbnQ4QXJyYXkoKTtcbiAgbmV3IEludDhBcnJheShudWxsKTtcbiAgbmV3IEludDhBcnJheSgxLjUpO1xuICBuZXcgSW50OEFycmF5KGl0ZXJhYmxlKTtcbn0sIHRydWUpIHx8IGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgLy8gU2FmYXJpICgxMSspIGJ1ZyAtIGEgcmVhc29uIHdoeSBldmVuIFNhZmFyaSAxMyBzaG91bGQgbG9hZCBhIHR5cGVkIGFycmF5IHBvbHlmaWxsXG4gIHJldHVybiBuZXcgSW50OEFycmF5KG5ldyBBcnJheUJ1ZmZlcigyKSwgMSwgdW5kZWZpbmVkKS5sZW5ndGggIT09IDE7XG59KTtcbiIsInZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1vYmplY3QnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1sZW5ndGgnKTtcbnZhciBnZXRJdGVyYXRvck1ldGhvZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nZXQtaXRlcmF0b3ItbWV0aG9kJyk7XG52YXIgaXNBcnJheUl0ZXJhdG9yTWV0aG9kID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLWFycmF5LWl0ZXJhdG9yLW1ldGhvZCcpO1xudmFyIGJpbmQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tYmluZC1jb250ZXh0Jyk7XG52YXIgYVR5cGVkQXJyYXlDb25zdHJ1Y3RvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1idWZmZXItdmlldy1jb3JlJykuYVR5cGVkQXJyYXlDb25zdHJ1Y3RvcjtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBmcm9tKHNvdXJjZSAvKiAsIG1hcGZuLCB0aGlzQXJnICovKSB7XG4gIHZhciBPID0gdG9PYmplY3Qoc291cmNlKTtcbiAgdmFyIGFyZ3VtZW50c0xlbmd0aCA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gIHZhciBtYXBmbiA9IGFyZ3VtZW50c0xlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQ7XG4gIHZhciBtYXBwaW5nID0gbWFwZm4gIT09IHVuZGVmaW5lZDtcbiAgdmFyIGl0ZXJhdG9yTWV0aG9kID0gZ2V0SXRlcmF0b3JNZXRob2QoTyk7XG4gIHZhciBpLCBsZW5ndGgsIHJlc3VsdCwgc3RlcCwgaXRlcmF0b3IsIG5leHQ7XG4gIGlmIChpdGVyYXRvck1ldGhvZCAhPSB1bmRlZmluZWQgJiYgIWlzQXJyYXlJdGVyYXRvck1ldGhvZChpdGVyYXRvck1ldGhvZCkpIHtcbiAgICBpdGVyYXRvciA9IGl0ZXJhdG9yTWV0aG9kLmNhbGwoTyk7XG4gICAgbmV4dCA9IGl0ZXJhdG9yLm5leHQ7XG4gICAgTyA9IFtdO1xuICAgIHdoaWxlICghKHN0ZXAgPSBuZXh0LmNhbGwoaXRlcmF0b3IpKS5kb25lKSB7XG4gICAgICBPLnB1c2goc3RlcC52YWx1ZSk7XG4gICAgfVxuICB9XG4gIGlmIChtYXBwaW5nICYmIGFyZ3VtZW50c0xlbmd0aCA+IDIpIHtcbiAgICBtYXBmbiA9IGJpbmQobWFwZm4sIGFyZ3VtZW50c1syXSwgMik7XG4gIH1cbiAgbGVuZ3RoID0gdG9MZW5ndGgoTy5sZW5ndGgpO1xuICByZXN1bHQgPSBuZXcgKGFUeXBlZEFycmF5Q29uc3RydWN0b3IodGhpcykpKGxlbmd0aCk7XG4gIGZvciAoaSA9IDA7IGxlbmd0aCA+IGk7IGkrKykge1xuICAgIHJlc3VsdFtpXSA9IG1hcHBpbmcgPyBtYXBmbihPW2ldLCBpKSA6IE9baV07XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn07XG4iLCJ2YXIgaWQgPSAwO1xudmFyIHBvc3RmaXggPSBNYXRoLnJhbmRvbSgpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChrZXkpIHtcbiAgcmV0dXJuICdTeW1ib2woJyArIFN0cmluZyhrZXkgPT09IHVuZGVmaW5lZCA/ICcnIDoga2V5KSArICcpXycgKyAoKytpZCArIHBvc3RmaXgpLnRvU3RyaW5nKDM2KTtcbn07XG4iLCJ2YXIgTkFUSVZFX1NZTUJPTCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9uYXRpdmUtc3ltYm9sJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gTkFUSVZFX1NZTUJPTFxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW5kZWZcbiAgJiYgIVN5bWJvbC5zaGFtXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bmRlZlxuICAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09ICdzeW1ib2wnO1xuIiwidmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xuXG5leHBvcnRzLmYgPSB3ZWxsS25vd25TeW1ib2w7XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIHNoYXJlZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zaGFyZWQnKTtcbnZhciBoYXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGFzJyk7XG52YXIgdWlkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3VpZCcpO1xudmFyIE5BVElWRV9TWU1CT0wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvbmF0aXZlLXN5bWJvbCcpO1xudmFyIFVTRV9TWU1CT0xfQVNfVUlEID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3VzZS1zeW1ib2wtYXMtdWlkJyk7XG5cbnZhciBXZWxsS25vd25TeW1ib2xzU3RvcmUgPSBzaGFyZWQoJ3drcycpO1xudmFyIFN5bWJvbCA9IGdsb2JhbC5TeW1ib2w7XG52YXIgY3JlYXRlV2VsbEtub3duU3ltYm9sID0gVVNFX1NZTUJPTF9BU19VSUQgPyBTeW1ib2wgOiBTeW1ib2wgJiYgU3ltYm9sLndpdGhvdXRTZXR0ZXIgfHwgdWlkO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gIGlmICghaGFzKFdlbGxLbm93blN5bWJvbHNTdG9yZSwgbmFtZSkpIHtcbiAgICBpZiAoTkFUSVZFX1NZTUJPTCAmJiBoYXMoU3ltYm9sLCBuYW1lKSkgV2VsbEtub3duU3ltYm9sc1N0b3JlW25hbWVdID0gU3ltYm9sW25hbWVdO1xuICAgIGVsc2UgV2VsbEtub3duU3ltYm9sc1N0b3JlW25hbWVdID0gY3JlYXRlV2VsbEtub3duU3ltYm9sKCdTeW1ib2wuJyArIG5hbWUpO1xuICB9IHJldHVybiBXZWxsS25vd25TeW1ib2xzU3RvcmVbbmFtZV07XG59O1xuIiwiLy8gYSBzdHJpbmcgb2YgYWxsIHZhbGlkIHVuaWNvZGUgd2hpdGVzcGFjZXNcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBtYXgtbGVuXG5tb2R1bGUuZXhwb3J0cyA9ICdcXHUwMDA5XFx1MDAwQVxcdTAwMEJcXHUwMDBDXFx1MDAwRFxcdTAwMjBcXHUwMEEwXFx1MTY4MFxcdTIwMDBcXHUyMDAxXFx1MjAwMlxcdTIwMDNcXHUyMDA0XFx1MjAwNVxcdTIwMDZcXHUyMDA3XFx1MjAwOFxcdTIwMDlcXHUyMDBBXFx1MjAyRlxcdTIwNUZcXHUzMDAwXFx1MjAyOFxcdTIwMjlcXHVGRUZGJztcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGdldFByb3RvdHlwZU9mID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1nZXQtcHJvdG90eXBlLW9mJyk7XG52YXIgc2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LXNldC1wcm90b3R5cGUtb2YnKTtcbnZhciBjcmVhdGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWNyZWF0ZScpO1xudmFyIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtbm9uLWVudW1lcmFibGUtcHJvcGVydHknKTtcbnZhciBjcmVhdGVQcm9wZXJ0eURlc2NyaXB0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLXByb3BlcnR5LWRlc2NyaXB0b3InKTtcbnZhciBpdGVyYXRlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2l0ZXJhdGUnKTtcblxudmFyICRBZ2dyZWdhdGVFcnJvciA9IGZ1bmN0aW9uIEFnZ3JlZ2F0ZUVycm9yKGVycm9ycywgbWVzc2FnZSkge1xuICB2YXIgdGhhdCA9IHRoaXM7XG4gIGlmICghKHRoYXQgaW5zdGFuY2VvZiAkQWdncmVnYXRlRXJyb3IpKSByZXR1cm4gbmV3ICRBZ2dyZWdhdGVFcnJvcihlcnJvcnMsIG1lc3NhZ2UpO1xuICBpZiAoc2V0UHJvdG90eXBlT2YpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgdW5pY29ybi9lcnJvci1tZXNzYWdlXG4gICAgdGhhdCA9IHNldFByb3RvdHlwZU9mKG5ldyBFcnJvcih1bmRlZmluZWQpLCBnZXRQcm90b3R5cGVPZih0aGF0KSk7XG4gIH1cbiAgaWYgKG1lc3NhZ2UgIT09IHVuZGVmaW5lZCkgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5KHRoYXQsICdtZXNzYWdlJywgU3RyaW5nKG1lc3NhZ2UpKTtcbiAgdmFyIGVycm9yc0FycmF5ID0gW107XG4gIGl0ZXJhdGUoZXJyb3JzLCBlcnJvcnNBcnJheS5wdXNoLCB7IHRoYXQ6IGVycm9yc0FycmF5IH0pO1xuICBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkodGhhdCwgJ2Vycm9ycycsIGVycm9yc0FycmF5KTtcbiAgcmV0dXJuIHRoYXQ7XG59O1xuXG4kQWdncmVnYXRlRXJyb3IucHJvdG90eXBlID0gY3JlYXRlKEVycm9yLnByb3RvdHlwZSwge1xuICBjb25zdHJ1Y3RvcjogY3JlYXRlUHJvcGVydHlEZXNjcmlwdG9yKDUsICRBZ2dyZWdhdGVFcnJvciksXG4gIG1lc3NhZ2U6IGNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvcig1LCAnJyksXG4gIG5hbWU6IGNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvcig1LCAnQWdncmVnYXRlRXJyb3InKVxufSk7XG5cbi8vIGBBZ2dyZWdhdGVFcnJvcmAgY29uc3RydWN0b3Jcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYWdncmVnYXRlLWVycm9yLWNvbnN0cnVjdG9yXG4kKHsgZ2xvYmFsOiB0cnVlIH0sIHtcbiAgQWdncmVnYXRlRXJyb3I6ICRBZ2dyZWdhdGVFcnJvclxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgYXJyYXlCdWZmZXJNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktYnVmZmVyJyk7XG52YXIgc2V0U3BlY2llcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zZXQtc3BlY2llcycpO1xuXG52YXIgQVJSQVlfQlVGRkVSID0gJ0FycmF5QnVmZmVyJztcbnZhciBBcnJheUJ1ZmZlciA9IGFycmF5QnVmZmVyTW9kdWxlW0FSUkFZX0JVRkZFUl07XG52YXIgTmF0aXZlQXJyYXlCdWZmZXIgPSBnbG9iYWxbQVJSQVlfQlVGRkVSXTtcblxuLy8gYEFycmF5QnVmZmVyYCBjb25zdHJ1Y3RvclxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheWJ1ZmZlci1jb25zdHJ1Y3RvclxuJCh7IGdsb2JhbDogdHJ1ZSwgZm9yY2VkOiBOYXRpdmVBcnJheUJ1ZmZlciAhPT0gQXJyYXlCdWZmZXIgfSwge1xuICBBcnJheUJ1ZmZlcjogQXJyYXlCdWZmZXJcbn0pO1xuXG5zZXRTcGVjaWVzKEFSUkFZX0JVRkZFUik7XG4iLCJ2YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBBcnJheUJ1ZmZlclZpZXdDb3JlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LWJ1ZmZlci12aWV3LWNvcmUnKTtcblxudmFyIE5BVElWRV9BUlJBWV9CVUZGRVJfVklFV1MgPSBBcnJheUJ1ZmZlclZpZXdDb3JlLk5BVElWRV9BUlJBWV9CVUZGRVJfVklFV1M7XG5cbi8vIGBBcnJheUJ1ZmZlci5pc1ZpZXdgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheWJ1ZmZlci5pc3ZpZXdcbiQoeyB0YXJnZXQ6ICdBcnJheUJ1ZmZlcicsIHN0YXQ6IHRydWUsIGZvcmNlZDogIU5BVElWRV9BUlJBWV9CVUZGRVJfVklFV1MgfSwge1xuICBpc1ZpZXc6IEFycmF5QnVmZmVyVmlld0NvcmUuaXNWaWV3XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG52YXIgQXJyYXlCdWZmZXJNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktYnVmZmVyJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4tb2JqZWN0Jyk7XG52YXIgdG9BYnNvbHV0ZUluZGV4ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWFic29sdXRlLWluZGV4Jyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tbGVuZ3RoJyk7XG52YXIgc3BlY2llc0NvbnN0cnVjdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NwZWNpZXMtY29uc3RydWN0b3InKTtcblxudmFyIEFycmF5QnVmZmVyID0gQXJyYXlCdWZmZXJNb2R1bGUuQXJyYXlCdWZmZXI7XG52YXIgRGF0YVZpZXcgPSBBcnJheUJ1ZmZlck1vZHVsZS5EYXRhVmlldztcbnZhciBuYXRpdmVBcnJheUJ1ZmZlclNsaWNlID0gQXJyYXlCdWZmZXIucHJvdG90eXBlLnNsaWNlO1xuXG52YXIgSU5DT1JSRUNUX1NMSUNFID0gZmFpbHMoZnVuY3Rpb24gKCkge1xuICByZXR1cm4gIW5ldyBBcnJheUJ1ZmZlcigyKS5zbGljZSgxLCB1bmRlZmluZWQpLmJ5dGVMZW5ndGg7XG59KTtcblxuLy8gYEFycmF5QnVmZmVyLnByb3RvdHlwZS5zbGljZWAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5YnVmZmVyLnByb3RvdHlwZS5zbGljZVxuJCh7IHRhcmdldDogJ0FycmF5QnVmZmVyJywgcHJvdG86IHRydWUsIHVuc2FmZTogdHJ1ZSwgZm9yY2VkOiBJTkNPUlJFQ1RfU0xJQ0UgfSwge1xuICBzbGljZTogZnVuY3Rpb24gc2xpY2Uoc3RhcnQsIGVuZCkge1xuICAgIGlmIChuYXRpdmVBcnJheUJ1ZmZlclNsaWNlICE9PSB1bmRlZmluZWQgJiYgZW5kID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybiBuYXRpdmVBcnJheUJ1ZmZlclNsaWNlLmNhbGwoYW5PYmplY3QodGhpcyksIHN0YXJ0KTsgLy8gRkYgZml4XG4gICAgfVxuICAgIHZhciBsZW5ndGggPSBhbk9iamVjdCh0aGlzKS5ieXRlTGVuZ3RoO1xuICAgIHZhciBmaXJzdCA9IHRvQWJzb2x1dGVJbmRleChzdGFydCwgbGVuZ3RoKTtcbiAgICB2YXIgZmluID0gdG9BYnNvbHV0ZUluZGV4KGVuZCA9PT0gdW5kZWZpbmVkID8gbGVuZ3RoIDogZW5kLCBsZW5ndGgpO1xuICAgIHZhciByZXN1bHQgPSBuZXcgKHNwZWNpZXNDb25zdHJ1Y3Rvcih0aGlzLCBBcnJheUJ1ZmZlcikpKHRvTGVuZ3RoKGZpbiAtIGZpcnN0KSk7XG4gICAgdmFyIHZpZXdTb3VyY2UgPSBuZXcgRGF0YVZpZXcodGhpcyk7XG4gICAgdmFyIHZpZXdUYXJnZXQgPSBuZXcgRGF0YVZpZXcocmVzdWx0KTtcbiAgICB2YXIgaW5kZXggPSAwO1xuICAgIHdoaWxlIChmaXJzdCA8IGZpbikge1xuICAgICAgdmlld1RhcmdldC5zZXRVaW50OChpbmRleCsrLCB2aWV3U291cmNlLmdldFVpbnQ4KGZpcnN0KyspKTtcbiAgICB9IHJldHVybiByZXN1bHQ7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcbnZhciBpc0FycmF5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLWFycmF5Jyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtb2JqZWN0Jyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tb2JqZWN0Jyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tbGVuZ3RoJyk7XG52YXIgY3JlYXRlUHJvcGVydHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLXByb3BlcnR5Jyk7XG52YXIgYXJyYXlTcGVjaWVzQ3JlYXRlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LXNwZWNpZXMtY3JlYXRlJyk7XG52YXIgYXJyYXlNZXRob2RIYXNTcGVjaWVzU3VwcG9ydCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1tZXRob2QtaGFzLXNwZWNpZXMtc3VwcG9ydCcpO1xudmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xudmFyIFY4X1ZFUlNJT04gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZW5naW5lLXY4LXZlcnNpb24nKTtcblxudmFyIElTX0NPTkNBVF9TUFJFQURBQkxFID0gd2VsbEtub3duU3ltYm9sKCdpc0NvbmNhdFNwcmVhZGFibGUnKTtcbnZhciBNQVhfU0FGRV9JTlRFR0VSID0gMHgxRkZGRkZGRkZGRkZGRjtcbnZhciBNQVhJTVVNX0FMTE9XRURfSU5ERVhfRVhDRUVERUQgPSAnTWF4aW11bSBhbGxvd2VkIGluZGV4IGV4Y2VlZGVkJztcblxuLy8gV2UgY2FuJ3QgdXNlIHRoaXMgZmVhdHVyZSBkZXRlY3Rpb24gaW4gVjggc2luY2UgaXQgY2F1c2VzXG4vLyBkZW9wdGltaXphdGlvbiBhbmQgc2VyaW91cyBwZXJmb3JtYW5jZSBkZWdyYWRhdGlvblxuLy8gaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMvaXNzdWVzLzY3OVxudmFyIElTX0NPTkNBVF9TUFJFQURBQkxFX1NVUFBPUlQgPSBWOF9WRVJTSU9OID49IDUxIHx8ICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gIHZhciBhcnJheSA9IFtdO1xuICBhcnJheVtJU19DT05DQVRfU1BSRUFEQUJMRV0gPSBmYWxzZTtcbiAgcmV0dXJuIGFycmF5LmNvbmNhdCgpWzBdICE9PSBhcnJheTtcbn0pO1xuXG52YXIgU1BFQ0lFU19TVVBQT1JUID0gYXJyYXlNZXRob2RIYXNTcGVjaWVzU3VwcG9ydCgnY29uY2F0Jyk7XG5cbnZhciBpc0NvbmNhdFNwcmVhZGFibGUgPSBmdW5jdGlvbiAoTykge1xuICBpZiAoIWlzT2JqZWN0KE8pKSByZXR1cm4gZmFsc2U7XG4gIHZhciBzcHJlYWRhYmxlID0gT1tJU19DT05DQVRfU1BSRUFEQUJMRV07XG4gIHJldHVybiBzcHJlYWRhYmxlICE9PSB1bmRlZmluZWQgPyAhIXNwcmVhZGFibGUgOiBpc0FycmF5KE8pO1xufTtcblxudmFyIEZPUkNFRCA9ICFJU19DT05DQVRfU1BSRUFEQUJMRV9TVVBQT1JUIHx8ICFTUEVDSUVTX1NVUFBPUlQ7XG5cbi8vIGBBcnJheS5wcm90b3R5cGUuY29uY2F0YCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLmNvbmNhdFxuLy8gd2l0aCBhZGRpbmcgc3VwcG9ydCBvZiBAQGlzQ29uY2F0U3ByZWFkYWJsZSBhbmQgQEBzcGVjaWVzXG4kKHsgdGFyZ2V0OiAnQXJyYXknLCBwcm90bzogdHJ1ZSwgZm9yY2VkOiBGT1JDRUQgfSwge1xuICBjb25jYXQ6IGZ1bmN0aW9uIGNvbmNhdChhcmcpIHsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtdmFyc1xuICAgIHZhciBPID0gdG9PYmplY3QodGhpcyk7XG4gICAgdmFyIEEgPSBhcnJheVNwZWNpZXNDcmVhdGUoTywgMCk7XG4gICAgdmFyIG4gPSAwO1xuICAgIHZhciBpLCBrLCBsZW5ndGgsIGxlbiwgRTtcbiAgICBmb3IgKGkgPSAtMSwgbGVuZ3RoID0gYXJndW1lbnRzLmxlbmd0aDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICBFID0gaSA9PT0gLTEgPyBPIDogYXJndW1lbnRzW2ldO1xuICAgICAgaWYgKGlzQ29uY2F0U3ByZWFkYWJsZShFKSkge1xuICAgICAgICBsZW4gPSB0b0xlbmd0aChFLmxlbmd0aCk7XG4gICAgICAgIGlmIChuICsgbGVuID4gTUFYX1NBRkVfSU5URUdFUikgdGhyb3cgVHlwZUVycm9yKE1BWElNVU1fQUxMT1dFRF9JTkRFWF9FWENFRURFRCk7XG4gICAgICAgIGZvciAoayA9IDA7IGsgPCBsZW47IGsrKywgbisrKSBpZiAoayBpbiBFKSBjcmVhdGVQcm9wZXJ0eShBLCBuLCBFW2tdKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChuID49IE1BWF9TQUZFX0lOVEVHRVIpIHRocm93IFR5cGVFcnJvcihNQVhJTVVNX0FMTE9XRURfSU5ERVhfRVhDRUVERUQpO1xuICAgICAgICBjcmVhdGVQcm9wZXJ0eShBLCBuKyssIEUpO1xuICAgICAgfVxuICAgIH1cbiAgICBBLmxlbmd0aCA9IG47XG4gICAgcmV0dXJuIEE7XG4gIH1cbn0pO1xuIiwidmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgY29weVdpdGhpbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1jb3B5LXdpdGhpbicpO1xudmFyIGFkZFRvVW5zY29wYWJsZXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYWRkLXRvLXVuc2NvcGFibGVzJyk7XG5cbi8vIGBBcnJheS5wcm90b3R5cGUuY29weVdpdGhpbmAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5jb3B5d2l0aGluXG4kKHsgdGFyZ2V0OiAnQXJyYXknLCBwcm90bzogdHJ1ZSB9LCB7XG4gIGNvcHlXaXRoaW46IGNvcHlXaXRoaW5cbn0pO1xuXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS1AQHVuc2NvcGFibGVzXG5hZGRUb1Vuc2NvcGFibGVzKCdjb3B5V2l0aGluJyk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciAkZXZlcnkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktaXRlcmF0aW9uJykuZXZlcnk7XG52YXIgYXJyYXlNZXRob2RJc1N0cmljdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1tZXRob2QtaXMtc3RyaWN0Jyk7XG52YXIgYXJyYXlNZXRob2RVc2VzVG9MZW5ndGggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktbWV0aG9kLXVzZXMtdG8tbGVuZ3RoJyk7XG5cbnZhciBTVFJJQ1RfTUVUSE9EID0gYXJyYXlNZXRob2RJc1N0cmljdCgnZXZlcnknKTtcbnZhciBVU0VTX1RPX0xFTkdUSCA9IGFycmF5TWV0aG9kVXNlc1RvTGVuZ3RoKCdldmVyeScpO1xuXG4vLyBgQXJyYXkucHJvdG90eXBlLmV2ZXJ5YCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLmV2ZXJ5XG4kKHsgdGFyZ2V0OiAnQXJyYXknLCBwcm90bzogdHJ1ZSwgZm9yY2VkOiAhU1RSSUNUX01FVEhPRCB8fCAhVVNFU19UT19MRU5HVEggfSwge1xuICBldmVyeTogZnVuY3Rpb24gZXZlcnkoY2FsbGJhY2tmbiAvKiAsIHRoaXNBcmcgKi8pIHtcbiAgICByZXR1cm4gJGV2ZXJ5KHRoaXMsIGNhbGxiYWNrZm4sIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbiAgfVxufSk7XG4iLCJ2YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBmaWxsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LWZpbGwnKTtcbnZhciBhZGRUb1Vuc2NvcGFibGVzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FkZC10by11bnNjb3BhYmxlcycpO1xuXG4vLyBgQXJyYXkucHJvdG90eXBlLmZpbGxgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUuZmlsbFxuJCh7IHRhcmdldDogJ0FycmF5JywgcHJvdG86IHRydWUgfSwge1xuICBmaWxsOiBmaWxsXG59KTtcblxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUtQEB1bnNjb3BhYmxlc1xuYWRkVG9VbnNjb3BhYmxlcygnZmlsbCcpO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgJGZpbHRlciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1pdGVyYXRpb24nKS5maWx0ZXI7XG52YXIgYXJyYXlNZXRob2RIYXNTcGVjaWVzU3VwcG9ydCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1tZXRob2QtaGFzLXNwZWNpZXMtc3VwcG9ydCcpO1xudmFyIGFycmF5TWV0aG9kVXNlc1RvTGVuZ3RoID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LW1ldGhvZC11c2VzLXRvLWxlbmd0aCcpO1xuXG52YXIgSEFTX1NQRUNJRVNfU1VQUE9SVCA9IGFycmF5TWV0aG9kSGFzU3BlY2llc1N1cHBvcnQoJ2ZpbHRlcicpO1xuLy8gRWRnZSAxNC0gaXNzdWVcbnZhciBVU0VTX1RPX0xFTkdUSCA9IGFycmF5TWV0aG9kVXNlc1RvTGVuZ3RoKCdmaWx0ZXInKTtcblxuLy8gYEFycmF5LnByb3RvdHlwZS5maWx0ZXJgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUuZmlsdGVyXG4vLyB3aXRoIGFkZGluZyBzdXBwb3J0IG9mIEBAc3BlY2llc1xuJCh7IHRhcmdldDogJ0FycmF5JywgcHJvdG86IHRydWUsIGZvcmNlZDogIUhBU19TUEVDSUVTX1NVUFBPUlQgfHwgIVVTRVNfVE9fTEVOR1RIIH0sIHtcbiAgZmlsdGVyOiBmdW5jdGlvbiBmaWx0ZXIoY2FsbGJhY2tmbiAvKiAsIHRoaXNBcmcgKi8pIHtcbiAgICByZXR1cm4gJGZpbHRlcih0aGlzLCBjYWxsYmFja2ZuLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgJGZpbmRJbmRleCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1pdGVyYXRpb24nKS5maW5kSW5kZXg7XG52YXIgYWRkVG9VbnNjb3BhYmxlcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hZGQtdG8tdW5zY29wYWJsZXMnKTtcbnZhciBhcnJheU1ldGhvZFVzZXNUb0xlbmd0aCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1tZXRob2QtdXNlcy10by1sZW5ndGgnKTtcblxudmFyIEZJTkRfSU5ERVggPSAnZmluZEluZGV4JztcbnZhciBTS0lQU19IT0xFUyA9IHRydWU7XG5cbnZhciBVU0VTX1RPX0xFTkdUSCA9IGFycmF5TWV0aG9kVXNlc1RvTGVuZ3RoKEZJTkRfSU5ERVgpO1xuXG4vLyBTaG91bGRuJ3Qgc2tpcCBob2xlc1xuaWYgKEZJTkRfSU5ERVggaW4gW10pIEFycmF5KDEpW0ZJTkRfSU5ERVhdKGZ1bmN0aW9uICgpIHsgU0tJUFNfSE9MRVMgPSBmYWxzZTsgfSk7XG5cbi8vIGBBcnJheS5wcm90b3R5cGUuZmluZEluZGV4YCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLmZpbmRpbmRleFxuJCh7IHRhcmdldDogJ0FycmF5JywgcHJvdG86IHRydWUsIGZvcmNlZDogU0tJUFNfSE9MRVMgfHwgIVVTRVNfVE9fTEVOR1RIIH0sIHtcbiAgZmluZEluZGV4OiBmdW5jdGlvbiBmaW5kSW5kZXgoY2FsbGJhY2tmbiAvKiAsIHRoYXQgPSB1bmRlZmluZWQgKi8pIHtcbiAgICByZXR1cm4gJGZpbmRJbmRleCh0aGlzLCBjYWxsYmFja2ZuLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4gIH1cbn0pO1xuXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS1AQHVuc2NvcGFibGVzXG5hZGRUb1Vuc2NvcGFibGVzKEZJTkRfSU5ERVgpO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgJGZpbmQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktaXRlcmF0aW9uJykuZmluZDtcbnZhciBhZGRUb1Vuc2NvcGFibGVzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FkZC10by11bnNjb3BhYmxlcycpO1xudmFyIGFycmF5TWV0aG9kVXNlc1RvTGVuZ3RoID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LW1ldGhvZC11c2VzLXRvLWxlbmd0aCcpO1xuXG52YXIgRklORCA9ICdmaW5kJztcbnZhciBTS0lQU19IT0xFUyA9IHRydWU7XG5cbnZhciBVU0VTX1RPX0xFTkdUSCA9IGFycmF5TWV0aG9kVXNlc1RvTGVuZ3RoKEZJTkQpO1xuXG4vLyBTaG91bGRuJ3Qgc2tpcCBob2xlc1xuaWYgKEZJTkQgaW4gW10pIEFycmF5KDEpW0ZJTkRdKGZ1bmN0aW9uICgpIHsgU0tJUFNfSE9MRVMgPSBmYWxzZTsgfSk7XG5cbi8vIGBBcnJheS5wcm90b3R5cGUuZmluZGAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5maW5kXG4kKHsgdGFyZ2V0OiAnQXJyYXknLCBwcm90bzogdHJ1ZSwgZm9yY2VkOiBTS0lQU19IT0xFUyB8fCAhVVNFU19UT19MRU5HVEggfSwge1xuICBmaW5kOiBmdW5jdGlvbiBmaW5kKGNhbGxiYWNrZm4gLyogLCB0aGF0ID0gdW5kZWZpbmVkICovKSB7XG4gICAgcmV0dXJuICRmaW5kKHRoaXMsIGNhbGxiYWNrZm4sIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbiAgfVxufSk7XG5cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLUBAdW5zY29wYWJsZXNcbmFkZFRvVW5zY29wYWJsZXMoRklORCk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBmbGF0dGVuSW50b0FycmF5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZsYXR0ZW4taW50by1hcnJheScpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLW9iamVjdCcpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWxlbmd0aCcpO1xudmFyIGFGdW5jdGlvbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hLWZ1bmN0aW9uJyk7XG52YXIgYXJyYXlTcGVjaWVzQ3JlYXRlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LXNwZWNpZXMtY3JlYXRlJyk7XG5cbi8vIGBBcnJheS5wcm90b3R5cGUuZmxhdE1hcGAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5mbGF0bWFwXG4kKHsgdGFyZ2V0OiAnQXJyYXknLCBwcm90bzogdHJ1ZSB9LCB7XG4gIGZsYXRNYXA6IGZ1bmN0aW9uIGZsYXRNYXAoY2FsbGJhY2tmbiAvKiAsIHRoaXNBcmcgKi8pIHtcbiAgICB2YXIgTyA9IHRvT2JqZWN0KHRoaXMpO1xuICAgIHZhciBzb3VyY2VMZW4gPSB0b0xlbmd0aChPLmxlbmd0aCk7XG4gICAgdmFyIEE7XG4gICAgYUZ1bmN0aW9uKGNhbGxiYWNrZm4pO1xuICAgIEEgPSBhcnJheVNwZWNpZXNDcmVhdGUoTywgMCk7XG4gICAgQS5sZW5ndGggPSBmbGF0dGVuSW50b0FycmF5KEEsIE8sIE8sIHNvdXJjZUxlbiwgMCwgMSwgY2FsbGJhY2tmbiwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xuICAgIHJldHVybiBBO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGZsYXR0ZW5JbnRvQXJyYXkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmxhdHRlbi1pbnRvLWFycmF5Jyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tb2JqZWN0Jyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tbGVuZ3RoJyk7XG52YXIgdG9JbnRlZ2VyID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWludGVnZXInKTtcbnZhciBhcnJheVNwZWNpZXNDcmVhdGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktc3BlY2llcy1jcmVhdGUnKTtcblxuLy8gYEFycmF5LnByb3RvdHlwZS5mbGF0YCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLmZsYXRcbiQoeyB0YXJnZXQ6ICdBcnJheScsIHByb3RvOiB0cnVlIH0sIHtcbiAgZmxhdDogZnVuY3Rpb24gZmxhdCgvKiBkZXB0aEFyZyA9IDEgKi8pIHtcbiAgICB2YXIgZGVwdGhBcmcgPSBhcmd1bWVudHMubGVuZ3RoID8gYXJndW1lbnRzWzBdIDogdW5kZWZpbmVkO1xuICAgIHZhciBPID0gdG9PYmplY3QodGhpcyk7XG4gICAgdmFyIHNvdXJjZUxlbiA9IHRvTGVuZ3RoKE8ubGVuZ3RoKTtcbiAgICB2YXIgQSA9IGFycmF5U3BlY2llc0NyZWF0ZShPLCAwKTtcbiAgICBBLmxlbmd0aCA9IGZsYXR0ZW5JbnRvQXJyYXkoQSwgTywgTywgc291cmNlTGVuLCAwLCBkZXB0aEFyZyA9PT0gdW5kZWZpbmVkID8gMSA6IHRvSW50ZWdlcihkZXB0aEFyZykpO1xuICAgIHJldHVybiBBO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGZvckVhY2ggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktZm9yLWVhY2gnKTtcblxuLy8gYEFycmF5LnByb3RvdHlwZS5mb3JFYWNoYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLmZvcmVhY2hcbiQoeyB0YXJnZXQ6ICdBcnJheScsIHByb3RvOiB0cnVlLCBmb3JjZWQ6IFtdLmZvckVhY2ggIT0gZm9yRWFjaCB9LCB7XG4gIGZvckVhY2g6IGZvckVhY2hcbn0pO1xuIiwidmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgZnJvbSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1mcm9tJyk7XG52YXIgY2hlY2tDb3JyZWN0bmVzc09mSXRlcmF0aW9uID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NoZWNrLWNvcnJlY3RuZXNzLW9mLWl0ZXJhdGlvbicpO1xuXG52YXIgSU5DT1JSRUNUX0lURVJBVElPTiA9ICFjaGVja0NvcnJlY3RuZXNzT2ZJdGVyYXRpb24oZnVuY3Rpb24gKGl0ZXJhYmxlKSB7XG4gIEFycmF5LmZyb20oaXRlcmFibGUpO1xufSk7XG5cbi8vIGBBcnJheS5mcm9tYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkuZnJvbVxuJCh7IHRhcmdldDogJ0FycmF5Jywgc3RhdDogdHJ1ZSwgZm9yY2VkOiBJTkNPUlJFQ1RfSVRFUkFUSU9OIH0sIHtcbiAgZnJvbTogZnJvbVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciAkaW5jbHVkZXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktaW5jbHVkZXMnKS5pbmNsdWRlcztcbnZhciBhZGRUb1Vuc2NvcGFibGVzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FkZC10by11bnNjb3BhYmxlcycpO1xudmFyIGFycmF5TWV0aG9kVXNlc1RvTGVuZ3RoID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LW1ldGhvZC11c2VzLXRvLWxlbmd0aCcpO1xuXG52YXIgVVNFU19UT19MRU5HVEggPSBhcnJheU1ldGhvZFVzZXNUb0xlbmd0aCgnaW5kZXhPZicsIHsgQUNDRVNTT1JTOiB0cnVlLCAxOiAwIH0pO1xuXG4vLyBgQXJyYXkucHJvdG90eXBlLmluY2x1ZGVzYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLmluY2x1ZGVzXG4kKHsgdGFyZ2V0OiAnQXJyYXknLCBwcm90bzogdHJ1ZSwgZm9yY2VkOiAhVVNFU19UT19MRU5HVEggfSwge1xuICBpbmNsdWRlczogZnVuY3Rpb24gaW5jbHVkZXMoZWwgLyogLCBmcm9tSW5kZXggPSAwICovKSB7XG4gICAgcmV0dXJuICRpbmNsdWRlcyh0aGlzLCBlbCwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xuICB9XG59KTtcblxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUtQEB1bnNjb3BhYmxlc1xuYWRkVG9VbnNjb3BhYmxlcygnaW5jbHVkZXMnKTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyICRpbmRleE9mID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LWluY2x1ZGVzJykuaW5kZXhPZjtcbnZhciBhcnJheU1ldGhvZElzU3RyaWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LW1ldGhvZC1pcy1zdHJpY3QnKTtcbnZhciBhcnJheU1ldGhvZFVzZXNUb0xlbmd0aCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1tZXRob2QtdXNlcy10by1sZW5ndGgnKTtcblxudmFyIG5hdGl2ZUluZGV4T2YgPSBbXS5pbmRleE9mO1xuXG52YXIgTkVHQVRJVkVfWkVSTyA9ICEhbmF0aXZlSW5kZXhPZiAmJiAxIC8gWzFdLmluZGV4T2YoMSwgLTApIDwgMDtcbnZhciBTVFJJQ1RfTUVUSE9EID0gYXJyYXlNZXRob2RJc1N0cmljdCgnaW5kZXhPZicpO1xudmFyIFVTRVNfVE9fTEVOR1RIID0gYXJyYXlNZXRob2RVc2VzVG9MZW5ndGgoJ2luZGV4T2YnLCB7IEFDQ0VTU09SUzogdHJ1ZSwgMTogMCB9KTtcblxuLy8gYEFycmF5LnByb3RvdHlwZS5pbmRleE9mYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLmluZGV4b2ZcbiQoeyB0YXJnZXQ6ICdBcnJheScsIHByb3RvOiB0cnVlLCBmb3JjZWQ6IE5FR0FUSVZFX1pFUk8gfHwgIVNUUklDVF9NRVRIT0QgfHwgIVVTRVNfVE9fTEVOR1RIIH0sIHtcbiAgaW5kZXhPZjogZnVuY3Rpb24gaW5kZXhPZihzZWFyY2hFbGVtZW50IC8qICwgZnJvbUluZGV4ID0gMCAqLykge1xuICAgIHJldHVybiBORUdBVElWRV9aRVJPXG4gICAgICAvLyBjb252ZXJ0IC0wIHRvICswXG4gICAgICA/IG5hdGl2ZUluZGV4T2YuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCAwXG4gICAgICA6ICRpbmRleE9mKHRoaXMsIHNlYXJjaEVsZW1lbnQsIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbiAgfVxufSk7XG4iLCJ2YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBpc0FycmF5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLWFycmF5Jyk7XG5cbi8vIGBBcnJheS5pc0FycmF5YCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkuaXNhcnJheVxuJCh7IHRhcmdldDogJ0FycmF5Jywgc3RhdDogdHJ1ZSB9LCB7XG4gIGlzQXJyYXk6IGlzQXJyYXlcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIHRvSW5kZXhlZE9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1pbmRleGVkLW9iamVjdCcpO1xudmFyIGFkZFRvVW5zY29wYWJsZXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYWRkLXRvLXVuc2NvcGFibGVzJyk7XG52YXIgSXRlcmF0b3JzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2l0ZXJhdG9ycycpO1xudmFyIEludGVybmFsU3RhdGVNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaW50ZXJuYWwtc3RhdGUnKTtcbnZhciBkZWZpbmVJdGVyYXRvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZWZpbmUtaXRlcmF0b3InKTtcblxudmFyIEFSUkFZX0lURVJBVE9SID0gJ0FycmF5IEl0ZXJhdG9yJztcbnZhciBzZXRJbnRlcm5hbFN0YXRlID0gSW50ZXJuYWxTdGF0ZU1vZHVsZS5zZXQ7XG52YXIgZ2V0SW50ZXJuYWxTdGF0ZSA9IEludGVybmFsU3RhdGVNb2R1bGUuZ2V0dGVyRm9yKEFSUkFZX0lURVJBVE9SKTtcblxuLy8gYEFycmF5LnByb3RvdHlwZS5lbnRyaWVzYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLmVudHJpZXNcbi8vIGBBcnJheS5wcm90b3R5cGUua2V5c2AgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5rZXlzXG4vLyBgQXJyYXkucHJvdG90eXBlLnZhbHVlc2AgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS52YWx1ZXNcbi8vIGBBcnJheS5wcm90b3R5cGVbQEBpdGVyYXRvcl1gIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUtQEBpdGVyYXRvclxuLy8gYENyZWF0ZUFycmF5SXRlcmF0b3JgIGludGVybmFsIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1jcmVhdGVhcnJheWl0ZXJhdG9yXG5tb2R1bGUuZXhwb3J0cyA9IGRlZmluZUl0ZXJhdG9yKEFycmF5LCAnQXJyYXknLCBmdW5jdGlvbiAoaXRlcmF0ZWQsIGtpbmQpIHtcbiAgc2V0SW50ZXJuYWxTdGF0ZSh0aGlzLCB7XG4gICAgdHlwZTogQVJSQVlfSVRFUkFUT1IsXG4gICAgdGFyZ2V0OiB0b0luZGV4ZWRPYmplY3QoaXRlcmF0ZWQpLCAvLyB0YXJnZXRcbiAgICBpbmRleDogMCwgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIG5leHQgaW5kZXhcbiAgICBraW5kOiBraW5kICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGtpbmRcbiAgfSk7XG4vLyBgJUFycmF5SXRlcmF0b3JQcm90b3R5cGUlLm5leHRgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy0lYXJyYXlpdGVyYXRvcnByb3RvdHlwZSUubmV4dFxufSwgZnVuY3Rpb24gKCkge1xuICB2YXIgc3RhdGUgPSBnZXRJbnRlcm5hbFN0YXRlKHRoaXMpO1xuICB2YXIgdGFyZ2V0ID0gc3RhdGUudGFyZ2V0O1xuICB2YXIga2luZCA9IHN0YXRlLmtpbmQ7XG4gIHZhciBpbmRleCA9IHN0YXRlLmluZGV4Kys7XG4gIGlmICghdGFyZ2V0IHx8IGluZGV4ID49IHRhcmdldC5sZW5ndGgpIHtcbiAgICBzdGF0ZS50YXJnZXQgPSB1bmRlZmluZWQ7XG4gICAgcmV0dXJuIHsgdmFsdWU6IHVuZGVmaW5lZCwgZG9uZTogdHJ1ZSB9O1xuICB9XG4gIGlmIChraW5kID09ICdrZXlzJykgcmV0dXJuIHsgdmFsdWU6IGluZGV4LCBkb25lOiBmYWxzZSB9O1xuICBpZiAoa2luZCA9PSAndmFsdWVzJykgcmV0dXJuIHsgdmFsdWU6IHRhcmdldFtpbmRleF0sIGRvbmU6IGZhbHNlIH07XG4gIHJldHVybiB7IHZhbHVlOiBbaW5kZXgsIHRhcmdldFtpbmRleF1dLCBkb25lOiBmYWxzZSB9O1xufSwgJ3ZhbHVlcycpO1xuXG4vLyBhcmd1bWVudHNMaXN0W0BAaXRlcmF0b3JdIGlzICVBcnJheVByb3RvX3ZhbHVlcyVcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtY3JlYXRldW5tYXBwZWRhcmd1bWVudHNvYmplY3Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtY3JlYXRlbWFwcGVkYXJndW1lbnRzb2JqZWN0XG5JdGVyYXRvcnMuQXJndW1lbnRzID0gSXRlcmF0b3JzLkFycmF5O1xuXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS1AQHVuc2NvcGFibGVzXG5hZGRUb1Vuc2NvcGFibGVzKCdrZXlzJyk7XG5hZGRUb1Vuc2NvcGFibGVzKCd2YWx1ZXMnKTtcbmFkZFRvVW5zY29wYWJsZXMoJ2VudHJpZXMnKTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIEluZGV4ZWRPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaW5kZXhlZC1vYmplY3QnKTtcbnZhciB0b0luZGV4ZWRPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8taW5kZXhlZC1vYmplY3QnKTtcbnZhciBhcnJheU1ldGhvZElzU3RyaWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LW1ldGhvZC1pcy1zdHJpY3QnKTtcblxudmFyIG5hdGl2ZUpvaW4gPSBbXS5qb2luO1xuXG52YXIgRVMzX1NUUklOR1MgPSBJbmRleGVkT2JqZWN0ICE9IE9iamVjdDtcbnZhciBTVFJJQ1RfTUVUSE9EID0gYXJyYXlNZXRob2RJc1N0cmljdCgnam9pbicsICcsJyk7XG5cbi8vIGBBcnJheS5wcm90b3R5cGUuam9pbmAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5qb2luXG4kKHsgdGFyZ2V0OiAnQXJyYXknLCBwcm90bzogdHJ1ZSwgZm9yY2VkOiBFUzNfU1RSSU5HUyB8fCAhU1RSSUNUX01FVEhPRCB9LCB7XG4gIGpvaW46IGZ1bmN0aW9uIGpvaW4oc2VwYXJhdG9yKSB7XG4gICAgcmV0dXJuIG5hdGl2ZUpvaW4uY2FsbCh0b0luZGV4ZWRPYmplY3QodGhpcyksIHNlcGFyYXRvciA9PT0gdW5kZWZpbmVkID8gJywnIDogc2VwYXJhdG9yKTtcbiAgfVxufSk7XG4iLCJ2YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBsYXN0SW5kZXhPZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1sYXN0LWluZGV4LW9mJyk7XG5cbi8vIGBBcnJheS5wcm90b3R5cGUubGFzdEluZGV4T2ZgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUubGFzdGluZGV4b2ZcbiQoeyB0YXJnZXQ6ICdBcnJheScsIHByb3RvOiB0cnVlLCBmb3JjZWQ6IGxhc3RJbmRleE9mICE9PSBbXS5sYXN0SW5kZXhPZiB9LCB7XG4gIGxhc3RJbmRleE9mOiBsYXN0SW5kZXhPZlxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciAkbWFwID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LWl0ZXJhdGlvbicpLm1hcDtcbnZhciBhcnJheU1ldGhvZEhhc1NwZWNpZXNTdXBwb3J0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LW1ldGhvZC1oYXMtc3BlY2llcy1zdXBwb3J0Jyk7XG52YXIgYXJyYXlNZXRob2RVc2VzVG9MZW5ndGggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktbWV0aG9kLXVzZXMtdG8tbGVuZ3RoJyk7XG5cbnZhciBIQVNfU1BFQ0lFU19TVVBQT1JUID0gYXJyYXlNZXRob2RIYXNTcGVjaWVzU3VwcG9ydCgnbWFwJyk7XG4vLyBGRjQ5LSBpc3N1ZVxudmFyIFVTRVNfVE9fTEVOR1RIID0gYXJyYXlNZXRob2RVc2VzVG9MZW5ndGgoJ21hcCcpO1xuXG4vLyBgQXJyYXkucHJvdG90eXBlLm1hcGAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5tYXBcbi8vIHdpdGggYWRkaW5nIHN1cHBvcnQgb2YgQEBzcGVjaWVzXG4kKHsgdGFyZ2V0OiAnQXJyYXknLCBwcm90bzogdHJ1ZSwgZm9yY2VkOiAhSEFTX1NQRUNJRVNfU1VQUE9SVCB8fCAhVVNFU19UT19MRU5HVEggfSwge1xuICBtYXA6IGZ1bmN0aW9uIG1hcChjYWxsYmFja2ZuIC8qICwgdGhpc0FyZyAqLykge1xuICAgIHJldHVybiAkbWFwKHRoaXMsIGNhbGxiYWNrZm4sIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xudmFyIGNyZWF0ZVByb3BlcnR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1wcm9wZXJ0eScpO1xuXG52YXIgSVNOVF9HRU5FUklDID0gZmFpbHMoZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBGKCkgeyAvKiBlbXB0eSAqLyB9XG4gIHJldHVybiAhKEFycmF5Lm9mLmNhbGwoRikgaW5zdGFuY2VvZiBGKTtcbn0pO1xuXG4vLyBgQXJyYXkub2ZgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheS5vZlxuLy8gV2ViS2l0IEFycmF5Lm9mIGlzbid0IGdlbmVyaWNcbiQoeyB0YXJnZXQ6ICdBcnJheScsIHN0YXQ6IHRydWUsIGZvcmNlZDogSVNOVF9HRU5FUklDIH0sIHtcbiAgb2Y6IGZ1bmN0aW9uIG9mKC8qIC4uLmFyZ3MgKi8pIHtcbiAgICB2YXIgaW5kZXggPSAwO1xuICAgIHZhciBhcmd1bWVudHNMZW5ndGggPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgIHZhciByZXN1bHQgPSBuZXcgKHR5cGVvZiB0aGlzID09ICdmdW5jdGlvbicgPyB0aGlzIDogQXJyYXkpKGFyZ3VtZW50c0xlbmd0aCk7XG4gICAgd2hpbGUgKGFyZ3VtZW50c0xlbmd0aCA+IGluZGV4KSBjcmVhdGVQcm9wZXJ0eShyZXN1bHQsIGluZGV4LCBhcmd1bWVudHNbaW5kZXgrK10pO1xuICAgIHJlc3VsdC5sZW5ndGggPSBhcmd1bWVudHNMZW5ndGg7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciAkcmVkdWNlUmlnaHQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktcmVkdWNlJykucmlnaHQ7XG52YXIgYXJyYXlNZXRob2RJc1N0cmljdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1tZXRob2QtaXMtc3RyaWN0Jyk7XG52YXIgYXJyYXlNZXRob2RVc2VzVG9MZW5ndGggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktbWV0aG9kLXVzZXMtdG8tbGVuZ3RoJyk7XG52YXIgQ0hST01FX1ZFUlNJT04gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZW5naW5lLXY4LXZlcnNpb24nKTtcbnZhciBJU19OT0RFID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2VuZ2luZS1pcy1ub2RlJyk7XG5cbnZhciBTVFJJQ1RfTUVUSE9EID0gYXJyYXlNZXRob2RJc1N0cmljdCgncmVkdWNlUmlnaHQnKTtcbi8vIEZvciBwcmV2ZW50aW5nIHBvc3NpYmxlIGFsbW9zdCBpbmZpbml0ZSBsb29wIGluIG5vbi1zdGFuZGFyZCBpbXBsZW1lbnRhdGlvbnMsIHRlc3QgdGhlIGZvcndhcmQgdmVyc2lvbiBvZiB0aGUgbWV0aG9kXG52YXIgVVNFU19UT19MRU5HVEggPSBhcnJheU1ldGhvZFVzZXNUb0xlbmd0aCgncmVkdWNlJywgeyAxOiAwIH0pO1xuLy8gQ2hyb21lIDgwLTgyIGhhcyBhIGNyaXRpY2FsIGJ1Z1xuLy8gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL2Nocm9taXVtL2lzc3Vlcy9kZXRhaWw/aWQ9MTA0OTk4MlxudmFyIENIUk9NRV9CVUcgPSAhSVNfTk9ERSAmJiBDSFJPTUVfVkVSU0lPTiA+IDc5ICYmIENIUk9NRV9WRVJTSU9OIDwgODM7XG5cbi8vIGBBcnJheS5wcm90b3R5cGUucmVkdWNlUmlnaHRgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUucmVkdWNlcmlnaHRcbiQoeyB0YXJnZXQ6ICdBcnJheScsIHByb3RvOiB0cnVlLCBmb3JjZWQ6ICFTVFJJQ1RfTUVUSE9EIHx8ICFVU0VTX1RPX0xFTkdUSCB8fCBDSFJPTUVfQlVHIH0sIHtcbiAgcmVkdWNlUmlnaHQ6IGZ1bmN0aW9uIHJlZHVjZVJpZ2h0KGNhbGxiYWNrZm4gLyogLCBpbml0aWFsVmFsdWUgKi8pIHtcbiAgICByZXR1cm4gJHJlZHVjZVJpZ2h0KHRoaXMsIGNhbGxiYWNrZm4sIGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciAkcmVkdWNlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LXJlZHVjZScpLmxlZnQ7XG52YXIgYXJyYXlNZXRob2RJc1N0cmljdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1tZXRob2QtaXMtc3RyaWN0Jyk7XG52YXIgYXJyYXlNZXRob2RVc2VzVG9MZW5ndGggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktbWV0aG9kLXVzZXMtdG8tbGVuZ3RoJyk7XG52YXIgQ0hST01FX1ZFUlNJT04gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZW5naW5lLXY4LXZlcnNpb24nKTtcbnZhciBJU19OT0RFID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2VuZ2luZS1pcy1ub2RlJyk7XG5cbnZhciBTVFJJQ1RfTUVUSE9EID0gYXJyYXlNZXRob2RJc1N0cmljdCgncmVkdWNlJyk7XG52YXIgVVNFU19UT19MRU5HVEggPSBhcnJheU1ldGhvZFVzZXNUb0xlbmd0aCgncmVkdWNlJywgeyAxOiAwIH0pO1xuLy8gQ2hyb21lIDgwLTgyIGhhcyBhIGNyaXRpY2FsIGJ1Z1xuLy8gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL2Nocm9taXVtL2lzc3Vlcy9kZXRhaWw/aWQ9MTA0OTk4MlxudmFyIENIUk9NRV9CVUcgPSAhSVNfTk9ERSAmJiBDSFJPTUVfVkVSU0lPTiA+IDc5ICYmIENIUk9NRV9WRVJTSU9OIDwgODM7XG5cbi8vIGBBcnJheS5wcm90b3R5cGUucmVkdWNlYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLnJlZHVjZVxuJCh7IHRhcmdldDogJ0FycmF5JywgcHJvdG86IHRydWUsIGZvcmNlZDogIVNUUklDVF9NRVRIT0QgfHwgIVVTRVNfVE9fTEVOR1RIIHx8IENIUk9NRV9CVUcgfSwge1xuICByZWR1Y2U6IGZ1bmN0aW9uIHJlZHVjZShjYWxsYmFja2ZuIC8qICwgaW5pdGlhbFZhbHVlICovKSB7XG4gICAgcmV0dXJuICRyZWR1Y2UodGhpcywgY2FsbGJhY2tmbiwgYXJndW1lbnRzLmxlbmd0aCwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGlzQXJyYXkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtYXJyYXknKTtcblxudmFyIG5hdGl2ZVJldmVyc2UgPSBbXS5yZXZlcnNlO1xudmFyIHRlc3QgPSBbMSwgMl07XG5cbi8vIGBBcnJheS5wcm90b3R5cGUucmV2ZXJzZWAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5yZXZlcnNlXG4vLyBmaXggZm9yIFNhZmFyaSAxMi4wIGJ1Z1xuLy8gaHR0cHM6Ly9idWdzLndlYmtpdC5vcmcvc2hvd19idWcuY2dpP2lkPTE4ODc5NFxuJCh7IHRhcmdldDogJ0FycmF5JywgcHJvdG86IHRydWUsIGZvcmNlZDogU3RyaW5nKHRlc3QpID09PSBTdHJpbmcodGVzdC5yZXZlcnNlKCkpIH0sIHtcbiAgcmV2ZXJzZTogZnVuY3Rpb24gcmV2ZXJzZSgpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1hc3NpZ25cbiAgICBpZiAoaXNBcnJheSh0aGlzKSkgdGhpcy5sZW5ndGggPSB0aGlzLmxlbmd0aDtcbiAgICByZXR1cm4gbmF0aXZlUmV2ZXJzZS5jYWxsKHRoaXMpO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLW9iamVjdCcpO1xudmFyIGlzQXJyYXkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtYXJyYXknKTtcbnZhciB0b0Fic29sdXRlSW5kZXggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tYWJzb2x1dGUtaW5kZXgnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1sZW5ndGgnKTtcbnZhciB0b0luZGV4ZWRPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8taW5kZXhlZC1vYmplY3QnKTtcbnZhciBjcmVhdGVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtcHJvcGVydHknKTtcbnZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcbnZhciBhcnJheU1ldGhvZEhhc1NwZWNpZXNTdXBwb3J0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LW1ldGhvZC1oYXMtc3BlY2llcy1zdXBwb3J0Jyk7XG52YXIgYXJyYXlNZXRob2RVc2VzVG9MZW5ndGggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktbWV0aG9kLXVzZXMtdG8tbGVuZ3RoJyk7XG5cbnZhciBIQVNfU1BFQ0lFU19TVVBQT1JUID0gYXJyYXlNZXRob2RIYXNTcGVjaWVzU3VwcG9ydCgnc2xpY2UnKTtcbnZhciBVU0VTX1RPX0xFTkdUSCA9IGFycmF5TWV0aG9kVXNlc1RvTGVuZ3RoKCdzbGljZScsIHsgQUNDRVNTT1JTOiB0cnVlLCAwOiAwLCAxOiAyIH0pO1xuXG52YXIgU1BFQ0lFUyA9IHdlbGxLbm93blN5bWJvbCgnc3BlY2llcycpO1xudmFyIG5hdGl2ZVNsaWNlID0gW10uc2xpY2U7XG52YXIgbWF4ID0gTWF0aC5tYXg7XG5cbi8vIGBBcnJheS5wcm90b3R5cGUuc2xpY2VgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUuc2xpY2Vcbi8vIGZhbGxiYWNrIGZvciBub3QgYXJyYXktbGlrZSBFUzMgc3RyaW5ncyBhbmQgRE9NIG9iamVjdHNcbiQoeyB0YXJnZXQ6ICdBcnJheScsIHByb3RvOiB0cnVlLCBmb3JjZWQ6ICFIQVNfU1BFQ0lFU19TVVBQT1JUIHx8ICFVU0VTX1RPX0xFTkdUSCB9LCB7XG4gIHNsaWNlOiBmdW5jdGlvbiBzbGljZShzdGFydCwgZW5kKSB7XG4gICAgdmFyIE8gPSB0b0luZGV4ZWRPYmplY3QodGhpcyk7XG4gICAgdmFyIGxlbmd0aCA9IHRvTGVuZ3RoKE8ubGVuZ3RoKTtcbiAgICB2YXIgayA9IHRvQWJzb2x1dGVJbmRleChzdGFydCwgbGVuZ3RoKTtcbiAgICB2YXIgZmluID0gdG9BYnNvbHV0ZUluZGV4KGVuZCA9PT0gdW5kZWZpbmVkID8gbGVuZ3RoIDogZW5kLCBsZW5ndGgpO1xuICAgIC8vIGlubGluZSBgQXJyYXlTcGVjaWVzQ3JlYXRlYCBmb3IgdXNhZ2UgbmF0aXZlIGBBcnJheSNzbGljZWAgd2hlcmUgaXQncyBwb3NzaWJsZVxuICAgIHZhciBDb25zdHJ1Y3RvciwgcmVzdWx0LCBuO1xuICAgIGlmIChpc0FycmF5KE8pKSB7XG4gICAgICBDb25zdHJ1Y3RvciA9IE8uY29uc3RydWN0b3I7XG4gICAgICAvLyBjcm9zcy1yZWFsbSBmYWxsYmFja1xuICAgICAgaWYgKHR5cGVvZiBDb25zdHJ1Y3RvciA9PSAnZnVuY3Rpb24nICYmIChDb25zdHJ1Y3RvciA9PT0gQXJyYXkgfHwgaXNBcnJheShDb25zdHJ1Y3Rvci5wcm90b3R5cGUpKSkge1xuICAgICAgICBDb25zdHJ1Y3RvciA9IHVuZGVmaW5lZDtcbiAgICAgIH0gZWxzZSBpZiAoaXNPYmplY3QoQ29uc3RydWN0b3IpKSB7XG4gICAgICAgIENvbnN0cnVjdG9yID0gQ29uc3RydWN0b3JbU1BFQ0lFU107XG4gICAgICAgIGlmIChDb25zdHJ1Y3RvciA9PT0gbnVsbCkgQ29uc3RydWN0b3IgPSB1bmRlZmluZWQ7XG4gICAgICB9XG4gICAgICBpZiAoQ29uc3RydWN0b3IgPT09IEFycmF5IHx8IENvbnN0cnVjdG9yID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmV0dXJuIG5hdGl2ZVNsaWNlLmNhbGwoTywgaywgZmluKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmVzdWx0ID0gbmV3IChDb25zdHJ1Y3RvciA9PT0gdW5kZWZpbmVkID8gQXJyYXkgOiBDb25zdHJ1Y3RvcikobWF4KGZpbiAtIGssIDApKTtcbiAgICBmb3IgKG4gPSAwOyBrIDwgZmluOyBrKyssIG4rKykgaWYgKGsgaW4gTykgY3JlYXRlUHJvcGVydHkocmVzdWx0LCBuLCBPW2tdKTtcbiAgICByZXN1bHQubGVuZ3RoID0gbjtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyICRzb21lID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LWl0ZXJhdGlvbicpLnNvbWU7XG52YXIgYXJyYXlNZXRob2RJc1N0cmljdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1tZXRob2QtaXMtc3RyaWN0Jyk7XG52YXIgYXJyYXlNZXRob2RVc2VzVG9MZW5ndGggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktbWV0aG9kLXVzZXMtdG8tbGVuZ3RoJyk7XG5cbnZhciBTVFJJQ1RfTUVUSE9EID0gYXJyYXlNZXRob2RJc1N0cmljdCgnc29tZScpO1xudmFyIFVTRVNfVE9fTEVOR1RIID0gYXJyYXlNZXRob2RVc2VzVG9MZW5ndGgoJ3NvbWUnKTtcblxuLy8gYEFycmF5LnByb3RvdHlwZS5zb21lYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLnNvbWVcbiQoeyB0YXJnZXQ6ICdBcnJheScsIHByb3RvOiB0cnVlLCBmb3JjZWQ6ICFTVFJJQ1RfTUVUSE9EIHx8ICFVU0VTX1RPX0xFTkdUSCB9LCB7XG4gIHNvbWU6IGZ1bmN0aW9uIHNvbWUoY2FsbGJhY2tmbiAvKiAsIHRoaXNBcmcgKi8pIHtcbiAgICByZXR1cm4gJHNvbWUodGhpcywgY2FsbGJhY2tmbiwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGFGdW5jdGlvbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hLWZ1bmN0aW9uJyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tb2JqZWN0Jyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcbnZhciBhcnJheU1ldGhvZElzU3RyaWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LW1ldGhvZC1pcy1zdHJpY3QnKTtcblxudmFyIHRlc3QgPSBbXTtcbnZhciBuYXRpdmVTb3J0ID0gdGVzdC5zb3J0O1xuXG4vLyBJRTgtXG52YXIgRkFJTFNfT05fVU5ERUZJTkVEID0gZmFpbHMoZnVuY3Rpb24gKCkge1xuICB0ZXN0LnNvcnQodW5kZWZpbmVkKTtcbn0pO1xuLy8gVjggYnVnXG52YXIgRkFJTFNfT05fTlVMTCA9IGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgdGVzdC5zb3J0KG51bGwpO1xufSk7XG4vLyBPbGQgV2ViS2l0XG52YXIgU1RSSUNUX01FVEhPRCA9IGFycmF5TWV0aG9kSXNTdHJpY3QoJ3NvcnQnKTtcblxudmFyIEZPUkNFRCA9IEZBSUxTX09OX1VOREVGSU5FRCB8fCAhRkFJTFNfT05fTlVMTCB8fCAhU1RSSUNUX01FVEhPRDtcblxuLy8gYEFycmF5LnByb3RvdHlwZS5zb3J0YCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLnNvcnRcbiQoeyB0YXJnZXQ6ICdBcnJheScsIHByb3RvOiB0cnVlLCBmb3JjZWQ6IEZPUkNFRCB9LCB7XG4gIHNvcnQ6IGZ1bmN0aW9uIHNvcnQoY29tcGFyZWZuKSB7XG4gICAgcmV0dXJuIGNvbXBhcmVmbiA9PT0gdW5kZWZpbmVkXG4gICAgICA/IG5hdGl2ZVNvcnQuY2FsbCh0b09iamVjdCh0aGlzKSlcbiAgICAgIDogbmF0aXZlU29ydC5jYWxsKHRvT2JqZWN0KHRoaXMpLCBhRnVuY3Rpb24oY29tcGFyZWZuKSk7XG4gIH1cbn0pO1xuIiwidmFyIHNldFNwZWNpZXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2V0LXNwZWNpZXMnKTtcblxuLy8gYEFycmF5W0BAc3BlY2llc11gIGdldHRlclxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1nZXQtYXJyYXktQEBzcGVjaWVzXG5zZXRTcGVjaWVzKCdBcnJheScpO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgdG9BYnNvbHV0ZUluZGV4ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWFic29sdXRlLWluZGV4Jyk7XG52YXIgdG9JbnRlZ2VyID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWludGVnZXInKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1sZW5ndGgnKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1vYmplY3QnKTtcbnZhciBhcnJheVNwZWNpZXNDcmVhdGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktc3BlY2llcy1jcmVhdGUnKTtcbnZhciBjcmVhdGVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtcHJvcGVydHknKTtcbnZhciBhcnJheU1ldGhvZEhhc1NwZWNpZXNTdXBwb3J0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LW1ldGhvZC1oYXMtc3BlY2llcy1zdXBwb3J0Jyk7XG52YXIgYXJyYXlNZXRob2RVc2VzVG9MZW5ndGggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktbWV0aG9kLXVzZXMtdG8tbGVuZ3RoJyk7XG5cbnZhciBIQVNfU1BFQ0lFU19TVVBQT1JUID0gYXJyYXlNZXRob2RIYXNTcGVjaWVzU3VwcG9ydCgnc3BsaWNlJyk7XG52YXIgVVNFU19UT19MRU5HVEggPSBhcnJheU1ldGhvZFVzZXNUb0xlbmd0aCgnc3BsaWNlJywgeyBBQ0NFU1NPUlM6IHRydWUsIDA6IDAsIDE6IDIgfSk7XG5cbnZhciBtYXggPSBNYXRoLm1heDtcbnZhciBtaW4gPSBNYXRoLm1pbjtcbnZhciBNQVhfU0FGRV9JTlRFR0VSID0gMHgxRkZGRkZGRkZGRkZGRjtcbnZhciBNQVhJTVVNX0FMTE9XRURfTEVOR1RIX0VYQ0VFREVEID0gJ01heGltdW0gYWxsb3dlZCBsZW5ndGggZXhjZWVkZWQnO1xuXG4vLyBgQXJyYXkucHJvdG90eXBlLnNwbGljZWAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5zcGxpY2Vcbi8vIHdpdGggYWRkaW5nIHN1cHBvcnQgb2YgQEBzcGVjaWVzXG4kKHsgdGFyZ2V0OiAnQXJyYXknLCBwcm90bzogdHJ1ZSwgZm9yY2VkOiAhSEFTX1NQRUNJRVNfU1VQUE9SVCB8fCAhVVNFU19UT19MRU5HVEggfSwge1xuICBzcGxpY2U6IGZ1bmN0aW9uIHNwbGljZShzdGFydCwgZGVsZXRlQ291bnQgLyogLCAuLi5pdGVtcyAqLykge1xuICAgIHZhciBPID0gdG9PYmplY3QodGhpcyk7XG4gICAgdmFyIGxlbiA9IHRvTGVuZ3RoKE8ubGVuZ3RoKTtcbiAgICB2YXIgYWN0dWFsU3RhcnQgPSB0b0Fic29sdXRlSW5kZXgoc3RhcnQsIGxlbik7XG4gICAgdmFyIGFyZ3VtZW50c0xlbmd0aCA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgdmFyIGluc2VydENvdW50LCBhY3R1YWxEZWxldGVDb3VudCwgQSwgaywgZnJvbSwgdG87XG4gICAgaWYgKGFyZ3VtZW50c0xlbmd0aCA9PT0gMCkge1xuICAgICAgaW5zZXJ0Q291bnQgPSBhY3R1YWxEZWxldGVDb3VudCA9IDA7XG4gICAgfSBlbHNlIGlmIChhcmd1bWVudHNMZW5ndGggPT09IDEpIHtcbiAgICAgIGluc2VydENvdW50ID0gMDtcbiAgICAgIGFjdHVhbERlbGV0ZUNvdW50ID0gbGVuIC0gYWN0dWFsU3RhcnQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIGluc2VydENvdW50ID0gYXJndW1lbnRzTGVuZ3RoIC0gMjtcbiAgICAgIGFjdHVhbERlbGV0ZUNvdW50ID0gbWluKG1heCh0b0ludGVnZXIoZGVsZXRlQ291bnQpLCAwKSwgbGVuIC0gYWN0dWFsU3RhcnQpO1xuICAgIH1cbiAgICBpZiAobGVuICsgaW5zZXJ0Q291bnQgLSBhY3R1YWxEZWxldGVDb3VudCA+IE1BWF9TQUZFX0lOVEVHRVIpIHtcbiAgICAgIHRocm93IFR5cGVFcnJvcihNQVhJTVVNX0FMTE9XRURfTEVOR1RIX0VYQ0VFREVEKTtcbiAgICB9XG4gICAgQSA9IGFycmF5U3BlY2llc0NyZWF0ZShPLCBhY3R1YWxEZWxldGVDb3VudCk7XG4gICAgZm9yIChrID0gMDsgayA8IGFjdHVhbERlbGV0ZUNvdW50OyBrKyspIHtcbiAgICAgIGZyb20gPSBhY3R1YWxTdGFydCArIGs7XG4gICAgICBpZiAoZnJvbSBpbiBPKSBjcmVhdGVQcm9wZXJ0eShBLCBrLCBPW2Zyb21dKTtcbiAgICB9XG4gICAgQS5sZW5ndGggPSBhY3R1YWxEZWxldGVDb3VudDtcbiAgICBpZiAoaW5zZXJ0Q291bnQgPCBhY3R1YWxEZWxldGVDb3VudCkge1xuICAgICAgZm9yIChrID0gYWN0dWFsU3RhcnQ7IGsgPCBsZW4gLSBhY3R1YWxEZWxldGVDb3VudDsgaysrKSB7XG4gICAgICAgIGZyb20gPSBrICsgYWN0dWFsRGVsZXRlQ291bnQ7XG4gICAgICAgIHRvID0gayArIGluc2VydENvdW50O1xuICAgICAgICBpZiAoZnJvbSBpbiBPKSBPW3RvXSA9IE9bZnJvbV07XG4gICAgICAgIGVsc2UgZGVsZXRlIE9bdG9dO1xuICAgICAgfVxuICAgICAgZm9yIChrID0gbGVuOyBrID4gbGVuIC0gYWN0dWFsRGVsZXRlQ291bnQgKyBpbnNlcnRDb3VudDsgay0tKSBkZWxldGUgT1trIC0gMV07XG4gICAgfSBlbHNlIGlmIChpbnNlcnRDb3VudCA+IGFjdHVhbERlbGV0ZUNvdW50KSB7XG4gICAgICBmb3IgKGsgPSBsZW4gLSBhY3R1YWxEZWxldGVDb3VudDsgayA+IGFjdHVhbFN0YXJ0OyBrLS0pIHtcbiAgICAgICAgZnJvbSA9IGsgKyBhY3R1YWxEZWxldGVDb3VudCAtIDE7XG4gICAgICAgIHRvID0gayArIGluc2VydENvdW50IC0gMTtcbiAgICAgICAgaWYgKGZyb20gaW4gTykgT1t0b10gPSBPW2Zyb21dO1xuICAgICAgICBlbHNlIGRlbGV0ZSBPW3RvXTtcbiAgICAgIH1cbiAgICB9XG4gICAgZm9yIChrID0gMDsgayA8IGluc2VydENvdW50OyBrKyspIHtcbiAgICAgIE9bayArIGFjdHVhbFN0YXJ0XSA9IGFyZ3VtZW50c1trICsgMl07XG4gICAgfVxuICAgIE8ubGVuZ3RoID0gbGVuIC0gYWN0dWFsRGVsZXRlQ291bnQgKyBpbnNlcnRDb3VudDtcbiAgICByZXR1cm4gQTtcbiAgfVxufSk7XG4iLCIvLyB0aGlzIG1ldGhvZCB3YXMgYWRkZWQgdG8gdW5zY29wYWJsZXMgYWZ0ZXIgaW1wbGVtZW50YXRpb25cbi8vIGluIHBvcHVsYXIgZW5naW5lcywgc28gaXQncyBtb3ZlZCB0byBhIHNlcGFyYXRlIG1vZHVsZVxudmFyIGFkZFRvVW5zY29wYWJsZXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYWRkLXRvLXVuc2NvcGFibGVzJyk7XG5cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLUBAdW5zY29wYWJsZXNcbmFkZFRvVW5zY29wYWJsZXMoJ2ZsYXRNYXAnKTtcbiIsIi8vIHRoaXMgbWV0aG9kIHdhcyBhZGRlZCB0byB1bnNjb3BhYmxlcyBhZnRlciBpbXBsZW1lbnRhdGlvblxuLy8gaW4gcG9wdWxhciBlbmdpbmVzLCBzbyBpdCdzIG1vdmVkIHRvIGEgc2VwYXJhdGUgbW9kdWxlXG52YXIgYWRkVG9VbnNjb3BhYmxlcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hZGQtdG8tdW5zY29wYWJsZXMnKTtcblxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUtQEB1bnNjb3BhYmxlc1xuYWRkVG9VbnNjb3BhYmxlcygnZmxhdCcpO1xuIiwidmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgQXJyYXlCdWZmZXJNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktYnVmZmVyJyk7XG52YXIgTkFUSVZFX0FSUkFZX0JVRkZFUiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1idWZmZXItbmF0aXZlJyk7XG5cbi8vIGBEYXRhVmlld2AgY29uc3RydWN0b3Jcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtZGF0YXZpZXctY29uc3RydWN0b3JcbiQoeyBnbG9iYWw6IHRydWUsIGZvcmNlZDogIU5BVElWRV9BUlJBWV9CVUZGRVIgfSwge1xuICBEYXRhVmlldzogQXJyYXlCdWZmZXJNb2R1bGUuRGF0YVZpZXdcbn0pO1xuIiwidmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG5cbi8vIGBEYXRlLm5vd2AgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWRhdGUubm93XG4kKHsgdGFyZ2V0OiAnRGF0ZScsIHN0YXQ6IHRydWUgfSwge1xuICBub3c6IGZ1bmN0aW9uIG5vdygpIHtcbiAgICByZXR1cm4gbmV3IERhdGUoKS5nZXRUaW1lKCk7XG4gIH1cbn0pO1xuIiwidmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgdG9JU09TdHJpbmcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGF0ZS10by1pc28tc3RyaW5nJyk7XG5cbi8vIGBEYXRlLnByb3RvdHlwZS50b0lTT1N0cmluZ2AgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWRhdGUucHJvdG90eXBlLnRvaXNvc3RyaW5nXG4vLyBQaGFudG9tSlMgLyBvbGQgV2ViS2l0IGhhcyBhIGJyb2tlbiBpbXBsZW1lbnRhdGlvbnNcbiQoeyB0YXJnZXQ6ICdEYXRlJywgcHJvdG86IHRydWUsIGZvcmNlZDogRGF0ZS5wcm90b3R5cGUudG9JU09TdHJpbmcgIT09IHRvSVNPU3RyaW5nIH0sIHtcbiAgdG9JU09TdHJpbmc6IHRvSVNPU3RyaW5nXG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tb2JqZWN0Jyk7XG52YXIgdG9QcmltaXRpdmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tcHJpbWl0aXZlJyk7XG5cbnZhciBGT1JDRUQgPSBmYWlscyhmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBuZXcgRGF0ZShOYU4pLnRvSlNPTigpICE9PSBudWxsXG4gICAgfHwgRGF0ZS5wcm90b3R5cGUudG9KU09OLmNhbGwoeyB0b0lTT1N0cmluZzogZnVuY3Rpb24gKCkgeyByZXR1cm4gMTsgfSB9KSAhPT0gMTtcbn0pO1xuXG4vLyBgRGF0ZS5wcm90b3R5cGUudG9KU09OYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtZGF0ZS5wcm90b3R5cGUudG9qc29uXG4kKHsgdGFyZ2V0OiAnRGF0ZScsIHByb3RvOiB0cnVlLCBmb3JjZWQ6IEZPUkNFRCB9LCB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bnVzZWQtdmFyc1xuICB0b0pTT046IGZ1bmN0aW9uIHRvSlNPTihrZXkpIHtcbiAgICB2YXIgTyA9IHRvT2JqZWN0KHRoaXMpO1xuICAgIHZhciBwdiA9IHRvUHJpbWl0aXZlKE8pO1xuICAgIHJldHVybiB0eXBlb2YgcHYgPT0gJ251bWJlcicgJiYgIWlzRmluaXRlKHB2KSA/IG51bGwgOiBPLnRvSVNPU3RyaW5nKCk7XG4gIH1cbn0pO1xuIiwidmFyIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtbm9uLWVudW1lcmFibGUtcHJvcGVydHknKTtcbnZhciBkYXRlVG9QcmltaXRpdmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGF0ZS10by1wcmltaXRpdmUnKTtcbnZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcblxudmFyIFRPX1BSSU1JVElWRSA9IHdlbGxLbm93blN5bWJvbCgndG9QcmltaXRpdmUnKTtcbnZhciBEYXRlUHJvdG90eXBlID0gRGF0ZS5wcm90b3R5cGU7XG5cbi8vIGBEYXRlLnByb3RvdHlwZVtAQHRvUHJpbWl0aXZlXWAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWRhdGUucHJvdG90eXBlLUBAdG9wcmltaXRpdmVcbmlmICghKFRPX1BSSU1JVElWRSBpbiBEYXRlUHJvdG90eXBlKSkge1xuICBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkoRGF0ZVByb3RvdHlwZSwgVE9fUFJJTUlUSVZFLCBkYXRlVG9QcmltaXRpdmUpO1xufVxuIiwidmFyIHJlZGVmaW5lID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlZGVmaW5lJyk7XG5cbnZhciBEYXRlUHJvdG90eXBlID0gRGF0ZS5wcm90b3R5cGU7XG52YXIgSU5WQUxJRF9EQVRFID0gJ0ludmFsaWQgRGF0ZSc7XG52YXIgVE9fU1RSSU5HID0gJ3RvU3RyaW5nJztcbnZhciBuYXRpdmVEYXRlVG9TdHJpbmcgPSBEYXRlUHJvdG90eXBlW1RPX1NUUklOR107XG52YXIgZ2V0VGltZSA9IERhdGVQcm90b3R5cGUuZ2V0VGltZTtcblxuLy8gYERhdGUucHJvdG90eXBlLnRvU3RyaW5nYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtZGF0ZS5wcm90b3R5cGUudG9zdHJpbmdcbmlmIChuZXcgRGF0ZShOYU4pICsgJycgIT0gSU5WQUxJRF9EQVRFKSB7XG4gIHJlZGVmaW5lKERhdGVQcm90b3R5cGUsIFRPX1NUUklORywgZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgdmFyIHZhbHVlID0gZ2V0VGltZS5jYWxsKHRoaXMpO1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmVcbiAgICByZXR1cm4gdmFsdWUgPT09IHZhbHVlID8gbmF0aXZlRGF0ZVRvU3RyaW5nLmNhbGwodGhpcykgOiBJTlZBTElEX0RBVEU7XG4gIH0pO1xufVxuIiwidmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgYmluZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi1iaW5kJyk7XG5cbi8vIGBGdW5jdGlvbi5wcm90b3R5cGUuYmluZGAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWZ1bmN0aW9uLnByb3RvdHlwZS5iaW5kXG4kKHsgdGFyZ2V0OiAnRnVuY3Rpb24nLCBwcm90bzogdHJ1ZSB9LCB7XG4gIGJpbmQ6IGJpbmRcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLW9iamVjdCcpO1xudmFyIGRlZmluZVByb3BlcnR5TW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1kZWZpbmUtcHJvcGVydHknKTtcbnZhciBnZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZ2V0LXByb3RvdHlwZS1vZicpO1xudmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xuXG52YXIgSEFTX0lOU1RBTkNFID0gd2VsbEtub3duU3ltYm9sKCdoYXNJbnN0YW5jZScpO1xudmFyIEZ1bmN0aW9uUHJvdG90eXBlID0gRnVuY3Rpb24ucHJvdG90eXBlO1xuXG4vLyBgRnVuY3Rpb24ucHJvdG90eXBlW0BAaGFzSW5zdGFuY2VdYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtZnVuY3Rpb24ucHJvdG90eXBlLUBAaGFzaW5zdGFuY2VcbmlmICghKEhBU19JTlNUQU5DRSBpbiBGdW5jdGlvblByb3RvdHlwZSkpIHtcbiAgZGVmaW5lUHJvcGVydHlNb2R1bGUuZihGdW5jdGlvblByb3RvdHlwZSwgSEFTX0lOU1RBTkNFLCB7IHZhbHVlOiBmdW5jdGlvbiAoTykge1xuICAgIGlmICh0eXBlb2YgdGhpcyAhPSAnZnVuY3Rpb24nIHx8ICFpc09iamVjdChPKSkgcmV0dXJuIGZhbHNlO1xuICAgIGlmICghaXNPYmplY3QodGhpcy5wcm90b3R5cGUpKSByZXR1cm4gTyBpbnN0YW5jZW9mIHRoaXM7XG4gICAgLy8gZm9yIGVudmlyb25tZW50IHcvbyBuYXRpdmUgYEBAaGFzSW5zdGFuY2VgIGxvZ2ljIGVub3VnaCBgaW5zdGFuY2VvZmAsIGJ1dCBhZGQgdGhpczpcbiAgICB3aGlsZSAoTyA9IGdldFByb3RvdHlwZU9mKE8pKSBpZiAodGhpcy5wcm90b3R5cGUgPT09IE8pIHJldHVybiB0cnVlO1xuICAgIHJldHVybiBmYWxzZTtcbiAgfSB9KTtcbn1cbiIsInZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZXNjcmlwdG9ycycpO1xudmFyIGRlZmluZVByb3BlcnR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1kZWZpbmUtcHJvcGVydHknKS5mO1xuXG52YXIgRnVuY3Rpb25Qcm90b3R5cGUgPSBGdW5jdGlvbi5wcm90b3R5cGU7XG52YXIgRnVuY3Rpb25Qcm90b3R5cGVUb1N0cmluZyA9IEZ1bmN0aW9uUHJvdG90eXBlLnRvU3RyaW5nO1xudmFyIG5hbWVSRSA9IC9eXFxzKmZ1bmN0aW9uIChbXiAoXSopLztcbnZhciBOQU1FID0gJ25hbWUnO1xuXG4vLyBGdW5jdGlvbiBpbnN0YW5jZXMgYC5uYW1lYCBwcm9wZXJ0eVxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1mdW5jdGlvbi1pbnN0YW5jZXMtbmFtZVxuaWYgKERFU0NSSVBUT1JTICYmICEoTkFNRSBpbiBGdW5jdGlvblByb3RvdHlwZSkpIHtcbiAgZGVmaW5lUHJvcGVydHkoRnVuY3Rpb25Qcm90b3R5cGUsIE5BTUUsIHtcbiAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICB0cnkge1xuICAgICAgICByZXR1cm4gRnVuY3Rpb25Qcm90b3R5cGVUb1N0cmluZy5jYWxsKHRoaXMpLm1hdGNoKG5hbWVSRSlbMV07XG4gICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICByZXR1cm4gJyc7XG4gICAgICB9XG4gICAgfVxuICB9KTtcbn1cbiIsInZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcblxuLy8gYGdsb2JhbFRoaXNgIG9iamVjdFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1nbG9iYWx0aGlzXG4kKHsgZ2xvYmFsOiB0cnVlIH0sIHtcbiAgZ2xvYmFsVGhpczogZ2xvYmFsXG59KTtcbiIsInZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGdldEJ1aWx0SW4gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2V0LWJ1aWx0LWluJyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcblxudmFyICRzdHJpbmdpZnkgPSBnZXRCdWlsdEluKCdKU09OJywgJ3N0cmluZ2lmeScpO1xudmFyIHJlID0gL1tcXHVEODAwLVxcdURGRkZdL2c7XG52YXIgbG93ID0gL15bXFx1RDgwMC1cXHVEQkZGXSQvO1xudmFyIGhpID0gL15bXFx1REMwMC1cXHVERkZGXSQvO1xuXG52YXIgZml4ID0gZnVuY3Rpb24gKG1hdGNoLCBvZmZzZXQsIHN0cmluZykge1xuICB2YXIgcHJldiA9IHN0cmluZy5jaGFyQXQob2Zmc2V0IC0gMSk7XG4gIHZhciBuZXh0ID0gc3RyaW5nLmNoYXJBdChvZmZzZXQgKyAxKTtcbiAgaWYgKChsb3cudGVzdChtYXRjaCkgJiYgIWhpLnRlc3QobmV4dCkpIHx8IChoaS50ZXN0KG1hdGNoKSAmJiAhbG93LnRlc3QocHJldikpKSB7XG4gICAgcmV0dXJuICdcXFxcdScgKyBtYXRjaC5jaGFyQ29kZUF0KDApLnRvU3RyaW5nKDE2KTtcbiAgfSByZXR1cm4gbWF0Y2g7XG59O1xuXG52YXIgRk9SQ0VEID0gZmFpbHMoZnVuY3Rpb24gKCkge1xuICByZXR1cm4gJHN0cmluZ2lmeSgnXFx1REYwNlxcdUQ4MzQnKSAhPT0gJ1wiXFxcXHVkZjA2XFxcXHVkODM0XCInXG4gICAgfHwgJHN0cmluZ2lmeSgnXFx1REVBRCcpICE9PSAnXCJcXFxcdWRlYWRcIic7XG59KTtcblxuaWYgKCRzdHJpbmdpZnkpIHtcbiAgLy8gYEpTT04uc3RyaW5naWZ5YCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1qc29uLnN0cmluZ2lmeVxuICAvLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC13ZWxsLWZvcm1lZC1zdHJpbmdpZnlcbiAgJCh7IHRhcmdldDogJ0pTT04nLCBzdGF0OiB0cnVlLCBmb3JjZWQ6IEZPUkNFRCB9LCB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVudXNlZC12YXJzXG4gICAgc3RyaW5naWZ5OiBmdW5jdGlvbiBzdHJpbmdpZnkoaXQsIHJlcGxhY2VyLCBzcGFjZSkge1xuICAgICAgdmFyIHJlc3VsdCA9ICRzdHJpbmdpZnkuYXBwbHkobnVsbCwgYXJndW1lbnRzKTtcbiAgICAgIHJldHVybiB0eXBlb2YgcmVzdWx0ID09ICdzdHJpbmcnID8gcmVzdWx0LnJlcGxhY2UocmUsIGZpeCkgOiByZXN1bHQ7XG4gICAgfVxuICB9KTtcbn1cbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgc2V0VG9TdHJpbmdUYWcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2V0LXRvLXN0cmluZy10YWcnKTtcblxuLy8gSlNPTltAQHRvU3RyaW5nVGFnXSBwcm9wZXJ0eVxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1qc29uLUBAdG9zdHJpbmd0YWdcbnNldFRvU3RyaW5nVGFnKGdsb2JhbC5KU09OLCAnSlNPTicsIHRydWUpO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGNvbGxlY3Rpb24gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY29sbGVjdGlvbicpO1xudmFyIGNvbGxlY3Rpb25TdHJvbmcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY29sbGVjdGlvbi1zdHJvbmcnKTtcblxuLy8gYE1hcGAgY29uc3RydWN0b3Jcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtbWFwLW9iamVjdHNcbm1vZHVsZS5leHBvcnRzID0gY29sbGVjdGlvbignTWFwJywgZnVuY3Rpb24gKGluaXQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIE1hcCgpIHsgcmV0dXJuIGluaXQodGhpcywgYXJndW1lbnRzLmxlbmd0aCA/IGFyZ3VtZW50c1swXSA6IHVuZGVmaW5lZCk7IH07XG59LCBjb2xsZWN0aW9uU3Ryb25nKTtcbiIsInZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGxvZzFwID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL21hdGgtbG9nMXAnKTtcblxudmFyIG5hdGl2ZUFjb3NoID0gTWF0aC5hY29zaDtcbnZhciBsb2cgPSBNYXRoLmxvZztcbnZhciBzcXJ0ID0gTWF0aC5zcXJ0O1xudmFyIExOMiA9IE1hdGguTE4yO1xuXG52YXIgRk9SQ0VEID0gIW5hdGl2ZUFjb3NoXG4gIC8vIFY4IGJ1ZzogaHR0cHM6Ly9jb2RlLmdvb2dsZS5jb20vcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTM1MDlcbiAgfHwgTWF0aC5mbG9vcihuYXRpdmVBY29zaChOdW1iZXIuTUFYX1ZBTFVFKSkgIT0gNzEwXG4gIC8vIFRvciBCcm93c2VyIGJ1ZzogTWF0aC5hY29zaChJbmZpbml0eSkgLT4gTmFOXG4gIHx8IG5hdGl2ZUFjb3NoKEluZmluaXR5KSAhPSBJbmZpbml0eTtcblxuLy8gYE1hdGguYWNvc2hgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1tYXRoLmFjb3NoXG4kKHsgdGFyZ2V0OiAnTWF0aCcsIHN0YXQ6IHRydWUsIGZvcmNlZDogRk9SQ0VEIH0sIHtcbiAgYWNvc2g6IGZ1bmN0aW9uIGFjb3NoKHgpIHtcbiAgICByZXR1cm4gKHggPSAreCkgPCAxID8gTmFOIDogeCA+IDk0OTA2MjY1LjYyNDI1MTU2XG4gICAgICA/IGxvZyh4KSArIExOMlxuICAgICAgOiBsb2cxcCh4IC0gMSArIHNxcnQoeCAtIDEpICogc3FydCh4ICsgMSkpO1xuICB9XG59KTtcbiIsInZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xuXG52YXIgbmF0aXZlQXNpbmggPSBNYXRoLmFzaW5oO1xudmFyIGxvZyA9IE1hdGgubG9nO1xudmFyIHNxcnQgPSBNYXRoLnNxcnQ7XG5cbmZ1bmN0aW9uIGFzaW5oKHgpIHtcbiAgcmV0dXJuICFpc0Zpbml0ZSh4ID0gK3gpIHx8IHggPT0gMCA/IHggOiB4IDwgMCA/IC1hc2luaCgteCkgOiBsb2coeCArIHNxcnQoeCAqIHggKyAxKSk7XG59XG5cbi8vIGBNYXRoLmFzaW5oYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtbWF0aC5hc2luaFxuLy8gVG9yIEJyb3dzZXIgYnVnOiBNYXRoLmFzaW5oKDApIC0+IC0wXG4kKHsgdGFyZ2V0OiAnTWF0aCcsIHN0YXQ6IHRydWUsIGZvcmNlZDogIShuYXRpdmVBc2luaCAmJiAxIC8gbmF0aXZlQXNpbmgoMCkgPiAwKSB9LCB7XG4gIGFzaW5oOiBhc2luaFxufSk7XG4iLCJ2YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcblxudmFyIG5hdGl2ZUF0YW5oID0gTWF0aC5hdGFuaDtcbnZhciBsb2cgPSBNYXRoLmxvZztcblxuLy8gYE1hdGguYXRhbmhgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1tYXRoLmF0YW5oXG4vLyBUb3IgQnJvd3NlciBidWc6IE1hdGguYXRhbmgoLTApIC0+IDBcbiQoeyB0YXJnZXQ6ICdNYXRoJywgc3RhdDogdHJ1ZSwgZm9yY2VkOiAhKG5hdGl2ZUF0YW5oICYmIDEgLyBuYXRpdmVBdGFuaCgtMCkgPCAwKSB9LCB7XG4gIGF0YW5oOiBmdW5jdGlvbiBhdGFuaCh4KSB7XG4gICAgcmV0dXJuICh4ID0gK3gpID09IDAgPyB4IDogbG9nKCgxICsgeCkgLyAoMSAtIHgpKSAvIDI7XG4gIH1cbn0pO1xuIiwidmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgc2lnbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9tYXRoLXNpZ24nKTtcblxudmFyIGFicyA9IE1hdGguYWJzO1xudmFyIHBvdyA9IE1hdGgucG93O1xuXG4vLyBgTWF0aC5jYnJ0YCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtbWF0aC5jYnJ0XG4kKHsgdGFyZ2V0OiAnTWF0aCcsIHN0YXQ6IHRydWUgfSwge1xuICBjYnJ0OiBmdW5jdGlvbiBjYnJ0KHgpIHtcbiAgICByZXR1cm4gc2lnbih4ID0gK3gpICogcG93KGFicyh4KSwgMSAvIDMpO1xuICB9XG59KTtcbiIsInZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xuXG52YXIgZmxvb3IgPSBNYXRoLmZsb29yO1xudmFyIGxvZyA9IE1hdGgubG9nO1xudmFyIExPRzJFID0gTWF0aC5MT0cyRTtcblxuLy8gYE1hdGguY2x6MzJgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1tYXRoLmNsejMyXG4kKHsgdGFyZ2V0OiAnTWF0aCcsIHN0YXQ6IHRydWUgfSwge1xuICBjbHozMjogZnVuY3Rpb24gY2x6MzIoeCkge1xuICAgIHJldHVybiAoeCA+Pj49IDApID8gMzEgLSBmbG9vcihsb2coeCArIDAuNSkgKiBMT0cyRSkgOiAzMjtcbiAgfVxufSk7XG4iLCJ2YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBleHBtMSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9tYXRoLWV4cG0xJyk7XG5cbnZhciBuYXRpdmVDb3NoID0gTWF0aC5jb3NoO1xudmFyIGFicyA9IE1hdGguYWJzO1xudmFyIEUgPSBNYXRoLkU7XG5cbi8vIGBNYXRoLmNvc2hgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1tYXRoLmNvc2hcbiQoeyB0YXJnZXQ6ICdNYXRoJywgc3RhdDogdHJ1ZSwgZm9yY2VkOiAhbmF0aXZlQ29zaCB8fCBuYXRpdmVDb3NoKDcxMCkgPT09IEluZmluaXR5IH0sIHtcbiAgY29zaDogZnVuY3Rpb24gY29zaCh4KSB7XG4gICAgdmFyIHQgPSBleHBtMShhYnMoeCkgLSAxKSArIDE7XG4gICAgcmV0dXJuICh0ICsgMSAvICh0ICogRSAqIEUpKSAqIChFIC8gMik7XG4gIH1cbn0pO1xuIiwidmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgZXhwbTEgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvbWF0aC1leHBtMScpO1xuXG4vLyBgTWF0aC5leHBtMWAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW1hdGguZXhwbTFcbiQoeyB0YXJnZXQ6ICdNYXRoJywgc3RhdDogdHJ1ZSwgZm9yY2VkOiBleHBtMSAhPSBNYXRoLmV4cG0xIH0sIHsgZXhwbTE6IGV4cG0xIH0pO1xuIiwidmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgZnJvdW5kID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL21hdGgtZnJvdW5kJyk7XG5cbi8vIGBNYXRoLmZyb3VuZGAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW1hdGguZnJvdW5kXG4kKHsgdGFyZ2V0OiAnTWF0aCcsIHN0YXQ6IHRydWUgfSwgeyBmcm91bmQ6IGZyb3VuZCB9KTtcbiIsInZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xuXG52YXIgJGh5cG90ID0gTWF0aC5oeXBvdDtcbnZhciBhYnMgPSBNYXRoLmFicztcbnZhciBzcXJ0ID0gTWF0aC5zcXJ0O1xuXG4vLyBDaHJvbWUgNzcgYnVnXG4vLyBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvdjgvaXNzdWVzL2RldGFpbD9pZD05NTQ2XG52YXIgQlVHR1kgPSAhISRoeXBvdCAmJiAkaHlwb3QoSW5maW5pdHksIE5hTikgIT09IEluZmluaXR5O1xuXG4vLyBgTWF0aC5oeXBvdGAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW1hdGguaHlwb3RcbiQoeyB0YXJnZXQ6ICdNYXRoJywgc3RhdDogdHJ1ZSwgZm9yY2VkOiBCVUdHWSB9LCB7XG4gIGh5cG90OiBmdW5jdGlvbiBoeXBvdCh2YWx1ZTEsIHZhbHVlMikgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC12YXJzXG4gICAgdmFyIHN1bSA9IDA7XG4gICAgdmFyIGkgPSAwO1xuICAgIHZhciBhTGVuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICB2YXIgbGFyZyA9IDA7XG4gICAgdmFyIGFyZywgZGl2O1xuICAgIHdoaWxlIChpIDwgYUxlbikge1xuICAgICAgYXJnID0gYWJzKGFyZ3VtZW50c1tpKytdKTtcbiAgICAgIGlmIChsYXJnIDwgYXJnKSB7XG4gICAgICAgIGRpdiA9IGxhcmcgLyBhcmc7XG4gICAgICAgIHN1bSA9IHN1bSAqIGRpdiAqIGRpdiArIDE7XG4gICAgICAgIGxhcmcgPSBhcmc7XG4gICAgICB9IGVsc2UgaWYgKGFyZyA+IDApIHtcbiAgICAgICAgZGl2ID0gYXJnIC8gbGFyZztcbiAgICAgICAgc3VtICs9IGRpdiAqIGRpdjtcbiAgICAgIH0gZWxzZSBzdW0gKz0gYXJnO1xuICAgIH1cbiAgICByZXR1cm4gbGFyZyA9PT0gSW5maW5pdHkgPyBJbmZpbml0eSA6IGxhcmcgKiBzcXJ0KHN1bSk7XG4gIH1cbn0pO1xuIiwidmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcblxudmFyIG5hdGl2ZUltdWwgPSBNYXRoLmltdWw7XG5cbnZhciBGT1JDRUQgPSBmYWlscyhmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBuYXRpdmVJbXVsKDB4RkZGRkZGRkYsIDUpICE9IC01IHx8IG5hdGl2ZUltdWwubGVuZ3RoICE9IDI7XG59KTtcblxuLy8gYE1hdGguaW11bGAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW1hdGguaW11bFxuLy8gc29tZSBXZWJLaXQgdmVyc2lvbnMgZmFpbHMgd2l0aCBiaWcgbnVtYmVycywgc29tZSBoYXMgd3JvbmcgYXJpdHlcbiQoeyB0YXJnZXQ6ICdNYXRoJywgc3RhdDogdHJ1ZSwgZm9yY2VkOiBGT1JDRUQgfSwge1xuICBpbXVsOiBmdW5jdGlvbiBpbXVsKHgsIHkpIHtcbiAgICB2YXIgVUlOVDE2ID0gMHhGRkZGO1xuICAgIHZhciB4biA9ICt4O1xuICAgIHZhciB5biA9ICt5O1xuICAgIHZhciB4bCA9IFVJTlQxNiAmIHhuO1xuICAgIHZhciB5bCA9IFVJTlQxNiAmIHluO1xuICAgIHJldHVybiAwIHwgeGwgKiB5bCArICgoVUlOVDE2ICYgeG4gPj4+IDE2KSAqIHlsICsgeGwgKiAoVUlOVDE2ICYgeW4gPj4+IDE2KSA8PCAxNiA+Pj4gMCk7XG4gIH1cbn0pO1xuIiwidmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG5cbnZhciBsb2cgPSBNYXRoLmxvZztcbnZhciBMT0cxMEUgPSBNYXRoLkxPRzEwRTtcblxuLy8gYE1hdGgubG9nMTBgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1tYXRoLmxvZzEwXG4kKHsgdGFyZ2V0OiAnTWF0aCcsIHN0YXQ6IHRydWUgfSwge1xuICBsb2cxMDogZnVuY3Rpb24gbG9nMTAoeCkge1xuICAgIHJldHVybiBsb2coeCkgKiBMT0cxMEU7XG4gIH1cbn0pO1xuIiwidmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgbG9nMXAgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvbWF0aC1sb2cxcCcpO1xuXG4vLyBgTWF0aC5sb2cxcGAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW1hdGgubG9nMXBcbiQoeyB0YXJnZXQ6ICdNYXRoJywgc3RhdDogdHJ1ZSB9LCB7IGxvZzFwOiBsb2cxcCB9KTtcbiIsInZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xuXG52YXIgbG9nID0gTWF0aC5sb2c7XG52YXIgTE4yID0gTWF0aC5MTjI7XG5cbi8vIGBNYXRoLmxvZzJgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1tYXRoLmxvZzJcbiQoeyB0YXJnZXQ6ICdNYXRoJywgc3RhdDogdHJ1ZSB9LCB7XG4gIGxvZzI6IGZ1bmN0aW9uIGxvZzIoeCkge1xuICAgIHJldHVybiBsb2coeCkgLyBMTjI7XG4gIH1cbn0pO1xuIiwidmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgc2lnbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9tYXRoLXNpZ24nKTtcblxuLy8gYE1hdGguc2lnbmAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW1hdGguc2lnblxuJCh7IHRhcmdldDogJ01hdGgnLCBzdGF0OiB0cnVlIH0sIHtcbiAgc2lnbjogc2lnblxufSk7XG4iLCJ2YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xudmFyIGV4cG0xID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL21hdGgtZXhwbTEnKTtcblxudmFyIGFicyA9IE1hdGguYWJzO1xudmFyIGV4cCA9IE1hdGguZXhwO1xudmFyIEUgPSBNYXRoLkU7XG5cbnZhciBGT1JDRUQgPSBmYWlscyhmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBNYXRoLnNpbmgoLTJlLTE3KSAhPSAtMmUtMTc7XG59KTtcblxuLy8gYE1hdGguc2luaGAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW1hdGguc2luaFxuLy8gVjggbmVhciBDaHJvbWl1bSAzOCBoYXMgYSBwcm9ibGVtIHdpdGggdmVyeSBzbWFsbCBudW1iZXJzXG4kKHsgdGFyZ2V0OiAnTWF0aCcsIHN0YXQ6IHRydWUsIGZvcmNlZDogRk9SQ0VEIH0sIHtcbiAgc2luaDogZnVuY3Rpb24gc2luaCh4KSB7XG4gICAgcmV0dXJuIGFicyh4ID0gK3gpIDwgMSA/IChleHBtMSh4KSAtIGV4cG0xKC14KSkgLyAyIDogKGV4cCh4IC0gMSkgLSBleHAoLXggLSAxKSkgKiAoRSAvIDIpO1xuICB9XG59KTtcbiIsInZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGV4cG0xID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL21hdGgtZXhwbTEnKTtcblxudmFyIGV4cCA9IE1hdGguZXhwO1xuXG4vLyBgTWF0aC50YW5oYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtbWF0aC50YW5oXG4kKHsgdGFyZ2V0OiAnTWF0aCcsIHN0YXQ6IHRydWUgfSwge1xuICB0YW5oOiBmdW5jdGlvbiB0YW5oKHgpIHtcbiAgICB2YXIgYSA9IGV4cG0xKHggPSAreCk7XG4gICAgdmFyIGIgPSBleHBtMSgteCk7XG4gICAgcmV0dXJuIGEgPT0gSW5maW5pdHkgPyAxIDogYiA9PSBJbmZpbml0eSA/IC0xIDogKGEgLSBiKSAvIChleHAoeCkgKyBleHAoLXgpKTtcbiAgfVxufSk7XG4iLCJ2YXIgc2V0VG9TdHJpbmdUYWcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2V0LXRvLXN0cmluZy10YWcnKTtcblxuLy8gTWF0aFtAQHRvU3RyaW5nVGFnXSBwcm9wZXJ0eVxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1tYXRoLUBAdG9zdHJpbmd0YWdcbnNldFRvU3RyaW5nVGFnKE1hdGgsICdNYXRoJywgdHJ1ZSk7XG4iLCJ2YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcblxudmFyIGNlaWwgPSBNYXRoLmNlaWw7XG52YXIgZmxvb3IgPSBNYXRoLmZsb29yO1xuXG4vLyBgTWF0aC50cnVuY2AgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW1hdGgudHJ1bmNcbiQoeyB0YXJnZXQ6ICdNYXRoJywgc3RhdDogdHJ1ZSB9LCB7XG4gIHRydW5jOiBmdW5jdGlvbiB0cnVuYyhpdCkge1xuICAgIHJldHVybiAoaXQgPiAwID8gZmxvb3IgOiBjZWlsKShpdCk7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Rlc2NyaXB0b3JzJyk7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIGlzRm9yY2VkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLWZvcmNlZCcpO1xudmFyIHJlZGVmaW5lID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlZGVmaW5lJyk7XG52YXIgaGFzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hhcycpO1xudmFyIGNsYXNzb2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY2xhc3NvZi1yYXcnKTtcbnZhciBpbmhlcml0SWZSZXF1aXJlZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pbmhlcml0LWlmLXJlcXVpcmVkJyk7XG52YXIgdG9QcmltaXRpdmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tcHJpbWl0aXZlJyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcbnZhciBjcmVhdGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWNyZWF0ZScpO1xudmFyIGdldE93blByb3BlcnR5TmFtZXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1vd24tcHJvcGVydHktbmFtZXMnKS5mO1xudmFyIGdldE93blByb3BlcnR5RGVzY3JpcHRvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9yJykuZjtcbnZhciBkZWZpbmVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZGVmaW5lLXByb3BlcnR5JykuZjtcbnZhciB0cmltID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3N0cmluZy10cmltJykudHJpbTtcblxudmFyIE5VTUJFUiA9ICdOdW1iZXInO1xudmFyIE5hdGl2ZU51bWJlciA9IGdsb2JhbFtOVU1CRVJdO1xudmFyIE51bWJlclByb3RvdHlwZSA9IE5hdGl2ZU51bWJlci5wcm90b3R5cGU7XG5cbi8vIE9wZXJhIH4xMiBoYXMgYnJva2VuIE9iamVjdCN0b1N0cmluZ1xudmFyIEJST0tFTl9DTEFTU09GID0gY2xhc3NvZihjcmVhdGUoTnVtYmVyUHJvdG90eXBlKSkgPT0gTlVNQkVSO1xuXG4vLyBgVG9OdW1iZXJgIGFic3RyYWN0IG9wZXJhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy10b251bWJlclxudmFyIHRvTnVtYmVyID0gZnVuY3Rpb24gKGFyZ3VtZW50KSB7XG4gIHZhciBpdCA9IHRvUHJpbWl0aXZlKGFyZ3VtZW50LCBmYWxzZSk7XG4gIHZhciBmaXJzdCwgdGhpcmQsIHJhZGl4LCBtYXhDb2RlLCBkaWdpdHMsIGxlbmd0aCwgaW5kZXgsIGNvZGU7XG4gIGlmICh0eXBlb2YgaXQgPT0gJ3N0cmluZycgJiYgaXQubGVuZ3RoID4gMikge1xuICAgIGl0ID0gdHJpbShpdCk7XG4gICAgZmlyc3QgPSBpdC5jaGFyQ29kZUF0KDApO1xuICAgIGlmIChmaXJzdCA9PT0gNDMgfHwgZmlyc3QgPT09IDQ1KSB7XG4gICAgICB0aGlyZCA9IGl0LmNoYXJDb2RlQXQoMik7XG4gICAgICBpZiAodGhpcmQgPT09IDg4IHx8IHRoaXJkID09PSAxMjApIHJldHVybiBOYU47IC8vIE51bWJlcignKzB4MScpIHNob3VsZCBiZSBOYU4sIG9sZCBWOCBmaXhcbiAgICB9IGVsc2UgaWYgKGZpcnN0ID09PSA0OCkge1xuICAgICAgc3dpdGNoIChpdC5jaGFyQ29kZUF0KDEpKSB7XG4gICAgICAgIGNhc2UgNjY6IGNhc2UgOTg6IHJhZGl4ID0gMjsgbWF4Q29kZSA9IDQ5OyBicmVhazsgLy8gZmFzdCBlcXVhbCBvZiAvXjBiWzAxXSskL2lcbiAgICAgICAgY2FzZSA3OTogY2FzZSAxMTE6IHJhZGl4ID0gODsgbWF4Q29kZSA9IDU1OyBicmVhazsgLy8gZmFzdCBlcXVhbCBvZiAvXjBvWzAtN10rJC9pXG4gICAgICAgIGRlZmF1bHQ6IHJldHVybiAraXQ7XG4gICAgICB9XG4gICAgICBkaWdpdHMgPSBpdC5zbGljZSgyKTtcbiAgICAgIGxlbmd0aCA9IGRpZ2l0cy5sZW5ndGg7XG4gICAgICBmb3IgKGluZGV4ID0gMDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KyspIHtcbiAgICAgICAgY29kZSA9IGRpZ2l0cy5jaGFyQ29kZUF0KGluZGV4KTtcbiAgICAgICAgLy8gcGFyc2VJbnQgcGFyc2VzIGEgc3RyaW5nIHRvIGEgZmlyc3QgdW5hdmFpbGFibGUgc3ltYm9sXG4gICAgICAgIC8vIGJ1dCBUb051bWJlciBzaG91bGQgcmV0dXJuIE5hTiBpZiBhIHN0cmluZyBjb250YWlucyB1bmF2YWlsYWJsZSBzeW1ib2xzXG4gICAgICAgIGlmIChjb2RlIDwgNDggfHwgY29kZSA+IG1heENvZGUpIHJldHVybiBOYU47XG4gICAgICB9IHJldHVybiBwYXJzZUludChkaWdpdHMsIHJhZGl4KTtcbiAgICB9XG4gIH0gcmV0dXJuICtpdDtcbn07XG5cbi8vIGBOdW1iZXJgIGNvbnN0cnVjdG9yXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW51bWJlci1jb25zdHJ1Y3RvclxuaWYgKGlzRm9yY2VkKE5VTUJFUiwgIU5hdGl2ZU51bWJlcignIDBvMScpIHx8ICFOYXRpdmVOdW1iZXIoJzBiMScpIHx8IE5hdGl2ZU51bWJlcignKzB4MScpKSkge1xuICB2YXIgTnVtYmVyV3JhcHBlciA9IGZ1bmN0aW9uIE51bWJlcih2YWx1ZSkge1xuICAgIHZhciBpdCA9IGFyZ3VtZW50cy5sZW5ndGggPCAxID8gMCA6IHZhbHVlO1xuICAgIHZhciBkdW1teSA9IHRoaXM7XG4gICAgcmV0dXJuIGR1bW15IGluc3RhbmNlb2YgTnVtYmVyV3JhcHBlclxuICAgICAgLy8gY2hlY2sgb24gMS4uY29uc3RydWN0b3IoZm9vKSBjYXNlXG4gICAgICAmJiAoQlJPS0VOX0NMQVNTT0YgPyBmYWlscyhmdW5jdGlvbiAoKSB7IE51bWJlclByb3RvdHlwZS52YWx1ZU9mLmNhbGwoZHVtbXkpOyB9KSA6IGNsYXNzb2YoZHVtbXkpICE9IE5VTUJFUilcbiAgICAgICAgPyBpbmhlcml0SWZSZXF1aXJlZChuZXcgTmF0aXZlTnVtYmVyKHRvTnVtYmVyKGl0KSksIGR1bW15LCBOdW1iZXJXcmFwcGVyKSA6IHRvTnVtYmVyKGl0KTtcbiAgfTtcbiAgZm9yICh2YXIga2V5cyA9IERFU0NSSVBUT1JTID8gZ2V0T3duUHJvcGVydHlOYW1lcyhOYXRpdmVOdW1iZXIpIDogKFxuICAgIC8vIEVTMzpcbiAgICAnTUFYX1ZBTFVFLE1JTl9WQUxVRSxOYU4sTkVHQVRJVkVfSU5GSU5JVFksUE9TSVRJVkVfSU5GSU5JVFksJyArXG4gICAgLy8gRVMyMDE1IChpbiBjYXNlLCBpZiBtb2R1bGVzIHdpdGggRVMyMDE1IE51bWJlciBzdGF0aWNzIHJlcXVpcmVkIGJlZm9yZSk6XG4gICAgJ0VQU0lMT04saXNGaW5pdGUsaXNJbnRlZ2VyLGlzTmFOLGlzU2FmZUludGVnZXIsTUFYX1NBRkVfSU5URUdFUiwnICtcbiAgICAnTUlOX1NBRkVfSU5URUdFUixwYXJzZUZsb2F0LHBhcnNlSW50LGlzSW50ZWdlciwnICtcbiAgICAvLyBFU05leHRcbiAgICAnZnJvbVN0cmluZyxyYW5nZSdcbiAgKS5zcGxpdCgnLCcpLCBqID0gMCwga2V5OyBrZXlzLmxlbmd0aCA+IGo7IGorKykge1xuICAgIGlmIChoYXMoTmF0aXZlTnVtYmVyLCBrZXkgPSBrZXlzW2pdKSAmJiAhaGFzKE51bWJlcldyYXBwZXIsIGtleSkpIHtcbiAgICAgIGRlZmluZVByb3BlcnR5KE51bWJlcldyYXBwZXIsIGtleSwgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKE5hdGl2ZU51bWJlciwga2V5KSk7XG4gICAgfVxuICB9XG4gIE51bWJlcldyYXBwZXIucHJvdG90eXBlID0gTnVtYmVyUHJvdG90eXBlO1xuICBOdW1iZXJQcm90b3R5cGUuY29uc3RydWN0b3IgPSBOdW1iZXJXcmFwcGVyO1xuICByZWRlZmluZShnbG9iYWwsIE5VTUJFUiwgTnVtYmVyV3JhcHBlcik7XG59XG4iLCJ2YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcblxuLy8gYE51bWJlci5FUFNJTE9OYCBjb25zdGFudFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1udW1iZXIuZXBzaWxvblxuJCh7IHRhcmdldDogJ051bWJlcicsIHN0YXQ6IHRydWUgfSwge1xuICBFUFNJTE9OOiBNYXRoLnBvdygyLCAtNTIpXG59KTtcbiIsInZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIG51bWJlcklzRmluaXRlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL251bWJlci1pcy1maW5pdGUnKTtcblxuLy8gYE51bWJlci5pc0Zpbml0ZWAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW51bWJlci5pc2Zpbml0ZVxuJCh7IHRhcmdldDogJ051bWJlcicsIHN0YXQ6IHRydWUgfSwgeyBpc0Zpbml0ZTogbnVtYmVySXNGaW5pdGUgfSk7XG4iLCJ2YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBpc0ludGVnZXIgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtaW50ZWdlcicpO1xuXG4vLyBgTnVtYmVyLmlzSW50ZWdlcmAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW51bWJlci5pc2ludGVnZXJcbiQoeyB0YXJnZXQ6ICdOdW1iZXInLCBzdGF0OiB0cnVlIH0sIHtcbiAgaXNJbnRlZ2VyOiBpc0ludGVnZXJcbn0pO1xuIiwidmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG5cbi8vIGBOdW1iZXIuaXNOYU5gIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1udW1iZXIuaXNuYW5cbiQoeyB0YXJnZXQ6ICdOdW1iZXInLCBzdGF0OiB0cnVlIH0sIHtcbiAgaXNOYU46IGZ1bmN0aW9uIGlzTmFOKG51bWJlcikge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmVcbiAgICByZXR1cm4gbnVtYmVyICE9IG51bWJlcjtcbiAgfVxufSk7XG4iLCJ2YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBpc0ludGVnZXIgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtaW50ZWdlcicpO1xuXG52YXIgYWJzID0gTWF0aC5hYnM7XG5cbi8vIGBOdW1iZXIuaXNTYWZlSW50ZWdlcmAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW51bWJlci5pc3NhZmVpbnRlZ2VyXG4kKHsgdGFyZ2V0OiAnTnVtYmVyJywgc3RhdDogdHJ1ZSB9LCB7XG4gIGlzU2FmZUludGVnZXI6IGZ1bmN0aW9uIGlzU2FmZUludGVnZXIobnVtYmVyKSB7XG4gICAgcmV0dXJuIGlzSW50ZWdlcihudW1iZXIpICYmIGFicyhudW1iZXIpIDw9IDB4MUZGRkZGRkZGRkZGRkY7XG4gIH1cbn0pO1xuIiwidmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG5cbi8vIGBOdW1iZXIuTUFYX1NBRkVfSU5URUdFUmAgY29uc3RhbnRcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtbnVtYmVyLm1heF9zYWZlX2ludGVnZXJcbiQoeyB0YXJnZXQ6ICdOdW1iZXInLCBzdGF0OiB0cnVlIH0sIHtcbiAgTUFYX1NBRkVfSU5URUdFUjogMHgxRkZGRkZGRkZGRkZGRlxufSk7XG4iLCJ2YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcblxuLy8gYE51bWJlci5NSU5fU0FGRV9JTlRFR0VSYCBjb25zdGFudFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1udW1iZXIubWluX3NhZmVfaW50ZWdlclxuJCh7IHRhcmdldDogJ051bWJlcicsIHN0YXQ6IHRydWUgfSwge1xuICBNSU5fU0FGRV9JTlRFR0VSOiAtMHgxRkZGRkZGRkZGRkZGRlxufSk7XG4iLCJ2YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBwYXJzZUZsb2F0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL251bWJlci1wYXJzZS1mbG9hdCcpO1xuXG4vLyBgTnVtYmVyLnBhcnNlRmxvYXRgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1udW1iZXIucGFyc2VGbG9hdFxuJCh7IHRhcmdldDogJ051bWJlcicsIHN0YXQ6IHRydWUsIGZvcmNlZDogTnVtYmVyLnBhcnNlRmxvYXQgIT0gcGFyc2VGbG9hdCB9LCB7XG4gIHBhcnNlRmxvYXQ6IHBhcnNlRmxvYXRcbn0pO1xuIiwidmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgcGFyc2VJbnQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvbnVtYmVyLXBhcnNlLWludCcpO1xuXG4vLyBgTnVtYmVyLnBhcnNlSW50YCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtbnVtYmVyLnBhcnNlaW50XG4kKHsgdGFyZ2V0OiAnTnVtYmVyJywgc3RhdDogdHJ1ZSwgZm9yY2VkOiBOdW1iZXIucGFyc2VJbnQgIT0gcGFyc2VJbnQgfSwge1xuICBwYXJzZUludDogcGFyc2VJbnRcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgdG9JbnRlZ2VyID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWludGVnZXInKTtcbnZhciB0aGlzTnVtYmVyVmFsdWUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdGhpcy1udW1iZXItdmFsdWUnKTtcbnZhciByZXBlYXQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc3RyaW5nLXJlcGVhdCcpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG5cbnZhciBuYXRpdmVUb0ZpeGVkID0gMS4wLnRvRml4ZWQ7XG52YXIgZmxvb3IgPSBNYXRoLmZsb29yO1xuXG52YXIgcG93ID0gZnVuY3Rpb24gKHgsIG4sIGFjYykge1xuICByZXR1cm4gbiA9PT0gMCA/IGFjYyA6IG4gJSAyID09PSAxID8gcG93KHgsIG4gLSAxLCBhY2MgKiB4KSA6IHBvdyh4ICogeCwgbiAvIDIsIGFjYyk7XG59O1xuXG52YXIgbG9nID0gZnVuY3Rpb24gKHgpIHtcbiAgdmFyIG4gPSAwO1xuICB2YXIgeDIgPSB4O1xuICB3aGlsZSAoeDIgPj0gNDA5Nikge1xuICAgIG4gKz0gMTI7XG4gICAgeDIgLz0gNDA5NjtcbiAgfVxuICB3aGlsZSAoeDIgPj0gMikge1xuICAgIG4gKz0gMTtcbiAgICB4MiAvPSAyO1xuICB9IHJldHVybiBuO1xufTtcblxudmFyIEZPUkNFRCA9IG5hdGl2ZVRvRml4ZWQgJiYgKFxuICAwLjAwMDA4LnRvRml4ZWQoMykgIT09ICcwLjAwMCcgfHxcbiAgMC45LnRvRml4ZWQoMCkgIT09ICcxJyB8fFxuICAxLjI1NS50b0ZpeGVkKDIpICE9PSAnMS4yNScgfHxcbiAgMTAwMDAwMDAwMDAwMDAwMDEyOC4wLnRvRml4ZWQoMCkgIT09ICcxMDAwMDAwMDAwMDAwMDAwMTI4J1xuKSB8fCAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICAvLyBWOCB+IEFuZHJvaWQgNC4zLVxuICBuYXRpdmVUb0ZpeGVkLmNhbGwoe30pO1xufSk7XG5cbi8vIGBOdW1iZXIucHJvdG90eXBlLnRvRml4ZWRgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1udW1iZXIucHJvdG90eXBlLnRvZml4ZWRcbiQoeyB0YXJnZXQ6ICdOdW1iZXInLCBwcm90bzogdHJ1ZSwgZm9yY2VkOiBGT1JDRUQgfSwge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbWF4LXN0YXRlbWVudHNcbiAgdG9GaXhlZDogZnVuY3Rpb24gdG9GaXhlZChmcmFjdGlvbkRpZ2l0cykge1xuICAgIHZhciBudW1iZXIgPSB0aGlzTnVtYmVyVmFsdWUodGhpcyk7XG4gICAgdmFyIGZyYWN0RGlnaXRzID0gdG9JbnRlZ2VyKGZyYWN0aW9uRGlnaXRzKTtcbiAgICB2YXIgZGF0YSA9IFswLCAwLCAwLCAwLCAwLCAwXTtcbiAgICB2YXIgc2lnbiA9ICcnO1xuICAgIHZhciByZXN1bHQgPSAnMCc7XG4gICAgdmFyIGUsIHosIGosIGs7XG5cbiAgICB2YXIgbXVsdGlwbHkgPSBmdW5jdGlvbiAobiwgYykge1xuICAgICAgdmFyIGluZGV4ID0gLTE7XG4gICAgICB2YXIgYzIgPSBjO1xuICAgICAgd2hpbGUgKCsraW5kZXggPCA2KSB7XG4gICAgICAgIGMyICs9IG4gKiBkYXRhW2luZGV4XTtcbiAgICAgICAgZGF0YVtpbmRleF0gPSBjMiAlIDFlNztcbiAgICAgICAgYzIgPSBmbG9vcihjMiAvIDFlNyk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIHZhciBkaXZpZGUgPSBmdW5jdGlvbiAobikge1xuICAgICAgdmFyIGluZGV4ID0gNjtcbiAgICAgIHZhciBjID0gMDtcbiAgICAgIHdoaWxlICgtLWluZGV4ID49IDApIHtcbiAgICAgICAgYyArPSBkYXRhW2luZGV4XTtcbiAgICAgICAgZGF0YVtpbmRleF0gPSBmbG9vcihjIC8gbik7XG4gICAgICAgIGMgPSAoYyAlIG4pICogMWU3O1xuICAgICAgfVxuICAgIH07XG5cbiAgICB2YXIgZGF0YVRvU3RyaW5nID0gZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIGluZGV4ID0gNjtcbiAgICAgIHZhciBzID0gJyc7XG4gICAgICB3aGlsZSAoLS1pbmRleCA+PSAwKSB7XG4gICAgICAgIGlmIChzICE9PSAnJyB8fCBpbmRleCA9PT0gMCB8fCBkYXRhW2luZGV4XSAhPT0gMCkge1xuICAgICAgICAgIHZhciB0ID0gU3RyaW5nKGRhdGFbaW5kZXhdKTtcbiAgICAgICAgICBzID0gcyA9PT0gJycgPyB0IDogcyArIHJlcGVhdC5jYWxsKCcwJywgNyAtIHQubGVuZ3RoKSArIHQ7XG4gICAgICAgIH1cbiAgICAgIH0gcmV0dXJuIHM7XG4gICAgfTtcblxuICAgIGlmIChmcmFjdERpZ2l0cyA8IDAgfHwgZnJhY3REaWdpdHMgPiAyMCkgdGhyb3cgUmFuZ2VFcnJvcignSW5jb3JyZWN0IGZyYWN0aW9uIGRpZ2l0cycpO1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmVcbiAgICBpZiAobnVtYmVyICE9IG51bWJlcikgcmV0dXJuICdOYU4nO1xuICAgIGlmIChudW1iZXIgPD0gLTFlMjEgfHwgbnVtYmVyID49IDFlMjEpIHJldHVybiBTdHJpbmcobnVtYmVyKTtcbiAgICBpZiAobnVtYmVyIDwgMCkge1xuICAgICAgc2lnbiA9ICctJztcbiAgICAgIG51bWJlciA9IC1udW1iZXI7XG4gICAgfVxuICAgIGlmIChudW1iZXIgPiAxZS0yMSkge1xuICAgICAgZSA9IGxvZyhudW1iZXIgKiBwb3coMiwgNjksIDEpKSAtIDY5O1xuICAgICAgeiA9IGUgPCAwID8gbnVtYmVyICogcG93KDIsIC1lLCAxKSA6IG51bWJlciAvIHBvdygyLCBlLCAxKTtcbiAgICAgIHogKj0gMHgxMDAwMDAwMDAwMDAwMDtcbiAgICAgIGUgPSA1MiAtIGU7XG4gICAgICBpZiAoZSA+IDApIHtcbiAgICAgICAgbXVsdGlwbHkoMCwgeik7XG4gICAgICAgIGogPSBmcmFjdERpZ2l0cztcbiAgICAgICAgd2hpbGUgKGogPj0gNykge1xuICAgICAgICAgIG11bHRpcGx5KDFlNywgMCk7XG4gICAgICAgICAgaiAtPSA3O1xuICAgICAgICB9XG4gICAgICAgIG11bHRpcGx5KHBvdygxMCwgaiwgMSksIDApO1xuICAgICAgICBqID0gZSAtIDE7XG4gICAgICAgIHdoaWxlIChqID49IDIzKSB7XG4gICAgICAgICAgZGl2aWRlKDEgPDwgMjMpO1xuICAgICAgICAgIGogLT0gMjM7XG4gICAgICAgIH1cbiAgICAgICAgZGl2aWRlKDEgPDwgaik7XG4gICAgICAgIG11bHRpcGx5KDEsIDEpO1xuICAgICAgICBkaXZpZGUoMik7XG4gICAgICAgIHJlc3VsdCA9IGRhdGFUb1N0cmluZygpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbXVsdGlwbHkoMCwgeik7XG4gICAgICAgIG11bHRpcGx5KDEgPDwgLWUsIDApO1xuICAgICAgICByZXN1bHQgPSBkYXRhVG9TdHJpbmcoKSArIHJlcGVhdC5jYWxsKCcwJywgZnJhY3REaWdpdHMpO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoZnJhY3REaWdpdHMgPiAwKSB7XG4gICAgICBrID0gcmVzdWx0Lmxlbmd0aDtcbiAgICAgIHJlc3VsdCA9IHNpZ24gKyAoayA8PSBmcmFjdERpZ2l0c1xuICAgICAgICA/ICcwLicgKyByZXBlYXQuY2FsbCgnMCcsIGZyYWN0RGlnaXRzIC0gaykgKyByZXN1bHRcbiAgICAgICAgOiByZXN1bHQuc2xpY2UoMCwgayAtIGZyYWN0RGlnaXRzKSArICcuJyArIHJlc3VsdC5zbGljZShrIC0gZnJhY3REaWdpdHMpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVzdWx0ID0gc2lnbiArIHJlc3VsdDtcbiAgICB9IHJldHVybiByZXN1bHQ7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcbnZhciB0aGlzTnVtYmVyVmFsdWUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdGhpcy1udW1iZXItdmFsdWUnKTtcblxudmFyIG5hdGl2ZVRvUHJlY2lzaW9uID0gMS4wLnRvUHJlY2lzaW9uO1xuXG52YXIgRk9SQ0VEID0gZmFpbHMoZnVuY3Rpb24gKCkge1xuICAvLyBJRTctXG4gIHJldHVybiBuYXRpdmVUb1ByZWNpc2lvbi5jYWxsKDEsIHVuZGVmaW5lZCkgIT09ICcxJztcbn0pIHx8ICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gIC8vIFY4IH4gQW5kcm9pZCA0LjMtXG4gIG5hdGl2ZVRvUHJlY2lzaW9uLmNhbGwoe30pO1xufSk7XG5cbi8vIGBOdW1iZXIucHJvdG90eXBlLnRvUHJlY2lzaW9uYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtbnVtYmVyLnByb3RvdHlwZS50b3ByZWNpc2lvblxuJCh7IHRhcmdldDogJ051bWJlcicsIHByb3RvOiB0cnVlLCBmb3JjZWQ6IEZPUkNFRCB9LCB7XG4gIHRvUHJlY2lzaW9uOiBmdW5jdGlvbiB0b1ByZWNpc2lvbihwcmVjaXNpb24pIHtcbiAgICByZXR1cm4gcHJlY2lzaW9uID09PSB1bmRlZmluZWRcbiAgICAgID8gbmF0aXZlVG9QcmVjaXNpb24uY2FsbCh0aGlzTnVtYmVyVmFsdWUodGhpcykpXG4gICAgICA6IG5hdGl2ZVRvUHJlY2lzaW9uLmNhbGwodGhpc051bWJlclZhbHVlKHRoaXMpLCBwcmVjaXNpb24pO1xuICB9XG59KTtcbiIsInZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGFzc2lnbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtYXNzaWduJyk7XG5cbi8vIGBPYmplY3QuYXNzaWduYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtb2JqZWN0LmFzc2lnblxuJCh7IHRhcmdldDogJ09iamVjdCcsIHN0YXQ6IHRydWUsIGZvcmNlZDogT2JqZWN0LmFzc2lnbiAhPT0gYXNzaWduIH0sIHtcbiAgYXNzaWduOiBhc3NpZ25cbn0pO1xuIiwidmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVzY3JpcHRvcnMnKTtcbnZhciBjcmVhdGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWNyZWF0ZScpO1xuXG4vLyBgT2JqZWN0LmNyZWF0ZWAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW9iamVjdC5jcmVhdGVcbiQoeyB0YXJnZXQ6ICdPYmplY3QnLCBzdGF0OiB0cnVlLCBzaGFtOiAhREVTQ1JJUFRPUlMgfSwge1xuICBjcmVhdGU6IGNyZWF0ZVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZXNjcmlwdG9ycycpO1xudmFyIEZPUkNFRCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtcHJvdG90eXBlLWFjY2Vzc29ycy1mb3JjZWQnKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1vYmplY3QnKTtcbnZhciBhRnVuY3Rpb24gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYS1mdW5jdGlvbicpO1xudmFyIGRlZmluZVByb3BlcnR5TW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1kZWZpbmUtcHJvcGVydHknKTtcblxuLy8gYE9iamVjdC5wcm90b3R5cGUuX19kZWZpbmVHZXR0ZXJfX2AgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW9iamVjdC5wcm90b3R5cGUuX19kZWZpbmVHZXR0ZXJfX1xuaWYgKERFU0NSSVBUT1JTKSB7XG4gICQoeyB0YXJnZXQ6ICdPYmplY3QnLCBwcm90bzogdHJ1ZSwgZm9yY2VkOiBGT1JDRUQgfSwge1xuICAgIF9fZGVmaW5lR2V0dGVyX186IGZ1bmN0aW9uIF9fZGVmaW5lR2V0dGVyX18oUCwgZ2V0dGVyKSB7XG4gICAgICBkZWZpbmVQcm9wZXJ0eU1vZHVsZS5mKHRvT2JqZWN0KHRoaXMpLCBQLCB7IGdldDogYUZ1bmN0aW9uKGdldHRlciksIGVudW1lcmFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9KTtcbiAgICB9XG4gIH0pO1xufVxuIiwidmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVzY3JpcHRvcnMnKTtcbnZhciBkZWZpbmVQcm9wZXJ0aWVzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1kZWZpbmUtcHJvcGVydGllcycpO1xuXG4vLyBgT2JqZWN0LmRlZmluZVByb3BlcnRpZXNgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1vYmplY3QuZGVmaW5lcHJvcGVydGllc1xuJCh7IHRhcmdldDogJ09iamVjdCcsIHN0YXQ6IHRydWUsIGZvcmNlZDogIURFU0NSSVBUT1JTLCBzaGFtOiAhREVTQ1JJUFRPUlMgfSwge1xuICBkZWZpbmVQcm9wZXJ0aWVzOiBkZWZpbmVQcm9wZXJ0aWVzXG59KTtcbiIsInZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Rlc2NyaXB0b3JzJyk7XG52YXIgb2JqZWN0RGVmaW5lUHJvcGVydHlNb2RpbGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWRlZmluZS1wcm9wZXJ0eScpO1xuXG4vLyBgT2JqZWN0LmRlZmluZVByb3BlcnR5YCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtb2JqZWN0LmRlZmluZXByb3BlcnR5XG4kKHsgdGFyZ2V0OiAnT2JqZWN0Jywgc3RhdDogdHJ1ZSwgZm9yY2VkOiAhREVTQ1JJUFRPUlMsIHNoYW06ICFERVNDUklQVE9SUyB9LCB7XG4gIGRlZmluZVByb3BlcnR5OiBvYmplY3REZWZpbmVQcm9wZXJ0eU1vZGlsZS5mXG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Rlc2NyaXB0b3JzJyk7XG52YXIgRk9SQ0VEID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1wcm90b3R5cGUtYWNjZXNzb3JzLWZvcmNlZCcpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLW9iamVjdCcpO1xudmFyIGFGdW5jdGlvbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hLWZ1bmN0aW9uJyk7XG52YXIgZGVmaW5lUHJvcGVydHlNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWRlZmluZS1wcm9wZXJ0eScpO1xuXG4vLyBgT2JqZWN0LnByb3RvdHlwZS5fX2RlZmluZVNldHRlcl9fYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtb2JqZWN0LnByb3RvdHlwZS5fX2RlZmluZVNldHRlcl9fXG5pZiAoREVTQ1JJUFRPUlMpIHtcbiAgJCh7IHRhcmdldDogJ09iamVjdCcsIHByb3RvOiB0cnVlLCBmb3JjZWQ6IEZPUkNFRCB9LCB7XG4gICAgX19kZWZpbmVTZXR0ZXJfXzogZnVuY3Rpb24gX19kZWZpbmVTZXR0ZXJfXyhQLCBzZXR0ZXIpIHtcbiAgICAgIGRlZmluZVByb3BlcnR5TW9kdWxlLmYodG9PYmplY3QodGhpcyksIFAsIHsgc2V0OiBhRnVuY3Rpb24oc2V0dGVyKSwgZW51bWVyYWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0pO1xuICAgIH1cbiAgfSk7XG59XG4iLCJ2YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciAkZW50cmllcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtdG8tYXJyYXknKS5lbnRyaWVzO1xuXG4vLyBgT2JqZWN0LmVudHJpZXNgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1vYmplY3QuZW50cmllc1xuJCh7IHRhcmdldDogJ09iamVjdCcsIHN0YXQ6IHRydWUgfSwge1xuICBlbnRyaWVzOiBmdW5jdGlvbiBlbnRyaWVzKE8pIHtcbiAgICByZXR1cm4gJGVudHJpZXMoTyk7XG4gIH1cbn0pO1xuIiwidmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgRlJFRVpJTkcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnJlZXppbmcnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLW9iamVjdCcpO1xudmFyIG9uRnJlZXplID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ludGVybmFsLW1ldGFkYXRhJykub25GcmVlemU7XG5cbnZhciBuYXRpdmVGcmVlemUgPSBPYmplY3QuZnJlZXplO1xudmFyIEZBSUxTX09OX1BSSU1JVElWRVMgPSBmYWlscyhmdW5jdGlvbiAoKSB7IG5hdGl2ZUZyZWV6ZSgxKTsgfSk7XG5cbi8vIGBPYmplY3QuZnJlZXplYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtb2JqZWN0LmZyZWV6ZVxuJCh7IHRhcmdldDogJ09iamVjdCcsIHN0YXQ6IHRydWUsIGZvcmNlZDogRkFJTFNfT05fUFJJTUlUSVZFUywgc2hhbTogIUZSRUVaSU5HIH0sIHtcbiAgZnJlZXplOiBmdW5jdGlvbiBmcmVlemUoaXQpIHtcbiAgICByZXR1cm4gbmF0aXZlRnJlZXplICYmIGlzT2JqZWN0KGl0KSA/IG5hdGl2ZUZyZWV6ZShvbkZyZWV6ZShpdCkpIDogaXQ7XG4gIH1cbn0pO1xuIiwidmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgaXRlcmF0ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pdGVyYXRlJyk7XG52YXIgY3JlYXRlUHJvcGVydHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLXByb3BlcnR5Jyk7XG5cbi8vIGBPYmplY3QuZnJvbUVudHJpZXNgIG1ldGhvZFxuLy8gaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtb2JqZWN0LWZyb20tZW50cmllc1xuJCh7IHRhcmdldDogJ09iamVjdCcsIHN0YXQ6IHRydWUgfSwge1xuICBmcm9tRW50cmllczogZnVuY3Rpb24gZnJvbUVudHJpZXMoaXRlcmFibGUpIHtcbiAgICB2YXIgb2JqID0ge307XG4gICAgaXRlcmF0ZShpdGVyYWJsZSwgZnVuY3Rpb24gKGssIHYpIHtcbiAgICAgIGNyZWF0ZVByb3BlcnR5KG9iaiwgaywgdik7XG4gICAgfSwgeyBBU19FTlRSSUVTOiB0cnVlIH0pO1xuICAgIHJldHVybiBvYmo7XG4gIH1cbn0pO1xuIiwidmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcbnZhciB0b0luZGV4ZWRPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8taW5kZXhlZC1vYmplY3QnKTtcbnZhciBuYXRpdmVHZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1vd24tcHJvcGVydHktZGVzY3JpcHRvcicpLmY7XG52YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVzY3JpcHRvcnMnKTtcblxudmFyIEZBSUxTX09OX1BSSU1JVElWRVMgPSBmYWlscyhmdW5jdGlvbiAoKSB7IG5hdGl2ZUdldE93blByb3BlcnR5RGVzY3JpcHRvcigxKTsgfSk7XG52YXIgRk9SQ0VEID0gIURFU0NSSVBUT1JTIHx8IEZBSUxTX09OX1BSSU1JVElWRVM7XG5cbi8vIGBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtb2JqZWN0LmdldG93bnByb3BlcnR5ZGVzY3JpcHRvclxuJCh7IHRhcmdldDogJ09iamVjdCcsIHN0YXQ6IHRydWUsIGZvcmNlZDogRk9SQ0VELCBzaGFtOiAhREVTQ1JJUFRPUlMgfSwge1xuICBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I6IGZ1bmN0aW9uIGdldE93blByb3BlcnR5RGVzY3JpcHRvcihpdCwga2V5KSB7XG4gICAgcmV0dXJuIG5hdGl2ZUdldE93blByb3BlcnR5RGVzY3JpcHRvcih0b0luZGV4ZWRPYmplY3QoaXQpLCBrZXkpO1xuICB9XG59KTtcbiIsInZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Rlc2NyaXB0b3JzJyk7XG52YXIgb3duS2V5cyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vd24ta2V5cycpO1xudmFyIHRvSW5kZXhlZE9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1pbmRleGVkLW9iamVjdCcpO1xudmFyIGdldE93blByb3BlcnR5RGVzY3JpcHRvck1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9yJyk7XG52YXIgY3JlYXRlUHJvcGVydHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLXByb3BlcnR5Jyk7XG5cbi8vIGBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yc2AgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW9iamVjdC5nZXRvd25wcm9wZXJ0eWRlc2NyaXB0b3JzXG4kKHsgdGFyZ2V0OiAnT2JqZWN0Jywgc3RhdDogdHJ1ZSwgc2hhbTogIURFU0NSSVBUT1JTIH0sIHtcbiAgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yczogZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyhvYmplY3QpIHtcbiAgICB2YXIgTyA9IHRvSW5kZXhlZE9iamVjdChvYmplY3QpO1xuICAgIHZhciBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPSBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JNb2R1bGUuZjtcbiAgICB2YXIga2V5cyA9IG93bktleXMoTyk7XG4gICAgdmFyIHJlc3VsdCA9IHt9O1xuICAgIHZhciBpbmRleCA9IDA7XG4gICAgdmFyIGtleSwgZGVzY3JpcHRvcjtcbiAgICB3aGlsZSAoa2V5cy5sZW5ndGggPiBpbmRleCkge1xuICAgICAgZGVzY3JpcHRvciA9IGdldE93blByb3BlcnR5RGVzY3JpcHRvcihPLCBrZXkgPSBrZXlzW2luZGV4KytdKTtcbiAgICAgIGlmIChkZXNjcmlwdG9yICE9PSB1bmRlZmluZWQpIGNyZWF0ZVByb3BlcnR5KHJlc3VsdCwga2V5LCBkZXNjcmlwdG9yKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxufSk7XG4iLCJ2YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xudmFyIG5hdGl2ZUdldE93blByb3BlcnR5TmFtZXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1vd24tcHJvcGVydHktbmFtZXMtZXh0ZXJuYWwnKS5mO1xuXG52YXIgRkFJTFNfT05fUFJJTUlUSVZFUyA9IGZhaWxzKGZ1bmN0aW9uICgpIHsgcmV0dXJuICFPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcygxKTsgfSk7XG5cbi8vIGBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lc2AgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW9iamVjdC5nZXRvd25wcm9wZXJ0eW5hbWVzXG4kKHsgdGFyZ2V0OiAnT2JqZWN0Jywgc3RhdDogdHJ1ZSwgZm9yY2VkOiBGQUlMU19PTl9QUklNSVRJVkVTIH0sIHtcbiAgZ2V0T3duUHJvcGVydHlOYW1lczogbmF0aXZlR2V0T3duUHJvcGVydHlOYW1lc1xufSk7XG4iLCJ2YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLW9iamVjdCcpO1xudmFyIG5hdGl2ZUdldFByb3RvdHlwZU9mID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1nZXQtcHJvdG90eXBlLW9mJyk7XG52YXIgQ09SUkVDVF9QUk9UT1RZUEVfR0VUVEVSID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NvcnJlY3QtcHJvdG90eXBlLWdldHRlcicpO1xuXG52YXIgRkFJTFNfT05fUFJJTUlUSVZFUyA9IGZhaWxzKGZ1bmN0aW9uICgpIHsgbmF0aXZlR2V0UHJvdG90eXBlT2YoMSk7IH0pO1xuXG4vLyBgT2JqZWN0LmdldFByb3RvdHlwZU9mYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtb2JqZWN0LmdldHByb3RvdHlwZW9mXG4kKHsgdGFyZ2V0OiAnT2JqZWN0Jywgc3RhdDogdHJ1ZSwgZm9yY2VkOiBGQUlMU19PTl9QUklNSVRJVkVTLCBzaGFtOiAhQ09SUkVDVF9QUk9UT1RZUEVfR0VUVEVSIH0sIHtcbiAgZ2V0UHJvdG90eXBlT2Y6IGZ1bmN0aW9uIGdldFByb3RvdHlwZU9mKGl0KSB7XG4gICAgcmV0dXJuIG5hdGl2ZUdldFByb3RvdHlwZU9mKHRvT2JqZWN0KGl0KSk7XG4gIH1cbn0pO1xuXG4iLCJ2YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLW9iamVjdCcpO1xuXG52YXIgbmF0aXZlSXNFeHRlbnNpYmxlID0gT2JqZWN0LmlzRXh0ZW5zaWJsZTtcbnZhciBGQUlMU19PTl9QUklNSVRJVkVTID0gZmFpbHMoZnVuY3Rpb24gKCkgeyBuYXRpdmVJc0V4dGVuc2libGUoMSk7IH0pO1xuXG4vLyBgT2JqZWN0LmlzRXh0ZW5zaWJsZWAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW9iamVjdC5pc2V4dGVuc2libGVcbiQoeyB0YXJnZXQ6ICdPYmplY3QnLCBzdGF0OiB0cnVlLCBmb3JjZWQ6IEZBSUxTX09OX1BSSU1JVElWRVMgfSwge1xuICBpc0V4dGVuc2libGU6IGZ1bmN0aW9uIGlzRXh0ZW5zaWJsZShpdCkge1xuICAgIHJldHVybiBpc09iamVjdChpdCkgPyBuYXRpdmVJc0V4dGVuc2libGUgPyBuYXRpdmVJc0V4dGVuc2libGUoaXQpIDogdHJ1ZSA6IGZhbHNlO1xuICB9XG59KTtcbiIsInZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtb2JqZWN0Jyk7XG5cbnZhciBuYXRpdmVJc0Zyb3plbiA9IE9iamVjdC5pc0Zyb3plbjtcbnZhciBGQUlMU19PTl9QUklNSVRJVkVTID0gZmFpbHMoZnVuY3Rpb24gKCkgeyBuYXRpdmVJc0Zyb3plbigxKTsgfSk7XG5cbi8vIGBPYmplY3QuaXNGcm96ZW5gIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1vYmplY3QuaXNmcm96ZW5cbiQoeyB0YXJnZXQ6ICdPYmplY3QnLCBzdGF0OiB0cnVlLCBmb3JjZWQ6IEZBSUxTX09OX1BSSU1JVElWRVMgfSwge1xuICBpc0Zyb3plbjogZnVuY3Rpb24gaXNGcm96ZW4oaXQpIHtcbiAgICByZXR1cm4gaXNPYmplY3QoaXQpID8gbmF0aXZlSXNGcm96ZW4gPyBuYXRpdmVJc0Zyb3plbihpdCkgOiBmYWxzZSA6IHRydWU7XG4gIH1cbn0pO1xuIiwidmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1vYmplY3QnKTtcblxudmFyIG5hdGl2ZUlzU2VhbGVkID0gT2JqZWN0LmlzU2VhbGVkO1xudmFyIEZBSUxTX09OX1BSSU1JVElWRVMgPSBmYWlscyhmdW5jdGlvbiAoKSB7IG5hdGl2ZUlzU2VhbGVkKDEpOyB9KTtcblxuLy8gYE9iamVjdC5pc1NlYWxlZGAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW9iamVjdC5pc3NlYWxlZFxuJCh7IHRhcmdldDogJ09iamVjdCcsIHN0YXQ6IHRydWUsIGZvcmNlZDogRkFJTFNfT05fUFJJTUlUSVZFUyB9LCB7XG4gIGlzU2VhbGVkOiBmdW5jdGlvbiBpc1NlYWxlZChpdCkge1xuICAgIHJldHVybiBpc09iamVjdChpdCkgPyBuYXRpdmVJc1NlYWxlZCA/IG5hdGl2ZUlzU2VhbGVkKGl0KSA6IGZhbHNlIDogdHJ1ZTtcbiAgfVxufSk7XG4iLCJ2YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBpcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zYW1lLXZhbHVlJyk7XG5cbi8vIGBPYmplY3QuaXNgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1vYmplY3QuaXNcbiQoeyB0YXJnZXQ6ICdPYmplY3QnLCBzdGF0OiB0cnVlIH0sIHtcbiAgaXM6IGlzXG59KTtcbiIsInZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLW9iamVjdCcpO1xudmFyIG5hdGl2ZUtleXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWtleXMnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xuXG52YXIgRkFJTFNfT05fUFJJTUlUSVZFUyA9IGZhaWxzKGZ1bmN0aW9uICgpIHsgbmF0aXZlS2V5cygxKTsgfSk7XG5cbi8vIGBPYmplY3Qua2V5c2AgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW9iamVjdC5rZXlzXG4kKHsgdGFyZ2V0OiAnT2JqZWN0Jywgc3RhdDogdHJ1ZSwgZm9yY2VkOiBGQUlMU19PTl9QUklNSVRJVkVTIH0sIHtcbiAga2V5czogZnVuY3Rpb24ga2V5cyhpdCkge1xuICAgIHJldHVybiBuYXRpdmVLZXlzKHRvT2JqZWN0KGl0KSk7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVzY3JpcHRvcnMnKTtcbnZhciBGT1JDRUQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LXByb3RvdHlwZS1hY2Nlc3NvcnMtZm9yY2VkJyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tb2JqZWN0Jyk7XG52YXIgdG9QcmltaXRpdmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tcHJpbWl0aXZlJyk7XG52YXIgZ2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1wcm90b3R5cGUtb2YnKTtcbnZhciBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1vd24tcHJvcGVydHktZGVzY3JpcHRvcicpLmY7XG5cbi8vIGBPYmplY3QucHJvdG90eXBlLl9fbG9va3VwR2V0dGVyX19gIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1vYmplY3QucHJvdG90eXBlLl9fbG9va3VwR2V0dGVyX19cbmlmIChERVNDUklQVE9SUykge1xuICAkKHsgdGFyZ2V0OiAnT2JqZWN0JywgcHJvdG86IHRydWUsIGZvcmNlZDogRk9SQ0VEIH0sIHtcbiAgICBfX2xvb2t1cEdldHRlcl9fOiBmdW5jdGlvbiBfX2xvb2t1cEdldHRlcl9fKFApIHtcbiAgICAgIHZhciBPID0gdG9PYmplY3QodGhpcyk7XG4gICAgICB2YXIga2V5ID0gdG9QcmltaXRpdmUoUCwgdHJ1ZSk7XG4gICAgICB2YXIgZGVzYztcbiAgICAgIGRvIHtcbiAgICAgICAgaWYgKGRlc2MgPSBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoTywga2V5KSkgcmV0dXJuIGRlc2MuZ2V0O1xuICAgICAgfSB3aGlsZSAoTyA9IGdldFByb3RvdHlwZU9mKE8pKTtcbiAgICB9XG4gIH0pO1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVzY3JpcHRvcnMnKTtcbnZhciBGT1JDRUQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LXByb3RvdHlwZS1hY2Nlc3NvcnMtZm9yY2VkJyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tb2JqZWN0Jyk7XG52YXIgdG9QcmltaXRpdmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tcHJpbWl0aXZlJyk7XG52YXIgZ2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1wcm90b3R5cGUtb2YnKTtcbnZhciBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1vd24tcHJvcGVydHktZGVzY3JpcHRvcicpLmY7XG5cbi8vIGBPYmplY3QucHJvdG90eXBlLl9fbG9va3VwU2V0dGVyX19gIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1vYmplY3QucHJvdG90eXBlLl9fbG9va3VwU2V0dGVyX19cbmlmIChERVNDUklQVE9SUykge1xuICAkKHsgdGFyZ2V0OiAnT2JqZWN0JywgcHJvdG86IHRydWUsIGZvcmNlZDogRk9SQ0VEIH0sIHtcbiAgICBfX2xvb2t1cFNldHRlcl9fOiBmdW5jdGlvbiBfX2xvb2t1cFNldHRlcl9fKFApIHtcbiAgICAgIHZhciBPID0gdG9PYmplY3QodGhpcyk7XG4gICAgICB2YXIga2V5ID0gdG9QcmltaXRpdmUoUCwgdHJ1ZSk7XG4gICAgICB2YXIgZGVzYztcbiAgICAgIGRvIHtcbiAgICAgICAgaWYgKGRlc2MgPSBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoTywga2V5KSkgcmV0dXJuIGRlc2Muc2V0O1xuICAgICAgfSB3aGlsZSAoTyA9IGdldFByb3RvdHlwZU9mKE8pKTtcbiAgICB9XG4gIH0pO1xufVxuIiwidmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtb2JqZWN0Jyk7XG52YXIgb25GcmVlemUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaW50ZXJuYWwtbWV0YWRhdGEnKS5vbkZyZWV6ZTtcbnZhciBGUkVFWklORyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mcmVlemluZycpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG5cbnZhciBuYXRpdmVQcmV2ZW50RXh0ZW5zaW9ucyA9IE9iamVjdC5wcmV2ZW50RXh0ZW5zaW9ucztcbnZhciBGQUlMU19PTl9QUklNSVRJVkVTID0gZmFpbHMoZnVuY3Rpb24gKCkgeyBuYXRpdmVQcmV2ZW50RXh0ZW5zaW9ucygxKTsgfSk7XG5cbi8vIGBPYmplY3QucHJldmVudEV4dGVuc2lvbnNgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1vYmplY3QucHJldmVudGV4dGVuc2lvbnNcbiQoeyB0YXJnZXQ6ICdPYmplY3QnLCBzdGF0OiB0cnVlLCBmb3JjZWQ6IEZBSUxTX09OX1BSSU1JVElWRVMsIHNoYW06ICFGUkVFWklORyB9LCB7XG4gIHByZXZlbnRFeHRlbnNpb25zOiBmdW5jdGlvbiBwcmV2ZW50RXh0ZW5zaW9ucyhpdCkge1xuICAgIHJldHVybiBuYXRpdmVQcmV2ZW50RXh0ZW5zaW9ucyAmJiBpc09iamVjdChpdCkgPyBuYXRpdmVQcmV2ZW50RXh0ZW5zaW9ucyhvbkZyZWV6ZShpdCkpIDogaXQ7XG4gIH1cbn0pO1xuIiwidmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtb2JqZWN0Jyk7XG52YXIgb25GcmVlemUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaW50ZXJuYWwtbWV0YWRhdGEnKS5vbkZyZWV6ZTtcbnZhciBGUkVFWklORyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mcmVlemluZycpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG5cbnZhciBuYXRpdmVTZWFsID0gT2JqZWN0LnNlYWw7XG52YXIgRkFJTFNfT05fUFJJTUlUSVZFUyA9IGZhaWxzKGZ1bmN0aW9uICgpIHsgbmF0aXZlU2VhbCgxKTsgfSk7XG5cbi8vIGBPYmplY3Quc2VhbGAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW9iamVjdC5zZWFsXG4kKHsgdGFyZ2V0OiAnT2JqZWN0Jywgc3RhdDogdHJ1ZSwgZm9yY2VkOiBGQUlMU19PTl9QUklNSVRJVkVTLCBzaGFtOiAhRlJFRVpJTkcgfSwge1xuICBzZWFsOiBmdW5jdGlvbiBzZWFsKGl0KSB7XG4gICAgcmV0dXJuIG5hdGl2ZVNlYWwgJiYgaXNPYmplY3QoaXQpID8gbmF0aXZlU2VhbChvbkZyZWV6ZShpdCkpIDogaXQ7XG4gIH1cbn0pO1xuIiwidmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgc2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LXNldC1wcm90b3R5cGUtb2YnKTtcblxuLy8gYE9iamVjdC5zZXRQcm90b3R5cGVPZmAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW9iamVjdC5zZXRwcm90b3R5cGVvZlxuJCh7IHRhcmdldDogJ09iamVjdCcsIHN0YXQ6IHRydWUgfSwge1xuICBzZXRQcm90b3R5cGVPZjogc2V0UHJvdG90eXBlT2Zcbn0pO1xuIiwidmFyIFRPX1NUUklOR19UQUdfU1VQUE9SVCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1zdHJpbmctdGFnLXN1cHBvcnQnKTtcbnZhciByZWRlZmluZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZWRlZmluZScpO1xudmFyIHRvU3RyaW5nID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC10by1zdHJpbmcnKTtcblxuLy8gYE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmdgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1vYmplY3QucHJvdG90eXBlLnRvc3RyaW5nXG5pZiAoIVRPX1NUUklOR19UQUdfU1VQUE9SVCkge1xuICByZWRlZmluZShPYmplY3QucHJvdG90eXBlLCAndG9TdHJpbmcnLCB0b1N0cmluZywgeyB1bnNhZmU6IHRydWUgfSk7XG59XG4iLCJ2YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciAkdmFsdWVzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC10by1hcnJheScpLnZhbHVlcztcblxuLy8gYE9iamVjdC52YWx1ZXNgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1vYmplY3QudmFsdWVzXG4kKHsgdGFyZ2V0OiAnT2JqZWN0Jywgc3RhdDogdHJ1ZSB9LCB7XG4gIHZhbHVlczogZnVuY3Rpb24gdmFsdWVzKE8pIHtcbiAgICByZXR1cm4gJHZhbHVlcyhPKTtcbiAgfVxufSk7XG4iLCJ2YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBwYXJzZUZsb2F0SW1wbGVtZW50YXRpb24gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvbnVtYmVyLXBhcnNlLWZsb2F0Jyk7XG5cbi8vIGBwYXJzZUZsb2F0YCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtcGFyc2VmbG9hdC1zdHJpbmdcbiQoeyBnbG9iYWw6IHRydWUsIGZvcmNlZDogcGFyc2VGbG9hdCAhPSBwYXJzZUZsb2F0SW1wbGVtZW50YXRpb24gfSwge1xuICBwYXJzZUZsb2F0OiBwYXJzZUZsb2F0SW1wbGVtZW50YXRpb25cbn0pO1xuIiwidmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgcGFyc2VJbnRJbXBsZW1lbnRhdGlvbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9udW1iZXItcGFyc2UtaW50Jyk7XG5cbi8vIGBwYXJzZUludGAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXBhcnNlaW50LXN0cmluZy1yYWRpeFxuJCh7IGdsb2JhbDogdHJ1ZSwgZm9yY2VkOiBwYXJzZUludCAhPSBwYXJzZUludEltcGxlbWVudGF0aW9uIH0sIHtcbiAgcGFyc2VJbnQ6IHBhcnNlSW50SW1wbGVtZW50YXRpb25cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgYUZ1bmN0aW9uID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2EtZnVuY3Rpb24nKTtcbnZhciBuZXdQcm9taXNlQ2FwYWJpbGl0eU1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9uZXctcHJvbWlzZS1jYXBhYmlsaXR5Jyk7XG52YXIgcGVyZm9ybSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9wZXJmb3JtJyk7XG52YXIgaXRlcmF0ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pdGVyYXRlJyk7XG5cbi8vIGBQcm9taXNlLmFsbFNldHRsZWRgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1wcm9taXNlLmFsbHNldHRsZWRcbiQoeyB0YXJnZXQ6ICdQcm9taXNlJywgc3RhdDogdHJ1ZSB9LCB7XG4gIGFsbFNldHRsZWQ6IGZ1bmN0aW9uIGFsbFNldHRsZWQoaXRlcmFibGUpIHtcbiAgICB2YXIgQyA9IHRoaXM7XG4gICAgdmFyIGNhcGFiaWxpdHkgPSBuZXdQcm9taXNlQ2FwYWJpbGl0eU1vZHVsZS5mKEMpO1xuICAgIHZhciByZXNvbHZlID0gY2FwYWJpbGl0eS5yZXNvbHZlO1xuICAgIHZhciByZWplY3QgPSBjYXBhYmlsaXR5LnJlamVjdDtcbiAgICB2YXIgcmVzdWx0ID0gcGVyZm9ybShmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgcHJvbWlzZVJlc29sdmUgPSBhRnVuY3Rpb24oQy5yZXNvbHZlKTtcbiAgICAgIHZhciB2YWx1ZXMgPSBbXTtcbiAgICAgIHZhciBjb3VudGVyID0gMDtcbiAgICAgIHZhciByZW1haW5pbmcgPSAxO1xuICAgICAgaXRlcmF0ZShpdGVyYWJsZSwgZnVuY3Rpb24gKHByb21pc2UpIHtcbiAgICAgICAgdmFyIGluZGV4ID0gY291bnRlcisrO1xuICAgICAgICB2YXIgYWxyZWFkeUNhbGxlZCA9IGZhbHNlO1xuICAgICAgICB2YWx1ZXMucHVzaCh1bmRlZmluZWQpO1xuICAgICAgICByZW1haW5pbmcrKztcbiAgICAgICAgcHJvbWlzZVJlc29sdmUuY2FsbChDLCBwcm9taXNlKS50aGVuKGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgIGlmIChhbHJlYWR5Q2FsbGVkKSByZXR1cm47XG4gICAgICAgICAgYWxyZWFkeUNhbGxlZCA9IHRydWU7XG4gICAgICAgICAgdmFsdWVzW2luZGV4XSA9IHsgc3RhdHVzOiAnZnVsZmlsbGVkJywgdmFsdWU6IHZhbHVlIH07XG4gICAgICAgICAgLS1yZW1haW5pbmcgfHwgcmVzb2x2ZSh2YWx1ZXMpO1xuICAgICAgICB9LCBmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICAgICAgICBpZiAoYWxyZWFkeUNhbGxlZCkgcmV0dXJuO1xuICAgICAgICAgIGFscmVhZHlDYWxsZWQgPSB0cnVlO1xuICAgICAgICAgIHZhbHVlc1tpbmRleF0gPSB7IHN0YXR1czogJ3JlamVjdGVkJywgcmVhc29uOiBlcnJvciB9O1xuICAgICAgICAgIC0tcmVtYWluaW5nIHx8IHJlc29sdmUodmFsdWVzKTtcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICAgIC0tcmVtYWluaW5nIHx8IHJlc29sdmUodmFsdWVzKTtcbiAgICB9KTtcbiAgICBpZiAocmVzdWx0LmVycm9yKSByZWplY3QocmVzdWx0LnZhbHVlKTtcbiAgICByZXR1cm4gY2FwYWJpbGl0eS5wcm9taXNlO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGFGdW5jdGlvbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hLWZ1bmN0aW9uJyk7XG52YXIgZ2V0QnVpbHRJbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nZXQtYnVpbHQtaW4nKTtcbnZhciBuZXdQcm9taXNlQ2FwYWJpbGl0eU1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9uZXctcHJvbWlzZS1jYXBhYmlsaXR5Jyk7XG52YXIgcGVyZm9ybSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9wZXJmb3JtJyk7XG52YXIgaXRlcmF0ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pdGVyYXRlJyk7XG5cbnZhciBQUk9NSVNFX0FOWV9FUlJPUiA9ICdObyBvbmUgcHJvbWlzZSByZXNvbHZlZCc7XG5cbi8vIGBQcm9taXNlLmFueWAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXByb21pc2UuYW55XG4kKHsgdGFyZ2V0OiAnUHJvbWlzZScsIHN0YXQ6IHRydWUgfSwge1xuICBhbnk6IGZ1bmN0aW9uIGFueShpdGVyYWJsZSkge1xuICAgIHZhciBDID0gdGhpcztcbiAgICB2YXIgY2FwYWJpbGl0eSA9IG5ld1Byb21pc2VDYXBhYmlsaXR5TW9kdWxlLmYoQyk7XG4gICAgdmFyIHJlc29sdmUgPSBjYXBhYmlsaXR5LnJlc29sdmU7XG4gICAgdmFyIHJlamVjdCA9IGNhcGFiaWxpdHkucmVqZWN0O1xuICAgIHZhciByZXN1bHQgPSBwZXJmb3JtKGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBwcm9taXNlUmVzb2x2ZSA9IGFGdW5jdGlvbihDLnJlc29sdmUpO1xuICAgICAgdmFyIGVycm9ycyA9IFtdO1xuICAgICAgdmFyIGNvdW50ZXIgPSAwO1xuICAgICAgdmFyIHJlbWFpbmluZyA9IDE7XG4gICAgICB2YXIgYWxyZWFkeVJlc29sdmVkID0gZmFsc2U7XG4gICAgICBpdGVyYXRlKGl0ZXJhYmxlLCBmdW5jdGlvbiAocHJvbWlzZSkge1xuICAgICAgICB2YXIgaW5kZXggPSBjb3VudGVyKys7XG4gICAgICAgIHZhciBhbHJlYWR5UmVqZWN0ZWQgPSBmYWxzZTtcbiAgICAgICAgZXJyb3JzLnB1c2godW5kZWZpbmVkKTtcbiAgICAgICAgcmVtYWluaW5nKys7XG4gICAgICAgIHByb21pc2VSZXNvbHZlLmNhbGwoQywgcHJvbWlzZSkudGhlbihmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICBpZiAoYWxyZWFkeVJlamVjdGVkIHx8IGFscmVhZHlSZXNvbHZlZCkgcmV0dXJuO1xuICAgICAgICAgIGFscmVhZHlSZXNvbHZlZCA9IHRydWU7XG4gICAgICAgICAgcmVzb2x2ZSh2YWx1ZSk7XG4gICAgICAgIH0sIGZ1bmN0aW9uIChlcnJvcikge1xuICAgICAgICAgIGlmIChhbHJlYWR5UmVqZWN0ZWQgfHwgYWxyZWFkeVJlc29sdmVkKSByZXR1cm47XG4gICAgICAgICAgYWxyZWFkeVJlamVjdGVkID0gdHJ1ZTtcbiAgICAgICAgICBlcnJvcnNbaW5kZXhdID0gZXJyb3I7XG4gICAgICAgICAgLS1yZW1haW5pbmcgfHwgcmVqZWN0KG5ldyAoZ2V0QnVpbHRJbignQWdncmVnYXRlRXJyb3InKSkoZXJyb3JzLCBQUk9NSVNFX0FOWV9FUlJPUikpO1xuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgICAgLS1yZW1haW5pbmcgfHwgcmVqZWN0KG5ldyAoZ2V0QnVpbHRJbignQWdncmVnYXRlRXJyb3InKSkoZXJyb3JzLCBQUk9NSVNFX0FOWV9FUlJPUikpO1xuICAgIH0pO1xuICAgIGlmIChyZXN1bHQuZXJyb3IpIHJlamVjdChyZXN1bHQudmFsdWUpO1xuICAgIHJldHVybiBjYXBhYmlsaXR5LnByb21pc2U7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgSVNfUFVSRSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1wdXJlJyk7XG52YXIgTmF0aXZlUHJvbWlzZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9uYXRpdmUtcHJvbWlzZS1jb25zdHJ1Y3RvcicpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG52YXIgZ2V0QnVpbHRJbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nZXQtYnVpbHQtaW4nKTtcbnZhciBzcGVjaWVzQ29uc3RydWN0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc3BlY2llcy1jb25zdHJ1Y3RvcicpO1xudmFyIHByb21pc2VSZXNvbHZlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3Byb21pc2UtcmVzb2x2ZScpO1xudmFyIHJlZGVmaW5lID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlZGVmaW5lJyk7XG5cbi8vIFNhZmFyaSBidWcgaHR0cHM6Ly9idWdzLndlYmtpdC5vcmcvc2hvd19idWcuY2dpP2lkPTIwMDgyOVxudmFyIE5PTl9HRU5FUklDID0gISFOYXRpdmVQcm9taXNlICYmIGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgTmF0aXZlUHJvbWlzZS5wcm90b3R5cGVbJ2ZpbmFsbHknXS5jYWxsKHsgdGhlbjogZnVuY3Rpb24gKCkgeyAvKiBlbXB0eSAqLyB9IH0sIGZ1bmN0aW9uICgpIHsgLyogZW1wdHkgKi8gfSk7XG59KTtcblxuLy8gYFByb21pc2UucHJvdG90eXBlLmZpbmFsbHlgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1wcm9taXNlLnByb3RvdHlwZS5maW5hbGx5XG4kKHsgdGFyZ2V0OiAnUHJvbWlzZScsIHByb3RvOiB0cnVlLCByZWFsOiB0cnVlLCBmb3JjZWQ6IE5PTl9HRU5FUklDIH0sIHtcbiAgJ2ZpbmFsbHknOiBmdW5jdGlvbiAob25GaW5hbGx5KSB7XG4gICAgdmFyIEMgPSBzcGVjaWVzQ29uc3RydWN0b3IodGhpcywgZ2V0QnVpbHRJbignUHJvbWlzZScpKTtcbiAgICB2YXIgaXNGdW5jdGlvbiA9IHR5cGVvZiBvbkZpbmFsbHkgPT0gJ2Z1bmN0aW9uJztcbiAgICByZXR1cm4gdGhpcy50aGVuKFxuICAgICAgaXNGdW5jdGlvbiA/IGZ1bmN0aW9uICh4KSB7XG4gICAgICAgIHJldHVybiBwcm9taXNlUmVzb2x2ZShDLCBvbkZpbmFsbHkoKSkudGhlbihmdW5jdGlvbiAoKSB7IHJldHVybiB4OyB9KTtcbiAgICAgIH0gOiBvbkZpbmFsbHksXG4gICAgICBpc0Z1bmN0aW9uID8gZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgcmV0dXJuIHByb21pc2VSZXNvbHZlKEMsIG9uRmluYWxseSgpKS50aGVuKGZ1bmN0aW9uICgpIHsgdGhyb3cgZTsgfSk7XG4gICAgICB9IDogb25GaW5hbGx5XG4gICAgKTtcbiAgfVxufSk7XG5cbi8vIHBhdGNoIG5hdGl2ZSBQcm9taXNlLnByb3RvdHlwZSBmb3IgbmF0aXZlIGFzeW5jIGZ1bmN0aW9uc1xuaWYgKCFJU19QVVJFICYmIHR5cGVvZiBOYXRpdmVQcm9taXNlID09ICdmdW5jdGlvbicgJiYgIU5hdGl2ZVByb21pc2UucHJvdG90eXBlWydmaW5hbGx5J10pIHtcbiAgcmVkZWZpbmUoTmF0aXZlUHJvbWlzZS5wcm90b3R5cGUsICdmaW5hbGx5JywgZ2V0QnVpbHRJbignUHJvbWlzZScpLnByb3RvdHlwZVsnZmluYWxseSddKTtcbn1cbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIElTX1BVUkUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtcHVyZScpO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciBnZXRCdWlsdEluID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dldC1idWlsdC1pbicpO1xudmFyIE5hdGl2ZVByb21pc2UgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvbmF0aXZlLXByb21pc2UtY29uc3RydWN0b3InKTtcbnZhciByZWRlZmluZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZWRlZmluZScpO1xudmFyIHJlZGVmaW5lQWxsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlZGVmaW5lLWFsbCcpO1xudmFyIHNldFRvU3RyaW5nVGFnID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NldC10by1zdHJpbmctdGFnJyk7XG52YXIgc2V0U3BlY2llcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zZXQtc3BlY2llcycpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLW9iamVjdCcpO1xudmFyIGFGdW5jdGlvbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hLWZ1bmN0aW9uJyk7XG52YXIgYW5JbnN0YW5jZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1pbnN0YW5jZScpO1xudmFyIGluc3BlY3RTb3VyY2UgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaW5zcGVjdC1zb3VyY2UnKTtcbnZhciBpdGVyYXRlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2l0ZXJhdGUnKTtcbnZhciBjaGVja0NvcnJlY3RuZXNzT2ZJdGVyYXRpb24gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY2hlY2stY29ycmVjdG5lc3Mtb2YtaXRlcmF0aW9uJyk7XG52YXIgc3BlY2llc0NvbnN0cnVjdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NwZWNpZXMtY29uc3RydWN0b3InKTtcbnZhciB0YXNrID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3Rhc2snKS5zZXQ7XG52YXIgbWljcm90YXNrID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL21pY3JvdGFzaycpO1xudmFyIHByb21pc2VSZXNvbHZlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3Byb21pc2UtcmVzb2x2ZScpO1xudmFyIGhvc3RSZXBvcnRFcnJvcnMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaG9zdC1yZXBvcnQtZXJyb3JzJyk7XG52YXIgbmV3UHJvbWlzZUNhcGFiaWxpdHlNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvbmV3LXByb21pc2UtY2FwYWJpbGl0eScpO1xudmFyIHBlcmZvcm0gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcGVyZm9ybScpO1xudmFyIEludGVybmFsU3RhdGVNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaW50ZXJuYWwtc3RhdGUnKTtcbnZhciBpc0ZvcmNlZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1mb3JjZWQnKTtcbnZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcbnZhciBJU19OT0RFID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2VuZ2luZS1pcy1ub2RlJyk7XG52YXIgVjhfVkVSU0lPTiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9lbmdpbmUtdjgtdmVyc2lvbicpO1xuXG52YXIgU1BFQ0lFUyA9IHdlbGxLbm93blN5bWJvbCgnc3BlY2llcycpO1xudmFyIFBST01JU0UgPSAnUHJvbWlzZSc7XG52YXIgZ2V0SW50ZXJuYWxTdGF0ZSA9IEludGVybmFsU3RhdGVNb2R1bGUuZ2V0O1xudmFyIHNldEludGVybmFsU3RhdGUgPSBJbnRlcm5hbFN0YXRlTW9kdWxlLnNldDtcbnZhciBnZXRJbnRlcm5hbFByb21pc2VTdGF0ZSA9IEludGVybmFsU3RhdGVNb2R1bGUuZ2V0dGVyRm9yKFBST01JU0UpO1xudmFyIFByb21pc2VDb25zdHJ1Y3RvciA9IE5hdGl2ZVByb21pc2U7XG52YXIgVHlwZUVycm9yID0gZ2xvYmFsLlR5cGVFcnJvcjtcbnZhciBkb2N1bWVudCA9IGdsb2JhbC5kb2N1bWVudDtcbnZhciBwcm9jZXNzID0gZ2xvYmFsLnByb2Nlc3M7XG52YXIgJGZldGNoID0gZ2V0QnVpbHRJbignZmV0Y2gnKTtcbnZhciBuZXdQcm9taXNlQ2FwYWJpbGl0eSA9IG5ld1Byb21pc2VDYXBhYmlsaXR5TW9kdWxlLmY7XG52YXIgbmV3R2VuZXJpY1Byb21pc2VDYXBhYmlsaXR5ID0gbmV3UHJvbWlzZUNhcGFiaWxpdHk7XG52YXIgRElTUEFUQ0hfRVZFTlQgPSAhIShkb2N1bWVudCAmJiBkb2N1bWVudC5jcmVhdGVFdmVudCAmJiBnbG9iYWwuZGlzcGF0Y2hFdmVudCk7XG52YXIgTkFUSVZFX1JFSkVDVElPTl9FVkVOVCA9IHR5cGVvZiBQcm9taXNlUmVqZWN0aW9uRXZlbnQgPT0gJ2Z1bmN0aW9uJztcbnZhciBVTkhBTkRMRURfUkVKRUNUSU9OID0gJ3VuaGFuZGxlZHJlamVjdGlvbic7XG52YXIgUkVKRUNUSU9OX0hBTkRMRUQgPSAncmVqZWN0aW9uaGFuZGxlZCc7XG52YXIgUEVORElORyA9IDA7XG52YXIgRlVMRklMTEVEID0gMTtcbnZhciBSRUpFQ1RFRCA9IDI7XG52YXIgSEFORExFRCA9IDE7XG52YXIgVU5IQU5ETEVEID0gMjtcbnZhciBJbnRlcm5hbCwgT3duUHJvbWlzZUNhcGFiaWxpdHksIFByb21pc2VXcmFwcGVyLCBuYXRpdmVUaGVuO1xuXG52YXIgRk9SQ0VEID0gaXNGb3JjZWQoUFJPTUlTRSwgZnVuY3Rpb24gKCkge1xuICB2YXIgR0xPQkFMX0NPUkVfSlNfUFJPTUlTRSA9IGluc3BlY3RTb3VyY2UoUHJvbWlzZUNvbnN0cnVjdG9yKSAhPT0gU3RyaW5nKFByb21pc2VDb25zdHJ1Y3Rvcik7XG4gIGlmICghR0xPQkFMX0NPUkVfSlNfUFJPTUlTRSkge1xuICAgIC8vIFY4IDYuNiAoTm9kZSAxMCBhbmQgQ2hyb21lIDY2KSBoYXZlIGEgYnVnIHdpdGggcmVzb2x2aW5nIGN1c3RvbSB0aGVuYWJsZXNcbiAgICAvLyBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvY2hyb21pdW0vaXNzdWVzL2RldGFpbD9pZD04MzA1NjVcbiAgICAvLyBXZSBjYW4ndCBkZXRlY3QgaXQgc3luY2hyb25vdXNseSwgc28ganVzdCBjaGVjayB2ZXJzaW9uc1xuICAgIGlmIChWOF9WRVJTSU9OID09PSA2NikgcmV0dXJuIHRydWU7XG4gICAgLy8gVW5oYW5kbGVkIHJlamVjdGlvbnMgdHJhY2tpbmcgc3VwcG9ydCwgTm9kZUpTIFByb21pc2Ugd2l0aG91dCBpdCBmYWlscyBAQHNwZWNpZXMgdGVzdFxuICAgIGlmICghSVNfTk9ERSAmJiAhTkFUSVZFX1JFSkVDVElPTl9FVkVOVCkgcmV0dXJuIHRydWU7XG4gIH1cbiAgLy8gV2UgbmVlZCBQcm9taXNlI2ZpbmFsbHkgaW4gdGhlIHB1cmUgdmVyc2lvbiBmb3IgcHJldmVudGluZyBwcm90b3R5cGUgcG9sbHV0aW9uXG4gIGlmIChJU19QVVJFICYmICFQcm9taXNlQ29uc3RydWN0b3IucHJvdG90eXBlWydmaW5hbGx5J10pIHJldHVybiB0cnVlO1xuICAvLyBXZSBjYW4ndCB1c2UgQEBzcGVjaWVzIGZlYXR1cmUgZGV0ZWN0aW9uIGluIFY4IHNpbmNlIGl0IGNhdXNlc1xuICAvLyBkZW9wdGltaXphdGlvbiBhbmQgcGVyZm9ybWFuY2UgZGVncmFkYXRpb25cbiAgLy8gaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMvaXNzdWVzLzY3OVxuICBpZiAoVjhfVkVSU0lPTiA+PSA1MSAmJiAvbmF0aXZlIGNvZGUvLnRlc3QoUHJvbWlzZUNvbnN0cnVjdG9yKSkgcmV0dXJuIGZhbHNlO1xuICAvLyBEZXRlY3QgY29ycmVjdG5lc3Mgb2Ygc3ViY2xhc3Npbmcgd2l0aCBAQHNwZWNpZXMgc3VwcG9ydFxuICB2YXIgcHJvbWlzZSA9IFByb21pc2VDb25zdHJ1Y3Rvci5yZXNvbHZlKDEpO1xuICB2YXIgRmFrZVByb21pc2UgPSBmdW5jdGlvbiAoZXhlYykge1xuICAgIGV4ZWMoZnVuY3Rpb24gKCkgeyAvKiBlbXB0eSAqLyB9LCBmdW5jdGlvbiAoKSB7IC8qIGVtcHR5ICovIH0pO1xuICB9O1xuICB2YXIgY29uc3RydWN0b3IgPSBwcm9taXNlLmNvbnN0cnVjdG9yID0ge307XG4gIGNvbnN0cnVjdG9yW1NQRUNJRVNdID0gRmFrZVByb21pc2U7XG4gIHJldHVybiAhKHByb21pc2UudGhlbihmdW5jdGlvbiAoKSB7IC8qIGVtcHR5ICovIH0pIGluc3RhbmNlb2YgRmFrZVByb21pc2UpO1xufSk7XG5cbnZhciBJTkNPUlJFQ1RfSVRFUkFUSU9OID0gRk9SQ0VEIHx8ICFjaGVja0NvcnJlY3RuZXNzT2ZJdGVyYXRpb24oZnVuY3Rpb24gKGl0ZXJhYmxlKSB7XG4gIFByb21pc2VDb25zdHJ1Y3Rvci5hbGwoaXRlcmFibGUpWydjYXRjaCddKGZ1bmN0aW9uICgpIHsgLyogZW1wdHkgKi8gfSk7XG59KTtcblxuLy8gaGVscGVyc1xudmFyIGlzVGhlbmFibGUgPSBmdW5jdGlvbiAoaXQpIHtcbiAgdmFyIHRoZW47XG4gIHJldHVybiBpc09iamVjdChpdCkgJiYgdHlwZW9mICh0aGVuID0gaXQudGhlbikgPT0gJ2Z1bmN0aW9uJyA/IHRoZW4gOiBmYWxzZTtcbn07XG5cbnZhciBub3RpZnkgPSBmdW5jdGlvbiAoc3RhdGUsIGlzUmVqZWN0KSB7XG4gIGlmIChzdGF0ZS5ub3RpZmllZCkgcmV0dXJuO1xuICBzdGF0ZS5ub3RpZmllZCA9IHRydWU7XG4gIHZhciBjaGFpbiA9IHN0YXRlLnJlYWN0aW9ucztcbiAgbWljcm90YXNrKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgdmFsdWUgPSBzdGF0ZS52YWx1ZTtcbiAgICB2YXIgb2sgPSBzdGF0ZS5zdGF0ZSA9PSBGVUxGSUxMRUQ7XG4gICAgdmFyIGluZGV4ID0gMDtcbiAgICAvLyB2YXJpYWJsZSBsZW5ndGggLSBjYW4ndCB1c2UgZm9yRWFjaFxuICAgIHdoaWxlIChjaGFpbi5sZW5ndGggPiBpbmRleCkge1xuICAgICAgdmFyIHJlYWN0aW9uID0gY2hhaW5baW5kZXgrK107XG4gICAgICB2YXIgaGFuZGxlciA9IG9rID8gcmVhY3Rpb24ub2sgOiByZWFjdGlvbi5mYWlsO1xuICAgICAgdmFyIHJlc29sdmUgPSByZWFjdGlvbi5yZXNvbHZlO1xuICAgICAgdmFyIHJlamVjdCA9IHJlYWN0aW9uLnJlamVjdDtcbiAgICAgIHZhciBkb21haW4gPSByZWFjdGlvbi5kb21haW47XG4gICAgICB2YXIgcmVzdWx0LCB0aGVuLCBleGl0ZWQ7XG4gICAgICB0cnkge1xuICAgICAgICBpZiAoaGFuZGxlcikge1xuICAgICAgICAgIGlmICghb2spIHtcbiAgICAgICAgICAgIGlmIChzdGF0ZS5yZWplY3Rpb24gPT09IFVOSEFORExFRCkgb25IYW5kbGVVbmhhbmRsZWQoc3RhdGUpO1xuICAgICAgICAgICAgc3RhdGUucmVqZWN0aW9uID0gSEFORExFRDtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKGhhbmRsZXIgPT09IHRydWUpIHJlc3VsdCA9IHZhbHVlO1xuICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgaWYgKGRvbWFpbikgZG9tYWluLmVudGVyKCk7XG4gICAgICAgICAgICByZXN1bHQgPSBoYW5kbGVyKHZhbHVlKTsgLy8gY2FuIHRocm93XG4gICAgICAgICAgICBpZiAoZG9tYWluKSB7XG4gICAgICAgICAgICAgIGRvbWFpbi5leGl0KCk7XG4gICAgICAgICAgICAgIGV4aXRlZCA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChyZXN1bHQgPT09IHJlYWN0aW9uLnByb21pc2UpIHtcbiAgICAgICAgICAgIHJlamVjdChUeXBlRXJyb3IoJ1Byb21pc2UtY2hhaW4gY3ljbGUnKSk7XG4gICAgICAgICAgfSBlbHNlIGlmICh0aGVuID0gaXNUaGVuYWJsZShyZXN1bHQpKSB7XG4gICAgICAgICAgICB0aGVuLmNhbGwocmVzdWx0LCByZXNvbHZlLCByZWplY3QpO1xuICAgICAgICAgIH0gZWxzZSByZXNvbHZlKHJlc3VsdCk7XG4gICAgICAgIH0gZWxzZSByZWplY3QodmFsdWUpO1xuICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgaWYgKGRvbWFpbiAmJiAhZXhpdGVkKSBkb21haW4uZXhpdCgpO1xuICAgICAgICByZWplY3QoZXJyb3IpO1xuICAgICAgfVxuICAgIH1cbiAgICBzdGF0ZS5yZWFjdGlvbnMgPSBbXTtcbiAgICBzdGF0ZS5ub3RpZmllZCA9IGZhbHNlO1xuICAgIGlmIChpc1JlamVjdCAmJiAhc3RhdGUucmVqZWN0aW9uKSBvblVuaGFuZGxlZChzdGF0ZSk7XG4gIH0pO1xufTtcblxudmFyIGRpc3BhdGNoRXZlbnQgPSBmdW5jdGlvbiAobmFtZSwgcHJvbWlzZSwgcmVhc29uKSB7XG4gIHZhciBldmVudCwgaGFuZGxlcjtcbiAgaWYgKERJU1BBVENIX0VWRU5UKSB7XG4gICAgZXZlbnQgPSBkb2N1bWVudC5jcmVhdGVFdmVudCgnRXZlbnQnKTtcbiAgICBldmVudC5wcm9taXNlID0gcHJvbWlzZTtcbiAgICBldmVudC5yZWFzb24gPSByZWFzb247XG4gICAgZXZlbnQuaW5pdEV2ZW50KG5hbWUsIGZhbHNlLCB0cnVlKTtcbiAgICBnbG9iYWwuZGlzcGF0Y2hFdmVudChldmVudCk7XG4gIH0gZWxzZSBldmVudCA9IHsgcHJvbWlzZTogcHJvbWlzZSwgcmVhc29uOiByZWFzb24gfTtcbiAgaWYgKCFOQVRJVkVfUkVKRUNUSU9OX0VWRU5UICYmIChoYW5kbGVyID0gZ2xvYmFsWydvbicgKyBuYW1lXSkpIGhhbmRsZXIoZXZlbnQpO1xuICBlbHNlIGlmIChuYW1lID09PSBVTkhBTkRMRURfUkVKRUNUSU9OKSBob3N0UmVwb3J0RXJyb3JzKCdVbmhhbmRsZWQgcHJvbWlzZSByZWplY3Rpb24nLCByZWFzb24pO1xufTtcblxudmFyIG9uVW5oYW5kbGVkID0gZnVuY3Rpb24gKHN0YXRlKSB7XG4gIHRhc2suY2FsbChnbG9iYWwsIGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgcHJvbWlzZSA9IHN0YXRlLmZhY2FkZTtcbiAgICB2YXIgdmFsdWUgPSBzdGF0ZS52YWx1ZTtcbiAgICB2YXIgSVNfVU5IQU5ETEVEID0gaXNVbmhhbmRsZWQoc3RhdGUpO1xuICAgIHZhciByZXN1bHQ7XG4gICAgaWYgKElTX1VOSEFORExFRCkge1xuICAgICAgcmVzdWx0ID0gcGVyZm9ybShmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmIChJU19OT0RFKSB7XG4gICAgICAgICAgcHJvY2Vzcy5lbWl0KCd1bmhhbmRsZWRSZWplY3Rpb24nLCB2YWx1ZSwgcHJvbWlzZSk7XG4gICAgICAgIH0gZWxzZSBkaXNwYXRjaEV2ZW50KFVOSEFORExFRF9SRUpFQ1RJT04sIHByb21pc2UsIHZhbHVlKTtcbiAgICAgIH0pO1xuICAgICAgLy8gQnJvd3NlcnMgc2hvdWxkIG5vdCB0cmlnZ2VyIGByZWplY3Rpb25IYW5kbGVkYCBldmVudCBpZiBpdCB3YXMgaGFuZGxlZCBoZXJlLCBOb2RlSlMgLSBzaG91bGRcbiAgICAgIHN0YXRlLnJlamVjdGlvbiA9IElTX05PREUgfHwgaXNVbmhhbmRsZWQoc3RhdGUpID8gVU5IQU5ETEVEIDogSEFORExFRDtcbiAgICAgIGlmIChyZXN1bHQuZXJyb3IpIHRocm93IHJlc3VsdC52YWx1ZTtcbiAgICB9XG4gIH0pO1xufTtcblxudmFyIGlzVW5oYW5kbGVkID0gZnVuY3Rpb24gKHN0YXRlKSB7XG4gIHJldHVybiBzdGF0ZS5yZWplY3Rpb24gIT09IEhBTkRMRUQgJiYgIXN0YXRlLnBhcmVudDtcbn07XG5cbnZhciBvbkhhbmRsZVVuaGFuZGxlZCA9IGZ1bmN0aW9uIChzdGF0ZSkge1xuICB0YXNrLmNhbGwoZ2xvYmFsLCBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHByb21pc2UgPSBzdGF0ZS5mYWNhZGU7XG4gICAgaWYgKElTX05PREUpIHtcbiAgICAgIHByb2Nlc3MuZW1pdCgncmVqZWN0aW9uSGFuZGxlZCcsIHByb21pc2UpO1xuICAgIH0gZWxzZSBkaXNwYXRjaEV2ZW50KFJFSkVDVElPTl9IQU5ETEVELCBwcm9taXNlLCBzdGF0ZS52YWx1ZSk7XG4gIH0pO1xufTtcblxudmFyIGJpbmQgPSBmdW5jdGlvbiAoZm4sIHN0YXRlLCB1bndyYXApIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgIGZuKHN0YXRlLCB2YWx1ZSwgdW53cmFwKTtcbiAgfTtcbn07XG5cbnZhciBpbnRlcm5hbFJlamVjdCA9IGZ1bmN0aW9uIChzdGF0ZSwgdmFsdWUsIHVud3JhcCkge1xuICBpZiAoc3RhdGUuZG9uZSkgcmV0dXJuO1xuICBzdGF0ZS5kb25lID0gdHJ1ZTtcbiAgaWYgKHVud3JhcCkgc3RhdGUgPSB1bndyYXA7XG4gIHN0YXRlLnZhbHVlID0gdmFsdWU7XG4gIHN0YXRlLnN0YXRlID0gUkVKRUNURUQ7XG4gIG5vdGlmeShzdGF0ZSwgdHJ1ZSk7XG59O1xuXG52YXIgaW50ZXJuYWxSZXNvbHZlID0gZnVuY3Rpb24gKHN0YXRlLCB2YWx1ZSwgdW53cmFwKSB7XG4gIGlmIChzdGF0ZS5kb25lKSByZXR1cm47XG4gIHN0YXRlLmRvbmUgPSB0cnVlO1xuICBpZiAodW53cmFwKSBzdGF0ZSA9IHVud3JhcDtcbiAgdHJ5IHtcbiAgICBpZiAoc3RhdGUuZmFjYWRlID09PSB2YWx1ZSkgdGhyb3cgVHlwZUVycm9yKFwiUHJvbWlzZSBjYW4ndCBiZSByZXNvbHZlZCBpdHNlbGZcIik7XG4gICAgdmFyIHRoZW4gPSBpc1RoZW5hYmxlKHZhbHVlKTtcbiAgICBpZiAodGhlbikge1xuICAgICAgbWljcm90YXNrKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIHdyYXBwZXIgPSB7IGRvbmU6IGZhbHNlIH07XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgdGhlbi5jYWxsKHZhbHVlLFxuICAgICAgICAgICAgYmluZChpbnRlcm5hbFJlc29sdmUsIHdyYXBwZXIsIHN0YXRlKSxcbiAgICAgICAgICAgIGJpbmQoaW50ZXJuYWxSZWplY3QsIHdyYXBwZXIsIHN0YXRlKVxuICAgICAgICAgICk7XG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgaW50ZXJuYWxSZWplY3Qod3JhcHBlciwgZXJyb3IsIHN0YXRlKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN0YXRlLnZhbHVlID0gdmFsdWU7XG4gICAgICBzdGF0ZS5zdGF0ZSA9IEZVTEZJTExFRDtcbiAgICAgIG5vdGlmeShzdGF0ZSwgZmFsc2UpO1xuICAgIH1cbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBpbnRlcm5hbFJlamVjdCh7IGRvbmU6IGZhbHNlIH0sIGVycm9yLCBzdGF0ZSk7XG4gIH1cbn07XG5cbi8vIGNvbnN0cnVjdG9yIHBvbHlmaWxsXG5pZiAoRk9SQ0VEKSB7XG4gIC8vIDI1LjQuMy4xIFByb21pc2UoZXhlY3V0b3IpXG4gIFByb21pc2VDb25zdHJ1Y3RvciA9IGZ1bmN0aW9uIFByb21pc2UoZXhlY3V0b3IpIHtcbiAgICBhbkluc3RhbmNlKHRoaXMsIFByb21pc2VDb25zdHJ1Y3RvciwgUFJPTUlTRSk7XG4gICAgYUZ1bmN0aW9uKGV4ZWN1dG9yKTtcbiAgICBJbnRlcm5hbC5jYWxsKHRoaXMpO1xuICAgIHZhciBzdGF0ZSA9IGdldEludGVybmFsU3RhdGUodGhpcyk7XG4gICAgdHJ5IHtcbiAgICAgIGV4ZWN1dG9yKGJpbmQoaW50ZXJuYWxSZXNvbHZlLCBzdGF0ZSksIGJpbmQoaW50ZXJuYWxSZWplY3QsIHN0YXRlKSk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGludGVybmFsUmVqZWN0KHN0YXRlLCBlcnJvcik7XG4gICAgfVxuICB9O1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW51c2VkLXZhcnNcbiAgSW50ZXJuYWwgPSBmdW5jdGlvbiBQcm9taXNlKGV4ZWN1dG9yKSB7XG4gICAgc2V0SW50ZXJuYWxTdGF0ZSh0aGlzLCB7XG4gICAgICB0eXBlOiBQUk9NSVNFLFxuICAgICAgZG9uZTogZmFsc2UsXG4gICAgICBub3RpZmllZDogZmFsc2UsXG4gICAgICBwYXJlbnQ6IGZhbHNlLFxuICAgICAgcmVhY3Rpb25zOiBbXSxcbiAgICAgIHJlamVjdGlvbjogZmFsc2UsXG4gICAgICBzdGF0ZTogUEVORElORyxcbiAgICAgIHZhbHVlOiB1bmRlZmluZWRcbiAgICB9KTtcbiAgfTtcbiAgSW50ZXJuYWwucHJvdG90eXBlID0gcmVkZWZpbmVBbGwoUHJvbWlzZUNvbnN0cnVjdG9yLnByb3RvdHlwZSwge1xuICAgIC8vIGBQcm9taXNlLnByb3RvdHlwZS50aGVuYCBtZXRob2RcbiAgICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXByb21pc2UucHJvdG90eXBlLnRoZW5cbiAgICB0aGVuOiBmdW5jdGlvbiB0aGVuKG9uRnVsZmlsbGVkLCBvblJlamVjdGVkKSB7XG4gICAgICB2YXIgc3RhdGUgPSBnZXRJbnRlcm5hbFByb21pc2VTdGF0ZSh0aGlzKTtcbiAgICAgIHZhciByZWFjdGlvbiA9IG5ld1Byb21pc2VDYXBhYmlsaXR5KHNwZWNpZXNDb25zdHJ1Y3Rvcih0aGlzLCBQcm9taXNlQ29uc3RydWN0b3IpKTtcbiAgICAgIHJlYWN0aW9uLm9rID0gdHlwZW9mIG9uRnVsZmlsbGVkID09ICdmdW5jdGlvbicgPyBvbkZ1bGZpbGxlZCA6IHRydWU7XG4gICAgICByZWFjdGlvbi5mYWlsID0gdHlwZW9mIG9uUmVqZWN0ZWQgPT0gJ2Z1bmN0aW9uJyAmJiBvblJlamVjdGVkO1xuICAgICAgcmVhY3Rpb24uZG9tYWluID0gSVNfTk9ERSA/IHByb2Nlc3MuZG9tYWluIDogdW5kZWZpbmVkO1xuICAgICAgc3RhdGUucGFyZW50ID0gdHJ1ZTtcbiAgICAgIHN0YXRlLnJlYWN0aW9ucy5wdXNoKHJlYWN0aW9uKTtcbiAgICAgIGlmIChzdGF0ZS5zdGF0ZSAhPSBQRU5ESU5HKSBub3RpZnkoc3RhdGUsIGZhbHNlKTtcbiAgICAgIHJldHVybiByZWFjdGlvbi5wcm9taXNlO1xuICAgIH0sXG4gICAgLy8gYFByb21pc2UucHJvdG90eXBlLmNhdGNoYCBtZXRob2RcbiAgICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXByb21pc2UucHJvdG90eXBlLmNhdGNoXG4gICAgJ2NhdGNoJzogZnVuY3Rpb24gKG9uUmVqZWN0ZWQpIHtcbiAgICAgIHJldHVybiB0aGlzLnRoZW4odW5kZWZpbmVkLCBvblJlamVjdGVkKTtcbiAgICB9XG4gIH0pO1xuICBPd25Qcm9taXNlQ2FwYWJpbGl0eSA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgcHJvbWlzZSA9IG5ldyBJbnRlcm5hbCgpO1xuICAgIHZhciBzdGF0ZSA9IGdldEludGVybmFsU3RhdGUocHJvbWlzZSk7XG4gICAgdGhpcy5wcm9taXNlID0gcHJvbWlzZTtcbiAgICB0aGlzLnJlc29sdmUgPSBiaW5kKGludGVybmFsUmVzb2x2ZSwgc3RhdGUpO1xuICAgIHRoaXMucmVqZWN0ID0gYmluZChpbnRlcm5hbFJlamVjdCwgc3RhdGUpO1xuICB9O1xuICBuZXdQcm9taXNlQ2FwYWJpbGl0eU1vZHVsZS5mID0gbmV3UHJvbWlzZUNhcGFiaWxpdHkgPSBmdW5jdGlvbiAoQykge1xuICAgIHJldHVybiBDID09PSBQcm9taXNlQ29uc3RydWN0b3IgfHwgQyA9PT0gUHJvbWlzZVdyYXBwZXJcbiAgICAgID8gbmV3IE93blByb21pc2VDYXBhYmlsaXR5KEMpXG4gICAgICA6IG5ld0dlbmVyaWNQcm9taXNlQ2FwYWJpbGl0eShDKTtcbiAgfTtcblxuICBpZiAoIUlTX1BVUkUgJiYgdHlwZW9mIE5hdGl2ZVByb21pc2UgPT0gJ2Z1bmN0aW9uJykge1xuICAgIG5hdGl2ZVRoZW4gPSBOYXRpdmVQcm9taXNlLnByb3RvdHlwZS50aGVuO1xuXG4gICAgLy8gd3JhcCBuYXRpdmUgUHJvbWlzZSN0aGVuIGZvciBuYXRpdmUgYXN5bmMgZnVuY3Rpb25zXG4gICAgcmVkZWZpbmUoTmF0aXZlUHJvbWlzZS5wcm90b3R5cGUsICd0aGVuJywgZnVuY3Rpb24gdGhlbihvbkZ1bGZpbGxlZCwgb25SZWplY3RlZCkge1xuICAgICAgdmFyIHRoYXQgPSB0aGlzO1xuICAgICAgcmV0dXJuIG5ldyBQcm9taXNlQ29uc3RydWN0b3IoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICBuYXRpdmVUaGVuLmNhbGwodGhhdCwgcmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgIH0pLnRoZW4ob25GdWxmaWxsZWQsIG9uUmVqZWN0ZWQpO1xuICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS96bG9pcm9jay9jb3JlLWpzL2lzc3Vlcy82NDBcbiAgICB9LCB7IHVuc2FmZTogdHJ1ZSB9KTtcblxuICAgIC8vIHdyYXAgZmV0Y2ggcmVzdWx0XG4gICAgaWYgKHR5cGVvZiAkZmV0Y2ggPT0gJ2Z1bmN0aW9uJykgJCh7IGdsb2JhbDogdHJ1ZSwgZW51bWVyYWJsZTogdHJ1ZSwgZm9yY2VkOiB0cnVlIH0sIHtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bnVzZWQtdmFyc1xuICAgICAgZmV0Y2g6IGZ1bmN0aW9uIGZldGNoKGlucHV0IC8qICwgaW5pdCAqLykge1xuICAgICAgICByZXR1cm4gcHJvbWlzZVJlc29sdmUoUHJvbWlzZUNvbnN0cnVjdG9yLCAkZmV0Y2guYXBwbHkoZ2xvYmFsLCBhcmd1bWVudHMpKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxufVxuXG4kKHsgZ2xvYmFsOiB0cnVlLCB3cmFwOiB0cnVlLCBmb3JjZWQ6IEZPUkNFRCB9LCB7XG4gIFByb21pc2U6IFByb21pc2VDb25zdHJ1Y3RvclxufSk7XG5cbnNldFRvU3RyaW5nVGFnKFByb21pc2VDb25zdHJ1Y3RvciwgUFJPTUlTRSwgZmFsc2UsIHRydWUpO1xuc2V0U3BlY2llcyhQUk9NSVNFKTtcblxuUHJvbWlzZVdyYXBwZXIgPSBnZXRCdWlsdEluKFBST01JU0UpO1xuXG4vLyBzdGF0aWNzXG4kKHsgdGFyZ2V0OiBQUk9NSVNFLCBzdGF0OiB0cnVlLCBmb3JjZWQ6IEZPUkNFRCB9LCB7XG4gIC8vIGBQcm9taXNlLnJlamVjdGAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtcHJvbWlzZS5yZWplY3RcbiAgcmVqZWN0OiBmdW5jdGlvbiByZWplY3Qocikge1xuICAgIHZhciBjYXBhYmlsaXR5ID0gbmV3UHJvbWlzZUNhcGFiaWxpdHkodGhpcyk7XG4gICAgY2FwYWJpbGl0eS5yZWplY3QuY2FsbCh1bmRlZmluZWQsIHIpO1xuICAgIHJldHVybiBjYXBhYmlsaXR5LnByb21pc2U7XG4gIH1cbn0pO1xuXG4kKHsgdGFyZ2V0OiBQUk9NSVNFLCBzdGF0OiB0cnVlLCBmb3JjZWQ6IElTX1BVUkUgfHwgRk9SQ0VEIH0sIHtcbiAgLy8gYFByb21pc2UucmVzb2x2ZWAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtcHJvbWlzZS5yZXNvbHZlXG4gIHJlc29sdmU6IGZ1bmN0aW9uIHJlc29sdmUoeCkge1xuICAgIHJldHVybiBwcm9taXNlUmVzb2x2ZShJU19QVVJFICYmIHRoaXMgPT09IFByb21pc2VXcmFwcGVyID8gUHJvbWlzZUNvbnN0cnVjdG9yIDogdGhpcywgeCk7XG4gIH1cbn0pO1xuXG4kKHsgdGFyZ2V0OiBQUk9NSVNFLCBzdGF0OiB0cnVlLCBmb3JjZWQ6IElOQ09SUkVDVF9JVEVSQVRJT04gfSwge1xuICAvLyBgUHJvbWlzZS5hbGxgIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXByb21pc2UuYWxsXG4gIGFsbDogZnVuY3Rpb24gYWxsKGl0ZXJhYmxlKSB7XG4gICAgdmFyIEMgPSB0aGlzO1xuICAgIHZhciBjYXBhYmlsaXR5ID0gbmV3UHJvbWlzZUNhcGFiaWxpdHkoQyk7XG4gICAgdmFyIHJlc29sdmUgPSBjYXBhYmlsaXR5LnJlc29sdmU7XG4gICAgdmFyIHJlamVjdCA9IGNhcGFiaWxpdHkucmVqZWN0O1xuICAgIHZhciByZXN1bHQgPSBwZXJmb3JtKGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciAkcHJvbWlzZVJlc29sdmUgPSBhRnVuY3Rpb24oQy5yZXNvbHZlKTtcbiAgICAgIHZhciB2YWx1ZXMgPSBbXTtcbiAgICAgIHZhciBjb3VudGVyID0gMDtcbiAgICAgIHZhciByZW1haW5pbmcgPSAxO1xuICAgICAgaXRlcmF0ZShpdGVyYWJsZSwgZnVuY3Rpb24gKHByb21pc2UpIHtcbiAgICAgICAgdmFyIGluZGV4ID0gY291bnRlcisrO1xuICAgICAgICB2YXIgYWxyZWFkeUNhbGxlZCA9IGZhbHNlO1xuICAgICAgICB2YWx1ZXMucHVzaCh1bmRlZmluZWQpO1xuICAgICAgICByZW1haW5pbmcrKztcbiAgICAgICAgJHByb21pc2VSZXNvbHZlLmNhbGwoQywgcHJvbWlzZSkudGhlbihmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICBpZiAoYWxyZWFkeUNhbGxlZCkgcmV0dXJuO1xuICAgICAgICAgIGFscmVhZHlDYWxsZWQgPSB0cnVlO1xuICAgICAgICAgIHZhbHVlc1tpbmRleF0gPSB2YWx1ZTtcbiAgICAgICAgICAtLXJlbWFpbmluZyB8fCByZXNvbHZlKHZhbHVlcyk7XG4gICAgICAgIH0sIHJlamVjdCk7XG4gICAgICB9KTtcbiAgICAgIC0tcmVtYWluaW5nIHx8IHJlc29sdmUodmFsdWVzKTtcbiAgICB9KTtcbiAgICBpZiAocmVzdWx0LmVycm9yKSByZWplY3QocmVzdWx0LnZhbHVlKTtcbiAgICByZXR1cm4gY2FwYWJpbGl0eS5wcm9taXNlO1xuICB9LFxuICAvLyBgUHJvbWlzZS5yYWNlYCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1wcm9taXNlLnJhY2VcbiAgcmFjZTogZnVuY3Rpb24gcmFjZShpdGVyYWJsZSkge1xuICAgIHZhciBDID0gdGhpcztcbiAgICB2YXIgY2FwYWJpbGl0eSA9IG5ld1Byb21pc2VDYXBhYmlsaXR5KEMpO1xuICAgIHZhciByZWplY3QgPSBjYXBhYmlsaXR5LnJlamVjdDtcbiAgICB2YXIgcmVzdWx0ID0gcGVyZm9ybShmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgJHByb21pc2VSZXNvbHZlID0gYUZ1bmN0aW9uKEMucmVzb2x2ZSk7XG4gICAgICBpdGVyYXRlKGl0ZXJhYmxlLCBmdW5jdGlvbiAocHJvbWlzZSkge1xuICAgICAgICAkcHJvbWlzZVJlc29sdmUuY2FsbChDLCBwcm9taXNlKS50aGVuKGNhcGFiaWxpdHkucmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICAgIGlmIChyZXN1bHQuZXJyb3IpIHJlamVjdChyZXN1bHQudmFsdWUpO1xuICAgIHJldHVybiBjYXBhYmlsaXR5LnByb21pc2U7XG4gIH1cbn0pO1xuIiwidmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgZ2V0QnVpbHRJbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nZXQtYnVpbHQtaW4nKTtcbnZhciBhRnVuY3Rpb24gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYS1mdW5jdGlvbicpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLW9iamVjdCcpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG5cbnZhciBuYXRpdmVBcHBseSA9IGdldEJ1aWx0SW4oJ1JlZmxlY3QnLCAnYXBwbHknKTtcbnZhciBmdW5jdGlvbkFwcGx5ID0gRnVuY3Rpb24uYXBwbHk7XG5cbi8vIE1TIEVkZ2UgYXJndW1lbnRzTGlzdCBhcmd1bWVudCBpcyBvcHRpb25hbFxudmFyIE9QVElPTkFMX0FSR1VNRU5UU19MSVNUID0gIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgbmF0aXZlQXBwbHkoZnVuY3Rpb24gKCkgeyAvKiBlbXB0eSAqLyB9KTtcbn0pO1xuXG4vLyBgUmVmbGVjdC5hcHBseWAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXJlZmxlY3QuYXBwbHlcbiQoeyB0YXJnZXQ6ICdSZWZsZWN0Jywgc3RhdDogdHJ1ZSwgZm9yY2VkOiBPUFRJT05BTF9BUkdVTUVOVFNfTElTVCB9LCB7XG4gIGFwcGx5OiBmdW5jdGlvbiBhcHBseSh0YXJnZXQsIHRoaXNBcmd1bWVudCwgYXJndW1lbnRzTGlzdCkge1xuICAgIGFGdW5jdGlvbih0YXJnZXQpO1xuICAgIGFuT2JqZWN0KGFyZ3VtZW50c0xpc3QpO1xuICAgIHJldHVybiBuYXRpdmVBcHBseVxuICAgICAgPyBuYXRpdmVBcHBseSh0YXJnZXQsIHRoaXNBcmd1bWVudCwgYXJndW1lbnRzTGlzdClcbiAgICAgIDogZnVuY3Rpb25BcHBseS5jYWxsKHRhcmdldCwgdGhpc0FyZ3VtZW50LCBhcmd1bWVudHNMaXN0KTtcbiAgfVxufSk7XG4iLCJ2YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBnZXRCdWlsdEluID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dldC1idWlsdC1pbicpO1xudmFyIGFGdW5jdGlvbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hLWZ1bmN0aW9uJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4tb2JqZWN0Jyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtb2JqZWN0Jyk7XG52YXIgY3JlYXRlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1jcmVhdGUnKTtcbnZhciBiaW5kID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLWJpbmQnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xuXG52YXIgbmF0aXZlQ29uc3RydWN0ID0gZ2V0QnVpbHRJbignUmVmbGVjdCcsICdjb25zdHJ1Y3QnKTtcblxuLy8gYFJlZmxlY3QuY29uc3RydWN0YCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtcmVmbGVjdC5jb25zdHJ1Y3Rcbi8vIE1TIEVkZ2Ugc3VwcG9ydHMgb25seSAyIGFyZ3VtZW50cyBhbmQgYXJndW1lbnRzTGlzdCBhcmd1bWVudCBpcyBvcHRpb25hbFxuLy8gRkYgTmlnaHRseSBzZXRzIHRoaXJkIGFyZ3VtZW50IGFzIGBuZXcudGFyZ2V0YCwgYnV0IGRvZXMgbm90IGNyZWF0ZSBgdGhpc2AgZnJvbSBpdFxudmFyIE5FV19UQVJHRVRfQlVHID0gZmFpbHMoZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBGKCkgeyAvKiBlbXB0eSAqLyB9XG4gIHJldHVybiAhKG5hdGl2ZUNvbnN0cnVjdChmdW5jdGlvbiAoKSB7IC8qIGVtcHR5ICovIH0sIFtdLCBGKSBpbnN0YW5jZW9mIEYpO1xufSk7XG52YXIgQVJHU19CVUcgPSAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICBuYXRpdmVDb25zdHJ1Y3QoZnVuY3Rpb24gKCkgeyAvKiBlbXB0eSAqLyB9KTtcbn0pO1xudmFyIEZPUkNFRCA9IE5FV19UQVJHRVRfQlVHIHx8IEFSR1NfQlVHO1xuXG4kKHsgdGFyZ2V0OiAnUmVmbGVjdCcsIHN0YXQ6IHRydWUsIGZvcmNlZDogRk9SQ0VELCBzaGFtOiBGT1JDRUQgfSwge1xuICBjb25zdHJ1Y3Q6IGZ1bmN0aW9uIGNvbnN0cnVjdChUYXJnZXQsIGFyZ3MgLyogLCBuZXdUYXJnZXQgKi8pIHtcbiAgICBhRnVuY3Rpb24oVGFyZ2V0KTtcbiAgICBhbk9iamVjdChhcmdzKTtcbiAgICB2YXIgbmV3VGFyZ2V0ID0gYXJndW1lbnRzLmxlbmd0aCA8IDMgPyBUYXJnZXQgOiBhRnVuY3Rpb24oYXJndW1lbnRzWzJdKTtcbiAgICBpZiAoQVJHU19CVUcgJiYgIU5FV19UQVJHRVRfQlVHKSByZXR1cm4gbmF0aXZlQ29uc3RydWN0KFRhcmdldCwgYXJncywgbmV3VGFyZ2V0KTtcbiAgICBpZiAoVGFyZ2V0ID09IG5ld1RhcmdldCkge1xuICAgICAgLy8gdy9vIGFsdGVyZWQgbmV3VGFyZ2V0LCBvcHRpbWl6YXRpb24gZm9yIDAtNCBhcmd1bWVudHNcbiAgICAgIHN3aXRjaCAoYXJncy5sZW5ndGgpIHtcbiAgICAgICAgY2FzZSAwOiByZXR1cm4gbmV3IFRhcmdldCgpO1xuICAgICAgICBjYXNlIDE6IHJldHVybiBuZXcgVGFyZ2V0KGFyZ3NbMF0pO1xuICAgICAgICBjYXNlIDI6IHJldHVybiBuZXcgVGFyZ2V0KGFyZ3NbMF0sIGFyZ3NbMV0pO1xuICAgICAgICBjYXNlIDM6IHJldHVybiBuZXcgVGFyZ2V0KGFyZ3NbMF0sIGFyZ3NbMV0sIGFyZ3NbMl0pO1xuICAgICAgICBjYXNlIDQ6IHJldHVybiBuZXcgVGFyZ2V0KGFyZ3NbMF0sIGFyZ3NbMV0sIGFyZ3NbMl0sIGFyZ3NbM10pO1xuICAgICAgfVxuICAgICAgLy8gdy9vIGFsdGVyZWQgbmV3VGFyZ2V0LCBsb3Qgb2YgYXJndW1lbnRzIGNhc2VcbiAgICAgIHZhciAkYXJncyA9IFtudWxsXTtcbiAgICAgICRhcmdzLnB1c2guYXBwbHkoJGFyZ3MsIGFyZ3MpO1xuICAgICAgcmV0dXJuIG5ldyAoYmluZC5hcHBseShUYXJnZXQsICRhcmdzKSkoKTtcbiAgICB9XG4gICAgLy8gd2l0aCBhbHRlcmVkIG5ld1RhcmdldCwgbm90IHN1cHBvcnQgYnVpbHQtaW4gY29uc3RydWN0b3JzXG4gICAgdmFyIHByb3RvID0gbmV3VGFyZ2V0LnByb3RvdHlwZTtcbiAgICB2YXIgaW5zdGFuY2UgPSBjcmVhdGUoaXNPYmplY3QocHJvdG8pID8gcHJvdG8gOiBPYmplY3QucHJvdG90eXBlKTtcbiAgICB2YXIgcmVzdWx0ID0gRnVuY3Rpb24uYXBwbHkuY2FsbChUYXJnZXQsIGluc3RhbmNlLCBhcmdzKTtcbiAgICByZXR1cm4gaXNPYmplY3QocmVzdWx0KSA/IHJlc3VsdCA6IGluc3RhbmNlO1xuICB9XG59KTtcbiIsInZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Rlc2NyaXB0b3JzJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4tb2JqZWN0Jyk7XG52YXIgdG9QcmltaXRpdmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tcHJpbWl0aXZlJyk7XG52YXIgZGVmaW5lUHJvcGVydHlNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWRlZmluZS1wcm9wZXJ0eScpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG5cbi8vIE1TIEVkZ2UgaGFzIGJyb2tlbiBSZWZsZWN0LmRlZmluZVByb3BlcnR5IC0gdGhyb3dpbmcgaW5zdGVhZCBvZiByZXR1cm5pbmcgZmFsc2VcbnZhciBFUlJPUl9JTlNURUFEX09GX0ZBTFNFID0gZmFpbHMoZnVuY3Rpb24gKCkge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW5kZWZcbiAgUmVmbGVjdC5kZWZpbmVQcm9wZXJ0eShkZWZpbmVQcm9wZXJ0eU1vZHVsZS5mKHt9LCAxLCB7IHZhbHVlOiAxIH0pLCAxLCB7IHZhbHVlOiAyIH0pO1xufSk7XG5cbi8vIGBSZWZsZWN0LmRlZmluZVByb3BlcnR5YCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtcmVmbGVjdC5kZWZpbmVwcm9wZXJ0eVxuJCh7IHRhcmdldDogJ1JlZmxlY3QnLCBzdGF0OiB0cnVlLCBmb3JjZWQ6IEVSUk9SX0lOU1RFQURfT0ZfRkFMU0UsIHNoYW06ICFERVNDUklQVE9SUyB9LCB7XG4gIGRlZmluZVByb3BlcnR5OiBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIHByb3BlcnR5S2V5LCBhdHRyaWJ1dGVzKSB7XG4gICAgYW5PYmplY3QodGFyZ2V0KTtcbiAgICB2YXIga2V5ID0gdG9QcmltaXRpdmUocHJvcGVydHlLZXksIHRydWUpO1xuICAgIGFuT2JqZWN0KGF0dHJpYnV0ZXMpO1xuICAgIHRyeSB7XG4gICAgICBkZWZpbmVQcm9wZXJ0eU1vZHVsZS5mKHRhcmdldCwga2V5LCBhdHRyaWJ1dGVzKTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG59KTtcbiIsInZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLW9iamVjdCcpO1xudmFyIGdldE93blByb3BlcnR5RGVzY3JpcHRvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9yJykuZjtcblxuLy8gYFJlZmxlY3QuZGVsZXRlUHJvcGVydHlgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1yZWZsZWN0LmRlbGV0ZXByb3BlcnR5XG4kKHsgdGFyZ2V0OiAnUmVmbGVjdCcsIHN0YXQ6IHRydWUgfSwge1xuICBkZWxldGVQcm9wZXJ0eTogZnVuY3Rpb24gZGVsZXRlUHJvcGVydHkodGFyZ2V0LCBwcm9wZXJ0eUtleSkge1xuICAgIHZhciBkZXNjcmlwdG9yID0gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGFuT2JqZWN0KHRhcmdldCksIHByb3BlcnR5S2V5KTtcbiAgICByZXR1cm4gZGVzY3JpcHRvciAmJiAhZGVzY3JpcHRvci5jb25maWd1cmFibGUgPyBmYWxzZSA6IGRlbGV0ZSB0YXJnZXRbcHJvcGVydHlLZXldO1xuICB9XG59KTtcbiIsInZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Rlc2NyaXB0b3JzJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4tb2JqZWN0Jyk7XG52YXIgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yTW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3InKTtcblxuLy8gYFJlZmxlY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtcmVmbGVjdC5nZXRvd25wcm9wZXJ0eWRlc2NyaXB0b3JcbiQoeyB0YXJnZXQ6ICdSZWZsZWN0Jywgc3RhdDogdHJ1ZSwgc2hhbTogIURFU0NSSVBUT1JTIH0sIHtcbiAgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yOiBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodGFyZ2V0LCBwcm9wZXJ0eUtleSkge1xuICAgIHJldHVybiBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JNb2R1bGUuZihhbk9iamVjdCh0YXJnZXQpLCBwcm9wZXJ0eUtleSk7XG4gIH1cbn0pO1xuIiwidmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4tb2JqZWN0Jyk7XG52YXIgb2JqZWN0R2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1wcm90b3R5cGUtb2YnKTtcbnZhciBDT1JSRUNUX1BST1RPVFlQRV9HRVRURVIgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY29ycmVjdC1wcm90b3R5cGUtZ2V0dGVyJyk7XG5cbi8vIGBSZWZsZWN0LmdldFByb3RvdHlwZU9mYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtcmVmbGVjdC5nZXRwcm90b3R5cGVvZlxuJCh7IHRhcmdldDogJ1JlZmxlY3QnLCBzdGF0OiB0cnVlLCBzaGFtOiAhQ09SUkVDVF9QUk9UT1RZUEVfR0VUVEVSIH0sIHtcbiAgZ2V0UHJvdG90eXBlT2Y6IGZ1bmN0aW9uIGdldFByb3RvdHlwZU9mKHRhcmdldCkge1xuICAgIHJldHVybiBvYmplY3RHZXRQcm90b3R5cGVPZihhbk9iamVjdCh0YXJnZXQpKTtcbiAgfVxufSk7XG4iLCJ2YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1vYmplY3QnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1vYmplY3QnKTtcbnZhciBoYXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGFzJyk7XG52YXIgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yTW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3InKTtcbnZhciBnZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZ2V0LXByb3RvdHlwZS1vZicpO1xuXG4vLyBgUmVmbGVjdC5nZXRgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1yZWZsZWN0LmdldFxuZnVuY3Rpb24gZ2V0KHRhcmdldCwgcHJvcGVydHlLZXkgLyogLCByZWNlaXZlciAqLykge1xuICB2YXIgcmVjZWl2ZXIgPSBhcmd1bWVudHMubGVuZ3RoIDwgMyA/IHRhcmdldCA6IGFyZ3VtZW50c1syXTtcbiAgdmFyIGRlc2NyaXB0b3IsIHByb3RvdHlwZTtcbiAgaWYgKGFuT2JqZWN0KHRhcmdldCkgPT09IHJlY2VpdmVyKSByZXR1cm4gdGFyZ2V0W3Byb3BlcnR5S2V5XTtcbiAgaWYgKGRlc2NyaXB0b3IgPSBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JNb2R1bGUuZih0YXJnZXQsIHByb3BlcnR5S2V5KSkgcmV0dXJuIGhhcyhkZXNjcmlwdG9yLCAndmFsdWUnKVxuICAgID8gZGVzY3JpcHRvci52YWx1ZVxuICAgIDogZGVzY3JpcHRvci5nZXQgPT09IHVuZGVmaW5lZFxuICAgICAgPyB1bmRlZmluZWRcbiAgICAgIDogZGVzY3JpcHRvci5nZXQuY2FsbChyZWNlaXZlcik7XG4gIGlmIChpc09iamVjdChwcm90b3R5cGUgPSBnZXRQcm90b3R5cGVPZih0YXJnZXQpKSkgcmV0dXJuIGdldChwcm90b3R5cGUsIHByb3BlcnR5S2V5LCByZWNlaXZlcik7XG59XG5cbiQoeyB0YXJnZXQ6ICdSZWZsZWN0Jywgc3RhdDogdHJ1ZSB9LCB7XG4gIGdldDogZ2V0XG59KTtcbiIsInZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xuXG4vLyBgUmVmbGVjdC5oYXNgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1yZWZsZWN0Lmhhc1xuJCh7IHRhcmdldDogJ1JlZmxlY3QnLCBzdGF0OiB0cnVlIH0sIHtcbiAgaGFzOiBmdW5jdGlvbiBoYXModGFyZ2V0LCBwcm9wZXJ0eUtleSkge1xuICAgIHJldHVybiBwcm9wZXJ0eUtleSBpbiB0YXJnZXQ7XG4gIH1cbn0pO1xuIiwidmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4tb2JqZWN0Jyk7XG5cbnZhciBvYmplY3RJc0V4dGVuc2libGUgPSBPYmplY3QuaXNFeHRlbnNpYmxlO1xuXG4vLyBgUmVmbGVjdC5pc0V4dGVuc2libGVgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1yZWZsZWN0LmlzZXh0ZW5zaWJsZVxuJCh7IHRhcmdldDogJ1JlZmxlY3QnLCBzdGF0OiB0cnVlIH0sIHtcbiAgaXNFeHRlbnNpYmxlOiBmdW5jdGlvbiBpc0V4dGVuc2libGUodGFyZ2V0KSB7XG4gICAgYW5PYmplY3QodGFyZ2V0KTtcbiAgICByZXR1cm4gb2JqZWN0SXNFeHRlbnNpYmxlID8gb2JqZWN0SXNFeHRlbnNpYmxlKHRhcmdldCkgOiB0cnVlO1xuICB9XG59KTtcbiIsInZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIG93bktleXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb3duLWtleXMnKTtcblxuLy8gYFJlZmxlY3Qub3duS2V5c2AgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXJlZmxlY3Qub3dua2V5c1xuJCh7IHRhcmdldDogJ1JlZmxlY3QnLCBzdGF0OiB0cnVlIH0sIHtcbiAgb3duS2V5czogb3duS2V5c1xufSk7XG4iLCJ2YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBnZXRCdWlsdEluID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dldC1idWlsdC1pbicpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLW9iamVjdCcpO1xudmFyIEZSRUVaSU5HID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZyZWV6aW5nJyk7XG5cbi8vIGBSZWZsZWN0LnByZXZlbnRFeHRlbnNpb25zYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtcmVmbGVjdC5wcmV2ZW50ZXh0ZW5zaW9uc1xuJCh7IHRhcmdldDogJ1JlZmxlY3QnLCBzdGF0OiB0cnVlLCBzaGFtOiAhRlJFRVpJTkcgfSwge1xuICBwcmV2ZW50RXh0ZW5zaW9uczogZnVuY3Rpb24gcHJldmVudEV4dGVuc2lvbnModGFyZ2V0KSB7XG4gICAgYW5PYmplY3QodGFyZ2V0KTtcbiAgICB0cnkge1xuICAgICAgdmFyIG9iamVjdFByZXZlbnRFeHRlbnNpb25zID0gZ2V0QnVpbHRJbignT2JqZWN0JywgJ3ByZXZlbnRFeHRlbnNpb25zJyk7XG4gICAgICBpZiAob2JqZWN0UHJldmVudEV4dGVuc2lvbnMpIG9iamVjdFByZXZlbnRFeHRlbnNpb25zKHRhcmdldCk7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxufSk7XG4iLCJ2YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1vYmplY3QnKTtcbnZhciBhUG9zc2libGVQcm90b3R5cGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYS1wb3NzaWJsZS1wcm90b3R5cGUnKTtcbnZhciBvYmplY3RTZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3Qtc2V0LXByb3RvdHlwZS1vZicpO1xuXG4vLyBgUmVmbGVjdC5zZXRQcm90b3R5cGVPZmAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXJlZmxlY3Quc2V0cHJvdG90eXBlb2ZcbmlmIChvYmplY3RTZXRQcm90b3R5cGVPZikgJCh7IHRhcmdldDogJ1JlZmxlY3QnLCBzdGF0OiB0cnVlIH0sIHtcbiAgc2V0UHJvdG90eXBlT2Y6IGZ1bmN0aW9uIHNldFByb3RvdHlwZU9mKHRhcmdldCwgcHJvdG8pIHtcbiAgICBhbk9iamVjdCh0YXJnZXQpO1xuICAgIGFQb3NzaWJsZVByb3RvdHlwZShwcm90byk7XG4gICAgdHJ5IHtcbiAgICAgIG9iamVjdFNldFByb3RvdHlwZU9mKHRhcmdldCwgcHJvdG8pO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cbn0pO1xuIiwidmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4tb2JqZWN0Jyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtb2JqZWN0Jyk7XG52YXIgaGFzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hhcycpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG52YXIgZGVmaW5lUHJvcGVydHlNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWRlZmluZS1wcm9wZXJ0eScpO1xudmFyIGdldE93blByb3BlcnR5RGVzY3JpcHRvck1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9yJyk7XG52YXIgZ2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1wcm90b3R5cGUtb2YnKTtcbnZhciBjcmVhdGVQcm9wZXJ0eURlc2NyaXB0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLXByb3BlcnR5LWRlc2NyaXB0b3InKTtcblxuLy8gYFJlZmxlY3Quc2V0YCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtcmVmbGVjdC5zZXRcbmZ1bmN0aW9uIHNldCh0YXJnZXQsIHByb3BlcnR5S2V5LCBWIC8qICwgcmVjZWl2ZXIgKi8pIHtcbiAgdmFyIHJlY2VpdmVyID0gYXJndW1lbnRzLmxlbmd0aCA8IDQgPyB0YXJnZXQgOiBhcmd1bWVudHNbM107XG4gIHZhciBvd25EZXNjcmlwdG9yID0gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yTW9kdWxlLmYoYW5PYmplY3QodGFyZ2V0KSwgcHJvcGVydHlLZXkpO1xuICB2YXIgZXhpc3RpbmdEZXNjcmlwdG9yLCBwcm90b3R5cGU7XG4gIGlmICghb3duRGVzY3JpcHRvcikge1xuICAgIGlmIChpc09iamVjdChwcm90b3R5cGUgPSBnZXRQcm90b3R5cGVPZih0YXJnZXQpKSkge1xuICAgICAgcmV0dXJuIHNldChwcm90b3R5cGUsIHByb3BlcnR5S2V5LCBWLCByZWNlaXZlcik7XG4gICAgfVxuICAgIG93bkRlc2NyaXB0b3IgPSBjcmVhdGVQcm9wZXJ0eURlc2NyaXB0b3IoMCk7XG4gIH1cbiAgaWYgKGhhcyhvd25EZXNjcmlwdG9yLCAndmFsdWUnKSkge1xuICAgIGlmIChvd25EZXNjcmlwdG9yLndyaXRhYmxlID09PSBmYWxzZSB8fCAhaXNPYmplY3QocmVjZWl2ZXIpKSByZXR1cm4gZmFsc2U7XG4gICAgaWYgKGV4aXN0aW5nRGVzY3JpcHRvciA9IGdldE93blByb3BlcnR5RGVzY3JpcHRvck1vZHVsZS5mKHJlY2VpdmVyLCBwcm9wZXJ0eUtleSkpIHtcbiAgICAgIGlmIChleGlzdGluZ0Rlc2NyaXB0b3IuZ2V0IHx8IGV4aXN0aW5nRGVzY3JpcHRvci5zZXQgfHwgZXhpc3RpbmdEZXNjcmlwdG9yLndyaXRhYmxlID09PSBmYWxzZSkgcmV0dXJuIGZhbHNlO1xuICAgICAgZXhpc3RpbmdEZXNjcmlwdG9yLnZhbHVlID0gVjtcbiAgICAgIGRlZmluZVByb3BlcnR5TW9kdWxlLmYocmVjZWl2ZXIsIHByb3BlcnR5S2V5LCBleGlzdGluZ0Rlc2NyaXB0b3IpO1xuICAgIH0gZWxzZSBkZWZpbmVQcm9wZXJ0eU1vZHVsZS5mKHJlY2VpdmVyLCBwcm9wZXJ0eUtleSwgY3JlYXRlUHJvcGVydHlEZXNjcmlwdG9yKDAsIFYpKTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICByZXR1cm4gb3duRGVzY3JpcHRvci5zZXQgPT09IHVuZGVmaW5lZCA/IGZhbHNlIDogKG93bkRlc2NyaXB0b3Iuc2V0LmNhbGwocmVjZWl2ZXIsIFYpLCB0cnVlKTtcbn1cblxuLy8gTVMgRWRnZSAxNy0xOCBSZWZsZWN0LnNldCBhbGxvd3Mgc2V0dGluZyB0aGUgcHJvcGVydHkgdG8gb2JqZWN0XG4vLyB3aXRoIG5vbi13cml0YWJsZSBwcm9wZXJ0eSBvbiB0aGUgcHJvdG90eXBlXG52YXIgTVNfRURHRV9CVUcgPSBmYWlscyhmdW5jdGlvbiAoKSB7XG4gIHZhciBDb25zdHJ1Y3RvciA9IGZ1bmN0aW9uICgpIHsgLyogZW1wdHkgKi8gfTtcbiAgdmFyIG9iamVjdCA9IGRlZmluZVByb3BlcnR5TW9kdWxlLmYobmV3IENvbnN0cnVjdG9yKCksICdhJywgeyBjb25maWd1cmFibGU6IHRydWUgfSk7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bmRlZlxuICByZXR1cm4gUmVmbGVjdC5zZXQoQ29uc3RydWN0b3IucHJvdG90eXBlLCAnYScsIDEsIG9iamVjdCkgIT09IGZhbHNlO1xufSk7XG5cbiQoeyB0YXJnZXQ6ICdSZWZsZWN0Jywgc3RhdDogdHJ1ZSwgZm9yY2VkOiBNU19FREdFX0JVRyB9LCB7XG4gIHNldDogc2V0XG59KTtcbiIsInZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciBzZXRUb1N0cmluZ1RhZyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zZXQtdG8tc3RyaW5nLXRhZycpO1xuXG4kKHsgZ2xvYmFsOiB0cnVlIH0sIHsgUmVmbGVjdDoge30gfSk7XG5cbi8vIFJlZmxlY3RbQEB0b1N0cmluZ1RhZ10gcHJvcGVydHlcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtcmVmbGVjdC1AQHRvc3RyaW5ndGFnXG5zZXRUb1N0cmluZ1RhZyhnbG9iYWwuUmVmbGVjdCwgJ1JlZmxlY3QnLCB0cnVlKTtcbiIsInZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZXNjcmlwdG9ycycpO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciBpc0ZvcmNlZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1mb3JjZWQnKTtcbnZhciBpbmhlcml0SWZSZXF1aXJlZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pbmhlcml0LWlmLXJlcXVpcmVkJyk7XG52YXIgZGVmaW5lUHJvcGVydHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWRlZmluZS1wcm9wZXJ0eScpLmY7XG52YXIgZ2V0T3duUHJvcGVydHlOYW1lcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZ2V0LW93bi1wcm9wZXJ0eS1uYW1lcycpLmY7XG52YXIgaXNSZWdFeHAgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtcmVnZXhwJyk7XG52YXIgZ2V0RmxhZ3MgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVnZXhwLWZsYWdzJyk7XG52YXIgc3RpY2t5SGVscGVycyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZWdleHAtc3RpY2t5LWhlbHBlcnMnKTtcbnZhciByZWRlZmluZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZWRlZmluZScpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG52YXIgc2V0SW50ZXJuYWxTdGF0ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pbnRlcm5hbC1zdGF0ZScpLnNldDtcbnZhciBzZXRTcGVjaWVzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NldC1zcGVjaWVzJyk7XG52YXIgd2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sJyk7XG5cbnZhciBNQVRDSCA9IHdlbGxLbm93blN5bWJvbCgnbWF0Y2gnKTtcbnZhciBOYXRpdmVSZWdFeHAgPSBnbG9iYWwuUmVnRXhwO1xudmFyIFJlZ0V4cFByb3RvdHlwZSA9IE5hdGl2ZVJlZ0V4cC5wcm90b3R5cGU7XG52YXIgcmUxID0gL2EvZztcbnZhciByZTIgPSAvYS9nO1xuXG4vLyBcIm5ld1wiIHNob3VsZCBjcmVhdGUgYSBuZXcgb2JqZWN0LCBvbGQgd2Via2l0IGJ1Z1xudmFyIENPUlJFQ1RfTkVXID0gbmV3IE5hdGl2ZVJlZ0V4cChyZTEpICE9PSByZTE7XG5cbnZhciBVTlNVUFBPUlRFRF9ZID0gc3RpY2t5SGVscGVycy5VTlNVUFBPUlRFRF9ZO1xuXG52YXIgRk9SQ0VEID0gREVTQ1JJUFRPUlMgJiYgaXNGb3JjZWQoJ1JlZ0V4cCcsICghQ09SUkVDVF9ORVcgfHwgVU5TVVBQT1JURURfWSB8fCBmYWlscyhmdW5jdGlvbiAoKSB7XG4gIHJlMltNQVRDSF0gPSBmYWxzZTtcbiAgLy8gUmVnRXhwIGNvbnN0cnVjdG9yIGNhbiBhbHRlciBmbGFncyBhbmQgSXNSZWdFeHAgd29ya3MgY29ycmVjdCB3aXRoIEBAbWF0Y2hcbiAgcmV0dXJuIE5hdGl2ZVJlZ0V4cChyZTEpICE9IHJlMSB8fCBOYXRpdmVSZWdFeHAocmUyKSA9PSByZTIgfHwgTmF0aXZlUmVnRXhwKHJlMSwgJ2knKSAhPSAnL2EvaSc7XG59KSkpO1xuXG4vLyBgUmVnRXhwYCBjb25zdHJ1Y3RvclxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1yZWdleHAtY29uc3RydWN0b3JcbmlmIChGT1JDRUQpIHtcbiAgdmFyIFJlZ0V4cFdyYXBwZXIgPSBmdW5jdGlvbiBSZWdFeHAocGF0dGVybiwgZmxhZ3MpIHtcbiAgICB2YXIgdGhpc0lzUmVnRXhwID0gdGhpcyBpbnN0YW5jZW9mIFJlZ0V4cFdyYXBwZXI7XG4gICAgdmFyIHBhdHRlcm5Jc1JlZ0V4cCA9IGlzUmVnRXhwKHBhdHRlcm4pO1xuICAgIHZhciBmbGFnc0FyZVVuZGVmaW5lZCA9IGZsYWdzID09PSB1bmRlZmluZWQ7XG4gICAgdmFyIHN0aWNreTtcblxuICAgIGlmICghdGhpc0lzUmVnRXhwICYmIHBhdHRlcm5Jc1JlZ0V4cCAmJiBwYXR0ZXJuLmNvbnN0cnVjdG9yID09PSBSZWdFeHBXcmFwcGVyICYmIGZsYWdzQXJlVW5kZWZpbmVkKSB7XG4gICAgICByZXR1cm4gcGF0dGVybjtcbiAgICB9XG5cbiAgICBpZiAoQ09SUkVDVF9ORVcpIHtcbiAgICAgIGlmIChwYXR0ZXJuSXNSZWdFeHAgJiYgIWZsYWdzQXJlVW5kZWZpbmVkKSBwYXR0ZXJuID0gcGF0dGVybi5zb3VyY2U7XG4gICAgfSBlbHNlIGlmIChwYXR0ZXJuIGluc3RhbmNlb2YgUmVnRXhwV3JhcHBlcikge1xuICAgICAgaWYgKGZsYWdzQXJlVW5kZWZpbmVkKSBmbGFncyA9IGdldEZsYWdzLmNhbGwocGF0dGVybik7XG4gICAgICBwYXR0ZXJuID0gcGF0dGVybi5zb3VyY2U7XG4gICAgfVxuXG4gICAgaWYgKFVOU1VQUE9SVEVEX1kpIHtcbiAgICAgIHN0aWNreSA9ICEhZmxhZ3MgJiYgZmxhZ3MuaW5kZXhPZigneScpID4gLTE7XG4gICAgICBpZiAoc3RpY2t5KSBmbGFncyA9IGZsYWdzLnJlcGxhY2UoL3kvZywgJycpO1xuICAgIH1cblxuICAgIHZhciByZXN1bHQgPSBpbmhlcml0SWZSZXF1aXJlZChcbiAgICAgIENPUlJFQ1RfTkVXID8gbmV3IE5hdGl2ZVJlZ0V4cChwYXR0ZXJuLCBmbGFncykgOiBOYXRpdmVSZWdFeHAocGF0dGVybiwgZmxhZ3MpLFxuICAgICAgdGhpc0lzUmVnRXhwID8gdGhpcyA6IFJlZ0V4cFByb3RvdHlwZSxcbiAgICAgIFJlZ0V4cFdyYXBwZXJcbiAgICApO1xuXG4gICAgaWYgKFVOU1VQUE9SVEVEX1kgJiYgc3RpY2t5KSBzZXRJbnRlcm5hbFN0YXRlKHJlc3VsdCwgeyBzdGlja3k6IHN0aWNreSB9KTtcblxuICAgIHJldHVybiByZXN1bHQ7XG4gIH07XG4gIHZhciBwcm94eSA9IGZ1bmN0aW9uIChrZXkpIHtcbiAgICBrZXkgaW4gUmVnRXhwV3JhcHBlciB8fCBkZWZpbmVQcm9wZXJ0eShSZWdFeHBXcmFwcGVyLCBrZXksIHtcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gTmF0aXZlUmVnRXhwW2tleV07IH0sXG4gICAgICBzZXQ6IGZ1bmN0aW9uIChpdCkgeyBOYXRpdmVSZWdFeHBba2V5XSA9IGl0OyB9XG4gICAgfSk7XG4gIH07XG4gIHZhciBrZXlzID0gZ2V0T3duUHJvcGVydHlOYW1lcyhOYXRpdmVSZWdFeHApO1xuICB2YXIgaW5kZXggPSAwO1xuICB3aGlsZSAoa2V5cy5sZW5ndGggPiBpbmRleCkgcHJveHkoa2V5c1tpbmRleCsrXSk7XG4gIFJlZ0V4cFByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IFJlZ0V4cFdyYXBwZXI7XG4gIFJlZ0V4cFdyYXBwZXIucHJvdG90eXBlID0gUmVnRXhwUHJvdG90eXBlO1xuICByZWRlZmluZShnbG9iYWwsICdSZWdFeHAnLCBSZWdFeHBXcmFwcGVyKTtcbn1cblxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1nZXQtcmVnZXhwLUBAc3BlY2llc1xuc2V0U3BlY2llcygnUmVnRXhwJyk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBleGVjID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlZ2V4cC1leGVjJyk7XG5cbi8vIGBSZWdFeHAucHJvdG90eXBlLmV4ZWNgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1yZWdleHAucHJvdG90eXBlLmV4ZWNcbiQoeyB0YXJnZXQ6ICdSZWdFeHAnLCBwcm90bzogdHJ1ZSwgZm9yY2VkOiAvLi8uZXhlYyAhPT0gZXhlYyB9LCB7XG4gIGV4ZWM6IGV4ZWNcbn0pO1xuIiwidmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Rlc2NyaXB0b3JzJyk7XG52YXIgb2JqZWN0RGVmaW5lUHJvcGVydHlNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWRlZmluZS1wcm9wZXJ0eScpO1xudmFyIHJlZ0V4cEZsYWdzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlZ2V4cC1mbGFncycpO1xudmFyIFVOU1VQUE9SVEVEX1kgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVnZXhwLXN0aWNreS1oZWxwZXJzJykuVU5TVVBQT1JURURfWTtcblxuLy8gYFJlZ0V4cC5wcm90b3R5cGUuZmxhZ3NgIGdldHRlclxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1nZXQtcmVnZXhwLnByb3RvdHlwZS5mbGFnc1xuaWYgKERFU0NSSVBUT1JTICYmICgvLi9nLmZsYWdzICE9ICdnJyB8fCBVTlNVUFBPUlRFRF9ZKSkge1xuICBvYmplY3REZWZpbmVQcm9wZXJ0eU1vZHVsZS5mKFJlZ0V4cC5wcm90b3R5cGUsICdmbGFncycsIHtcbiAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgZ2V0OiByZWdFeHBGbGFnc1xuICB9KTtcbn1cbiIsInZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZXNjcmlwdG9ycycpO1xudmFyIFVOU1VQUE9SVEVEX1kgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVnZXhwLXN0aWNreS1oZWxwZXJzJykuVU5TVVBQT1JURURfWTtcbnZhciBkZWZpbmVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZGVmaW5lLXByb3BlcnR5JykuZjtcbnZhciBnZXRJbnRlcm5hbFN0YXRlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ludGVybmFsLXN0YXRlJykuZ2V0O1xudmFyIFJlZ0V4cFByb3RvdHlwZSA9IFJlZ0V4cC5wcm90b3R5cGU7XG5cbi8vIGBSZWdFeHAucHJvdG90eXBlLnN0aWNreWAgZ2V0dGVyXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWdldC1yZWdleHAucHJvdG90eXBlLnN0aWNreVxuaWYgKERFU0NSSVBUT1JTICYmIFVOU1VQUE9SVEVEX1kpIHtcbiAgZGVmaW5lUHJvcGVydHkoUmVnRXhwLnByb3RvdHlwZSwgJ3N0aWNreScsIHtcbiAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAodGhpcyA9PT0gUmVnRXhwUHJvdG90eXBlKSByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgLy8gV2UgY2FuJ3QgdXNlIEludGVybmFsU3RhdGVNb2R1bGUuZ2V0dGVyRm9yIGJlY2F1c2VcbiAgICAgIC8vIHdlIGRvbid0IGFkZCBtZXRhZGF0YSBmb3IgcmVnZXhwcyBjcmVhdGVkIGJ5IGEgbGl0ZXJhbC5cbiAgICAgIGlmICh0aGlzIGluc3RhbmNlb2YgUmVnRXhwKSB7XG4gICAgICAgIHJldHVybiAhIWdldEludGVybmFsU3RhdGUodGhpcykuc3RpY2t5O1xuICAgICAgfVxuICAgICAgdGhyb3cgVHlwZUVycm9yKCdJbmNvbXBhdGlibGUgcmVjZWl2ZXIsIFJlZ0V4cCByZXF1aXJlZCcpO1xuICAgIH1cbiAgfSk7XG59XG4iLCIndXNlIHN0cmljdCc7XG4vLyBUT0RPOiBSZW1vdmUgZnJvbSBgY29yZS1qc0A0YCBzaW5jZSBpdCdzIG1vdmVkIHRvIGVudHJ5IHBvaW50c1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5yZWdleHAuZXhlYycpO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtb2JqZWN0Jyk7XG5cbnZhciBERUxFR0FURVNfVE9fRVhFQyA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIGV4ZWNDYWxsZWQgPSBmYWxzZTtcbiAgdmFyIHJlID0gL1thY10vO1xuICByZS5leGVjID0gZnVuY3Rpb24gKCkge1xuICAgIGV4ZWNDYWxsZWQgPSB0cnVlO1xuICAgIHJldHVybiAvLi8uZXhlYy5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICB9O1xuICByZXR1cm4gcmUudGVzdCgnYWJjJykgPT09IHRydWUgJiYgZXhlY0NhbGxlZDtcbn0oKTtcblxudmFyIG5hdGl2ZVRlc3QgPSAvLi8udGVzdDtcblxuLy8gYFJlZ0V4cC5wcm90b3R5cGUudGVzdGAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXJlZ2V4cC5wcm90b3R5cGUudGVzdFxuJCh7IHRhcmdldDogJ1JlZ0V4cCcsIHByb3RvOiB0cnVlLCBmb3JjZWQ6ICFERUxFR0FURVNfVE9fRVhFQyB9LCB7XG4gIHRlc3Q6IGZ1bmN0aW9uIChzdHIpIHtcbiAgICBpZiAodHlwZW9mIHRoaXMuZXhlYyAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgcmV0dXJuIG5hdGl2ZVRlc3QuY2FsbCh0aGlzLCBzdHIpO1xuICAgIH1cbiAgICB2YXIgcmVzdWx0ID0gdGhpcy5leGVjKHN0cik7XG4gICAgaWYgKHJlc3VsdCAhPT0gbnVsbCAmJiAhaXNPYmplY3QocmVzdWx0KSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdSZWdFeHAgZXhlYyBtZXRob2QgcmV0dXJuZWQgc29tZXRoaW5nIG90aGVyIHRoYW4gYW4gT2JqZWN0IG9yIG51bGwnKTtcbiAgICB9XG4gICAgcmV0dXJuICEhcmVzdWx0O1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciByZWRlZmluZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZWRlZmluZScpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLW9iamVjdCcpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG52YXIgZmxhZ3MgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVnZXhwLWZsYWdzJyk7XG5cbnZhciBUT19TVFJJTkcgPSAndG9TdHJpbmcnO1xudmFyIFJlZ0V4cFByb3RvdHlwZSA9IFJlZ0V4cC5wcm90b3R5cGU7XG52YXIgbmF0aXZlVG9TdHJpbmcgPSBSZWdFeHBQcm90b3R5cGVbVE9fU1RSSU5HXTtcblxudmFyIE5PVF9HRU5FUklDID0gZmFpbHMoZnVuY3Rpb24gKCkgeyByZXR1cm4gbmF0aXZlVG9TdHJpbmcuY2FsbCh7IHNvdXJjZTogJ2EnLCBmbGFnczogJ2InIH0pICE9ICcvYS9iJzsgfSk7XG4vLyBGRjQ0LSBSZWdFeHAjdG9TdHJpbmcgaGFzIGEgd3JvbmcgbmFtZVxudmFyIElOQ09SUkVDVF9OQU1FID0gbmF0aXZlVG9TdHJpbmcubmFtZSAhPSBUT19TVFJJTkc7XG5cbi8vIGBSZWdFeHAucHJvdG90eXBlLnRvU3RyaW5nYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtcmVnZXhwLnByb3RvdHlwZS50b3N0cmluZ1xuaWYgKE5PVF9HRU5FUklDIHx8IElOQ09SUkVDVF9OQU1FKSB7XG4gIHJlZGVmaW5lKFJlZ0V4cC5wcm90b3R5cGUsIFRPX1NUUklORywgZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgdmFyIFIgPSBhbk9iamVjdCh0aGlzKTtcbiAgICB2YXIgcCA9IFN0cmluZyhSLnNvdXJjZSk7XG4gICAgdmFyIHJmID0gUi5mbGFncztcbiAgICB2YXIgZiA9IFN0cmluZyhyZiA9PT0gdW5kZWZpbmVkICYmIFIgaW5zdGFuY2VvZiBSZWdFeHAgJiYgISgnZmxhZ3MnIGluIFJlZ0V4cFByb3RvdHlwZSkgPyBmbGFncy5jYWxsKFIpIDogcmYpO1xuICAgIHJldHVybiAnLycgKyBwICsgJy8nICsgZjtcbiAgfSwgeyB1bnNhZmU6IHRydWUgfSk7XG59XG4iLCIndXNlIHN0cmljdCc7XG52YXIgY29sbGVjdGlvbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jb2xsZWN0aW9uJyk7XG52YXIgY29sbGVjdGlvblN0cm9uZyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jb2xsZWN0aW9uLXN0cm9uZycpO1xuXG4vLyBgU2V0YCBjb25zdHJ1Y3RvclxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zZXQtb2JqZWN0c1xubW9kdWxlLmV4cG9ydHMgPSBjb2xsZWN0aW9uKCdTZXQnLCBmdW5jdGlvbiAoaW5pdCkge1xuICByZXR1cm4gZnVuY3Rpb24gU2V0KCkgeyByZXR1cm4gaW5pdCh0aGlzLCBhcmd1bWVudHMubGVuZ3RoID8gYXJndW1lbnRzWzBdIDogdW5kZWZpbmVkKTsgfTtcbn0sIGNvbGxlY3Rpb25TdHJvbmcpO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgY3JlYXRlSFRNTCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtaHRtbCcpO1xudmFyIGZvcmNlZFN0cmluZ0hUTUxNZXRob2QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc3RyaW5nLWh0bWwtZm9yY2VkJyk7XG5cbi8vIGBTdHJpbmcucHJvdG90eXBlLmFuY2hvcmAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXN0cmluZy5wcm90b3R5cGUuYW5jaG9yXG4kKHsgdGFyZ2V0OiAnU3RyaW5nJywgcHJvdG86IHRydWUsIGZvcmNlZDogZm9yY2VkU3RyaW5nSFRNTE1ldGhvZCgnYW5jaG9yJykgfSwge1xuICBhbmNob3I6IGZ1bmN0aW9uIGFuY2hvcihuYW1lKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUhUTUwodGhpcywgJ2EnLCAnbmFtZScsIG5hbWUpO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGNyZWF0ZUhUTUwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLWh0bWwnKTtcbnZhciBmb3JjZWRTdHJpbmdIVE1MTWV0aG9kID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3N0cmluZy1odG1sLWZvcmNlZCcpO1xuXG4vLyBgU3RyaW5nLnByb3RvdHlwZS5iaWdgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zdHJpbmcucHJvdG90eXBlLmJpZ1xuJCh7IHRhcmdldDogJ1N0cmluZycsIHByb3RvOiB0cnVlLCBmb3JjZWQ6IGZvcmNlZFN0cmluZ0hUTUxNZXRob2QoJ2JpZycpIH0sIHtcbiAgYmlnOiBmdW5jdGlvbiBiaWcoKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUhUTUwodGhpcywgJ2JpZycsICcnLCAnJyk7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgY3JlYXRlSFRNTCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtaHRtbCcpO1xudmFyIGZvcmNlZFN0cmluZ0hUTUxNZXRob2QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc3RyaW5nLWh0bWwtZm9yY2VkJyk7XG5cbi8vIGBTdHJpbmcucHJvdG90eXBlLmJsaW5rYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc3RyaW5nLnByb3RvdHlwZS5ibGlua1xuJCh7IHRhcmdldDogJ1N0cmluZycsIHByb3RvOiB0cnVlLCBmb3JjZWQ6IGZvcmNlZFN0cmluZ0hUTUxNZXRob2QoJ2JsaW5rJykgfSwge1xuICBibGluazogZnVuY3Rpb24gYmxpbmsoKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUhUTUwodGhpcywgJ2JsaW5rJywgJycsICcnKTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBjcmVhdGVIVE1MID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1odG1sJyk7XG52YXIgZm9yY2VkU3RyaW5nSFRNTE1ldGhvZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zdHJpbmctaHRtbC1mb3JjZWQnKTtcblxuLy8gYFN0cmluZy5wcm90b3R5cGUuYm9sZGAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXN0cmluZy5wcm90b3R5cGUuYm9sZFxuJCh7IHRhcmdldDogJ1N0cmluZycsIHByb3RvOiB0cnVlLCBmb3JjZWQ6IGZvcmNlZFN0cmluZ0hUTUxNZXRob2QoJ2JvbGQnKSB9LCB7XG4gIGJvbGQ6IGZ1bmN0aW9uIGJvbGQoKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUhUTUwodGhpcywgJ2InLCAnJywgJycpO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGNvZGVBdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zdHJpbmctbXVsdGlieXRlJykuY29kZUF0O1xuXG4vLyBgU3RyaW5nLnByb3RvdHlwZS5jb2RlUG9pbnRBdGAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXN0cmluZy5wcm90b3R5cGUuY29kZXBvaW50YXRcbiQoeyB0YXJnZXQ6ICdTdHJpbmcnLCBwcm90bzogdHJ1ZSB9LCB7XG4gIGNvZGVQb2ludEF0OiBmdW5jdGlvbiBjb2RlUG9pbnRBdChwb3MpIHtcbiAgICByZXR1cm4gY29kZUF0KHRoaXMsIHBvcyk7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3InKS5mO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWxlbmd0aCcpO1xudmFyIG5vdEFSZWdFeHAgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvbm90LWEtcmVnZXhwJyk7XG52YXIgcmVxdWlyZU9iamVjdENvZXJjaWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZXF1aXJlLW9iamVjdC1jb2VyY2libGUnKTtcbnZhciBjb3JyZWN0SXNSZWdFeHBMb2dpYyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jb3JyZWN0LWlzLXJlZ2V4cC1sb2dpYycpO1xudmFyIElTX1BVUkUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtcHVyZScpO1xuXG52YXIgbmF0aXZlRW5kc1dpdGggPSAnJy5lbmRzV2l0aDtcbnZhciBtaW4gPSBNYXRoLm1pbjtcblxudmFyIENPUlJFQ1RfSVNfUkVHRVhQX0xPR0lDID0gY29ycmVjdElzUmVnRXhwTG9naWMoJ2VuZHNXaXRoJyk7XG4vLyBodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcy9wdWxsLzcwMlxudmFyIE1ETl9QT0xZRklMTF9CVUcgPSAhSVNfUFVSRSAmJiAhQ09SUkVDVF9JU19SRUdFWFBfTE9HSUMgJiYgISFmdW5jdGlvbiAoKSB7XG4gIHZhciBkZXNjcmlwdG9yID0gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKFN0cmluZy5wcm90b3R5cGUsICdlbmRzV2l0aCcpO1xuICByZXR1cm4gZGVzY3JpcHRvciAmJiAhZGVzY3JpcHRvci53cml0YWJsZTtcbn0oKTtcblxuLy8gYFN0cmluZy5wcm90b3R5cGUuZW5kc1dpdGhgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zdHJpbmcucHJvdG90eXBlLmVuZHN3aXRoXG4kKHsgdGFyZ2V0OiAnU3RyaW5nJywgcHJvdG86IHRydWUsIGZvcmNlZDogIU1ETl9QT0xZRklMTF9CVUcgJiYgIUNPUlJFQ1RfSVNfUkVHRVhQX0xPR0lDIH0sIHtcbiAgZW5kc1dpdGg6IGZ1bmN0aW9uIGVuZHNXaXRoKHNlYXJjaFN0cmluZyAvKiAsIGVuZFBvc2l0aW9uID0gQGxlbmd0aCAqLykge1xuICAgIHZhciB0aGF0ID0gU3RyaW5nKHJlcXVpcmVPYmplY3RDb2VyY2libGUodGhpcykpO1xuICAgIG5vdEFSZWdFeHAoc2VhcmNoU3RyaW5nKTtcbiAgICB2YXIgZW5kUG9zaXRpb24gPSBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZDtcbiAgICB2YXIgbGVuID0gdG9MZW5ndGgodGhhdC5sZW5ndGgpO1xuICAgIHZhciBlbmQgPSBlbmRQb3NpdGlvbiA9PT0gdW5kZWZpbmVkID8gbGVuIDogbWluKHRvTGVuZ3RoKGVuZFBvc2l0aW9uKSwgbGVuKTtcbiAgICB2YXIgc2VhcmNoID0gU3RyaW5nKHNlYXJjaFN0cmluZyk7XG4gICAgcmV0dXJuIG5hdGl2ZUVuZHNXaXRoXG4gICAgICA/IG5hdGl2ZUVuZHNXaXRoLmNhbGwodGhhdCwgc2VhcmNoLCBlbmQpXG4gICAgICA6IHRoYXQuc2xpY2UoZW5kIC0gc2VhcmNoLmxlbmd0aCwgZW5kKSA9PT0gc2VhcmNoO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGNyZWF0ZUhUTUwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLWh0bWwnKTtcbnZhciBmb3JjZWRTdHJpbmdIVE1MTWV0aG9kID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3N0cmluZy1odG1sLWZvcmNlZCcpO1xuXG4vLyBgU3RyaW5nLnByb3RvdHlwZS5maXhlZGAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXN0cmluZy5wcm90b3R5cGUuZml4ZWRcbiQoeyB0YXJnZXQ6ICdTdHJpbmcnLCBwcm90bzogdHJ1ZSwgZm9yY2VkOiBmb3JjZWRTdHJpbmdIVE1MTWV0aG9kKCdmaXhlZCcpIH0sIHtcbiAgZml4ZWQ6IGZ1bmN0aW9uIGZpeGVkKCkge1xuICAgIHJldHVybiBjcmVhdGVIVE1MKHRoaXMsICd0dCcsICcnLCAnJyk7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgY3JlYXRlSFRNTCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtaHRtbCcpO1xudmFyIGZvcmNlZFN0cmluZ0hUTUxNZXRob2QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc3RyaW5nLWh0bWwtZm9yY2VkJyk7XG5cbi8vIGBTdHJpbmcucHJvdG90eXBlLmZvbnRjb2xvcmAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXN0cmluZy5wcm90b3R5cGUuZm9udGNvbG9yXG4kKHsgdGFyZ2V0OiAnU3RyaW5nJywgcHJvdG86IHRydWUsIGZvcmNlZDogZm9yY2VkU3RyaW5nSFRNTE1ldGhvZCgnZm9udGNvbG9yJykgfSwge1xuICBmb250Y29sb3I6IGZ1bmN0aW9uIGZvbnRjb2xvcihjb2xvcikge1xuICAgIHJldHVybiBjcmVhdGVIVE1MKHRoaXMsICdmb250JywgJ2NvbG9yJywgY29sb3IpO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGNyZWF0ZUhUTUwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLWh0bWwnKTtcbnZhciBmb3JjZWRTdHJpbmdIVE1MTWV0aG9kID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3N0cmluZy1odG1sLWZvcmNlZCcpO1xuXG4vLyBgU3RyaW5nLnByb3RvdHlwZS5mb250c2l6ZWAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXN0cmluZy5wcm90b3R5cGUuZm9udHNpemVcbiQoeyB0YXJnZXQ6ICdTdHJpbmcnLCBwcm90bzogdHJ1ZSwgZm9yY2VkOiBmb3JjZWRTdHJpbmdIVE1MTWV0aG9kKCdmb250c2l6ZScpIH0sIHtcbiAgZm9udHNpemU6IGZ1bmN0aW9uIGZvbnRzaXplKHNpemUpIHtcbiAgICByZXR1cm4gY3JlYXRlSFRNTCh0aGlzLCAnZm9udCcsICdzaXplJywgc2l6ZSk7XG4gIH1cbn0pO1xuIiwidmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgdG9BYnNvbHV0ZUluZGV4ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWFic29sdXRlLWluZGV4Jyk7XG5cbnZhciBmcm9tQ2hhckNvZGUgPSBTdHJpbmcuZnJvbUNoYXJDb2RlO1xudmFyIG5hdGl2ZUZyb21Db2RlUG9pbnQgPSBTdHJpbmcuZnJvbUNvZGVQb2ludDtcblxuLy8gbGVuZ3RoIHNob3VsZCBiZSAxLCBvbGQgRkYgcHJvYmxlbVxudmFyIElOQ09SUkVDVF9MRU5HVEggPSAhIW5hdGl2ZUZyb21Db2RlUG9pbnQgJiYgbmF0aXZlRnJvbUNvZGVQb2ludC5sZW5ndGggIT0gMTtcblxuLy8gYFN0cmluZy5mcm9tQ29kZVBvaW50YCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc3RyaW5nLmZyb21jb2RlcG9pbnRcbiQoeyB0YXJnZXQ6ICdTdHJpbmcnLCBzdGF0OiB0cnVlLCBmb3JjZWQ6IElOQ09SUkVDVF9MRU5HVEggfSwge1xuICBmcm9tQ29kZVBvaW50OiBmdW5jdGlvbiBmcm9tQ29kZVBvaW50KHgpIHsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtdmFyc1xuICAgIHZhciBlbGVtZW50cyA9IFtdO1xuICAgIHZhciBsZW5ndGggPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgIHZhciBpID0gMDtcbiAgICB2YXIgY29kZTtcbiAgICB3aGlsZSAobGVuZ3RoID4gaSkge1xuICAgICAgY29kZSA9ICthcmd1bWVudHNbaSsrXTtcbiAgICAgIGlmICh0b0Fic29sdXRlSW5kZXgoY29kZSwgMHgxMEZGRkYpICE9PSBjb2RlKSB0aHJvdyBSYW5nZUVycm9yKGNvZGUgKyAnIGlzIG5vdCBhIHZhbGlkIGNvZGUgcG9pbnQnKTtcbiAgICAgIGVsZW1lbnRzLnB1c2goY29kZSA8IDB4MTAwMDBcbiAgICAgICAgPyBmcm9tQ2hhckNvZGUoY29kZSlcbiAgICAgICAgOiBmcm9tQ2hhckNvZGUoKChjb2RlIC09IDB4MTAwMDApID4+IDEwKSArIDB4RDgwMCwgY29kZSAlIDB4NDAwICsgMHhEQzAwKVxuICAgICAgKTtcbiAgICB9IHJldHVybiBlbGVtZW50cy5qb2luKCcnKTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBub3RBUmVnRXhwID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL25vdC1hLXJlZ2V4cCcpO1xudmFyIHJlcXVpcmVPYmplY3RDb2VyY2libGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVxdWlyZS1vYmplY3QtY29lcmNpYmxlJyk7XG52YXIgY29ycmVjdElzUmVnRXhwTG9naWMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY29ycmVjdC1pcy1yZWdleHAtbG9naWMnKTtcblxuLy8gYFN0cmluZy5wcm90b3R5cGUuaW5jbHVkZXNgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zdHJpbmcucHJvdG90eXBlLmluY2x1ZGVzXG4kKHsgdGFyZ2V0OiAnU3RyaW5nJywgcHJvdG86IHRydWUsIGZvcmNlZDogIWNvcnJlY3RJc1JlZ0V4cExvZ2ljKCdpbmNsdWRlcycpIH0sIHtcbiAgaW5jbHVkZXM6IGZ1bmN0aW9uIGluY2x1ZGVzKHNlYXJjaFN0cmluZyAvKiAsIHBvc2l0aW9uID0gMCAqLykge1xuICAgIHJldHVybiAhIX5TdHJpbmcocmVxdWlyZU9iamVjdENvZXJjaWJsZSh0aGlzKSlcbiAgICAgIC5pbmRleE9mKG5vdEFSZWdFeHAoc2VhcmNoU3RyaW5nKSwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGNyZWF0ZUhUTUwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLWh0bWwnKTtcbnZhciBmb3JjZWRTdHJpbmdIVE1MTWV0aG9kID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3N0cmluZy1odG1sLWZvcmNlZCcpO1xuXG4vLyBgU3RyaW5nLnByb3RvdHlwZS5pdGFsaWNzYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc3RyaW5nLnByb3RvdHlwZS5pdGFsaWNzXG4kKHsgdGFyZ2V0OiAnU3RyaW5nJywgcHJvdG86IHRydWUsIGZvcmNlZDogZm9yY2VkU3RyaW5nSFRNTE1ldGhvZCgnaXRhbGljcycpIH0sIHtcbiAgaXRhbGljczogZnVuY3Rpb24gaXRhbGljcygpIHtcbiAgICByZXR1cm4gY3JlYXRlSFRNTCh0aGlzLCAnaScsICcnLCAnJyk7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGNoYXJBdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zdHJpbmctbXVsdGlieXRlJykuY2hhckF0O1xudmFyIEludGVybmFsU3RhdGVNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaW50ZXJuYWwtc3RhdGUnKTtcbnZhciBkZWZpbmVJdGVyYXRvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZWZpbmUtaXRlcmF0b3InKTtcblxudmFyIFNUUklOR19JVEVSQVRPUiA9ICdTdHJpbmcgSXRlcmF0b3InO1xudmFyIHNldEludGVybmFsU3RhdGUgPSBJbnRlcm5hbFN0YXRlTW9kdWxlLnNldDtcbnZhciBnZXRJbnRlcm5hbFN0YXRlID0gSW50ZXJuYWxTdGF0ZU1vZHVsZS5nZXR0ZXJGb3IoU1RSSU5HX0lURVJBVE9SKTtcblxuLy8gYFN0cmluZy5wcm90b3R5cGVbQEBpdGVyYXRvcl1gIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zdHJpbmcucHJvdG90eXBlLUBAaXRlcmF0b3JcbmRlZmluZUl0ZXJhdG9yKFN0cmluZywgJ1N0cmluZycsIGZ1bmN0aW9uIChpdGVyYXRlZCkge1xuICBzZXRJbnRlcm5hbFN0YXRlKHRoaXMsIHtcbiAgICB0eXBlOiBTVFJJTkdfSVRFUkFUT1IsXG4gICAgc3RyaW5nOiBTdHJpbmcoaXRlcmF0ZWQpLFxuICAgIGluZGV4OiAwXG4gIH0pO1xuLy8gYCVTdHJpbmdJdGVyYXRvclByb3RvdHlwZSUubmV4dGAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLSVzdHJpbmdpdGVyYXRvcnByb3RvdHlwZSUubmV4dFxufSwgZnVuY3Rpb24gbmV4dCgpIHtcbiAgdmFyIHN0YXRlID0gZ2V0SW50ZXJuYWxTdGF0ZSh0aGlzKTtcbiAgdmFyIHN0cmluZyA9IHN0YXRlLnN0cmluZztcbiAgdmFyIGluZGV4ID0gc3RhdGUuaW5kZXg7XG4gIHZhciBwb2ludDtcbiAgaWYgKGluZGV4ID49IHN0cmluZy5sZW5ndGgpIHJldHVybiB7IHZhbHVlOiB1bmRlZmluZWQsIGRvbmU6IHRydWUgfTtcbiAgcG9pbnQgPSBjaGFyQXQoc3RyaW5nLCBpbmRleCk7XG4gIHN0YXRlLmluZGV4ICs9IHBvaW50Lmxlbmd0aDtcbiAgcmV0dXJuIHsgdmFsdWU6IHBvaW50LCBkb25lOiBmYWxzZSB9O1xufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBjcmVhdGVIVE1MID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1odG1sJyk7XG52YXIgZm9yY2VkU3RyaW5nSFRNTE1ldGhvZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zdHJpbmctaHRtbC1mb3JjZWQnKTtcblxuLy8gYFN0cmluZy5wcm90b3R5cGUubGlua2AgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXN0cmluZy5wcm90b3R5cGUubGlua1xuJCh7IHRhcmdldDogJ1N0cmluZycsIHByb3RvOiB0cnVlLCBmb3JjZWQ6IGZvcmNlZFN0cmluZ0hUTUxNZXRob2QoJ2xpbmsnKSB9LCB7XG4gIGxpbms6IGZ1bmN0aW9uIGxpbmsodXJsKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUhUTUwodGhpcywgJ2EnLCAnaHJlZicsIHVybCk7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgY3JlYXRlSXRlcmF0b3JDb25zdHJ1Y3RvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtaXRlcmF0b3ItY29uc3RydWN0b3InKTtcbnZhciByZXF1aXJlT2JqZWN0Q29lcmNpYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlcXVpcmUtb2JqZWN0LWNvZXJjaWJsZScpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWxlbmd0aCcpO1xudmFyIGFGdW5jdGlvbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hLWZ1bmN0aW9uJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4tb2JqZWN0Jyk7XG52YXIgY2xhc3NvZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jbGFzc29mLXJhdycpO1xudmFyIGlzUmVnRXhwID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLXJlZ2V4cCcpO1xudmFyIGdldFJlZ0V4cEZsYWdzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlZ2V4cC1mbGFncycpO1xudmFyIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtbm9uLWVudW1lcmFibGUtcHJvcGVydHknKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xudmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xudmFyIHNwZWNpZXNDb25zdHJ1Y3RvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zcGVjaWVzLWNvbnN0cnVjdG9yJyk7XG52YXIgYWR2YW5jZVN0cmluZ0luZGV4ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FkdmFuY2Utc3RyaW5nLWluZGV4Jyk7XG52YXIgSW50ZXJuYWxTdGF0ZU1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pbnRlcm5hbC1zdGF0ZScpO1xudmFyIElTX1BVUkUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtcHVyZScpO1xuXG52YXIgTUFUQ0hfQUxMID0gd2VsbEtub3duU3ltYm9sKCdtYXRjaEFsbCcpO1xudmFyIFJFR0VYUF9TVFJJTkcgPSAnUmVnRXhwIFN0cmluZyc7XG52YXIgUkVHRVhQX1NUUklOR19JVEVSQVRPUiA9IFJFR0VYUF9TVFJJTkcgKyAnIEl0ZXJhdG9yJztcbnZhciBzZXRJbnRlcm5hbFN0YXRlID0gSW50ZXJuYWxTdGF0ZU1vZHVsZS5zZXQ7XG52YXIgZ2V0SW50ZXJuYWxTdGF0ZSA9IEludGVybmFsU3RhdGVNb2R1bGUuZ2V0dGVyRm9yKFJFR0VYUF9TVFJJTkdfSVRFUkFUT1IpO1xudmFyIFJlZ0V4cFByb3RvdHlwZSA9IFJlZ0V4cC5wcm90b3R5cGU7XG52YXIgcmVnRXhwQnVpbHRpbkV4ZWMgPSBSZWdFeHBQcm90b3R5cGUuZXhlYztcbnZhciBuYXRpdmVNYXRjaEFsbCA9ICcnLm1hdGNoQWxsO1xuXG52YXIgV09SS1NfV0lUSF9OT05fR0xPQkFMX1JFR0VYID0gISFuYXRpdmVNYXRjaEFsbCAmJiAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICAnYScubWF0Y2hBbGwoLy4vKTtcbn0pO1xuXG52YXIgcmVnRXhwRXhlYyA9IGZ1bmN0aW9uIChSLCBTKSB7XG4gIHZhciBleGVjID0gUi5leGVjO1xuICB2YXIgcmVzdWx0O1xuICBpZiAodHlwZW9mIGV4ZWMgPT0gJ2Z1bmN0aW9uJykge1xuICAgIHJlc3VsdCA9IGV4ZWMuY2FsbChSLCBTKTtcbiAgICBpZiAodHlwZW9mIHJlc3VsdCAhPSAnb2JqZWN0JykgdGhyb3cgVHlwZUVycm9yKCdJbmNvcnJlY3QgZXhlYyByZXN1bHQnKTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9IHJldHVybiByZWdFeHBCdWlsdGluRXhlYy5jYWxsKFIsIFMpO1xufTtcblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG1heC1sZW5cbnZhciAkUmVnRXhwU3RyaW5nSXRlcmF0b3IgPSBjcmVhdGVJdGVyYXRvckNvbnN0cnVjdG9yKGZ1bmN0aW9uIFJlZ0V4cFN0cmluZ0l0ZXJhdG9yKHJlZ2V4cCwgc3RyaW5nLCBnbG9iYWwsIGZ1bGxVbmljb2RlKSB7XG4gIHNldEludGVybmFsU3RhdGUodGhpcywge1xuICAgIHR5cGU6IFJFR0VYUF9TVFJJTkdfSVRFUkFUT1IsXG4gICAgcmVnZXhwOiByZWdleHAsXG4gICAgc3RyaW5nOiBzdHJpbmcsXG4gICAgZ2xvYmFsOiBnbG9iYWwsXG4gICAgdW5pY29kZTogZnVsbFVuaWNvZGUsXG4gICAgZG9uZTogZmFsc2VcbiAgfSk7XG59LCBSRUdFWFBfU1RSSU5HLCBmdW5jdGlvbiBuZXh0KCkge1xuICB2YXIgc3RhdGUgPSBnZXRJbnRlcm5hbFN0YXRlKHRoaXMpO1xuICBpZiAoc3RhdGUuZG9uZSkgcmV0dXJuIHsgdmFsdWU6IHVuZGVmaW5lZCwgZG9uZTogdHJ1ZSB9O1xuICB2YXIgUiA9IHN0YXRlLnJlZ2V4cDtcbiAgdmFyIFMgPSBzdGF0ZS5zdHJpbmc7XG4gIHZhciBtYXRjaCA9IHJlZ0V4cEV4ZWMoUiwgUyk7XG4gIGlmIChtYXRjaCA9PT0gbnVsbCkgcmV0dXJuIHsgdmFsdWU6IHVuZGVmaW5lZCwgZG9uZTogc3RhdGUuZG9uZSA9IHRydWUgfTtcbiAgaWYgKHN0YXRlLmdsb2JhbCkge1xuICAgIGlmIChTdHJpbmcobWF0Y2hbMF0pID09ICcnKSBSLmxhc3RJbmRleCA9IGFkdmFuY2VTdHJpbmdJbmRleChTLCB0b0xlbmd0aChSLmxhc3RJbmRleCksIHN0YXRlLnVuaWNvZGUpO1xuICAgIHJldHVybiB7IHZhbHVlOiBtYXRjaCwgZG9uZTogZmFsc2UgfTtcbiAgfVxuICBzdGF0ZS5kb25lID0gdHJ1ZTtcbiAgcmV0dXJuIHsgdmFsdWU6IG1hdGNoLCBkb25lOiBmYWxzZSB9O1xufSk7XG5cbnZhciAkbWF0Y2hBbGwgPSBmdW5jdGlvbiAoc3RyaW5nKSB7XG4gIHZhciBSID0gYW5PYmplY3QodGhpcyk7XG4gIHZhciBTID0gU3RyaW5nKHN0cmluZyk7XG4gIHZhciBDLCBmbGFnc1ZhbHVlLCBmbGFncywgbWF0Y2hlciwgZ2xvYmFsLCBmdWxsVW5pY29kZTtcbiAgQyA9IHNwZWNpZXNDb25zdHJ1Y3RvcihSLCBSZWdFeHApO1xuICBmbGFnc1ZhbHVlID0gUi5mbGFncztcbiAgaWYgKGZsYWdzVmFsdWUgPT09IHVuZGVmaW5lZCAmJiBSIGluc3RhbmNlb2YgUmVnRXhwICYmICEoJ2ZsYWdzJyBpbiBSZWdFeHBQcm90b3R5cGUpKSB7XG4gICAgZmxhZ3NWYWx1ZSA9IGdldFJlZ0V4cEZsYWdzLmNhbGwoUik7XG4gIH1cbiAgZmxhZ3MgPSBmbGFnc1ZhbHVlID09PSB1bmRlZmluZWQgPyAnJyA6IFN0cmluZyhmbGFnc1ZhbHVlKTtcbiAgbWF0Y2hlciA9IG5ldyBDKEMgPT09IFJlZ0V4cCA/IFIuc291cmNlIDogUiwgZmxhZ3MpO1xuICBnbG9iYWwgPSAhIX5mbGFncy5pbmRleE9mKCdnJyk7XG4gIGZ1bGxVbmljb2RlID0gISF+ZmxhZ3MuaW5kZXhPZigndScpO1xuICBtYXRjaGVyLmxhc3RJbmRleCA9IHRvTGVuZ3RoKFIubGFzdEluZGV4KTtcbiAgcmV0dXJuIG5ldyAkUmVnRXhwU3RyaW5nSXRlcmF0b3IobWF0Y2hlciwgUywgZ2xvYmFsLCBmdWxsVW5pY29kZSk7XG59O1xuXG4vLyBgU3RyaW5nLnByb3RvdHlwZS5tYXRjaEFsbGAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXN0cmluZy5wcm90b3R5cGUubWF0Y2hhbGxcbiQoeyB0YXJnZXQ6ICdTdHJpbmcnLCBwcm90bzogdHJ1ZSwgZm9yY2VkOiBXT1JLU19XSVRIX05PTl9HTE9CQUxfUkVHRVggfSwge1xuICBtYXRjaEFsbDogZnVuY3Rpb24gbWF0Y2hBbGwocmVnZXhwKSB7XG4gICAgdmFyIE8gPSByZXF1aXJlT2JqZWN0Q29lcmNpYmxlKHRoaXMpO1xuICAgIHZhciBmbGFncywgUywgbWF0Y2hlciwgcng7XG4gICAgaWYgKHJlZ2V4cCAhPSBudWxsKSB7XG4gICAgICBpZiAoaXNSZWdFeHAocmVnZXhwKSkge1xuICAgICAgICBmbGFncyA9IFN0cmluZyhyZXF1aXJlT2JqZWN0Q29lcmNpYmxlKCdmbGFncycgaW4gUmVnRXhwUHJvdG90eXBlXG4gICAgICAgICAgPyByZWdleHAuZmxhZ3NcbiAgICAgICAgICA6IGdldFJlZ0V4cEZsYWdzLmNhbGwocmVnZXhwKVxuICAgICAgICApKTtcbiAgICAgICAgaWYgKCF+ZmxhZ3MuaW5kZXhPZignZycpKSB0aHJvdyBUeXBlRXJyb3IoJ2AubWF0Y2hBbGxgIGRvZXMgbm90IGFsbG93IG5vbi1nbG9iYWwgcmVnZXhlcycpO1xuICAgICAgfVxuICAgICAgaWYgKFdPUktTX1dJVEhfTk9OX0dMT0JBTF9SRUdFWCkgcmV0dXJuIG5hdGl2ZU1hdGNoQWxsLmFwcGx5KE8sIGFyZ3VtZW50cyk7XG4gICAgICBtYXRjaGVyID0gcmVnZXhwW01BVENIX0FMTF07XG4gICAgICBpZiAobWF0Y2hlciA9PT0gdW5kZWZpbmVkICYmIElTX1BVUkUgJiYgY2xhc3NvZihyZWdleHApID09ICdSZWdFeHAnKSBtYXRjaGVyID0gJG1hdGNoQWxsO1xuICAgICAgaWYgKG1hdGNoZXIgIT0gbnVsbCkgcmV0dXJuIGFGdW5jdGlvbihtYXRjaGVyKS5jYWxsKHJlZ2V4cCwgTyk7XG4gICAgfSBlbHNlIGlmIChXT1JLU19XSVRIX05PTl9HTE9CQUxfUkVHRVgpIHJldHVybiBuYXRpdmVNYXRjaEFsbC5hcHBseShPLCBhcmd1bWVudHMpO1xuICAgIFMgPSBTdHJpbmcoTyk7XG4gICAgcnggPSBuZXcgUmVnRXhwKHJlZ2V4cCwgJ2cnKTtcbiAgICByZXR1cm4gSVNfUFVSRSA/ICRtYXRjaEFsbC5jYWxsKHJ4LCBTKSA6IHJ4W01BVENIX0FMTF0oUyk7XG4gIH1cbn0pO1xuXG5JU19QVVJFIHx8IE1BVENIX0FMTCBpbiBSZWdFeHBQcm90b3R5cGUgfHwgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5KFJlZ0V4cFByb3RvdHlwZSwgTUFUQ0hfQUxMLCAkbWF0Y2hBbGwpO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGZpeFJlZ0V4cFdlbGxLbm93blN5bWJvbExvZ2ljID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZpeC1yZWdleHAtd2VsbC1rbm93bi1zeW1ib2wtbG9naWMnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1vYmplY3QnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1sZW5ndGgnKTtcbnZhciByZXF1aXJlT2JqZWN0Q29lcmNpYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlcXVpcmUtb2JqZWN0LWNvZXJjaWJsZScpO1xudmFyIGFkdmFuY2VTdHJpbmdJbmRleCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hZHZhbmNlLXN0cmluZy1pbmRleCcpO1xudmFyIHJlZ0V4cEV4ZWMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVnZXhwLWV4ZWMtYWJzdHJhY3QnKTtcblxuLy8gQEBtYXRjaCBsb2dpY1xuZml4UmVnRXhwV2VsbEtub3duU3ltYm9sTG9naWMoJ21hdGNoJywgMSwgZnVuY3Rpb24gKE1BVENILCBuYXRpdmVNYXRjaCwgbWF5YmVDYWxsTmF0aXZlKSB7XG4gIHJldHVybiBbXG4gICAgLy8gYFN0cmluZy5wcm90b3R5cGUubWF0Y2hgIG1ldGhvZFxuICAgIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc3RyaW5nLnByb3RvdHlwZS5tYXRjaFxuICAgIGZ1bmN0aW9uIG1hdGNoKHJlZ2V4cCkge1xuICAgICAgdmFyIE8gPSByZXF1aXJlT2JqZWN0Q29lcmNpYmxlKHRoaXMpO1xuICAgICAgdmFyIG1hdGNoZXIgPSByZWdleHAgPT0gdW5kZWZpbmVkID8gdW5kZWZpbmVkIDogcmVnZXhwW01BVENIXTtcbiAgICAgIHJldHVybiBtYXRjaGVyICE9PSB1bmRlZmluZWQgPyBtYXRjaGVyLmNhbGwocmVnZXhwLCBPKSA6IG5ldyBSZWdFeHAocmVnZXhwKVtNQVRDSF0oU3RyaW5nKE8pKTtcbiAgICB9LFxuICAgIC8vIGBSZWdFeHAucHJvdG90eXBlW0BAbWF0Y2hdYCBtZXRob2RcbiAgICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXJlZ2V4cC5wcm90b3R5cGUtQEBtYXRjaFxuICAgIGZ1bmN0aW9uIChyZWdleHApIHtcbiAgICAgIHZhciByZXMgPSBtYXliZUNhbGxOYXRpdmUobmF0aXZlTWF0Y2gsIHJlZ2V4cCwgdGhpcyk7XG4gICAgICBpZiAocmVzLmRvbmUpIHJldHVybiByZXMudmFsdWU7XG5cbiAgICAgIHZhciByeCA9IGFuT2JqZWN0KHJlZ2V4cCk7XG4gICAgICB2YXIgUyA9IFN0cmluZyh0aGlzKTtcblxuICAgICAgaWYgKCFyeC5nbG9iYWwpIHJldHVybiByZWdFeHBFeGVjKHJ4LCBTKTtcblxuICAgICAgdmFyIGZ1bGxVbmljb2RlID0gcngudW5pY29kZTtcbiAgICAgIHJ4Lmxhc3RJbmRleCA9IDA7XG4gICAgICB2YXIgQSA9IFtdO1xuICAgICAgdmFyIG4gPSAwO1xuICAgICAgdmFyIHJlc3VsdDtcbiAgICAgIHdoaWxlICgocmVzdWx0ID0gcmVnRXhwRXhlYyhyeCwgUykpICE9PSBudWxsKSB7XG4gICAgICAgIHZhciBtYXRjaFN0ciA9IFN0cmluZyhyZXN1bHRbMF0pO1xuICAgICAgICBBW25dID0gbWF0Y2hTdHI7XG4gICAgICAgIGlmIChtYXRjaFN0ciA9PT0gJycpIHJ4Lmxhc3RJbmRleCA9IGFkdmFuY2VTdHJpbmdJbmRleChTLCB0b0xlbmd0aChyeC5sYXN0SW5kZXgpLCBmdWxsVW5pY29kZSk7XG4gICAgICAgIG4rKztcbiAgICAgIH1cbiAgICAgIHJldHVybiBuID09PSAwID8gbnVsbCA6IEE7XG4gICAgfVxuICBdO1xufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciAkcGFkRW5kID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3N0cmluZy1wYWQnKS5lbmQ7XG52YXIgV0VCS0lUX0JVRyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zdHJpbmctcGFkLXdlYmtpdC1idWcnKTtcblxuLy8gYFN0cmluZy5wcm90b3R5cGUucGFkRW5kYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc3RyaW5nLnByb3RvdHlwZS5wYWRlbmRcbiQoeyB0YXJnZXQ6ICdTdHJpbmcnLCBwcm90bzogdHJ1ZSwgZm9yY2VkOiBXRUJLSVRfQlVHIH0sIHtcbiAgcGFkRW5kOiBmdW5jdGlvbiBwYWRFbmQobWF4TGVuZ3RoIC8qICwgZmlsbFN0cmluZyA9ICcgJyAqLykge1xuICAgIHJldHVybiAkcGFkRW5kKHRoaXMsIG1heExlbmd0aCwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyICRwYWRTdGFydCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zdHJpbmctcGFkJykuc3RhcnQ7XG52YXIgV0VCS0lUX0JVRyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zdHJpbmctcGFkLXdlYmtpdC1idWcnKTtcblxuLy8gYFN0cmluZy5wcm90b3R5cGUucGFkU3RhcnRgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zdHJpbmcucHJvdG90eXBlLnBhZHN0YXJ0XG4kKHsgdGFyZ2V0OiAnU3RyaW5nJywgcHJvdG86IHRydWUsIGZvcmNlZDogV0VCS0lUX0JVRyB9LCB7XG4gIHBhZFN0YXJ0OiBmdW5jdGlvbiBwYWRTdGFydChtYXhMZW5ndGggLyogLCBmaWxsU3RyaW5nID0gJyAnICovKSB7XG4gICAgcmV0dXJuICRwYWRTdGFydCh0aGlzLCBtYXhMZW5ndGgsIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbiAgfVxufSk7XG4iLCJ2YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciB0b0luZGV4ZWRPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8taW5kZXhlZC1vYmplY3QnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1sZW5ndGgnKTtcblxuLy8gYFN0cmluZy5yYXdgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zdHJpbmcucmF3XG4kKHsgdGFyZ2V0OiAnU3RyaW5nJywgc3RhdDogdHJ1ZSB9LCB7XG4gIHJhdzogZnVuY3Rpb24gcmF3KHRlbXBsYXRlKSB7XG4gICAgdmFyIHJhd1RlbXBsYXRlID0gdG9JbmRleGVkT2JqZWN0KHRlbXBsYXRlLnJhdyk7XG4gICAgdmFyIGxpdGVyYWxTZWdtZW50cyA9IHRvTGVuZ3RoKHJhd1RlbXBsYXRlLmxlbmd0aCk7XG4gICAgdmFyIGFyZ3VtZW50c0xlbmd0aCA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgdmFyIGVsZW1lbnRzID0gW107XG4gICAgdmFyIGkgPSAwO1xuICAgIHdoaWxlIChsaXRlcmFsU2VnbWVudHMgPiBpKSB7XG4gICAgICBlbGVtZW50cy5wdXNoKFN0cmluZyhyYXdUZW1wbGF0ZVtpKytdKSk7XG4gICAgICBpZiAoaSA8IGFyZ3VtZW50c0xlbmd0aCkgZWxlbWVudHMucHVzaChTdHJpbmcoYXJndW1lbnRzW2ldKSk7XG4gICAgfSByZXR1cm4gZWxlbWVudHMuam9pbignJyk7XG4gIH1cbn0pO1xuIiwidmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgcmVwZWF0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3N0cmluZy1yZXBlYXQnKTtcblxuLy8gYFN0cmluZy5wcm90b3R5cGUucmVwZWF0YCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc3RyaW5nLnByb3RvdHlwZS5yZXBlYXRcbiQoeyB0YXJnZXQ6ICdTdHJpbmcnLCBwcm90bzogdHJ1ZSB9LCB7XG4gIHJlcGVhdDogcmVwZWF0XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIHJlcXVpcmVPYmplY3RDb2VyY2libGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVxdWlyZS1vYmplY3QtY29lcmNpYmxlJyk7XG52YXIgaXNSZWdFeHAgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtcmVnZXhwJyk7XG52YXIgZ2V0UmVnRXhwRmxhZ3MgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVnZXhwLWZsYWdzJyk7XG52YXIgZ2V0U3Vic3RpdHV0aW9uID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dldC1zdWJzdGl0dXRpb24nKTtcbnZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcbnZhciBJU19QVVJFID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLXB1cmUnKTtcblxudmFyIFJFUExBQ0UgPSB3ZWxsS25vd25TeW1ib2woJ3JlcGxhY2UnKTtcbnZhciBSZWdFeHBQcm90b3R5cGUgPSBSZWdFeHAucHJvdG90eXBlO1xudmFyIG1heCA9IE1hdGgubWF4O1xuXG52YXIgc3RyaW5nSW5kZXhPZiA9IGZ1bmN0aW9uIChzdHJpbmcsIHNlYXJjaFZhbHVlLCBmcm9tSW5kZXgpIHtcbiAgaWYgKGZyb21JbmRleCA+IHN0cmluZy5sZW5ndGgpIHJldHVybiAtMTtcbiAgaWYgKHNlYXJjaFZhbHVlID09PSAnJykgcmV0dXJuIGZyb21JbmRleDtcbiAgcmV0dXJuIHN0cmluZy5pbmRleE9mKHNlYXJjaFZhbHVlLCBmcm9tSW5kZXgpO1xufTtcblxuLy8gYFN0cmluZy5wcm90b3R5cGUucmVwbGFjZUFsbGAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXN0cmluZy5wcm90b3R5cGUucmVwbGFjZWFsbFxuJCh7IHRhcmdldDogJ1N0cmluZycsIHByb3RvOiB0cnVlIH0sIHtcbiAgcmVwbGFjZUFsbDogZnVuY3Rpb24gcmVwbGFjZUFsbChzZWFyY2hWYWx1ZSwgcmVwbGFjZVZhbHVlKSB7XG4gICAgdmFyIE8gPSByZXF1aXJlT2JqZWN0Q29lcmNpYmxlKHRoaXMpO1xuICAgIHZhciBJU19SRUdfRVhQLCBmbGFncywgcmVwbGFjZXIsIHN0cmluZywgc2VhcmNoU3RyaW5nLCBmdW5jdGlvbmFsUmVwbGFjZSwgc2VhcmNoTGVuZ3RoLCBhZHZhbmNlQnksIHJlcGxhY2VtZW50O1xuICAgIHZhciBwb3NpdGlvbiA9IDA7XG4gICAgdmFyIGVuZE9mTGFzdE1hdGNoID0gMDtcbiAgICB2YXIgcmVzdWx0ID0gJyc7XG4gICAgaWYgKHNlYXJjaFZhbHVlICE9IG51bGwpIHtcbiAgICAgIElTX1JFR19FWFAgPSBpc1JlZ0V4cChzZWFyY2hWYWx1ZSk7XG4gICAgICBpZiAoSVNfUkVHX0VYUCkge1xuICAgICAgICBmbGFncyA9IFN0cmluZyhyZXF1aXJlT2JqZWN0Q29lcmNpYmxlKCdmbGFncycgaW4gUmVnRXhwUHJvdG90eXBlXG4gICAgICAgICAgPyBzZWFyY2hWYWx1ZS5mbGFnc1xuICAgICAgICAgIDogZ2V0UmVnRXhwRmxhZ3MuY2FsbChzZWFyY2hWYWx1ZSlcbiAgICAgICAgKSk7XG4gICAgICAgIGlmICghfmZsYWdzLmluZGV4T2YoJ2cnKSkgdGhyb3cgVHlwZUVycm9yKCdgLnJlcGxhY2VBbGxgIGRvZXMgbm90IGFsbG93IG5vbi1nbG9iYWwgcmVnZXhlcycpO1xuICAgICAgfVxuICAgICAgcmVwbGFjZXIgPSBzZWFyY2hWYWx1ZVtSRVBMQUNFXTtcbiAgICAgIGlmIChyZXBsYWNlciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybiByZXBsYWNlci5jYWxsKHNlYXJjaFZhbHVlLCBPLCByZXBsYWNlVmFsdWUpO1xuICAgICAgfSBlbHNlIGlmIChJU19QVVJFICYmIElTX1JFR19FWFApIHtcbiAgICAgICAgcmV0dXJuIFN0cmluZyhPKS5yZXBsYWNlKHNlYXJjaFZhbHVlLCByZXBsYWNlVmFsdWUpO1xuICAgICAgfVxuICAgIH1cbiAgICBzdHJpbmcgPSBTdHJpbmcoTyk7XG4gICAgc2VhcmNoU3RyaW5nID0gU3RyaW5nKHNlYXJjaFZhbHVlKTtcbiAgICBmdW5jdGlvbmFsUmVwbGFjZSA9IHR5cGVvZiByZXBsYWNlVmFsdWUgPT09ICdmdW5jdGlvbic7XG4gICAgaWYgKCFmdW5jdGlvbmFsUmVwbGFjZSkgcmVwbGFjZVZhbHVlID0gU3RyaW5nKHJlcGxhY2VWYWx1ZSk7XG4gICAgc2VhcmNoTGVuZ3RoID0gc2VhcmNoU3RyaW5nLmxlbmd0aDtcbiAgICBhZHZhbmNlQnkgPSBtYXgoMSwgc2VhcmNoTGVuZ3RoKTtcbiAgICBwb3NpdGlvbiA9IHN0cmluZ0luZGV4T2Yoc3RyaW5nLCBzZWFyY2hTdHJpbmcsIDApO1xuICAgIHdoaWxlIChwb3NpdGlvbiAhPT0gLTEpIHtcbiAgICAgIGlmIChmdW5jdGlvbmFsUmVwbGFjZSkge1xuICAgICAgICByZXBsYWNlbWVudCA9IFN0cmluZyhyZXBsYWNlVmFsdWUoc2VhcmNoU3RyaW5nLCBwb3NpdGlvbiwgc3RyaW5nKSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXBsYWNlbWVudCA9IGdldFN1YnN0aXR1dGlvbihzZWFyY2hTdHJpbmcsIHN0cmluZywgcG9zaXRpb24sIFtdLCB1bmRlZmluZWQsIHJlcGxhY2VWYWx1ZSk7XG4gICAgICB9XG4gICAgICByZXN1bHQgKz0gc3RyaW5nLnNsaWNlKGVuZE9mTGFzdE1hdGNoLCBwb3NpdGlvbikgKyByZXBsYWNlbWVudDtcbiAgICAgIGVuZE9mTGFzdE1hdGNoID0gcG9zaXRpb24gKyBzZWFyY2hMZW5ndGg7XG4gICAgICBwb3NpdGlvbiA9IHN0cmluZ0luZGV4T2Yoc3RyaW5nLCBzZWFyY2hTdHJpbmcsIHBvc2l0aW9uICsgYWR2YW5jZUJ5KTtcbiAgICB9XG4gICAgaWYgKGVuZE9mTGFzdE1hdGNoIDwgc3RyaW5nLmxlbmd0aCkge1xuICAgICAgcmVzdWx0ICs9IHN0cmluZy5zbGljZShlbmRPZkxhc3RNYXRjaCk7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGZpeFJlZ0V4cFdlbGxLbm93blN5bWJvbExvZ2ljID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZpeC1yZWdleHAtd2VsbC1rbm93bi1zeW1ib2wtbG9naWMnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1vYmplY3QnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1sZW5ndGgnKTtcbnZhciB0b0ludGVnZXIgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8taW50ZWdlcicpO1xudmFyIHJlcXVpcmVPYmplY3RDb2VyY2libGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVxdWlyZS1vYmplY3QtY29lcmNpYmxlJyk7XG52YXIgYWR2YW5jZVN0cmluZ0luZGV4ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FkdmFuY2Utc3RyaW5nLWluZGV4Jyk7XG52YXIgZ2V0U3Vic3RpdHV0aW9uID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dldC1zdWJzdGl0dXRpb24nKTtcbnZhciByZWdFeHBFeGVjID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlZ2V4cC1leGVjLWFic3RyYWN0Jyk7XG5cbnZhciBtYXggPSBNYXRoLm1heDtcbnZhciBtaW4gPSBNYXRoLm1pbjtcblxudmFyIG1heWJlVG9TdHJpbmcgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIGl0ID09PSB1bmRlZmluZWQgPyBpdCA6IFN0cmluZyhpdCk7XG59O1xuXG4vLyBAQHJlcGxhY2UgbG9naWNcbmZpeFJlZ0V4cFdlbGxLbm93blN5bWJvbExvZ2ljKCdyZXBsYWNlJywgMiwgZnVuY3Rpb24gKFJFUExBQ0UsIG5hdGl2ZVJlcGxhY2UsIG1heWJlQ2FsbE5hdGl2ZSwgcmVhc29uKSB7XG4gIHZhciBSRUdFWFBfUkVQTEFDRV9TVUJTVElUVVRFU19VTkRFRklORURfQ0FQVFVSRSA9IHJlYXNvbi5SRUdFWFBfUkVQTEFDRV9TVUJTVElUVVRFU19VTkRFRklORURfQ0FQVFVSRTtcbiAgdmFyIFJFUExBQ0VfS0VFUFNfJDAgPSByZWFzb24uUkVQTEFDRV9LRUVQU18kMDtcbiAgdmFyIFVOU0FGRV9TVUJTVElUVVRFID0gUkVHRVhQX1JFUExBQ0VfU1VCU1RJVFVURVNfVU5ERUZJTkVEX0NBUFRVUkUgPyAnJCcgOiAnJDAnO1xuXG4gIHJldHVybiBbXG4gICAgLy8gYFN0cmluZy5wcm90b3R5cGUucmVwbGFjZWAgbWV0aG9kXG4gICAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zdHJpbmcucHJvdG90eXBlLnJlcGxhY2VcbiAgICBmdW5jdGlvbiByZXBsYWNlKHNlYXJjaFZhbHVlLCByZXBsYWNlVmFsdWUpIHtcbiAgICAgIHZhciBPID0gcmVxdWlyZU9iamVjdENvZXJjaWJsZSh0aGlzKTtcbiAgICAgIHZhciByZXBsYWNlciA9IHNlYXJjaFZhbHVlID09IHVuZGVmaW5lZCA/IHVuZGVmaW5lZCA6IHNlYXJjaFZhbHVlW1JFUExBQ0VdO1xuICAgICAgcmV0dXJuIHJlcGxhY2VyICE9PSB1bmRlZmluZWRcbiAgICAgICAgPyByZXBsYWNlci5jYWxsKHNlYXJjaFZhbHVlLCBPLCByZXBsYWNlVmFsdWUpXG4gICAgICAgIDogbmF0aXZlUmVwbGFjZS5jYWxsKFN0cmluZyhPKSwgc2VhcmNoVmFsdWUsIHJlcGxhY2VWYWx1ZSk7XG4gICAgfSxcbiAgICAvLyBgUmVnRXhwLnByb3RvdHlwZVtAQHJlcGxhY2VdYCBtZXRob2RcbiAgICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXJlZ2V4cC5wcm90b3R5cGUtQEByZXBsYWNlXG4gICAgZnVuY3Rpb24gKHJlZ2V4cCwgcmVwbGFjZVZhbHVlKSB7XG4gICAgICBpZiAoXG4gICAgICAgICghUkVHRVhQX1JFUExBQ0VfU1VCU1RJVFVURVNfVU5ERUZJTkVEX0NBUFRVUkUgJiYgUkVQTEFDRV9LRUVQU18kMCkgfHxcbiAgICAgICAgKHR5cGVvZiByZXBsYWNlVmFsdWUgPT09ICdzdHJpbmcnICYmIHJlcGxhY2VWYWx1ZS5pbmRleE9mKFVOU0FGRV9TVUJTVElUVVRFKSA9PT0gLTEpXG4gICAgICApIHtcbiAgICAgICAgdmFyIHJlcyA9IG1heWJlQ2FsbE5hdGl2ZShuYXRpdmVSZXBsYWNlLCByZWdleHAsIHRoaXMsIHJlcGxhY2VWYWx1ZSk7XG4gICAgICAgIGlmIChyZXMuZG9uZSkgcmV0dXJuIHJlcy52YWx1ZTtcbiAgICAgIH1cblxuICAgICAgdmFyIHJ4ID0gYW5PYmplY3QocmVnZXhwKTtcbiAgICAgIHZhciBTID0gU3RyaW5nKHRoaXMpO1xuXG4gICAgICB2YXIgZnVuY3Rpb25hbFJlcGxhY2UgPSB0eXBlb2YgcmVwbGFjZVZhbHVlID09PSAnZnVuY3Rpb24nO1xuICAgICAgaWYgKCFmdW5jdGlvbmFsUmVwbGFjZSkgcmVwbGFjZVZhbHVlID0gU3RyaW5nKHJlcGxhY2VWYWx1ZSk7XG5cbiAgICAgIHZhciBnbG9iYWwgPSByeC5nbG9iYWw7XG4gICAgICBpZiAoZ2xvYmFsKSB7XG4gICAgICAgIHZhciBmdWxsVW5pY29kZSA9IHJ4LnVuaWNvZGU7XG4gICAgICAgIHJ4Lmxhc3RJbmRleCA9IDA7XG4gICAgICB9XG4gICAgICB2YXIgcmVzdWx0cyA9IFtdO1xuICAgICAgd2hpbGUgKHRydWUpIHtcbiAgICAgICAgdmFyIHJlc3VsdCA9IHJlZ0V4cEV4ZWMocngsIFMpO1xuICAgICAgICBpZiAocmVzdWx0ID09PSBudWxsKSBicmVhaztcblxuICAgICAgICByZXN1bHRzLnB1c2gocmVzdWx0KTtcbiAgICAgICAgaWYgKCFnbG9iYWwpIGJyZWFrO1xuXG4gICAgICAgIHZhciBtYXRjaFN0ciA9IFN0cmluZyhyZXN1bHRbMF0pO1xuICAgICAgICBpZiAobWF0Y2hTdHIgPT09ICcnKSByeC5sYXN0SW5kZXggPSBhZHZhbmNlU3RyaW5nSW5kZXgoUywgdG9MZW5ndGgocngubGFzdEluZGV4KSwgZnVsbFVuaWNvZGUpO1xuICAgICAgfVxuXG4gICAgICB2YXIgYWNjdW11bGF0ZWRSZXN1bHQgPSAnJztcbiAgICAgIHZhciBuZXh0U291cmNlUG9zaXRpb24gPSAwO1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCByZXN1bHRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHJlc3VsdCA9IHJlc3VsdHNbaV07XG5cbiAgICAgICAgdmFyIG1hdGNoZWQgPSBTdHJpbmcocmVzdWx0WzBdKTtcbiAgICAgICAgdmFyIHBvc2l0aW9uID0gbWF4KG1pbih0b0ludGVnZXIocmVzdWx0LmluZGV4KSwgUy5sZW5ndGgpLCAwKTtcbiAgICAgICAgdmFyIGNhcHR1cmVzID0gW107XG4gICAgICAgIC8vIE5PVEU6IFRoaXMgaXMgZXF1aXZhbGVudCB0b1xuICAgICAgICAvLyAgIGNhcHR1cmVzID0gcmVzdWx0LnNsaWNlKDEpLm1hcChtYXliZVRvU3RyaW5nKVxuICAgICAgICAvLyBidXQgZm9yIHNvbWUgcmVhc29uIGBuYXRpdmVTbGljZS5jYWxsKHJlc3VsdCwgMSwgcmVzdWx0Lmxlbmd0aClgIChjYWxsZWQgaW5cbiAgICAgICAgLy8gdGhlIHNsaWNlIHBvbHlmaWxsIHdoZW4gc2xpY2luZyBuYXRpdmUgYXJyYXlzKSBcImRvZXNuJ3Qgd29ya1wiIGluIHNhZmFyaSA5IGFuZFxuICAgICAgICAvLyBjYXVzZXMgYSBjcmFzaCAoaHR0cHM6Ly9wYXN0ZWJpbi5jb20vTjIxUXplUUEpIHdoZW4gdHJ5aW5nIHRvIGRlYnVnIGl0LlxuICAgICAgICBmb3IgKHZhciBqID0gMTsgaiA8IHJlc3VsdC5sZW5ndGg7IGorKykgY2FwdHVyZXMucHVzaChtYXliZVRvU3RyaW5nKHJlc3VsdFtqXSkpO1xuICAgICAgICB2YXIgbmFtZWRDYXB0dXJlcyA9IHJlc3VsdC5ncm91cHM7XG4gICAgICAgIGlmIChmdW5jdGlvbmFsUmVwbGFjZSkge1xuICAgICAgICAgIHZhciByZXBsYWNlckFyZ3MgPSBbbWF0Y2hlZF0uY29uY2F0KGNhcHR1cmVzLCBwb3NpdGlvbiwgUyk7XG4gICAgICAgICAgaWYgKG5hbWVkQ2FwdHVyZXMgIT09IHVuZGVmaW5lZCkgcmVwbGFjZXJBcmdzLnB1c2gobmFtZWRDYXB0dXJlcyk7XG4gICAgICAgICAgdmFyIHJlcGxhY2VtZW50ID0gU3RyaW5nKHJlcGxhY2VWYWx1ZS5hcHBseSh1bmRlZmluZWQsIHJlcGxhY2VyQXJncykpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJlcGxhY2VtZW50ID0gZ2V0U3Vic3RpdHV0aW9uKG1hdGNoZWQsIFMsIHBvc2l0aW9uLCBjYXB0dXJlcywgbmFtZWRDYXB0dXJlcywgcmVwbGFjZVZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAocG9zaXRpb24gPj0gbmV4dFNvdXJjZVBvc2l0aW9uKSB7XG4gICAgICAgICAgYWNjdW11bGF0ZWRSZXN1bHQgKz0gUy5zbGljZShuZXh0U291cmNlUG9zaXRpb24sIHBvc2l0aW9uKSArIHJlcGxhY2VtZW50O1xuICAgICAgICAgIG5leHRTb3VyY2VQb3NpdGlvbiA9IHBvc2l0aW9uICsgbWF0Y2hlZC5sZW5ndGg7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBhY2N1bXVsYXRlZFJlc3VsdCArIFMuc2xpY2UobmV4dFNvdXJjZVBvc2l0aW9uKTtcbiAgICB9XG4gIF07XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBmaXhSZWdFeHBXZWxsS25vd25TeW1ib2xMb2dpYyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9maXgtcmVnZXhwLXdlbGwta25vd24tc3ltYm9sLWxvZ2ljJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4tb2JqZWN0Jyk7XG52YXIgcmVxdWlyZU9iamVjdENvZXJjaWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZXF1aXJlLW9iamVjdC1jb2VyY2libGUnKTtcbnZhciBzYW1lVmFsdWUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2FtZS12YWx1ZScpO1xudmFyIHJlZ0V4cEV4ZWMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVnZXhwLWV4ZWMtYWJzdHJhY3QnKTtcblxuLy8gQEBzZWFyY2ggbG9naWNcbmZpeFJlZ0V4cFdlbGxLbm93blN5bWJvbExvZ2ljKCdzZWFyY2gnLCAxLCBmdW5jdGlvbiAoU0VBUkNILCBuYXRpdmVTZWFyY2gsIG1heWJlQ2FsbE5hdGl2ZSkge1xuICByZXR1cm4gW1xuICAgIC8vIGBTdHJpbmcucHJvdG90eXBlLnNlYXJjaGAgbWV0aG9kXG4gICAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zdHJpbmcucHJvdG90eXBlLnNlYXJjaFxuICAgIGZ1bmN0aW9uIHNlYXJjaChyZWdleHApIHtcbiAgICAgIHZhciBPID0gcmVxdWlyZU9iamVjdENvZXJjaWJsZSh0aGlzKTtcbiAgICAgIHZhciBzZWFyY2hlciA9IHJlZ2V4cCA9PSB1bmRlZmluZWQgPyB1bmRlZmluZWQgOiByZWdleHBbU0VBUkNIXTtcbiAgICAgIHJldHVybiBzZWFyY2hlciAhPT0gdW5kZWZpbmVkID8gc2VhcmNoZXIuY2FsbChyZWdleHAsIE8pIDogbmV3IFJlZ0V4cChyZWdleHApW1NFQVJDSF0oU3RyaW5nKE8pKTtcbiAgICB9LFxuICAgIC8vIGBSZWdFeHAucHJvdG90eXBlW0BAc2VhcmNoXWAgbWV0aG9kXG4gICAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1yZWdleHAucHJvdG90eXBlLUBAc2VhcmNoXG4gICAgZnVuY3Rpb24gKHJlZ2V4cCkge1xuICAgICAgdmFyIHJlcyA9IG1heWJlQ2FsbE5hdGl2ZShuYXRpdmVTZWFyY2gsIHJlZ2V4cCwgdGhpcyk7XG4gICAgICBpZiAocmVzLmRvbmUpIHJldHVybiByZXMudmFsdWU7XG5cbiAgICAgIHZhciByeCA9IGFuT2JqZWN0KHJlZ2V4cCk7XG4gICAgICB2YXIgUyA9IFN0cmluZyh0aGlzKTtcblxuICAgICAgdmFyIHByZXZpb3VzTGFzdEluZGV4ID0gcngubGFzdEluZGV4O1xuICAgICAgaWYgKCFzYW1lVmFsdWUocHJldmlvdXNMYXN0SW5kZXgsIDApKSByeC5sYXN0SW5kZXggPSAwO1xuICAgICAgdmFyIHJlc3VsdCA9IHJlZ0V4cEV4ZWMocngsIFMpO1xuICAgICAgaWYgKCFzYW1lVmFsdWUocngubGFzdEluZGV4LCBwcmV2aW91c0xhc3RJbmRleCkpIHJ4Lmxhc3RJbmRleCA9IHByZXZpb3VzTGFzdEluZGV4O1xuICAgICAgcmV0dXJuIHJlc3VsdCA9PT0gbnVsbCA/IC0xIDogcmVzdWx0LmluZGV4O1xuICAgIH1cbiAgXTtcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgY3JlYXRlSFRNTCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtaHRtbCcpO1xudmFyIGZvcmNlZFN0cmluZ0hUTUxNZXRob2QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc3RyaW5nLWh0bWwtZm9yY2VkJyk7XG5cbi8vIGBTdHJpbmcucHJvdG90eXBlLnNtYWxsYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc3RyaW5nLnByb3RvdHlwZS5zbWFsbFxuJCh7IHRhcmdldDogJ1N0cmluZycsIHByb3RvOiB0cnVlLCBmb3JjZWQ6IGZvcmNlZFN0cmluZ0hUTUxNZXRob2QoJ3NtYWxsJykgfSwge1xuICBzbWFsbDogZnVuY3Rpb24gc21hbGwoKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUhUTUwodGhpcywgJ3NtYWxsJywgJycsICcnKTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgZml4UmVnRXhwV2VsbEtub3duU3ltYm9sTG9naWMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZml4LXJlZ2V4cC13ZWxsLWtub3duLXN5bWJvbC1sb2dpYycpO1xudmFyIGlzUmVnRXhwID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLXJlZ2V4cCcpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLW9iamVjdCcpO1xudmFyIHJlcXVpcmVPYmplY3RDb2VyY2libGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVxdWlyZS1vYmplY3QtY29lcmNpYmxlJyk7XG52YXIgc3BlY2llc0NvbnN0cnVjdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NwZWNpZXMtY29uc3RydWN0b3InKTtcbnZhciBhZHZhbmNlU3RyaW5nSW5kZXggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYWR2YW5jZS1zdHJpbmctaW5kZXgnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1sZW5ndGgnKTtcbnZhciBjYWxsUmVnRXhwRXhlYyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZWdleHAtZXhlYy1hYnN0cmFjdCcpO1xudmFyIHJlZ2V4cEV4ZWMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVnZXhwLWV4ZWMnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xuXG52YXIgYXJyYXlQdXNoID0gW10ucHVzaDtcbnZhciBtaW4gPSBNYXRoLm1pbjtcbnZhciBNQVhfVUlOVDMyID0gMHhGRkZGRkZGRjtcblxuLy8gYmFiZWwtbWluaWZ5IHRyYW5zcGlsZXMgUmVnRXhwKCd4JywgJ3knKSAtPiAveC95IGFuZCBpdCBjYXVzZXMgU3ludGF4RXJyb3JcbnZhciBTVVBQT1JUU19ZID0gIWZhaWxzKGZ1bmN0aW9uICgpIHsgcmV0dXJuICFSZWdFeHAoTUFYX1VJTlQzMiwgJ3knKTsgfSk7XG5cbi8vIEBAc3BsaXQgbG9naWNcbmZpeFJlZ0V4cFdlbGxLbm93blN5bWJvbExvZ2ljKCdzcGxpdCcsIDIsIGZ1bmN0aW9uIChTUExJVCwgbmF0aXZlU3BsaXQsIG1heWJlQ2FsbE5hdGl2ZSkge1xuICB2YXIgaW50ZXJuYWxTcGxpdDtcbiAgaWYgKFxuICAgICdhYmJjJy5zcGxpdCgvKGIpKi8pWzFdID09ICdjJyB8fFxuICAgICd0ZXN0Jy5zcGxpdCgvKD86KS8sIC0xKS5sZW5ndGggIT0gNCB8fFxuICAgICdhYicuc3BsaXQoLyg/OmFiKSovKS5sZW5ndGggIT0gMiB8fFxuICAgICcuJy5zcGxpdCgvKC4/KSguPykvKS5sZW5ndGggIT0gNCB8fFxuICAgICcuJy5zcGxpdCgvKCkoKS8pLmxlbmd0aCA+IDEgfHxcbiAgICAnJy5zcGxpdCgvLj8vKS5sZW5ndGhcbiAgKSB7XG4gICAgLy8gYmFzZWQgb24gZXM1LXNoaW0gaW1wbGVtZW50YXRpb24sIG5lZWQgdG8gcmV3b3JrIGl0XG4gICAgaW50ZXJuYWxTcGxpdCA9IGZ1bmN0aW9uIChzZXBhcmF0b3IsIGxpbWl0KSB7XG4gICAgICB2YXIgc3RyaW5nID0gU3RyaW5nKHJlcXVpcmVPYmplY3RDb2VyY2libGUodGhpcykpO1xuICAgICAgdmFyIGxpbSA9IGxpbWl0ID09PSB1bmRlZmluZWQgPyBNQVhfVUlOVDMyIDogbGltaXQgPj4+IDA7XG4gICAgICBpZiAobGltID09PSAwKSByZXR1cm4gW107XG4gICAgICBpZiAoc2VwYXJhdG9yID09PSB1bmRlZmluZWQpIHJldHVybiBbc3RyaW5nXTtcbiAgICAgIC8vIElmIGBzZXBhcmF0b3JgIGlzIG5vdCBhIHJlZ2V4LCB1c2UgbmF0aXZlIHNwbGl0XG4gICAgICBpZiAoIWlzUmVnRXhwKHNlcGFyYXRvcikpIHtcbiAgICAgICAgcmV0dXJuIG5hdGl2ZVNwbGl0LmNhbGwoc3RyaW5nLCBzZXBhcmF0b3IsIGxpbSk7XG4gICAgICB9XG4gICAgICB2YXIgb3V0cHV0ID0gW107XG4gICAgICB2YXIgZmxhZ3MgPSAoc2VwYXJhdG9yLmlnbm9yZUNhc2UgPyAnaScgOiAnJykgK1xuICAgICAgICAgICAgICAgICAgKHNlcGFyYXRvci5tdWx0aWxpbmUgPyAnbScgOiAnJykgK1xuICAgICAgICAgICAgICAgICAgKHNlcGFyYXRvci51bmljb2RlID8gJ3UnIDogJycpICtcbiAgICAgICAgICAgICAgICAgIChzZXBhcmF0b3Iuc3RpY2t5ID8gJ3knIDogJycpO1xuICAgICAgdmFyIGxhc3RMYXN0SW5kZXggPSAwO1xuICAgICAgLy8gTWFrZSBgZ2xvYmFsYCBhbmQgYXZvaWQgYGxhc3RJbmRleGAgaXNzdWVzIGJ5IHdvcmtpbmcgd2l0aCBhIGNvcHlcbiAgICAgIHZhciBzZXBhcmF0b3JDb3B5ID0gbmV3IFJlZ0V4cChzZXBhcmF0b3Iuc291cmNlLCBmbGFncyArICdnJyk7XG4gICAgICB2YXIgbWF0Y2gsIGxhc3RJbmRleCwgbGFzdExlbmd0aDtcbiAgICAgIHdoaWxlIChtYXRjaCA9IHJlZ2V4cEV4ZWMuY2FsbChzZXBhcmF0b3JDb3B5LCBzdHJpbmcpKSB7XG4gICAgICAgIGxhc3RJbmRleCA9IHNlcGFyYXRvckNvcHkubGFzdEluZGV4O1xuICAgICAgICBpZiAobGFzdEluZGV4ID4gbGFzdExhc3RJbmRleCkge1xuICAgICAgICAgIG91dHB1dC5wdXNoKHN0cmluZy5zbGljZShsYXN0TGFzdEluZGV4LCBtYXRjaC5pbmRleCkpO1xuICAgICAgICAgIGlmIChtYXRjaC5sZW5ndGggPiAxICYmIG1hdGNoLmluZGV4IDwgc3RyaW5nLmxlbmd0aCkgYXJyYXlQdXNoLmFwcGx5KG91dHB1dCwgbWF0Y2guc2xpY2UoMSkpO1xuICAgICAgICAgIGxhc3RMZW5ndGggPSBtYXRjaFswXS5sZW5ndGg7XG4gICAgICAgICAgbGFzdExhc3RJbmRleCA9IGxhc3RJbmRleDtcbiAgICAgICAgICBpZiAob3V0cHV0Lmxlbmd0aCA+PSBsaW0pIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzZXBhcmF0b3JDb3B5Lmxhc3RJbmRleCA9PT0gbWF0Y2guaW5kZXgpIHNlcGFyYXRvckNvcHkubGFzdEluZGV4Kys7IC8vIEF2b2lkIGFuIGluZmluaXRlIGxvb3BcbiAgICAgIH1cbiAgICAgIGlmIChsYXN0TGFzdEluZGV4ID09PSBzdHJpbmcubGVuZ3RoKSB7XG4gICAgICAgIGlmIChsYXN0TGVuZ3RoIHx8ICFzZXBhcmF0b3JDb3B5LnRlc3QoJycpKSBvdXRwdXQucHVzaCgnJyk7XG4gICAgICB9IGVsc2Ugb3V0cHV0LnB1c2goc3RyaW5nLnNsaWNlKGxhc3RMYXN0SW5kZXgpKTtcbiAgICAgIHJldHVybiBvdXRwdXQubGVuZ3RoID4gbGltID8gb3V0cHV0LnNsaWNlKDAsIGxpbSkgOiBvdXRwdXQ7XG4gICAgfTtcbiAgLy8gQ2hha3JhLCBWOFxuICB9IGVsc2UgaWYgKCcwJy5zcGxpdCh1bmRlZmluZWQsIDApLmxlbmd0aCkge1xuICAgIGludGVybmFsU3BsaXQgPSBmdW5jdGlvbiAoc2VwYXJhdG9yLCBsaW1pdCkge1xuICAgICAgcmV0dXJuIHNlcGFyYXRvciA9PT0gdW5kZWZpbmVkICYmIGxpbWl0ID09PSAwID8gW10gOiBuYXRpdmVTcGxpdC5jYWxsKHRoaXMsIHNlcGFyYXRvciwgbGltaXQpO1xuICAgIH07XG4gIH0gZWxzZSBpbnRlcm5hbFNwbGl0ID0gbmF0aXZlU3BsaXQ7XG5cbiAgcmV0dXJuIFtcbiAgICAvLyBgU3RyaW5nLnByb3RvdHlwZS5zcGxpdGAgbWV0aG9kXG4gICAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zdHJpbmcucHJvdG90eXBlLnNwbGl0XG4gICAgZnVuY3Rpb24gc3BsaXQoc2VwYXJhdG9yLCBsaW1pdCkge1xuICAgICAgdmFyIE8gPSByZXF1aXJlT2JqZWN0Q29lcmNpYmxlKHRoaXMpO1xuICAgICAgdmFyIHNwbGl0dGVyID0gc2VwYXJhdG9yID09IHVuZGVmaW5lZCA/IHVuZGVmaW5lZCA6IHNlcGFyYXRvcltTUExJVF07XG4gICAgICByZXR1cm4gc3BsaXR0ZXIgIT09IHVuZGVmaW5lZFxuICAgICAgICA/IHNwbGl0dGVyLmNhbGwoc2VwYXJhdG9yLCBPLCBsaW1pdClcbiAgICAgICAgOiBpbnRlcm5hbFNwbGl0LmNhbGwoU3RyaW5nKE8pLCBzZXBhcmF0b3IsIGxpbWl0KTtcbiAgICB9LFxuICAgIC8vIGBSZWdFeHAucHJvdG90eXBlW0BAc3BsaXRdYCBtZXRob2RcbiAgICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXJlZ2V4cC5wcm90b3R5cGUtQEBzcGxpdFxuICAgIC8vXG4gICAgLy8gTk9URTogVGhpcyBjYW5ub3QgYmUgcHJvcGVybHkgcG9seWZpbGxlZCBpbiBlbmdpbmVzIHRoYXQgZG9uJ3Qgc3VwcG9ydFxuICAgIC8vIHRoZSAneScgZmxhZy5cbiAgICBmdW5jdGlvbiAocmVnZXhwLCBsaW1pdCkge1xuICAgICAgdmFyIHJlcyA9IG1heWJlQ2FsbE5hdGl2ZShpbnRlcm5hbFNwbGl0LCByZWdleHAsIHRoaXMsIGxpbWl0LCBpbnRlcm5hbFNwbGl0ICE9PSBuYXRpdmVTcGxpdCk7XG4gICAgICBpZiAocmVzLmRvbmUpIHJldHVybiByZXMudmFsdWU7XG5cbiAgICAgIHZhciByeCA9IGFuT2JqZWN0KHJlZ2V4cCk7XG4gICAgICB2YXIgUyA9IFN0cmluZyh0aGlzKTtcbiAgICAgIHZhciBDID0gc3BlY2llc0NvbnN0cnVjdG9yKHJ4LCBSZWdFeHApO1xuXG4gICAgICB2YXIgdW5pY29kZU1hdGNoaW5nID0gcngudW5pY29kZTtcbiAgICAgIHZhciBmbGFncyA9IChyeC5pZ25vcmVDYXNlID8gJ2knIDogJycpICtcbiAgICAgICAgICAgICAgICAgIChyeC5tdWx0aWxpbmUgPyAnbScgOiAnJykgK1xuICAgICAgICAgICAgICAgICAgKHJ4LnVuaWNvZGUgPyAndScgOiAnJykgK1xuICAgICAgICAgICAgICAgICAgKFNVUFBPUlRTX1kgPyAneScgOiAnZycpO1xuXG4gICAgICAvLyBeKD8gKyByeCArICkgaXMgbmVlZGVkLCBpbiBjb21iaW5hdGlvbiB3aXRoIHNvbWUgUyBzbGljaW5nLCB0b1xuICAgICAgLy8gc2ltdWxhdGUgdGhlICd5JyBmbGFnLlxuICAgICAgdmFyIHNwbGl0dGVyID0gbmV3IEMoU1VQUE9SVFNfWSA/IHJ4IDogJ14oPzonICsgcnguc291cmNlICsgJyknLCBmbGFncyk7XG4gICAgICB2YXIgbGltID0gbGltaXQgPT09IHVuZGVmaW5lZCA/IE1BWF9VSU5UMzIgOiBsaW1pdCA+Pj4gMDtcbiAgICAgIGlmIChsaW0gPT09IDApIHJldHVybiBbXTtcbiAgICAgIGlmIChTLmxlbmd0aCA9PT0gMCkgcmV0dXJuIGNhbGxSZWdFeHBFeGVjKHNwbGl0dGVyLCBTKSA9PT0gbnVsbCA/IFtTXSA6IFtdO1xuICAgICAgdmFyIHAgPSAwO1xuICAgICAgdmFyIHEgPSAwO1xuICAgICAgdmFyIEEgPSBbXTtcbiAgICAgIHdoaWxlIChxIDwgUy5sZW5ndGgpIHtcbiAgICAgICAgc3BsaXR0ZXIubGFzdEluZGV4ID0gU1VQUE9SVFNfWSA/IHEgOiAwO1xuICAgICAgICB2YXIgeiA9IGNhbGxSZWdFeHBFeGVjKHNwbGl0dGVyLCBTVVBQT1JUU19ZID8gUyA6IFMuc2xpY2UocSkpO1xuICAgICAgICB2YXIgZTtcbiAgICAgICAgaWYgKFxuICAgICAgICAgIHogPT09IG51bGwgfHxcbiAgICAgICAgICAoZSA9IG1pbih0b0xlbmd0aChzcGxpdHRlci5sYXN0SW5kZXggKyAoU1VQUE9SVFNfWSA/IDAgOiBxKSksIFMubGVuZ3RoKSkgPT09IHBcbiAgICAgICAgKSB7XG4gICAgICAgICAgcSA9IGFkdmFuY2VTdHJpbmdJbmRleChTLCBxLCB1bmljb2RlTWF0Y2hpbmcpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIEEucHVzaChTLnNsaWNlKHAsIHEpKTtcbiAgICAgICAgICBpZiAoQS5sZW5ndGggPT09IGxpbSkgcmV0dXJuIEE7XG4gICAgICAgICAgZm9yICh2YXIgaSA9IDE7IGkgPD0gei5sZW5ndGggLSAxOyBpKyspIHtcbiAgICAgICAgICAgIEEucHVzaCh6W2ldKTtcbiAgICAgICAgICAgIGlmIChBLmxlbmd0aCA9PT0gbGltKSByZXR1cm4gQTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcSA9IHAgPSBlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBBLnB1c2goUy5zbGljZShwKSk7XG4gICAgICByZXR1cm4gQTtcbiAgICB9XG4gIF07XG59LCAhU1VQUE9SVFNfWSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1vd24tcHJvcGVydHktZGVzY3JpcHRvcicpLmY7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tbGVuZ3RoJyk7XG52YXIgbm90QVJlZ0V4cCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9ub3QtYS1yZWdleHAnKTtcbnZhciByZXF1aXJlT2JqZWN0Q29lcmNpYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlcXVpcmUtb2JqZWN0LWNvZXJjaWJsZScpO1xudmFyIGNvcnJlY3RJc1JlZ0V4cExvZ2ljID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NvcnJlY3QtaXMtcmVnZXhwLWxvZ2ljJyk7XG52YXIgSVNfUFVSRSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1wdXJlJyk7XG5cbnZhciBuYXRpdmVTdGFydHNXaXRoID0gJycuc3RhcnRzV2l0aDtcbnZhciBtaW4gPSBNYXRoLm1pbjtcblxudmFyIENPUlJFQ1RfSVNfUkVHRVhQX0xPR0lDID0gY29ycmVjdElzUmVnRXhwTG9naWMoJ3N0YXJ0c1dpdGgnKTtcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS96bG9pcm9jay9jb3JlLWpzL3B1bGwvNzAyXG52YXIgTUROX1BPTFlGSUxMX0JVRyA9ICFJU19QVVJFICYmICFDT1JSRUNUX0lTX1JFR0VYUF9MT0dJQyAmJiAhIWZ1bmN0aW9uICgpIHtcbiAgdmFyIGRlc2NyaXB0b3IgPSBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoU3RyaW5nLnByb3RvdHlwZSwgJ3N0YXJ0c1dpdGgnKTtcbiAgcmV0dXJuIGRlc2NyaXB0b3IgJiYgIWRlc2NyaXB0b3Iud3JpdGFibGU7XG59KCk7XG5cbi8vIGBTdHJpbmcucHJvdG90eXBlLnN0YXJ0c1dpdGhgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zdHJpbmcucHJvdG90eXBlLnN0YXJ0c3dpdGhcbiQoeyB0YXJnZXQ6ICdTdHJpbmcnLCBwcm90bzogdHJ1ZSwgZm9yY2VkOiAhTUROX1BPTFlGSUxMX0JVRyAmJiAhQ09SUkVDVF9JU19SRUdFWFBfTE9HSUMgfSwge1xuICBzdGFydHNXaXRoOiBmdW5jdGlvbiBzdGFydHNXaXRoKHNlYXJjaFN0cmluZyAvKiAsIHBvc2l0aW9uID0gMCAqLykge1xuICAgIHZhciB0aGF0ID0gU3RyaW5nKHJlcXVpcmVPYmplY3RDb2VyY2libGUodGhpcykpO1xuICAgIG5vdEFSZWdFeHAoc2VhcmNoU3RyaW5nKTtcbiAgICB2YXIgaW5kZXggPSB0b0xlbmd0aChtaW4oYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQsIHRoYXQubGVuZ3RoKSk7XG4gICAgdmFyIHNlYXJjaCA9IFN0cmluZyhzZWFyY2hTdHJpbmcpO1xuICAgIHJldHVybiBuYXRpdmVTdGFydHNXaXRoXG4gICAgICA/IG5hdGl2ZVN0YXJ0c1dpdGguY2FsbCh0aGF0LCBzZWFyY2gsIGluZGV4KVxuICAgICAgOiB0aGF0LnNsaWNlKGluZGV4LCBpbmRleCArIHNlYXJjaC5sZW5ndGgpID09PSBzZWFyY2g7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgY3JlYXRlSFRNTCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtaHRtbCcpO1xudmFyIGZvcmNlZFN0cmluZ0hUTUxNZXRob2QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc3RyaW5nLWh0bWwtZm9yY2VkJyk7XG5cbi8vIGBTdHJpbmcucHJvdG90eXBlLnN0cmlrZWAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXN0cmluZy5wcm90b3R5cGUuc3RyaWtlXG4kKHsgdGFyZ2V0OiAnU3RyaW5nJywgcHJvdG86IHRydWUsIGZvcmNlZDogZm9yY2VkU3RyaW5nSFRNTE1ldGhvZCgnc3RyaWtlJykgfSwge1xuICBzdHJpa2U6IGZ1bmN0aW9uIHN0cmlrZSgpIHtcbiAgICByZXR1cm4gY3JlYXRlSFRNTCh0aGlzLCAnc3RyaWtlJywgJycsICcnKTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBjcmVhdGVIVE1MID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1odG1sJyk7XG52YXIgZm9yY2VkU3RyaW5nSFRNTE1ldGhvZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zdHJpbmctaHRtbC1mb3JjZWQnKTtcblxuLy8gYFN0cmluZy5wcm90b3R5cGUuc3ViYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc3RyaW5nLnByb3RvdHlwZS5zdWJcbiQoeyB0YXJnZXQ6ICdTdHJpbmcnLCBwcm90bzogdHJ1ZSwgZm9yY2VkOiBmb3JjZWRTdHJpbmdIVE1MTWV0aG9kKCdzdWInKSB9LCB7XG4gIHN1YjogZnVuY3Rpb24gc3ViKCkge1xuICAgIHJldHVybiBjcmVhdGVIVE1MKHRoaXMsICdzdWInLCAnJywgJycpO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGNyZWF0ZUhUTUwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLWh0bWwnKTtcbnZhciBmb3JjZWRTdHJpbmdIVE1MTWV0aG9kID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3N0cmluZy1odG1sLWZvcmNlZCcpO1xuXG4vLyBgU3RyaW5nLnByb3RvdHlwZS5zdXBgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zdHJpbmcucHJvdG90eXBlLnN1cFxuJCh7IHRhcmdldDogJ1N0cmluZycsIHByb3RvOiB0cnVlLCBmb3JjZWQ6IGZvcmNlZFN0cmluZ0hUTUxNZXRob2QoJ3N1cCcpIH0sIHtcbiAgc3VwOiBmdW5jdGlvbiBzdXAoKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUhUTUwodGhpcywgJ3N1cCcsICcnLCAnJyk7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgJHRyaW1FbmQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc3RyaW5nLXRyaW0nKS5lbmQ7XG52YXIgZm9yY2VkU3RyaW5nVHJpbU1ldGhvZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zdHJpbmctdHJpbS1mb3JjZWQnKTtcblxudmFyIEZPUkNFRCA9IGZvcmNlZFN0cmluZ1RyaW1NZXRob2QoJ3RyaW1FbmQnKTtcblxudmFyIHRyaW1FbmQgPSBGT1JDRUQgPyBmdW5jdGlvbiB0cmltRW5kKCkge1xuICByZXR1cm4gJHRyaW1FbmQodGhpcyk7XG59IDogJycudHJpbUVuZDtcblxuLy8gYFN0cmluZy5wcm90b3R5cGUueyB0cmltRW5kLCB0cmltUmlnaHQgfWAgbWV0aG9kc1xuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zdHJpbmcucHJvdG90eXBlLnRyaW1lbmRcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNTdHJpbmcucHJvdG90eXBlLnRyaW1yaWdodFxuJCh7IHRhcmdldDogJ1N0cmluZycsIHByb3RvOiB0cnVlLCBmb3JjZWQ6IEZPUkNFRCB9LCB7XG4gIHRyaW1FbmQ6IHRyaW1FbmQsXG4gIHRyaW1SaWdodDogdHJpbUVuZFxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciAkdHJpbVN0YXJ0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3N0cmluZy10cmltJykuc3RhcnQ7XG52YXIgZm9yY2VkU3RyaW5nVHJpbU1ldGhvZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zdHJpbmctdHJpbS1mb3JjZWQnKTtcblxudmFyIEZPUkNFRCA9IGZvcmNlZFN0cmluZ1RyaW1NZXRob2QoJ3RyaW1TdGFydCcpO1xuXG52YXIgdHJpbVN0YXJ0ID0gRk9SQ0VEID8gZnVuY3Rpb24gdHJpbVN0YXJ0KCkge1xuICByZXR1cm4gJHRyaW1TdGFydCh0aGlzKTtcbn0gOiAnJy50cmltU3RhcnQ7XG5cbi8vIGBTdHJpbmcucHJvdG90eXBlLnsgdHJpbVN0YXJ0LCB0cmltTGVmdCB9YCBtZXRob2RzXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXN0cmluZy5wcm90b3R5cGUudHJpbXN0YXJ0XG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jU3RyaW5nLnByb3RvdHlwZS50cmltbGVmdFxuJCh7IHRhcmdldDogJ1N0cmluZycsIHByb3RvOiB0cnVlLCBmb3JjZWQ6IEZPUkNFRCB9LCB7XG4gIHRyaW1TdGFydDogdHJpbVN0YXJ0LFxuICB0cmltTGVmdDogdHJpbVN0YXJ0XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyICR0cmltID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3N0cmluZy10cmltJykudHJpbTtcbnZhciBmb3JjZWRTdHJpbmdUcmltTWV0aG9kID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3N0cmluZy10cmltLWZvcmNlZCcpO1xuXG4vLyBgU3RyaW5nLnByb3RvdHlwZS50cmltYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc3RyaW5nLnByb3RvdHlwZS50cmltXG4kKHsgdGFyZ2V0OiAnU3RyaW5nJywgcHJvdG86IHRydWUsIGZvcmNlZDogZm9yY2VkU3RyaW5nVHJpbU1ldGhvZCgndHJpbScpIH0sIHtcbiAgdHJpbTogZnVuY3Rpb24gdHJpbSgpIHtcbiAgICByZXR1cm4gJHRyaW0odGhpcyk7XG4gIH1cbn0pO1xuIiwidmFyIGRlZmluZVdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZWZpbmUtd2VsbC1rbm93bi1zeW1ib2wnKTtcblxuLy8gYFN5bWJvbC5hc3luY0l0ZXJhdG9yYCB3ZWxsLWtub3duIHN5bWJvbFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zeW1ib2wuYXN5bmNpdGVyYXRvclxuZGVmaW5lV2VsbEtub3duU3ltYm9sKCdhc3luY0l0ZXJhdG9yJyk7XG4iLCIvLyBgU3ltYm9sLnByb3RvdHlwZS5kZXNjcmlwdGlvbmAgZ2V0dGVyXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXN5bWJvbC5wcm90b3R5cGUuZGVzY3JpcHRpb25cbid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Rlc2NyaXB0b3JzJyk7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIGhhcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oYXMnKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1vYmplY3QnKTtcbnZhciBkZWZpbmVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZGVmaW5lLXByb3BlcnR5JykuZjtcbnZhciBjb3B5Q29uc3RydWN0b3JQcm9wZXJ0aWVzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NvcHktY29uc3RydWN0b3ItcHJvcGVydGllcycpO1xuXG52YXIgTmF0aXZlU3ltYm9sID0gZ2xvYmFsLlN5bWJvbDtcblxuaWYgKERFU0NSSVBUT1JTICYmIHR5cGVvZiBOYXRpdmVTeW1ib2wgPT0gJ2Z1bmN0aW9uJyAmJiAoISgnZGVzY3JpcHRpb24nIGluIE5hdGl2ZVN5bWJvbC5wcm90b3R5cGUpIHx8XG4gIC8vIFNhZmFyaSAxMiBidWdcbiAgTmF0aXZlU3ltYm9sKCkuZGVzY3JpcHRpb24gIT09IHVuZGVmaW5lZFxuKSkge1xuICB2YXIgRW1wdHlTdHJpbmdEZXNjcmlwdGlvblN0b3JlID0ge307XG4gIC8vIHdyYXAgU3ltYm9sIGNvbnN0cnVjdG9yIGZvciBjb3JyZWN0IHdvcmsgd2l0aCB1bmRlZmluZWQgZGVzY3JpcHRpb25cbiAgdmFyIFN5bWJvbFdyYXBwZXIgPSBmdW5jdGlvbiBTeW1ib2woKSB7XG4gICAgdmFyIGRlc2NyaXB0aW9uID0gYXJndW1lbnRzLmxlbmd0aCA8IDEgfHwgYXJndW1lbnRzWzBdID09PSB1bmRlZmluZWQgPyB1bmRlZmluZWQgOiBTdHJpbmcoYXJndW1lbnRzWzBdKTtcbiAgICB2YXIgcmVzdWx0ID0gdGhpcyBpbnN0YW5jZW9mIFN5bWJvbFdyYXBwZXJcbiAgICAgID8gbmV3IE5hdGl2ZVN5bWJvbChkZXNjcmlwdGlvbilcbiAgICAgIC8vIGluIEVkZ2UgMTMsIFN0cmluZyhTeW1ib2wodW5kZWZpbmVkKSkgPT09ICdTeW1ib2wodW5kZWZpbmVkKSdcbiAgICAgIDogZGVzY3JpcHRpb24gPT09IHVuZGVmaW5lZCA/IE5hdGl2ZVN5bWJvbCgpIDogTmF0aXZlU3ltYm9sKGRlc2NyaXB0aW9uKTtcbiAgICBpZiAoZGVzY3JpcHRpb24gPT09ICcnKSBFbXB0eVN0cmluZ0Rlc2NyaXB0aW9uU3RvcmVbcmVzdWx0XSA9IHRydWU7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfTtcbiAgY29weUNvbnN0cnVjdG9yUHJvcGVydGllcyhTeW1ib2xXcmFwcGVyLCBOYXRpdmVTeW1ib2wpO1xuICB2YXIgc3ltYm9sUHJvdG90eXBlID0gU3ltYm9sV3JhcHBlci5wcm90b3R5cGUgPSBOYXRpdmVTeW1ib2wucHJvdG90eXBlO1xuICBzeW1ib2xQcm90b3R5cGUuY29uc3RydWN0b3IgPSBTeW1ib2xXcmFwcGVyO1xuXG4gIHZhciBzeW1ib2xUb1N0cmluZyA9IHN5bWJvbFByb3RvdHlwZS50b1N0cmluZztcbiAgdmFyIG5hdGl2ZSA9IFN0cmluZyhOYXRpdmVTeW1ib2woJ3Rlc3QnKSkgPT0gJ1N5bWJvbCh0ZXN0KSc7XG4gIHZhciByZWdleHAgPSAvXlN5bWJvbFxcKCguKilcXClbXildKyQvO1xuICBkZWZpbmVQcm9wZXJ0eShzeW1ib2xQcm90b3R5cGUsICdkZXNjcmlwdGlvbicsIHtcbiAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgZ2V0OiBmdW5jdGlvbiBkZXNjcmlwdGlvbigpIHtcbiAgICAgIHZhciBzeW1ib2wgPSBpc09iamVjdCh0aGlzKSA/IHRoaXMudmFsdWVPZigpIDogdGhpcztcbiAgICAgIHZhciBzdHJpbmcgPSBzeW1ib2xUb1N0cmluZy5jYWxsKHN5bWJvbCk7XG4gICAgICBpZiAoaGFzKEVtcHR5U3RyaW5nRGVzY3JpcHRpb25TdG9yZSwgc3ltYm9sKSkgcmV0dXJuICcnO1xuICAgICAgdmFyIGRlc2MgPSBuYXRpdmUgPyBzdHJpbmcuc2xpY2UoNywgLTEpIDogc3RyaW5nLnJlcGxhY2UocmVnZXhwLCAnJDEnKTtcbiAgICAgIHJldHVybiBkZXNjID09PSAnJyA/IHVuZGVmaW5lZCA6IGRlc2M7XG4gICAgfVxuICB9KTtcblxuICAkKHsgZ2xvYmFsOiB0cnVlLCBmb3JjZWQ6IHRydWUgfSwge1xuICAgIFN5bWJvbDogU3ltYm9sV3JhcHBlclxuICB9KTtcbn1cbiIsInZhciBkZWZpbmVXZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVmaW5lLXdlbGwta25vd24tc3ltYm9sJyk7XG5cbi8vIGBTeW1ib2wuaGFzSW5zdGFuY2VgIHdlbGwta25vd24gc3ltYm9sXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXN5bWJvbC5oYXNpbnN0YW5jZVxuZGVmaW5lV2VsbEtub3duU3ltYm9sKCdoYXNJbnN0YW5jZScpO1xuIiwidmFyIGRlZmluZVdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZWZpbmUtd2VsbC1rbm93bi1zeW1ib2wnKTtcblxuLy8gYFN5bWJvbC5pc0NvbmNhdFNwcmVhZGFibGVgIHdlbGwta25vd24gc3ltYm9sXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXN5bWJvbC5pc2NvbmNhdHNwcmVhZGFibGVcbmRlZmluZVdlbGxLbm93blN5bWJvbCgnaXNDb25jYXRTcHJlYWRhYmxlJyk7XG4iLCJ2YXIgZGVmaW5lV2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2RlZmluZS13ZWxsLWtub3duLXN5bWJvbCcpO1xuXG4vLyBgU3ltYm9sLml0ZXJhdG9yYCB3ZWxsLWtub3duIHN5bWJvbFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zeW1ib2wuaXRlcmF0b3JcbmRlZmluZVdlbGxLbm93blN5bWJvbCgnaXRlcmF0b3InKTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciBnZXRCdWlsdEluID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dldC1idWlsdC1pbicpO1xudmFyIElTX1BVUkUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtcHVyZScpO1xudmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Rlc2NyaXB0b3JzJyk7XG52YXIgTkFUSVZFX1NZTUJPTCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9uYXRpdmUtc3ltYm9sJyk7XG52YXIgVVNFX1NZTUJPTF9BU19VSUQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdXNlLXN5bWJvbC1hcy11aWQnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xudmFyIGhhcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oYXMnKTtcbnZhciBpc0FycmF5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLWFycmF5Jyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtb2JqZWN0Jyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4tb2JqZWN0Jyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tb2JqZWN0Jyk7XG52YXIgdG9JbmRleGVkT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWluZGV4ZWQtb2JqZWN0Jyk7XG52YXIgdG9QcmltaXRpdmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tcHJpbWl0aXZlJyk7XG52YXIgY3JlYXRlUHJvcGVydHlEZXNjcmlwdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1wcm9wZXJ0eS1kZXNjcmlwdG9yJyk7XG52YXIgbmF0aXZlT2JqZWN0Q3JlYXRlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1jcmVhdGUnKTtcbnZhciBvYmplY3RLZXlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1rZXlzJyk7XG52YXIgZ2V0T3duUHJvcGVydHlOYW1lc01vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZ2V0LW93bi1wcm9wZXJ0eS1uYW1lcycpO1xudmFyIGdldE93blByb3BlcnR5TmFtZXNFeHRlcm5hbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZ2V0LW93bi1wcm9wZXJ0eS1uYW1lcy1leHRlcm5hbCcpO1xudmFyIGdldE93blByb3BlcnR5U3ltYm9sc01vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZ2V0LW93bi1wcm9wZXJ0eS1zeW1ib2xzJyk7XG52YXIgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yTW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3InKTtcbnZhciBkZWZpbmVQcm9wZXJ0eU1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZGVmaW5lLXByb3BlcnR5Jyk7XG52YXIgcHJvcGVydHlJc0VudW1lcmFibGVNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LXByb3BlcnR5LWlzLWVudW1lcmFibGUnKTtcbnZhciBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLW5vbi1lbnVtZXJhYmxlLXByb3BlcnR5Jyk7XG52YXIgcmVkZWZpbmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVkZWZpbmUnKTtcbnZhciBzaGFyZWQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2hhcmVkJyk7XG52YXIgc2hhcmVkS2V5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NoYXJlZC1rZXknKTtcbnZhciBoaWRkZW5LZXlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hpZGRlbi1rZXlzJyk7XG52YXIgdWlkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3VpZCcpO1xudmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xudmFyIHdyYXBwZWRXZWxsS25vd25TeW1ib2xNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wtd3JhcHBlZCcpO1xudmFyIGRlZmluZVdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZWZpbmUtd2VsbC1rbm93bi1zeW1ib2wnKTtcbnZhciBzZXRUb1N0cmluZ1RhZyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zZXQtdG8tc3RyaW5nLXRhZycpO1xudmFyIEludGVybmFsU3RhdGVNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaW50ZXJuYWwtc3RhdGUnKTtcbnZhciAkZm9yRWFjaCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1pdGVyYXRpb24nKS5mb3JFYWNoO1xuXG52YXIgSElEREVOID0gc2hhcmVkS2V5KCdoaWRkZW4nKTtcbnZhciBTWU1CT0wgPSAnU3ltYm9sJztcbnZhciBQUk9UT1RZUEUgPSAncHJvdG90eXBlJztcbnZhciBUT19QUklNSVRJVkUgPSB3ZWxsS25vd25TeW1ib2woJ3RvUHJpbWl0aXZlJyk7XG52YXIgc2V0SW50ZXJuYWxTdGF0ZSA9IEludGVybmFsU3RhdGVNb2R1bGUuc2V0O1xudmFyIGdldEludGVybmFsU3RhdGUgPSBJbnRlcm5hbFN0YXRlTW9kdWxlLmdldHRlckZvcihTWU1CT0wpO1xudmFyIE9iamVjdFByb3RvdHlwZSA9IE9iamVjdFtQUk9UT1RZUEVdO1xudmFyICRTeW1ib2wgPSBnbG9iYWwuU3ltYm9sO1xudmFyICRzdHJpbmdpZnkgPSBnZXRCdWlsdEluKCdKU09OJywgJ3N0cmluZ2lmeScpO1xudmFyIG5hdGl2ZUdldE93blByb3BlcnR5RGVzY3JpcHRvciA9IGdldE93blByb3BlcnR5RGVzY3JpcHRvck1vZHVsZS5mO1xudmFyIG5hdGl2ZURlZmluZVByb3BlcnR5ID0gZGVmaW5lUHJvcGVydHlNb2R1bGUuZjtcbnZhciBuYXRpdmVHZXRPd25Qcm9wZXJ0eU5hbWVzID0gZ2V0T3duUHJvcGVydHlOYW1lc0V4dGVybmFsLmY7XG52YXIgbmF0aXZlUHJvcGVydHlJc0VudW1lcmFibGUgPSBwcm9wZXJ0eUlzRW51bWVyYWJsZU1vZHVsZS5mO1xudmFyIEFsbFN5bWJvbHMgPSBzaGFyZWQoJ3N5bWJvbHMnKTtcbnZhciBPYmplY3RQcm90b3R5cGVTeW1ib2xzID0gc2hhcmVkKCdvcC1zeW1ib2xzJyk7XG52YXIgU3RyaW5nVG9TeW1ib2xSZWdpc3RyeSA9IHNoYXJlZCgnc3RyaW5nLXRvLXN5bWJvbC1yZWdpc3RyeScpO1xudmFyIFN5bWJvbFRvU3RyaW5nUmVnaXN0cnkgPSBzaGFyZWQoJ3N5bWJvbC10by1zdHJpbmctcmVnaXN0cnknKTtcbnZhciBXZWxsS25vd25TeW1ib2xzU3RvcmUgPSBzaGFyZWQoJ3drcycpO1xudmFyIFFPYmplY3QgPSBnbG9iYWwuUU9iamVjdDtcbi8vIERvbid0IHVzZSBzZXR0ZXJzIGluIFF0IFNjcmlwdCwgaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMvaXNzdWVzLzE3M1xudmFyIFVTRV9TRVRURVIgPSAhUU9iamVjdCB8fCAhUU9iamVjdFtQUk9UT1RZUEVdIHx8ICFRT2JqZWN0W1BST1RPVFlQRV0uZmluZENoaWxkO1xuXG4vLyBmYWxsYmFjayBmb3Igb2xkIEFuZHJvaWQsIGh0dHBzOi8vY29kZS5nb29nbGUuY29tL3AvdjgvaXNzdWVzL2RldGFpbD9pZD02ODdcbnZhciBzZXRTeW1ib2xEZXNjcmlwdG9yID0gREVTQ1JJUFRPUlMgJiYgZmFpbHMoZnVuY3Rpb24gKCkge1xuICByZXR1cm4gbmF0aXZlT2JqZWN0Q3JlYXRlKG5hdGl2ZURlZmluZVByb3BlcnR5KHt9LCAnYScsIHtcbiAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIG5hdGl2ZURlZmluZVByb3BlcnR5KHRoaXMsICdhJywgeyB2YWx1ZTogNyB9KS5hOyB9XG4gIH0pKS5hICE9IDc7XG59KSA/IGZ1bmN0aW9uIChPLCBQLCBBdHRyaWJ1dGVzKSB7XG4gIHZhciBPYmplY3RQcm90b3R5cGVEZXNjcmlwdG9yID0gbmF0aXZlR2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKE9iamVjdFByb3RvdHlwZSwgUCk7XG4gIGlmIChPYmplY3RQcm90b3R5cGVEZXNjcmlwdG9yKSBkZWxldGUgT2JqZWN0UHJvdG90eXBlW1BdO1xuICBuYXRpdmVEZWZpbmVQcm9wZXJ0eShPLCBQLCBBdHRyaWJ1dGVzKTtcbiAgaWYgKE9iamVjdFByb3RvdHlwZURlc2NyaXB0b3IgJiYgTyAhPT0gT2JqZWN0UHJvdG90eXBlKSB7XG4gICAgbmF0aXZlRGVmaW5lUHJvcGVydHkoT2JqZWN0UHJvdG90eXBlLCBQLCBPYmplY3RQcm90b3R5cGVEZXNjcmlwdG9yKTtcbiAgfVxufSA6IG5hdGl2ZURlZmluZVByb3BlcnR5O1xuXG52YXIgd3JhcCA9IGZ1bmN0aW9uICh0YWcsIGRlc2NyaXB0aW9uKSB7XG4gIHZhciBzeW1ib2wgPSBBbGxTeW1ib2xzW3RhZ10gPSBuYXRpdmVPYmplY3RDcmVhdGUoJFN5bWJvbFtQUk9UT1RZUEVdKTtcbiAgc2V0SW50ZXJuYWxTdGF0ZShzeW1ib2wsIHtcbiAgICB0eXBlOiBTWU1CT0wsXG4gICAgdGFnOiB0YWcsXG4gICAgZGVzY3JpcHRpb246IGRlc2NyaXB0aW9uXG4gIH0pO1xuICBpZiAoIURFU0NSSVBUT1JTKSBzeW1ib2wuZGVzY3JpcHRpb24gPSBkZXNjcmlwdGlvbjtcbiAgcmV0dXJuIHN5bWJvbDtcbn07XG5cbnZhciBpc1N5bWJvbCA9IFVTRV9TWU1CT0xfQVNfVUlEID8gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiB0eXBlb2YgaXQgPT0gJ3N5bWJvbCc7XG59IDogZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBPYmplY3QoaXQpIGluc3RhbmNlb2YgJFN5bWJvbDtcbn07XG5cbnZhciAkZGVmaW5lUHJvcGVydHkgPSBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0eShPLCBQLCBBdHRyaWJ1dGVzKSB7XG4gIGlmIChPID09PSBPYmplY3RQcm90b3R5cGUpICRkZWZpbmVQcm9wZXJ0eShPYmplY3RQcm90b3R5cGVTeW1ib2xzLCBQLCBBdHRyaWJ1dGVzKTtcbiAgYW5PYmplY3QoTyk7XG4gIHZhciBrZXkgPSB0b1ByaW1pdGl2ZShQLCB0cnVlKTtcbiAgYW5PYmplY3QoQXR0cmlidXRlcyk7XG4gIGlmIChoYXMoQWxsU3ltYm9scywga2V5KSkge1xuICAgIGlmICghQXR0cmlidXRlcy5lbnVtZXJhYmxlKSB7XG4gICAgICBpZiAoIWhhcyhPLCBISURERU4pKSBuYXRpdmVEZWZpbmVQcm9wZXJ0eShPLCBISURERU4sIGNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvcigxLCB7fSkpO1xuICAgICAgT1tISURERU5dW2tleV0gPSB0cnVlO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoaGFzKE8sIEhJRERFTikgJiYgT1tISURERU5dW2tleV0pIE9bSElEREVOXVtrZXldID0gZmFsc2U7XG4gICAgICBBdHRyaWJ1dGVzID0gbmF0aXZlT2JqZWN0Q3JlYXRlKEF0dHJpYnV0ZXMsIHsgZW51bWVyYWJsZTogY3JlYXRlUHJvcGVydHlEZXNjcmlwdG9yKDAsIGZhbHNlKSB9KTtcbiAgICB9IHJldHVybiBzZXRTeW1ib2xEZXNjcmlwdG9yKE8sIGtleSwgQXR0cmlidXRlcyk7XG4gIH0gcmV0dXJuIG5hdGl2ZURlZmluZVByb3BlcnR5KE8sIGtleSwgQXR0cmlidXRlcyk7XG59O1xuXG52YXIgJGRlZmluZVByb3BlcnRpZXMgPSBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKE8sIFByb3BlcnRpZXMpIHtcbiAgYW5PYmplY3QoTyk7XG4gIHZhciBwcm9wZXJ0aWVzID0gdG9JbmRleGVkT2JqZWN0KFByb3BlcnRpZXMpO1xuICB2YXIga2V5cyA9IG9iamVjdEtleXMocHJvcGVydGllcykuY29uY2F0KCRnZXRPd25Qcm9wZXJ0eVN5bWJvbHMocHJvcGVydGllcykpO1xuICAkZm9yRWFjaChrZXlzLCBmdW5jdGlvbiAoa2V5KSB7XG4gICAgaWYgKCFERVNDUklQVE9SUyB8fCAkcHJvcGVydHlJc0VudW1lcmFibGUuY2FsbChwcm9wZXJ0aWVzLCBrZXkpKSAkZGVmaW5lUHJvcGVydHkoTywga2V5LCBwcm9wZXJ0aWVzW2tleV0pO1xuICB9KTtcbiAgcmV0dXJuIE87XG59O1xuXG52YXIgJGNyZWF0ZSA9IGZ1bmN0aW9uIGNyZWF0ZShPLCBQcm9wZXJ0aWVzKSB7XG4gIHJldHVybiBQcm9wZXJ0aWVzID09PSB1bmRlZmluZWQgPyBuYXRpdmVPYmplY3RDcmVhdGUoTykgOiAkZGVmaW5lUHJvcGVydGllcyhuYXRpdmVPYmplY3RDcmVhdGUoTyksIFByb3BlcnRpZXMpO1xufTtcblxudmFyICRwcm9wZXJ0eUlzRW51bWVyYWJsZSA9IGZ1bmN0aW9uIHByb3BlcnR5SXNFbnVtZXJhYmxlKFYpIHtcbiAgdmFyIFAgPSB0b1ByaW1pdGl2ZShWLCB0cnVlKTtcbiAgdmFyIGVudW1lcmFibGUgPSBuYXRpdmVQcm9wZXJ0eUlzRW51bWVyYWJsZS5jYWxsKHRoaXMsIFApO1xuICBpZiAodGhpcyA9PT0gT2JqZWN0UHJvdG90eXBlICYmIGhhcyhBbGxTeW1ib2xzLCBQKSAmJiAhaGFzKE9iamVjdFByb3RvdHlwZVN5bWJvbHMsIFApKSByZXR1cm4gZmFsc2U7XG4gIHJldHVybiBlbnVtZXJhYmxlIHx8ICFoYXModGhpcywgUCkgfHwgIWhhcyhBbGxTeW1ib2xzLCBQKSB8fCBoYXModGhpcywgSElEREVOKSAmJiB0aGlzW0hJRERFTl1bUF0gPyBlbnVtZXJhYmxlIDogdHJ1ZTtcbn07XG5cbnZhciAkZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKE8sIFApIHtcbiAgdmFyIGl0ID0gdG9JbmRleGVkT2JqZWN0KE8pO1xuICB2YXIga2V5ID0gdG9QcmltaXRpdmUoUCwgdHJ1ZSk7XG4gIGlmIChpdCA9PT0gT2JqZWN0UHJvdG90eXBlICYmIGhhcyhBbGxTeW1ib2xzLCBrZXkpICYmICFoYXMoT2JqZWN0UHJvdG90eXBlU3ltYm9scywga2V5KSkgcmV0dXJuO1xuICB2YXIgZGVzY3JpcHRvciA9IG5hdGl2ZUdldE93blByb3BlcnR5RGVzY3JpcHRvcihpdCwga2V5KTtcbiAgaWYgKGRlc2NyaXB0b3IgJiYgaGFzKEFsbFN5bWJvbHMsIGtleSkgJiYgIShoYXMoaXQsIEhJRERFTikgJiYgaXRbSElEREVOXVtrZXldKSkge1xuICAgIGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IHRydWU7XG4gIH1cbiAgcmV0dXJuIGRlc2NyaXB0b3I7XG59O1xuXG52YXIgJGdldE93blByb3BlcnR5TmFtZXMgPSBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eU5hbWVzKE8pIHtcbiAgdmFyIG5hbWVzID0gbmF0aXZlR2V0T3duUHJvcGVydHlOYW1lcyh0b0luZGV4ZWRPYmplY3QoTykpO1xuICB2YXIgcmVzdWx0ID0gW107XG4gICRmb3JFYWNoKG5hbWVzLCBmdW5jdGlvbiAoa2V5KSB7XG4gICAgaWYgKCFoYXMoQWxsU3ltYm9scywga2V5KSAmJiAhaGFzKGhpZGRlbktleXMsIGtleSkpIHJlc3VsdC5wdXNoKGtleSk7XG4gIH0pO1xuICByZXR1cm4gcmVzdWx0O1xufTtcblxudmFyICRnZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPSBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eVN5bWJvbHMoTykge1xuICB2YXIgSVNfT0JKRUNUX1BST1RPVFlQRSA9IE8gPT09IE9iamVjdFByb3RvdHlwZTtcbiAgdmFyIG5hbWVzID0gbmF0aXZlR2V0T3duUHJvcGVydHlOYW1lcyhJU19PQkpFQ1RfUFJPVE9UWVBFID8gT2JqZWN0UHJvdG90eXBlU3ltYm9scyA6IHRvSW5kZXhlZE9iamVjdChPKSk7XG4gIHZhciByZXN1bHQgPSBbXTtcbiAgJGZvckVhY2gobmFtZXMsIGZ1bmN0aW9uIChrZXkpIHtcbiAgICBpZiAoaGFzKEFsbFN5bWJvbHMsIGtleSkgJiYgKCFJU19PQkpFQ1RfUFJPVE9UWVBFIHx8IGhhcyhPYmplY3RQcm90b3R5cGUsIGtleSkpKSB7XG4gICAgICByZXN1bHQucHVzaChBbGxTeW1ib2xzW2tleV0pO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiByZXN1bHQ7XG59O1xuXG4vLyBgU3ltYm9sYCBjb25zdHJ1Y3RvclxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zeW1ib2wtY29uc3RydWN0b3JcbmlmICghTkFUSVZFX1NZTUJPTCkge1xuICAkU3ltYm9sID0gZnVuY3Rpb24gU3ltYm9sKCkge1xuICAgIGlmICh0aGlzIGluc3RhbmNlb2YgJFN5bWJvbCkgdGhyb3cgVHlwZUVycm9yKCdTeW1ib2wgaXMgbm90IGEgY29uc3RydWN0b3InKTtcbiAgICB2YXIgZGVzY3JpcHRpb24gPSAhYXJndW1lbnRzLmxlbmd0aCB8fCBhcmd1bWVudHNbMF0gPT09IHVuZGVmaW5lZCA/IHVuZGVmaW5lZCA6IFN0cmluZyhhcmd1bWVudHNbMF0pO1xuICAgIHZhciB0YWcgPSB1aWQoZGVzY3JpcHRpb24pO1xuICAgIHZhciBzZXR0ZXIgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgIGlmICh0aGlzID09PSBPYmplY3RQcm90b3R5cGUpIHNldHRlci5jYWxsKE9iamVjdFByb3RvdHlwZVN5bWJvbHMsIHZhbHVlKTtcbiAgICAgIGlmIChoYXModGhpcywgSElEREVOKSAmJiBoYXModGhpc1tISURERU5dLCB0YWcpKSB0aGlzW0hJRERFTl1bdGFnXSA9IGZhbHNlO1xuICAgICAgc2V0U3ltYm9sRGVzY3JpcHRvcih0aGlzLCB0YWcsIGNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvcigxLCB2YWx1ZSkpO1xuICAgIH07XG4gICAgaWYgKERFU0NSSVBUT1JTICYmIFVTRV9TRVRURVIpIHNldFN5bWJvbERlc2NyaXB0b3IoT2JqZWN0UHJvdG90eXBlLCB0YWcsIHsgY29uZmlndXJhYmxlOiB0cnVlLCBzZXQ6IHNldHRlciB9KTtcbiAgICByZXR1cm4gd3JhcCh0YWcsIGRlc2NyaXB0aW9uKTtcbiAgfTtcblxuICByZWRlZmluZSgkU3ltYm9sW1BST1RPVFlQRV0sICd0b1N0cmluZycsIGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgIHJldHVybiBnZXRJbnRlcm5hbFN0YXRlKHRoaXMpLnRhZztcbiAgfSk7XG5cbiAgcmVkZWZpbmUoJFN5bWJvbCwgJ3dpdGhvdXRTZXR0ZXInLCBmdW5jdGlvbiAoZGVzY3JpcHRpb24pIHtcbiAgICByZXR1cm4gd3JhcCh1aWQoZGVzY3JpcHRpb24pLCBkZXNjcmlwdGlvbik7XG4gIH0pO1xuXG4gIHByb3BlcnR5SXNFbnVtZXJhYmxlTW9kdWxlLmYgPSAkcHJvcGVydHlJc0VudW1lcmFibGU7XG4gIGRlZmluZVByb3BlcnR5TW9kdWxlLmYgPSAkZGVmaW5lUHJvcGVydHk7XG4gIGdldE93blByb3BlcnR5RGVzY3JpcHRvck1vZHVsZS5mID0gJGdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcbiAgZ2V0T3duUHJvcGVydHlOYW1lc01vZHVsZS5mID0gZ2V0T3duUHJvcGVydHlOYW1lc0V4dGVybmFsLmYgPSAkZ2V0T3duUHJvcGVydHlOYW1lcztcbiAgZ2V0T3duUHJvcGVydHlTeW1ib2xzTW9kdWxlLmYgPSAkZ2V0T3duUHJvcGVydHlTeW1ib2xzO1xuXG4gIHdyYXBwZWRXZWxsS25vd25TeW1ib2xNb2R1bGUuZiA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgcmV0dXJuIHdyYXAod2VsbEtub3duU3ltYm9sKG5hbWUpLCBuYW1lKTtcbiAgfTtcblxuICBpZiAoREVTQ1JJUFRPUlMpIHtcbiAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1TeW1ib2wtZGVzY3JpcHRpb25cbiAgICBuYXRpdmVEZWZpbmVQcm9wZXJ0eSgkU3ltYm9sW1BST1RPVFlQRV0sICdkZXNjcmlwdGlvbicsIHtcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgIGdldDogZnVuY3Rpb24gZGVzY3JpcHRpb24oKSB7XG4gICAgICAgIHJldHVybiBnZXRJbnRlcm5hbFN0YXRlKHRoaXMpLmRlc2NyaXB0aW9uO1xuICAgICAgfVxuICAgIH0pO1xuICAgIGlmICghSVNfUFVSRSkge1xuICAgICAgcmVkZWZpbmUoT2JqZWN0UHJvdG90eXBlLCAncHJvcGVydHlJc0VudW1lcmFibGUnLCAkcHJvcGVydHlJc0VudW1lcmFibGUsIHsgdW5zYWZlOiB0cnVlIH0pO1xuICAgIH1cbiAgfVxufVxuXG4kKHsgZ2xvYmFsOiB0cnVlLCB3cmFwOiB0cnVlLCBmb3JjZWQ6ICFOQVRJVkVfU1lNQk9MLCBzaGFtOiAhTkFUSVZFX1NZTUJPTCB9LCB7XG4gIFN5bWJvbDogJFN5bWJvbFxufSk7XG5cbiRmb3JFYWNoKG9iamVjdEtleXMoV2VsbEtub3duU3ltYm9sc1N0b3JlKSwgZnVuY3Rpb24gKG5hbWUpIHtcbiAgZGVmaW5lV2VsbEtub3duU3ltYm9sKG5hbWUpO1xufSk7XG5cbiQoeyB0YXJnZXQ6IFNZTUJPTCwgc3RhdDogdHJ1ZSwgZm9yY2VkOiAhTkFUSVZFX1NZTUJPTCB9LCB7XG4gIC8vIGBTeW1ib2wuZm9yYCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zeW1ib2wuZm9yXG4gICdmb3InOiBmdW5jdGlvbiAoa2V5KSB7XG4gICAgdmFyIHN0cmluZyA9IFN0cmluZyhrZXkpO1xuICAgIGlmIChoYXMoU3RyaW5nVG9TeW1ib2xSZWdpc3RyeSwgc3RyaW5nKSkgcmV0dXJuIFN0cmluZ1RvU3ltYm9sUmVnaXN0cnlbc3RyaW5nXTtcbiAgICB2YXIgc3ltYm9sID0gJFN5bWJvbChzdHJpbmcpO1xuICAgIFN0cmluZ1RvU3ltYm9sUmVnaXN0cnlbc3RyaW5nXSA9IHN5bWJvbDtcbiAgICBTeW1ib2xUb1N0cmluZ1JlZ2lzdHJ5W3N5bWJvbF0gPSBzdHJpbmc7XG4gICAgcmV0dXJuIHN5bWJvbDtcbiAgfSxcbiAgLy8gYFN5bWJvbC5rZXlGb3JgIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXN5bWJvbC5rZXlmb3JcbiAga2V5Rm9yOiBmdW5jdGlvbiBrZXlGb3Ioc3ltKSB7XG4gICAgaWYgKCFpc1N5bWJvbChzeW0pKSB0aHJvdyBUeXBlRXJyb3Ioc3ltICsgJyBpcyBub3QgYSBzeW1ib2wnKTtcbiAgICBpZiAoaGFzKFN5bWJvbFRvU3RyaW5nUmVnaXN0cnksIHN5bSkpIHJldHVybiBTeW1ib2xUb1N0cmluZ1JlZ2lzdHJ5W3N5bV07XG4gIH0sXG4gIHVzZVNldHRlcjogZnVuY3Rpb24gKCkgeyBVU0VfU0VUVEVSID0gdHJ1ZTsgfSxcbiAgdXNlU2ltcGxlOiBmdW5jdGlvbiAoKSB7IFVTRV9TRVRURVIgPSBmYWxzZTsgfVxufSk7XG5cbiQoeyB0YXJnZXQ6ICdPYmplY3QnLCBzdGF0OiB0cnVlLCBmb3JjZWQ6ICFOQVRJVkVfU1lNQk9MLCBzaGFtOiAhREVTQ1JJUFRPUlMgfSwge1xuICAvLyBgT2JqZWN0LmNyZWF0ZWAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtb2JqZWN0LmNyZWF0ZVxuICBjcmVhdGU6ICRjcmVhdGUsXG4gIC8vIGBPYmplY3QuZGVmaW5lUHJvcGVydHlgIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW9iamVjdC5kZWZpbmVwcm9wZXJ0eVxuICBkZWZpbmVQcm9wZXJ0eTogJGRlZmluZVByb3BlcnR5LFxuICAvLyBgT2JqZWN0LmRlZmluZVByb3BlcnRpZXNgIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW9iamVjdC5kZWZpbmVwcm9wZXJ0aWVzXG4gIGRlZmluZVByb3BlcnRpZXM6ICRkZWZpbmVQcm9wZXJ0aWVzLFxuICAvLyBgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcmAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtb2JqZWN0LmdldG93bnByb3BlcnR5ZGVzY3JpcHRvcnNcbiAgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yOiAkZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yXG59KTtcblxuJCh7IHRhcmdldDogJ09iamVjdCcsIHN0YXQ6IHRydWUsIGZvcmNlZDogIU5BVElWRV9TWU1CT0wgfSwge1xuICAvLyBgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXNgIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW9iamVjdC5nZXRvd25wcm9wZXJ0eW5hbWVzXG4gIGdldE93blByb3BlcnR5TmFtZXM6ICRnZXRPd25Qcm9wZXJ0eU5hbWVzLFxuICAvLyBgT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9sc2AgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtb2JqZWN0LmdldG93bnByb3BlcnR5c3ltYm9sc1xuICBnZXRPd25Qcm9wZXJ0eVN5bWJvbHM6ICRnZXRPd25Qcm9wZXJ0eVN5bWJvbHNcbn0pO1xuXG4vLyBDaHJvbWUgMzggYW5kIDM5IGBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzYCBmYWlscyBvbiBwcmltaXRpdmVzXG4vLyBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvdjgvaXNzdWVzL2RldGFpbD9pZD0zNDQzXG4kKHsgdGFyZ2V0OiAnT2JqZWN0Jywgc3RhdDogdHJ1ZSwgZm9yY2VkOiBmYWlscyhmdW5jdGlvbiAoKSB7IGdldE93blByb3BlcnR5U3ltYm9sc01vZHVsZS5mKDEpOyB9KSB9LCB7XG4gIGdldE93blByb3BlcnR5U3ltYm9sczogZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlTeW1ib2xzKGl0KSB7XG4gICAgcmV0dXJuIGdldE93blByb3BlcnR5U3ltYm9sc01vZHVsZS5mKHRvT2JqZWN0KGl0KSk7XG4gIH1cbn0pO1xuXG4vLyBgSlNPTi5zdHJpbmdpZnlgIG1ldGhvZCBiZWhhdmlvciB3aXRoIHN5bWJvbHNcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtanNvbi5zdHJpbmdpZnlcbmlmICgkc3RyaW5naWZ5KSB7XG4gIHZhciBGT1JDRURfSlNPTl9TVFJJTkdJRlkgPSAhTkFUSVZFX1NZTUJPTCB8fCBmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHN5bWJvbCA9ICRTeW1ib2woKTtcbiAgICAvLyBNUyBFZGdlIGNvbnZlcnRzIHN5bWJvbCB2YWx1ZXMgdG8gSlNPTiBhcyB7fVxuICAgIHJldHVybiAkc3RyaW5naWZ5KFtzeW1ib2xdKSAhPSAnW251bGxdJ1xuICAgICAgLy8gV2ViS2l0IGNvbnZlcnRzIHN5bWJvbCB2YWx1ZXMgdG8gSlNPTiBhcyBudWxsXG4gICAgICB8fCAkc3RyaW5naWZ5KHsgYTogc3ltYm9sIH0pICE9ICd7fSdcbiAgICAgIC8vIFY4IHRocm93cyBvbiBib3hlZCBzeW1ib2xzXG4gICAgICB8fCAkc3RyaW5naWZ5KE9iamVjdChzeW1ib2wpKSAhPSAne30nO1xuICB9KTtcblxuICAkKHsgdGFyZ2V0OiAnSlNPTicsIHN0YXQ6IHRydWUsIGZvcmNlZDogRk9SQ0VEX0pTT05fU1RSSU5HSUZZIH0sIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW51c2VkLXZhcnNcbiAgICBzdHJpbmdpZnk6IGZ1bmN0aW9uIHN0cmluZ2lmeShpdCwgcmVwbGFjZXIsIHNwYWNlKSB7XG4gICAgICB2YXIgYXJncyA9IFtpdF07XG4gICAgICB2YXIgaW5kZXggPSAxO1xuICAgICAgdmFyICRyZXBsYWNlcjtcbiAgICAgIHdoaWxlIChhcmd1bWVudHMubGVuZ3RoID4gaW5kZXgpIGFyZ3MucHVzaChhcmd1bWVudHNbaW5kZXgrK10pO1xuICAgICAgJHJlcGxhY2VyID0gcmVwbGFjZXI7XG4gICAgICBpZiAoIWlzT2JqZWN0KHJlcGxhY2VyKSAmJiBpdCA9PT0gdW5kZWZpbmVkIHx8IGlzU3ltYm9sKGl0KSkgcmV0dXJuOyAvLyBJRTggcmV0dXJucyBzdHJpbmcgb24gdW5kZWZpbmVkXG4gICAgICBpZiAoIWlzQXJyYXkocmVwbGFjZXIpKSByZXBsYWNlciA9IGZ1bmN0aW9uIChrZXksIHZhbHVlKSB7XG4gICAgICAgIGlmICh0eXBlb2YgJHJlcGxhY2VyID09ICdmdW5jdGlvbicpIHZhbHVlID0gJHJlcGxhY2VyLmNhbGwodGhpcywga2V5LCB2YWx1ZSk7XG4gICAgICAgIGlmICghaXNTeW1ib2wodmFsdWUpKSByZXR1cm4gdmFsdWU7XG4gICAgICB9O1xuICAgICAgYXJnc1sxXSA9IHJlcGxhY2VyO1xuICAgICAgcmV0dXJuICRzdHJpbmdpZnkuYXBwbHkobnVsbCwgYXJncyk7XG4gICAgfVxuICB9KTtcbn1cblxuLy8gYFN5bWJvbC5wcm90b3R5cGVbQEB0b1ByaW1pdGl2ZV1gIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zeW1ib2wucHJvdG90eXBlLUBAdG9wcmltaXRpdmVcbmlmICghJFN5bWJvbFtQUk9UT1RZUEVdW1RPX1BSSU1JVElWRV0pIHtcbiAgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5KCRTeW1ib2xbUFJPVE9UWVBFXSwgVE9fUFJJTUlUSVZFLCAkU3ltYm9sW1BST1RPVFlQRV0udmFsdWVPZik7XG59XG4vLyBgU3ltYm9sLnByb3RvdHlwZVtAQHRvU3RyaW5nVGFnXWAgcHJvcGVydHlcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc3ltYm9sLnByb3RvdHlwZS1AQHRvc3RyaW5ndGFnXG5zZXRUb1N0cmluZ1RhZygkU3ltYm9sLCBTWU1CT0wpO1xuXG5oaWRkZW5LZXlzW0hJRERFTl0gPSB0cnVlO1xuIiwidmFyIGRlZmluZVdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZWZpbmUtd2VsbC1rbm93bi1zeW1ib2wnKTtcblxuLy8gYFN5bWJvbC5tYXRjaEFsbGAgd2VsbC1rbm93biBzeW1ib2xcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc3ltYm9sLm1hdGNoYWxsXG5kZWZpbmVXZWxsS25vd25TeW1ib2woJ21hdGNoQWxsJyk7XG4iLCJ2YXIgZGVmaW5lV2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2RlZmluZS13ZWxsLWtub3duLXN5bWJvbCcpO1xuXG4vLyBgU3ltYm9sLm1hdGNoYCB3ZWxsLWtub3duIHN5bWJvbFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zeW1ib2wubWF0Y2hcbmRlZmluZVdlbGxLbm93blN5bWJvbCgnbWF0Y2gnKTtcbiIsInZhciBkZWZpbmVXZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVmaW5lLXdlbGwta25vd24tc3ltYm9sJyk7XG5cbi8vIGBTeW1ib2wucmVwbGFjZWAgd2VsbC1rbm93biBzeW1ib2xcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc3ltYm9sLnJlcGxhY2VcbmRlZmluZVdlbGxLbm93blN5bWJvbCgncmVwbGFjZScpO1xuIiwidmFyIGRlZmluZVdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZWZpbmUtd2VsbC1rbm93bi1zeW1ib2wnKTtcblxuLy8gYFN5bWJvbC5zZWFyY2hgIHdlbGwta25vd24gc3ltYm9sXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXN5bWJvbC5zZWFyY2hcbmRlZmluZVdlbGxLbm93blN5bWJvbCgnc2VhcmNoJyk7XG4iLCJ2YXIgZGVmaW5lV2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2RlZmluZS13ZWxsLWtub3duLXN5bWJvbCcpO1xuXG4vLyBgU3ltYm9sLnNwZWNpZXNgIHdlbGwta25vd24gc3ltYm9sXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXN5bWJvbC5zcGVjaWVzXG5kZWZpbmVXZWxsS25vd25TeW1ib2woJ3NwZWNpZXMnKTtcbiIsInZhciBkZWZpbmVXZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVmaW5lLXdlbGwta25vd24tc3ltYm9sJyk7XG5cbi8vIGBTeW1ib2wuc3BsaXRgIHdlbGwta25vd24gc3ltYm9sXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXN5bWJvbC5zcGxpdFxuZGVmaW5lV2VsbEtub3duU3ltYm9sKCdzcGxpdCcpO1xuIiwidmFyIGRlZmluZVdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZWZpbmUtd2VsbC1rbm93bi1zeW1ib2wnKTtcblxuLy8gYFN5bWJvbC50b1ByaW1pdGl2ZWAgd2VsbC1rbm93biBzeW1ib2xcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc3ltYm9sLnRvcHJpbWl0aXZlXG5kZWZpbmVXZWxsS25vd25TeW1ib2woJ3RvUHJpbWl0aXZlJyk7XG4iLCJ2YXIgZGVmaW5lV2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2RlZmluZS13ZWxsLWtub3duLXN5bWJvbCcpO1xuXG4vLyBgU3ltYm9sLnRvU3RyaW5nVGFnYCB3ZWxsLWtub3duIHN5bWJvbFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zeW1ib2wudG9zdHJpbmd0YWdcbmRlZmluZVdlbGxLbm93blN5bWJvbCgndG9TdHJpbmdUYWcnKTtcbiIsInZhciBkZWZpbmVXZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVmaW5lLXdlbGwta25vd24tc3ltYm9sJyk7XG5cbi8vIGBTeW1ib2wudW5zY29wYWJsZXNgIHdlbGwta25vd24gc3ltYm9sXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXN5bWJvbC51bnNjb3BhYmxlc1xuZGVmaW5lV2VsbEtub3duU3ltYm9sKCd1bnNjb3BhYmxlcycpO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIEFycmF5QnVmZmVyVmlld0NvcmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktYnVmZmVyLXZpZXctY29yZScpO1xudmFyICRjb3B5V2l0aGluID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LWNvcHktd2l0aGluJyk7XG5cbnZhciBhVHlwZWRBcnJheSA9IEFycmF5QnVmZmVyVmlld0NvcmUuYVR5cGVkQXJyYXk7XG52YXIgZXhwb3J0VHlwZWRBcnJheU1ldGhvZCA9IEFycmF5QnVmZmVyVmlld0NvcmUuZXhwb3J0VHlwZWRBcnJheU1ldGhvZDtcblxuLy8gYCVUeXBlZEFycmF5JS5wcm90b3R5cGUuY29weVdpdGhpbmAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLSV0eXBlZGFycmF5JS5wcm90b3R5cGUuY29weXdpdGhpblxuZXhwb3J0VHlwZWRBcnJheU1ldGhvZCgnY29weVdpdGhpbicsIGZ1bmN0aW9uIGNvcHlXaXRoaW4odGFyZ2V0LCBzdGFydCAvKiAsIGVuZCAqLykge1xuICByZXR1cm4gJGNvcHlXaXRoaW4uY2FsbChhVHlwZWRBcnJheSh0aGlzKSwgdGFyZ2V0LCBzdGFydCwgYXJndW1lbnRzLmxlbmd0aCA+IDIgPyBhcmd1bWVudHNbMl0gOiB1bmRlZmluZWQpO1xufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgQXJyYXlCdWZmZXJWaWV3Q29yZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1idWZmZXItdmlldy1jb3JlJyk7XG52YXIgJGV2ZXJ5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LWl0ZXJhdGlvbicpLmV2ZXJ5O1xuXG52YXIgYVR5cGVkQXJyYXkgPSBBcnJheUJ1ZmZlclZpZXdDb3JlLmFUeXBlZEFycmF5O1xudmFyIGV4cG9ydFR5cGVkQXJyYXlNZXRob2QgPSBBcnJheUJ1ZmZlclZpZXdDb3JlLmV4cG9ydFR5cGVkQXJyYXlNZXRob2Q7XG5cbi8vIGAlVHlwZWRBcnJheSUucHJvdG90eXBlLmV2ZXJ5YCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtJXR5cGVkYXJyYXklLnByb3RvdHlwZS5ldmVyeVxuZXhwb3J0VHlwZWRBcnJheU1ldGhvZCgnZXZlcnknLCBmdW5jdGlvbiBldmVyeShjYWxsYmFja2ZuIC8qICwgdGhpc0FyZyAqLykge1xuICByZXR1cm4gJGV2ZXJ5KGFUeXBlZEFycmF5KHRoaXMpLCBjYWxsYmFja2ZuLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBBcnJheUJ1ZmZlclZpZXdDb3JlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LWJ1ZmZlci12aWV3LWNvcmUnKTtcbnZhciAkZmlsbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1maWxsJyk7XG5cbnZhciBhVHlwZWRBcnJheSA9IEFycmF5QnVmZmVyVmlld0NvcmUuYVR5cGVkQXJyYXk7XG52YXIgZXhwb3J0VHlwZWRBcnJheU1ldGhvZCA9IEFycmF5QnVmZmVyVmlld0NvcmUuZXhwb3J0VHlwZWRBcnJheU1ldGhvZDtcblxuLy8gYCVUeXBlZEFycmF5JS5wcm90b3R5cGUuZmlsbGAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLSV0eXBlZGFycmF5JS5wcm90b3R5cGUuZmlsbFxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVudXNlZC12YXJzXG5leHBvcnRUeXBlZEFycmF5TWV0aG9kKCdmaWxsJywgZnVuY3Rpb24gZmlsbCh2YWx1ZSAvKiAsIHN0YXJ0LCBlbmQgKi8pIHtcbiAgcmV0dXJuICRmaWxsLmFwcGx5KGFUeXBlZEFycmF5KHRoaXMpLCBhcmd1bWVudHMpO1xufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgQXJyYXlCdWZmZXJWaWV3Q29yZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1idWZmZXItdmlldy1jb3JlJyk7XG52YXIgJGZpbHRlciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1pdGVyYXRpb24nKS5maWx0ZXI7XG52YXIgc3BlY2llc0NvbnN0cnVjdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NwZWNpZXMtY29uc3RydWN0b3InKTtcblxudmFyIGFUeXBlZEFycmF5ID0gQXJyYXlCdWZmZXJWaWV3Q29yZS5hVHlwZWRBcnJheTtcbnZhciBhVHlwZWRBcnJheUNvbnN0cnVjdG9yID0gQXJyYXlCdWZmZXJWaWV3Q29yZS5hVHlwZWRBcnJheUNvbnN0cnVjdG9yO1xudmFyIGV4cG9ydFR5cGVkQXJyYXlNZXRob2QgPSBBcnJheUJ1ZmZlclZpZXdDb3JlLmV4cG9ydFR5cGVkQXJyYXlNZXRob2Q7XG5cbi8vIGAlVHlwZWRBcnJheSUucHJvdG90eXBlLmZpbHRlcmAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLSV0eXBlZGFycmF5JS5wcm90b3R5cGUuZmlsdGVyXG5leHBvcnRUeXBlZEFycmF5TWV0aG9kKCdmaWx0ZXInLCBmdW5jdGlvbiBmaWx0ZXIoY2FsbGJhY2tmbiAvKiAsIHRoaXNBcmcgKi8pIHtcbiAgdmFyIGxpc3QgPSAkZmlsdGVyKGFUeXBlZEFycmF5KHRoaXMpLCBjYWxsYmFja2ZuLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4gIHZhciBDID0gc3BlY2llc0NvbnN0cnVjdG9yKHRoaXMsIHRoaXMuY29uc3RydWN0b3IpO1xuICB2YXIgaW5kZXggPSAwO1xuICB2YXIgbGVuZ3RoID0gbGlzdC5sZW5ndGg7XG4gIHZhciByZXN1bHQgPSBuZXcgKGFUeXBlZEFycmF5Q29uc3RydWN0b3IoQykpKGxlbmd0aCk7XG4gIHdoaWxlIChsZW5ndGggPiBpbmRleCkgcmVzdWx0W2luZGV4XSA9IGxpc3RbaW5kZXgrK107XG4gIHJldHVybiByZXN1bHQ7XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBBcnJheUJ1ZmZlclZpZXdDb3JlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LWJ1ZmZlci12aWV3LWNvcmUnKTtcbnZhciAkZmluZEluZGV4ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LWl0ZXJhdGlvbicpLmZpbmRJbmRleDtcblxudmFyIGFUeXBlZEFycmF5ID0gQXJyYXlCdWZmZXJWaWV3Q29yZS5hVHlwZWRBcnJheTtcbnZhciBleHBvcnRUeXBlZEFycmF5TWV0aG9kID0gQXJyYXlCdWZmZXJWaWV3Q29yZS5leHBvcnRUeXBlZEFycmF5TWV0aG9kO1xuXG4vLyBgJVR5cGVkQXJyYXklLnByb3RvdHlwZS5maW5kSW5kZXhgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy0ldHlwZWRhcnJheSUucHJvdG90eXBlLmZpbmRpbmRleFxuZXhwb3J0VHlwZWRBcnJheU1ldGhvZCgnZmluZEluZGV4JywgZnVuY3Rpb24gZmluZEluZGV4KHByZWRpY2F0ZSAvKiAsIHRoaXNBcmcgKi8pIHtcbiAgcmV0dXJuICRmaW5kSW5kZXgoYVR5cGVkQXJyYXkodGhpcyksIHByZWRpY2F0ZSwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgQXJyYXlCdWZmZXJWaWV3Q29yZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1idWZmZXItdmlldy1jb3JlJyk7XG52YXIgJGZpbmQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktaXRlcmF0aW9uJykuZmluZDtcblxudmFyIGFUeXBlZEFycmF5ID0gQXJyYXlCdWZmZXJWaWV3Q29yZS5hVHlwZWRBcnJheTtcbnZhciBleHBvcnRUeXBlZEFycmF5TWV0aG9kID0gQXJyYXlCdWZmZXJWaWV3Q29yZS5leHBvcnRUeXBlZEFycmF5TWV0aG9kO1xuXG4vLyBgJVR5cGVkQXJyYXklLnByb3RvdHlwZS5maW5kYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtJXR5cGVkYXJyYXklLnByb3RvdHlwZS5maW5kXG5leHBvcnRUeXBlZEFycmF5TWV0aG9kKCdmaW5kJywgZnVuY3Rpb24gZmluZChwcmVkaWNhdGUgLyogLCB0aGlzQXJnICovKSB7XG4gIHJldHVybiAkZmluZChhVHlwZWRBcnJheSh0aGlzKSwgcHJlZGljYXRlLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG59KTtcbiIsInZhciBjcmVhdGVUeXBlZEFycmF5Q29uc3RydWN0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdHlwZWQtYXJyYXktY29uc3RydWN0b3InKTtcblxuLy8gYEZsb2F0MzJBcnJheWAgY29uc3RydWN0b3Jcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtdHlwZWRhcnJheS1vYmplY3RzXG5jcmVhdGVUeXBlZEFycmF5Q29uc3RydWN0b3IoJ0Zsb2F0MzInLCBmdW5jdGlvbiAoaW5pdCkge1xuICByZXR1cm4gZnVuY3Rpb24gRmxvYXQzMkFycmF5KGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCkge1xuICAgIHJldHVybiBpbml0KHRoaXMsIGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCk7XG4gIH07XG59KTtcbiIsInZhciBjcmVhdGVUeXBlZEFycmF5Q29uc3RydWN0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdHlwZWQtYXJyYXktY29uc3RydWN0b3InKTtcblxuLy8gYEZsb2F0NjRBcnJheWAgY29uc3RydWN0b3Jcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtdHlwZWRhcnJheS1vYmplY3RzXG5jcmVhdGVUeXBlZEFycmF5Q29uc3RydWN0b3IoJ0Zsb2F0NjQnLCBmdW5jdGlvbiAoaW5pdCkge1xuICByZXR1cm4gZnVuY3Rpb24gRmxvYXQ2NEFycmF5KGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCkge1xuICAgIHJldHVybiBpbml0KHRoaXMsIGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCk7XG4gIH07XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBBcnJheUJ1ZmZlclZpZXdDb3JlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LWJ1ZmZlci12aWV3LWNvcmUnKTtcbnZhciAkZm9yRWFjaCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1pdGVyYXRpb24nKS5mb3JFYWNoO1xuXG52YXIgYVR5cGVkQXJyYXkgPSBBcnJheUJ1ZmZlclZpZXdDb3JlLmFUeXBlZEFycmF5O1xudmFyIGV4cG9ydFR5cGVkQXJyYXlNZXRob2QgPSBBcnJheUJ1ZmZlclZpZXdDb3JlLmV4cG9ydFR5cGVkQXJyYXlNZXRob2Q7XG5cbi8vIGAlVHlwZWRBcnJheSUucHJvdG90eXBlLmZvckVhY2hgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy0ldHlwZWRhcnJheSUucHJvdG90eXBlLmZvcmVhY2hcbmV4cG9ydFR5cGVkQXJyYXlNZXRob2QoJ2ZvckVhY2gnLCBmdW5jdGlvbiBmb3JFYWNoKGNhbGxiYWNrZm4gLyogLCB0aGlzQXJnICovKSB7XG4gICRmb3JFYWNoKGFUeXBlZEFycmF5KHRoaXMpLCBjYWxsYmFja2ZuLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBUWVBFRF9BUlJBWVNfQ09OU1RSVUNUT1JTX1JFUVVJUkVTX1dSQVBQRVJTID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3R5cGVkLWFycmF5LWNvbnN0cnVjdG9ycy1yZXF1aXJlLXdyYXBwZXJzJyk7XG52YXIgZXhwb3J0VHlwZWRBcnJheVN0YXRpY01ldGhvZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1idWZmZXItdmlldy1jb3JlJykuZXhwb3J0VHlwZWRBcnJheVN0YXRpY01ldGhvZDtcbnZhciB0eXBlZEFycmF5RnJvbSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90eXBlZC1hcnJheS1mcm9tJyk7XG5cbi8vIGAlVHlwZWRBcnJheSUuZnJvbWAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLSV0eXBlZGFycmF5JS5mcm9tXG5leHBvcnRUeXBlZEFycmF5U3RhdGljTWV0aG9kKCdmcm9tJywgdHlwZWRBcnJheUZyb20sIFRZUEVEX0FSUkFZU19DT05TVFJVQ1RPUlNfUkVRVUlSRVNfV1JBUFBFUlMpO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIEFycmF5QnVmZmVyVmlld0NvcmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktYnVmZmVyLXZpZXctY29yZScpO1xudmFyICRpbmNsdWRlcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1pbmNsdWRlcycpLmluY2x1ZGVzO1xuXG52YXIgYVR5cGVkQXJyYXkgPSBBcnJheUJ1ZmZlclZpZXdDb3JlLmFUeXBlZEFycmF5O1xudmFyIGV4cG9ydFR5cGVkQXJyYXlNZXRob2QgPSBBcnJheUJ1ZmZlclZpZXdDb3JlLmV4cG9ydFR5cGVkQXJyYXlNZXRob2Q7XG5cbi8vIGAlVHlwZWRBcnJheSUucHJvdG90eXBlLmluY2x1ZGVzYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtJXR5cGVkYXJyYXklLnByb3RvdHlwZS5pbmNsdWRlc1xuZXhwb3J0VHlwZWRBcnJheU1ldGhvZCgnaW5jbHVkZXMnLCBmdW5jdGlvbiBpbmNsdWRlcyhzZWFyY2hFbGVtZW50IC8qICwgZnJvbUluZGV4ICovKSB7XG4gIHJldHVybiAkaW5jbHVkZXMoYVR5cGVkQXJyYXkodGhpcyksIHNlYXJjaEVsZW1lbnQsIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIEFycmF5QnVmZmVyVmlld0NvcmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktYnVmZmVyLXZpZXctY29yZScpO1xudmFyICRpbmRleE9mID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LWluY2x1ZGVzJykuaW5kZXhPZjtcblxudmFyIGFUeXBlZEFycmF5ID0gQXJyYXlCdWZmZXJWaWV3Q29yZS5hVHlwZWRBcnJheTtcbnZhciBleHBvcnRUeXBlZEFycmF5TWV0aG9kID0gQXJyYXlCdWZmZXJWaWV3Q29yZS5leHBvcnRUeXBlZEFycmF5TWV0aG9kO1xuXG4vLyBgJVR5cGVkQXJyYXklLnByb3RvdHlwZS5pbmRleE9mYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtJXR5cGVkYXJyYXklLnByb3RvdHlwZS5pbmRleG9mXG5leHBvcnRUeXBlZEFycmF5TWV0aG9kKCdpbmRleE9mJywgZnVuY3Rpb24gaW5kZXhPZihzZWFyY2hFbGVtZW50IC8qICwgZnJvbUluZGV4ICovKSB7XG4gIHJldHVybiAkaW5kZXhPZihhVHlwZWRBcnJheSh0aGlzKSwgc2VhcmNoRWxlbWVudCwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xufSk7XG4iLCJ2YXIgY3JlYXRlVHlwZWRBcnJheUNvbnN0cnVjdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3R5cGVkLWFycmF5LWNvbnN0cnVjdG9yJyk7XG5cbi8vIGBJbnQxNkFycmF5YCBjb25zdHJ1Y3RvclxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy10eXBlZGFycmF5LW9iamVjdHNcbmNyZWF0ZVR5cGVkQXJyYXlDb25zdHJ1Y3RvcignSW50MTYnLCBmdW5jdGlvbiAoaW5pdCkge1xuICByZXR1cm4gZnVuY3Rpb24gSW50MTZBcnJheShkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpIHtcbiAgICByZXR1cm4gaW5pdCh0aGlzLCBkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpO1xuICB9O1xufSk7XG4iLCJ2YXIgY3JlYXRlVHlwZWRBcnJheUNvbnN0cnVjdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3R5cGVkLWFycmF5LWNvbnN0cnVjdG9yJyk7XG5cbi8vIGBJbnQzMkFycmF5YCBjb25zdHJ1Y3RvclxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy10eXBlZGFycmF5LW9iamVjdHNcbmNyZWF0ZVR5cGVkQXJyYXlDb25zdHJ1Y3RvcignSW50MzInLCBmdW5jdGlvbiAoaW5pdCkge1xuICByZXR1cm4gZnVuY3Rpb24gSW50MzJBcnJheShkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpIHtcbiAgICByZXR1cm4gaW5pdCh0aGlzLCBkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpO1xuICB9O1xufSk7XG4iLCJ2YXIgY3JlYXRlVHlwZWRBcnJheUNvbnN0cnVjdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3R5cGVkLWFycmF5LWNvbnN0cnVjdG9yJyk7XG5cbi8vIGBJbnQ4QXJyYXlgIGNvbnN0cnVjdG9yXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXR5cGVkYXJyYXktb2JqZWN0c1xuY3JlYXRlVHlwZWRBcnJheUNvbnN0cnVjdG9yKCdJbnQ4JywgZnVuY3Rpb24gKGluaXQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIEludDhBcnJheShkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpIHtcbiAgICByZXR1cm4gaW5pdCh0aGlzLCBkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpO1xuICB9O1xufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIEFycmF5QnVmZmVyVmlld0NvcmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktYnVmZmVyLXZpZXctY29yZScpO1xudmFyIEFycmF5SXRlcmF0b3JzID0gcmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5hcnJheS5pdGVyYXRvcicpO1xudmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xuXG52YXIgSVRFUkFUT1IgPSB3ZWxsS25vd25TeW1ib2woJ2l0ZXJhdG9yJyk7XG52YXIgVWludDhBcnJheSA9IGdsb2JhbC5VaW50OEFycmF5O1xudmFyIGFycmF5VmFsdWVzID0gQXJyYXlJdGVyYXRvcnMudmFsdWVzO1xudmFyIGFycmF5S2V5cyA9IEFycmF5SXRlcmF0b3JzLmtleXM7XG52YXIgYXJyYXlFbnRyaWVzID0gQXJyYXlJdGVyYXRvcnMuZW50cmllcztcbnZhciBhVHlwZWRBcnJheSA9IEFycmF5QnVmZmVyVmlld0NvcmUuYVR5cGVkQXJyYXk7XG52YXIgZXhwb3J0VHlwZWRBcnJheU1ldGhvZCA9IEFycmF5QnVmZmVyVmlld0NvcmUuZXhwb3J0VHlwZWRBcnJheU1ldGhvZDtcbnZhciBuYXRpdmVUeXBlZEFycmF5SXRlcmF0b3IgPSBVaW50OEFycmF5ICYmIFVpbnQ4QXJyYXkucHJvdG90eXBlW0lURVJBVE9SXTtcblxudmFyIENPUlJFQ1RfSVRFUl9OQU1FID0gISFuYXRpdmVUeXBlZEFycmF5SXRlcmF0b3JcbiAgJiYgKG5hdGl2ZVR5cGVkQXJyYXlJdGVyYXRvci5uYW1lID09ICd2YWx1ZXMnIHx8IG5hdGl2ZVR5cGVkQXJyYXlJdGVyYXRvci5uYW1lID09IHVuZGVmaW5lZCk7XG5cbnZhciB0eXBlZEFycmF5VmFsdWVzID0gZnVuY3Rpb24gdmFsdWVzKCkge1xuICByZXR1cm4gYXJyYXlWYWx1ZXMuY2FsbChhVHlwZWRBcnJheSh0aGlzKSk7XG59O1xuXG4vLyBgJVR5cGVkQXJyYXklLnByb3RvdHlwZS5lbnRyaWVzYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtJXR5cGVkYXJyYXklLnByb3RvdHlwZS5lbnRyaWVzXG5leHBvcnRUeXBlZEFycmF5TWV0aG9kKCdlbnRyaWVzJywgZnVuY3Rpb24gZW50cmllcygpIHtcbiAgcmV0dXJuIGFycmF5RW50cmllcy5jYWxsKGFUeXBlZEFycmF5KHRoaXMpKTtcbn0pO1xuLy8gYCVUeXBlZEFycmF5JS5wcm90b3R5cGUua2V5c2AgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLSV0eXBlZGFycmF5JS5wcm90b3R5cGUua2V5c1xuZXhwb3J0VHlwZWRBcnJheU1ldGhvZCgna2V5cycsIGZ1bmN0aW9uIGtleXMoKSB7XG4gIHJldHVybiBhcnJheUtleXMuY2FsbChhVHlwZWRBcnJheSh0aGlzKSk7XG59KTtcbi8vIGAlVHlwZWRBcnJheSUucHJvdG90eXBlLnZhbHVlc2AgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLSV0eXBlZGFycmF5JS5wcm90b3R5cGUudmFsdWVzXG5leHBvcnRUeXBlZEFycmF5TWV0aG9kKCd2YWx1ZXMnLCB0eXBlZEFycmF5VmFsdWVzLCAhQ09SUkVDVF9JVEVSX05BTUUpO1xuLy8gYCVUeXBlZEFycmF5JS5wcm90b3R5cGVbQEBpdGVyYXRvcl1gIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy0ldHlwZWRhcnJheSUucHJvdG90eXBlLUBAaXRlcmF0b3JcbmV4cG9ydFR5cGVkQXJyYXlNZXRob2QoSVRFUkFUT1IsIHR5cGVkQXJyYXlWYWx1ZXMsICFDT1JSRUNUX0lURVJfTkFNRSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgQXJyYXlCdWZmZXJWaWV3Q29yZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1idWZmZXItdmlldy1jb3JlJyk7XG5cbnZhciBhVHlwZWRBcnJheSA9IEFycmF5QnVmZmVyVmlld0NvcmUuYVR5cGVkQXJyYXk7XG52YXIgZXhwb3J0VHlwZWRBcnJheU1ldGhvZCA9IEFycmF5QnVmZmVyVmlld0NvcmUuZXhwb3J0VHlwZWRBcnJheU1ldGhvZDtcbnZhciAkam9pbiA9IFtdLmpvaW47XG5cbi8vIGAlVHlwZWRBcnJheSUucHJvdG90eXBlLmpvaW5gIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy0ldHlwZWRhcnJheSUucHJvdG90eXBlLmpvaW5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bnVzZWQtdmFyc1xuZXhwb3J0VHlwZWRBcnJheU1ldGhvZCgnam9pbicsIGZ1bmN0aW9uIGpvaW4oc2VwYXJhdG9yKSB7XG4gIHJldHVybiAkam9pbi5hcHBseShhVHlwZWRBcnJheSh0aGlzKSwgYXJndW1lbnRzKTtcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIEFycmF5QnVmZmVyVmlld0NvcmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktYnVmZmVyLXZpZXctY29yZScpO1xudmFyICRsYXN0SW5kZXhPZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1sYXN0LWluZGV4LW9mJyk7XG5cbnZhciBhVHlwZWRBcnJheSA9IEFycmF5QnVmZmVyVmlld0NvcmUuYVR5cGVkQXJyYXk7XG52YXIgZXhwb3J0VHlwZWRBcnJheU1ldGhvZCA9IEFycmF5QnVmZmVyVmlld0NvcmUuZXhwb3J0VHlwZWRBcnJheU1ldGhvZDtcblxuLy8gYCVUeXBlZEFycmF5JS5wcm90b3R5cGUubGFzdEluZGV4T2ZgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy0ldHlwZWRhcnJheSUucHJvdG90eXBlLmxhc3RpbmRleG9mXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW51c2VkLXZhcnNcbmV4cG9ydFR5cGVkQXJyYXlNZXRob2QoJ2xhc3RJbmRleE9mJywgZnVuY3Rpb24gbGFzdEluZGV4T2Yoc2VhcmNoRWxlbWVudCAvKiAsIGZyb21JbmRleCAqLykge1xuICByZXR1cm4gJGxhc3RJbmRleE9mLmFwcGx5KGFUeXBlZEFycmF5KHRoaXMpLCBhcmd1bWVudHMpO1xufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgQXJyYXlCdWZmZXJWaWV3Q29yZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1idWZmZXItdmlldy1jb3JlJyk7XG52YXIgJG1hcCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1pdGVyYXRpb24nKS5tYXA7XG52YXIgc3BlY2llc0NvbnN0cnVjdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NwZWNpZXMtY29uc3RydWN0b3InKTtcblxudmFyIGFUeXBlZEFycmF5ID0gQXJyYXlCdWZmZXJWaWV3Q29yZS5hVHlwZWRBcnJheTtcbnZhciBhVHlwZWRBcnJheUNvbnN0cnVjdG9yID0gQXJyYXlCdWZmZXJWaWV3Q29yZS5hVHlwZWRBcnJheUNvbnN0cnVjdG9yO1xudmFyIGV4cG9ydFR5cGVkQXJyYXlNZXRob2QgPSBBcnJheUJ1ZmZlclZpZXdDb3JlLmV4cG9ydFR5cGVkQXJyYXlNZXRob2Q7XG5cbi8vIGAlVHlwZWRBcnJheSUucHJvdG90eXBlLm1hcGAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLSV0eXBlZGFycmF5JS5wcm90b3R5cGUubWFwXG5leHBvcnRUeXBlZEFycmF5TWV0aG9kKCdtYXAnLCBmdW5jdGlvbiBtYXAobWFwZm4gLyogLCB0aGlzQXJnICovKSB7XG4gIHJldHVybiAkbWFwKGFUeXBlZEFycmF5KHRoaXMpLCBtYXBmbiwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQsIGZ1bmN0aW9uIChPLCBsZW5ndGgpIHtcbiAgICByZXR1cm4gbmV3IChhVHlwZWRBcnJheUNvbnN0cnVjdG9yKHNwZWNpZXNDb25zdHJ1Y3RvcihPLCBPLmNvbnN0cnVjdG9yKSkpKGxlbmd0aCk7XG4gIH0pO1xufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgQXJyYXlCdWZmZXJWaWV3Q29yZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1idWZmZXItdmlldy1jb3JlJyk7XG52YXIgVFlQRURfQVJSQVlTX0NPTlNUUlVDVE9SU19SRVFVSVJFU19XUkFQUEVSUyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90eXBlZC1hcnJheS1jb25zdHJ1Y3RvcnMtcmVxdWlyZS13cmFwcGVycycpO1xuXG52YXIgYVR5cGVkQXJyYXlDb25zdHJ1Y3RvciA9IEFycmF5QnVmZmVyVmlld0NvcmUuYVR5cGVkQXJyYXlDb25zdHJ1Y3RvcjtcbnZhciBleHBvcnRUeXBlZEFycmF5U3RhdGljTWV0aG9kID0gQXJyYXlCdWZmZXJWaWV3Q29yZS5leHBvcnRUeXBlZEFycmF5U3RhdGljTWV0aG9kO1xuXG4vLyBgJVR5cGVkQXJyYXklLm9mYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtJXR5cGVkYXJyYXklLm9mXG5leHBvcnRUeXBlZEFycmF5U3RhdGljTWV0aG9kKCdvZicsIGZ1bmN0aW9uIG9mKC8qIC4uLml0ZW1zICovKSB7XG4gIHZhciBpbmRleCA9IDA7XG4gIHZhciBsZW5ndGggPSBhcmd1bWVudHMubGVuZ3RoO1xuICB2YXIgcmVzdWx0ID0gbmV3IChhVHlwZWRBcnJheUNvbnN0cnVjdG9yKHRoaXMpKShsZW5ndGgpO1xuICB3aGlsZSAobGVuZ3RoID4gaW5kZXgpIHJlc3VsdFtpbmRleF0gPSBhcmd1bWVudHNbaW5kZXgrK107XG4gIHJldHVybiByZXN1bHQ7XG59LCBUWVBFRF9BUlJBWVNfQ09OU1RSVUNUT1JTX1JFUVVJUkVTX1dSQVBQRVJTKTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBBcnJheUJ1ZmZlclZpZXdDb3JlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LWJ1ZmZlci12aWV3LWNvcmUnKTtcbnZhciAkcmVkdWNlUmlnaHQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktcmVkdWNlJykucmlnaHQ7XG5cbnZhciBhVHlwZWRBcnJheSA9IEFycmF5QnVmZmVyVmlld0NvcmUuYVR5cGVkQXJyYXk7XG52YXIgZXhwb3J0VHlwZWRBcnJheU1ldGhvZCA9IEFycmF5QnVmZmVyVmlld0NvcmUuZXhwb3J0VHlwZWRBcnJheU1ldGhvZDtcblxuLy8gYCVUeXBlZEFycmF5JS5wcm90b3R5cGUucmVkdWNlUmljaHRgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy0ldHlwZWRhcnJheSUucHJvdG90eXBlLnJlZHVjZXJpZ2h0XG5leHBvcnRUeXBlZEFycmF5TWV0aG9kKCdyZWR1Y2VSaWdodCcsIGZ1bmN0aW9uIHJlZHVjZVJpZ2h0KGNhbGxiYWNrZm4gLyogLCBpbml0aWFsVmFsdWUgKi8pIHtcbiAgcmV0dXJuICRyZWR1Y2VSaWdodChhVHlwZWRBcnJheSh0aGlzKSwgY2FsbGJhY2tmbiwgYXJndW1lbnRzLmxlbmd0aCwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgQXJyYXlCdWZmZXJWaWV3Q29yZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1idWZmZXItdmlldy1jb3JlJyk7XG52YXIgJHJlZHVjZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1yZWR1Y2UnKS5sZWZ0O1xuXG52YXIgYVR5cGVkQXJyYXkgPSBBcnJheUJ1ZmZlclZpZXdDb3JlLmFUeXBlZEFycmF5O1xudmFyIGV4cG9ydFR5cGVkQXJyYXlNZXRob2QgPSBBcnJheUJ1ZmZlclZpZXdDb3JlLmV4cG9ydFR5cGVkQXJyYXlNZXRob2Q7XG5cbi8vIGAlVHlwZWRBcnJheSUucHJvdG90eXBlLnJlZHVjZWAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLSV0eXBlZGFycmF5JS5wcm90b3R5cGUucmVkdWNlXG5leHBvcnRUeXBlZEFycmF5TWV0aG9kKCdyZWR1Y2UnLCBmdW5jdGlvbiByZWR1Y2UoY2FsbGJhY2tmbiAvKiAsIGluaXRpYWxWYWx1ZSAqLykge1xuICByZXR1cm4gJHJlZHVjZShhVHlwZWRBcnJheSh0aGlzKSwgY2FsbGJhY2tmbiwgYXJndW1lbnRzLmxlbmd0aCwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgQXJyYXlCdWZmZXJWaWV3Q29yZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1idWZmZXItdmlldy1jb3JlJyk7XG5cbnZhciBhVHlwZWRBcnJheSA9IEFycmF5QnVmZmVyVmlld0NvcmUuYVR5cGVkQXJyYXk7XG52YXIgZXhwb3J0VHlwZWRBcnJheU1ldGhvZCA9IEFycmF5QnVmZmVyVmlld0NvcmUuZXhwb3J0VHlwZWRBcnJheU1ldGhvZDtcbnZhciBmbG9vciA9IE1hdGguZmxvb3I7XG5cbi8vIGAlVHlwZWRBcnJheSUucHJvdG90eXBlLnJldmVyc2VgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy0ldHlwZWRhcnJheSUucHJvdG90eXBlLnJldmVyc2VcbmV4cG9ydFR5cGVkQXJyYXlNZXRob2QoJ3JldmVyc2UnLCBmdW5jdGlvbiByZXZlcnNlKCkge1xuICB2YXIgdGhhdCA9IHRoaXM7XG4gIHZhciBsZW5ndGggPSBhVHlwZWRBcnJheSh0aGF0KS5sZW5ndGg7XG4gIHZhciBtaWRkbGUgPSBmbG9vcihsZW5ndGggLyAyKTtcbiAgdmFyIGluZGV4ID0gMDtcbiAgdmFyIHZhbHVlO1xuICB3aGlsZSAoaW5kZXggPCBtaWRkbGUpIHtcbiAgICB2YWx1ZSA9IHRoYXRbaW5kZXhdO1xuICAgIHRoYXRbaW5kZXgrK10gPSB0aGF0Wy0tbGVuZ3RoXTtcbiAgICB0aGF0W2xlbmd0aF0gPSB2YWx1ZTtcbiAgfSByZXR1cm4gdGhhdDtcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIEFycmF5QnVmZmVyVmlld0NvcmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktYnVmZmVyLXZpZXctY29yZScpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWxlbmd0aCcpO1xudmFyIHRvT2Zmc2V0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLW9mZnNldCcpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLW9iamVjdCcpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG5cbnZhciBhVHlwZWRBcnJheSA9IEFycmF5QnVmZmVyVmlld0NvcmUuYVR5cGVkQXJyYXk7XG52YXIgZXhwb3J0VHlwZWRBcnJheU1ldGhvZCA9IEFycmF5QnVmZmVyVmlld0NvcmUuZXhwb3J0VHlwZWRBcnJheU1ldGhvZDtcblxudmFyIEZPUkNFRCA9IGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVuZGVmXG4gIG5ldyBJbnQ4QXJyYXkoMSkuc2V0KHt9KTtcbn0pO1xuXG4vLyBgJVR5cGVkQXJyYXklLnByb3RvdHlwZS5zZXRgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy0ldHlwZWRhcnJheSUucHJvdG90eXBlLnNldFxuZXhwb3J0VHlwZWRBcnJheU1ldGhvZCgnc2V0JywgZnVuY3Rpb24gc2V0KGFycmF5TGlrZSAvKiAsIG9mZnNldCAqLykge1xuICBhVHlwZWRBcnJheSh0aGlzKTtcbiAgdmFyIG9mZnNldCA9IHRvT2Zmc2V0KGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkLCAxKTtcbiAgdmFyIGxlbmd0aCA9IHRoaXMubGVuZ3RoO1xuICB2YXIgc3JjID0gdG9PYmplY3QoYXJyYXlMaWtlKTtcbiAgdmFyIGxlbiA9IHRvTGVuZ3RoKHNyYy5sZW5ndGgpO1xuICB2YXIgaW5kZXggPSAwO1xuICBpZiAobGVuICsgb2Zmc2V0ID4gbGVuZ3RoKSB0aHJvdyBSYW5nZUVycm9yKCdXcm9uZyBsZW5ndGgnKTtcbiAgd2hpbGUgKGluZGV4IDwgbGVuKSB0aGlzW29mZnNldCArIGluZGV4XSA9IHNyY1tpbmRleCsrXTtcbn0sIEZPUkNFRCk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgQXJyYXlCdWZmZXJWaWV3Q29yZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1idWZmZXItdmlldy1jb3JlJyk7XG52YXIgc3BlY2llc0NvbnN0cnVjdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NwZWNpZXMtY29uc3RydWN0b3InKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xuXG52YXIgYVR5cGVkQXJyYXkgPSBBcnJheUJ1ZmZlclZpZXdDb3JlLmFUeXBlZEFycmF5O1xudmFyIGFUeXBlZEFycmF5Q29uc3RydWN0b3IgPSBBcnJheUJ1ZmZlclZpZXdDb3JlLmFUeXBlZEFycmF5Q29uc3RydWN0b3I7XG52YXIgZXhwb3J0VHlwZWRBcnJheU1ldGhvZCA9IEFycmF5QnVmZmVyVmlld0NvcmUuZXhwb3J0VHlwZWRBcnJheU1ldGhvZDtcbnZhciAkc2xpY2UgPSBbXS5zbGljZTtcblxudmFyIEZPUkNFRCA9IGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVuZGVmXG4gIG5ldyBJbnQ4QXJyYXkoMSkuc2xpY2UoKTtcbn0pO1xuXG4vLyBgJVR5cGVkQXJyYXklLnByb3RvdHlwZS5zbGljZWAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLSV0eXBlZGFycmF5JS5wcm90b3R5cGUuc2xpY2VcbmV4cG9ydFR5cGVkQXJyYXlNZXRob2QoJ3NsaWNlJywgZnVuY3Rpb24gc2xpY2Uoc3RhcnQsIGVuZCkge1xuICB2YXIgbGlzdCA9ICRzbGljZS5jYWxsKGFUeXBlZEFycmF5KHRoaXMpLCBzdGFydCwgZW5kKTtcbiAgdmFyIEMgPSBzcGVjaWVzQ29uc3RydWN0b3IodGhpcywgdGhpcy5jb25zdHJ1Y3Rvcik7XG4gIHZhciBpbmRleCA9IDA7XG4gIHZhciBsZW5ndGggPSBsaXN0Lmxlbmd0aDtcbiAgdmFyIHJlc3VsdCA9IG5ldyAoYVR5cGVkQXJyYXlDb25zdHJ1Y3RvcihDKSkobGVuZ3RoKTtcbiAgd2hpbGUgKGxlbmd0aCA+IGluZGV4KSByZXN1bHRbaW5kZXhdID0gbGlzdFtpbmRleCsrXTtcbiAgcmV0dXJuIHJlc3VsdDtcbn0sIEZPUkNFRCk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgQXJyYXlCdWZmZXJWaWV3Q29yZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1idWZmZXItdmlldy1jb3JlJyk7XG52YXIgJHNvbWUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktaXRlcmF0aW9uJykuc29tZTtcblxudmFyIGFUeXBlZEFycmF5ID0gQXJyYXlCdWZmZXJWaWV3Q29yZS5hVHlwZWRBcnJheTtcbnZhciBleHBvcnRUeXBlZEFycmF5TWV0aG9kID0gQXJyYXlCdWZmZXJWaWV3Q29yZS5leHBvcnRUeXBlZEFycmF5TWV0aG9kO1xuXG4vLyBgJVR5cGVkQXJyYXklLnByb3RvdHlwZS5zb21lYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtJXR5cGVkYXJyYXklLnByb3RvdHlwZS5zb21lXG5leHBvcnRUeXBlZEFycmF5TWV0aG9kKCdzb21lJywgZnVuY3Rpb24gc29tZShjYWxsYmFja2ZuIC8qICwgdGhpc0FyZyAqLykge1xuICByZXR1cm4gJHNvbWUoYVR5cGVkQXJyYXkodGhpcyksIGNhbGxiYWNrZm4sIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIEFycmF5QnVmZmVyVmlld0NvcmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktYnVmZmVyLXZpZXctY29yZScpO1xuXG52YXIgYVR5cGVkQXJyYXkgPSBBcnJheUJ1ZmZlclZpZXdDb3JlLmFUeXBlZEFycmF5O1xudmFyIGV4cG9ydFR5cGVkQXJyYXlNZXRob2QgPSBBcnJheUJ1ZmZlclZpZXdDb3JlLmV4cG9ydFR5cGVkQXJyYXlNZXRob2Q7XG52YXIgJHNvcnQgPSBbXS5zb3J0O1xuXG4vLyBgJVR5cGVkQXJyYXklLnByb3RvdHlwZS5zb3J0YCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtJXR5cGVkYXJyYXklLnByb3RvdHlwZS5zb3J0XG5leHBvcnRUeXBlZEFycmF5TWV0aG9kKCdzb3J0JywgZnVuY3Rpb24gc29ydChjb21wYXJlZm4pIHtcbiAgcmV0dXJuICRzb3J0LmNhbGwoYVR5cGVkQXJyYXkodGhpcyksIGNvbXBhcmVmbik7XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBBcnJheUJ1ZmZlclZpZXdDb3JlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LWJ1ZmZlci12aWV3LWNvcmUnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1sZW5ndGgnKTtcbnZhciB0b0Fic29sdXRlSW5kZXggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tYWJzb2x1dGUtaW5kZXgnKTtcbnZhciBzcGVjaWVzQ29uc3RydWN0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc3BlY2llcy1jb25zdHJ1Y3RvcicpO1xuXG52YXIgYVR5cGVkQXJyYXkgPSBBcnJheUJ1ZmZlclZpZXdDb3JlLmFUeXBlZEFycmF5O1xudmFyIGV4cG9ydFR5cGVkQXJyYXlNZXRob2QgPSBBcnJheUJ1ZmZlclZpZXdDb3JlLmV4cG9ydFR5cGVkQXJyYXlNZXRob2Q7XG5cbi8vIGAlVHlwZWRBcnJheSUucHJvdG90eXBlLnN1YmFycmF5YCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtJXR5cGVkYXJyYXklLnByb3RvdHlwZS5zdWJhcnJheVxuZXhwb3J0VHlwZWRBcnJheU1ldGhvZCgnc3ViYXJyYXknLCBmdW5jdGlvbiBzdWJhcnJheShiZWdpbiwgZW5kKSB7XG4gIHZhciBPID0gYVR5cGVkQXJyYXkodGhpcyk7XG4gIHZhciBsZW5ndGggPSBPLmxlbmd0aDtcbiAgdmFyIGJlZ2luSW5kZXggPSB0b0Fic29sdXRlSW5kZXgoYmVnaW4sIGxlbmd0aCk7XG4gIHJldHVybiBuZXcgKHNwZWNpZXNDb25zdHJ1Y3RvcihPLCBPLmNvbnN0cnVjdG9yKSkoXG4gICAgTy5idWZmZXIsXG4gICAgTy5ieXRlT2Zmc2V0ICsgYmVnaW5JbmRleCAqIE8uQllURVNfUEVSX0VMRU1FTlQsXG4gICAgdG9MZW5ndGgoKGVuZCA9PT0gdW5kZWZpbmVkID8gbGVuZ3RoIDogdG9BYnNvbHV0ZUluZGV4KGVuZCwgbGVuZ3RoKSkgLSBiZWdpbkluZGV4KVxuICApO1xufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIEFycmF5QnVmZmVyVmlld0NvcmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktYnVmZmVyLXZpZXctY29yZScpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG5cbnZhciBJbnQ4QXJyYXkgPSBnbG9iYWwuSW50OEFycmF5O1xudmFyIGFUeXBlZEFycmF5ID0gQXJyYXlCdWZmZXJWaWV3Q29yZS5hVHlwZWRBcnJheTtcbnZhciBleHBvcnRUeXBlZEFycmF5TWV0aG9kID0gQXJyYXlCdWZmZXJWaWV3Q29yZS5leHBvcnRUeXBlZEFycmF5TWV0aG9kO1xudmFyICR0b0xvY2FsZVN0cmluZyA9IFtdLnRvTG9jYWxlU3RyaW5nO1xudmFyICRzbGljZSA9IFtdLnNsaWNlO1xuXG4vLyBpT1MgU2FmYXJpIDYueCBmYWlscyBoZXJlXG52YXIgVE9fTE9DQUxFX1NUUklOR19CVUcgPSAhIUludDhBcnJheSAmJiBmYWlscyhmdW5jdGlvbiAoKSB7XG4gICR0b0xvY2FsZVN0cmluZy5jYWxsKG5ldyBJbnQ4QXJyYXkoMSkpO1xufSk7XG5cbnZhciBGT1JDRUQgPSBmYWlscyhmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBbMSwgMl0udG9Mb2NhbGVTdHJpbmcoKSAhPSBuZXcgSW50OEFycmF5KFsxLCAyXSkudG9Mb2NhbGVTdHJpbmcoKTtcbn0pIHx8ICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gIEludDhBcnJheS5wcm90b3R5cGUudG9Mb2NhbGVTdHJpbmcuY2FsbChbMSwgMl0pO1xufSk7XG5cbi8vIGAlVHlwZWRBcnJheSUucHJvdG90eXBlLnRvTG9jYWxlU3RyaW5nYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtJXR5cGVkYXJyYXklLnByb3RvdHlwZS50b2xvY2FsZXN0cmluZ1xuZXhwb3J0VHlwZWRBcnJheU1ldGhvZCgndG9Mb2NhbGVTdHJpbmcnLCBmdW5jdGlvbiB0b0xvY2FsZVN0cmluZygpIHtcbiAgcmV0dXJuICR0b0xvY2FsZVN0cmluZy5hcHBseShUT19MT0NBTEVfU1RSSU5HX0JVRyA/ICRzbGljZS5jYWxsKGFUeXBlZEFycmF5KHRoaXMpKSA6IGFUeXBlZEFycmF5KHRoaXMpLCBhcmd1bWVudHMpO1xufSwgRk9SQ0VEKTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBleHBvcnRUeXBlZEFycmF5TWV0aG9kID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LWJ1ZmZlci12aWV3LWNvcmUnKS5leHBvcnRUeXBlZEFycmF5TWV0aG9kO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xuXG52YXIgVWludDhBcnJheSA9IGdsb2JhbC5VaW50OEFycmF5O1xudmFyIFVpbnQ4QXJyYXlQcm90b3R5cGUgPSBVaW50OEFycmF5ICYmIFVpbnQ4QXJyYXkucHJvdG90eXBlIHx8IHt9O1xudmFyIGFycmF5VG9TdHJpbmcgPSBbXS50b1N0cmluZztcbnZhciBhcnJheUpvaW4gPSBbXS5qb2luO1xuXG5pZiAoZmFpbHMoZnVuY3Rpb24gKCkgeyBhcnJheVRvU3RyaW5nLmNhbGwoe30pOyB9KSkge1xuICBhcnJheVRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgcmV0dXJuIGFycmF5Sm9pbi5jYWxsKHRoaXMpO1xuICB9O1xufVxuXG52YXIgSVNfTk9UX0FSUkFZX01FVEhPRCA9IFVpbnQ4QXJyYXlQcm90b3R5cGUudG9TdHJpbmcgIT0gYXJyYXlUb1N0cmluZztcblxuLy8gYCVUeXBlZEFycmF5JS5wcm90b3R5cGUudG9TdHJpbmdgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy0ldHlwZWRhcnJheSUucHJvdG90eXBlLnRvc3RyaW5nXG5leHBvcnRUeXBlZEFycmF5TWV0aG9kKCd0b1N0cmluZycsIGFycmF5VG9TdHJpbmcsIElTX05PVF9BUlJBWV9NRVRIT0QpO1xuIiwidmFyIGNyZWF0ZVR5cGVkQXJyYXlDb25zdHJ1Y3RvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90eXBlZC1hcnJheS1jb25zdHJ1Y3RvcicpO1xuXG4vLyBgVWludDE2QXJyYXlgIGNvbnN0cnVjdG9yXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXR5cGVkYXJyYXktb2JqZWN0c1xuY3JlYXRlVHlwZWRBcnJheUNvbnN0cnVjdG9yKCdVaW50MTYnLCBmdW5jdGlvbiAoaW5pdCkge1xuICByZXR1cm4gZnVuY3Rpb24gVWludDE2QXJyYXkoZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKSB7XG4gICAgcmV0dXJuIGluaXQodGhpcywgZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKTtcbiAgfTtcbn0pO1xuIiwidmFyIGNyZWF0ZVR5cGVkQXJyYXlDb25zdHJ1Y3RvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90eXBlZC1hcnJheS1jb25zdHJ1Y3RvcicpO1xuXG4vLyBgVWludDMyQXJyYXlgIGNvbnN0cnVjdG9yXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXR5cGVkYXJyYXktb2JqZWN0c1xuY3JlYXRlVHlwZWRBcnJheUNvbnN0cnVjdG9yKCdVaW50MzInLCBmdW5jdGlvbiAoaW5pdCkge1xuICByZXR1cm4gZnVuY3Rpb24gVWludDMyQXJyYXkoZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKSB7XG4gICAgcmV0dXJuIGluaXQodGhpcywgZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKTtcbiAgfTtcbn0pO1xuIiwidmFyIGNyZWF0ZVR5cGVkQXJyYXlDb25zdHJ1Y3RvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90eXBlZC1hcnJheS1jb25zdHJ1Y3RvcicpO1xuXG4vLyBgVWludDhBcnJheWAgY29uc3RydWN0b3Jcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtdHlwZWRhcnJheS1vYmplY3RzXG5jcmVhdGVUeXBlZEFycmF5Q29uc3RydWN0b3IoJ1VpbnQ4JywgZnVuY3Rpb24gKGluaXQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIFVpbnQ4QXJyYXkoZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKSB7XG4gICAgcmV0dXJuIGluaXQodGhpcywgZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKTtcbiAgfTtcbn0pO1xuIiwidmFyIGNyZWF0ZVR5cGVkQXJyYXlDb25zdHJ1Y3RvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90eXBlZC1hcnJheS1jb25zdHJ1Y3RvcicpO1xuXG4vLyBgVWludDhDbGFtcGVkQXJyYXlgIGNvbnN0cnVjdG9yXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXR5cGVkYXJyYXktb2JqZWN0c1xuY3JlYXRlVHlwZWRBcnJheUNvbnN0cnVjdG9yKCdVaW50OCcsIGZ1bmN0aW9uIChpbml0KSB7XG4gIHJldHVybiBmdW5jdGlvbiBVaW50OENsYW1wZWRBcnJheShkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpIHtcbiAgICByZXR1cm4gaW5pdCh0aGlzLCBkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpO1xuICB9O1xufSwgdHJ1ZSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIHJlZGVmaW5lQWxsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlZGVmaW5lLWFsbCcpO1xudmFyIEludGVybmFsTWV0YWRhdGFNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaW50ZXJuYWwtbWV0YWRhdGEnKTtcbnZhciBjb2xsZWN0aW9uID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NvbGxlY3Rpb24nKTtcbnZhciBjb2xsZWN0aW9uV2VhayA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jb2xsZWN0aW9uLXdlYWsnKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1vYmplY3QnKTtcbnZhciBlbmZvcmNlSXRlcm5hbFN0YXRlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ludGVybmFsLXN0YXRlJykuZW5mb3JjZTtcbnZhciBOQVRJVkVfV0VBS19NQVAgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvbmF0aXZlLXdlYWstbWFwJyk7XG5cbnZhciBJU19JRTExID0gIWdsb2JhbC5BY3RpdmVYT2JqZWN0ICYmICdBY3RpdmVYT2JqZWN0JyBpbiBnbG9iYWw7XG52YXIgaXNFeHRlbnNpYmxlID0gT2JqZWN0LmlzRXh0ZW5zaWJsZTtcbnZhciBJbnRlcm5hbFdlYWtNYXA7XG5cbnZhciB3cmFwcGVyID0gZnVuY3Rpb24gKGluaXQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIFdlYWtNYXAoKSB7XG4gICAgcmV0dXJuIGluaXQodGhpcywgYXJndW1lbnRzLmxlbmd0aCA/IGFyZ3VtZW50c1swXSA6IHVuZGVmaW5lZCk7XG4gIH07XG59O1xuXG4vLyBgV2Vha01hcGAgY29uc3RydWN0b3Jcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtd2Vha21hcC1jb25zdHJ1Y3RvclxudmFyICRXZWFrTWFwID0gbW9kdWxlLmV4cG9ydHMgPSBjb2xsZWN0aW9uKCdXZWFrTWFwJywgd3JhcHBlciwgY29sbGVjdGlvbldlYWspO1xuXG4vLyBJRTExIFdlYWtNYXAgZnJvemVuIGtleXMgZml4XG4vLyBXZSBjYW4ndCB1c2UgZmVhdHVyZSBkZXRlY3Rpb24gYmVjYXVzZSBpdCBjcmFzaCBzb21lIG9sZCBJRSBidWlsZHNcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS96bG9pcm9jay9jb3JlLWpzL2lzc3Vlcy80ODVcbmlmIChOQVRJVkVfV0VBS19NQVAgJiYgSVNfSUUxMSkge1xuICBJbnRlcm5hbFdlYWtNYXAgPSBjb2xsZWN0aW9uV2Vhay5nZXRDb25zdHJ1Y3Rvcih3cmFwcGVyLCAnV2Vha01hcCcsIHRydWUpO1xuICBJbnRlcm5hbE1ldGFkYXRhTW9kdWxlLlJFUVVJUkVEID0gdHJ1ZTtcbiAgdmFyIFdlYWtNYXBQcm90b3R5cGUgPSAkV2Vha01hcC5wcm90b3R5cGU7XG4gIHZhciBuYXRpdmVEZWxldGUgPSBXZWFrTWFwUHJvdG90eXBlWydkZWxldGUnXTtcbiAgdmFyIG5hdGl2ZUhhcyA9IFdlYWtNYXBQcm90b3R5cGUuaGFzO1xuICB2YXIgbmF0aXZlR2V0ID0gV2Vha01hcFByb3RvdHlwZS5nZXQ7XG4gIHZhciBuYXRpdmVTZXQgPSBXZWFrTWFwUHJvdG90eXBlLnNldDtcbiAgcmVkZWZpbmVBbGwoV2Vha01hcFByb3RvdHlwZSwge1xuICAgICdkZWxldGUnOiBmdW5jdGlvbiAoa2V5KSB7XG4gICAgICBpZiAoaXNPYmplY3Qoa2V5KSAmJiAhaXNFeHRlbnNpYmxlKGtleSkpIHtcbiAgICAgICAgdmFyIHN0YXRlID0gZW5mb3JjZUl0ZXJuYWxTdGF0ZSh0aGlzKTtcbiAgICAgICAgaWYgKCFzdGF0ZS5mcm96ZW4pIHN0YXRlLmZyb3plbiA9IG5ldyBJbnRlcm5hbFdlYWtNYXAoKTtcbiAgICAgICAgcmV0dXJuIG5hdGl2ZURlbGV0ZS5jYWxsKHRoaXMsIGtleSkgfHwgc3RhdGUuZnJvemVuWydkZWxldGUnXShrZXkpO1xuICAgICAgfSByZXR1cm4gbmF0aXZlRGVsZXRlLmNhbGwodGhpcywga2V5KTtcbiAgICB9LFxuICAgIGhhczogZnVuY3Rpb24gaGFzKGtleSkge1xuICAgICAgaWYgKGlzT2JqZWN0KGtleSkgJiYgIWlzRXh0ZW5zaWJsZShrZXkpKSB7XG4gICAgICAgIHZhciBzdGF0ZSA9IGVuZm9yY2VJdGVybmFsU3RhdGUodGhpcyk7XG4gICAgICAgIGlmICghc3RhdGUuZnJvemVuKSBzdGF0ZS5mcm96ZW4gPSBuZXcgSW50ZXJuYWxXZWFrTWFwKCk7XG4gICAgICAgIHJldHVybiBuYXRpdmVIYXMuY2FsbCh0aGlzLCBrZXkpIHx8IHN0YXRlLmZyb3plbi5oYXMoa2V5KTtcbiAgICAgIH0gcmV0dXJuIG5hdGl2ZUhhcy5jYWxsKHRoaXMsIGtleSk7XG4gICAgfSxcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldChrZXkpIHtcbiAgICAgIGlmIChpc09iamVjdChrZXkpICYmICFpc0V4dGVuc2libGUoa2V5KSkge1xuICAgICAgICB2YXIgc3RhdGUgPSBlbmZvcmNlSXRlcm5hbFN0YXRlKHRoaXMpO1xuICAgICAgICBpZiAoIXN0YXRlLmZyb3plbikgc3RhdGUuZnJvemVuID0gbmV3IEludGVybmFsV2Vha01hcCgpO1xuICAgICAgICByZXR1cm4gbmF0aXZlSGFzLmNhbGwodGhpcywga2V5KSA/IG5hdGl2ZUdldC5jYWxsKHRoaXMsIGtleSkgOiBzdGF0ZS5mcm96ZW4uZ2V0KGtleSk7XG4gICAgICB9IHJldHVybiBuYXRpdmVHZXQuY2FsbCh0aGlzLCBrZXkpO1xuICAgIH0sXG4gICAgc2V0OiBmdW5jdGlvbiBzZXQoa2V5LCB2YWx1ZSkge1xuICAgICAgaWYgKGlzT2JqZWN0KGtleSkgJiYgIWlzRXh0ZW5zaWJsZShrZXkpKSB7XG4gICAgICAgIHZhciBzdGF0ZSA9IGVuZm9yY2VJdGVybmFsU3RhdGUodGhpcyk7XG4gICAgICAgIGlmICghc3RhdGUuZnJvemVuKSBzdGF0ZS5mcm96ZW4gPSBuZXcgSW50ZXJuYWxXZWFrTWFwKCk7XG4gICAgICAgIG5hdGl2ZUhhcy5jYWxsKHRoaXMsIGtleSkgPyBuYXRpdmVTZXQuY2FsbCh0aGlzLCBrZXksIHZhbHVlKSA6IHN0YXRlLmZyb3plbi5zZXQoa2V5LCB2YWx1ZSk7XG4gICAgICB9IGVsc2UgbmF0aXZlU2V0LmNhbGwodGhpcywga2V5LCB2YWx1ZSk7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gIH0pO1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGNvbGxlY3Rpb24gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY29sbGVjdGlvbicpO1xudmFyIGNvbGxlY3Rpb25XZWFrID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NvbGxlY3Rpb24td2VhaycpO1xuXG4vLyBgV2Vha1NldGAgY29uc3RydWN0b3Jcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtd2Vha3NldC1jb25zdHJ1Y3RvclxuY29sbGVjdGlvbignV2Vha1NldCcsIGZ1bmN0aW9uIChpbml0KSB7XG4gIHJldHVybiBmdW5jdGlvbiBXZWFrU2V0KCkgeyByZXR1cm4gaW5pdCh0aGlzLCBhcmd1bWVudHMubGVuZ3RoID8gYXJndW1lbnRzWzBdIDogdW5kZWZpbmVkKTsgfTtcbn0sIGNvbGxlY3Rpb25XZWFrKTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgRE9NSXRlcmFibGVzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2RvbS1pdGVyYWJsZXMnKTtcbnZhciBmb3JFYWNoID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LWZvci1lYWNoJyk7XG52YXIgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1ub24tZW51bWVyYWJsZS1wcm9wZXJ0eScpO1xuXG5mb3IgKHZhciBDT0xMRUNUSU9OX05BTUUgaW4gRE9NSXRlcmFibGVzKSB7XG4gIHZhciBDb2xsZWN0aW9uID0gZ2xvYmFsW0NPTExFQ1RJT05fTkFNRV07XG4gIHZhciBDb2xsZWN0aW9uUHJvdG90eXBlID0gQ29sbGVjdGlvbiAmJiBDb2xsZWN0aW9uLnByb3RvdHlwZTtcbiAgLy8gc29tZSBDaHJvbWUgdmVyc2lvbnMgaGF2ZSBub24tY29uZmlndXJhYmxlIG1ldGhvZHMgb24gRE9NVG9rZW5MaXN0XG4gIGlmIChDb2xsZWN0aW9uUHJvdG90eXBlICYmIENvbGxlY3Rpb25Qcm90b3R5cGUuZm9yRWFjaCAhPT0gZm9yRWFjaCkgdHJ5IHtcbiAgICBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkoQ29sbGVjdGlvblByb3RvdHlwZSwgJ2ZvckVhY2gnLCBmb3JFYWNoKTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBDb2xsZWN0aW9uUHJvdG90eXBlLmZvckVhY2ggPSBmb3JFYWNoO1xuICB9XG59XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIERPTUl0ZXJhYmxlcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kb20taXRlcmFibGVzJyk7XG52YXIgQXJyYXlJdGVyYXRvck1ldGhvZHMgPSByZXF1aXJlKCcuLi9tb2R1bGVzL2VzLmFycmF5Lml0ZXJhdG9yJyk7XG52YXIgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1ub24tZW51bWVyYWJsZS1wcm9wZXJ0eScpO1xudmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xuXG52YXIgSVRFUkFUT1IgPSB3ZWxsS25vd25TeW1ib2woJ2l0ZXJhdG9yJyk7XG52YXIgVE9fU1RSSU5HX1RBRyA9IHdlbGxLbm93blN5bWJvbCgndG9TdHJpbmdUYWcnKTtcbnZhciBBcnJheVZhbHVlcyA9IEFycmF5SXRlcmF0b3JNZXRob2RzLnZhbHVlcztcblxuZm9yICh2YXIgQ09MTEVDVElPTl9OQU1FIGluIERPTUl0ZXJhYmxlcykge1xuICB2YXIgQ29sbGVjdGlvbiA9IGdsb2JhbFtDT0xMRUNUSU9OX05BTUVdO1xuICB2YXIgQ29sbGVjdGlvblByb3RvdHlwZSA9IENvbGxlY3Rpb24gJiYgQ29sbGVjdGlvbi5wcm90b3R5cGU7XG4gIGlmIChDb2xsZWN0aW9uUHJvdG90eXBlKSB7XG4gICAgLy8gc29tZSBDaHJvbWUgdmVyc2lvbnMgaGF2ZSBub24tY29uZmlndXJhYmxlIG1ldGhvZHMgb24gRE9NVG9rZW5MaXN0XG4gICAgaWYgKENvbGxlY3Rpb25Qcm90b3R5cGVbSVRFUkFUT1JdICE9PSBBcnJheVZhbHVlcykgdHJ5IHtcbiAgICAgIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eShDb2xsZWN0aW9uUHJvdG90eXBlLCBJVEVSQVRPUiwgQXJyYXlWYWx1ZXMpO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBDb2xsZWN0aW9uUHJvdG90eXBlW0lURVJBVE9SXSA9IEFycmF5VmFsdWVzO1xuICAgIH1cbiAgICBpZiAoIUNvbGxlY3Rpb25Qcm90b3R5cGVbVE9fU1RSSU5HX1RBR10pIHtcbiAgICAgIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eShDb2xsZWN0aW9uUHJvdG90eXBlLCBUT19TVFJJTkdfVEFHLCBDT0xMRUNUSU9OX05BTUUpO1xuICAgIH1cbiAgICBpZiAoRE9NSXRlcmFibGVzW0NPTExFQ1RJT05fTkFNRV0pIGZvciAodmFyIE1FVEhPRF9OQU1FIGluIEFycmF5SXRlcmF0b3JNZXRob2RzKSB7XG4gICAgICAvLyBzb21lIENocm9tZSB2ZXJzaW9ucyBoYXZlIG5vbi1jb25maWd1cmFibGUgbWV0aG9kcyBvbiBET01Ub2tlbkxpc3RcbiAgICAgIGlmIChDb2xsZWN0aW9uUHJvdG90eXBlW01FVEhPRF9OQU1FXSAhPT0gQXJyYXlJdGVyYXRvck1ldGhvZHNbTUVUSE9EX05BTUVdKSB0cnkge1xuICAgICAgICBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkoQ29sbGVjdGlvblByb3RvdHlwZSwgTUVUSE9EX05BTUUsIEFycmF5SXRlcmF0b3JNZXRob2RzW01FVEhPRF9OQU1FXSk7XG4gICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICBDb2xsZWN0aW9uUHJvdG90eXBlW01FVEhPRF9OQU1FXSA9IEFycmF5SXRlcmF0b3JNZXRob2RzW01FVEhPRF9OQU1FXTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cbiIsInZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciB0YXNrID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3Rhc2snKTtcblxudmFyIEZPUkNFRCA9ICFnbG9iYWwuc2V0SW1tZWRpYXRlIHx8ICFnbG9iYWwuY2xlYXJJbW1lZGlhdGU7XG5cbi8vIGh0dHA6Ly93M2MuZ2l0aHViLmlvL3NldEltbWVkaWF0ZS9cbiQoeyBnbG9iYWw6IHRydWUsIGJpbmQ6IHRydWUsIGVudW1lcmFibGU6IHRydWUsIGZvcmNlZDogRk9SQ0VEIH0sIHtcbiAgLy8gYHNldEltbWVkaWF0ZWAgbWV0aG9kXG4gIC8vIGh0dHA6Ly93M2MuZ2l0aHViLmlvL3NldEltbWVkaWF0ZS8jc2ktc2V0SW1tZWRpYXRlXG4gIHNldEltbWVkaWF0ZTogdGFzay5zZXQsXG4gIC8vIGBjbGVhckltbWVkaWF0ZWAgbWV0aG9kXG4gIC8vIGh0dHA6Ly93M2MuZ2l0aHViLmlvL3NldEltbWVkaWF0ZS8jc2ktY2xlYXJJbW1lZGlhdGVcbiAgY2xlYXJJbW1lZGlhdGU6IHRhc2suY2xlYXJcbn0pO1xuIiwidmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIG1pY3JvdGFzayA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9taWNyb3Rhc2snKTtcbnZhciBJU19OT0RFID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2VuZ2luZS1pcy1ub2RlJyk7XG5cbnZhciBwcm9jZXNzID0gZ2xvYmFsLnByb2Nlc3M7XG5cbi8vIGBxdWV1ZU1pY3JvdGFza2AgbWV0aG9kXG4vLyBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS90aW1lcnMtYW5kLXVzZXItcHJvbXB0cy5odG1sI2RvbS1xdWV1ZW1pY3JvdGFza1xuJCh7IGdsb2JhbDogdHJ1ZSwgZW51bWVyYWJsZTogdHJ1ZSwgbm9UYXJnZXRHZXQ6IHRydWUgfSwge1xuICBxdWV1ZU1pY3JvdGFzazogZnVuY3Rpb24gcXVldWVNaWNyb3Rhc2soZm4pIHtcbiAgICB2YXIgZG9tYWluID0gSVNfTk9ERSAmJiBwcm9jZXNzLmRvbWFpbjtcbiAgICBtaWNyb3Rhc2soZG9tYWluID8gZG9tYWluLmJpbmQoZm4pIDogZm4pO1xuICB9XG59KTtcbiIsInZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciB1c2VyQWdlbnQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZW5naW5lLXVzZXItYWdlbnQnKTtcblxudmFyIHNsaWNlID0gW10uc2xpY2U7XG52YXIgTVNJRSA9IC9NU0lFIC5cXC4vLnRlc3QodXNlckFnZW50KTsgLy8gPC0gZGlydHkgaWU5LSBjaGVja1xuXG52YXIgd3JhcCA9IGZ1bmN0aW9uIChzY2hlZHVsZXIpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIChoYW5kbGVyLCB0aW1lb3V0IC8qICwgLi4uYXJndW1lbnRzICovKSB7XG4gICAgdmFyIGJvdW5kQXJncyA9IGFyZ3VtZW50cy5sZW5ndGggPiAyO1xuICAgIHZhciBhcmdzID0gYm91bmRBcmdzID8gc2xpY2UuY2FsbChhcmd1bWVudHMsIDIpIDogdW5kZWZpbmVkO1xuICAgIHJldHVybiBzY2hlZHVsZXIoYm91bmRBcmdzID8gZnVuY3Rpb24gKCkge1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLW5ldy1mdW5jXG4gICAgICAodHlwZW9mIGhhbmRsZXIgPT0gJ2Z1bmN0aW9uJyA/IGhhbmRsZXIgOiBGdW5jdGlvbihoYW5kbGVyKSkuYXBwbHkodGhpcywgYXJncyk7XG4gICAgfSA6IGhhbmRsZXIsIHRpbWVvdXQpO1xuICB9O1xufTtcblxuLy8gaWU5LSBzZXRUaW1lb3V0ICYgc2V0SW50ZXJ2YWwgYWRkaXRpb25hbCBwYXJhbWV0ZXJzIGZpeFxuLy8gaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2UvdGltZXJzLWFuZC11c2VyLXByb21wdHMuaHRtbCN0aW1lcnNcbiQoeyBnbG9iYWw6IHRydWUsIGJpbmQ6IHRydWUsIGZvcmNlZDogTVNJRSB9LCB7XG4gIC8vIGBzZXRUaW1lb3V0YCBtZXRob2RcbiAgLy8gaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2UvdGltZXJzLWFuZC11c2VyLXByb21wdHMuaHRtbCNkb20tc2V0dGltZW91dFxuICBzZXRUaW1lb3V0OiB3cmFwKGdsb2JhbC5zZXRUaW1lb3V0KSxcbiAgLy8gYHNldEludGVydmFsYCBtZXRob2RcbiAgLy8gaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2UvdGltZXJzLWFuZC11c2VyLXByb21wdHMuaHRtbCNkb20tc2V0aW50ZXJ2YWxcbiAgc2V0SW50ZXJ2YWw6IHdyYXAoZ2xvYmFsLnNldEludGVydmFsKVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyBUT0RPOiBpbiBjb3JlLWpzQDQsIG1vdmUgL21vZHVsZXMvIGRlcGVuZGVuY2llcyB0byBwdWJsaWMgZW50cmllcyBmb3IgYmV0dGVyIG9wdGltaXphdGlvbiBieSB0b29scyBsaWtlIGBwcmVzZXQtZW52YFxucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5hcnJheS5pdGVyYXRvcicpO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgZ2V0QnVpbHRJbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nZXQtYnVpbHQtaW4nKTtcbnZhciBVU0VfTkFUSVZFX1VSTCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9uYXRpdmUtdXJsJyk7XG52YXIgcmVkZWZpbmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVkZWZpbmUnKTtcbnZhciByZWRlZmluZUFsbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZWRlZmluZS1hbGwnKTtcbnZhciBzZXRUb1N0cmluZ1RhZyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zZXQtdG8tc3RyaW5nLXRhZycpO1xudmFyIGNyZWF0ZUl0ZXJhdG9yQ29uc3RydWN0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLWl0ZXJhdG9yLWNvbnN0cnVjdG9yJyk7XG52YXIgSW50ZXJuYWxTdGF0ZU1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pbnRlcm5hbC1zdGF0ZScpO1xudmFyIGFuSW5zdGFuY2UgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4taW5zdGFuY2UnKTtcbnZhciBoYXNPd24gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGFzJyk7XG52YXIgYmluZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi1iaW5kLWNvbnRleHQnKTtcbnZhciBjbGFzc29mID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NsYXNzb2YnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1vYmplY3QnKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1vYmplY3QnKTtcbnZhciBjcmVhdGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWNyZWF0ZScpO1xudmFyIGNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtcHJvcGVydHktZGVzY3JpcHRvcicpO1xudmFyIGdldEl0ZXJhdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dldC1pdGVyYXRvcicpO1xudmFyIGdldEl0ZXJhdG9yTWV0aG9kID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dldC1pdGVyYXRvci1tZXRob2QnKTtcbnZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcblxudmFyICRmZXRjaCA9IGdldEJ1aWx0SW4oJ2ZldGNoJyk7XG52YXIgSGVhZGVycyA9IGdldEJ1aWx0SW4oJ0hlYWRlcnMnKTtcbnZhciBJVEVSQVRPUiA9IHdlbGxLbm93blN5bWJvbCgnaXRlcmF0b3InKTtcbnZhciBVUkxfU0VBUkNIX1BBUkFNUyA9ICdVUkxTZWFyY2hQYXJhbXMnO1xudmFyIFVSTF9TRUFSQ0hfUEFSQU1TX0lURVJBVE9SID0gVVJMX1NFQVJDSF9QQVJBTVMgKyAnSXRlcmF0b3InO1xudmFyIHNldEludGVybmFsU3RhdGUgPSBJbnRlcm5hbFN0YXRlTW9kdWxlLnNldDtcbnZhciBnZXRJbnRlcm5hbFBhcmFtc1N0YXRlID0gSW50ZXJuYWxTdGF0ZU1vZHVsZS5nZXR0ZXJGb3IoVVJMX1NFQVJDSF9QQVJBTVMpO1xudmFyIGdldEludGVybmFsSXRlcmF0b3JTdGF0ZSA9IEludGVybmFsU3RhdGVNb2R1bGUuZ2V0dGVyRm9yKFVSTF9TRUFSQ0hfUEFSQU1TX0lURVJBVE9SKTtcblxudmFyIHBsdXMgPSAvXFwrL2c7XG52YXIgc2VxdWVuY2VzID0gQXJyYXkoNCk7XG5cbnZhciBwZXJjZW50U2VxdWVuY2UgPSBmdW5jdGlvbiAoYnl0ZXMpIHtcbiAgcmV0dXJuIHNlcXVlbmNlc1tieXRlcyAtIDFdIHx8IChzZXF1ZW5jZXNbYnl0ZXMgLSAxXSA9IFJlZ0V4cCgnKCg/OiVbXFxcXGRhLWZdezJ9KXsnICsgYnl0ZXMgKyAnfSknLCAnZ2knKSk7XG59O1xuXG52YXIgcGVyY2VudERlY29kZSA9IGZ1bmN0aW9uIChzZXF1ZW5jZSkge1xuICB0cnkge1xuICAgIHJldHVybiBkZWNvZGVVUklDb21wb25lbnQoc2VxdWVuY2UpO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIHJldHVybiBzZXF1ZW5jZTtcbiAgfVxufTtcblxudmFyIGRlc2VyaWFsaXplID0gZnVuY3Rpb24gKGl0KSB7XG4gIHZhciByZXN1bHQgPSBpdC5yZXBsYWNlKHBsdXMsICcgJyk7XG4gIHZhciBieXRlcyA9IDQ7XG4gIHRyeSB7XG4gICAgcmV0dXJuIGRlY29kZVVSSUNvbXBvbmVudChyZXN1bHQpO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIHdoaWxlIChieXRlcykge1xuICAgICAgcmVzdWx0ID0gcmVzdWx0LnJlcGxhY2UocGVyY2VudFNlcXVlbmNlKGJ5dGVzLS0pLCBwZXJjZW50RGVjb2RlKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxufTtcblxudmFyIGZpbmQgPSAvWyEnKCl+XXwlMjAvZztcblxudmFyIHJlcGxhY2UgPSB7XG4gICchJzogJyUyMScsXG4gIFwiJ1wiOiAnJTI3JyxcbiAgJygnOiAnJTI4JyxcbiAgJyknOiAnJTI5JyxcbiAgJ34nOiAnJTdFJyxcbiAgJyUyMCc6ICcrJ1xufTtcblxudmFyIHJlcGxhY2VyID0gZnVuY3Rpb24gKG1hdGNoKSB7XG4gIHJldHVybiByZXBsYWNlW21hdGNoXTtcbn07XG5cbnZhciBzZXJpYWxpemUgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIGVuY29kZVVSSUNvbXBvbmVudChpdCkucmVwbGFjZShmaW5kLCByZXBsYWNlcik7XG59O1xuXG52YXIgcGFyc2VTZWFyY2hQYXJhbXMgPSBmdW5jdGlvbiAocmVzdWx0LCBxdWVyeSkge1xuICBpZiAocXVlcnkpIHtcbiAgICB2YXIgYXR0cmlidXRlcyA9IHF1ZXJ5LnNwbGl0KCcmJyk7XG4gICAgdmFyIGluZGV4ID0gMDtcbiAgICB2YXIgYXR0cmlidXRlLCBlbnRyeTtcbiAgICB3aGlsZSAoaW5kZXggPCBhdHRyaWJ1dGVzLmxlbmd0aCkge1xuICAgICAgYXR0cmlidXRlID0gYXR0cmlidXRlc1tpbmRleCsrXTtcbiAgICAgIGlmIChhdHRyaWJ1dGUubGVuZ3RoKSB7XG4gICAgICAgIGVudHJ5ID0gYXR0cmlidXRlLnNwbGl0KCc9Jyk7XG4gICAgICAgIHJlc3VsdC5wdXNoKHtcbiAgICAgICAgICBrZXk6IGRlc2VyaWFsaXplKGVudHJ5LnNoaWZ0KCkpLFxuICAgICAgICAgIHZhbHVlOiBkZXNlcmlhbGl6ZShlbnRyeS5qb2luKCc9JykpXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cbiAgfVxufTtcblxudmFyIHVwZGF0ZVNlYXJjaFBhcmFtcyA9IGZ1bmN0aW9uIChxdWVyeSkge1xuICB0aGlzLmVudHJpZXMubGVuZ3RoID0gMDtcbiAgcGFyc2VTZWFyY2hQYXJhbXModGhpcy5lbnRyaWVzLCBxdWVyeSk7XG59O1xuXG52YXIgdmFsaWRhdGVBcmd1bWVudHNMZW5ndGggPSBmdW5jdGlvbiAocGFzc2VkLCByZXF1aXJlZCkge1xuICBpZiAocGFzc2VkIDwgcmVxdWlyZWQpIHRocm93IFR5cGVFcnJvcignTm90IGVub3VnaCBhcmd1bWVudHMnKTtcbn07XG5cbnZhciBVUkxTZWFyY2hQYXJhbXNJdGVyYXRvciA9IGNyZWF0ZUl0ZXJhdG9yQ29uc3RydWN0b3IoZnVuY3Rpb24gSXRlcmF0b3IocGFyYW1zLCBraW5kKSB7XG4gIHNldEludGVybmFsU3RhdGUodGhpcywge1xuICAgIHR5cGU6IFVSTF9TRUFSQ0hfUEFSQU1TX0lURVJBVE9SLFxuICAgIGl0ZXJhdG9yOiBnZXRJdGVyYXRvcihnZXRJbnRlcm5hbFBhcmFtc1N0YXRlKHBhcmFtcykuZW50cmllcyksXG4gICAga2luZDoga2luZFxuICB9KTtcbn0sICdJdGVyYXRvcicsIGZ1bmN0aW9uIG5leHQoKSB7XG4gIHZhciBzdGF0ZSA9IGdldEludGVybmFsSXRlcmF0b3JTdGF0ZSh0aGlzKTtcbiAgdmFyIGtpbmQgPSBzdGF0ZS5raW5kO1xuICB2YXIgc3RlcCA9IHN0YXRlLml0ZXJhdG9yLm5leHQoKTtcbiAgdmFyIGVudHJ5ID0gc3RlcC52YWx1ZTtcbiAgaWYgKCFzdGVwLmRvbmUpIHtcbiAgICBzdGVwLnZhbHVlID0ga2luZCA9PT0gJ2tleXMnID8gZW50cnkua2V5IDoga2luZCA9PT0gJ3ZhbHVlcycgPyBlbnRyeS52YWx1ZSA6IFtlbnRyeS5rZXksIGVudHJ5LnZhbHVlXTtcbiAgfSByZXR1cm4gc3RlcDtcbn0pO1xuXG4vLyBgVVJMU2VhcmNoUGFyYW1zYCBjb25zdHJ1Y3RvclxuLy8gaHR0cHM6Ly91cmwuc3BlYy53aGF0d2cub3JnLyNpbnRlcmZhY2UtdXJsc2VhcmNocGFyYW1zXG52YXIgVVJMU2VhcmNoUGFyYW1zQ29uc3RydWN0b3IgPSBmdW5jdGlvbiBVUkxTZWFyY2hQYXJhbXMoLyogaW5pdCAqLykge1xuICBhbkluc3RhbmNlKHRoaXMsIFVSTFNlYXJjaFBhcmFtc0NvbnN0cnVjdG9yLCBVUkxfU0VBUkNIX1BBUkFNUyk7XG4gIHZhciBpbml0ID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgPyBhcmd1bWVudHNbMF0gOiB1bmRlZmluZWQ7XG4gIHZhciB0aGF0ID0gdGhpcztcbiAgdmFyIGVudHJpZXMgPSBbXTtcbiAgdmFyIGl0ZXJhdG9yTWV0aG9kLCBpdGVyYXRvciwgbmV4dCwgc3RlcCwgZW50cnlJdGVyYXRvciwgZW50cnlOZXh0LCBmaXJzdCwgc2Vjb25kLCBrZXk7XG5cbiAgc2V0SW50ZXJuYWxTdGF0ZSh0aGF0LCB7XG4gICAgdHlwZTogVVJMX1NFQVJDSF9QQVJBTVMsXG4gICAgZW50cmllczogZW50cmllcyxcbiAgICB1cGRhdGVVUkw6IGZ1bmN0aW9uICgpIHsgLyogZW1wdHkgKi8gfSxcbiAgICB1cGRhdGVTZWFyY2hQYXJhbXM6IHVwZGF0ZVNlYXJjaFBhcmFtc1xuICB9KTtcblxuICBpZiAoaW5pdCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgaWYgKGlzT2JqZWN0KGluaXQpKSB7XG4gICAgICBpdGVyYXRvck1ldGhvZCA9IGdldEl0ZXJhdG9yTWV0aG9kKGluaXQpO1xuICAgICAgaWYgKHR5cGVvZiBpdGVyYXRvck1ldGhvZCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICBpdGVyYXRvciA9IGl0ZXJhdG9yTWV0aG9kLmNhbGwoaW5pdCk7XG4gICAgICAgIG5leHQgPSBpdGVyYXRvci5uZXh0O1xuICAgICAgICB3aGlsZSAoIShzdGVwID0gbmV4dC5jYWxsKGl0ZXJhdG9yKSkuZG9uZSkge1xuICAgICAgICAgIGVudHJ5SXRlcmF0b3IgPSBnZXRJdGVyYXRvcihhbk9iamVjdChzdGVwLnZhbHVlKSk7XG4gICAgICAgICAgZW50cnlOZXh0ID0gZW50cnlJdGVyYXRvci5uZXh0O1xuICAgICAgICAgIGlmIChcbiAgICAgICAgICAgIChmaXJzdCA9IGVudHJ5TmV4dC5jYWxsKGVudHJ5SXRlcmF0b3IpKS5kb25lIHx8XG4gICAgICAgICAgICAoc2Vjb25kID0gZW50cnlOZXh0LmNhbGwoZW50cnlJdGVyYXRvcikpLmRvbmUgfHxcbiAgICAgICAgICAgICFlbnRyeU5leHQuY2FsbChlbnRyeUl0ZXJhdG9yKS5kb25lXG4gICAgICAgICAgKSB0aHJvdyBUeXBlRXJyb3IoJ0V4cGVjdGVkIHNlcXVlbmNlIHdpdGggbGVuZ3RoIDInKTtcbiAgICAgICAgICBlbnRyaWVzLnB1c2goeyBrZXk6IGZpcnN0LnZhbHVlICsgJycsIHZhbHVlOiBzZWNvbmQudmFsdWUgKyAnJyB9KTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGZvciAoa2V5IGluIGluaXQpIGlmIChoYXNPd24oaW5pdCwga2V5KSkgZW50cmllcy5wdXNoKHsga2V5OiBrZXksIHZhbHVlOiBpbml0W2tleV0gKyAnJyB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgcGFyc2VTZWFyY2hQYXJhbXMoZW50cmllcywgdHlwZW9mIGluaXQgPT09ICdzdHJpbmcnID8gaW5pdC5jaGFyQXQoMCkgPT09ICc/JyA/IGluaXQuc2xpY2UoMSkgOiBpbml0IDogaW5pdCArICcnKTtcbiAgICB9XG4gIH1cbn07XG5cbnZhciBVUkxTZWFyY2hQYXJhbXNQcm90b3R5cGUgPSBVUkxTZWFyY2hQYXJhbXNDb25zdHJ1Y3Rvci5wcm90b3R5cGU7XG5cbnJlZGVmaW5lQWxsKFVSTFNlYXJjaFBhcmFtc1Byb3RvdHlwZSwge1xuICAvLyBgVVJMU2VhcmNoUGFyYW1zLnByb3RvdHlwZS5hcHBlbmRgIG1ldGhvZFxuICAvLyBodHRwczovL3VybC5zcGVjLndoYXR3Zy5vcmcvI2RvbS11cmxzZWFyY2hwYXJhbXMtYXBwZW5kXG4gIGFwcGVuZDogZnVuY3Rpb24gYXBwZW5kKG5hbWUsIHZhbHVlKSB7XG4gICAgdmFsaWRhdGVBcmd1bWVudHNMZW5ndGgoYXJndW1lbnRzLmxlbmd0aCwgMik7XG4gICAgdmFyIHN0YXRlID0gZ2V0SW50ZXJuYWxQYXJhbXNTdGF0ZSh0aGlzKTtcbiAgICBzdGF0ZS5lbnRyaWVzLnB1c2goeyBrZXk6IG5hbWUgKyAnJywgdmFsdWU6IHZhbHVlICsgJycgfSk7XG4gICAgc3RhdGUudXBkYXRlVVJMKCk7XG4gIH0sXG4gIC8vIGBVUkxTZWFyY2hQYXJhbXMucHJvdG90eXBlLmRlbGV0ZWAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdXJsLnNwZWMud2hhdHdnLm9yZy8jZG9tLXVybHNlYXJjaHBhcmFtcy1kZWxldGVcbiAgJ2RlbGV0ZSc6IGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgdmFsaWRhdGVBcmd1bWVudHNMZW5ndGgoYXJndW1lbnRzLmxlbmd0aCwgMSk7XG4gICAgdmFyIHN0YXRlID0gZ2V0SW50ZXJuYWxQYXJhbXNTdGF0ZSh0aGlzKTtcbiAgICB2YXIgZW50cmllcyA9IHN0YXRlLmVudHJpZXM7XG4gICAgdmFyIGtleSA9IG5hbWUgKyAnJztcbiAgICB2YXIgaW5kZXggPSAwO1xuICAgIHdoaWxlIChpbmRleCA8IGVudHJpZXMubGVuZ3RoKSB7XG4gICAgICBpZiAoZW50cmllc1tpbmRleF0ua2V5ID09PSBrZXkpIGVudHJpZXMuc3BsaWNlKGluZGV4LCAxKTtcbiAgICAgIGVsc2UgaW5kZXgrKztcbiAgICB9XG4gICAgc3RhdGUudXBkYXRlVVJMKCk7XG4gIH0sXG4gIC8vIGBVUkxTZWFyY2hQYXJhbXMucHJvdG90eXBlLmdldGAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdXJsLnNwZWMud2hhdHdnLm9yZy8jZG9tLXVybHNlYXJjaHBhcmFtcy1nZXRcbiAgZ2V0OiBmdW5jdGlvbiBnZXQobmFtZSkge1xuICAgIHZhbGlkYXRlQXJndW1lbnRzTGVuZ3RoKGFyZ3VtZW50cy5sZW5ndGgsIDEpO1xuICAgIHZhciBlbnRyaWVzID0gZ2V0SW50ZXJuYWxQYXJhbXNTdGF0ZSh0aGlzKS5lbnRyaWVzO1xuICAgIHZhciBrZXkgPSBuYW1lICsgJyc7XG4gICAgdmFyIGluZGV4ID0gMDtcbiAgICBmb3IgKDsgaW5kZXggPCBlbnRyaWVzLmxlbmd0aDsgaW5kZXgrKykge1xuICAgICAgaWYgKGVudHJpZXNbaW5kZXhdLmtleSA9PT0ga2V5KSByZXR1cm4gZW50cmllc1tpbmRleF0udmFsdWU7XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xuICB9LFxuICAvLyBgVVJMU2VhcmNoUGFyYW1zLnByb3RvdHlwZS5nZXRBbGxgIG1ldGhvZFxuICAvLyBodHRwczovL3VybC5zcGVjLndoYXR3Zy5vcmcvI2RvbS11cmxzZWFyY2hwYXJhbXMtZ2V0YWxsXG4gIGdldEFsbDogZnVuY3Rpb24gZ2V0QWxsKG5hbWUpIHtcbiAgICB2YWxpZGF0ZUFyZ3VtZW50c0xlbmd0aChhcmd1bWVudHMubGVuZ3RoLCAxKTtcbiAgICB2YXIgZW50cmllcyA9IGdldEludGVybmFsUGFyYW1zU3RhdGUodGhpcykuZW50cmllcztcbiAgICB2YXIga2V5ID0gbmFtZSArICcnO1xuICAgIHZhciByZXN1bHQgPSBbXTtcbiAgICB2YXIgaW5kZXggPSAwO1xuICAgIGZvciAoOyBpbmRleCA8IGVudHJpZXMubGVuZ3RoOyBpbmRleCsrKSB7XG4gICAgICBpZiAoZW50cmllc1tpbmRleF0ua2V5ID09PSBrZXkpIHJlc3VsdC5wdXNoKGVudHJpZXNbaW5kZXhdLnZhbHVlKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfSxcbiAgLy8gYFVSTFNlYXJjaFBhcmFtcy5wcm90b3R5cGUuaGFzYCBtZXRob2RcbiAgLy8gaHR0cHM6Ly91cmwuc3BlYy53aGF0d2cub3JnLyNkb20tdXJsc2VhcmNocGFyYW1zLWhhc1xuICBoYXM6IGZ1bmN0aW9uIGhhcyhuYW1lKSB7XG4gICAgdmFsaWRhdGVBcmd1bWVudHNMZW5ndGgoYXJndW1lbnRzLmxlbmd0aCwgMSk7XG4gICAgdmFyIGVudHJpZXMgPSBnZXRJbnRlcm5hbFBhcmFtc1N0YXRlKHRoaXMpLmVudHJpZXM7XG4gICAgdmFyIGtleSA9IG5hbWUgKyAnJztcbiAgICB2YXIgaW5kZXggPSAwO1xuICAgIHdoaWxlIChpbmRleCA8IGVudHJpZXMubGVuZ3RoKSB7XG4gICAgICBpZiAoZW50cmllc1tpbmRleCsrXS5rZXkgPT09IGtleSkgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbiAgfSxcbiAgLy8gYFVSTFNlYXJjaFBhcmFtcy5wcm90b3R5cGUuc2V0YCBtZXRob2RcbiAgLy8gaHR0cHM6Ly91cmwuc3BlYy53aGF0d2cub3JnLyNkb20tdXJsc2VhcmNocGFyYW1zLXNldFxuICBzZXQ6IGZ1bmN0aW9uIHNldChuYW1lLCB2YWx1ZSkge1xuICAgIHZhbGlkYXRlQXJndW1lbnRzTGVuZ3RoKGFyZ3VtZW50cy5sZW5ndGgsIDEpO1xuICAgIHZhciBzdGF0ZSA9IGdldEludGVybmFsUGFyYW1zU3RhdGUodGhpcyk7XG4gICAgdmFyIGVudHJpZXMgPSBzdGF0ZS5lbnRyaWVzO1xuICAgIHZhciBmb3VuZCA9IGZhbHNlO1xuICAgIHZhciBrZXkgPSBuYW1lICsgJyc7XG4gICAgdmFyIHZhbCA9IHZhbHVlICsgJyc7XG4gICAgdmFyIGluZGV4ID0gMDtcbiAgICB2YXIgZW50cnk7XG4gICAgZm9yICg7IGluZGV4IDwgZW50cmllcy5sZW5ndGg7IGluZGV4KyspIHtcbiAgICAgIGVudHJ5ID0gZW50cmllc1tpbmRleF07XG4gICAgICBpZiAoZW50cnkua2V5ID09PSBrZXkpIHtcbiAgICAgICAgaWYgKGZvdW5kKSBlbnRyaWVzLnNwbGljZShpbmRleC0tLCAxKTtcbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgZm91bmQgPSB0cnVlO1xuICAgICAgICAgIGVudHJ5LnZhbHVlID0gdmFsO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIGlmICghZm91bmQpIGVudHJpZXMucHVzaCh7IGtleToga2V5LCB2YWx1ZTogdmFsIH0pO1xuICAgIHN0YXRlLnVwZGF0ZVVSTCgpO1xuICB9LFxuICAvLyBgVVJMU2VhcmNoUGFyYW1zLnByb3RvdHlwZS5zb3J0YCBtZXRob2RcbiAgLy8gaHR0cHM6Ly91cmwuc3BlYy53aGF0d2cub3JnLyNkb20tdXJsc2VhcmNocGFyYW1zLXNvcnRcbiAgc29ydDogZnVuY3Rpb24gc29ydCgpIHtcbiAgICB2YXIgc3RhdGUgPSBnZXRJbnRlcm5hbFBhcmFtc1N0YXRlKHRoaXMpO1xuICAgIHZhciBlbnRyaWVzID0gc3RhdGUuZW50cmllcztcbiAgICAvLyBBcnJheSNzb3J0IGlzIG5vdCBzdGFibGUgaW4gc29tZSBlbmdpbmVzXG4gICAgdmFyIHNsaWNlID0gZW50cmllcy5zbGljZSgpO1xuICAgIHZhciBlbnRyeSwgZW50cmllc0luZGV4LCBzbGljZUluZGV4O1xuICAgIGVudHJpZXMubGVuZ3RoID0gMDtcbiAgICBmb3IgKHNsaWNlSW5kZXggPSAwOyBzbGljZUluZGV4IDwgc2xpY2UubGVuZ3RoOyBzbGljZUluZGV4KyspIHtcbiAgICAgIGVudHJ5ID0gc2xpY2Vbc2xpY2VJbmRleF07XG4gICAgICBmb3IgKGVudHJpZXNJbmRleCA9IDA7IGVudHJpZXNJbmRleCA8IHNsaWNlSW5kZXg7IGVudHJpZXNJbmRleCsrKSB7XG4gICAgICAgIGlmIChlbnRyaWVzW2VudHJpZXNJbmRleF0ua2V5ID4gZW50cnkua2V5KSB7XG4gICAgICAgICAgZW50cmllcy5zcGxpY2UoZW50cmllc0luZGV4LCAwLCBlbnRyeSk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChlbnRyaWVzSW5kZXggPT09IHNsaWNlSW5kZXgpIGVudHJpZXMucHVzaChlbnRyeSk7XG4gICAgfVxuICAgIHN0YXRlLnVwZGF0ZVVSTCgpO1xuICB9LFxuICAvLyBgVVJMU2VhcmNoUGFyYW1zLnByb3RvdHlwZS5mb3JFYWNoYCBtZXRob2RcbiAgZm9yRWFjaDogZnVuY3Rpb24gZm9yRWFjaChjYWxsYmFjayAvKiAsIHRoaXNBcmcgKi8pIHtcbiAgICB2YXIgZW50cmllcyA9IGdldEludGVybmFsUGFyYW1zU3RhdGUodGhpcykuZW50cmllcztcbiAgICB2YXIgYm91bmRGdW5jdGlvbiA9IGJpbmQoY2FsbGJhY2ssIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkLCAzKTtcbiAgICB2YXIgaW5kZXggPSAwO1xuICAgIHZhciBlbnRyeTtcbiAgICB3aGlsZSAoaW5kZXggPCBlbnRyaWVzLmxlbmd0aCkge1xuICAgICAgZW50cnkgPSBlbnRyaWVzW2luZGV4KytdO1xuICAgICAgYm91bmRGdW5jdGlvbihlbnRyeS52YWx1ZSwgZW50cnkua2V5LCB0aGlzKTtcbiAgICB9XG4gIH0sXG4gIC8vIGBVUkxTZWFyY2hQYXJhbXMucHJvdG90eXBlLmtleXNgIG1ldGhvZFxuICBrZXlzOiBmdW5jdGlvbiBrZXlzKCkge1xuICAgIHJldHVybiBuZXcgVVJMU2VhcmNoUGFyYW1zSXRlcmF0b3IodGhpcywgJ2tleXMnKTtcbiAgfSxcbiAgLy8gYFVSTFNlYXJjaFBhcmFtcy5wcm90b3R5cGUudmFsdWVzYCBtZXRob2RcbiAgdmFsdWVzOiBmdW5jdGlvbiB2YWx1ZXMoKSB7XG4gICAgcmV0dXJuIG5ldyBVUkxTZWFyY2hQYXJhbXNJdGVyYXRvcih0aGlzLCAndmFsdWVzJyk7XG4gIH0sXG4gIC8vIGBVUkxTZWFyY2hQYXJhbXMucHJvdG90eXBlLmVudHJpZXNgIG1ldGhvZFxuICBlbnRyaWVzOiBmdW5jdGlvbiBlbnRyaWVzKCkge1xuICAgIHJldHVybiBuZXcgVVJMU2VhcmNoUGFyYW1zSXRlcmF0b3IodGhpcywgJ2VudHJpZXMnKTtcbiAgfVxufSwgeyBlbnVtZXJhYmxlOiB0cnVlIH0pO1xuXG4vLyBgVVJMU2VhcmNoUGFyYW1zLnByb3RvdHlwZVtAQGl0ZXJhdG9yXWAgbWV0aG9kXG5yZWRlZmluZShVUkxTZWFyY2hQYXJhbXNQcm90b3R5cGUsIElURVJBVE9SLCBVUkxTZWFyY2hQYXJhbXNQcm90b3R5cGUuZW50cmllcyk7XG5cbi8vIGBVUkxTZWFyY2hQYXJhbXMucHJvdG90eXBlLnRvU3RyaW5nYCBtZXRob2Rcbi8vIGh0dHBzOi8vdXJsLnNwZWMud2hhdHdnLm9yZy8jdXJsc2VhcmNocGFyYW1zLXN0cmluZ2lmaWNhdGlvbi1iZWhhdmlvclxucmVkZWZpbmUoVVJMU2VhcmNoUGFyYW1zUHJvdG90eXBlLCAndG9TdHJpbmcnLCBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgdmFyIGVudHJpZXMgPSBnZXRJbnRlcm5hbFBhcmFtc1N0YXRlKHRoaXMpLmVudHJpZXM7XG4gIHZhciByZXN1bHQgPSBbXTtcbiAgdmFyIGluZGV4ID0gMDtcbiAgdmFyIGVudHJ5O1xuICB3aGlsZSAoaW5kZXggPCBlbnRyaWVzLmxlbmd0aCkge1xuICAgIGVudHJ5ID0gZW50cmllc1tpbmRleCsrXTtcbiAgICByZXN1bHQucHVzaChzZXJpYWxpemUoZW50cnkua2V5KSArICc9JyArIHNlcmlhbGl6ZShlbnRyeS52YWx1ZSkpO1xuICB9IHJldHVybiByZXN1bHQuam9pbignJicpO1xufSwgeyBlbnVtZXJhYmxlOiB0cnVlIH0pO1xuXG5zZXRUb1N0cmluZ1RhZyhVUkxTZWFyY2hQYXJhbXNDb25zdHJ1Y3RvciwgVVJMX1NFQVJDSF9QQVJBTVMpO1xuXG4kKHsgZ2xvYmFsOiB0cnVlLCBmb3JjZWQ6ICFVU0VfTkFUSVZFX1VSTCB9LCB7XG4gIFVSTFNlYXJjaFBhcmFtczogVVJMU2VhcmNoUGFyYW1zQ29uc3RydWN0b3Jcbn0pO1xuXG4vLyBXcmFwIGBmZXRjaGAgZm9yIGNvcnJlY3Qgd29yayB3aXRoIHBvbHlmaWxsZWQgYFVSTFNlYXJjaFBhcmFtc2Bcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS96bG9pcm9jay9jb3JlLWpzL2lzc3Vlcy82NzRcbmlmICghVVNFX05BVElWRV9VUkwgJiYgdHlwZW9mICRmZXRjaCA9PSAnZnVuY3Rpb24nICYmIHR5cGVvZiBIZWFkZXJzID09ICdmdW5jdGlvbicpIHtcbiAgJCh7IGdsb2JhbDogdHJ1ZSwgZW51bWVyYWJsZTogdHJ1ZSwgZm9yY2VkOiB0cnVlIH0sIHtcbiAgICBmZXRjaDogZnVuY3Rpb24gZmV0Y2goaW5wdXQgLyogLCBpbml0ICovKSB7XG4gICAgICB2YXIgYXJncyA9IFtpbnB1dF07XG4gICAgICB2YXIgaW5pdCwgYm9keSwgaGVhZGVycztcbiAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID4gMSkge1xuICAgICAgICBpbml0ID0gYXJndW1lbnRzWzFdO1xuICAgICAgICBpZiAoaXNPYmplY3QoaW5pdCkpIHtcbiAgICAgICAgICBib2R5ID0gaW5pdC5ib2R5O1xuICAgICAgICAgIGlmIChjbGFzc29mKGJvZHkpID09PSBVUkxfU0VBUkNIX1BBUkFNUykge1xuICAgICAgICAgICAgaGVhZGVycyA9IGluaXQuaGVhZGVycyA/IG5ldyBIZWFkZXJzKGluaXQuaGVhZGVycykgOiBuZXcgSGVhZGVycygpO1xuICAgICAgICAgICAgaWYgKCFoZWFkZXJzLmhhcygnY29udGVudC10eXBlJykpIHtcbiAgICAgICAgICAgICAgaGVhZGVycy5zZXQoJ2NvbnRlbnQtdHlwZScsICdhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQ7Y2hhcnNldD1VVEYtOCcpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaW5pdCA9IGNyZWF0ZShpbml0LCB7XG4gICAgICAgICAgICAgIGJvZHk6IGNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvcigwLCBTdHJpbmcoYm9keSkpLFxuICAgICAgICAgICAgICBoZWFkZXJzOiBjcmVhdGVQcm9wZXJ0eURlc2NyaXB0b3IoMCwgaGVhZGVycylcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBhcmdzLnB1c2goaW5pdCk7XG4gICAgICB9IHJldHVybiAkZmV0Y2guYXBwbHkodGhpcywgYXJncyk7XG4gICAgfVxuICB9KTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIFVSTFNlYXJjaFBhcmFtczogVVJMU2VhcmNoUGFyYW1zQ29uc3RydWN0b3IsXG4gIGdldFN0YXRlOiBnZXRJbnRlcm5hbFBhcmFtc1N0YXRlXG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gVE9ETzogaW4gY29yZS1qc0A0LCBtb3ZlIC9tb2R1bGVzLyBkZXBlbmRlbmNpZXMgdG8gcHVibGljIGVudHJpZXMgZm9yIGJldHRlciBvcHRpbWl6YXRpb24gYnkgdG9vbHMgbGlrZSBgcHJlc2V0LWVudmBcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMuc3RyaW5nLml0ZXJhdG9yJyk7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZXNjcmlwdG9ycycpO1xudmFyIFVTRV9OQVRJVkVfVVJMID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL25hdGl2ZS11cmwnKTtcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgZGVmaW5lUHJvcGVydGllcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZGVmaW5lLXByb3BlcnRpZXMnKTtcbnZhciByZWRlZmluZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZWRlZmluZScpO1xudmFyIGFuSW5zdGFuY2UgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4taW5zdGFuY2UnKTtcbnZhciBoYXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGFzJyk7XG52YXIgYXNzaWduID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1hc3NpZ24nKTtcbnZhciBhcnJheUZyb20gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktZnJvbScpO1xudmFyIGNvZGVBdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zdHJpbmctbXVsdGlieXRlJykuY29kZUF0O1xudmFyIHRvQVNDSUkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc3RyaW5nLXB1bnljb2RlLXRvLWFzY2lpJyk7XG52YXIgc2V0VG9TdHJpbmdUYWcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2V0LXRvLXN0cmluZy10YWcnKTtcbnZhciBVUkxTZWFyY2hQYXJhbXNNb2R1bGUgPSByZXF1aXJlKCcuLi9tb2R1bGVzL3dlYi51cmwtc2VhcmNoLXBhcmFtcycpO1xudmFyIEludGVybmFsU3RhdGVNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaW50ZXJuYWwtc3RhdGUnKTtcblxudmFyIE5hdGl2ZVVSTCA9IGdsb2JhbC5VUkw7XG52YXIgVVJMU2VhcmNoUGFyYW1zID0gVVJMU2VhcmNoUGFyYW1zTW9kdWxlLlVSTFNlYXJjaFBhcmFtcztcbnZhciBnZXRJbnRlcm5hbFNlYXJjaFBhcmFtc1N0YXRlID0gVVJMU2VhcmNoUGFyYW1zTW9kdWxlLmdldFN0YXRlO1xudmFyIHNldEludGVybmFsU3RhdGUgPSBJbnRlcm5hbFN0YXRlTW9kdWxlLnNldDtcbnZhciBnZXRJbnRlcm5hbFVSTFN0YXRlID0gSW50ZXJuYWxTdGF0ZU1vZHVsZS5nZXR0ZXJGb3IoJ1VSTCcpO1xudmFyIGZsb29yID0gTWF0aC5mbG9vcjtcbnZhciBwb3cgPSBNYXRoLnBvdztcblxudmFyIElOVkFMSURfQVVUSE9SSVRZID0gJ0ludmFsaWQgYXV0aG9yaXR5JztcbnZhciBJTlZBTElEX1NDSEVNRSA9ICdJbnZhbGlkIHNjaGVtZSc7XG52YXIgSU5WQUxJRF9IT1NUID0gJ0ludmFsaWQgaG9zdCc7XG52YXIgSU5WQUxJRF9QT1JUID0gJ0ludmFsaWQgcG9ydCc7XG5cbnZhciBBTFBIQSA9IC9bQS1aYS16XS87XG52YXIgQUxQSEFOVU1FUklDID0gL1tcXGQrLS5BLVphLXpdLztcbnZhciBESUdJVCA9IC9cXGQvO1xudmFyIEhFWF9TVEFSVCA9IC9eKDB4fDBYKS87XG52YXIgT0NUID0gL15bMC03XSskLztcbnZhciBERUMgPSAvXlxcZCskLztcbnZhciBIRVggPSAvXltcXGRBLUZhLWZdKyQvO1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnRyb2wtcmVnZXhcbnZhciBGT1JCSURERU5fSE9TVF9DT0RFX1BPSU5UID0gL1tcXHUwMDAwXFx1MDAwOVxcdTAwMEFcXHUwMDBEICMlLzo/QFtcXFxcXV0vO1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnRyb2wtcmVnZXhcbnZhciBGT1JCSURERU5fSE9TVF9DT0RFX1BPSU5UX0VYQ0xVRElOR19QRVJDRU5UID0gL1tcXHUwMDAwXFx1MDAwOVxcdTAwMEFcXHUwMDBEICMvOj9AW1xcXFxdXS87XG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29udHJvbC1yZWdleFxudmFyIExFQURJTkdfQU5EX1RSQUlMSU5HX0MwX0NPTlRST0xfT1JfU1BBQ0UgPSAvXltcXHUwMDAwLVxcdTAwMUYgXSt8W1xcdTAwMDAtXFx1MDAxRiBdKyQvZztcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb250cm9sLXJlZ2V4XG52YXIgVEFCX0FORF9ORVdfTElORSA9IC9bXFx1MDAwOVxcdTAwMEFcXHUwMDBEXS9nO1xudmFyIEVPRjtcblxudmFyIHBhcnNlSG9zdCA9IGZ1bmN0aW9uICh1cmwsIGlucHV0KSB7XG4gIHZhciByZXN1bHQsIGNvZGVQb2ludHMsIGluZGV4O1xuICBpZiAoaW5wdXQuY2hhckF0KDApID09ICdbJykge1xuICAgIGlmIChpbnB1dC5jaGFyQXQoaW5wdXQubGVuZ3RoIC0gMSkgIT0gJ10nKSByZXR1cm4gSU5WQUxJRF9IT1NUO1xuICAgIHJlc3VsdCA9IHBhcnNlSVB2NihpbnB1dC5zbGljZSgxLCAtMSkpO1xuICAgIGlmICghcmVzdWx0KSByZXR1cm4gSU5WQUxJRF9IT1NUO1xuICAgIHVybC5ob3N0ID0gcmVzdWx0O1xuICAvLyBvcGFxdWUgaG9zdFxuICB9IGVsc2UgaWYgKCFpc1NwZWNpYWwodXJsKSkge1xuICAgIGlmIChGT1JCSURERU5fSE9TVF9DT0RFX1BPSU5UX0VYQ0xVRElOR19QRVJDRU5ULnRlc3QoaW5wdXQpKSByZXR1cm4gSU5WQUxJRF9IT1NUO1xuICAgIHJlc3VsdCA9ICcnO1xuICAgIGNvZGVQb2ludHMgPSBhcnJheUZyb20oaW5wdXQpO1xuICAgIGZvciAoaW5kZXggPSAwOyBpbmRleCA8IGNvZGVQb2ludHMubGVuZ3RoOyBpbmRleCsrKSB7XG4gICAgICByZXN1bHQgKz0gcGVyY2VudEVuY29kZShjb2RlUG9pbnRzW2luZGV4XSwgQzBDb250cm9sUGVyY2VudEVuY29kZVNldCk7XG4gICAgfVxuICAgIHVybC5ob3N0ID0gcmVzdWx0O1xuICB9IGVsc2Uge1xuICAgIGlucHV0ID0gdG9BU0NJSShpbnB1dCk7XG4gICAgaWYgKEZPUkJJRERFTl9IT1NUX0NPREVfUE9JTlQudGVzdChpbnB1dCkpIHJldHVybiBJTlZBTElEX0hPU1Q7XG4gICAgcmVzdWx0ID0gcGFyc2VJUHY0KGlucHV0KTtcbiAgICBpZiAocmVzdWx0ID09PSBudWxsKSByZXR1cm4gSU5WQUxJRF9IT1NUO1xuICAgIHVybC5ob3N0ID0gcmVzdWx0O1xuICB9XG59O1xuXG52YXIgcGFyc2VJUHY0ID0gZnVuY3Rpb24gKGlucHV0KSB7XG4gIHZhciBwYXJ0cyA9IGlucHV0LnNwbGl0KCcuJyk7XG4gIHZhciBwYXJ0c0xlbmd0aCwgbnVtYmVycywgaW5kZXgsIHBhcnQsIHJhZGl4LCBudW1iZXIsIGlwdjQ7XG4gIGlmIChwYXJ0cy5sZW5ndGggJiYgcGFydHNbcGFydHMubGVuZ3RoIC0gMV0gPT0gJycpIHtcbiAgICBwYXJ0cy5wb3AoKTtcbiAgfVxuICBwYXJ0c0xlbmd0aCA9IHBhcnRzLmxlbmd0aDtcbiAgaWYgKHBhcnRzTGVuZ3RoID4gNCkgcmV0dXJuIGlucHV0O1xuICBudW1iZXJzID0gW107XG4gIGZvciAoaW5kZXggPSAwOyBpbmRleCA8IHBhcnRzTGVuZ3RoOyBpbmRleCsrKSB7XG4gICAgcGFydCA9IHBhcnRzW2luZGV4XTtcbiAgICBpZiAocGFydCA9PSAnJykgcmV0dXJuIGlucHV0O1xuICAgIHJhZGl4ID0gMTA7XG4gICAgaWYgKHBhcnQubGVuZ3RoID4gMSAmJiBwYXJ0LmNoYXJBdCgwKSA9PSAnMCcpIHtcbiAgICAgIHJhZGl4ID0gSEVYX1NUQVJULnRlc3QocGFydCkgPyAxNiA6IDg7XG4gICAgICBwYXJ0ID0gcGFydC5zbGljZShyYWRpeCA9PSA4ID8gMSA6IDIpO1xuICAgIH1cbiAgICBpZiAocGFydCA9PT0gJycpIHtcbiAgICAgIG51bWJlciA9IDA7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmICghKHJhZGl4ID09IDEwID8gREVDIDogcmFkaXggPT0gOCA/IE9DVCA6IEhFWCkudGVzdChwYXJ0KSkgcmV0dXJuIGlucHV0O1xuICAgICAgbnVtYmVyID0gcGFyc2VJbnQocGFydCwgcmFkaXgpO1xuICAgIH1cbiAgICBudW1iZXJzLnB1c2gobnVtYmVyKTtcbiAgfVxuICBmb3IgKGluZGV4ID0gMDsgaW5kZXggPCBwYXJ0c0xlbmd0aDsgaW5kZXgrKykge1xuICAgIG51bWJlciA9IG51bWJlcnNbaW5kZXhdO1xuICAgIGlmIChpbmRleCA9PSBwYXJ0c0xlbmd0aCAtIDEpIHtcbiAgICAgIGlmIChudW1iZXIgPj0gcG93KDI1NiwgNSAtIHBhcnRzTGVuZ3RoKSkgcmV0dXJuIG51bGw7XG4gICAgfSBlbHNlIGlmIChudW1iZXIgPiAyNTUpIHJldHVybiBudWxsO1xuICB9XG4gIGlwdjQgPSBudW1iZXJzLnBvcCgpO1xuICBmb3IgKGluZGV4ID0gMDsgaW5kZXggPCBudW1iZXJzLmxlbmd0aDsgaW5kZXgrKykge1xuICAgIGlwdjQgKz0gbnVtYmVyc1tpbmRleF0gKiBwb3coMjU2LCAzIC0gaW5kZXgpO1xuICB9XG4gIHJldHVybiBpcHY0O1xufTtcblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG1heC1zdGF0ZW1lbnRzXG52YXIgcGFyc2VJUHY2ID0gZnVuY3Rpb24gKGlucHV0KSB7XG4gIHZhciBhZGRyZXNzID0gWzAsIDAsIDAsIDAsIDAsIDAsIDAsIDBdO1xuICB2YXIgcGllY2VJbmRleCA9IDA7XG4gIHZhciBjb21wcmVzcyA9IG51bGw7XG4gIHZhciBwb2ludGVyID0gMDtcbiAgdmFyIHZhbHVlLCBsZW5ndGgsIG51bWJlcnNTZWVuLCBpcHY0UGllY2UsIG51bWJlciwgc3dhcHMsIHN3YXA7XG5cbiAgdmFyIGNoYXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGlucHV0LmNoYXJBdChwb2ludGVyKTtcbiAgfTtcblxuICBpZiAoY2hhcigpID09ICc6Jykge1xuICAgIGlmIChpbnB1dC5jaGFyQXQoMSkgIT0gJzonKSByZXR1cm47XG4gICAgcG9pbnRlciArPSAyO1xuICAgIHBpZWNlSW5kZXgrKztcbiAgICBjb21wcmVzcyA9IHBpZWNlSW5kZXg7XG4gIH1cbiAgd2hpbGUgKGNoYXIoKSkge1xuICAgIGlmIChwaWVjZUluZGV4ID09IDgpIHJldHVybjtcbiAgICBpZiAoY2hhcigpID09ICc6Jykge1xuICAgICAgaWYgKGNvbXByZXNzICE9PSBudWxsKSByZXR1cm47XG4gICAgICBwb2ludGVyKys7XG4gICAgICBwaWVjZUluZGV4Kys7XG4gICAgICBjb21wcmVzcyA9IHBpZWNlSW5kZXg7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG4gICAgdmFsdWUgPSBsZW5ndGggPSAwO1xuICAgIHdoaWxlIChsZW5ndGggPCA0ICYmIEhFWC50ZXN0KGNoYXIoKSkpIHtcbiAgICAgIHZhbHVlID0gdmFsdWUgKiAxNiArIHBhcnNlSW50KGNoYXIoKSwgMTYpO1xuICAgICAgcG9pbnRlcisrO1xuICAgICAgbGVuZ3RoKys7XG4gICAgfVxuICAgIGlmIChjaGFyKCkgPT0gJy4nKSB7XG4gICAgICBpZiAobGVuZ3RoID09IDApIHJldHVybjtcbiAgICAgIHBvaW50ZXIgLT0gbGVuZ3RoO1xuICAgICAgaWYgKHBpZWNlSW5kZXggPiA2KSByZXR1cm47XG4gICAgICBudW1iZXJzU2VlbiA9IDA7XG4gICAgICB3aGlsZSAoY2hhcigpKSB7XG4gICAgICAgIGlwdjRQaWVjZSA9IG51bGw7XG4gICAgICAgIGlmIChudW1iZXJzU2VlbiA+IDApIHtcbiAgICAgICAgICBpZiAoY2hhcigpID09ICcuJyAmJiBudW1iZXJzU2VlbiA8IDQpIHBvaW50ZXIrKztcbiAgICAgICAgICBlbHNlIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIURJR0lULnRlc3QoY2hhcigpKSkgcmV0dXJuO1xuICAgICAgICB3aGlsZSAoRElHSVQudGVzdChjaGFyKCkpKSB7XG4gICAgICAgICAgbnVtYmVyID0gcGFyc2VJbnQoY2hhcigpLCAxMCk7XG4gICAgICAgICAgaWYgKGlwdjRQaWVjZSA9PT0gbnVsbCkgaXB2NFBpZWNlID0gbnVtYmVyO1xuICAgICAgICAgIGVsc2UgaWYgKGlwdjRQaWVjZSA9PSAwKSByZXR1cm47XG4gICAgICAgICAgZWxzZSBpcHY0UGllY2UgPSBpcHY0UGllY2UgKiAxMCArIG51bWJlcjtcbiAgICAgICAgICBpZiAoaXB2NFBpZWNlID4gMjU1KSByZXR1cm47XG4gICAgICAgICAgcG9pbnRlcisrO1xuICAgICAgICB9XG4gICAgICAgIGFkZHJlc3NbcGllY2VJbmRleF0gPSBhZGRyZXNzW3BpZWNlSW5kZXhdICogMjU2ICsgaXB2NFBpZWNlO1xuICAgICAgICBudW1iZXJzU2VlbisrO1xuICAgICAgICBpZiAobnVtYmVyc1NlZW4gPT0gMiB8fCBudW1iZXJzU2VlbiA9PSA0KSBwaWVjZUluZGV4Kys7XG4gICAgICB9XG4gICAgICBpZiAobnVtYmVyc1NlZW4gIT0gNCkgcmV0dXJuO1xuICAgICAgYnJlYWs7XG4gICAgfSBlbHNlIGlmIChjaGFyKCkgPT0gJzonKSB7XG4gICAgICBwb2ludGVyKys7XG4gICAgICBpZiAoIWNoYXIoKSkgcmV0dXJuO1xuICAgIH0gZWxzZSBpZiAoY2hhcigpKSByZXR1cm47XG4gICAgYWRkcmVzc1twaWVjZUluZGV4KytdID0gdmFsdWU7XG4gIH1cbiAgaWYgKGNvbXByZXNzICE9PSBudWxsKSB7XG4gICAgc3dhcHMgPSBwaWVjZUluZGV4IC0gY29tcHJlc3M7XG4gICAgcGllY2VJbmRleCA9IDc7XG4gICAgd2hpbGUgKHBpZWNlSW5kZXggIT0gMCAmJiBzd2FwcyA+IDApIHtcbiAgICAgIHN3YXAgPSBhZGRyZXNzW3BpZWNlSW5kZXhdO1xuICAgICAgYWRkcmVzc1twaWVjZUluZGV4LS1dID0gYWRkcmVzc1tjb21wcmVzcyArIHN3YXBzIC0gMV07XG4gICAgICBhZGRyZXNzW2NvbXByZXNzICsgLS1zd2Fwc10gPSBzd2FwO1xuICAgIH1cbiAgfSBlbHNlIGlmIChwaWVjZUluZGV4ICE9IDgpIHJldHVybjtcbiAgcmV0dXJuIGFkZHJlc3M7XG59O1xuXG52YXIgZmluZExvbmdlc3RaZXJvU2VxdWVuY2UgPSBmdW5jdGlvbiAoaXB2Nikge1xuICB2YXIgbWF4SW5kZXggPSBudWxsO1xuICB2YXIgbWF4TGVuZ3RoID0gMTtcbiAgdmFyIGN1cnJTdGFydCA9IG51bGw7XG4gIHZhciBjdXJyTGVuZ3RoID0gMDtcbiAgdmFyIGluZGV4ID0gMDtcbiAgZm9yICg7IGluZGV4IDwgODsgaW5kZXgrKykge1xuICAgIGlmIChpcHY2W2luZGV4XSAhPT0gMCkge1xuICAgICAgaWYgKGN1cnJMZW5ndGggPiBtYXhMZW5ndGgpIHtcbiAgICAgICAgbWF4SW5kZXggPSBjdXJyU3RhcnQ7XG4gICAgICAgIG1heExlbmd0aCA9IGN1cnJMZW5ndGg7XG4gICAgICB9XG4gICAgICBjdXJyU3RhcnQgPSBudWxsO1xuICAgICAgY3Vyckxlbmd0aCA9IDA7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChjdXJyU3RhcnQgPT09IG51bGwpIGN1cnJTdGFydCA9IGluZGV4O1xuICAgICAgKytjdXJyTGVuZ3RoO1xuICAgIH1cbiAgfVxuICBpZiAoY3Vyckxlbmd0aCA+IG1heExlbmd0aCkge1xuICAgIG1heEluZGV4ID0gY3VyclN0YXJ0O1xuICAgIG1heExlbmd0aCA9IGN1cnJMZW5ndGg7XG4gIH1cbiAgcmV0dXJuIG1heEluZGV4O1xufTtcblxudmFyIHNlcmlhbGl6ZUhvc3QgPSBmdW5jdGlvbiAoaG9zdCkge1xuICB2YXIgcmVzdWx0LCBpbmRleCwgY29tcHJlc3MsIGlnbm9yZTA7XG4gIC8vIGlwdjRcbiAgaWYgKHR5cGVvZiBob3N0ID09ICdudW1iZXInKSB7XG4gICAgcmVzdWx0ID0gW107XG4gICAgZm9yIChpbmRleCA9IDA7IGluZGV4IDwgNDsgaW5kZXgrKykge1xuICAgICAgcmVzdWx0LnVuc2hpZnQoaG9zdCAlIDI1Nik7XG4gICAgICBob3N0ID0gZmxvb3IoaG9zdCAvIDI1Nik7XG4gICAgfSByZXR1cm4gcmVzdWx0LmpvaW4oJy4nKTtcbiAgLy8gaXB2NlxuICB9IGVsc2UgaWYgKHR5cGVvZiBob3N0ID09ICdvYmplY3QnKSB7XG4gICAgcmVzdWx0ID0gJyc7XG4gICAgY29tcHJlc3MgPSBmaW5kTG9uZ2VzdFplcm9TZXF1ZW5jZShob3N0KTtcbiAgICBmb3IgKGluZGV4ID0gMDsgaW5kZXggPCA4OyBpbmRleCsrKSB7XG4gICAgICBpZiAoaWdub3JlMCAmJiBob3N0W2luZGV4XSA9PT0gMCkgY29udGludWU7XG4gICAgICBpZiAoaWdub3JlMCkgaWdub3JlMCA9IGZhbHNlO1xuICAgICAgaWYgKGNvbXByZXNzID09PSBpbmRleCkge1xuICAgICAgICByZXN1bHQgKz0gaW5kZXggPyAnOicgOiAnOjonO1xuICAgICAgICBpZ25vcmUwID0gdHJ1ZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJlc3VsdCArPSBob3N0W2luZGV4XS50b1N0cmluZygxNik7XG4gICAgICAgIGlmIChpbmRleCA8IDcpIHJlc3VsdCArPSAnOic7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiAnWycgKyByZXN1bHQgKyAnXSc7XG4gIH0gcmV0dXJuIGhvc3Q7XG59O1xuXG52YXIgQzBDb250cm9sUGVyY2VudEVuY29kZVNldCA9IHt9O1xudmFyIGZyYWdtZW50UGVyY2VudEVuY29kZVNldCA9IGFzc2lnbih7fSwgQzBDb250cm9sUGVyY2VudEVuY29kZVNldCwge1xuICAnICc6IDEsICdcIic6IDEsICc8JzogMSwgJz4nOiAxLCAnYCc6IDFcbn0pO1xudmFyIHBhdGhQZXJjZW50RW5jb2RlU2V0ID0gYXNzaWduKHt9LCBmcmFnbWVudFBlcmNlbnRFbmNvZGVTZXQsIHtcbiAgJyMnOiAxLCAnPyc6IDEsICd7JzogMSwgJ30nOiAxXG59KTtcbnZhciB1c2VyaW5mb1BlcmNlbnRFbmNvZGVTZXQgPSBhc3NpZ24oe30sIHBhdGhQZXJjZW50RW5jb2RlU2V0LCB7XG4gICcvJzogMSwgJzonOiAxLCAnOyc6IDEsICc9JzogMSwgJ0AnOiAxLCAnWyc6IDEsICdcXFxcJzogMSwgJ10nOiAxLCAnXic6IDEsICd8JzogMVxufSk7XG5cbnZhciBwZXJjZW50RW5jb2RlID0gZnVuY3Rpb24gKGNoYXIsIHNldCkge1xuICB2YXIgY29kZSA9IGNvZGVBdChjaGFyLCAwKTtcbiAgcmV0dXJuIGNvZGUgPiAweDIwICYmIGNvZGUgPCAweDdGICYmICFoYXMoc2V0LCBjaGFyKSA/IGNoYXIgOiBlbmNvZGVVUklDb21wb25lbnQoY2hhcik7XG59O1xuXG52YXIgc3BlY2lhbFNjaGVtZXMgPSB7XG4gIGZ0cDogMjEsXG4gIGZpbGU6IG51bGwsXG4gIGh0dHA6IDgwLFxuICBodHRwczogNDQzLFxuICB3czogODAsXG4gIHdzczogNDQzXG59O1xuXG52YXIgaXNTcGVjaWFsID0gZnVuY3Rpb24gKHVybCkge1xuICByZXR1cm4gaGFzKHNwZWNpYWxTY2hlbWVzLCB1cmwuc2NoZW1lKTtcbn07XG5cbnZhciBpbmNsdWRlc0NyZWRlbnRpYWxzID0gZnVuY3Rpb24gKHVybCkge1xuICByZXR1cm4gdXJsLnVzZXJuYW1lICE9ICcnIHx8IHVybC5wYXNzd29yZCAhPSAnJztcbn07XG5cbnZhciBjYW5ub3RIYXZlVXNlcm5hbWVQYXNzd29yZFBvcnQgPSBmdW5jdGlvbiAodXJsKSB7XG4gIHJldHVybiAhdXJsLmhvc3QgfHwgdXJsLmNhbm5vdEJlQUJhc2VVUkwgfHwgdXJsLnNjaGVtZSA9PSAnZmlsZSc7XG59O1xuXG52YXIgaXNXaW5kb3dzRHJpdmVMZXR0ZXIgPSBmdW5jdGlvbiAoc3RyaW5nLCBub3JtYWxpemVkKSB7XG4gIHZhciBzZWNvbmQ7XG4gIHJldHVybiBzdHJpbmcubGVuZ3RoID09IDIgJiYgQUxQSEEudGVzdChzdHJpbmcuY2hhckF0KDApKVxuICAgICYmICgoc2Vjb25kID0gc3RyaW5nLmNoYXJBdCgxKSkgPT0gJzonIHx8ICghbm9ybWFsaXplZCAmJiBzZWNvbmQgPT0gJ3wnKSk7XG59O1xuXG52YXIgc3RhcnRzV2l0aFdpbmRvd3NEcml2ZUxldHRlciA9IGZ1bmN0aW9uIChzdHJpbmcpIHtcbiAgdmFyIHRoaXJkO1xuICByZXR1cm4gc3RyaW5nLmxlbmd0aCA+IDEgJiYgaXNXaW5kb3dzRHJpdmVMZXR0ZXIoc3RyaW5nLnNsaWNlKDAsIDIpKSAmJiAoXG4gICAgc3RyaW5nLmxlbmd0aCA9PSAyIHx8XG4gICAgKCh0aGlyZCA9IHN0cmluZy5jaGFyQXQoMikpID09PSAnLycgfHwgdGhpcmQgPT09ICdcXFxcJyB8fCB0aGlyZCA9PT0gJz8nIHx8IHRoaXJkID09PSAnIycpXG4gICk7XG59O1xuXG52YXIgc2hvcnRlblVSTHNQYXRoID0gZnVuY3Rpb24gKHVybCkge1xuICB2YXIgcGF0aCA9IHVybC5wYXRoO1xuICB2YXIgcGF0aFNpemUgPSBwYXRoLmxlbmd0aDtcbiAgaWYgKHBhdGhTaXplICYmICh1cmwuc2NoZW1lICE9ICdmaWxlJyB8fCBwYXRoU2l6ZSAhPSAxIHx8ICFpc1dpbmRvd3NEcml2ZUxldHRlcihwYXRoWzBdLCB0cnVlKSkpIHtcbiAgICBwYXRoLnBvcCgpO1xuICB9XG59O1xuXG52YXIgaXNTaW5nbGVEb3QgPSBmdW5jdGlvbiAoc2VnbWVudCkge1xuICByZXR1cm4gc2VnbWVudCA9PT0gJy4nIHx8IHNlZ21lbnQudG9Mb3dlckNhc2UoKSA9PT0gJyUyZSc7XG59O1xuXG52YXIgaXNEb3VibGVEb3QgPSBmdW5jdGlvbiAoc2VnbWVudCkge1xuICBzZWdtZW50ID0gc2VnbWVudC50b0xvd2VyQ2FzZSgpO1xuICByZXR1cm4gc2VnbWVudCA9PT0gJy4uJyB8fCBzZWdtZW50ID09PSAnJTJlLicgfHwgc2VnbWVudCA9PT0gJy4lMmUnIHx8IHNlZ21lbnQgPT09ICclMmUlMmUnO1xufTtcblxuLy8gU3RhdGVzOlxudmFyIFNDSEVNRV9TVEFSVCA9IHt9O1xudmFyIFNDSEVNRSA9IHt9O1xudmFyIE5PX1NDSEVNRSA9IHt9O1xudmFyIFNQRUNJQUxfUkVMQVRJVkVfT1JfQVVUSE9SSVRZID0ge307XG52YXIgUEFUSF9PUl9BVVRIT1JJVFkgPSB7fTtcbnZhciBSRUxBVElWRSA9IHt9O1xudmFyIFJFTEFUSVZFX1NMQVNIID0ge307XG52YXIgU1BFQ0lBTF9BVVRIT1JJVFlfU0xBU0hFUyA9IHt9O1xudmFyIFNQRUNJQUxfQVVUSE9SSVRZX0lHTk9SRV9TTEFTSEVTID0ge307XG52YXIgQVVUSE9SSVRZID0ge307XG52YXIgSE9TVCA9IHt9O1xudmFyIEhPU1ROQU1FID0ge307XG52YXIgUE9SVCA9IHt9O1xudmFyIEZJTEUgPSB7fTtcbnZhciBGSUxFX1NMQVNIID0ge307XG52YXIgRklMRV9IT1NUID0ge307XG52YXIgUEFUSF9TVEFSVCA9IHt9O1xudmFyIFBBVEggPSB7fTtcbnZhciBDQU5OT1RfQkVfQV9CQVNFX1VSTF9QQVRIID0ge307XG52YXIgUVVFUlkgPSB7fTtcbnZhciBGUkFHTUVOVCA9IHt9O1xuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbWF4LXN0YXRlbWVudHNcbnZhciBwYXJzZVVSTCA9IGZ1bmN0aW9uICh1cmwsIGlucHV0LCBzdGF0ZU92ZXJyaWRlLCBiYXNlKSB7XG4gIHZhciBzdGF0ZSA9IHN0YXRlT3ZlcnJpZGUgfHwgU0NIRU1FX1NUQVJUO1xuICB2YXIgcG9pbnRlciA9IDA7XG4gIHZhciBidWZmZXIgPSAnJztcbiAgdmFyIHNlZW5BdCA9IGZhbHNlO1xuICB2YXIgc2VlbkJyYWNrZXQgPSBmYWxzZTtcbiAgdmFyIHNlZW5QYXNzd29yZFRva2VuID0gZmFsc2U7XG4gIHZhciBjb2RlUG9pbnRzLCBjaGFyLCBidWZmZXJDb2RlUG9pbnRzLCBmYWlsdXJlO1xuXG4gIGlmICghc3RhdGVPdmVycmlkZSkge1xuICAgIHVybC5zY2hlbWUgPSAnJztcbiAgICB1cmwudXNlcm5hbWUgPSAnJztcbiAgICB1cmwucGFzc3dvcmQgPSAnJztcbiAgICB1cmwuaG9zdCA9IG51bGw7XG4gICAgdXJsLnBvcnQgPSBudWxsO1xuICAgIHVybC5wYXRoID0gW107XG4gICAgdXJsLnF1ZXJ5ID0gbnVsbDtcbiAgICB1cmwuZnJhZ21lbnQgPSBudWxsO1xuICAgIHVybC5jYW5ub3RCZUFCYXNlVVJMID0gZmFsc2U7XG4gICAgaW5wdXQgPSBpbnB1dC5yZXBsYWNlKExFQURJTkdfQU5EX1RSQUlMSU5HX0MwX0NPTlRST0xfT1JfU1BBQ0UsICcnKTtcbiAgfVxuXG4gIGlucHV0ID0gaW5wdXQucmVwbGFjZShUQUJfQU5EX05FV19MSU5FLCAnJyk7XG5cbiAgY29kZVBvaW50cyA9IGFycmF5RnJvbShpbnB1dCk7XG5cbiAgd2hpbGUgKHBvaW50ZXIgPD0gY29kZVBvaW50cy5sZW5ndGgpIHtcbiAgICBjaGFyID0gY29kZVBvaW50c1twb2ludGVyXTtcbiAgICBzd2l0Y2ggKHN0YXRlKSB7XG4gICAgICBjYXNlIFNDSEVNRV9TVEFSVDpcbiAgICAgICAgaWYgKGNoYXIgJiYgQUxQSEEudGVzdChjaGFyKSkge1xuICAgICAgICAgIGJ1ZmZlciArPSBjaGFyLnRvTG93ZXJDYXNlKCk7XG4gICAgICAgICAgc3RhdGUgPSBTQ0hFTUU7XG4gICAgICAgIH0gZWxzZSBpZiAoIXN0YXRlT3ZlcnJpZGUpIHtcbiAgICAgICAgICBzdGF0ZSA9IE5PX1NDSEVNRTtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfSBlbHNlIHJldHVybiBJTlZBTElEX1NDSEVNRTtcbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGNhc2UgU0NIRU1FOlxuICAgICAgICBpZiAoY2hhciAmJiAoQUxQSEFOVU1FUklDLnRlc3QoY2hhcikgfHwgY2hhciA9PSAnKycgfHwgY2hhciA9PSAnLScgfHwgY2hhciA9PSAnLicpKSB7XG4gICAgICAgICAgYnVmZmVyICs9IGNoYXIudG9Mb3dlckNhc2UoKTtcbiAgICAgICAgfSBlbHNlIGlmIChjaGFyID09ICc6Jykge1xuICAgICAgICAgIGlmIChzdGF0ZU92ZXJyaWRlICYmIChcbiAgICAgICAgICAgIChpc1NwZWNpYWwodXJsKSAhPSBoYXMoc3BlY2lhbFNjaGVtZXMsIGJ1ZmZlcikpIHx8XG4gICAgICAgICAgICAoYnVmZmVyID09ICdmaWxlJyAmJiAoaW5jbHVkZXNDcmVkZW50aWFscyh1cmwpIHx8IHVybC5wb3J0ICE9PSBudWxsKSkgfHxcbiAgICAgICAgICAgICh1cmwuc2NoZW1lID09ICdmaWxlJyAmJiAhdXJsLmhvc3QpXG4gICAgICAgICAgKSkgcmV0dXJuO1xuICAgICAgICAgIHVybC5zY2hlbWUgPSBidWZmZXI7XG4gICAgICAgICAgaWYgKHN0YXRlT3ZlcnJpZGUpIHtcbiAgICAgICAgICAgIGlmIChpc1NwZWNpYWwodXJsKSAmJiBzcGVjaWFsU2NoZW1lc1t1cmwuc2NoZW1lXSA9PSB1cmwucG9ydCkgdXJsLnBvcnQgPSBudWxsO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cbiAgICAgICAgICBidWZmZXIgPSAnJztcbiAgICAgICAgICBpZiAodXJsLnNjaGVtZSA9PSAnZmlsZScpIHtcbiAgICAgICAgICAgIHN0YXRlID0gRklMRTtcbiAgICAgICAgICB9IGVsc2UgaWYgKGlzU3BlY2lhbCh1cmwpICYmIGJhc2UgJiYgYmFzZS5zY2hlbWUgPT0gdXJsLnNjaGVtZSkge1xuICAgICAgICAgICAgc3RhdGUgPSBTUEVDSUFMX1JFTEFUSVZFX09SX0FVVEhPUklUWTtcbiAgICAgICAgICB9IGVsc2UgaWYgKGlzU3BlY2lhbCh1cmwpKSB7XG4gICAgICAgICAgICBzdGF0ZSA9IFNQRUNJQUxfQVVUSE9SSVRZX1NMQVNIRVM7XG4gICAgICAgICAgfSBlbHNlIGlmIChjb2RlUG9pbnRzW3BvaW50ZXIgKyAxXSA9PSAnLycpIHtcbiAgICAgICAgICAgIHN0YXRlID0gUEFUSF9PUl9BVVRIT1JJVFk7XG4gICAgICAgICAgICBwb2ludGVyKys7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHVybC5jYW5ub3RCZUFCYXNlVVJMID0gdHJ1ZTtcbiAgICAgICAgICAgIHVybC5wYXRoLnB1c2goJycpO1xuICAgICAgICAgICAgc3RhdGUgPSBDQU5OT1RfQkVfQV9CQVNFX1VSTF9QQVRIO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmICghc3RhdGVPdmVycmlkZSkge1xuICAgICAgICAgIGJ1ZmZlciA9ICcnO1xuICAgICAgICAgIHN0YXRlID0gTk9fU0NIRU1FO1xuICAgICAgICAgIHBvaW50ZXIgPSAwO1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9IGVsc2UgcmV0dXJuIElOVkFMSURfU0NIRU1FO1xuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSBOT19TQ0hFTUU6XG4gICAgICAgIGlmICghYmFzZSB8fCAoYmFzZS5jYW5ub3RCZUFCYXNlVVJMICYmIGNoYXIgIT0gJyMnKSkgcmV0dXJuIElOVkFMSURfU0NIRU1FO1xuICAgICAgICBpZiAoYmFzZS5jYW5ub3RCZUFCYXNlVVJMICYmIGNoYXIgPT0gJyMnKSB7XG4gICAgICAgICAgdXJsLnNjaGVtZSA9IGJhc2Uuc2NoZW1lO1xuICAgICAgICAgIHVybC5wYXRoID0gYmFzZS5wYXRoLnNsaWNlKCk7XG4gICAgICAgICAgdXJsLnF1ZXJ5ID0gYmFzZS5xdWVyeTtcbiAgICAgICAgICB1cmwuZnJhZ21lbnQgPSAnJztcbiAgICAgICAgICB1cmwuY2Fubm90QmVBQmFzZVVSTCA9IHRydWU7XG4gICAgICAgICAgc3RhdGUgPSBGUkFHTUVOVDtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBzdGF0ZSA9IGJhc2Uuc2NoZW1lID09ICdmaWxlJyA/IEZJTEUgOiBSRUxBVElWRTtcbiAgICAgICAgY29udGludWU7XG5cbiAgICAgIGNhc2UgU1BFQ0lBTF9SRUxBVElWRV9PUl9BVVRIT1JJVFk6XG4gICAgICAgIGlmIChjaGFyID09ICcvJyAmJiBjb2RlUG9pbnRzW3BvaW50ZXIgKyAxXSA9PSAnLycpIHtcbiAgICAgICAgICBzdGF0ZSA9IFNQRUNJQUxfQVVUSE9SSVRZX0lHTk9SRV9TTEFTSEVTO1xuICAgICAgICAgIHBvaW50ZXIrKztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzdGF0ZSA9IFJFTEFUSVZFO1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9IGJyZWFrO1xuXG4gICAgICBjYXNlIFBBVEhfT1JfQVVUSE9SSVRZOlxuICAgICAgICBpZiAoY2hhciA9PSAnLycpIHtcbiAgICAgICAgICBzdGF0ZSA9IEFVVEhPUklUWTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzdGF0ZSA9IFBBVEg7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cblxuICAgICAgY2FzZSBSRUxBVElWRTpcbiAgICAgICAgdXJsLnNjaGVtZSA9IGJhc2Uuc2NoZW1lO1xuICAgICAgICBpZiAoY2hhciA9PSBFT0YpIHtcbiAgICAgICAgICB1cmwudXNlcm5hbWUgPSBiYXNlLnVzZXJuYW1lO1xuICAgICAgICAgIHVybC5wYXNzd29yZCA9IGJhc2UucGFzc3dvcmQ7XG4gICAgICAgICAgdXJsLmhvc3QgPSBiYXNlLmhvc3Q7XG4gICAgICAgICAgdXJsLnBvcnQgPSBiYXNlLnBvcnQ7XG4gICAgICAgICAgdXJsLnBhdGggPSBiYXNlLnBhdGguc2xpY2UoKTtcbiAgICAgICAgICB1cmwucXVlcnkgPSBiYXNlLnF1ZXJ5O1xuICAgICAgICB9IGVsc2UgaWYgKGNoYXIgPT0gJy8nIHx8IChjaGFyID09ICdcXFxcJyAmJiBpc1NwZWNpYWwodXJsKSkpIHtcbiAgICAgICAgICBzdGF0ZSA9IFJFTEFUSVZFX1NMQVNIO1xuICAgICAgICB9IGVsc2UgaWYgKGNoYXIgPT0gJz8nKSB7XG4gICAgICAgICAgdXJsLnVzZXJuYW1lID0gYmFzZS51c2VybmFtZTtcbiAgICAgICAgICB1cmwucGFzc3dvcmQgPSBiYXNlLnBhc3N3b3JkO1xuICAgICAgICAgIHVybC5ob3N0ID0gYmFzZS5ob3N0O1xuICAgICAgICAgIHVybC5wb3J0ID0gYmFzZS5wb3J0O1xuICAgICAgICAgIHVybC5wYXRoID0gYmFzZS5wYXRoLnNsaWNlKCk7XG4gICAgICAgICAgdXJsLnF1ZXJ5ID0gJyc7XG4gICAgICAgICAgc3RhdGUgPSBRVUVSWTtcbiAgICAgICAgfSBlbHNlIGlmIChjaGFyID09ICcjJykge1xuICAgICAgICAgIHVybC51c2VybmFtZSA9IGJhc2UudXNlcm5hbWU7XG4gICAgICAgICAgdXJsLnBhc3N3b3JkID0gYmFzZS5wYXNzd29yZDtcbiAgICAgICAgICB1cmwuaG9zdCA9IGJhc2UuaG9zdDtcbiAgICAgICAgICB1cmwucG9ydCA9IGJhc2UucG9ydDtcbiAgICAgICAgICB1cmwucGF0aCA9IGJhc2UucGF0aC5zbGljZSgpO1xuICAgICAgICAgIHVybC5xdWVyeSA9IGJhc2UucXVlcnk7XG4gICAgICAgICAgdXJsLmZyYWdtZW50ID0gJyc7XG4gICAgICAgICAgc3RhdGUgPSBGUkFHTUVOVDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB1cmwudXNlcm5hbWUgPSBiYXNlLnVzZXJuYW1lO1xuICAgICAgICAgIHVybC5wYXNzd29yZCA9IGJhc2UucGFzc3dvcmQ7XG4gICAgICAgICAgdXJsLmhvc3QgPSBiYXNlLmhvc3Q7XG4gICAgICAgICAgdXJsLnBvcnQgPSBiYXNlLnBvcnQ7XG4gICAgICAgICAgdXJsLnBhdGggPSBiYXNlLnBhdGguc2xpY2UoKTtcbiAgICAgICAgICB1cmwucGF0aC5wb3AoKTtcbiAgICAgICAgICBzdGF0ZSA9IFBBVEg7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH0gYnJlYWs7XG5cbiAgICAgIGNhc2UgUkVMQVRJVkVfU0xBU0g6XG4gICAgICAgIGlmIChpc1NwZWNpYWwodXJsKSAmJiAoY2hhciA9PSAnLycgfHwgY2hhciA9PSAnXFxcXCcpKSB7XG4gICAgICAgICAgc3RhdGUgPSBTUEVDSUFMX0FVVEhPUklUWV9JR05PUkVfU0xBU0hFUztcbiAgICAgICAgfSBlbHNlIGlmIChjaGFyID09ICcvJykge1xuICAgICAgICAgIHN0YXRlID0gQVVUSE9SSVRZO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHVybC51c2VybmFtZSA9IGJhc2UudXNlcm5hbWU7XG4gICAgICAgICAgdXJsLnBhc3N3b3JkID0gYmFzZS5wYXNzd29yZDtcbiAgICAgICAgICB1cmwuaG9zdCA9IGJhc2UuaG9zdDtcbiAgICAgICAgICB1cmwucG9ydCA9IGJhc2UucG9ydDtcbiAgICAgICAgICBzdGF0ZSA9IFBBVEg7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH0gYnJlYWs7XG5cbiAgICAgIGNhc2UgU1BFQ0lBTF9BVVRIT1JJVFlfU0xBU0hFUzpcbiAgICAgICAgc3RhdGUgPSBTUEVDSUFMX0FVVEhPUklUWV9JR05PUkVfU0xBU0hFUztcbiAgICAgICAgaWYgKGNoYXIgIT0gJy8nIHx8IGJ1ZmZlci5jaGFyQXQocG9pbnRlciArIDEpICE9ICcvJykgY29udGludWU7XG4gICAgICAgIHBvaW50ZXIrKztcbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGNhc2UgU1BFQ0lBTF9BVVRIT1JJVFlfSUdOT1JFX1NMQVNIRVM6XG4gICAgICAgIGlmIChjaGFyICE9ICcvJyAmJiBjaGFyICE9ICdcXFxcJykge1xuICAgICAgICAgIHN0YXRlID0gQVVUSE9SSVRZO1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9IGJyZWFrO1xuXG4gICAgICBjYXNlIEFVVEhPUklUWTpcbiAgICAgICAgaWYgKGNoYXIgPT0gJ0AnKSB7XG4gICAgICAgICAgaWYgKHNlZW5BdCkgYnVmZmVyID0gJyU0MCcgKyBidWZmZXI7XG4gICAgICAgICAgc2VlbkF0ID0gdHJ1ZTtcbiAgICAgICAgICBidWZmZXJDb2RlUG9pbnRzID0gYXJyYXlGcm9tKGJ1ZmZlcik7XG4gICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBidWZmZXJDb2RlUG9pbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB2YXIgY29kZVBvaW50ID0gYnVmZmVyQ29kZVBvaW50c1tpXTtcbiAgICAgICAgICAgIGlmIChjb2RlUG9pbnQgPT0gJzonICYmICFzZWVuUGFzc3dvcmRUb2tlbikge1xuICAgICAgICAgICAgICBzZWVuUGFzc3dvcmRUb2tlbiA9IHRydWU7XG4gICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIGVuY29kZWRDb2RlUG9pbnRzID0gcGVyY2VudEVuY29kZShjb2RlUG9pbnQsIHVzZXJpbmZvUGVyY2VudEVuY29kZVNldCk7XG4gICAgICAgICAgICBpZiAoc2VlblBhc3N3b3JkVG9rZW4pIHVybC5wYXNzd29yZCArPSBlbmNvZGVkQ29kZVBvaW50cztcbiAgICAgICAgICAgIGVsc2UgdXJsLnVzZXJuYW1lICs9IGVuY29kZWRDb2RlUG9pbnRzO1xuICAgICAgICAgIH1cbiAgICAgICAgICBidWZmZXIgPSAnJztcbiAgICAgICAgfSBlbHNlIGlmIChcbiAgICAgICAgICBjaGFyID09IEVPRiB8fCBjaGFyID09ICcvJyB8fCBjaGFyID09ICc/JyB8fCBjaGFyID09ICcjJyB8fFxuICAgICAgICAgIChjaGFyID09ICdcXFxcJyAmJiBpc1NwZWNpYWwodXJsKSlcbiAgICAgICAgKSB7XG4gICAgICAgICAgaWYgKHNlZW5BdCAmJiBidWZmZXIgPT0gJycpIHJldHVybiBJTlZBTElEX0FVVEhPUklUWTtcbiAgICAgICAgICBwb2ludGVyIC09IGFycmF5RnJvbShidWZmZXIpLmxlbmd0aCArIDE7XG4gICAgICAgICAgYnVmZmVyID0gJyc7XG4gICAgICAgICAgc3RhdGUgPSBIT1NUO1xuICAgICAgICB9IGVsc2UgYnVmZmVyICs9IGNoYXI7XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBjYXNlIEhPU1Q6XG4gICAgICBjYXNlIEhPU1ROQU1FOlxuICAgICAgICBpZiAoc3RhdGVPdmVycmlkZSAmJiB1cmwuc2NoZW1lID09ICdmaWxlJykge1xuICAgICAgICAgIHN0YXRlID0gRklMRV9IT1NUO1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9IGVsc2UgaWYgKGNoYXIgPT0gJzonICYmICFzZWVuQnJhY2tldCkge1xuICAgICAgICAgIGlmIChidWZmZXIgPT0gJycpIHJldHVybiBJTlZBTElEX0hPU1Q7XG4gICAgICAgICAgZmFpbHVyZSA9IHBhcnNlSG9zdCh1cmwsIGJ1ZmZlcik7XG4gICAgICAgICAgaWYgKGZhaWx1cmUpIHJldHVybiBmYWlsdXJlO1xuICAgICAgICAgIGJ1ZmZlciA9ICcnO1xuICAgICAgICAgIHN0YXRlID0gUE9SVDtcbiAgICAgICAgICBpZiAoc3RhdGVPdmVycmlkZSA9PSBIT1NUTkFNRSkgcmV0dXJuO1xuICAgICAgICB9IGVsc2UgaWYgKFxuICAgICAgICAgIGNoYXIgPT0gRU9GIHx8IGNoYXIgPT0gJy8nIHx8IGNoYXIgPT0gJz8nIHx8IGNoYXIgPT0gJyMnIHx8XG4gICAgICAgICAgKGNoYXIgPT0gJ1xcXFwnICYmIGlzU3BlY2lhbCh1cmwpKVxuICAgICAgICApIHtcbiAgICAgICAgICBpZiAoaXNTcGVjaWFsKHVybCkgJiYgYnVmZmVyID09ICcnKSByZXR1cm4gSU5WQUxJRF9IT1NUO1xuICAgICAgICAgIGlmIChzdGF0ZU92ZXJyaWRlICYmIGJ1ZmZlciA9PSAnJyAmJiAoaW5jbHVkZXNDcmVkZW50aWFscyh1cmwpIHx8IHVybC5wb3J0ICE9PSBudWxsKSkgcmV0dXJuO1xuICAgICAgICAgIGZhaWx1cmUgPSBwYXJzZUhvc3QodXJsLCBidWZmZXIpO1xuICAgICAgICAgIGlmIChmYWlsdXJlKSByZXR1cm4gZmFpbHVyZTtcbiAgICAgICAgICBidWZmZXIgPSAnJztcbiAgICAgICAgICBzdGF0ZSA9IFBBVEhfU1RBUlQ7XG4gICAgICAgICAgaWYgKHN0YXRlT3ZlcnJpZGUpIHJldHVybjtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpZiAoY2hhciA9PSAnWycpIHNlZW5CcmFja2V0ID0gdHJ1ZTtcbiAgICAgICAgICBlbHNlIGlmIChjaGFyID09ICddJykgc2VlbkJyYWNrZXQgPSBmYWxzZTtcbiAgICAgICAgICBidWZmZXIgKz0gY2hhcjtcbiAgICAgICAgfSBicmVhaztcblxuICAgICAgY2FzZSBQT1JUOlxuICAgICAgICBpZiAoRElHSVQudGVzdChjaGFyKSkge1xuICAgICAgICAgIGJ1ZmZlciArPSBjaGFyO1xuICAgICAgICB9IGVsc2UgaWYgKFxuICAgICAgICAgIGNoYXIgPT0gRU9GIHx8IGNoYXIgPT0gJy8nIHx8IGNoYXIgPT0gJz8nIHx8IGNoYXIgPT0gJyMnIHx8XG4gICAgICAgICAgKGNoYXIgPT0gJ1xcXFwnICYmIGlzU3BlY2lhbCh1cmwpKSB8fFxuICAgICAgICAgIHN0YXRlT3ZlcnJpZGVcbiAgICAgICAgKSB7XG4gICAgICAgICAgaWYgKGJ1ZmZlciAhPSAnJykge1xuICAgICAgICAgICAgdmFyIHBvcnQgPSBwYXJzZUludChidWZmZXIsIDEwKTtcbiAgICAgICAgICAgIGlmIChwb3J0ID4gMHhGRkZGKSByZXR1cm4gSU5WQUxJRF9QT1JUO1xuICAgICAgICAgICAgdXJsLnBvcnQgPSAoaXNTcGVjaWFsKHVybCkgJiYgcG9ydCA9PT0gc3BlY2lhbFNjaGVtZXNbdXJsLnNjaGVtZV0pID8gbnVsbCA6IHBvcnQ7XG4gICAgICAgICAgICBidWZmZXIgPSAnJztcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHN0YXRlT3ZlcnJpZGUpIHJldHVybjtcbiAgICAgICAgICBzdGF0ZSA9IFBBVEhfU1RBUlQ7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH0gZWxzZSByZXR1cm4gSU5WQUxJRF9QT1JUO1xuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSBGSUxFOlxuICAgICAgICB1cmwuc2NoZW1lID0gJ2ZpbGUnO1xuICAgICAgICBpZiAoY2hhciA9PSAnLycgfHwgY2hhciA9PSAnXFxcXCcpIHN0YXRlID0gRklMRV9TTEFTSDtcbiAgICAgICAgZWxzZSBpZiAoYmFzZSAmJiBiYXNlLnNjaGVtZSA9PSAnZmlsZScpIHtcbiAgICAgICAgICBpZiAoY2hhciA9PSBFT0YpIHtcbiAgICAgICAgICAgIHVybC5ob3N0ID0gYmFzZS5ob3N0O1xuICAgICAgICAgICAgdXJsLnBhdGggPSBiYXNlLnBhdGguc2xpY2UoKTtcbiAgICAgICAgICAgIHVybC5xdWVyeSA9IGJhc2UucXVlcnk7XG4gICAgICAgICAgfSBlbHNlIGlmIChjaGFyID09ICc/Jykge1xuICAgICAgICAgICAgdXJsLmhvc3QgPSBiYXNlLmhvc3Q7XG4gICAgICAgICAgICB1cmwucGF0aCA9IGJhc2UucGF0aC5zbGljZSgpO1xuICAgICAgICAgICAgdXJsLnF1ZXJ5ID0gJyc7XG4gICAgICAgICAgICBzdGF0ZSA9IFFVRVJZO1xuICAgICAgICAgIH0gZWxzZSBpZiAoY2hhciA9PSAnIycpIHtcbiAgICAgICAgICAgIHVybC5ob3N0ID0gYmFzZS5ob3N0O1xuICAgICAgICAgICAgdXJsLnBhdGggPSBiYXNlLnBhdGguc2xpY2UoKTtcbiAgICAgICAgICAgIHVybC5xdWVyeSA9IGJhc2UucXVlcnk7XG4gICAgICAgICAgICB1cmwuZnJhZ21lbnQgPSAnJztcbiAgICAgICAgICAgIHN0YXRlID0gRlJBR01FTlQ7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmICghc3RhcnRzV2l0aFdpbmRvd3NEcml2ZUxldHRlcihjb2RlUG9pbnRzLnNsaWNlKHBvaW50ZXIpLmpvaW4oJycpKSkge1xuICAgICAgICAgICAgICB1cmwuaG9zdCA9IGJhc2UuaG9zdDtcbiAgICAgICAgICAgICAgdXJsLnBhdGggPSBiYXNlLnBhdGguc2xpY2UoKTtcbiAgICAgICAgICAgICAgc2hvcnRlblVSTHNQYXRoKHVybCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBzdGF0ZSA9IFBBVEg7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgc3RhdGUgPSBQQVRIO1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9IGJyZWFrO1xuXG4gICAgICBjYXNlIEZJTEVfU0xBU0g6XG4gICAgICAgIGlmIChjaGFyID09ICcvJyB8fCBjaGFyID09ICdcXFxcJykge1xuICAgICAgICAgIHN0YXRlID0gRklMRV9IT1NUO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGlmIChiYXNlICYmIGJhc2Uuc2NoZW1lID09ICdmaWxlJyAmJiAhc3RhcnRzV2l0aFdpbmRvd3NEcml2ZUxldHRlcihjb2RlUG9pbnRzLnNsaWNlKHBvaW50ZXIpLmpvaW4oJycpKSkge1xuICAgICAgICAgIGlmIChpc1dpbmRvd3NEcml2ZUxldHRlcihiYXNlLnBhdGhbMF0sIHRydWUpKSB1cmwucGF0aC5wdXNoKGJhc2UucGF0aFswXSk7XG4gICAgICAgICAgZWxzZSB1cmwuaG9zdCA9IGJhc2UuaG9zdDtcbiAgICAgICAgfVxuICAgICAgICBzdGF0ZSA9IFBBVEg7XG4gICAgICAgIGNvbnRpbnVlO1xuXG4gICAgICBjYXNlIEZJTEVfSE9TVDpcbiAgICAgICAgaWYgKGNoYXIgPT0gRU9GIHx8IGNoYXIgPT0gJy8nIHx8IGNoYXIgPT0gJ1xcXFwnIHx8IGNoYXIgPT0gJz8nIHx8IGNoYXIgPT0gJyMnKSB7XG4gICAgICAgICAgaWYgKCFzdGF0ZU92ZXJyaWRlICYmIGlzV2luZG93c0RyaXZlTGV0dGVyKGJ1ZmZlcikpIHtcbiAgICAgICAgICAgIHN0YXRlID0gUEFUSDtcbiAgICAgICAgICB9IGVsc2UgaWYgKGJ1ZmZlciA9PSAnJykge1xuICAgICAgICAgICAgdXJsLmhvc3QgPSAnJztcbiAgICAgICAgICAgIGlmIChzdGF0ZU92ZXJyaWRlKSByZXR1cm47XG4gICAgICAgICAgICBzdGF0ZSA9IFBBVEhfU1RBUlQ7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGZhaWx1cmUgPSBwYXJzZUhvc3QodXJsLCBidWZmZXIpO1xuICAgICAgICAgICAgaWYgKGZhaWx1cmUpIHJldHVybiBmYWlsdXJlO1xuICAgICAgICAgICAgaWYgKHVybC5ob3N0ID09ICdsb2NhbGhvc3QnKSB1cmwuaG9zdCA9ICcnO1xuICAgICAgICAgICAgaWYgKHN0YXRlT3ZlcnJpZGUpIHJldHVybjtcbiAgICAgICAgICAgIGJ1ZmZlciA9ICcnO1xuICAgICAgICAgICAgc3RhdGUgPSBQQVRIX1NUQVJUO1xuICAgICAgICAgIH0gY29udGludWU7XG4gICAgICAgIH0gZWxzZSBidWZmZXIgKz0gY2hhcjtcbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGNhc2UgUEFUSF9TVEFSVDpcbiAgICAgICAgaWYgKGlzU3BlY2lhbCh1cmwpKSB7XG4gICAgICAgICAgc3RhdGUgPSBQQVRIO1xuICAgICAgICAgIGlmIChjaGFyICE9ICcvJyAmJiBjaGFyICE9ICdcXFxcJykgY29udGludWU7XG4gICAgICAgIH0gZWxzZSBpZiAoIXN0YXRlT3ZlcnJpZGUgJiYgY2hhciA9PSAnPycpIHtcbiAgICAgICAgICB1cmwucXVlcnkgPSAnJztcbiAgICAgICAgICBzdGF0ZSA9IFFVRVJZO1xuICAgICAgICB9IGVsc2UgaWYgKCFzdGF0ZU92ZXJyaWRlICYmIGNoYXIgPT0gJyMnKSB7XG4gICAgICAgICAgdXJsLmZyYWdtZW50ID0gJyc7XG4gICAgICAgICAgc3RhdGUgPSBGUkFHTUVOVDtcbiAgICAgICAgfSBlbHNlIGlmIChjaGFyICE9IEVPRikge1xuICAgICAgICAgIHN0YXRlID0gUEFUSDtcbiAgICAgICAgICBpZiAoY2hhciAhPSAnLycpIGNvbnRpbnVlO1xuICAgICAgICB9IGJyZWFrO1xuXG4gICAgICBjYXNlIFBBVEg6XG4gICAgICAgIGlmIChcbiAgICAgICAgICBjaGFyID09IEVPRiB8fCBjaGFyID09ICcvJyB8fFxuICAgICAgICAgIChjaGFyID09ICdcXFxcJyAmJiBpc1NwZWNpYWwodXJsKSkgfHxcbiAgICAgICAgICAoIXN0YXRlT3ZlcnJpZGUgJiYgKGNoYXIgPT0gJz8nIHx8IGNoYXIgPT0gJyMnKSlcbiAgICAgICAgKSB7XG4gICAgICAgICAgaWYgKGlzRG91YmxlRG90KGJ1ZmZlcikpIHtcbiAgICAgICAgICAgIHNob3J0ZW5VUkxzUGF0aCh1cmwpO1xuICAgICAgICAgICAgaWYgKGNoYXIgIT0gJy8nICYmICEoY2hhciA9PSAnXFxcXCcgJiYgaXNTcGVjaWFsKHVybCkpKSB7XG4gICAgICAgICAgICAgIHVybC5wYXRoLnB1c2goJycpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSBpZiAoaXNTaW5nbGVEb3QoYnVmZmVyKSkge1xuICAgICAgICAgICAgaWYgKGNoYXIgIT0gJy8nICYmICEoY2hhciA9PSAnXFxcXCcgJiYgaXNTcGVjaWFsKHVybCkpKSB7XG4gICAgICAgICAgICAgIHVybC5wYXRoLnB1c2goJycpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAodXJsLnNjaGVtZSA9PSAnZmlsZScgJiYgIXVybC5wYXRoLmxlbmd0aCAmJiBpc1dpbmRvd3NEcml2ZUxldHRlcihidWZmZXIpKSB7XG4gICAgICAgICAgICAgIGlmICh1cmwuaG9zdCkgdXJsLmhvc3QgPSAnJztcbiAgICAgICAgICAgICAgYnVmZmVyID0gYnVmZmVyLmNoYXJBdCgwKSArICc6JzsgLy8gbm9ybWFsaXplIHdpbmRvd3MgZHJpdmUgbGV0dGVyXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB1cmwucGF0aC5wdXNoKGJ1ZmZlcik7XG4gICAgICAgICAgfVxuICAgICAgICAgIGJ1ZmZlciA9ICcnO1xuICAgICAgICAgIGlmICh1cmwuc2NoZW1lID09ICdmaWxlJyAmJiAoY2hhciA9PSBFT0YgfHwgY2hhciA9PSAnPycgfHwgY2hhciA9PSAnIycpKSB7XG4gICAgICAgICAgICB3aGlsZSAodXJsLnBhdGgubGVuZ3RoID4gMSAmJiB1cmwucGF0aFswXSA9PT0gJycpIHtcbiAgICAgICAgICAgICAgdXJsLnBhdGguc2hpZnQoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKGNoYXIgPT0gJz8nKSB7XG4gICAgICAgICAgICB1cmwucXVlcnkgPSAnJztcbiAgICAgICAgICAgIHN0YXRlID0gUVVFUlk7XG4gICAgICAgICAgfSBlbHNlIGlmIChjaGFyID09ICcjJykge1xuICAgICAgICAgICAgdXJsLmZyYWdtZW50ID0gJyc7XG4gICAgICAgICAgICBzdGF0ZSA9IEZSQUdNRU5UO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBidWZmZXIgKz0gcGVyY2VudEVuY29kZShjaGFyLCBwYXRoUGVyY2VudEVuY29kZVNldCk7XG4gICAgICAgIH0gYnJlYWs7XG5cbiAgICAgIGNhc2UgQ0FOTk9UX0JFX0FfQkFTRV9VUkxfUEFUSDpcbiAgICAgICAgaWYgKGNoYXIgPT0gJz8nKSB7XG4gICAgICAgICAgdXJsLnF1ZXJ5ID0gJyc7XG4gICAgICAgICAgc3RhdGUgPSBRVUVSWTtcbiAgICAgICAgfSBlbHNlIGlmIChjaGFyID09ICcjJykge1xuICAgICAgICAgIHVybC5mcmFnbWVudCA9ICcnO1xuICAgICAgICAgIHN0YXRlID0gRlJBR01FTlQ7XG4gICAgICAgIH0gZWxzZSBpZiAoY2hhciAhPSBFT0YpIHtcbiAgICAgICAgICB1cmwucGF0aFswXSArPSBwZXJjZW50RW5jb2RlKGNoYXIsIEMwQ29udHJvbFBlcmNlbnRFbmNvZGVTZXQpO1xuICAgICAgICB9IGJyZWFrO1xuXG4gICAgICBjYXNlIFFVRVJZOlxuICAgICAgICBpZiAoIXN0YXRlT3ZlcnJpZGUgJiYgY2hhciA9PSAnIycpIHtcbiAgICAgICAgICB1cmwuZnJhZ21lbnQgPSAnJztcbiAgICAgICAgICBzdGF0ZSA9IEZSQUdNRU5UO1xuICAgICAgICB9IGVsc2UgaWYgKGNoYXIgIT0gRU9GKSB7XG4gICAgICAgICAgaWYgKGNoYXIgPT0gXCInXCIgJiYgaXNTcGVjaWFsKHVybCkpIHVybC5xdWVyeSArPSAnJTI3JztcbiAgICAgICAgICBlbHNlIGlmIChjaGFyID09ICcjJykgdXJsLnF1ZXJ5ICs9ICclMjMnO1xuICAgICAgICAgIGVsc2UgdXJsLnF1ZXJ5ICs9IHBlcmNlbnRFbmNvZGUoY2hhciwgQzBDb250cm9sUGVyY2VudEVuY29kZVNldCk7XG4gICAgICAgIH0gYnJlYWs7XG5cbiAgICAgIGNhc2UgRlJBR01FTlQ6XG4gICAgICAgIGlmIChjaGFyICE9IEVPRikgdXJsLmZyYWdtZW50ICs9IHBlcmNlbnRFbmNvZGUoY2hhciwgZnJhZ21lbnRQZXJjZW50RW5jb2RlU2V0KTtcbiAgICAgICAgYnJlYWs7XG4gICAgfVxuXG4gICAgcG9pbnRlcisrO1xuICB9XG59O1xuXG4vLyBgVVJMYCBjb25zdHJ1Y3RvclxuLy8gaHR0cHM6Ly91cmwuc3BlYy53aGF0d2cub3JnLyN1cmwtY2xhc3NcbnZhciBVUkxDb25zdHJ1Y3RvciA9IGZ1bmN0aW9uIFVSTCh1cmwgLyogLCBiYXNlICovKSB7XG4gIHZhciB0aGF0ID0gYW5JbnN0YW5jZSh0aGlzLCBVUkxDb25zdHJ1Y3RvciwgJ1VSTCcpO1xuICB2YXIgYmFzZSA9IGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkO1xuICB2YXIgdXJsU3RyaW5nID0gU3RyaW5nKHVybCk7XG4gIHZhciBzdGF0ZSA9IHNldEludGVybmFsU3RhdGUodGhhdCwgeyB0eXBlOiAnVVJMJyB9KTtcbiAgdmFyIGJhc2VTdGF0ZSwgZmFpbHVyZTtcbiAgaWYgKGJhc2UgIT09IHVuZGVmaW5lZCkge1xuICAgIGlmIChiYXNlIGluc3RhbmNlb2YgVVJMQ29uc3RydWN0b3IpIGJhc2VTdGF0ZSA9IGdldEludGVybmFsVVJMU3RhdGUoYmFzZSk7XG4gICAgZWxzZSB7XG4gICAgICBmYWlsdXJlID0gcGFyc2VVUkwoYmFzZVN0YXRlID0ge30sIFN0cmluZyhiYXNlKSk7XG4gICAgICBpZiAoZmFpbHVyZSkgdGhyb3cgVHlwZUVycm9yKGZhaWx1cmUpO1xuICAgIH1cbiAgfVxuICBmYWlsdXJlID0gcGFyc2VVUkwoc3RhdGUsIHVybFN0cmluZywgbnVsbCwgYmFzZVN0YXRlKTtcbiAgaWYgKGZhaWx1cmUpIHRocm93IFR5cGVFcnJvcihmYWlsdXJlKTtcbiAgdmFyIHNlYXJjaFBhcmFtcyA9IHN0YXRlLnNlYXJjaFBhcmFtcyA9IG5ldyBVUkxTZWFyY2hQYXJhbXMoKTtcbiAgdmFyIHNlYXJjaFBhcmFtc1N0YXRlID0gZ2V0SW50ZXJuYWxTZWFyY2hQYXJhbXNTdGF0ZShzZWFyY2hQYXJhbXMpO1xuICBzZWFyY2hQYXJhbXNTdGF0ZS51cGRhdGVTZWFyY2hQYXJhbXMoc3RhdGUucXVlcnkpO1xuICBzZWFyY2hQYXJhbXNTdGF0ZS51cGRhdGVVUkwgPSBmdW5jdGlvbiAoKSB7XG4gICAgc3RhdGUucXVlcnkgPSBTdHJpbmcoc2VhcmNoUGFyYW1zKSB8fCBudWxsO1xuICB9O1xuICBpZiAoIURFU0NSSVBUT1JTKSB7XG4gICAgdGhhdC5ocmVmID0gc2VyaWFsaXplVVJMLmNhbGwodGhhdCk7XG4gICAgdGhhdC5vcmlnaW4gPSBnZXRPcmlnaW4uY2FsbCh0aGF0KTtcbiAgICB0aGF0LnByb3RvY29sID0gZ2V0UHJvdG9jb2wuY2FsbCh0aGF0KTtcbiAgICB0aGF0LnVzZXJuYW1lID0gZ2V0VXNlcm5hbWUuY2FsbCh0aGF0KTtcbiAgICB0aGF0LnBhc3N3b3JkID0gZ2V0UGFzc3dvcmQuY2FsbCh0aGF0KTtcbiAgICB0aGF0Lmhvc3QgPSBnZXRIb3N0LmNhbGwodGhhdCk7XG4gICAgdGhhdC5ob3N0bmFtZSA9IGdldEhvc3RuYW1lLmNhbGwodGhhdCk7XG4gICAgdGhhdC5wb3J0ID0gZ2V0UG9ydC5jYWxsKHRoYXQpO1xuICAgIHRoYXQucGF0aG5hbWUgPSBnZXRQYXRobmFtZS5jYWxsKHRoYXQpO1xuICAgIHRoYXQuc2VhcmNoID0gZ2V0U2VhcmNoLmNhbGwodGhhdCk7XG4gICAgdGhhdC5zZWFyY2hQYXJhbXMgPSBnZXRTZWFyY2hQYXJhbXMuY2FsbCh0aGF0KTtcbiAgICB0aGF0Lmhhc2ggPSBnZXRIYXNoLmNhbGwodGhhdCk7XG4gIH1cbn07XG5cbnZhciBVUkxQcm90b3R5cGUgPSBVUkxDb25zdHJ1Y3Rvci5wcm90b3R5cGU7XG5cbnZhciBzZXJpYWxpemVVUkwgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciB1cmwgPSBnZXRJbnRlcm5hbFVSTFN0YXRlKHRoaXMpO1xuICB2YXIgc2NoZW1lID0gdXJsLnNjaGVtZTtcbiAgdmFyIHVzZXJuYW1lID0gdXJsLnVzZXJuYW1lO1xuICB2YXIgcGFzc3dvcmQgPSB1cmwucGFzc3dvcmQ7XG4gIHZhciBob3N0ID0gdXJsLmhvc3Q7XG4gIHZhciBwb3J0ID0gdXJsLnBvcnQ7XG4gIHZhciBwYXRoID0gdXJsLnBhdGg7XG4gIHZhciBxdWVyeSA9IHVybC5xdWVyeTtcbiAgdmFyIGZyYWdtZW50ID0gdXJsLmZyYWdtZW50O1xuICB2YXIgb3V0cHV0ID0gc2NoZW1lICsgJzonO1xuICBpZiAoaG9zdCAhPT0gbnVsbCkge1xuICAgIG91dHB1dCArPSAnLy8nO1xuICAgIGlmIChpbmNsdWRlc0NyZWRlbnRpYWxzKHVybCkpIHtcbiAgICAgIG91dHB1dCArPSB1c2VybmFtZSArIChwYXNzd29yZCA/ICc6JyArIHBhc3N3b3JkIDogJycpICsgJ0AnO1xuICAgIH1cbiAgICBvdXRwdXQgKz0gc2VyaWFsaXplSG9zdChob3N0KTtcbiAgICBpZiAocG9ydCAhPT0gbnVsbCkgb3V0cHV0ICs9ICc6JyArIHBvcnQ7XG4gIH0gZWxzZSBpZiAoc2NoZW1lID09ICdmaWxlJykgb3V0cHV0ICs9ICcvLyc7XG4gIG91dHB1dCArPSB1cmwuY2Fubm90QmVBQmFzZVVSTCA/IHBhdGhbMF0gOiBwYXRoLmxlbmd0aCA/ICcvJyArIHBhdGguam9pbignLycpIDogJyc7XG4gIGlmIChxdWVyeSAhPT0gbnVsbCkgb3V0cHV0ICs9ICc/JyArIHF1ZXJ5O1xuICBpZiAoZnJhZ21lbnQgIT09IG51bGwpIG91dHB1dCArPSAnIycgKyBmcmFnbWVudDtcbiAgcmV0dXJuIG91dHB1dDtcbn07XG5cbnZhciBnZXRPcmlnaW4gPSBmdW5jdGlvbiAoKSB7XG4gIHZhciB1cmwgPSBnZXRJbnRlcm5hbFVSTFN0YXRlKHRoaXMpO1xuICB2YXIgc2NoZW1lID0gdXJsLnNjaGVtZTtcbiAgdmFyIHBvcnQgPSB1cmwucG9ydDtcbiAgaWYgKHNjaGVtZSA9PSAnYmxvYicpIHRyeSB7XG4gICAgcmV0dXJuIG5ldyBVUkwoc2NoZW1lLnBhdGhbMF0pLm9yaWdpbjtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICByZXR1cm4gJ251bGwnO1xuICB9XG4gIGlmIChzY2hlbWUgPT0gJ2ZpbGUnIHx8ICFpc1NwZWNpYWwodXJsKSkgcmV0dXJuICdudWxsJztcbiAgcmV0dXJuIHNjaGVtZSArICc6Ly8nICsgc2VyaWFsaXplSG9zdCh1cmwuaG9zdCkgKyAocG9ydCAhPT0gbnVsbCA/ICc6JyArIHBvcnQgOiAnJyk7XG59O1xuXG52YXIgZ2V0UHJvdG9jb2wgPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBnZXRJbnRlcm5hbFVSTFN0YXRlKHRoaXMpLnNjaGVtZSArICc6Jztcbn07XG5cbnZhciBnZXRVc2VybmFtZSA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIGdldEludGVybmFsVVJMU3RhdGUodGhpcykudXNlcm5hbWU7XG59O1xuXG52YXIgZ2V0UGFzc3dvcmQgPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBnZXRJbnRlcm5hbFVSTFN0YXRlKHRoaXMpLnBhc3N3b3JkO1xufTtcblxudmFyIGdldEhvc3QgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciB1cmwgPSBnZXRJbnRlcm5hbFVSTFN0YXRlKHRoaXMpO1xuICB2YXIgaG9zdCA9IHVybC5ob3N0O1xuICB2YXIgcG9ydCA9IHVybC5wb3J0O1xuICByZXR1cm4gaG9zdCA9PT0gbnVsbCA/ICcnXG4gICAgOiBwb3J0ID09PSBudWxsID8gc2VyaWFsaXplSG9zdChob3N0KVxuICAgIDogc2VyaWFsaXplSG9zdChob3N0KSArICc6JyArIHBvcnQ7XG59O1xuXG52YXIgZ2V0SG9zdG5hbWUgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBob3N0ID0gZ2V0SW50ZXJuYWxVUkxTdGF0ZSh0aGlzKS5ob3N0O1xuICByZXR1cm4gaG9zdCA9PT0gbnVsbCA/ICcnIDogc2VyaWFsaXplSG9zdChob3N0KTtcbn07XG5cbnZhciBnZXRQb3J0ID0gZnVuY3Rpb24gKCkge1xuICB2YXIgcG9ydCA9IGdldEludGVybmFsVVJMU3RhdGUodGhpcykucG9ydDtcbiAgcmV0dXJuIHBvcnQgPT09IG51bGwgPyAnJyA6IFN0cmluZyhwb3J0KTtcbn07XG5cbnZhciBnZXRQYXRobmFtZSA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIHVybCA9IGdldEludGVybmFsVVJMU3RhdGUodGhpcyk7XG4gIHZhciBwYXRoID0gdXJsLnBhdGg7XG4gIHJldHVybiB1cmwuY2Fubm90QmVBQmFzZVVSTCA/IHBhdGhbMF0gOiBwYXRoLmxlbmd0aCA/ICcvJyArIHBhdGguam9pbignLycpIDogJyc7XG59O1xuXG52YXIgZ2V0U2VhcmNoID0gZnVuY3Rpb24gKCkge1xuICB2YXIgcXVlcnkgPSBnZXRJbnRlcm5hbFVSTFN0YXRlKHRoaXMpLnF1ZXJ5O1xuICByZXR1cm4gcXVlcnkgPyAnPycgKyBxdWVyeSA6ICcnO1xufTtcblxudmFyIGdldFNlYXJjaFBhcmFtcyA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIGdldEludGVybmFsVVJMU3RhdGUodGhpcykuc2VhcmNoUGFyYW1zO1xufTtcblxudmFyIGdldEhhc2ggPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBmcmFnbWVudCA9IGdldEludGVybmFsVVJMU3RhdGUodGhpcykuZnJhZ21lbnQ7XG4gIHJldHVybiBmcmFnbWVudCA/ICcjJyArIGZyYWdtZW50IDogJyc7XG59O1xuXG52YXIgYWNjZXNzb3JEZXNjcmlwdG9yID0gZnVuY3Rpb24gKGdldHRlciwgc2V0dGVyKSB7XG4gIHJldHVybiB7IGdldDogZ2V0dGVyLCBzZXQ6IHNldHRlciwgY29uZmlndXJhYmxlOiB0cnVlLCBlbnVtZXJhYmxlOiB0cnVlIH07XG59O1xuXG5pZiAoREVTQ1JJUFRPUlMpIHtcbiAgZGVmaW5lUHJvcGVydGllcyhVUkxQcm90b3R5cGUsIHtcbiAgICAvLyBgVVJMLnByb3RvdHlwZS5ocmVmYCBhY2Nlc3NvcnMgcGFpclxuICAgIC8vIGh0dHBzOi8vdXJsLnNwZWMud2hhdHdnLm9yZy8jZG9tLXVybC1ocmVmXG4gICAgaHJlZjogYWNjZXNzb3JEZXNjcmlwdG9yKHNlcmlhbGl6ZVVSTCwgZnVuY3Rpb24gKGhyZWYpIHtcbiAgICAgIHZhciB1cmwgPSBnZXRJbnRlcm5hbFVSTFN0YXRlKHRoaXMpO1xuICAgICAgdmFyIHVybFN0cmluZyA9IFN0cmluZyhocmVmKTtcbiAgICAgIHZhciBmYWlsdXJlID0gcGFyc2VVUkwodXJsLCB1cmxTdHJpbmcpO1xuICAgICAgaWYgKGZhaWx1cmUpIHRocm93IFR5cGVFcnJvcihmYWlsdXJlKTtcbiAgICAgIGdldEludGVybmFsU2VhcmNoUGFyYW1zU3RhdGUodXJsLnNlYXJjaFBhcmFtcykudXBkYXRlU2VhcmNoUGFyYW1zKHVybC5xdWVyeSk7XG4gICAgfSksXG4gICAgLy8gYFVSTC5wcm90b3R5cGUub3JpZ2luYCBnZXR0ZXJcbiAgICAvLyBodHRwczovL3VybC5zcGVjLndoYXR3Zy5vcmcvI2RvbS11cmwtb3JpZ2luXG4gICAgb3JpZ2luOiBhY2Nlc3NvckRlc2NyaXB0b3IoZ2V0T3JpZ2luKSxcbiAgICAvLyBgVVJMLnByb3RvdHlwZS5wcm90b2NvbGAgYWNjZXNzb3JzIHBhaXJcbiAgICAvLyBodHRwczovL3VybC5zcGVjLndoYXR3Zy5vcmcvI2RvbS11cmwtcHJvdG9jb2xcbiAgICBwcm90b2NvbDogYWNjZXNzb3JEZXNjcmlwdG9yKGdldFByb3RvY29sLCBmdW5jdGlvbiAocHJvdG9jb2wpIHtcbiAgICAgIHZhciB1cmwgPSBnZXRJbnRlcm5hbFVSTFN0YXRlKHRoaXMpO1xuICAgICAgcGFyc2VVUkwodXJsLCBTdHJpbmcocHJvdG9jb2wpICsgJzonLCBTQ0hFTUVfU1RBUlQpO1xuICAgIH0pLFxuICAgIC8vIGBVUkwucHJvdG90eXBlLnVzZXJuYW1lYCBhY2Nlc3NvcnMgcGFpclxuICAgIC8vIGh0dHBzOi8vdXJsLnNwZWMud2hhdHdnLm9yZy8jZG9tLXVybC11c2VybmFtZVxuICAgIHVzZXJuYW1lOiBhY2Nlc3NvckRlc2NyaXB0b3IoZ2V0VXNlcm5hbWUsIGZ1bmN0aW9uICh1c2VybmFtZSkge1xuICAgICAgdmFyIHVybCA9IGdldEludGVybmFsVVJMU3RhdGUodGhpcyk7XG4gICAgICB2YXIgY29kZVBvaW50cyA9IGFycmF5RnJvbShTdHJpbmcodXNlcm5hbWUpKTtcbiAgICAgIGlmIChjYW5ub3RIYXZlVXNlcm5hbWVQYXNzd29yZFBvcnQodXJsKSkgcmV0dXJuO1xuICAgICAgdXJsLnVzZXJuYW1lID0gJyc7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNvZGVQb2ludHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdXJsLnVzZXJuYW1lICs9IHBlcmNlbnRFbmNvZGUoY29kZVBvaW50c1tpXSwgdXNlcmluZm9QZXJjZW50RW5jb2RlU2V0KTtcbiAgICAgIH1cbiAgICB9KSxcbiAgICAvLyBgVVJMLnByb3RvdHlwZS5wYXNzd29yZGAgYWNjZXNzb3JzIHBhaXJcbiAgICAvLyBodHRwczovL3VybC5zcGVjLndoYXR3Zy5vcmcvI2RvbS11cmwtcGFzc3dvcmRcbiAgICBwYXNzd29yZDogYWNjZXNzb3JEZXNjcmlwdG9yKGdldFBhc3N3b3JkLCBmdW5jdGlvbiAocGFzc3dvcmQpIHtcbiAgICAgIHZhciB1cmwgPSBnZXRJbnRlcm5hbFVSTFN0YXRlKHRoaXMpO1xuICAgICAgdmFyIGNvZGVQb2ludHMgPSBhcnJheUZyb20oU3RyaW5nKHBhc3N3b3JkKSk7XG4gICAgICBpZiAoY2Fubm90SGF2ZVVzZXJuYW1lUGFzc3dvcmRQb3J0KHVybCkpIHJldHVybjtcbiAgICAgIHVybC5wYXNzd29yZCA9ICcnO1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjb2RlUG9pbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHVybC5wYXNzd29yZCArPSBwZXJjZW50RW5jb2RlKGNvZGVQb2ludHNbaV0sIHVzZXJpbmZvUGVyY2VudEVuY29kZVNldCk7XG4gICAgICB9XG4gICAgfSksXG4gICAgLy8gYFVSTC5wcm90b3R5cGUuaG9zdGAgYWNjZXNzb3JzIHBhaXJcbiAgICAvLyBodHRwczovL3VybC5zcGVjLndoYXR3Zy5vcmcvI2RvbS11cmwtaG9zdFxuICAgIGhvc3Q6IGFjY2Vzc29yRGVzY3JpcHRvcihnZXRIb3N0LCBmdW5jdGlvbiAoaG9zdCkge1xuICAgICAgdmFyIHVybCA9IGdldEludGVybmFsVVJMU3RhdGUodGhpcyk7XG4gICAgICBpZiAodXJsLmNhbm5vdEJlQUJhc2VVUkwpIHJldHVybjtcbiAgICAgIHBhcnNlVVJMKHVybCwgU3RyaW5nKGhvc3QpLCBIT1NUKTtcbiAgICB9KSxcbiAgICAvLyBgVVJMLnByb3RvdHlwZS5ob3N0bmFtZWAgYWNjZXNzb3JzIHBhaXJcbiAgICAvLyBodHRwczovL3VybC5zcGVjLndoYXR3Zy5vcmcvI2RvbS11cmwtaG9zdG5hbWVcbiAgICBob3N0bmFtZTogYWNjZXNzb3JEZXNjcmlwdG9yKGdldEhvc3RuYW1lLCBmdW5jdGlvbiAoaG9zdG5hbWUpIHtcbiAgICAgIHZhciB1cmwgPSBnZXRJbnRlcm5hbFVSTFN0YXRlKHRoaXMpO1xuICAgICAgaWYgKHVybC5jYW5ub3RCZUFCYXNlVVJMKSByZXR1cm47XG4gICAgICBwYXJzZVVSTCh1cmwsIFN0cmluZyhob3N0bmFtZSksIEhPU1ROQU1FKTtcbiAgICB9KSxcbiAgICAvLyBgVVJMLnByb3RvdHlwZS5wb3J0YCBhY2Nlc3NvcnMgcGFpclxuICAgIC8vIGh0dHBzOi8vdXJsLnNwZWMud2hhdHdnLm9yZy8jZG9tLXVybC1wb3J0XG4gICAgcG9ydDogYWNjZXNzb3JEZXNjcmlwdG9yKGdldFBvcnQsIGZ1bmN0aW9uIChwb3J0KSB7XG4gICAgICB2YXIgdXJsID0gZ2V0SW50ZXJuYWxVUkxTdGF0ZSh0aGlzKTtcbiAgICAgIGlmIChjYW5ub3RIYXZlVXNlcm5hbWVQYXNzd29yZFBvcnQodXJsKSkgcmV0dXJuO1xuICAgICAgcG9ydCA9IFN0cmluZyhwb3J0KTtcbiAgICAgIGlmIChwb3J0ID09ICcnKSB1cmwucG9ydCA9IG51bGw7XG4gICAgICBlbHNlIHBhcnNlVVJMKHVybCwgcG9ydCwgUE9SVCk7XG4gICAgfSksXG4gICAgLy8gYFVSTC5wcm90b3R5cGUucGF0aG5hbWVgIGFjY2Vzc29ycyBwYWlyXG4gICAgLy8gaHR0cHM6Ly91cmwuc3BlYy53aGF0d2cub3JnLyNkb20tdXJsLXBhdGhuYW1lXG4gICAgcGF0aG5hbWU6IGFjY2Vzc29yRGVzY3JpcHRvcihnZXRQYXRobmFtZSwgZnVuY3Rpb24gKHBhdGhuYW1lKSB7XG4gICAgICB2YXIgdXJsID0gZ2V0SW50ZXJuYWxVUkxTdGF0ZSh0aGlzKTtcbiAgICAgIGlmICh1cmwuY2Fubm90QmVBQmFzZVVSTCkgcmV0dXJuO1xuICAgICAgdXJsLnBhdGggPSBbXTtcbiAgICAgIHBhcnNlVVJMKHVybCwgcGF0aG5hbWUgKyAnJywgUEFUSF9TVEFSVCk7XG4gICAgfSksXG4gICAgLy8gYFVSTC5wcm90b3R5cGUuc2VhcmNoYCBhY2Nlc3NvcnMgcGFpclxuICAgIC8vIGh0dHBzOi8vdXJsLnNwZWMud2hhdHdnLm9yZy8jZG9tLXVybC1zZWFyY2hcbiAgICBzZWFyY2g6IGFjY2Vzc29yRGVzY3JpcHRvcihnZXRTZWFyY2gsIGZ1bmN0aW9uIChzZWFyY2gpIHtcbiAgICAgIHZhciB1cmwgPSBnZXRJbnRlcm5hbFVSTFN0YXRlKHRoaXMpO1xuICAgICAgc2VhcmNoID0gU3RyaW5nKHNlYXJjaCk7XG4gICAgICBpZiAoc2VhcmNoID09ICcnKSB7XG4gICAgICAgIHVybC5xdWVyeSA9IG51bGw7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoJz8nID09IHNlYXJjaC5jaGFyQXQoMCkpIHNlYXJjaCA9IHNlYXJjaC5zbGljZSgxKTtcbiAgICAgICAgdXJsLnF1ZXJ5ID0gJyc7XG4gICAgICAgIHBhcnNlVVJMKHVybCwgc2VhcmNoLCBRVUVSWSk7XG4gICAgICB9XG4gICAgICBnZXRJbnRlcm5hbFNlYXJjaFBhcmFtc1N0YXRlKHVybC5zZWFyY2hQYXJhbXMpLnVwZGF0ZVNlYXJjaFBhcmFtcyh1cmwucXVlcnkpO1xuICAgIH0pLFxuICAgIC8vIGBVUkwucHJvdG90eXBlLnNlYXJjaFBhcmFtc2AgZ2V0dGVyXG4gICAgLy8gaHR0cHM6Ly91cmwuc3BlYy53aGF0d2cub3JnLyNkb20tdXJsLXNlYXJjaHBhcmFtc1xuICAgIHNlYXJjaFBhcmFtczogYWNjZXNzb3JEZXNjcmlwdG9yKGdldFNlYXJjaFBhcmFtcyksXG4gICAgLy8gYFVSTC5wcm90b3R5cGUuaGFzaGAgYWNjZXNzb3JzIHBhaXJcbiAgICAvLyBodHRwczovL3VybC5zcGVjLndoYXR3Zy5vcmcvI2RvbS11cmwtaGFzaFxuICAgIGhhc2g6IGFjY2Vzc29yRGVzY3JpcHRvcihnZXRIYXNoLCBmdW5jdGlvbiAoaGFzaCkge1xuICAgICAgdmFyIHVybCA9IGdldEludGVybmFsVVJMU3RhdGUodGhpcyk7XG4gICAgICBoYXNoID0gU3RyaW5nKGhhc2gpO1xuICAgICAgaWYgKGhhc2ggPT0gJycpIHtcbiAgICAgICAgdXJsLmZyYWdtZW50ID0gbnVsbDtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgaWYgKCcjJyA9PSBoYXNoLmNoYXJBdCgwKSkgaGFzaCA9IGhhc2guc2xpY2UoMSk7XG4gICAgICB1cmwuZnJhZ21lbnQgPSAnJztcbiAgICAgIHBhcnNlVVJMKHVybCwgaGFzaCwgRlJBR01FTlQpO1xuICAgIH0pXG4gIH0pO1xufVxuXG4vLyBgVVJMLnByb3RvdHlwZS50b0pTT05gIG1ldGhvZFxuLy8gaHR0cHM6Ly91cmwuc3BlYy53aGF0d2cub3JnLyNkb20tdXJsLXRvanNvblxucmVkZWZpbmUoVVJMUHJvdG90eXBlLCAndG9KU09OJywgZnVuY3Rpb24gdG9KU09OKCkge1xuICByZXR1cm4gc2VyaWFsaXplVVJMLmNhbGwodGhpcyk7XG59LCB7IGVudW1lcmFibGU6IHRydWUgfSk7XG5cbi8vIGBVUkwucHJvdG90eXBlLnRvU3RyaW5nYCBtZXRob2Rcbi8vIGh0dHBzOi8vdXJsLnNwZWMud2hhdHdnLm9yZy8jVVJMLXN0cmluZ2lmaWNhdGlvbi1iZWhhdmlvclxucmVkZWZpbmUoVVJMUHJvdG90eXBlLCAndG9TdHJpbmcnLCBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgcmV0dXJuIHNlcmlhbGl6ZVVSTC5jYWxsKHRoaXMpO1xufSwgeyBlbnVtZXJhYmxlOiB0cnVlIH0pO1xuXG5pZiAoTmF0aXZlVVJMKSB7XG4gIHZhciBuYXRpdmVDcmVhdGVPYmplY3RVUkwgPSBOYXRpdmVVUkwuY3JlYXRlT2JqZWN0VVJMO1xuICB2YXIgbmF0aXZlUmV2b2tlT2JqZWN0VVJMID0gTmF0aXZlVVJMLnJldm9rZU9iamVjdFVSTDtcbiAgLy8gYFVSTC5jcmVhdGVPYmplY3RVUkxgIG1ldGhvZFxuICAvLyBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvVVJML2NyZWF0ZU9iamVjdFVSTFxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW51c2VkLXZhcnNcbiAgaWYgKG5hdGl2ZUNyZWF0ZU9iamVjdFVSTCkgcmVkZWZpbmUoVVJMQ29uc3RydWN0b3IsICdjcmVhdGVPYmplY3RVUkwnLCBmdW5jdGlvbiBjcmVhdGVPYmplY3RVUkwoYmxvYikge1xuICAgIHJldHVybiBuYXRpdmVDcmVhdGVPYmplY3RVUkwuYXBwbHkoTmF0aXZlVVJMLCBhcmd1bWVudHMpO1xuICB9KTtcbiAgLy8gYFVSTC5yZXZva2VPYmplY3RVUkxgIG1ldGhvZFxuICAvLyBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvVVJML3Jldm9rZU9iamVjdFVSTFxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW51c2VkLXZhcnNcbiAgaWYgKG5hdGl2ZVJldm9rZU9iamVjdFVSTCkgcmVkZWZpbmUoVVJMQ29uc3RydWN0b3IsICdyZXZva2VPYmplY3RVUkwnLCBmdW5jdGlvbiByZXZva2VPYmplY3RVUkwodXJsKSB7XG4gICAgcmV0dXJuIG5hdGl2ZVJldm9rZU9iamVjdFVSTC5hcHBseShOYXRpdmVVUkwsIGFyZ3VtZW50cyk7XG4gIH0pO1xufVxuXG5zZXRUb1N0cmluZ1RhZyhVUkxDb25zdHJ1Y3RvciwgJ1VSTCcpO1xuXG4kKHsgZ2xvYmFsOiB0cnVlLCBmb3JjZWQ6ICFVU0VfTkFUSVZFX1VSTCwgc2hhbTogIURFU0NSSVBUT1JTIH0sIHtcbiAgVVJMOiBVUkxDb25zdHJ1Y3RvclxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcblxuLy8gYFVSTC5wcm90b3R5cGUudG9KU09OYCBtZXRob2Rcbi8vIGh0dHBzOi8vdXJsLnNwZWMud2hhdHdnLm9yZy8jZG9tLXVybC10b2pzb25cbiQoeyB0YXJnZXQ6ICdVUkwnLCBwcm90bzogdHJ1ZSwgZW51bWVyYWJsZTogdHJ1ZSB9LCB7XG4gIHRvSlNPTjogZnVuY3Rpb24gdG9KU09OKCkge1xuICAgIHJldHVybiBVUkwucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwodGhpcyk7XG4gIH1cbn0pO1xuIiwicmVxdWlyZSgnLi4vZXMnKTtcbnJlcXVpcmUoJy4uL3dlYicpO1xudmFyIHBhdGggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcGF0aCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHBhdGg7XG4iLCJyZXF1aXJlKCcuLi9tb2R1bGVzL3dlYi5kb20tY29sbGVjdGlvbnMuZm9yLWVhY2gnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvd2ViLmRvbS1jb2xsZWN0aW9ucy5pdGVyYXRvcicpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy93ZWIuaW1tZWRpYXRlJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL3dlYi5xdWV1ZS1taWNyb3Rhc2snKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvd2ViLnRpbWVycycpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy93ZWIudXJsJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL3dlYi51cmwudG8tanNvbicpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy93ZWIudXJsLXNlYXJjaC1wYXJhbXMnKTtcbnZhciBwYXRoID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3BhdGgnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBwYXRoO1xuIiwiLyoqXG4gKiBAbGljc3RhcnQgVGhlIGZvbGxvd2luZyBpcyB0aGUgZW50aXJlIGxpY2Vuc2Ugbm90aWNlIGZvciB0aGVcbiAqIEphdmFzY3JpcHQgY29kZSBpbiB0aGlzIHBhZ2VcbiAqXG4gKiBDb3B5cmlnaHQgMjAyMCBNb3ppbGxhIEZvdW5kYXRpb25cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKlxuICogQGxpY2VuZCBUaGUgYWJvdmUgaXMgdGhlIGVudGlyZSBsaWNlbnNlIG5vdGljZSBmb3IgdGhlXG4gKiBKYXZhc2NyaXB0IGNvZGUgaW4gdGhpcyBwYWdlXG4gKi9cblxuKGZ1bmN0aW9uIHdlYnBhY2tVbml2ZXJzYWxNb2R1bGVEZWZpbml0aW9uKHJvb3QsIGZhY3RvcnkpIHtcblx0aWYodHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgPT09ICdvYmplY3QnKVxuXHRcdG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeSgpO1xuXHRlbHNlIGlmKHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZClcblx0XHRkZWZpbmUoXCJwZGZqcy1kaXN0L2J1aWxkL3BkZlwiLCBbXSwgZmFjdG9yeSk7XG5cdGVsc2UgaWYodHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnKVxuXHRcdGV4cG9ydHNbXCJwZGZqcy1kaXN0L2J1aWxkL3BkZlwiXSA9IGZhY3RvcnkoKTtcblx0ZWxzZVxuXHRcdHJvb3RbXCJwZGZqcy1kaXN0L2J1aWxkL3BkZlwiXSA9IHJvb3QucGRmanNMaWIgPSBmYWN0b3J5KCk7XG59KSh0aGlzLCBmdW5jdGlvbigpIHtcbnJldHVybiAvKioqKioqLyAoZnVuY3Rpb24obW9kdWxlcykgeyAvLyB3ZWJwYWNrQm9vdHN0cmFwXG4vKioqKioqLyBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbi8qKioqKiovIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4vKioqKioqLyBcdGZ1bmN0aW9uIF9fd19wZGZqc19yZXF1aXJlX18obW9kdWxlSWQpIHtcbi8qKioqKiovXG4vKioqKioqLyBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4vKioqKioqLyBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pIHtcbi8qKioqKiovIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuLyoqKioqKi8gXHRcdH1cbi8qKioqKiovIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuLyoqKioqKi8gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbi8qKioqKiovIFx0XHRcdGk6IG1vZHVsZUlkLFxuLyoqKioqKi8gXHRcdFx0bDogZmFsc2UsXG4vKioqKioqLyBcdFx0XHRleHBvcnRzOiB7fVxuLyoqKioqKi8gXHRcdH07XG4vKioqKioqL1xuLyoqKioqKi8gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuLyoqKioqKi8gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd19wZGZqc19yZXF1aXJlX18pO1xuLyoqKioqKi9cbi8qKioqKiovIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4vKioqKioqLyBcdFx0bW9kdWxlLmwgPSB0cnVlO1xuLyoqKioqKi9cbi8qKioqKiovIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuLyoqKioqKi8gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbi8qKioqKiovIFx0fVxuLyoqKioqKi9cbi8qKioqKiovXG4vKioqKioqLyBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4vKioqKioqLyBcdF9fd19wZGZqc19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuLyoqKioqKi8gXHRfX3dfcGRmanNfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gZGVmaW5lIGdldHRlciBmdW5jdGlvbiBmb3IgaGFybW9ueSBleHBvcnRzXG4vKioqKioqLyBcdF9fd19wZGZqc19yZXF1aXJlX18uZCA9IGZ1bmN0aW9uKGV4cG9ydHMsIG5hbWUsIGdldHRlcikge1xuLyoqKioqKi8gXHRcdGlmKCFfX3dfcGRmanNfcmVxdWlyZV9fLm8oZXhwb3J0cywgbmFtZSkpIHtcbi8qKioqKiovIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBuYW1lLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZ2V0dGVyIH0pO1xuLyoqKioqKi8gXHRcdH1cbi8qKioqKiovIFx0fTtcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbi8qKioqKiovIFx0X193X3BkZmpzX3JlcXVpcmVfXy5yID0gZnVuY3Rpb24oZXhwb3J0cykge1xuLyoqKioqKi8gXHRcdGlmKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC50b1N0cmluZ1RhZykge1xuLyoqKioqKi8gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG4vKioqKioqLyBcdFx0fVxuLyoqKioqKi8gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG4vKioqKioqLyBcdH07XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBjcmVhdGUgYSBmYWtlIG5hbWVzcGFjZSBvYmplY3Rcbi8qKioqKiovIFx0Ly8gbW9kZSAmIDE6IHZhbHVlIGlzIGEgbW9kdWxlIGlkLCByZXF1aXJlIGl0XG4vKioqKioqLyBcdC8vIG1vZGUgJiAyOiBtZXJnZSBhbGwgcHJvcGVydGllcyBvZiB2YWx1ZSBpbnRvIHRoZSBuc1xuLyoqKioqKi8gXHQvLyBtb2RlICYgNDogcmV0dXJuIHZhbHVlIHdoZW4gYWxyZWFkeSBucyBvYmplY3Rcbi8qKioqKiovIFx0Ly8gbW9kZSAmIDh8MTogYmVoYXZlIGxpa2UgcmVxdWlyZVxuLyoqKioqKi8gXHRfX3dfcGRmanNfcmVxdWlyZV9fLnQgPSBmdW5jdGlvbih2YWx1ZSwgbW9kZSkge1xuLyoqKioqKi8gXHRcdGlmKG1vZGUgJiAxKSB2YWx1ZSA9IF9fd19wZGZqc19yZXF1aXJlX18odmFsdWUpO1xuLyoqKioqKi8gXHRcdGlmKG1vZGUgJiA4KSByZXR1cm4gdmFsdWU7XG4vKioqKioqLyBcdFx0aWYoKG1vZGUgJiA0KSAmJiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmIHZhbHVlICYmIHZhbHVlLl9fZXNNb2R1bGUpIHJldHVybiB2YWx1ZTtcbi8qKioqKiovIFx0XHR2YXIgbnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuLyoqKioqKi8gXHRcdF9fd19wZGZqc19yZXF1aXJlX18ucihucyk7XG4vKioqKioqLyBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG5zLCAnZGVmYXVsdCcsIHsgZW51bWVyYWJsZTogdHJ1ZSwgdmFsdWU6IHZhbHVlIH0pO1xuLyoqKioqKi8gXHRcdGlmKG1vZGUgJiAyICYmIHR5cGVvZiB2YWx1ZSAhPSAnc3RyaW5nJykgZm9yKHZhciBrZXkgaW4gdmFsdWUpIF9fd19wZGZqc19yZXF1aXJlX18uZChucywga2V5LCBmdW5jdGlvbihrZXkpIHsgcmV0dXJuIHZhbHVlW2tleV07IH0uYmluZChudWxsLCBrZXkpKTtcbi8qKioqKiovIFx0XHRyZXR1cm4gbnM7XG4vKioqKioqLyBcdH07XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuLyoqKioqKi8gXHRfX3dfcGRmanNfcmVxdWlyZV9fLm4gPSBmdW5jdGlvbihtb2R1bGUpIHtcbi8qKioqKiovIFx0XHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cbi8qKioqKiovIFx0XHRcdGZ1bmN0aW9uIGdldERlZmF1bHQoKSB7IHJldHVybiBtb2R1bGVbJ2RlZmF1bHQnXTsgfSA6XG4vKioqKioqLyBcdFx0XHRmdW5jdGlvbiBnZXRNb2R1bGVFeHBvcnRzKCkgeyByZXR1cm4gbW9kdWxlOyB9O1xuLyoqKioqKi8gXHRcdF9fd19wZGZqc19yZXF1aXJlX18uZChnZXR0ZXIsICdhJywgZ2V0dGVyKTtcbi8qKioqKiovIFx0XHRyZXR1cm4gZ2V0dGVyO1xuLyoqKioqKi8gXHR9O1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsXG4vKioqKioqLyBcdF9fd19wZGZqc19yZXF1aXJlX18ubyA9IGZ1bmN0aW9uKG9iamVjdCwgcHJvcGVydHkpIHsgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KTsgfTtcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4vKioqKioqLyBcdF9fd19wZGZqc19yZXF1aXJlX18ucCA9IFwiXCI7XG4vKioqKioqL1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4vKioqKioqLyBcdHJldHVybiBfX3dfcGRmanNfcmVxdWlyZV9fKF9fd19wZGZqc19yZXF1aXJlX18ucyA9IDApO1xuLyoqKioqKi8gfSlcbi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKioqKioqLyAoW1xuLyogMCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193X3BkZmpzX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiYWRkTGlua0F0dHJpYnV0ZXNcIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gX2Rpc3BsYXlfdXRpbHMuYWRkTGlua0F0dHJpYnV0ZXM7XG4gIH1cbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiZ2V0RmlsZW5hbWVGcm9tVXJsXCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIF9kaXNwbGF5X3V0aWxzLmdldEZpbGVuYW1lRnJvbVVybDtcbiAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJMaW5rVGFyZ2V0XCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIF9kaXNwbGF5X3V0aWxzLkxpbmtUYXJnZXQ7XG4gIH1cbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwibG9hZFNjcmlwdFwiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBfZGlzcGxheV91dGlscy5sb2FkU2NyaXB0O1xuICB9XG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIlBERkRhdGVTdHJpbmdcIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gX2Rpc3BsYXlfdXRpbHMuUERGRGF0ZVN0cmluZztcbiAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJSZW5kZXJpbmdDYW5jZWxsZWRFeGNlcHRpb25cIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gX2Rpc3BsYXlfdXRpbHMuUmVuZGVyaW5nQ2FuY2VsbGVkRXhjZXB0aW9uO1xuICB9XG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImJ1aWxkXCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIF9hcGkuYnVpbGQ7XG4gIH1cbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiZ2V0RG9jdW1lbnRcIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gX2FwaS5nZXREb2N1bWVudDtcbiAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJMb29wYmFja1BvcnRcIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gX2FwaS5Mb29wYmFja1BvcnQ7XG4gIH1cbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiUERGRGF0YVJhbmdlVHJhbnNwb3J0XCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIF9hcGkuUERGRGF0YVJhbmdlVHJhbnNwb3J0O1xuICB9XG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIlBERldvcmtlclwiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBfYXBpLlBERldvcmtlcjtcbiAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJ2ZXJzaW9uXCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIF9hcGkudmVyc2lvbjtcbiAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJDTWFwQ29tcHJlc3Npb25UeXBlXCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIF91dGlsLkNNYXBDb21wcmVzc2lvblR5cGU7XG4gIH1cbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiY3JlYXRlT2JqZWN0VVJMXCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIF91dGlsLmNyZWF0ZU9iamVjdFVSTDtcbiAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJjcmVhdGVQcm9taXNlQ2FwYWJpbGl0eVwiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBfdXRpbC5jcmVhdGVQcm9taXNlQ2FwYWJpbGl0eTtcbiAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJjcmVhdGVWYWxpZEFic29sdXRlVXJsXCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIF91dGlsLmNyZWF0ZVZhbGlkQWJzb2x1dGVVcmw7XG4gIH1cbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiSW52YWxpZFBERkV4Y2VwdGlvblwiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBfdXRpbC5JbnZhbGlkUERGRXhjZXB0aW9uO1xuICB9XG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIk1pc3NpbmdQREZFeGNlcHRpb25cIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gX3V0aWwuTWlzc2luZ1BERkV4Y2VwdGlvbjtcbiAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJPUFNcIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gX3V0aWwuT1BTO1xuICB9XG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIlBhc3N3b3JkUmVzcG9uc2VzXCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIF91dGlsLlBhc3N3b3JkUmVzcG9uc2VzO1xuICB9XG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIlBlcm1pc3Npb25GbGFnXCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIF91dGlsLlBlcm1pc3Npb25GbGFnO1xuICB9XG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcInJlbW92ZU51bGxDaGFyYWN0ZXJzXCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIF91dGlsLnJlbW92ZU51bGxDaGFyYWN0ZXJzO1xuICB9XG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcInNoYWRvd1wiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBfdXRpbC5zaGFkb3c7XG4gIH1cbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiVW5leHBlY3RlZFJlc3BvbnNlRXhjZXB0aW9uXCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIF91dGlsLlVuZXhwZWN0ZWRSZXNwb25zZUV4Y2VwdGlvbjtcbiAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJVTlNVUFBPUlRFRF9GRUFUVVJFU1wiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBfdXRpbC5VTlNVUFBPUlRFRF9GRUFUVVJFUztcbiAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJVdGlsXCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIF91dGlsLlV0aWw7XG4gIH1cbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiVmVyYm9zaXR5TGV2ZWxcIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gX3V0aWwuVmVyYm9zaXR5TGV2ZWw7XG4gIH1cbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiQW5ub3RhdGlvbkxheWVyXCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIF9hbm5vdGF0aW9uX2xheWVyLkFubm90YXRpb25MYXllcjtcbiAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJhcGlDb21wYXRpYmlsaXR5UGFyYW1zXCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIF9hcGlfY29tcGF0aWJpbGl0eS5hcGlDb21wYXRpYmlsaXR5UGFyYW1zO1xuICB9XG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIkdsb2JhbFdvcmtlck9wdGlvbnNcIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gX3dvcmtlcl9vcHRpb25zLkdsb2JhbFdvcmtlck9wdGlvbnM7XG4gIH1cbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwicmVuZGVyVGV4dExheWVyXCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIF90ZXh0X2xheWVyLnJlbmRlclRleHRMYXllcjtcbiAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJTVkdHcmFwaGljc1wiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBfc3ZnLlNWR0dyYXBoaWNzO1xuICB9XG59KTtcblxudmFyIF9kaXNwbGF5X3V0aWxzID0gX193X3BkZmpzX3JlcXVpcmVfXygxKTtcblxudmFyIF9hcGkgPSBfX3dfcGRmanNfcmVxdWlyZV9fKDUpO1xuXG52YXIgX3V0aWwgPSBfX3dfcGRmanNfcmVxdWlyZV9fKDIpO1xuXG52YXIgX2Fubm90YXRpb25fbGF5ZXIgPSBfX3dfcGRmanNfcmVxdWlyZV9fKDE2KTtcblxudmFyIF9hcGlfY29tcGF0aWJpbGl0eSA9IF9fd19wZGZqc19yZXF1aXJlX18oNyk7XG5cbnZhciBfd29ya2VyX29wdGlvbnMgPSBfX3dfcGRmanNfcmVxdWlyZV9fKDEwKTtcblxudmFyIF90ZXh0X2xheWVyID0gX193X3BkZmpzX3JlcXVpcmVfXygxNyk7XG5cbnZhciBfc3ZnID0gX193X3BkZmpzX3JlcXVpcmVfXygxOCk7XG5cbmNvbnN0IHBkZmpzVmVyc2lvbiA9ICcyLjUuMjA3JztcbmNvbnN0IHBkZmpzQnVpbGQgPSAnMDk3NGQ2MDUnO1xue1xuICBjb25zdCB7XG4gICAgaXNOb2RlSlNcbiAgfSA9IF9fd19wZGZqc19yZXF1aXJlX18oNCk7XG5cbiAgaWYgKGlzTm9kZUpTKSB7XG4gICAgY29uc3QgUERGTm9kZVN0cmVhbSA9IF9fd19wZGZqc19yZXF1aXJlX18oMTkpLlBERk5vZGVTdHJlYW07XG5cbiAgICAoMCwgX2FwaS5zZXRQREZOZXR3b3JrU3RyZWFtRmFjdG9yeSkocGFyYW1zID0+IHtcbiAgICAgIHJldHVybiBuZXcgUERGTm9kZVN0cmVhbShwYXJhbXMpO1xuICAgIH0pO1xuICB9IGVsc2Uge1xuICAgIGNvbnN0IFBERk5ldHdvcmtTdHJlYW0gPSBfX3dfcGRmanNfcmVxdWlyZV9fKDIyKS5QREZOZXR3b3JrU3RyZWFtO1xuXG4gICAgbGV0IFBERkZldGNoU3RyZWFtO1xuXG4gICAgaWYgKCgwLCBfZGlzcGxheV91dGlscy5pc0ZldGNoU3VwcG9ydGVkKSgpKSB7XG4gICAgICBQREZGZXRjaFN0cmVhbSA9IF9fd19wZGZqc19yZXF1aXJlX18oMjMpLlBERkZldGNoU3RyZWFtO1xuICAgIH1cblxuICAgICgwLCBfYXBpLnNldFBERk5ldHdvcmtTdHJlYW1GYWN0b3J5KShwYXJhbXMgPT4ge1xuICAgICAgaWYgKFBERkZldGNoU3RyZWFtICYmICgwLCBfZGlzcGxheV91dGlscy5pc1ZhbGlkRmV0Y2hVcmwpKHBhcmFtcy51cmwpKSB7XG4gICAgICAgIHJldHVybiBuZXcgUERGRmV0Y2hTdHJlYW0ocGFyYW1zKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIG5ldyBQREZOZXR3b3JrU3RyZWFtKHBhcmFtcyk7XG4gICAgfSk7XG4gIH1cbn1cblxuLyoqKi8gfSksXG4vKiAxICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dfcGRmanNfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmFkZExpbmtBdHRyaWJ1dGVzID0gYWRkTGlua0F0dHJpYnV0ZXM7XG5leHBvcnRzLmdldEZpbGVuYW1lRnJvbVVybCA9IGdldEZpbGVuYW1lRnJvbVVybDtcbmV4cG9ydHMuaXNGZXRjaFN1cHBvcnRlZCA9IGlzRmV0Y2hTdXBwb3J0ZWQ7XG5leHBvcnRzLmlzVmFsaWRGZXRjaFVybCA9IGlzVmFsaWRGZXRjaFVybDtcbmV4cG9ydHMubG9hZFNjcmlwdCA9IGxvYWRTY3JpcHQ7XG5leHBvcnRzLmRlcHJlY2F0ZWQgPSBkZXByZWNhdGVkO1xuZXhwb3J0cy5QREZEYXRlU3RyaW5nID0gZXhwb3J0cy5TdGF0VGltZXIgPSBleHBvcnRzLkRPTVNWR0ZhY3RvcnkgPSBleHBvcnRzLkRPTUNNYXBSZWFkZXJGYWN0b3J5ID0gZXhwb3J0cy5ET01DYW52YXNGYWN0b3J5ID0gZXhwb3J0cy5ERUZBVUxUX0xJTktfUkVMID0gZXhwb3J0cy5MaW5rVGFyZ2V0ID0gZXhwb3J0cy5SZW5kZXJpbmdDYW5jZWxsZWRFeGNlcHRpb24gPSBleHBvcnRzLlBhZ2VWaWV3cG9ydCA9IHZvaWQgMDtcblxudmFyIF91dGlsID0gX193X3BkZmpzX3JlcXVpcmVfXygyKTtcblxuY29uc3QgREVGQVVMVF9MSU5LX1JFTCA9IFwibm9vcGVuZXIgbm9yZWZlcnJlciBub2ZvbGxvd1wiO1xuZXhwb3J0cy5ERUZBVUxUX0xJTktfUkVMID0gREVGQVVMVF9MSU5LX1JFTDtcbmNvbnN0IFNWR19OUyA9IFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIjtcblxuY2xhc3MgRE9NQ2FudmFzRmFjdG9yeSB7XG4gIGNyZWF0ZSh3aWR0aCwgaGVpZ2h0KSB7XG4gICAgaWYgKHdpZHRoIDw9IDAgfHwgaGVpZ2h0IDw9IDApIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIkludmFsaWQgY2FudmFzIHNpemVcIik7XG4gICAgfVxuXG4gICAgY29uc3QgY2FudmFzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImNhbnZhc1wiKTtcbiAgICBjb25zdCBjb250ZXh0ID0gY2FudmFzLmdldENvbnRleHQoXCIyZFwiKTtcbiAgICBjYW52YXMud2lkdGggPSB3aWR0aDtcbiAgICBjYW52YXMuaGVpZ2h0ID0gaGVpZ2h0O1xuICAgIHJldHVybiB7XG4gICAgICBjYW52YXMsXG4gICAgICBjb250ZXh0XG4gICAgfTtcbiAgfVxuXG4gIHJlc2V0KGNhbnZhc0FuZENvbnRleHQsIHdpZHRoLCBoZWlnaHQpIHtcbiAgICBpZiAoIWNhbnZhc0FuZENvbnRleHQuY2FudmFzKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJDYW52YXMgaXMgbm90IHNwZWNpZmllZFwiKTtcbiAgICB9XG5cbiAgICBpZiAod2lkdGggPD0gMCB8fCBoZWlnaHQgPD0gMCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiSW52YWxpZCBjYW52YXMgc2l6ZVwiKTtcbiAgICB9XG5cbiAgICBjYW52YXNBbmRDb250ZXh0LmNhbnZhcy53aWR0aCA9IHdpZHRoO1xuICAgIGNhbnZhc0FuZENvbnRleHQuY2FudmFzLmhlaWdodCA9IGhlaWdodDtcbiAgfVxuXG4gIGRlc3Ryb3koY2FudmFzQW5kQ29udGV4dCkge1xuICAgIGlmICghY2FudmFzQW5kQ29udGV4dC5jYW52YXMpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIkNhbnZhcyBpcyBub3Qgc3BlY2lmaWVkXCIpO1xuICAgIH1cblxuICAgIGNhbnZhc0FuZENvbnRleHQuY2FudmFzLndpZHRoID0gMDtcbiAgICBjYW52YXNBbmRDb250ZXh0LmNhbnZhcy5oZWlnaHQgPSAwO1xuICAgIGNhbnZhc0FuZENvbnRleHQuY2FudmFzID0gbnVsbDtcbiAgICBjYW52YXNBbmRDb250ZXh0LmNvbnRleHQgPSBudWxsO1xuICB9XG5cbn1cblxuZXhwb3J0cy5ET01DYW52YXNGYWN0b3J5ID0gRE9NQ2FudmFzRmFjdG9yeTtcblxuY2xhc3MgRE9NQ01hcFJlYWRlckZhY3Rvcnkge1xuICBjb25zdHJ1Y3Rvcih7XG4gICAgYmFzZVVybCA9IG51bGwsXG4gICAgaXNDb21wcmVzc2VkID0gZmFsc2VcbiAgfSkge1xuICAgIHRoaXMuYmFzZVVybCA9IGJhc2VVcmw7XG4gICAgdGhpcy5pc0NvbXByZXNzZWQgPSBpc0NvbXByZXNzZWQ7XG4gIH1cblxuICBhc3luYyBmZXRjaCh7XG4gICAgbmFtZVxuICB9KSB7XG4gICAgaWYgKCF0aGlzLmJhc2VVcmwpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignVGhlIENNYXAgXCJiYXNlVXJsXCIgcGFyYW1ldGVyIG11c3QgYmUgc3BlY2lmaWVkLCBlbnN1cmUgdGhhdCAnICsgJ3RoZSBcImNNYXBVcmxcIiBhbmQgXCJjTWFwUGFja2VkXCIgQVBJIHBhcmFtZXRlcnMgYXJlIHByb3ZpZGVkLicpO1xuICAgIH1cblxuICAgIGlmICghbmFtZSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQ01hcCBuYW1lIG11c3QgYmUgc3BlY2lmaWVkLlwiKTtcbiAgICB9XG5cbiAgICBjb25zdCB1cmwgPSB0aGlzLmJhc2VVcmwgKyBuYW1lICsgKHRoaXMuaXNDb21wcmVzc2VkID8gXCIuYmNtYXBcIiA6IFwiXCIpO1xuICAgIGNvbnN0IGNvbXByZXNzaW9uVHlwZSA9IHRoaXMuaXNDb21wcmVzc2VkID8gX3V0aWwuQ01hcENvbXByZXNzaW9uVHlwZS5CSU5BUlkgOiBfdXRpbC5DTWFwQ29tcHJlc3Npb25UeXBlLk5PTkU7XG5cbiAgICBpZiAoaXNGZXRjaFN1cHBvcnRlZCgpICYmIGlzVmFsaWRGZXRjaFVybCh1cmwsIGRvY3VtZW50LmJhc2VVUkkpKSB7XG4gICAgICByZXR1cm4gZmV0Y2godXJsKS50aGVuKGFzeW5jIHJlc3BvbnNlID0+IHtcbiAgICAgICAgaWYgKCFyZXNwb25zZS5vaykge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihyZXNwb25zZS5zdGF0dXNUZXh0KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCBjTWFwRGF0YTtcblxuICAgICAgICBpZiAodGhpcy5pc0NvbXByZXNzZWQpIHtcbiAgICAgICAgICBjTWFwRGF0YSA9IG5ldyBVaW50OEFycmF5KGF3YWl0IHJlc3BvbnNlLmFycmF5QnVmZmVyKCkpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNNYXBEYXRhID0gKDAsIF91dGlsLnN0cmluZ1RvQnl0ZXMpKGF3YWl0IHJlc3BvbnNlLnRleHQoKSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIGNNYXBEYXRhLFxuICAgICAgICAgIGNvbXByZXNzaW9uVHlwZVxuICAgICAgICB9O1xuICAgICAgfSkuY2F0Y2gocmVhc29uID0+IHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBVbmFibGUgdG8gbG9hZCAke3RoaXMuaXNDb21wcmVzc2VkID8gXCJiaW5hcnkgXCIgOiBcIlwifWAgKyBgQ01hcCBhdDogJHt1cmx9YCk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgY29uc3QgcmVxdWVzdCA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpO1xuICAgICAgcmVxdWVzdC5vcGVuKFwiR0VUXCIsIHVybCwgdHJ1ZSk7XG5cbiAgICAgIGlmICh0aGlzLmlzQ29tcHJlc3NlZCkge1xuICAgICAgICByZXF1ZXN0LnJlc3BvbnNlVHlwZSA9IFwiYXJyYXlidWZmZXJcIjtcbiAgICAgIH1cblxuICAgICAgcmVxdWVzdC5vbnJlYWR5c3RhdGVjaGFuZ2UgPSAoKSA9PiB7XG4gICAgICAgIGlmIChyZXF1ZXN0LnJlYWR5U3RhdGUgIT09IFhNTEh0dHBSZXF1ZXN0LkRPTkUpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBpZiAocmVxdWVzdC5zdGF0dXMgPT09IDIwMCB8fCByZXF1ZXN0LnN0YXR1cyA9PT0gMCkge1xuICAgICAgICAgIGxldCBjTWFwRGF0YTtcblxuICAgICAgICAgIGlmICh0aGlzLmlzQ29tcHJlc3NlZCAmJiByZXF1ZXN0LnJlc3BvbnNlKSB7XG4gICAgICAgICAgICBjTWFwRGF0YSA9IG5ldyBVaW50OEFycmF5KHJlcXVlc3QucmVzcG9uc2UpO1xuICAgICAgICAgIH0gZWxzZSBpZiAoIXRoaXMuaXNDb21wcmVzc2VkICYmIHJlcXVlc3QucmVzcG9uc2VUZXh0KSB7XG4gICAgICAgICAgICBjTWFwRGF0YSA9ICgwLCBfdXRpbC5zdHJpbmdUb0J5dGVzKShyZXF1ZXN0LnJlc3BvbnNlVGV4dCk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKGNNYXBEYXRhKSB7XG4gICAgICAgICAgICByZXNvbHZlKHtcbiAgICAgICAgICAgICAgY01hcERhdGEsXG4gICAgICAgICAgICAgIGNvbXByZXNzaW9uVHlwZVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmVqZWN0KG5ldyBFcnJvcihyZXF1ZXN0LnN0YXR1c1RleHQpKTtcbiAgICAgIH07XG5cbiAgICAgIHJlcXVlc3Quc2VuZChudWxsKTtcbiAgICB9KS5jYXRjaChyZWFzb24gPT4ge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGBVbmFibGUgdG8gbG9hZCAke3RoaXMuaXNDb21wcmVzc2VkID8gXCJiaW5hcnkgXCIgOiBcIlwifWAgKyBgQ01hcCBhdDogJHt1cmx9YCk7XG4gICAgfSk7XG4gIH1cblxufVxuXG5leHBvcnRzLkRPTUNNYXBSZWFkZXJGYWN0b3J5ID0gRE9NQ01hcFJlYWRlckZhY3Rvcnk7XG5cbmNsYXNzIERPTVNWR0ZhY3Rvcnkge1xuICBjcmVhdGUod2lkdGgsIGhlaWdodCkge1xuICAgICgwLCBfdXRpbC5hc3NlcnQpKHdpZHRoID4gMCAmJiBoZWlnaHQgPiAwLCBcIkludmFsaWQgU1ZHIGRpbWVuc2lvbnNcIik7XG4gICAgY29uc3Qgc3ZnID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKFNWR19OUywgXCJzdmc6c3ZnXCIpO1xuICAgIHN2Zy5zZXRBdHRyaWJ1dGUoXCJ2ZXJzaW9uXCIsIFwiMS4xXCIpO1xuICAgIHN2Zy5zZXRBdHRyaWJ1dGUoXCJ3aWR0aFwiLCB3aWR0aCArIFwicHhcIik7XG4gICAgc3ZnLnNldEF0dHJpYnV0ZShcImhlaWdodFwiLCBoZWlnaHQgKyBcInB4XCIpO1xuICAgIHN2Zy5zZXRBdHRyaWJ1dGUoXCJwcmVzZXJ2ZUFzcGVjdFJhdGlvXCIsIFwibm9uZVwiKTtcbiAgICBzdmcuc2V0QXR0cmlidXRlKFwidmlld0JveFwiLCBcIjAgMCBcIiArIHdpZHRoICsgXCIgXCIgKyBoZWlnaHQpO1xuICAgIHJldHVybiBzdmc7XG4gIH1cblxuICBjcmVhdGVFbGVtZW50KHR5cGUpIHtcbiAgICAoMCwgX3V0aWwuYXNzZXJ0KSh0eXBlb2YgdHlwZSA9PT0gXCJzdHJpbmdcIiwgXCJJbnZhbGlkIFNWRyBlbGVtZW50IHR5cGVcIik7XG4gICAgcmV0dXJuIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUyhTVkdfTlMsIHR5cGUpO1xuICB9XG5cbn1cblxuZXhwb3J0cy5ET01TVkdGYWN0b3J5ID0gRE9NU1ZHRmFjdG9yeTtcblxuY2xhc3MgUGFnZVZpZXdwb3J0IHtcbiAgY29uc3RydWN0b3Ioe1xuICAgIHZpZXdCb3gsXG4gICAgc2NhbGUsXG4gICAgcm90YXRpb24sXG4gICAgb2Zmc2V0WCA9IDAsXG4gICAgb2Zmc2V0WSA9IDAsXG4gICAgZG9udEZsaXAgPSBmYWxzZVxuICB9KSB7XG4gICAgdGhpcy52aWV3Qm94ID0gdmlld0JveDtcbiAgICB0aGlzLnNjYWxlID0gc2NhbGU7XG4gICAgdGhpcy5yb3RhdGlvbiA9IHJvdGF0aW9uO1xuICAgIHRoaXMub2Zmc2V0WCA9IG9mZnNldFg7XG4gICAgdGhpcy5vZmZzZXRZID0gb2Zmc2V0WTtcbiAgICBjb25zdCBjZW50ZXJYID0gKHZpZXdCb3hbMl0gKyB2aWV3Qm94WzBdKSAvIDI7XG4gICAgY29uc3QgY2VudGVyWSA9ICh2aWV3Qm94WzNdICsgdmlld0JveFsxXSkgLyAyO1xuICAgIGxldCByb3RhdGVBLCByb3RhdGVCLCByb3RhdGVDLCByb3RhdGVEO1xuICAgIHJvdGF0aW9uID0gcm90YXRpb24gJSAzNjA7XG4gICAgcm90YXRpb24gPSByb3RhdGlvbiA8IDAgPyByb3RhdGlvbiArIDM2MCA6IHJvdGF0aW9uO1xuXG4gICAgc3dpdGNoIChyb3RhdGlvbikge1xuICAgICAgY2FzZSAxODA6XG4gICAgICAgIHJvdGF0ZUEgPSAtMTtcbiAgICAgICAgcm90YXRlQiA9IDA7XG4gICAgICAgIHJvdGF0ZUMgPSAwO1xuICAgICAgICByb3RhdGVEID0gMTtcbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGNhc2UgOTA6XG4gICAgICAgIHJvdGF0ZUEgPSAwO1xuICAgICAgICByb3RhdGVCID0gMTtcbiAgICAgICAgcm90YXRlQyA9IDE7XG4gICAgICAgIHJvdGF0ZUQgPSAwO1xuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSAyNzA6XG4gICAgICAgIHJvdGF0ZUEgPSAwO1xuICAgICAgICByb3RhdGVCID0gLTE7XG4gICAgICAgIHJvdGF0ZUMgPSAtMTtcbiAgICAgICAgcm90YXRlRCA9IDA7XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBjYXNlIDA6XG4gICAgICAgIHJvdGF0ZUEgPSAxO1xuICAgICAgICByb3RhdGVCID0gMDtcbiAgICAgICAgcm90YXRlQyA9IDA7XG4gICAgICAgIHJvdGF0ZUQgPSAtMTtcbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIlBhZ2VWaWV3cG9ydDogSW52YWxpZCByb3RhdGlvbiwgbXVzdCBiZSBhIG11bHRpcGxlIG9mIDkwIGRlZ3JlZXMuXCIpO1xuICAgIH1cblxuICAgIGlmIChkb250RmxpcCkge1xuICAgICAgcm90YXRlQyA9IC1yb3RhdGVDO1xuICAgICAgcm90YXRlRCA9IC1yb3RhdGVEO1xuICAgIH1cblxuICAgIGxldCBvZmZzZXRDYW52YXNYLCBvZmZzZXRDYW52YXNZO1xuICAgIGxldCB3aWR0aCwgaGVpZ2h0O1xuXG4gICAgaWYgKHJvdGF0ZUEgPT09IDApIHtcbiAgICAgIG9mZnNldENhbnZhc1ggPSBNYXRoLmFicyhjZW50ZXJZIC0gdmlld0JveFsxXSkgKiBzY2FsZSArIG9mZnNldFg7XG4gICAgICBvZmZzZXRDYW52YXNZID0gTWF0aC5hYnMoY2VudGVyWCAtIHZpZXdCb3hbMF0pICogc2NhbGUgKyBvZmZzZXRZO1xuICAgICAgd2lkdGggPSBNYXRoLmFicyh2aWV3Qm94WzNdIC0gdmlld0JveFsxXSkgKiBzY2FsZTtcbiAgICAgIGhlaWdodCA9IE1hdGguYWJzKHZpZXdCb3hbMl0gLSB2aWV3Qm94WzBdKSAqIHNjYWxlO1xuICAgIH0gZWxzZSB7XG4gICAgICBvZmZzZXRDYW52YXNYID0gTWF0aC5hYnMoY2VudGVyWCAtIHZpZXdCb3hbMF0pICogc2NhbGUgKyBvZmZzZXRYO1xuICAgICAgb2Zmc2V0Q2FudmFzWSA9IE1hdGguYWJzKGNlbnRlclkgLSB2aWV3Qm94WzFdKSAqIHNjYWxlICsgb2Zmc2V0WTtcbiAgICAgIHdpZHRoID0gTWF0aC5hYnModmlld0JveFsyXSAtIHZpZXdCb3hbMF0pICogc2NhbGU7XG4gICAgICBoZWlnaHQgPSBNYXRoLmFicyh2aWV3Qm94WzNdIC0gdmlld0JveFsxXSkgKiBzY2FsZTtcbiAgICB9XG5cbiAgICB0aGlzLnRyYW5zZm9ybSA9IFtyb3RhdGVBICogc2NhbGUsIHJvdGF0ZUIgKiBzY2FsZSwgcm90YXRlQyAqIHNjYWxlLCByb3RhdGVEICogc2NhbGUsIG9mZnNldENhbnZhc1ggLSByb3RhdGVBICogc2NhbGUgKiBjZW50ZXJYIC0gcm90YXRlQyAqIHNjYWxlICogY2VudGVyWSwgb2Zmc2V0Q2FudmFzWSAtIHJvdGF0ZUIgKiBzY2FsZSAqIGNlbnRlclggLSByb3RhdGVEICogc2NhbGUgKiBjZW50ZXJZXTtcbiAgICB0aGlzLndpZHRoID0gd2lkdGg7XG4gICAgdGhpcy5oZWlnaHQgPSBoZWlnaHQ7XG4gIH1cblxuICBjbG9uZSh7XG4gICAgc2NhbGUgPSB0aGlzLnNjYWxlLFxuICAgIHJvdGF0aW9uID0gdGhpcy5yb3RhdGlvbixcbiAgICBvZmZzZXRYID0gdGhpcy5vZmZzZXRYLFxuICAgIG9mZnNldFkgPSB0aGlzLm9mZnNldFksXG4gICAgZG9udEZsaXAgPSBmYWxzZVxuICB9ID0ge30pIHtcbiAgICByZXR1cm4gbmV3IFBhZ2VWaWV3cG9ydCh7XG4gICAgICB2aWV3Qm94OiB0aGlzLnZpZXdCb3guc2xpY2UoKSxcbiAgICAgIHNjYWxlLFxuICAgICAgcm90YXRpb24sXG4gICAgICBvZmZzZXRYLFxuICAgICAgb2Zmc2V0WSxcbiAgICAgIGRvbnRGbGlwXG4gICAgfSk7XG4gIH1cblxuICBjb252ZXJ0VG9WaWV3cG9ydFBvaW50KHgsIHkpIHtcbiAgICByZXR1cm4gX3V0aWwuVXRpbC5hcHBseVRyYW5zZm9ybShbeCwgeV0sIHRoaXMudHJhbnNmb3JtKTtcbiAgfVxuXG4gIGNvbnZlcnRUb1ZpZXdwb3J0UmVjdGFuZ2xlKHJlY3QpIHtcbiAgICBjb25zdCB0b3BMZWZ0ID0gX3V0aWwuVXRpbC5hcHBseVRyYW5zZm9ybShbcmVjdFswXSwgcmVjdFsxXV0sIHRoaXMudHJhbnNmb3JtKTtcblxuICAgIGNvbnN0IGJvdHRvbVJpZ2h0ID0gX3V0aWwuVXRpbC5hcHBseVRyYW5zZm9ybShbcmVjdFsyXSwgcmVjdFszXV0sIHRoaXMudHJhbnNmb3JtKTtcblxuICAgIHJldHVybiBbdG9wTGVmdFswXSwgdG9wTGVmdFsxXSwgYm90dG9tUmlnaHRbMF0sIGJvdHRvbVJpZ2h0WzFdXTtcbiAgfVxuXG4gIGNvbnZlcnRUb1BkZlBvaW50KHgsIHkpIHtcbiAgICByZXR1cm4gX3V0aWwuVXRpbC5hcHBseUludmVyc2VUcmFuc2Zvcm0oW3gsIHldLCB0aGlzLnRyYW5zZm9ybSk7XG4gIH1cblxufVxuXG5leHBvcnRzLlBhZ2VWaWV3cG9ydCA9IFBhZ2VWaWV3cG9ydDtcblxuY2xhc3MgUmVuZGVyaW5nQ2FuY2VsbGVkRXhjZXB0aW9uIGV4dGVuZHMgX3V0aWwuQmFzZUV4Y2VwdGlvbiB7XG4gIGNvbnN0cnVjdG9yKG1zZywgdHlwZSkge1xuICAgIHN1cGVyKG1zZyk7XG4gICAgdGhpcy50eXBlID0gdHlwZTtcbiAgfVxuXG59XG5cbmV4cG9ydHMuUmVuZGVyaW5nQ2FuY2VsbGVkRXhjZXB0aW9uID0gUmVuZGVyaW5nQ2FuY2VsbGVkRXhjZXB0aW9uO1xuY29uc3QgTGlua1RhcmdldCA9IHtcbiAgTk9ORTogMCxcbiAgU0VMRjogMSxcbiAgQkxBTks6IDIsXG4gIFBBUkVOVDogMyxcbiAgVE9QOiA0XG59O1xuZXhwb3J0cy5MaW5rVGFyZ2V0ID0gTGlua1RhcmdldDtcblxuZnVuY3Rpb24gYWRkTGlua0F0dHJpYnV0ZXMobGluaywge1xuICB1cmwsXG4gIHRhcmdldCxcbiAgcmVsLFxuICBlbmFibGVkID0gdHJ1ZVxufSA9IHt9KSB7XG4gICgwLCBfdXRpbC5hc3NlcnQpKHVybCAmJiB0eXBlb2YgdXJsID09PSBcInN0cmluZ1wiLCAnYWRkTGlua0F0dHJpYnV0ZXM6IEEgdmFsaWQgXCJ1cmxcIiBwYXJhbWV0ZXIgbXVzdCBwcm92aWRlZC4nKTtcbiAgY29uc3QgdXJsTnVsbFJlbW92ZWQgPSAoMCwgX3V0aWwucmVtb3ZlTnVsbENoYXJhY3RlcnMpKHVybCk7XG5cbiAgaWYgKGVuYWJsZWQpIHtcbiAgICBsaW5rLmhyZWYgPSBsaW5rLnRpdGxlID0gdXJsTnVsbFJlbW92ZWQ7XG4gIH0gZWxzZSB7XG4gICAgbGluay5ocmVmID0gXCJcIjtcbiAgICBsaW5rLnRpdGxlID0gYERpc2FibGVkOiAke3VybE51bGxSZW1vdmVkfWA7XG5cbiAgICBsaW5rLm9uY2xpY2sgPSAoKSA9PiB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfTtcbiAgfVxuXG4gIGxldCB0YXJnZXRTdHIgPSBcIlwiO1xuXG4gIHN3aXRjaCAodGFyZ2V0KSB7XG4gICAgY2FzZSBMaW5rVGFyZ2V0Lk5PTkU6XG4gICAgICBicmVhaztcblxuICAgIGNhc2UgTGlua1RhcmdldC5TRUxGOlxuICAgICAgdGFyZ2V0U3RyID0gXCJfc2VsZlwiO1xuICAgICAgYnJlYWs7XG5cbiAgICBjYXNlIExpbmtUYXJnZXQuQkxBTks6XG4gICAgICB0YXJnZXRTdHIgPSBcIl9ibGFua1wiO1xuICAgICAgYnJlYWs7XG5cbiAgICBjYXNlIExpbmtUYXJnZXQuUEFSRU5UOlxuICAgICAgdGFyZ2V0U3RyID0gXCJfcGFyZW50XCI7XG4gICAgICBicmVhaztcblxuICAgIGNhc2UgTGlua1RhcmdldC5UT1A6XG4gICAgICB0YXJnZXRTdHIgPSBcIl90b3BcIjtcbiAgICAgIGJyZWFrO1xuICB9XG5cbiAgbGluay50YXJnZXQgPSB0YXJnZXRTdHI7XG4gIGxpbmsucmVsID0gdHlwZW9mIHJlbCA9PT0gXCJzdHJpbmdcIiA/IHJlbCA6IERFRkFVTFRfTElOS19SRUw7XG59XG5cbmZ1bmN0aW9uIGdldEZpbGVuYW1lRnJvbVVybCh1cmwpIHtcbiAgY29uc3QgYW5jaG9yID0gdXJsLmluZGV4T2YoXCIjXCIpO1xuICBjb25zdCBxdWVyeSA9IHVybC5pbmRleE9mKFwiP1wiKTtcbiAgY29uc3QgZW5kID0gTWF0aC5taW4oYW5jaG9yID4gMCA/IGFuY2hvciA6IHVybC5sZW5ndGgsIHF1ZXJ5ID4gMCA/IHF1ZXJ5IDogdXJsLmxlbmd0aCk7XG4gIHJldHVybiB1cmwuc3Vic3RyaW5nKHVybC5sYXN0SW5kZXhPZihcIi9cIiwgZW5kKSArIDEsIGVuZCk7XG59XG5cbmNsYXNzIFN0YXRUaW1lciB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMuc3RhcnRlZCA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgdGhpcy50aW1lcyA9IFtdO1xuICB9XG5cbiAgdGltZShuYW1lKSB7XG4gICAgaWYgKG5hbWUgaW4gdGhpcy5zdGFydGVkKSB7XG4gICAgICAoMCwgX3V0aWwud2FybikoYFRpbWVyIGlzIGFscmVhZHkgcnVubmluZyBmb3IgJHtuYW1lfWApO1xuICAgIH1cblxuICAgIHRoaXMuc3RhcnRlZFtuYW1lXSA9IERhdGUubm93KCk7XG4gIH1cblxuICB0aW1lRW5kKG5hbWUpIHtcbiAgICBpZiAoIShuYW1lIGluIHRoaXMuc3RhcnRlZCkpIHtcbiAgICAgICgwLCBfdXRpbC53YXJuKShgVGltZXIgaGFzIG5vdCBiZWVuIHN0YXJ0ZWQgZm9yICR7bmFtZX1gKTtcbiAgICB9XG5cbiAgICB0aGlzLnRpbWVzLnB1c2goe1xuICAgICAgbmFtZSxcbiAgICAgIHN0YXJ0OiB0aGlzLnN0YXJ0ZWRbbmFtZV0sXG4gICAgICBlbmQ6IERhdGUubm93KClcbiAgICB9KTtcbiAgICBkZWxldGUgdGhpcy5zdGFydGVkW25hbWVdO1xuICB9XG5cbiAgdG9TdHJpbmcoKSB7XG4gICAgY29uc3Qgb3V0QnVmID0gW107XG4gICAgbGV0IGxvbmdlc3QgPSAwO1xuXG4gICAgZm9yIChjb25zdCB0aW1lIG9mIHRoaXMudGltZXMpIHtcbiAgICAgIGNvbnN0IG5hbWUgPSB0aW1lLm5hbWU7XG5cbiAgICAgIGlmIChuYW1lLmxlbmd0aCA+IGxvbmdlc3QpIHtcbiAgICAgICAgbG9uZ2VzdCA9IG5hbWUubGVuZ3RoO1xuICAgICAgfVxuICAgIH1cblxuICAgIGZvciAoY29uc3QgdGltZSBvZiB0aGlzLnRpbWVzKSB7XG4gICAgICBjb25zdCBkdXJhdGlvbiA9IHRpbWUuZW5kIC0gdGltZS5zdGFydDtcbiAgICAgIG91dEJ1Zi5wdXNoKGAke3RpbWUubmFtZS5wYWRFbmQobG9uZ2VzdCl9ICR7ZHVyYXRpb259bXNcXG5gKTtcbiAgICB9XG5cbiAgICByZXR1cm4gb3V0QnVmLmpvaW4oXCJcIik7XG4gIH1cblxufVxuXG5leHBvcnRzLlN0YXRUaW1lciA9IFN0YXRUaW1lcjtcblxuZnVuY3Rpb24gaXNGZXRjaFN1cHBvcnRlZCgpIHtcbiAgcmV0dXJuIHR5cGVvZiBmZXRjaCAhPT0gXCJ1bmRlZmluZWRcIiAmJiB0eXBlb2YgUmVzcG9uc2UgIT09IFwidW5kZWZpbmVkXCIgJiYgXCJib2R5XCIgaW4gUmVzcG9uc2UucHJvdG90eXBlICYmIHR5cGVvZiBSZWFkYWJsZVN0cmVhbSAhPT0gXCJ1bmRlZmluZWRcIjtcbn1cblxuZnVuY3Rpb24gaXNWYWxpZEZldGNoVXJsKHVybCwgYmFzZVVybCkge1xuICB0cnkge1xuICAgIGNvbnN0IHtcbiAgICAgIHByb3RvY29sXG4gICAgfSA9IGJhc2VVcmwgPyBuZXcgVVJMKHVybCwgYmFzZVVybCkgOiBuZXcgVVJMKHVybCk7XG4gICAgcmV0dXJuIHByb3RvY29sID09PSBcImh0dHA6XCIgfHwgcHJvdG9jb2wgPT09IFwiaHR0cHM6XCI7XG4gIH0gY2F0Y2ggKGV4KSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG59XG5cbmZ1bmN0aW9uIGxvYWRTY3JpcHQoc3JjKSB7XG4gIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgY29uc3Qgc2NyaXB0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInNjcmlwdFwiKTtcbiAgICBzY3JpcHQuc3JjID0gc3JjO1xuICAgIHNjcmlwdC5vbmxvYWQgPSByZXNvbHZlO1xuXG4gICAgc2NyaXB0Lm9uZXJyb3IgPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZWplY3QobmV3IEVycm9yKGBDYW5ub3QgbG9hZCBzY3JpcHQgYXQ6ICR7c2NyaXB0LnNyY31gKSk7XG4gICAgfTtcblxuICAgIChkb2N1bWVudC5oZWFkIHx8IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCkuYXBwZW5kQ2hpbGQoc2NyaXB0KTtcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIGRlcHJlY2F0ZWQoZGV0YWlscykge1xuICBjb25zb2xlLmxvZyhcIkRlcHJlY2F0ZWQgQVBJIHVzYWdlOiBcIiArIGRldGFpbHMpO1xufVxuXG5sZXQgcGRmRGF0ZVN0cmluZ1JlZ2V4O1xuXG5jbGFzcyBQREZEYXRlU3RyaW5nIHtcbiAgc3RhdGljIHRvRGF0ZU9iamVjdChpbnB1dCkge1xuICAgIGlmICghaW5wdXQgfHwgISgwLCBfdXRpbC5pc1N0cmluZykoaW5wdXQpKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICBpZiAoIXBkZkRhdGVTdHJpbmdSZWdleCkge1xuICAgICAgcGRmRGF0ZVN0cmluZ1JlZ2V4ID0gbmV3IFJlZ0V4cChcIl5EOlwiICsgXCIoXFxcXGR7NH0pXCIgKyBcIihcXFxcZHsyfSk/XCIgKyBcIihcXFxcZHsyfSk/XCIgKyBcIihcXFxcZHsyfSk/XCIgKyBcIihcXFxcZHsyfSk/XCIgKyBcIihcXFxcZHsyfSk/XCIgKyBcIihbWnwrfC1dKT9cIiArIFwiKFxcXFxkezJ9KT9cIiArIFwiJz9cIiArIFwiKFxcXFxkezJ9KT9cIiArIFwiJz9cIik7XG4gICAgfVxuXG4gICAgY29uc3QgbWF0Y2hlcyA9IHBkZkRhdGVTdHJpbmdSZWdleC5leGVjKGlucHV0KTtcblxuICAgIGlmICghbWF0Y2hlcykge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgY29uc3QgeWVhciA9IHBhcnNlSW50KG1hdGNoZXNbMV0sIDEwKTtcbiAgICBsZXQgbW9udGggPSBwYXJzZUludChtYXRjaGVzWzJdLCAxMCk7XG4gICAgbW9udGggPSBtb250aCA+PSAxICYmIG1vbnRoIDw9IDEyID8gbW9udGggLSAxIDogMDtcbiAgICBsZXQgZGF5ID0gcGFyc2VJbnQobWF0Y2hlc1szXSwgMTApO1xuICAgIGRheSA9IGRheSA+PSAxICYmIGRheSA8PSAzMSA/IGRheSA6IDE7XG4gICAgbGV0IGhvdXIgPSBwYXJzZUludChtYXRjaGVzWzRdLCAxMCk7XG4gICAgaG91ciA9IGhvdXIgPj0gMCAmJiBob3VyIDw9IDIzID8gaG91ciA6IDA7XG4gICAgbGV0IG1pbnV0ZSA9IHBhcnNlSW50KG1hdGNoZXNbNV0sIDEwKTtcbiAgICBtaW51dGUgPSBtaW51dGUgPj0gMCAmJiBtaW51dGUgPD0gNTkgPyBtaW51dGUgOiAwO1xuICAgIGxldCBzZWNvbmQgPSBwYXJzZUludChtYXRjaGVzWzZdLCAxMCk7XG4gICAgc2Vjb25kID0gc2Vjb25kID49IDAgJiYgc2Vjb25kIDw9IDU5ID8gc2Vjb25kIDogMDtcbiAgICBjb25zdCB1bml2ZXJzYWxUaW1lUmVsYXRpb24gPSBtYXRjaGVzWzddIHx8IFwiWlwiO1xuICAgIGxldCBvZmZzZXRIb3VyID0gcGFyc2VJbnQobWF0Y2hlc1s4XSwgMTApO1xuICAgIG9mZnNldEhvdXIgPSBvZmZzZXRIb3VyID49IDAgJiYgb2Zmc2V0SG91ciA8PSAyMyA/IG9mZnNldEhvdXIgOiAwO1xuICAgIGxldCBvZmZzZXRNaW51dGUgPSBwYXJzZUludChtYXRjaGVzWzldLCAxMCkgfHwgMDtcbiAgICBvZmZzZXRNaW51dGUgPSBvZmZzZXRNaW51dGUgPj0gMCAmJiBvZmZzZXRNaW51dGUgPD0gNTkgPyBvZmZzZXRNaW51dGUgOiAwO1xuXG4gICAgaWYgKHVuaXZlcnNhbFRpbWVSZWxhdGlvbiA9PT0gXCItXCIpIHtcbiAgICAgIGhvdXIgKz0gb2Zmc2V0SG91cjtcbiAgICAgIG1pbnV0ZSArPSBvZmZzZXRNaW51dGU7XG4gICAgfSBlbHNlIGlmICh1bml2ZXJzYWxUaW1lUmVsYXRpb24gPT09IFwiK1wiKSB7XG4gICAgICBob3VyIC09IG9mZnNldEhvdXI7XG4gICAgICBtaW51dGUgLT0gb2Zmc2V0TWludXRlO1xuICAgIH1cblxuICAgIHJldHVybiBuZXcgRGF0ZShEYXRlLlVUQyh5ZWFyLCBtb250aCwgZGF5LCBob3VyLCBtaW51dGUsIHNlY29uZCkpO1xuICB9XG5cbn1cblxuZXhwb3J0cy5QREZEYXRlU3RyaW5nID0gUERGRGF0ZVN0cmluZztcblxuLyoqKi8gfSksXG4vKiAyICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dfcGRmanNfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmFycmF5Qnl0ZUxlbmd0aCA9IGFycmF5Qnl0ZUxlbmd0aDtcbmV4cG9ydHMuYXJyYXlzVG9CeXRlcyA9IGFycmF5c1RvQnl0ZXM7XG5leHBvcnRzLmFzc2VydCA9IGFzc2VydDtcbmV4cG9ydHMuYnl0ZXNUb1N0cmluZyA9IGJ5dGVzVG9TdHJpbmc7XG5leHBvcnRzLmNyZWF0ZVByb21pc2VDYXBhYmlsaXR5ID0gY3JlYXRlUHJvbWlzZUNhcGFiaWxpdHk7XG5leHBvcnRzLmdldFZlcmJvc2l0eUxldmVsID0gZ2V0VmVyYm9zaXR5TGV2ZWw7XG5leHBvcnRzLmluZm8gPSBpbmZvO1xuZXhwb3J0cy5pc0FycmF5QnVmZmVyID0gaXNBcnJheUJ1ZmZlcjtcbmV4cG9ydHMuaXNBcnJheUVxdWFsID0gaXNBcnJheUVxdWFsO1xuZXhwb3J0cy5pc0Jvb2wgPSBpc0Jvb2w7XG5leHBvcnRzLmlzRW1wdHlPYmogPSBpc0VtcHR5T2JqO1xuZXhwb3J0cy5pc051bSA9IGlzTnVtO1xuZXhwb3J0cy5pc1N0cmluZyA9IGlzU3RyaW5nO1xuZXhwb3J0cy5pc1NhbWVPcmlnaW4gPSBpc1NhbWVPcmlnaW47XG5leHBvcnRzLmNyZWF0ZVZhbGlkQWJzb2x1dGVVcmwgPSBjcmVhdGVWYWxpZEFic29sdXRlVXJsO1xuZXhwb3J0cy5yZW1vdmVOdWxsQ2hhcmFjdGVycyA9IHJlbW92ZU51bGxDaGFyYWN0ZXJzO1xuZXhwb3J0cy5zZXRWZXJib3NpdHlMZXZlbCA9IHNldFZlcmJvc2l0eUxldmVsO1xuZXhwb3J0cy5zaGFkb3cgPSBzaGFkb3c7XG5leHBvcnRzLnN0cmluZzMyID0gc3RyaW5nMzI7XG5leHBvcnRzLnN0cmluZ1RvQnl0ZXMgPSBzdHJpbmdUb0J5dGVzO1xuZXhwb3J0cy5zdHJpbmdUb1BERlN0cmluZyA9IHN0cmluZ1RvUERGU3RyaW5nO1xuZXhwb3J0cy5zdHJpbmdUb1VURjhTdHJpbmcgPSBzdHJpbmdUb1VURjhTdHJpbmc7XG5leHBvcnRzLnV0ZjhTdHJpbmdUb1N0cmluZyA9IHV0ZjhTdHJpbmdUb1N0cmluZztcbmV4cG9ydHMud2FybiA9IHdhcm47XG5leHBvcnRzLnVucmVhY2hhYmxlID0gdW5yZWFjaGFibGU7XG5leHBvcnRzLklzRXZhbFN1cHBvcnRlZENhY2hlZCA9IGV4cG9ydHMuSXNMaXR0bGVFbmRpYW5DYWNoZWQgPSBleHBvcnRzLmNyZWF0ZU9iamVjdFVSTCA9IGV4cG9ydHMuRm9ybWF0RXJyb3IgPSBleHBvcnRzLlV0aWwgPSBleHBvcnRzLlVua25vd25FcnJvckV4Y2VwdGlvbiA9IGV4cG9ydHMuVW5leHBlY3RlZFJlc3BvbnNlRXhjZXB0aW9uID0gZXhwb3J0cy5UZXh0UmVuZGVyaW5nTW9kZSA9IGV4cG9ydHMuU3RyZWFtVHlwZSA9IGV4cG9ydHMuUGVybWlzc2lvbkZsYWcgPSBleHBvcnRzLlBhc3N3b3JkUmVzcG9uc2VzID0gZXhwb3J0cy5QYXNzd29yZEV4Y2VwdGlvbiA9IGV4cG9ydHMuTWlzc2luZ1BERkV4Y2VwdGlvbiA9IGV4cG9ydHMuSW52YWxpZFBERkV4Y2VwdGlvbiA9IGV4cG9ydHMuQWJvcnRFeGNlcHRpb24gPSBleHBvcnRzLkNNYXBDb21wcmVzc2lvblR5cGUgPSBleHBvcnRzLkltYWdlS2luZCA9IGV4cG9ydHMuRm9udFR5cGUgPSBleHBvcnRzLkFubm90YXRpb25UeXBlID0gZXhwb3J0cy5Bbm5vdGF0aW9uU3RhdGVNb2RlbFR5cGUgPSBleHBvcnRzLkFubm90YXRpb25SZXZpZXdTdGF0ZSA9IGV4cG9ydHMuQW5ub3RhdGlvblJlcGx5VHlwZSA9IGV4cG9ydHMuQW5ub3RhdGlvbk1hcmtlZFN0YXRlID0gZXhwb3J0cy5Bbm5vdGF0aW9uRmxhZyA9IGV4cG9ydHMuQW5ub3RhdGlvbkZpZWxkRmxhZyA9IGV4cG9ydHMuQW5ub3RhdGlvbkJvcmRlclN0eWxlVHlwZSA9IGV4cG9ydHMuVU5TVVBQT1JURURfRkVBVFVSRVMgPSBleHBvcnRzLlZlcmJvc2l0eUxldmVsID0gZXhwb3J0cy5PUFMgPSBleHBvcnRzLklERU5USVRZX01BVFJJWCA9IGV4cG9ydHMuRk9OVF9JREVOVElUWV9NQVRSSVggPSBleHBvcnRzLkJhc2VFeGNlcHRpb24gPSB2b2lkIDA7XG5cbl9fd19wZGZqc19yZXF1aXJlX18oMyk7XG5cbmNvbnN0IElERU5USVRZX01BVFJJWCA9IFsxLCAwLCAwLCAxLCAwLCAwXTtcbmV4cG9ydHMuSURFTlRJVFlfTUFUUklYID0gSURFTlRJVFlfTUFUUklYO1xuY29uc3QgRk9OVF9JREVOVElUWV9NQVRSSVggPSBbMC4wMDEsIDAsIDAsIDAuMDAxLCAwLCAwXTtcbmV4cG9ydHMuRk9OVF9JREVOVElUWV9NQVRSSVggPSBGT05UX0lERU5USVRZX01BVFJJWDtcbmNvbnN0IFBlcm1pc3Npb25GbGFnID0ge1xuICBQUklOVDogMHgwNCxcbiAgTU9ESUZZX0NPTlRFTlRTOiAweDA4LFxuICBDT1BZOiAweDEwLFxuICBNT0RJRllfQU5OT1RBVElPTlM6IDB4MjAsXG4gIEZJTExfSU5URVJBQ1RJVkVfRk9STVM6IDB4MTAwLFxuICBDT1BZX0ZPUl9BQ0NFU1NJQklMSVRZOiAweDIwMCxcbiAgQVNTRU1CTEU6IDB4NDAwLFxuICBQUklOVF9ISUdIX1FVQUxJVFk6IDB4ODAwXG59O1xuZXhwb3J0cy5QZXJtaXNzaW9uRmxhZyA9IFBlcm1pc3Npb25GbGFnO1xuY29uc3QgVGV4dFJlbmRlcmluZ01vZGUgPSB7XG4gIEZJTEw6IDAsXG4gIFNUUk9LRTogMSxcbiAgRklMTF9TVFJPS0U6IDIsXG4gIElOVklTSUJMRTogMyxcbiAgRklMTF9BRERfVE9fUEFUSDogNCxcbiAgU1RST0tFX0FERF9UT19QQVRIOiA1LFxuICBGSUxMX1NUUk9LRV9BRERfVE9fUEFUSDogNixcbiAgQUREX1RPX1BBVEg6IDcsXG4gIEZJTExfU1RST0tFX01BU0s6IDMsXG4gIEFERF9UT19QQVRIX0ZMQUc6IDRcbn07XG5leHBvcnRzLlRleHRSZW5kZXJpbmdNb2RlID0gVGV4dFJlbmRlcmluZ01vZGU7XG5jb25zdCBJbWFnZUtpbmQgPSB7XG4gIEdSQVlTQ0FMRV8xQlBQOiAxLFxuICBSR0JfMjRCUFA6IDIsXG4gIFJHQkFfMzJCUFA6IDNcbn07XG5leHBvcnRzLkltYWdlS2luZCA9IEltYWdlS2luZDtcbmNvbnN0IEFubm90YXRpb25UeXBlID0ge1xuICBURVhUOiAxLFxuICBMSU5LOiAyLFxuICBGUkVFVEVYVDogMyxcbiAgTElORTogNCxcbiAgU1FVQVJFOiA1LFxuICBDSVJDTEU6IDYsXG4gIFBPTFlHT046IDcsXG4gIFBPTFlMSU5FOiA4LFxuICBISUdITElHSFQ6IDksXG4gIFVOREVSTElORTogMTAsXG4gIFNRVUlHR0xZOiAxMSxcbiAgU1RSSUtFT1VUOiAxMixcbiAgU1RBTVA6IDEzLFxuICBDQVJFVDogMTQsXG4gIElOSzogMTUsXG4gIFBPUFVQOiAxNixcbiAgRklMRUFUVEFDSE1FTlQ6IDE3LFxuICBTT1VORDogMTgsXG4gIE1PVklFOiAxOSxcbiAgV0lER0VUOiAyMCxcbiAgU0NSRUVOOiAyMSxcbiAgUFJJTlRFUk1BUks6IDIyLFxuICBUUkFQTkVUOiAyMyxcbiAgV0FURVJNQVJLOiAyNCxcbiAgVEhSRUVEOiAyNSxcbiAgUkVEQUNUOiAyNlxufTtcbmV4cG9ydHMuQW5ub3RhdGlvblR5cGUgPSBBbm5vdGF0aW9uVHlwZTtcbmNvbnN0IEFubm90YXRpb25TdGF0ZU1vZGVsVHlwZSA9IHtcbiAgTUFSS0VEOiBcIk1hcmtlZFwiLFxuICBSRVZJRVc6IFwiUmV2aWV3XCJcbn07XG5leHBvcnRzLkFubm90YXRpb25TdGF0ZU1vZGVsVHlwZSA9IEFubm90YXRpb25TdGF0ZU1vZGVsVHlwZTtcbmNvbnN0IEFubm90YXRpb25NYXJrZWRTdGF0ZSA9IHtcbiAgTUFSS0VEOiBcIk1hcmtlZFwiLFxuICBVTk1BUktFRDogXCJVbm1hcmtlZFwiXG59O1xuZXhwb3J0cy5Bbm5vdGF0aW9uTWFya2VkU3RhdGUgPSBBbm5vdGF0aW9uTWFya2VkU3RhdGU7XG5jb25zdCBBbm5vdGF0aW9uUmV2aWV3U3RhdGUgPSB7XG4gIEFDQ0VQVEVEOiBcIkFjY2VwdGVkXCIsXG4gIFJFSkVDVEVEOiBcIlJlamVjdGVkXCIsXG4gIENBTkNFTExFRDogXCJDYW5jZWxsZWRcIixcbiAgQ09NUExFVEVEOiBcIkNvbXBsZXRlZFwiLFxuICBOT05FOiBcIk5vbmVcIlxufTtcbmV4cG9ydHMuQW5ub3RhdGlvblJldmlld1N0YXRlID0gQW5ub3RhdGlvblJldmlld1N0YXRlO1xuY29uc3QgQW5ub3RhdGlvblJlcGx5VHlwZSA9IHtcbiAgR1JPVVA6IFwiR3JvdXBcIixcbiAgUkVQTFk6IFwiUlwiXG59O1xuZXhwb3J0cy5Bbm5vdGF0aW9uUmVwbHlUeXBlID0gQW5ub3RhdGlvblJlcGx5VHlwZTtcbmNvbnN0IEFubm90YXRpb25GbGFnID0ge1xuICBJTlZJU0lCTEU6IDB4MDEsXG4gIEhJRERFTjogMHgwMixcbiAgUFJJTlQ6IDB4MDQsXG4gIE5PWk9PTTogMHgwOCxcbiAgTk9ST1RBVEU6IDB4MTAsXG4gIE5PVklFVzogMHgyMCxcbiAgUkVBRE9OTFk6IDB4NDAsXG4gIExPQ0tFRDogMHg4MCxcbiAgVE9HR0xFTk9WSUVXOiAweDEwMCxcbiAgTE9DS0VEQ09OVEVOVFM6IDB4MjAwXG59O1xuZXhwb3J0cy5Bbm5vdGF0aW9uRmxhZyA9IEFubm90YXRpb25GbGFnO1xuY29uc3QgQW5ub3RhdGlvbkZpZWxkRmxhZyA9IHtcbiAgUkVBRE9OTFk6IDB4MDAwMDAwMSxcbiAgUkVRVUlSRUQ6IDB4MDAwMDAwMixcbiAgTk9FWFBPUlQ6IDB4MDAwMDAwNCxcbiAgTVVMVElMSU5FOiAweDAwMDEwMDAsXG4gIFBBU1NXT1JEOiAweDAwMDIwMDAsXG4gIE5PVE9HR0xFVE9PRkY6IDB4MDAwNDAwMCxcbiAgUkFESU86IDB4MDAwODAwMCxcbiAgUFVTSEJVVFRPTjogMHgwMDEwMDAwLFxuICBDT01CTzogMHgwMDIwMDAwLFxuICBFRElUOiAweDAwNDAwMDAsXG4gIFNPUlQ6IDB4MDA4MDAwMCxcbiAgRklMRVNFTEVDVDogMHgwMTAwMDAwLFxuICBNVUxUSVNFTEVDVDogMHgwMjAwMDAwLFxuICBET05PVFNQRUxMQ0hFQ0s6IDB4MDQwMDAwMCxcbiAgRE9OT1RTQ1JPTEw6IDB4MDgwMDAwMCxcbiAgQ09NQjogMHgxMDAwMDAwLFxuICBSSUNIVEVYVDogMHgyMDAwMDAwLFxuICBSQURJT1NJTlVOSVNPTjogMHgyMDAwMDAwLFxuICBDT01NSVRPTlNFTENIQU5HRTogMHg0MDAwMDAwXG59O1xuZXhwb3J0cy5Bbm5vdGF0aW9uRmllbGRGbGFnID0gQW5ub3RhdGlvbkZpZWxkRmxhZztcbmNvbnN0IEFubm90YXRpb25Cb3JkZXJTdHlsZVR5cGUgPSB7XG4gIFNPTElEOiAxLFxuICBEQVNIRUQ6IDIsXG4gIEJFVkVMRUQ6IDMsXG4gIElOU0VUOiA0LFxuICBVTkRFUkxJTkU6IDVcbn07XG5leHBvcnRzLkFubm90YXRpb25Cb3JkZXJTdHlsZVR5cGUgPSBBbm5vdGF0aW9uQm9yZGVyU3R5bGVUeXBlO1xuY29uc3QgU3RyZWFtVHlwZSA9IHtcbiAgVU5LTk9XTjogXCJVTktOT1dOXCIsXG4gIEZMQVRFOiBcIkZMQVRFXCIsXG4gIExaVzogXCJMWldcIixcbiAgRENUOiBcIkRDVFwiLFxuICBKUFg6IFwiSlBYXCIsXG4gIEpCSUc6IFwiSkJJR1wiLFxuICBBODU6IFwiQTg1XCIsXG4gIEFIWDogXCJBSFhcIixcbiAgQ0NGOiBcIkNDRlwiLFxuICBSTFg6IFwiUkxYXCJcbn07XG5leHBvcnRzLlN0cmVhbVR5cGUgPSBTdHJlYW1UeXBlO1xuY29uc3QgRm9udFR5cGUgPSB7XG4gIFVOS05PV046IFwiVU5LTk9XTlwiLFxuICBUWVBFMTogXCJUWVBFMVwiLFxuICBUWVBFMUM6IFwiVFlQRTFDXCIsXG4gIENJREZPTlRUWVBFMDogXCJDSURGT05UVFlQRTBcIixcbiAgQ0lERk9OVFRZUEUwQzogXCJDSURGT05UVFlQRTBDXCIsXG4gIFRSVUVUWVBFOiBcIlRSVUVUWVBFXCIsXG4gIENJREZPTlRUWVBFMjogXCJDSURGT05UVFlQRTJcIixcbiAgVFlQRTM6IFwiVFlQRTNcIixcbiAgT1BFTlRZUEU6IFwiT1BFTlRZUEVcIixcbiAgVFlQRTA6IFwiVFlQRTBcIixcbiAgTU1UWVBFMTogXCJNTVRZUEUxXCJcbn07XG5leHBvcnRzLkZvbnRUeXBlID0gRm9udFR5cGU7XG5jb25zdCBWZXJib3NpdHlMZXZlbCA9IHtcbiAgRVJST1JTOiAwLFxuICBXQVJOSU5HUzogMSxcbiAgSU5GT1M6IDVcbn07XG5leHBvcnRzLlZlcmJvc2l0eUxldmVsID0gVmVyYm9zaXR5TGV2ZWw7XG5jb25zdCBDTWFwQ29tcHJlc3Npb25UeXBlID0ge1xuICBOT05FOiAwLFxuICBCSU5BUlk6IDEsXG4gIFNUUkVBTTogMlxufTtcbmV4cG9ydHMuQ01hcENvbXByZXNzaW9uVHlwZSA9IENNYXBDb21wcmVzc2lvblR5cGU7XG5jb25zdCBPUFMgPSB7XG4gIGRlcGVuZGVuY3k6IDEsXG4gIHNldExpbmVXaWR0aDogMixcbiAgc2V0TGluZUNhcDogMyxcbiAgc2V0TGluZUpvaW46IDQsXG4gIHNldE1pdGVyTGltaXQ6IDUsXG4gIHNldERhc2g6IDYsXG4gIHNldFJlbmRlcmluZ0ludGVudDogNyxcbiAgc2V0RmxhdG5lc3M6IDgsXG4gIHNldEdTdGF0ZTogOSxcbiAgc2F2ZTogMTAsXG4gIHJlc3RvcmU6IDExLFxuICB0cmFuc2Zvcm06IDEyLFxuICBtb3ZlVG86IDEzLFxuICBsaW5lVG86IDE0LFxuICBjdXJ2ZVRvOiAxNSxcbiAgY3VydmVUbzI6IDE2LFxuICBjdXJ2ZVRvMzogMTcsXG4gIGNsb3NlUGF0aDogMTgsXG4gIHJlY3RhbmdsZTogMTksXG4gIHN0cm9rZTogMjAsXG4gIGNsb3NlU3Ryb2tlOiAyMSxcbiAgZmlsbDogMjIsXG4gIGVvRmlsbDogMjMsXG4gIGZpbGxTdHJva2U6IDI0LFxuICBlb0ZpbGxTdHJva2U6IDI1LFxuICBjbG9zZUZpbGxTdHJva2U6IDI2LFxuICBjbG9zZUVPRmlsbFN0cm9rZTogMjcsXG4gIGVuZFBhdGg6IDI4LFxuICBjbGlwOiAyOSxcbiAgZW9DbGlwOiAzMCxcbiAgYmVnaW5UZXh0OiAzMSxcbiAgZW5kVGV4dDogMzIsXG4gIHNldENoYXJTcGFjaW5nOiAzMyxcbiAgc2V0V29yZFNwYWNpbmc6IDM0LFxuICBzZXRIU2NhbGU6IDM1LFxuICBzZXRMZWFkaW5nOiAzNixcbiAgc2V0Rm9udDogMzcsXG4gIHNldFRleHRSZW5kZXJpbmdNb2RlOiAzOCxcbiAgc2V0VGV4dFJpc2U6IDM5LFxuICBtb3ZlVGV4dDogNDAsXG4gIHNldExlYWRpbmdNb3ZlVGV4dDogNDEsXG4gIHNldFRleHRNYXRyaXg6IDQyLFxuICBuZXh0TGluZTogNDMsXG4gIHNob3dUZXh0OiA0NCxcbiAgc2hvd1NwYWNlZFRleHQ6IDQ1LFxuICBuZXh0TGluZVNob3dUZXh0OiA0NixcbiAgbmV4dExpbmVTZXRTcGFjaW5nU2hvd1RleHQ6IDQ3LFxuICBzZXRDaGFyV2lkdGg6IDQ4LFxuICBzZXRDaGFyV2lkdGhBbmRCb3VuZHM6IDQ5LFxuICBzZXRTdHJva2VDb2xvclNwYWNlOiA1MCxcbiAgc2V0RmlsbENvbG9yU3BhY2U6IDUxLFxuICBzZXRTdHJva2VDb2xvcjogNTIsXG4gIHNldFN0cm9rZUNvbG9yTjogNTMsXG4gIHNldEZpbGxDb2xvcjogNTQsXG4gIHNldEZpbGxDb2xvck46IDU1LFxuICBzZXRTdHJva2VHcmF5OiA1NixcbiAgc2V0RmlsbEdyYXk6IDU3LFxuICBzZXRTdHJva2VSR0JDb2xvcjogNTgsXG4gIHNldEZpbGxSR0JDb2xvcjogNTksXG4gIHNldFN0cm9rZUNNWUtDb2xvcjogNjAsXG4gIHNldEZpbGxDTVlLQ29sb3I6IDYxLFxuICBzaGFkaW5nRmlsbDogNjIsXG4gIGJlZ2luSW5saW5lSW1hZ2U6IDYzLFxuICBiZWdpbkltYWdlRGF0YTogNjQsXG4gIGVuZElubGluZUltYWdlOiA2NSxcbiAgcGFpbnRYT2JqZWN0OiA2NixcbiAgbWFya1BvaW50OiA2NyxcbiAgbWFya1BvaW50UHJvcHM6IDY4LFxuICBiZWdpbk1hcmtlZENvbnRlbnQ6IDY5LFxuICBiZWdpbk1hcmtlZENvbnRlbnRQcm9wczogNzAsXG4gIGVuZE1hcmtlZENvbnRlbnQ6IDcxLFxuICBiZWdpbkNvbXBhdDogNzIsXG4gIGVuZENvbXBhdDogNzMsXG4gIHBhaW50Rm9ybVhPYmplY3RCZWdpbjogNzQsXG4gIHBhaW50Rm9ybVhPYmplY3RFbmQ6IDc1LFxuICBiZWdpbkdyb3VwOiA3NixcbiAgZW5kR3JvdXA6IDc3LFxuICBiZWdpbkFubm90YXRpb25zOiA3OCxcbiAgZW5kQW5ub3RhdGlvbnM6IDc5LFxuICBiZWdpbkFubm90YXRpb246IDgwLFxuICBlbmRBbm5vdGF0aW9uOiA4MSxcbiAgcGFpbnRKcGVnWE9iamVjdDogODIsXG4gIHBhaW50SW1hZ2VNYXNrWE9iamVjdDogODMsXG4gIHBhaW50SW1hZ2VNYXNrWE9iamVjdEdyb3VwOiA4NCxcbiAgcGFpbnRJbWFnZVhPYmplY3Q6IDg1LFxuICBwYWludElubGluZUltYWdlWE9iamVjdDogODYsXG4gIHBhaW50SW5saW5lSW1hZ2VYT2JqZWN0R3JvdXA6IDg3LFxuICBwYWludEltYWdlWE9iamVjdFJlcGVhdDogODgsXG4gIHBhaW50SW1hZ2VNYXNrWE9iamVjdFJlcGVhdDogODksXG4gIHBhaW50U29saWRDb2xvckltYWdlTWFzazogOTAsXG4gIGNvbnN0cnVjdFBhdGg6IDkxXG59O1xuZXhwb3J0cy5PUFMgPSBPUFM7XG5jb25zdCBVTlNVUFBPUlRFRF9GRUFUVVJFUyA9IHtcbiAgdW5rbm93bjogXCJ1bmtub3duXCIsXG4gIGZvcm1zOiBcImZvcm1zXCIsXG4gIGphdmFTY3JpcHQ6IFwiamF2YVNjcmlwdFwiLFxuICBzbWFzazogXCJzbWFza1wiLFxuICBzaGFkaW5nUGF0dGVybjogXCJzaGFkaW5nUGF0dGVyblwiLFxuICBmb250OiBcImZvbnRcIixcbiAgZXJyb3JUaWxpbmdQYXR0ZXJuOiBcImVycm9yVGlsaW5nUGF0dGVyblwiLFxuICBlcnJvckV4dEdTdGF0ZTogXCJlcnJvckV4dEdTdGF0ZVwiLFxuICBlcnJvclhPYmplY3Q6IFwiZXJyb3JYT2JqZWN0XCIsXG4gIGVycm9yRm9udExvYWRUeXBlMzogXCJlcnJvckZvbnRMb2FkVHlwZTNcIixcbiAgZXJyb3JGb250U3RhdGU6IFwiZXJyb3JGb250U3RhdGVcIixcbiAgZXJyb3JGb250TWlzc2luZzogXCJlcnJvckZvbnRNaXNzaW5nXCIsXG4gIGVycm9yRm9udFRyYW5zbGF0ZTogXCJlcnJvckZvbnRUcmFuc2xhdGVcIixcbiAgZXJyb3JDb2xvclNwYWNlOiBcImVycm9yQ29sb3JTcGFjZVwiLFxuICBlcnJvck9wZXJhdG9yTGlzdDogXCJlcnJvck9wZXJhdG9yTGlzdFwiLFxuICBlcnJvckZvbnRUb1VuaWNvZGU6IFwiZXJyb3JGb250VG9Vbmljb2RlXCIsXG4gIGVycm9yRm9udExvYWROYXRpdmU6IFwiZXJyb3JGb250TG9hZE5hdGl2ZVwiLFxuICBlcnJvckZvbnRHZXRQYXRoOiBcImVycm9yRm9udEdldFBhdGhcIlxufTtcbmV4cG9ydHMuVU5TVVBQT1JURURfRkVBVFVSRVMgPSBVTlNVUFBPUlRFRF9GRUFUVVJFUztcbmNvbnN0IFBhc3N3b3JkUmVzcG9uc2VzID0ge1xuICBORUVEX1BBU1NXT1JEOiAxLFxuICBJTkNPUlJFQ1RfUEFTU1dPUkQ6IDJcbn07XG5leHBvcnRzLlBhc3N3b3JkUmVzcG9uc2VzID0gUGFzc3dvcmRSZXNwb25zZXM7XG5sZXQgdmVyYm9zaXR5ID0gVmVyYm9zaXR5TGV2ZWwuV0FSTklOR1M7XG5cbmZ1bmN0aW9uIHNldFZlcmJvc2l0eUxldmVsKGxldmVsKSB7XG4gIGlmIChOdW1iZXIuaXNJbnRlZ2VyKGxldmVsKSkge1xuICAgIHZlcmJvc2l0eSA9IGxldmVsO1xuICB9XG59XG5cbmZ1bmN0aW9uIGdldFZlcmJvc2l0eUxldmVsKCkge1xuICByZXR1cm4gdmVyYm9zaXR5O1xufVxuXG5mdW5jdGlvbiBpbmZvKG1zZykge1xuICBpZiAodmVyYm9zaXR5ID49IFZlcmJvc2l0eUxldmVsLklORk9TKSB7XG4gICAgY29uc29sZS5sb2coYEluZm86ICR7bXNnfWApO1xuICB9XG59XG5cbmZ1bmN0aW9uIHdhcm4obXNnKSB7XG4gIGlmICh2ZXJib3NpdHkgPj0gVmVyYm9zaXR5TGV2ZWwuV0FSTklOR1MpIHtcbiAgICBjb25zb2xlLmxvZyhgV2FybmluZzogJHttc2d9YCk7XG4gIH1cbn1cblxuZnVuY3Rpb24gdW5yZWFjaGFibGUobXNnKSB7XG4gIHRocm93IG5ldyBFcnJvcihtc2cpO1xufVxuXG5mdW5jdGlvbiBhc3NlcnQoY29uZCwgbXNnKSB7XG4gIGlmICghY29uZCkge1xuICAgIHVucmVhY2hhYmxlKG1zZyk7XG4gIH1cbn1cblxuZnVuY3Rpb24gaXNTYW1lT3JpZ2luKGJhc2VVcmwsIG90aGVyVXJsKSB7XG4gIGxldCBiYXNlO1xuXG4gIHRyeSB7XG4gICAgYmFzZSA9IG5ldyBVUkwoYmFzZVVybCk7XG5cbiAgICBpZiAoIWJhc2Uub3JpZ2luIHx8IGJhc2Uub3JpZ2luID09PSBcIm51bGxcIikge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfSBjYXRjaCAoZSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIGNvbnN0IG90aGVyID0gbmV3IFVSTChvdGhlclVybCwgYmFzZSk7XG4gIHJldHVybiBiYXNlLm9yaWdpbiA9PT0gb3RoZXIub3JpZ2luO1xufVxuXG5mdW5jdGlvbiBfaXNWYWxpZFByb3RvY29sKHVybCkge1xuICBpZiAoIXVybCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHN3aXRjaCAodXJsLnByb3RvY29sKSB7XG4gICAgY2FzZSBcImh0dHA6XCI6XG4gICAgY2FzZSBcImh0dHBzOlwiOlxuICAgIGNhc2UgXCJmdHA6XCI6XG4gICAgY2FzZSBcIm1haWx0bzpcIjpcbiAgICBjYXNlIFwidGVsOlwiOlxuICAgICAgcmV0dXJuIHRydWU7XG5cbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIGZhbHNlO1xuICB9XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVZhbGlkQWJzb2x1dGVVcmwodXJsLCBiYXNlVXJsKSB7XG4gIGlmICghdXJsKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICB0cnkge1xuICAgIGNvbnN0IGFic29sdXRlVXJsID0gYmFzZVVybCA/IG5ldyBVUkwodXJsLCBiYXNlVXJsKSA6IG5ldyBVUkwodXJsKTtcblxuICAgIGlmIChfaXNWYWxpZFByb3RvY29sKGFic29sdXRlVXJsKSkge1xuICAgICAgcmV0dXJuIGFic29sdXRlVXJsO1xuICAgIH1cbiAgfSBjYXRjaCAoZXgpIHt9XG5cbiAgcmV0dXJuIG51bGw7XG59XG5cbmZ1bmN0aW9uIHNoYWRvdyhvYmosIHByb3AsIHZhbHVlKSB7XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIHByb3AsIHtcbiAgICB2YWx1ZSxcbiAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICB3cml0YWJsZTogZmFsc2VcbiAgfSk7XG4gIHJldHVybiB2YWx1ZTtcbn1cblxuY29uc3QgQmFzZUV4Y2VwdGlvbiA9IGZ1bmN0aW9uIEJhc2VFeGNlcHRpb25DbG9zdXJlKCkge1xuICBmdW5jdGlvbiBCYXNlRXhjZXB0aW9uKG1lc3NhZ2UpIHtcbiAgICBpZiAodGhpcy5jb25zdHJ1Y3RvciA9PT0gQmFzZUV4Y2VwdGlvbikge1xuICAgICAgdW5yZWFjaGFibGUoXCJDYW5ub3QgaW5pdGlhbGl6ZSBCYXNlRXhjZXB0aW9uLlwiKTtcbiAgICB9XG5cbiAgICB0aGlzLm1lc3NhZ2UgPSBtZXNzYWdlO1xuICAgIHRoaXMubmFtZSA9IHRoaXMuY29uc3RydWN0b3IubmFtZTtcbiAgfVxuXG4gIEJhc2VFeGNlcHRpb24ucHJvdG90eXBlID0gbmV3IEVycm9yKCk7XG4gIEJhc2VFeGNlcHRpb24uY29uc3RydWN0b3IgPSBCYXNlRXhjZXB0aW9uO1xuICByZXR1cm4gQmFzZUV4Y2VwdGlvbjtcbn0oKTtcblxuZXhwb3J0cy5CYXNlRXhjZXB0aW9uID0gQmFzZUV4Y2VwdGlvbjtcblxuY2xhc3MgUGFzc3dvcmRFeGNlcHRpb24gZXh0ZW5kcyBCYXNlRXhjZXB0aW9uIHtcbiAgY29uc3RydWN0b3IobXNnLCBjb2RlKSB7XG4gICAgc3VwZXIobXNnKTtcbiAgICB0aGlzLmNvZGUgPSBjb2RlO1xuICB9XG5cbn1cblxuZXhwb3J0cy5QYXNzd29yZEV4Y2VwdGlvbiA9IFBhc3N3b3JkRXhjZXB0aW9uO1xuXG5jbGFzcyBVbmtub3duRXJyb3JFeGNlcHRpb24gZXh0ZW5kcyBCYXNlRXhjZXB0aW9uIHtcbiAgY29uc3RydWN0b3IobXNnLCBkZXRhaWxzKSB7XG4gICAgc3VwZXIobXNnKTtcbiAgICB0aGlzLmRldGFpbHMgPSBkZXRhaWxzO1xuICB9XG5cbn1cblxuZXhwb3J0cy5Vbmtub3duRXJyb3JFeGNlcHRpb24gPSBVbmtub3duRXJyb3JFeGNlcHRpb247XG5cbmNsYXNzIEludmFsaWRQREZFeGNlcHRpb24gZXh0ZW5kcyBCYXNlRXhjZXB0aW9uIHt9XG5cbmV4cG9ydHMuSW52YWxpZFBERkV4Y2VwdGlvbiA9IEludmFsaWRQREZFeGNlcHRpb247XG5cbmNsYXNzIE1pc3NpbmdQREZFeGNlcHRpb24gZXh0ZW5kcyBCYXNlRXhjZXB0aW9uIHt9XG5cbmV4cG9ydHMuTWlzc2luZ1BERkV4Y2VwdGlvbiA9IE1pc3NpbmdQREZFeGNlcHRpb247XG5cbmNsYXNzIFVuZXhwZWN0ZWRSZXNwb25zZUV4Y2VwdGlvbiBleHRlbmRzIEJhc2VFeGNlcHRpb24ge1xuICBjb25zdHJ1Y3Rvcihtc2csIHN0YXR1cykge1xuICAgIHN1cGVyKG1zZyk7XG4gICAgdGhpcy5zdGF0dXMgPSBzdGF0dXM7XG4gIH1cblxufVxuXG5leHBvcnRzLlVuZXhwZWN0ZWRSZXNwb25zZUV4Y2VwdGlvbiA9IFVuZXhwZWN0ZWRSZXNwb25zZUV4Y2VwdGlvbjtcblxuY2xhc3MgRm9ybWF0RXJyb3IgZXh0ZW5kcyBCYXNlRXhjZXB0aW9uIHt9XG5cbmV4cG9ydHMuRm9ybWF0RXJyb3IgPSBGb3JtYXRFcnJvcjtcblxuY2xhc3MgQWJvcnRFeGNlcHRpb24gZXh0ZW5kcyBCYXNlRXhjZXB0aW9uIHt9XG5cbmV4cG9ydHMuQWJvcnRFeGNlcHRpb24gPSBBYm9ydEV4Y2VwdGlvbjtcbmNvbnN0IE51bGxDaGFyYWN0ZXJzUmVnRXhwID0gL1xceDAwL2c7XG5cbmZ1bmN0aW9uIHJlbW92ZU51bGxDaGFyYWN0ZXJzKHN0cikge1xuICBpZiAodHlwZW9mIHN0ciAhPT0gXCJzdHJpbmdcIikge1xuICAgIHdhcm4oXCJUaGUgYXJndW1lbnQgZm9yIHJlbW92ZU51bGxDaGFyYWN0ZXJzIG11c3QgYmUgYSBzdHJpbmcuXCIpO1xuICAgIHJldHVybiBzdHI7XG4gIH1cblxuICByZXR1cm4gc3RyLnJlcGxhY2UoTnVsbENoYXJhY3RlcnNSZWdFeHAsIFwiXCIpO1xufVxuXG5mdW5jdGlvbiBieXRlc1RvU3RyaW5nKGJ5dGVzKSB7XG4gIGFzc2VydChieXRlcyAhPT0gbnVsbCAmJiB0eXBlb2YgYnl0ZXMgPT09IFwib2JqZWN0XCIgJiYgYnl0ZXMubGVuZ3RoICE9PSB1bmRlZmluZWQsIFwiSW52YWxpZCBhcmd1bWVudCBmb3IgYnl0ZXNUb1N0cmluZ1wiKTtcbiAgY29uc3QgbGVuZ3RoID0gYnl0ZXMubGVuZ3RoO1xuICBjb25zdCBNQVhfQVJHVU1FTlRfQ09VTlQgPSA4MTkyO1xuXG4gIGlmIChsZW5ndGggPCBNQVhfQVJHVU1FTlRfQ09VTlQpIHtcbiAgICByZXR1cm4gU3RyaW5nLmZyb21DaGFyQ29kZS5hcHBseShudWxsLCBieXRlcyk7XG4gIH1cblxuICBjb25zdCBzdHJCdWYgPSBbXTtcblxuICBmb3IgKGxldCBpID0gMDsgaSA8IGxlbmd0aDsgaSArPSBNQVhfQVJHVU1FTlRfQ09VTlQpIHtcbiAgICBjb25zdCBjaHVua0VuZCA9IE1hdGgubWluKGkgKyBNQVhfQVJHVU1FTlRfQ09VTlQsIGxlbmd0aCk7XG4gICAgY29uc3QgY2h1bmsgPSBieXRlcy5zdWJhcnJheShpLCBjaHVua0VuZCk7XG4gICAgc3RyQnVmLnB1c2goU3RyaW5nLmZyb21DaGFyQ29kZS5hcHBseShudWxsLCBjaHVuaykpO1xuICB9XG5cbiAgcmV0dXJuIHN0ckJ1Zi5qb2luKFwiXCIpO1xufVxuXG5mdW5jdGlvbiBzdHJpbmdUb0J5dGVzKHN0cikge1xuICBhc3NlcnQodHlwZW9mIHN0ciA9PT0gXCJzdHJpbmdcIiwgXCJJbnZhbGlkIGFyZ3VtZW50IGZvciBzdHJpbmdUb0J5dGVzXCIpO1xuICBjb25zdCBsZW5ndGggPSBzdHIubGVuZ3RoO1xuICBjb25zdCBieXRlcyA9IG5ldyBVaW50OEFycmF5KGxlbmd0aCk7XG5cbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZW5ndGg7ICsraSkge1xuICAgIGJ5dGVzW2ldID0gc3RyLmNoYXJDb2RlQXQoaSkgJiAweGZmO1xuICB9XG5cbiAgcmV0dXJuIGJ5dGVzO1xufVxuXG5mdW5jdGlvbiBhcnJheUJ5dGVMZW5ndGgoYXJyKSB7XG4gIGlmIChhcnIubGVuZ3RoICE9PSB1bmRlZmluZWQpIHtcbiAgICByZXR1cm4gYXJyLmxlbmd0aDtcbiAgfVxuXG4gIGFzc2VydChhcnIuYnl0ZUxlbmd0aCAhPT0gdW5kZWZpbmVkLCBcImFycmF5Qnl0ZUxlbmd0aCAtIGludmFsaWQgYXJndW1lbnQuXCIpO1xuICByZXR1cm4gYXJyLmJ5dGVMZW5ndGg7XG59XG5cbmZ1bmN0aW9uIGFycmF5c1RvQnl0ZXMoYXJyKSB7XG4gIGNvbnN0IGxlbmd0aCA9IGFyci5sZW5ndGg7XG5cbiAgaWYgKGxlbmd0aCA9PT0gMSAmJiBhcnJbMF0gaW5zdGFuY2VvZiBVaW50OEFycmF5KSB7XG4gICAgcmV0dXJuIGFyclswXTtcbiAgfVxuXG4gIGxldCByZXN1bHRMZW5ndGggPSAwO1xuXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICByZXN1bHRMZW5ndGggKz0gYXJyYXlCeXRlTGVuZ3RoKGFycltpXSk7XG4gIH1cblxuICBsZXQgcG9zID0gMDtcbiAgY29uc3QgZGF0YSA9IG5ldyBVaW50OEFycmF5KHJlc3VsdExlbmd0aCk7XG5cbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgIGxldCBpdGVtID0gYXJyW2ldO1xuXG4gICAgaWYgKCEoaXRlbSBpbnN0YW5jZW9mIFVpbnQ4QXJyYXkpKSB7XG4gICAgICBpZiAodHlwZW9mIGl0ZW0gPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgaXRlbSA9IHN0cmluZ1RvQnl0ZXMoaXRlbSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpdGVtID0gbmV3IFVpbnQ4QXJyYXkoaXRlbSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgY29uc3QgaXRlbUxlbmd0aCA9IGl0ZW0uYnl0ZUxlbmd0aDtcbiAgICBkYXRhLnNldChpdGVtLCBwb3MpO1xuICAgIHBvcyArPSBpdGVtTGVuZ3RoO1xuICB9XG5cbiAgcmV0dXJuIGRhdGE7XG59XG5cbmZ1bmN0aW9uIHN0cmluZzMyKHZhbHVlKSB7XG4gIHJldHVybiBTdHJpbmcuZnJvbUNoYXJDb2RlKHZhbHVlID4+IDI0ICYgMHhmZiwgdmFsdWUgPj4gMTYgJiAweGZmLCB2YWx1ZSA+PiA4ICYgMHhmZiwgdmFsdWUgJiAweGZmKTtcbn1cblxuZnVuY3Rpb24gaXNMaXR0bGVFbmRpYW4oKSB7XG4gIGNvbnN0IGJ1ZmZlcjggPSBuZXcgVWludDhBcnJheSg0KTtcbiAgYnVmZmVyOFswXSA9IDE7XG4gIGNvbnN0IHZpZXczMiA9IG5ldyBVaW50MzJBcnJheShidWZmZXI4LmJ1ZmZlciwgMCwgMSk7XG4gIHJldHVybiB2aWV3MzJbMF0gPT09IDE7XG59XG5cbmNvbnN0IElzTGl0dGxlRW5kaWFuQ2FjaGVkID0ge1xuICBnZXQgdmFsdWUoKSB7XG4gICAgcmV0dXJuIHNoYWRvdyh0aGlzLCBcInZhbHVlXCIsIGlzTGl0dGxlRW5kaWFuKCkpO1xuICB9XG5cbn07XG5leHBvcnRzLklzTGl0dGxlRW5kaWFuQ2FjaGVkID0gSXNMaXR0bGVFbmRpYW5DYWNoZWQ7XG5cbmZ1bmN0aW9uIGlzRXZhbFN1cHBvcnRlZCgpIHtcbiAgdHJ5IHtcbiAgICBuZXcgRnVuY3Rpb24oXCJcIik7XG4gICAgcmV0dXJuIHRydWU7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbn1cblxuY29uc3QgSXNFdmFsU3VwcG9ydGVkQ2FjaGVkID0ge1xuICBnZXQgdmFsdWUoKSB7XG4gICAgcmV0dXJuIHNoYWRvdyh0aGlzLCBcInZhbHVlXCIsIGlzRXZhbFN1cHBvcnRlZCgpKTtcbiAgfVxuXG59O1xuZXhwb3J0cy5Jc0V2YWxTdXBwb3J0ZWRDYWNoZWQgPSBJc0V2YWxTdXBwb3J0ZWRDYWNoZWQ7XG5jb25zdCByZ2JCdWYgPSBbXCJyZ2IoXCIsIDAsIFwiLFwiLCAwLCBcIixcIiwgMCwgXCIpXCJdO1xuXG5jbGFzcyBVdGlsIHtcbiAgc3RhdGljIG1ha2VDc3NSZ2IociwgZywgYikge1xuICAgIHJnYkJ1ZlsxXSA9IHI7XG4gICAgcmdiQnVmWzNdID0gZztcbiAgICByZ2JCdWZbNV0gPSBiO1xuICAgIHJldHVybiByZ2JCdWYuam9pbihcIlwiKTtcbiAgfVxuXG4gIHN0YXRpYyB0cmFuc2Zvcm0obTEsIG0yKSB7XG4gICAgcmV0dXJuIFttMVswXSAqIG0yWzBdICsgbTFbMl0gKiBtMlsxXSwgbTFbMV0gKiBtMlswXSArIG0xWzNdICogbTJbMV0sIG0xWzBdICogbTJbMl0gKyBtMVsyXSAqIG0yWzNdLCBtMVsxXSAqIG0yWzJdICsgbTFbM10gKiBtMlszXSwgbTFbMF0gKiBtMls0XSArIG0xWzJdICogbTJbNV0gKyBtMVs0XSwgbTFbMV0gKiBtMls0XSArIG0xWzNdICogbTJbNV0gKyBtMVs1XV07XG4gIH1cblxuICBzdGF0aWMgYXBwbHlUcmFuc2Zvcm0ocCwgbSkge1xuICAgIGNvbnN0IHh0ID0gcFswXSAqIG1bMF0gKyBwWzFdICogbVsyXSArIG1bNF07XG4gICAgY29uc3QgeXQgPSBwWzBdICogbVsxXSArIHBbMV0gKiBtWzNdICsgbVs1XTtcbiAgICByZXR1cm4gW3h0LCB5dF07XG4gIH1cblxuICBzdGF0aWMgYXBwbHlJbnZlcnNlVHJhbnNmb3JtKHAsIG0pIHtcbiAgICBjb25zdCBkID0gbVswXSAqIG1bM10gLSBtWzFdICogbVsyXTtcbiAgICBjb25zdCB4dCA9IChwWzBdICogbVszXSAtIHBbMV0gKiBtWzJdICsgbVsyXSAqIG1bNV0gLSBtWzRdICogbVszXSkgLyBkO1xuICAgIGNvbnN0IHl0ID0gKC1wWzBdICogbVsxXSArIHBbMV0gKiBtWzBdICsgbVs0XSAqIG1bMV0gLSBtWzVdICogbVswXSkgLyBkO1xuICAgIHJldHVybiBbeHQsIHl0XTtcbiAgfVxuXG4gIHN0YXRpYyBnZXRBeGlhbEFsaWduZWRCb3VuZGluZ0JveChyLCBtKSB7XG4gICAgY29uc3QgcDEgPSBVdGlsLmFwcGx5VHJhbnNmb3JtKHIsIG0pO1xuICAgIGNvbnN0IHAyID0gVXRpbC5hcHBseVRyYW5zZm9ybShyLnNsaWNlKDIsIDQpLCBtKTtcbiAgICBjb25zdCBwMyA9IFV0aWwuYXBwbHlUcmFuc2Zvcm0oW3JbMF0sIHJbM11dLCBtKTtcbiAgICBjb25zdCBwNCA9IFV0aWwuYXBwbHlUcmFuc2Zvcm0oW3JbMl0sIHJbMV1dLCBtKTtcbiAgICByZXR1cm4gW01hdGgubWluKHAxWzBdLCBwMlswXSwgcDNbMF0sIHA0WzBdKSwgTWF0aC5taW4ocDFbMV0sIHAyWzFdLCBwM1sxXSwgcDRbMV0pLCBNYXRoLm1heChwMVswXSwgcDJbMF0sIHAzWzBdLCBwNFswXSksIE1hdGgubWF4KHAxWzFdLCBwMlsxXSwgcDNbMV0sIHA0WzFdKV07XG4gIH1cblxuICBzdGF0aWMgaW52ZXJzZVRyYW5zZm9ybShtKSB7XG4gICAgY29uc3QgZCA9IG1bMF0gKiBtWzNdIC0gbVsxXSAqIG1bMl07XG4gICAgcmV0dXJuIFttWzNdIC8gZCwgLW1bMV0gLyBkLCAtbVsyXSAvIGQsIG1bMF0gLyBkLCAobVsyXSAqIG1bNV0gLSBtWzRdICogbVszXSkgLyBkLCAobVs0XSAqIG1bMV0gLSBtWzVdICogbVswXSkgLyBkXTtcbiAgfVxuXG4gIHN0YXRpYyBhcHBseTNkVHJhbnNmb3JtKG0sIHYpIHtcbiAgICByZXR1cm4gW21bMF0gKiB2WzBdICsgbVsxXSAqIHZbMV0gKyBtWzJdICogdlsyXSwgbVszXSAqIHZbMF0gKyBtWzRdICogdlsxXSArIG1bNV0gKiB2WzJdLCBtWzZdICogdlswXSArIG1bN10gKiB2WzFdICsgbVs4XSAqIHZbMl1dO1xuICB9XG5cbiAgc3RhdGljIHNpbmd1bGFyVmFsdWVEZWNvbXBvc2UyZFNjYWxlKG0pIHtcbiAgICBjb25zdCB0cmFuc3Bvc2UgPSBbbVswXSwgbVsyXSwgbVsxXSwgbVszXV07XG4gICAgY29uc3QgYSA9IG1bMF0gKiB0cmFuc3Bvc2VbMF0gKyBtWzFdICogdHJhbnNwb3NlWzJdO1xuICAgIGNvbnN0IGIgPSBtWzBdICogdHJhbnNwb3NlWzFdICsgbVsxXSAqIHRyYW5zcG9zZVszXTtcbiAgICBjb25zdCBjID0gbVsyXSAqIHRyYW5zcG9zZVswXSArIG1bM10gKiB0cmFuc3Bvc2VbMl07XG4gICAgY29uc3QgZCA9IG1bMl0gKiB0cmFuc3Bvc2VbMV0gKyBtWzNdICogdHJhbnNwb3NlWzNdO1xuICAgIGNvbnN0IGZpcnN0ID0gKGEgKyBkKSAvIDI7XG4gICAgY29uc3Qgc2Vjb25kID0gTWF0aC5zcXJ0KChhICsgZCkgKiAoYSArIGQpIC0gNCAqIChhICogZCAtIGMgKiBiKSkgLyAyO1xuICAgIGNvbnN0IHN4ID0gZmlyc3QgKyBzZWNvbmQgfHwgMTtcbiAgICBjb25zdCBzeSA9IGZpcnN0IC0gc2Vjb25kIHx8IDE7XG4gICAgcmV0dXJuIFtNYXRoLnNxcnQoc3gpLCBNYXRoLnNxcnQoc3kpXTtcbiAgfVxuXG4gIHN0YXRpYyBub3JtYWxpemVSZWN0KHJlY3QpIHtcbiAgICBjb25zdCByID0gcmVjdC5zbGljZSgwKTtcblxuICAgIGlmIChyZWN0WzBdID4gcmVjdFsyXSkge1xuICAgICAgclswXSA9IHJlY3RbMl07XG4gICAgICByWzJdID0gcmVjdFswXTtcbiAgICB9XG5cbiAgICBpZiAocmVjdFsxXSA+IHJlY3RbM10pIHtcbiAgICAgIHJbMV0gPSByZWN0WzNdO1xuICAgICAgclszXSA9IHJlY3RbMV07XG4gICAgfVxuXG4gICAgcmV0dXJuIHI7XG4gIH1cblxuICBzdGF0aWMgaW50ZXJzZWN0KHJlY3QxLCByZWN0Mikge1xuICAgIGZ1bmN0aW9uIGNvbXBhcmUoYSwgYikge1xuICAgICAgcmV0dXJuIGEgLSBiO1xuICAgIH1cblxuICAgIGNvbnN0IG9yZGVyZWRYID0gW3JlY3QxWzBdLCByZWN0MVsyXSwgcmVjdDJbMF0sIHJlY3QyWzJdXS5zb3J0KGNvbXBhcmUpO1xuICAgIGNvbnN0IG9yZGVyZWRZID0gW3JlY3QxWzFdLCByZWN0MVszXSwgcmVjdDJbMV0sIHJlY3QyWzNdXS5zb3J0KGNvbXBhcmUpO1xuICAgIGNvbnN0IHJlc3VsdCA9IFtdO1xuICAgIHJlY3QxID0gVXRpbC5ub3JtYWxpemVSZWN0KHJlY3QxKTtcbiAgICByZWN0MiA9IFV0aWwubm9ybWFsaXplUmVjdChyZWN0Mik7XG5cbiAgICBpZiAob3JkZXJlZFhbMF0gPT09IHJlY3QxWzBdICYmIG9yZGVyZWRYWzFdID09PSByZWN0MlswXSB8fCBvcmRlcmVkWFswXSA9PT0gcmVjdDJbMF0gJiYgb3JkZXJlZFhbMV0gPT09IHJlY3QxWzBdKSB7XG4gICAgICByZXN1bHRbMF0gPSBvcmRlcmVkWFsxXTtcbiAgICAgIHJlc3VsdFsyXSA9IG9yZGVyZWRYWzJdO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICBpZiAob3JkZXJlZFlbMF0gPT09IHJlY3QxWzFdICYmIG9yZGVyZWRZWzFdID09PSByZWN0MlsxXSB8fCBvcmRlcmVkWVswXSA9PT0gcmVjdDJbMV0gJiYgb3JkZXJlZFlbMV0gPT09IHJlY3QxWzFdKSB7XG4gICAgICByZXN1bHRbMV0gPSBvcmRlcmVkWVsxXTtcbiAgICAgIHJlc3VsdFszXSA9IG9yZGVyZWRZWzJdO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbn1cblxuZXhwb3J0cy5VdGlsID0gVXRpbDtcbmNvbnN0IFBERlN0cmluZ1RyYW5zbGF0ZVRhYmxlID0gWzAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDB4MkQ4LCAweDJDNywgMHgyQzYsIDB4MkQ5LCAweDJERCwgMHgyREIsIDB4MkRBLCAweDJEQywgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMHgyMDIyLCAweDIwMjAsIDB4MjAyMSwgMHgyMDI2LCAweDIwMTQsIDB4MjAxMywgMHgxOTIsIDB4MjA0NCwgMHgyMDM5LCAweDIwM0EsIDB4MjIxMiwgMHgyMDMwLCAweDIwMUUsIDB4MjAxQywgMHgyMDFELCAweDIwMTgsIDB4MjAxOSwgMHgyMDFBLCAweDIxMjIsIDB4RkIwMSwgMHhGQjAyLCAweDE0MSwgMHgxNTIsIDB4MTYwLCAweDE3OCwgMHgxN0QsIDB4MTMxLCAweDE0MiwgMHgxNTMsIDB4MTYxLCAweDE3RSwgMCwgMHgyMEFDXTtcblxuZnVuY3Rpb24gc3RyaW5nVG9QREZTdHJpbmcoc3RyKSB7XG4gIGNvbnN0IGxlbmd0aCA9IHN0ci5sZW5ndGgsXG4gICAgICAgIHN0ckJ1ZiA9IFtdO1xuXG4gIGlmIChzdHJbMF0gPT09IFwiXFx4RkVcIiAmJiBzdHJbMV0gPT09IFwiXFx4RkZcIikge1xuICAgIGZvciAobGV0IGkgPSAyOyBpIDwgbGVuZ3RoOyBpICs9IDIpIHtcbiAgICAgIHN0ckJ1Zi5wdXNoKFN0cmluZy5mcm9tQ2hhckNvZGUoc3RyLmNoYXJDb2RlQXQoaSkgPDwgOCB8IHN0ci5jaGFyQ29kZUF0KGkgKyAxKSkpO1xuICAgIH1cbiAgfSBlbHNlIGlmIChzdHJbMF0gPT09IFwiXFx4RkZcIiAmJiBzdHJbMV0gPT09IFwiXFx4RkVcIikge1xuICAgIGZvciAobGV0IGkgPSAyOyBpIDwgbGVuZ3RoOyBpICs9IDIpIHtcbiAgICAgIHN0ckJ1Zi5wdXNoKFN0cmluZy5mcm9tQ2hhckNvZGUoc3RyLmNoYXJDb2RlQXQoaSArIDEpIDw8IDggfCBzdHIuY2hhckNvZGVBdChpKSkpO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxlbmd0aDsgKytpKSB7XG4gICAgICBjb25zdCBjb2RlID0gUERGU3RyaW5nVHJhbnNsYXRlVGFibGVbc3RyLmNoYXJDb2RlQXQoaSldO1xuICAgICAgc3RyQnVmLnB1c2goY29kZSA/IFN0cmluZy5mcm9tQ2hhckNvZGUoY29kZSkgOiBzdHIuY2hhckF0KGkpKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gc3RyQnVmLmpvaW4oXCJcIik7XG59XG5cbmZ1bmN0aW9uIHN0cmluZ1RvVVRGOFN0cmluZyhzdHIpIHtcbiAgcmV0dXJuIGRlY29kZVVSSUNvbXBvbmVudChlc2NhcGUoc3RyKSk7XG59XG5cbmZ1bmN0aW9uIHV0ZjhTdHJpbmdUb1N0cmluZyhzdHIpIHtcbiAgcmV0dXJuIHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChzdHIpKTtcbn1cblxuZnVuY3Rpb24gaXNFbXB0eU9iaihvYmopIHtcbiAgZm9yIChjb25zdCBrZXkgaW4gb2JqKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgcmV0dXJuIHRydWU7XG59XG5cbmZ1bmN0aW9uIGlzQm9vbCh2KSB7XG4gIHJldHVybiB0eXBlb2YgdiA9PT0gXCJib29sZWFuXCI7XG59XG5cbmZ1bmN0aW9uIGlzTnVtKHYpIHtcbiAgcmV0dXJuIHR5cGVvZiB2ID09PSBcIm51bWJlclwiO1xufVxuXG5mdW5jdGlvbiBpc1N0cmluZyh2KSB7XG4gIHJldHVybiB0eXBlb2YgdiA9PT0gXCJzdHJpbmdcIjtcbn1cblxuZnVuY3Rpb24gaXNBcnJheUJ1ZmZlcih2KSB7XG4gIHJldHVybiB0eXBlb2YgdiA9PT0gXCJvYmplY3RcIiAmJiB2ICE9PSBudWxsICYmIHYuYnl0ZUxlbmd0aCAhPT0gdW5kZWZpbmVkO1xufVxuXG5mdW5jdGlvbiBpc0FycmF5RXF1YWwoYXJyMSwgYXJyMikge1xuICBpZiAoYXJyMS5sZW5ndGggIT09IGFycjIubGVuZ3RoKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgcmV0dXJuIGFycjEuZXZlcnkoZnVuY3Rpb24gKGVsZW1lbnQsIGluZGV4KSB7XG4gICAgcmV0dXJuIGVsZW1lbnQgPT09IGFycjJbaW5kZXhdO1xuICB9KTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlUHJvbWlzZUNhcGFiaWxpdHkoKSB7XG4gIGNvbnN0IGNhcGFiaWxpdHkgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICBsZXQgaXNTZXR0bGVkID0gZmFsc2U7XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShjYXBhYmlsaXR5LCBcInNldHRsZWRcIiwge1xuICAgIGdldCgpIHtcbiAgICAgIHJldHVybiBpc1NldHRsZWQ7XG4gICAgfVxuXG4gIH0pO1xuICBjYXBhYmlsaXR5LnByb21pc2UgPSBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgY2FwYWJpbGl0eS5yZXNvbHZlID0gZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgIGlzU2V0dGxlZCA9IHRydWU7XG4gICAgICByZXNvbHZlKGRhdGEpO1xuICAgIH07XG5cbiAgICBjYXBhYmlsaXR5LnJlamVjdCA9IGZ1bmN0aW9uIChyZWFzb24pIHtcbiAgICAgIGlzU2V0dGxlZCA9IHRydWU7XG4gICAgICByZWplY3QocmVhc29uKTtcbiAgICB9O1xuICB9KTtcbiAgcmV0dXJuIGNhcGFiaWxpdHk7XG59XG5cbmNvbnN0IGNyZWF0ZU9iamVjdFVSTCA9IGZ1bmN0aW9uIGNyZWF0ZU9iamVjdFVSTENsb3N1cmUoKSB7XG4gIGNvbnN0IGRpZ2l0cyA9IFwiQUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVphYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5ejAxMjM0NTY3ODkrLz1cIjtcbiAgcmV0dXJuIGZ1bmN0aW9uIGNyZWF0ZU9iamVjdFVSTChkYXRhLCBjb250ZW50VHlwZSwgZm9yY2VEYXRhU2NoZW1hID0gZmFsc2UpIHtcbiAgICBpZiAoIWZvcmNlRGF0YVNjaGVtYSAmJiBVUkwuY3JlYXRlT2JqZWN0VVJMKSB7XG4gICAgICBjb25zdCBibG9iID0gbmV3IEJsb2IoW2RhdGFdLCB7XG4gICAgICAgIHR5cGU6IGNvbnRlbnRUeXBlXG4gICAgICB9KTtcbiAgICAgIHJldHVybiBVUkwuY3JlYXRlT2JqZWN0VVJMKGJsb2IpO1xuICAgIH1cblxuICAgIGxldCBidWZmZXIgPSBgZGF0YToke2NvbnRlbnRUeXBlfTtiYXNlNjQsYDtcblxuICAgIGZvciAobGV0IGkgPSAwLCBpaSA9IGRhdGEubGVuZ3RoOyBpIDwgaWk7IGkgKz0gMykge1xuICAgICAgY29uc3QgYjEgPSBkYXRhW2ldICYgMHhmZjtcbiAgICAgIGNvbnN0IGIyID0gZGF0YVtpICsgMV0gJiAweGZmO1xuICAgICAgY29uc3QgYjMgPSBkYXRhW2kgKyAyXSAmIDB4ZmY7XG4gICAgICBjb25zdCBkMSA9IGIxID4+IDIsXG4gICAgICAgICAgICBkMiA9IChiMSAmIDMpIDw8IDQgfCBiMiA+PiA0O1xuICAgICAgY29uc3QgZDMgPSBpICsgMSA8IGlpID8gKGIyICYgMHhmKSA8PCAyIHwgYjMgPj4gNiA6IDY0O1xuICAgICAgY29uc3QgZDQgPSBpICsgMiA8IGlpID8gYjMgJiAweDNmIDogNjQ7XG4gICAgICBidWZmZXIgKz0gZGlnaXRzW2QxXSArIGRpZ2l0c1tkMl0gKyBkaWdpdHNbZDNdICsgZGlnaXRzW2Q0XTtcbiAgICB9XG5cbiAgICByZXR1cm4gYnVmZmVyO1xuICB9O1xufSgpO1xuXG5leHBvcnRzLmNyZWF0ZU9iamVjdFVSTCA9IGNyZWF0ZU9iamVjdFVSTDtcblxuLyoqKi8gfSksXG4vKiAzICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dfcGRmanNfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbnZhciBfaXNfbm9kZSA9IF9fd19wZGZqc19yZXF1aXJlX18oNCk7XG5cbjtcblxuLyoqKi8gfSksXG4vKiA0ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dfcGRmanNfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmlzTm9kZUpTID0gdm9pZCAwO1xuY29uc3QgaXNOb2RlSlMgPSB0eXBlb2YgcHJvY2VzcyA9PT0gXCJvYmplY3RcIiAmJiBwcm9jZXNzICsgXCJcIiA9PT0gXCJbb2JqZWN0IHByb2Nlc3NdXCIgJiYgIXByb2Nlc3MudmVyc2lvbnMubncgJiYgIXByb2Nlc3MudmVyc2lvbnMuZWxlY3Ryb247XG5leHBvcnRzLmlzTm9kZUpTID0gaXNOb2RlSlM7XG5cbi8qKiovIH0pLFxuLyogNSAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193X3BkZmpzX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5nZXREb2N1bWVudCA9IGdldERvY3VtZW50O1xuZXhwb3J0cy5zZXRQREZOZXR3b3JrU3RyZWFtRmFjdG9yeSA9IHNldFBERk5ldHdvcmtTdHJlYW1GYWN0b3J5O1xuZXhwb3J0cy5idWlsZCA9IGV4cG9ydHMudmVyc2lvbiA9IGV4cG9ydHMuUERGUGFnZVByb3h5ID0gZXhwb3J0cy5QREZEb2N1bWVudFByb3h5ID0gZXhwb3J0cy5QREZXb3JrZXIgPSBleHBvcnRzLlBERkRhdGFSYW5nZVRyYW5zcG9ydCA9IGV4cG9ydHMuTG9vcGJhY2tQb3J0ID0gdm9pZCAwO1xuXG52YXIgX3V0aWwgPSBfX3dfcGRmanNfcmVxdWlyZV9fKDIpO1xuXG52YXIgX2Rpc3BsYXlfdXRpbHMgPSBfX3dfcGRmanNfcmVxdWlyZV9fKDEpO1xuXG52YXIgX2ZvbnRfbG9hZGVyID0gX193X3BkZmpzX3JlcXVpcmVfXyg2KTtcblxudmFyIF9hcGlfY29tcGF0aWJpbGl0eSA9IF9fd19wZGZqc19yZXF1aXJlX18oNyk7XG5cbnZhciBfY2FudmFzID0gX193X3BkZmpzX3JlcXVpcmVfXyg4KTtcblxudmFyIF93b3JrZXJfb3B0aW9ucyA9IF9fd19wZGZqc19yZXF1aXJlX18oMTApO1xuXG52YXIgX2lzX25vZGUgPSBfX3dfcGRmanNfcmVxdWlyZV9fKDQpO1xuXG52YXIgX21lc3NhZ2VfaGFuZGxlciA9IF9fd19wZGZqc19yZXF1aXJlX18oMTEpO1xuXG52YXIgX21ldGFkYXRhID0gX193X3BkZmpzX3JlcXVpcmVfXygxMik7XG5cbnZhciBfdHJhbnNwb3J0X3N0cmVhbSA9IF9fd19wZGZqc19yZXF1aXJlX18oMTQpO1xuXG52YXIgX3dlYmdsID0gX193X3BkZmpzX3JlcXVpcmVfXygxNSk7XG5cbmNvbnN0IERFRkFVTFRfUkFOR0VfQ0hVTktfU0laRSA9IDY1NTM2O1xuY29uc3QgUkVOREVSSU5HX0NBTkNFTExFRF9USU1FT1VUID0gMTAwO1xubGV0IGNyZWF0ZVBERk5ldHdvcmtTdHJlYW07XG5cbmZ1bmN0aW9uIHNldFBERk5ldHdvcmtTdHJlYW1GYWN0b3J5KHBkZk5ldHdvcmtTdHJlYW1GYWN0b3J5KSB7XG4gIGNyZWF0ZVBERk5ldHdvcmtTdHJlYW0gPSBwZGZOZXR3b3JrU3RyZWFtRmFjdG9yeTtcbn1cblxuZnVuY3Rpb24gZ2V0RG9jdW1lbnQoc3JjKSB7XG4gIGNvbnN0IHRhc2sgPSBuZXcgUERGRG9jdW1lbnRMb2FkaW5nVGFzaygpO1xuICBsZXQgc291cmNlO1xuXG4gIGlmICh0eXBlb2Ygc3JjID09PSBcInN0cmluZ1wiKSB7XG4gICAgc291cmNlID0ge1xuICAgICAgdXJsOiBzcmNcbiAgICB9O1xuICB9IGVsc2UgaWYgKCgwLCBfdXRpbC5pc0FycmF5QnVmZmVyKShzcmMpKSB7XG4gICAgc291cmNlID0ge1xuICAgICAgZGF0YTogc3JjXG4gICAgfTtcbiAgfSBlbHNlIGlmIChzcmMgaW5zdGFuY2VvZiBQREZEYXRhUmFuZ2VUcmFuc3BvcnQpIHtcbiAgICBzb3VyY2UgPSB7XG4gICAgICByYW5nZTogc3JjXG4gICAgfTtcbiAgfSBlbHNlIHtcbiAgICBpZiAodHlwZW9mIHNyYyAhPT0gXCJvYmplY3RcIikge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiSW52YWxpZCBwYXJhbWV0ZXIgaW4gZ2V0RG9jdW1lbnQsIFwiICsgXCJuZWVkIGVpdGhlciBVaW50OEFycmF5LCBzdHJpbmcgb3IgYSBwYXJhbWV0ZXIgb2JqZWN0XCIpO1xuICAgIH1cblxuICAgIGlmICghc3JjLnVybCAmJiAhc3JjLmRhdGEgJiYgIXNyYy5yYW5nZSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiSW52YWxpZCBwYXJhbWV0ZXIgb2JqZWN0OiBuZWVkIGVpdGhlciAuZGF0YSwgLnJhbmdlIG9yIC51cmxcIik7XG4gICAgfVxuXG4gICAgc291cmNlID0gc3JjO1xuICB9XG5cbiAgY29uc3QgcGFyYW1zID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgbGV0IHJhbmdlVHJhbnNwb3J0ID0gbnVsbCxcbiAgICAgIHdvcmtlciA9IG51bGw7XG5cbiAgZm9yIChjb25zdCBrZXkgaW4gc291cmNlKSB7XG4gICAgaWYgKGtleSA9PT0gXCJ1cmxcIiAmJiB0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICBwYXJhbXNba2V5XSA9IG5ldyBVUkwoc291cmNlW2tleV0sIHdpbmRvdy5sb2NhdGlvbikuaHJlZjtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH0gZWxzZSBpZiAoa2V5ID09PSBcInJhbmdlXCIpIHtcbiAgICAgIHJhbmdlVHJhbnNwb3J0ID0gc291cmNlW2tleV07XG4gICAgICBjb250aW51ZTtcbiAgICB9IGVsc2UgaWYgKGtleSA9PT0gXCJ3b3JrZXJcIikge1xuICAgICAgd29ya2VyID0gc291cmNlW2tleV07XG4gICAgICBjb250aW51ZTtcbiAgICB9IGVsc2UgaWYgKGtleSA9PT0gXCJkYXRhXCIgJiYgIShzb3VyY2Vba2V5XSBpbnN0YW5jZW9mIFVpbnQ4QXJyYXkpKSB7XG4gICAgICBjb25zdCBwZGZCeXRlcyA9IHNvdXJjZVtrZXldO1xuXG4gICAgICBpZiAodHlwZW9mIHBkZkJ5dGVzID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgIHBhcmFtc1trZXldID0gKDAsIF91dGlsLnN0cmluZ1RvQnl0ZXMpKHBkZkJ5dGVzKTtcbiAgICAgIH0gZWxzZSBpZiAodHlwZW9mIHBkZkJ5dGVzID09PSBcIm9iamVjdFwiICYmIHBkZkJ5dGVzICE9PSBudWxsICYmICFpc05hTihwZGZCeXRlcy5sZW5ndGgpKSB7XG4gICAgICAgIHBhcmFtc1trZXldID0gbmV3IFVpbnQ4QXJyYXkocGRmQnl0ZXMpO1xuICAgICAgfSBlbHNlIGlmICgoMCwgX3V0aWwuaXNBcnJheUJ1ZmZlcikocGRmQnl0ZXMpKSB7XG4gICAgICAgIHBhcmFtc1trZXldID0gbmV3IFVpbnQ4QXJyYXkocGRmQnl0ZXMpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiSW52YWxpZCBQREYgYmluYXJ5IGRhdGE6IGVpdGhlciB0eXBlZCBhcnJheSwgXCIgKyBcInN0cmluZyBvciBhcnJheS1saWtlIG9iamVjdCBpcyBleHBlY3RlZCBpbiB0aGUgXCIgKyBcImRhdGEgcHJvcGVydHkuXCIpO1xuICAgICAgfVxuXG4gICAgICBjb250aW51ZTtcbiAgICB9XG5cbiAgICBwYXJhbXNba2V5XSA9IHNvdXJjZVtrZXldO1xuICB9XG5cbiAgcGFyYW1zLnJhbmdlQ2h1bmtTaXplID0gcGFyYW1zLnJhbmdlQ2h1bmtTaXplIHx8IERFRkFVTFRfUkFOR0VfQ0hVTktfU0laRTtcbiAgcGFyYW1zLkNNYXBSZWFkZXJGYWN0b3J5ID0gcGFyYW1zLkNNYXBSZWFkZXJGYWN0b3J5IHx8IF9kaXNwbGF5X3V0aWxzLkRPTUNNYXBSZWFkZXJGYWN0b3J5O1xuICBwYXJhbXMuaWdub3JlRXJyb3JzID0gcGFyYW1zLnN0b3BBdEVycm9ycyAhPT0gdHJ1ZTtcbiAgcGFyYW1zLmZvbnRFeHRyYVByb3BlcnRpZXMgPSBwYXJhbXMuZm9udEV4dHJhUHJvcGVydGllcyA9PT0gdHJ1ZTtcbiAgcGFyYW1zLnBkZkJ1ZyA9IHBhcmFtcy5wZGZCdWcgPT09IHRydWU7XG5cbiAgaWYgKCFOdW1iZXIuaXNJbnRlZ2VyKHBhcmFtcy5tYXhJbWFnZVNpemUpKSB7XG4gICAgcGFyYW1zLm1heEltYWdlU2l6ZSA9IC0xO1xuICB9XG5cbiAgaWYgKHR5cGVvZiBwYXJhbXMuaXNFdmFsU3VwcG9ydGVkICE9PSBcImJvb2xlYW5cIikge1xuICAgIHBhcmFtcy5pc0V2YWxTdXBwb3J0ZWQgPSB0cnVlO1xuICB9XG5cbiAgaWYgKHR5cGVvZiBwYXJhbXMuZGlzYWJsZUZvbnRGYWNlICE9PSBcImJvb2xlYW5cIikge1xuICAgIHBhcmFtcy5kaXNhYmxlRm9udEZhY2UgPSBfYXBpX2NvbXBhdGliaWxpdHkuYXBpQ29tcGF0aWJpbGl0eVBhcmFtcy5kaXNhYmxlRm9udEZhY2UgfHwgZmFsc2U7XG4gIH1cblxuICBpZiAodHlwZW9mIHBhcmFtcy5kaXNhYmxlUmFuZ2UgIT09IFwiYm9vbGVhblwiKSB7XG4gICAgcGFyYW1zLmRpc2FibGVSYW5nZSA9IGZhbHNlO1xuICB9XG5cbiAgaWYgKHR5cGVvZiBwYXJhbXMuZGlzYWJsZVN0cmVhbSAhPT0gXCJib29sZWFuXCIpIHtcbiAgICBwYXJhbXMuZGlzYWJsZVN0cmVhbSA9IGZhbHNlO1xuICB9XG5cbiAgaWYgKHR5cGVvZiBwYXJhbXMuZGlzYWJsZUF1dG9GZXRjaCAhPT0gXCJib29sZWFuXCIpIHtcbiAgICBwYXJhbXMuZGlzYWJsZUF1dG9GZXRjaCA9IGZhbHNlO1xuICB9XG5cbiAgKDAsIF91dGlsLnNldFZlcmJvc2l0eUxldmVsKShwYXJhbXMudmVyYm9zaXR5KTtcblxuICBpZiAoIXdvcmtlcikge1xuICAgIGNvbnN0IHdvcmtlclBhcmFtcyA9IHtcbiAgICAgIHZlcmJvc2l0eTogcGFyYW1zLnZlcmJvc2l0eSxcbiAgICAgIHBvcnQ6IF93b3JrZXJfb3B0aW9ucy5HbG9iYWxXb3JrZXJPcHRpb25zLndvcmtlclBvcnRcbiAgICB9O1xuICAgIHdvcmtlciA9IHdvcmtlclBhcmFtcy5wb3J0ID8gUERGV29ya2VyLmZyb21Qb3J0KHdvcmtlclBhcmFtcykgOiBuZXcgUERGV29ya2VyKHdvcmtlclBhcmFtcyk7XG4gICAgdGFzay5fd29ya2VyID0gd29ya2VyO1xuICB9XG5cbiAgY29uc3QgZG9jSWQgPSB0YXNrLmRvY0lkO1xuICB3b3JrZXIucHJvbWlzZS50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICBpZiAodGFzay5kZXN0cm95ZWQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIkxvYWRpbmcgYWJvcnRlZFwiKTtcbiAgICB9XG5cbiAgICBjb25zdCB3b3JrZXJJZFByb21pc2UgPSBfZmV0Y2hEb2N1bWVudCh3b3JrZXIsIHBhcmFtcywgcmFuZ2VUcmFuc3BvcnQsIGRvY0lkKTtcblxuICAgIGNvbnN0IG5ldHdvcmtTdHJlYW1Qcm9taXNlID0gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUpIHtcbiAgICAgIGxldCBuZXR3b3JrU3RyZWFtO1xuXG4gICAgICBpZiAocmFuZ2VUcmFuc3BvcnQpIHtcbiAgICAgICAgbmV0d29ya1N0cmVhbSA9IG5ldyBfdHJhbnNwb3J0X3N0cmVhbS5QREZEYXRhVHJhbnNwb3J0U3RyZWFtKHtcbiAgICAgICAgICBsZW5ndGg6IHBhcmFtcy5sZW5ndGgsXG4gICAgICAgICAgaW5pdGlhbERhdGE6IHBhcmFtcy5pbml0aWFsRGF0YSxcbiAgICAgICAgICBwcm9ncmVzc2l2ZURvbmU6IHBhcmFtcy5wcm9ncmVzc2l2ZURvbmUsXG4gICAgICAgICAgZGlzYWJsZVJhbmdlOiBwYXJhbXMuZGlzYWJsZVJhbmdlLFxuICAgICAgICAgIGRpc2FibGVTdHJlYW06IHBhcmFtcy5kaXNhYmxlU3RyZWFtXG4gICAgICAgIH0sIHJhbmdlVHJhbnNwb3J0KTtcbiAgICAgIH0gZWxzZSBpZiAoIXBhcmFtcy5kYXRhKSB7XG4gICAgICAgIG5ldHdvcmtTdHJlYW0gPSBjcmVhdGVQREZOZXR3b3JrU3RyZWFtKHtcbiAgICAgICAgICB1cmw6IHBhcmFtcy51cmwsXG4gICAgICAgICAgbGVuZ3RoOiBwYXJhbXMubGVuZ3RoLFxuICAgICAgICAgIGh0dHBIZWFkZXJzOiBwYXJhbXMuaHR0cEhlYWRlcnMsXG4gICAgICAgICAgd2l0aENyZWRlbnRpYWxzOiBwYXJhbXMud2l0aENyZWRlbnRpYWxzLFxuICAgICAgICAgIHJhbmdlQ2h1bmtTaXplOiBwYXJhbXMucmFuZ2VDaHVua1NpemUsXG4gICAgICAgICAgZGlzYWJsZVJhbmdlOiBwYXJhbXMuZGlzYWJsZVJhbmdlLFxuICAgICAgICAgIGRpc2FibGVTdHJlYW06IHBhcmFtcy5kaXNhYmxlU3RyZWFtXG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICByZXNvbHZlKG5ldHdvcmtTdHJlYW0pO1xuICAgIH0pO1xuICAgIHJldHVybiBQcm9taXNlLmFsbChbd29ya2VySWRQcm9taXNlLCBuZXR3b3JrU3RyZWFtUHJvbWlzZV0pLnRoZW4oZnVuY3Rpb24gKFt3b3JrZXJJZCwgbmV0d29ya1N0cmVhbV0pIHtcbiAgICAgIGlmICh0YXNrLmRlc3Ryb3llZCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJMb2FkaW5nIGFib3J0ZWRcIik7XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IG1lc3NhZ2VIYW5kbGVyID0gbmV3IF9tZXNzYWdlX2hhbmRsZXIuTWVzc2FnZUhhbmRsZXIoZG9jSWQsIHdvcmtlcklkLCB3b3JrZXIucG9ydCk7XG4gICAgICBtZXNzYWdlSGFuZGxlci5wb3N0TWVzc2FnZVRyYW5zZmVycyA9IHdvcmtlci5wb3N0TWVzc2FnZVRyYW5zZmVycztcbiAgICAgIGNvbnN0IHRyYW5zcG9ydCA9IG5ldyBXb3JrZXJUcmFuc3BvcnQobWVzc2FnZUhhbmRsZXIsIHRhc2ssIG5ldHdvcmtTdHJlYW0sIHBhcmFtcyk7XG4gICAgICB0YXNrLl90cmFuc3BvcnQgPSB0cmFuc3BvcnQ7XG4gICAgICBtZXNzYWdlSGFuZGxlci5zZW5kKFwiUmVhZHlcIiwgbnVsbCk7XG4gICAgfSk7XG4gIH0pLmNhdGNoKHRhc2suX2NhcGFiaWxpdHkucmVqZWN0KTtcbiAgcmV0dXJuIHRhc2s7XG59XG5cbmZ1bmN0aW9uIF9mZXRjaERvY3VtZW50KHdvcmtlciwgc291cmNlLCBwZGZEYXRhUmFuZ2VUcmFuc3BvcnQsIGRvY0lkKSB7XG4gIGlmICh3b3JrZXIuZGVzdHJveWVkKSB7XG4gICAgcmV0dXJuIFByb21pc2UucmVqZWN0KG5ldyBFcnJvcihcIldvcmtlciB3YXMgZGVzdHJveWVkXCIpKTtcbiAgfVxuXG4gIGlmIChwZGZEYXRhUmFuZ2VUcmFuc3BvcnQpIHtcbiAgICBzb3VyY2UubGVuZ3RoID0gcGRmRGF0YVJhbmdlVHJhbnNwb3J0Lmxlbmd0aDtcbiAgICBzb3VyY2UuaW5pdGlhbERhdGEgPSBwZGZEYXRhUmFuZ2VUcmFuc3BvcnQuaW5pdGlhbERhdGE7XG4gICAgc291cmNlLnByb2dyZXNzaXZlRG9uZSA9IHBkZkRhdGFSYW5nZVRyYW5zcG9ydC5wcm9ncmVzc2l2ZURvbmU7XG4gIH1cblxuICByZXR1cm4gd29ya2VyLm1lc3NhZ2VIYW5kbGVyLnNlbmRXaXRoUHJvbWlzZShcIkdldERvY1JlcXVlc3RcIiwge1xuICAgIGRvY0lkLFxuICAgIGFwaVZlcnNpb246ICcyLjUuMjA3JyxcbiAgICBzb3VyY2U6IHtcbiAgICAgIGRhdGE6IHNvdXJjZS5kYXRhLFxuICAgICAgdXJsOiBzb3VyY2UudXJsLFxuICAgICAgcGFzc3dvcmQ6IHNvdXJjZS5wYXNzd29yZCxcbiAgICAgIGRpc2FibGVBdXRvRmV0Y2g6IHNvdXJjZS5kaXNhYmxlQXV0b0ZldGNoLFxuICAgICAgcmFuZ2VDaHVua1NpemU6IHNvdXJjZS5yYW5nZUNodW5rU2l6ZSxcbiAgICAgIGxlbmd0aDogc291cmNlLmxlbmd0aFxuICAgIH0sXG4gICAgbWF4SW1hZ2VTaXplOiBzb3VyY2UubWF4SW1hZ2VTaXplLFxuICAgIGRpc2FibGVGb250RmFjZTogc291cmNlLmRpc2FibGVGb250RmFjZSxcbiAgICBwb3N0TWVzc2FnZVRyYW5zZmVyczogd29ya2VyLnBvc3RNZXNzYWdlVHJhbnNmZXJzLFxuICAgIGRvY0Jhc2VVcmw6IHNvdXJjZS5kb2NCYXNlVXJsLFxuICAgIGlnbm9yZUVycm9yczogc291cmNlLmlnbm9yZUVycm9ycyxcbiAgICBpc0V2YWxTdXBwb3J0ZWQ6IHNvdXJjZS5pc0V2YWxTdXBwb3J0ZWQsXG4gICAgZm9udEV4dHJhUHJvcGVydGllczogc291cmNlLmZvbnRFeHRyYVByb3BlcnRpZXNcbiAgfSkudGhlbihmdW5jdGlvbiAod29ya2VySWQpIHtcbiAgICBpZiAod29ya2VyLmRlc3Ryb3llZCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiV29ya2VyIHdhcyBkZXN0cm95ZWRcIik7XG4gICAgfVxuXG4gICAgcmV0dXJuIHdvcmtlcklkO1xuICB9KTtcbn1cblxuY29uc3QgUERGRG9jdW1lbnRMb2FkaW5nVGFzayA9IGZ1bmN0aW9uIFBERkRvY3VtZW50TG9hZGluZ1Rhc2tDbG9zdXJlKCkge1xuICBsZXQgbmV4dERvY3VtZW50SWQgPSAwO1xuXG4gIGNsYXNzIFBERkRvY3VtZW50TG9hZGluZ1Rhc2sge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgdGhpcy5fY2FwYWJpbGl0eSA9ICgwLCBfdXRpbC5jcmVhdGVQcm9taXNlQ2FwYWJpbGl0eSkoKTtcbiAgICAgIHRoaXMuX3RyYW5zcG9ydCA9IG51bGw7XG4gICAgICB0aGlzLl93b3JrZXIgPSBudWxsO1xuICAgICAgdGhpcy5kb2NJZCA9IFwiZFwiICsgbmV4dERvY3VtZW50SWQrKztcbiAgICAgIHRoaXMuZGVzdHJveWVkID0gZmFsc2U7XG4gICAgICB0aGlzLm9uUGFzc3dvcmQgPSBudWxsO1xuICAgICAgdGhpcy5vblByb2dyZXNzID0gbnVsbDtcbiAgICAgIHRoaXMub25VbnN1cHBvcnRlZEZlYXR1cmUgPSBudWxsO1xuICAgIH1cblxuICAgIGdldCBwcm9taXNlKCkge1xuICAgICAgcmV0dXJuIHRoaXMuX2NhcGFiaWxpdHkucHJvbWlzZTtcbiAgICB9XG5cbiAgICBkZXN0cm95KCkge1xuICAgICAgdGhpcy5kZXN0cm95ZWQgPSB0cnVlO1xuICAgICAgY29uc3QgdHJhbnNwb3J0RGVzdHJveWVkID0gIXRoaXMuX3RyYW5zcG9ydCA/IFByb21pc2UucmVzb2x2ZSgpIDogdGhpcy5fdHJhbnNwb3J0LmRlc3Ryb3koKTtcbiAgICAgIHJldHVybiB0cmFuc3BvcnREZXN0cm95ZWQudGhlbigoKSA9PiB7XG4gICAgICAgIHRoaXMuX3RyYW5zcG9ydCA9IG51bGw7XG5cbiAgICAgICAgaWYgKHRoaXMuX3dvcmtlcikge1xuICAgICAgICAgIHRoaXMuX3dvcmtlci5kZXN0cm95KCk7XG5cbiAgICAgICAgICB0aGlzLl93b3JrZXIgPSBudWxsO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG5cbiAgfVxuXG4gIHJldHVybiBQREZEb2N1bWVudExvYWRpbmdUYXNrO1xufSgpO1xuXG5jbGFzcyBQREZEYXRhUmFuZ2VUcmFuc3BvcnQge1xuICBjb25zdHJ1Y3RvcihsZW5ndGgsIGluaXRpYWxEYXRhLCBwcm9ncmVzc2l2ZURvbmUgPSBmYWxzZSkge1xuICAgIHRoaXMubGVuZ3RoID0gbGVuZ3RoO1xuICAgIHRoaXMuaW5pdGlhbERhdGEgPSBpbml0aWFsRGF0YTtcbiAgICB0aGlzLnByb2dyZXNzaXZlRG9uZSA9IHByb2dyZXNzaXZlRG9uZTtcbiAgICB0aGlzLl9yYW5nZUxpc3RlbmVycyA9IFtdO1xuICAgIHRoaXMuX3Byb2dyZXNzTGlzdGVuZXJzID0gW107XG4gICAgdGhpcy5fcHJvZ3Jlc3NpdmVSZWFkTGlzdGVuZXJzID0gW107XG4gICAgdGhpcy5fcHJvZ3Jlc3NpdmVEb25lTGlzdGVuZXJzID0gW107XG4gICAgdGhpcy5fcmVhZHlDYXBhYmlsaXR5ID0gKDAsIF91dGlsLmNyZWF0ZVByb21pc2VDYXBhYmlsaXR5KSgpO1xuICB9XG5cbiAgYWRkUmFuZ2VMaXN0ZW5lcihsaXN0ZW5lcikge1xuICAgIHRoaXMuX3JhbmdlTGlzdGVuZXJzLnB1c2gobGlzdGVuZXIpO1xuICB9XG5cbiAgYWRkUHJvZ3Jlc3NMaXN0ZW5lcihsaXN0ZW5lcikge1xuICAgIHRoaXMuX3Byb2dyZXNzTGlzdGVuZXJzLnB1c2gobGlzdGVuZXIpO1xuICB9XG5cbiAgYWRkUHJvZ3Jlc3NpdmVSZWFkTGlzdGVuZXIobGlzdGVuZXIpIHtcbiAgICB0aGlzLl9wcm9ncmVzc2l2ZVJlYWRMaXN0ZW5lcnMucHVzaChsaXN0ZW5lcik7XG4gIH1cblxuICBhZGRQcm9ncmVzc2l2ZURvbmVMaXN0ZW5lcihsaXN0ZW5lcikge1xuICAgIHRoaXMuX3Byb2dyZXNzaXZlRG9uZUxpc3RlbmVycy5wdXNoKGxpc3RlbmVyKTtcbiAgfVxuXG4gIG9uRGF0YVJhbmdlKGJlZ2luLCBjaHVuaykge1xuICAgIGZvciAoY29uc3QgbGlzdGVuZXIgb2YgdGhpcy5fcmFuZ2VMaXN0ZW5lcnMpIHtcbiAgICAgIGxpc3RlbmVyKGJlZ2luLCBjaHVuayk7XG4gICAgfVxuICB9XG5cbiAgb25EYXRhUHJvZ3Jlc3MobG9hZGVkLCB0b3RhbCkge1xuICAgIHRoaXMuX3JlYWR5Q2FwYWJpbGl0eS5wcm9taXNlLnRoZW4oKCkgPT4ge1xuICAgICAgZm9yIChjb25zdCBsaXN0ZW5lciBvZiB0aGlzLl9wcm9ncmVzc0xpc3RlbmVycykge1xuICAgICAgICBsaXN0ZW5lcihsb2FkZWQsIHRvdGFsKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIG9uRGF0YVByb2dyZXNzaXZlUmVhZChjaHVuaykge1xuICAgIHRoaXMuX3JlYWR5Q2FwYWJpbGl0eS5wcm9taXNlLnRoZW4oKCkgPT4ge1xuICAgICAgZm9yIChjb25zdCBsaXN0ZW5lciBvZiB0aGlzLl9wcm9ncmVzc2l2ZVJlYWRMaXN0ZW5lcnMpIHtcbiAgICAgICAgbGlzdGVuZXIoY2h1bmspO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgb25EYXRhUHJvZ3Jlc3NpdmVEb25lKCkge1xuICAgIHRoaXMuX3JlYWR5Q2FwYWJpbGl0eS5wcm9taXNlLnRoZW4oKCkgPT4ge1xuICAgICAgZm9yIChjb25zdCBsaXN0ZW5lciBvZiB0aGlzLl9wcm9ncmVzc2l2ZURvbmVMaXN0ZW5lcnMpIHtcbiAgICAgICAgbGlzdGVuZXIoKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIHRyYW5zcG9ydFJlYWR5KCkge1xuICAgIHRoaXMuX3JlYWR5Q2FwYWJpbGl0eS5yZXNvbHZlKCk7XG4gIH1cblxuICByZXF1ZXN0RGF0YVJhbmdlKGJlZ2luLCBlbmQpIHtcbiAgICAoMCwgX3V0aWwudW5yZWFjaGFibGUpKFwiQWJzdHJhY3QgbWV0aG9kIFBERkRhdGFSYW5nZVRyYW5zcG9ydC5yZXF1ZXN0RGF0YVJhbmdlXCIpO1xuICB9XG5cbiAgYWJvcnQoKSB7fVxuXG59XG5cbmV4cG9ydHMuUERGRGF0YVJhbmdlVHJhbnNwb3J0ID0gUERGRGF0YVJhbmdlVHJhbnNwb3J0O1xuXG5jbGFzcyBQREZEb2N1bWVudFByb3h5IHtcbiAgY29uc3RydWN0b3IocGRmSW5mbywgdHJhbnNwb3J0KSB7XG4gICAgdGhpcy5fcGRmSW5mbyA9IHBkZkluZm87XG4gICAgdGhpcy5fdHJhbnNwb3J0ID0gdHJhbnNwb3J0O1xuICB9XG5cbiAgZ2V0IG51bVBhZ2VzKCkge1xuICAgIHJldHVybiB0aGlzLl9wZGZJbmZvLm51bVBhZ2VzO1xuICB9XG5cbiAgZ2V0IGZpbmdlcnByaW50KCkge1xuICAgIHJldHVybiB0aGlzLl9wZGZJbmZvLmZpbmdlcnByaW50O1xuICB9XG5cbiAgZ2V0UGFnZShwYWdlTnVtYmVyKSB7XG4gICAgcmV0dXJuIHRoaXMuX3RyYW5zcG9ydC5nZXRQYWdlKHBhZ2VOdW1iZXIpO1xuICB9XG5cbiAgZ2V0UGFnZUluZGV4KHJlZikge1xuICAgIHJldHVybiB0aGlzLl90cmFuc3BvcnQuZ2V0UGFnZUluZGV4KHJlZik7XG4gIH1cblxuICBnZXREZXN0aW5hdGlvbnMoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3RyYW5zcG9ydC5nZXREZXN0aW5hdGlvbnMoKTtcbiAgfVxuXG4gIGdldERlc3RpbmF0aW9uKGlkKSB7XG4gICAgcmV0dXJuIHRoaXMuX3RyYW5zcG9ydC5nZXREZXN0aW5hdGlvbihpZCk7XG4gIH1cblxuICBnZXRQYWdlTGFiZWxzKCkge1xuICAgIHJldHVybiB0aGlzLl90cmFuc3BvcnQuZ2V0UGFnZUxhYmVscygpO1xuICB9XG5cbiAgZ2V0UGFnZUxheW91dCgpIHtcbiAgICByZXR1cm4gdGhpcy5fdHJhbnNwb3J0LmdldFBhZ2VMYXlvdXQoKTtcbiAgfVxuXG4gIGdldFBhZ2VNb2RlKCkge1xuICAgIHJldHVybiB0aGlzLl90cmFuc3BvcnQuZ2V0UGFnZU1vZGUoKTtcbiAgfVxuXG4gIGdldFZpZXdlclByZWZlcmVuY2VzKCkge1xuICAgIHJldHVybiB0aGlzLl90cmFuc3BvcnQuZ2V0Vmlld2VyUHJlZmVyZW5jZXMoKTtcbiAgfVxuXG4gIGdldE9wZW5BY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMuX3RyYW5zcG9ydC5nZXRPcGVuQWN0aW9uKCk7XG4gIH1cblxuICBnZXRPcGVuQWN0aW9uRGVzdGluYXRpb24oKSB7XG4gICAgKDAsIF9kaXNwbGF5X3V0aWxzLmRlcHJlY2F0ZWQpKFwiZ2V0T3BlbkFjdGlvbkRlc3RpbmF0aW9uLCB1c2UgZ2V0T3BlbkFjdGlvbiBpbnN0ZWFkLlwiKTtcbiAgICByZXR1cm4gdGhpcy5nZXRPcGVuQWN0aW9uKCkudGhlbihmdW5jdGlvbiAob3BlbkFjdGlvbikge1xuICAgICAgcmV0dXJuIG9wZW5BY3Rpb24gJiYgb3BlbkFjdGlvbi5kZXN0ID8gb3BlbkFjdGlvbi5kZXN0IDogbnVsbDtcbiAgICB9KTtcbiAgfVxuXG4gIGdldEF0dGFjaG1lbnRzKCkge1xuICAgIHJldHVybiB0aGlzLl90cmFuc3BvcnQuZ2V0QXR0YWNobWVudHMoKTtcbiAgfVxuXG4gIGdldEphdmFTY3JpcHQoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3RyYW5zcG9ydC5nZXRKYXZhU2NyaXB0KCk7XG4gIH1cblxuICBnZXRPdXRsaW5lKCkge1xuICAgIHJldHVybiB0aGlzLl90cmFuc3BvcnQuZ2V0T3V0bGluZSgpO1xuICB9XG5cbiAgZ2V0UGVybWlzc2lvbnMoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3RyYW5zcG9ydC5nZXRQZXJtaXNzaW9ucygpO1xuICB9XG5cbiAgZ2V0TWV0YWRhdGEoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3RyYW5zcG9ydC5nZXRNZXRhZGF0YSgpO1xuICB9XG5cbiAgZ2V0RGF0YSgpIHtcbiAgICByZXR1cm4gdGhpcy5fdHJhbnNwb3J0LmdldERhdGEoKTtcbiAgfVxuXG4gIGdldERvd25sb2FkSW5mbygpIHtcbiAgICByZXR1cm4gdGhpcy5fdHJhbnNwb3J0LmRvd25sb2FkSW5mb0NhcGFiaWxpdHkucHJvbWlzZTtcbiAgfVxuXG4gIGdldFN0YXRzKCkge1xuICAgIHJldHVybiB0aGlzLl90cmFuc3BvcnQuZ2V0U3RhdHMoKTtcbiAgfVxuXG4gIGNsZWFudXAoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3RyYW5zcG9ydC5zdGFydENsZWFudXAoKTtcbiAgfVxuXG4gIGRlc3Ryb3koKSB7XG4gICAgcmV0dXJuIHRoaXMubG9hZGluZ1Rhc2suZGVzdHJveSgpO1xuICB9XG5cbiAgZ2V0IGxvYWRpbmdQYXJhbXMoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3RyYW5zcG9ydC5sb2FkaW5nUGFyYW1zO1xuICB9XG5cbiAgZ2V0IGxvYWRpbmdUYXNrKCkge1xuICAgIHJldHVybiB0aGlzLl90cmFuc3BvcnQubG9hZGluZ1Rhc2s7XG4gIH1cblxufVxuXG5leHBvcnRzLlBERkRvY3VtZW50UHJveHkgPSBQREZEb2N1bWVudFByb3h5O1xuXG5jbGFzcyBQREZQYWdlUHJveHkge1xuICBjb25zdHJ1Y3RvcihwYWdlSW5kZXgsIHBhZ2VJbmZvLCB0cmFuc3BvcnQsIHBkZkJ1ZyA9IGZhbHNlKSB7XG4gICAgdGhpcy5fcGFnZUluZGV4ID0gcGFnZUluZGV4O1xuICAgIHRoaXMuX3BhZ2VJbmZvID0gcGFnZUluZm87XG4gICAgdGhpcy5fdHJhbnNwb3J0ID0gdHJhbnNwb3J0O1xuICAgIHRoaXMuX3N0YXRzID0gcGRmQnVnID8gbmV3IF9kaXNwbGF5X3V0aWxzLlN0YXRUaW1lcigpIDogbnVsbDtcbiAgICB0aGlzLl9wZGZCdWcgPSBwZGZCdWc7XG4gICAgdGhpcy5jb21tb25PYmpzID0gdHJhbnNwb3J0LmNvbW1vbk9ianM7XG4gICAgdGhpcy5vYmpzID0gbmV3IFBERk9iamVjdHMoKTtcbiAgICB0aGlzLmNsZWFudXBBZnRlclJlbmRlciA9IGZhbHNlO1xuICAgIHRoaXMucGVuZGluZ0NsZWFudXAgPSBmYWxzZTtcbiAgICB0aGlzLmludGVudFN0YXRlcyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgdGhpcy5kZXN0cm95ZWQgPSBmYWxzZTtcbiAgfVxuXG4gIGdldCBwYWdlTnVtYmVyKCkge1xuICAgIHJldHVybiB0aGlzLl9wYWdlSW5kZXggKyAxO1xuICB9XG5cbiAgZ2V0IHJvdGF0ZSgpIHtcbiAgICByZXR1cm4gdGhpcy5fcGFnZUluZm8ucm90YXRlO1xuICB9XG5cbiAgZ2V0IHJlZigpIHtcbiAgICByZXR1cm4gdGhpcy5fcGFnZUluZm8ucmVmO1xuICB9XG5cbiAgZ2V0IHVzZXJVbml0KCkge1xuICAgIHJldHVybiB0aGlzLl9wYWdlSW5mby51c2VyVW5pdDtcbiAgfVxuXG4gIGdldCB2aWV3KCkge1xuICAgIHJldHVybiB0aGlzLl9wYWdlSW5mby52aWV3O1xuICB9XG5cbiAgZ2V0Vmlld3BvcnQoe1xuICAgIHNjYWxlLFxuICAgIHJvdGF0aW9uID0gdGhpcy5yb3RhdGUsXG4gICAgb2Zmc2V0WCA9IDAsXG4gICAgb2Zmc2V0WSA9IDAsXG4gICAgZG9udEZsaXAgPSBmYWxzZVxuICB9ID0ge30pIHtcbiAgICByZXR1cm4gbmV3IF9kaXNwbGF5X3V0aWxzLlBhZ2VWaWV3cG9ydCh7XG4gICAgICB2aWV3Qm94OiB0aGlzLnZpZXcsXG4gICAgICBzY2FsZSxcbiAgICAgIHJvdGF0aW9uLFxuICAgICAgb2Zmc2V0WCxcbiAgICAgIG9mZnNldFksXG4gICAgICBkb250RmxpcFxuICAgIH0pO1xuICB9XG5cbiAgZ2V0QW5ub3RhdGlvbnMoe1xuICAgIGludGVudCA9IG51bGxcbiAgfSA9IHt9KSB7XG4gICAgaWYgKCF0aGlzLmFubm90YXRpb25zUHJvbWlzZSB8fCB0aGlzLmFubm90YXRpb25zSW50ZW50ICE9PSBpbnRlbnQpIHtcbiAgICAgIHRoaXMuYW5ub3RhdGlvbnNQcm9taXNlID0gdGhpcy5fdHJhbnNwb3J0LmdldEFubm90YXRpb25zKHRoaXMuX3BhZ2VJbmRleCwgaW50ZW50KTtcbiAgICAgIHRoaXMuYW5ub3RhdGlvbnNJbnRlbnQgPSBpbnRlbnQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuYW5ub3RhdGlvbnNQcm9taXNlO1xuICB9XG5cbiAgcmVuZGVyKHtcbiAgICBjYW52YXNDb250ZXh0LFxuICAgIHZpZXdwb3J0LFxuICAgIGludGVudCA9IFwiZGlzcGxheVwiLFxuICAgIGVuYWJsZVdlYkdMID0gZmFsc2UsXG4gICAgcmVuZGVySW50ZXJhY3RpdmVGb3JtcyA9IGZhbHNlLFxuICAgIHRyYW5zZm9ybSA9IG51bGwsXG4gICAgaW1hZ2VMYXllciA9IG51bGwsXG4gICAgY2FudmFzRmFjdG9yeSA9IG51bGwsXG4gICAgYmFja2dyb3VuZCA9IG51bGxcbiAgfSkge1xuICAgIGlmICh0aGlzLl9zdGF0cykge1xuICAgICAgdGhpcy5fc3RhdHMudGltZShcIk92ZXJhbGxcIik7XG4gICAgfVxuXG4gICAgY29uc3QgcmVuZGVyaW5nSW50ZW50ID0gaW50ZW50ID09PSBcInByaW50XCIgPyBcInByaW50XCIgOiBcImRpc3BsYXlcIjtcbiAgICB0aGlzLnBlbmRpbmdDbGVhbnVwID0gZmFsc2U7XG5cbiAgICBpZiAoIXRoaXMuaW50ZW50U3RhdGVzW3JlbmRlcmluZ0ludGVudF0pIHtcbiAgICAgIHRoaXMuaW50ZW50U3RhdGVzW3JlbmRlcmluZ0ludGVudF0gPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgIH1cblxuICAgIGNvbnN0IGludGVudFN0YXRlID0gdGhpcy5pbnRlbnRTdGF0ZXNbcmVuZGVyaW5nSW50ZW50XTtcblxuICAgIGlmIChpbnRlbnRTdGF0ZS5zdHJlYW1SZWFkZXJDYW5jZWxUaW1lb3V0KSB7XG4gICAgICBjbGVhclRpbWVvdXQoaW50ZW50U3RhdGUuc3RyZWFtUmVhZGVyQ2FuY2VsVGltZW91dCk7XG4gICAgICBpbnRlbnRTdGF0ZS5zdHJlYW1SZWFkZXJDYW5jZWxUaW1lb3V0ID0gbnVsbDtcbiAgICB9XG5cbiAgICBjb25zdCBjYW52YXNGYWN0b3J5SW5zdGFuY2UgPSBjYW52YXNGYWN0b3J5IHx8IG5ldyBfZGlzcGxheV91dGlscy5ET01DYW52YXNGYWN0b3J5KCk7XG4gICAgY29uc3Qgd2ViR0xDb250ZXh0ID0gbmV3IF93ZWJnbC5XZWJHTENvbnRleHQoe1xuICAgICAgZW5hYmxlOiBlbmFibGVXZWJHTFxuICAgIH0pO1xuXG4gICAgaWYgKCFpbnRlbnRTdGF0ZS5kaXNwbGF5UmVhZHlDYXBhYmlsaXR5KSB7XG4gICAgICBpbnRlbnRTdGF0ZS5kaXNwbGF5UmVhZHlDYXBhYmlsaXR5ID0gKDAsIF91dGlsLmNyZWF0ZVByb21pc2VDYXBhYmlsaXR5KSgpO1xuICAgICAgaW50ZW50U3RhdGUub3BlcmF0b3JMaXN0ID0ge1xuICAgICAgICBmbkFycmF5OiBbXSxcbiAgICAgICAgYXJnc0FycmF5OiBbXSxcbiAgICAgICAgbGFzdENodW5rOiBmYWxzZVxuICAgICAgfTtcblxuICAgICAgaWYgKHRoaXMuX3N0YXRzKSB7XG4gICAgICAgIHRoaXMuX3N0YXRzLnRpbWUoXCJQYWdlIFJlcXVlc3RcIik7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuX3B1bXBPcGVyYXRvckxpc3Qoe1xuICAgICAgICBwYWdlSW5kZXg6IHRoaXMuX3BhZ2VJbmRleCxcbiAgICAgICAgaW50ZW50OiByZW5kZXJpbmdJbnRlbnQsXG4gICAgICAgIHJlbmRlckludGVyYWN0aXZlRm9ybXM6IHJlbmRlckludGVyYWN0aXZlRm9ybXMgPT09IHRydWVcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGNvbnN0IGNvbXBsZXRlID0gZXJyb3IgPT4ge1xuICAgICAgY29uc3QgaSA9IGludGVudFN0YXRlLnJlbmRlclRhc2tzLmluZGV4T2YoaW50ZXJuYWxSZW5kZXJUYXNrKTtcblxuICAgICAgaWYgKGkgPj0gMCkge1xuICAgICAgICBpbnRlbnRTdGF0ZS5yZW5kZXJUYXNrcy5zcGxpY2UoaSwgMSk7XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLmNsZWFudXBBZnRlclJlbmRlciB8fCByZW5kZXJpbmdJbnRlbnQgPT09IFwicHJpbnRcIikge1xuICAgICAgICB0aGlzLnBlbmRpbmdDbGVhbnVwID0gdHJ1ZTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5fdHJ5Q2xlYW51cCgpO1xuXG4gICAgICBpZiAoZXJyb3IpIHtcbiAgICAgICAgaW50ZXJuYWxSZW5kZXJUYXNrLmNhcGFiaWxpdHkucmVqZWN0KGVycm9yKTtcblxuICAgICAgICB0aGlzLl9hYm9ydE9wZXJhdG9yTGlzdCh7XG4gICAgICAgICAgaW50ZW50U3RhdGUsXG4gICAgICAgICAgcmVhc29uOiBlcnJvclxuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGludGVybmFsUmVuZGVyVGFzay5jYXBhYmlsaXR5LnJlc29sdmUoKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMuX3N0YXRzKSB7XG4gICAgICAgIHRoaXMuX3N0YXRzLnRpbWVFbmQoXCJSZW5kZXJpbmdcIik7XG5cbiAgICAgICAgdGhpcy5fc3RhdHMudGltZUVuZChcIk92ZXJhbGxcIik7XG4gICAgICB9XG4gICAgfTtcblxuICAgIGNvbnN0IGludGVybmFsUmVuZGVyVGFzayA9IG5ldyBJbnRlcm5hbFJlbmRlclRhc2soe1xuICAgICAgY2FsbGJhY2s6IGNvbXBsZXRlLFxuICAgICAgcGFyYW1zOiB7XG4gICAgICAgIGNhbnZhc0NvbnRleHQsXG4gICAgICAgIHZpZXdwb3J0LFxuICAgICAgICB0cmFuc2Zvcm0sXG4gICAgICAgIGltYWdlTGF5ZXIsXG4gICAgICAgIGJhY2tncm91bmRcbiAgICAgIH0sXG4gICAgICBvYmpzOiB0aGlzLm9ianMsXG4gICAgICBjb21tb25PYmpzOiB0aGlzLmNvbW1vbk9ianMsXG4gICAgICBvcGVyYXRvckxpc3Q6IGludGVudFN0YXRlLm9wZXJhdG9yTGlzdCxcbiAgICAgIHBhZ2VJbmRleDogdGhpcy5fcGFnZUluZGV4LFxuICAgICAgY2FudmFzRmFjdG9yeTogY2FudmFzRmFjdG9yeUluc3RhbmNlLFxuICAgICAgd2ViR0xDb250ZXh0LFxuICAgICAgdXNlUmVxdWVzdEFuaW1hdGlvbkZyYW1lOiByZW5kZXJpbmdJbnRlbnQgIT09IFwicHJpbnRcIixcbiAgICAgIHBkZkJ1ZzogdGhpcy5fcGRmQnVnXG4gICAgfSk7XG5cbiAgICBpZiAoIWludGVudFN0YXRlLnJlbmRlclRhc2tzKSB7XG4gICAgICBpbnRlbnRTdGF0ZS5yZW5kZXJUYXNrcyA9IFtdO1xuICAgIH1cblxuICAgIGludGVudFN0YXRlLnJlbmRlclRhc2tzLnB1c2goaW50ZXJuYWxSZW5kZXJUYXNrKTtcbiAgICBjb25zdCByZW5kZXJUYXNrID0gaW50ZXJuYWxSZW5kZXJUYXNrLnRhc2s7XG4gICAgaW50ZW50U3RhdGUuZGlzcGxheVJlYWR5Q2FwYWJpbGl0eS5wcm9taXNlLnRoZW4odHJhbnNwYXJlbmN5ID0+IHtcbiAgICAgIGlmICh0aGlzLnBlbmRpbmdDbGVhbnVwKSB7XG4gICAgICAgIGNvbXBsZXRlKCk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMuX3N0YXRzKSB7XG4gICAgICAgIHRoaXMuX3N0YXRzLnRpbWUoXCJSZW5kZXJpbmdcIik7XG4gICAgICB9XG5cbiAgICAgIGludGVybmFsUmVuZGVyVGFzay5pbml0aWFsaXplR3JhcGhpY3ModHJhbnNwYXJlbmN5KTtcbiAgICAgIGludGVybmFsUmVuZGVyVGFzay5vcGVyYXRvckxpc3RDaGFuZ2VkKCk7XG4gICAgfSkuY2F0Y2goY29tcGxldGUpO1xuICAgIHJldHVybiByZW5kZXJUYXNrO1xuICB9XG5cbiAgZ2V0T3BlcmF0b3JMaXN0KCkge1xuICAgIGZ1bmN0aW9uIG9wZXJhdG9yTGlzdENoYW5nZWQoKSB7XG4gICAgICBpZiAoaW50ZW50U3RhdGUub3BlcmF0b3JMaXN0Lmxhc3RDaHVuaykge1xuICAgICAgICBpbnRlbnRTdGF0ZS5vcExpc3RSZWFkQ2FwYWJpbGl0eS5yZXNvbHZlKGludGVudFN0YXRlLm9wZXJhdG9yTGlzdCk7XG4gICAgICAgIGNvbnN0IGkgPSBpbnRlbnRTdGF0ZS5yZW5kZXJUYXNrcy5pbmRleE9mKG9wTGlzdFRhc2spO1xuXG4gICAgICAgIGlmIChpID49IDApIHtcbiAgICAgICAgICBpbnRlbnRTdGF0ZS5yZW5kZXJUYXNrcy5zcGxpY2UoaSwgMSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBjb25zdCByZW5kZXJpbmdJbnRlbnQgPSBcIm9wbGlzdFwiO1xuXG4gICAgaWYgKCF0aGlzLmludGVudFN0YXRlc1tyZW5kZXJpbmdJbnRlbnRdKSB7XG4gICAgICB0aGlzLmludGVudFN0YXRlc1tyZW5kZXJpbmdJbnRlbnRdID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICB9XG5cbiAgICBjb25zdCBpbnRlbnRTdGF0ZSA9IHRoaXMuaW50ZW50U3RhdGVzW3JlbmRlcmluZ0ludGVudF07XG4gICAgbGV0IG9wTGlzdFRhc2s7XG5cbiAgICBpZiAoIWludGVudFN0YXRlLm9wTGlzdFJlYWRDYXBhYmlsaXR5KSB7XG4gICAgICBvcExpc3RUYXNrID0ge307XG4gICAgICBvcExpc3RUYXNrLm9wZXJhdG9yTGlzdENoYW5nZWQgPSBvcGVyYXRvckxpc3RDaGFuZ2VkO1xuICAgICAgaW50ZW50U3RhdGUub3BMaXN0UmVhZENhcGFiaWxpdHkgPSAoMCwgX3V0aWwuY3JlYXRlUHJvbWlzZUNhcGFiaWxpdHkpKCk7XG4gICAgICBpbnRlbnRTdGF0ZS5yZW5kZXJUYXNrcyA9IFtdO1xuICAgICAgaW50ZW50U3RhdGUucmVuZGVyVGFza3MucHVzaChvcExpc3RUYXNrKTtcbiAgICAgIGludGVudFN0YXRlLm9wZXJhdG9yTGlzdCA9IHtcbiAgICAgICAgZm5BcnJheTogW10sXG4gICAgICAgIGFyZ3NBcnJheTogW10sXG4gICAgICAgIGxhc3RDaHVuazogZmFsc2VcbiAgICAgIH07XG5cbiAgICAgIGlmICh0aGlzLl9zdGF0cykge1xuICAgICAgICB0aGlzLl9zdGF0cy50aW1lKFwiUGFnZSBSZXF1ZXN0XCIpO1xuICAgICAgfVxuXG4gICAgICB0aGlzLl9wdW1wT3BlcmF0b3JMaXN0KHtcbiAgICAgICAgcGFnZUluZGV4OiB0aGlzLl9wYWdlSW5kZXgsXG4gICAgICAgIGludGVudDogcmVuZGVyaW5nSW50ZW50XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gaW50ZW50U3RhdGUub3BMaXN0UmVhZENhcGFiaWxpdHkucHJvbWlzZTtcbiAgfVxuXG4gIHN0cmVhbVRleHRDb250ZW50KHtcbiAgICBub3JtYWxpemVXaGl0ZXNwYWNlID0gZmFsc2UsXG4gICAgZGlzYWJsZUNvbWJpbmVUZXh0SXRlbXMgPSBmYWxzZVxuICB9ID0ge30pIHtcbiAgICBjb25zdCBURVhUX0NPTlRFTlRfQ0hVTktfU0laRSA9IDEwMDtcbiAgICByZXR1cm4gdGhpcy5fdHJhbnNwb3J0Lm1lc3NhZ2VIYW5kbGVyLnNlbmRXaXRoU3RyZWFtKFwiR2V0VGV4dENvbnRlbnRcIiwge1xuICAgICAgcGFnZUluZGV4OiB0aGlzLl9wYWdlSW5kZXgsXG4gICAgICBub3JtYWxpemVXaGl0ZXNwYWNlOiBub3JtYWxpemVXaGl0ZXNwYWNlID09PSB0cnVlLFxuICAgICAgY29tYmluZVRleHRJdGVtczogZGlzYWJsZUNvbWJpbmVUZXh0SXRlbXMgIT09IHRydWVcbiAgICB9LCB7XG4gICAgICBoaWdoV2F0ZXJNYXJrOiBURVhUX0NPTlRFTlRfQ0hVTktfU0laRSxcblxuICAgICAgc2l6ZSh0ZXh0Q29udGVudCkge1xuICAgICAgICByZXR1cm4gdGV4dENvbnRlbnQuaXRlbXMubGVuZ3RoO1xuICAgICAgfVxuXG4gICAgfSk7XG4gIH1cblxuICBnZXRUZXh0Q29udGVudChwYXJhbXMgPSB7fSkge1xuICAgIGNvbnN0IHJlYWRhYmxlU3RyZWFtID0gdGhpcy5zdHJlYW1UZXh0Q29udGVudChwYXJhbXMpO1xuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICBmdW5jdGlvbiBwdW1wKCkge1xuICAgICAgICByZWFkZXIucmVhZCgpLnRoZW4oZnVuY3Rpb24gKHtcbiAgICAgICAgICB2YWx1ZSxcbiAgICAgICAgICBkb25lXG4gICAgICAgIH0pIHtcbiAgICAgICAgICBpZiAoZG9uZSkge1xuICAgICAgICAgICAgcmVzb2x2ZSh0ZXh0Q29udGVudCk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgT2JqZWN0LmFzc2lnbih0ZXh0Q29udGVudC5zdHlsZXMsIHZhbHVlLnN0eWxlcyk7XG4gICAgICAgICAgdGV4dENvbnRlbnQuaXRlbXMucHVzaCguLi52YWx1ZS5pdGVtcyk7XG4gICAgICAgICAgcHVtcCgpO1xuICAgICAgICB9LCByZWplY3QpO1xuICAgICAgfVxuXG4gICAgICBjb25zdCByZWFkZXIgPSByZWFkYWJsZVN0cmVhbS5nZXRSZWFkZXIoKTtcbiAgICAgIGNvbnN0IHRleHRDb250ZW50ID0ge1xuICAgICAgICBpdGVtczogW10sXG4gICAgICAgIHN0eWxlczogT2JqZWN0LmNyZWF0ZShudWxsKVxuICAgICAgfTtcbiAgICAgIHB1bXAoKTtcbiAgICB9KTtcbiAgfVxuXG4gIF9kZXN0cm95KCkge1xuICAgIHRoaXMuZGVzdHJveWVkID0gdHJ1ZTtcbiAgICB0aGlzLl90cmFuc3BvcnQucGFnZUNhY2hlW3RoaXMuX3BhZ2VJbmRleF0gPSBudWxsO1xuICAgIGNvbnN0IHdhaXRPbiA9IFtdO1xuICAgIE9iamVjdC5rZXlzKHRoaXMuaW50ZW50U3RhdGVzKS5mb3JFYWNoKGludGVudCA9PiB7XG4gICAgICBjb25zdCBpbnRlbnRTdGF0ZSA9IHRoaXMuaW50ZW50U3RhdGVzW2ludGVudF07XG5cbiAgICAgIHRoaXMuX2Fib3J0T3BlcmF0b3JMaXN0KHtcbiAgICAgICAgaW50ZW50U3RhdGUsXG4gICAgICAgIHJlYXNvbjogbmV3IEVycm9yKFwiUGFnZSB3YXMgZGVzdHJveWVkLlwiKSxcbiAgICAgICAgZm9yY2U6IHRydWVcbiAgICAgIH0pO1xuXG4gICAgICBpZiAoaW50ZW50ID09PSBcIm9wbGlzdFwiKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaW50ZW50U3RhdGUucmVuZGVyVGFza3MuZm9yRWFjaChmdW5jdGlvbiAocmVuZGVyVGFzaykge1xuICAgICAgICBjb25zdCByZW5kZXJDb21wbGV0ZWQgPSByZW5kZXJUYXNrLmNhcGFiaWxpdHkucHJvbWlzZS5jYXRjaChmdW5jdGlvbiAoKSB7fSk7XG4gICAgICAgIHdhaXRPbi5wdXNoKHJlbmRlckNvbXBsZXRlZCk7XG4gICAgICAgIHJlbmRlclRhc2suY2FuY2VsKCk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgICB0aGlzLm9ianMuY2xlYXIoKTtcbiAgICB0aGlzLmFubm90YXRpb25zUHJvbWlzZSA9IG51bGw7XG4gICAgdGhpcy5wZW5kaW5nQ2xlYW51cCA9IGZhbHNlO1xuICAgIHJldHVybiBQcm9taXNlLmFsbCh3YWl0T24pO1xuICB9XG5cbiAgY2xlYW51cChyZXNldFN0YXRzID0gZmFsc2UpIHtcbiAgICB0aGlzLnBlbmRpbmdDbGVhbnVwID0gdHJ1ZTtcbiAgICByZXR1cm4gdGhpcy5fdHJ5Q2xlYW51cChyZXNldFN0YXRzKTtcbiAgfVxuXG4gIF90cnlDbGVhbnVwKHJlc2V0U3RhdHMgPSBmYWxzZSkge1xuICAgIGlmICghdGhpcy5wZW5kaW5nQ2xlYW51cCB8fCBPYmplY3Qua2V5cyh0aGlzLmludGVudFN0YXRlcykuc29tZShpbnRlbnQgPT4ge1xuICAgICAgY29uc3QgaW50ZW50U3RhdGUgPSB0aGlzLmludGVudFN0YXRlc1tpbnRlbnRdO1xuICAgICAgcmV0dXJuIGludGVudFN0YXRlLnJlbmRlclRhc2tzLmxlbmd0aCAhPT0gMCB8fCAhaW50ZW50U3RhdGUub3BlcmF0b3JMaXN0Lmxhc3RDaHVuaztcbiAgICB9KSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIE9iamVjdC5rZXlzKHRoaXMuaW50ZW50U3RhdGVzKS5mb3JFYWNoKGludGVudCA9PiB7XG4gICAgICBkZWxldGUgdGhpcy5pbnRlbnRTdGF0ZXNbaW50ZW50XTtcbiAgICB9KTtcbiAgICB0aGlzLm9ianMuY2xlYXIoKTtcbiAgICB0aGlzLmFubm90YXRpb25zUHJvbWlzZSA9IG51bGw7XG5cbiAgICBpZiAocmVzZXRTdGF0cyAmJiB0aGlzLl9zdGF0cykge1xuICAgICAgdGhpcy5fc3RhdHMgPSBuZXcgX2Rpc3BsYXlfdXRpbHMuU3RhdFRpbWVyKCk7XG4gICAgfVxuXG4gICAgdGhpcy5wZW5kaW5nQ2xlYW51cCA9IGZhbHNlO1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgX3N0YXJ0UmVuZGVyUGFnZSh0cmFuc3BhcmVuY3ksIGludGVudCkge1xuICAgIGNvbnN0IGludGVudFN0YXRlID0gdGhpcy5pbnRlbnRTdGF0ZXNbaW50ZW50XTtcblxuICAgIGlmICghaW50ZW50U3RhdGUpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5fc3RhdHMpIHtcbiAgICAgIHRoaXMuX3N0YXRzLnRpbWVFbmQoXCJQYWdlIFJlcXVlc3RcIik7XG4gICAgfVxuXG4gICAgaWYgKGludGVudFN0YXRlLmRpc3BsYXlSZWFkeUNhcGFiaWxpdHkpIHtcbiAgICAgIGludGVudFN0YXRlLmRpc3BsYXlSZWFkeUNhcGFiaWxpdHkucmVzb2x2ZSh0cmFuc3BhcmVuY3kpO1xuICAgIH1cbiAgfVxuXG4gIF9yZW5kZXJQYWdlQ2h1bmsob3BlcmF0b3JMaXN0Q2h1bmssIGludGVudFN0YXRlKSB7XG4gICAgZm9yIChsZXQgaSA9IDAsIGlpID0gb3BlcmF0b3JMaXN0Q2h1bmsubGVuZ3RoOyBpIDwgaWk7IGkrKykge1xuICAgICAgaW50ZW50U3RhdGUub3BlcmF0b3JMaXN0LmZuQXJyYXkucHVzaChvcGVyYXRvckxpc3RDaHVuay5mbkFycmF5W2ldKTtcbiAgICAgIGludGVudFN0YXRlLm9wZXJhdG9yTGlzdC5hcmdzQXJyYXkucHVzaChvcGVyYXRvckxpc3RDaHVuay5hcmdzQXJyYXlbaV0pO1xuICAgIH1cblxuICAgIGludGVudFN0YXRlLm9wZXJhdG9yTGlzdC5sYXN0Q2h1bmsgPSBvcGVyYXRvckxpc3RDaHVuay5sYXN0Q2h1bms7XG5cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGludGVudFN0YXRlLnJlbmRlclRhc2tzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBpbnRlbnRTdGF0ZS5yZW5kZXJUYXNrc1tpXS5vcGVyYXRvckxpc3RDaGFuZ2VkKCk7XG4gICAgfVxuXG4gICAgaWYgKG9wZXJhdG9yTGlzdENodW5rLmxhc3RDaHVuaykge1xuICAgICAgdGhpcy5fdHJ5Q2xlYW51cCgpO1xuICAgIH1cbiAgfVxuXG4gIF9wdW1wT3BlcmF0b3JMaXN0KGFyZ3MpIHtcbiAgICAoMCwgX3V0aWwuYXNzZXJ0KShhcmdzLmludGVudCwgJ1BERlBhZ2VQcm94eS5fcHVtcE9wZXJhdG9yTGlzdDogRXhwZWN0ZWQgXCJpbnRlbnRcIiBhcmd1bWVudC4nKTtcblxuICAgIGNvbnN0IHJlYWRhYmxlU3RyZWFtID0gdGhpcy5fdHJhbnNwb3J0Lm1lc3NhZ2VIYW5kbGVyLnNlbmRXaXRoU3RyZWFtKFwiR2V0T3BlcmF0b3JMaXN0XCIsIGFyZ3MpO1xuXG4gICAgY29uc3QgcmVhZGVyID0gcmVhZGFibGVTdHJlYW0uZ2V0UmVhZGVyKCk7XG4gICAgY29uc3QgaW50ZW50U3RhdGUgPSB0aGlzLmludGVudFN0YXRlc1thcmdzLmludGVudF07XG4gICAgaW50ZW50U3RhdGUuc3RyZWFtUmVhZGVyID0gcmVhZGVyO1xuXG4gICAgY29uc3QgcHVtcCA9ICgpID0+IHtcbiAgICAgIHJlYWRlci5yZWFkKCkudGhlbigoe1xuICAgICAgICB2YWx1ZSxcbiAgICAgICAgZG9uZVxuICAgICAgfSkgPT4ge1xuICAgICAgICBpZiAoZG9uZSkge1xuICAgICAgICAgIGludGVudFN0YXRlLnN0cmVhbVJlYWRlciA9IG51bGw7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMuX3RyYW5zcG9ydC5kZXN0cm95ZWQpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLl9yZW5kZXJQYWdlQ2h1bmsodmFsdWUsIGludGVudFN0YXRlKTtcblxuICAgICAgICBwdW1wKCk7XG4gICAgICB9LCByZWFzb24gPT4ge1xuICAgICAgICBpbnRlbnRTdGF0ZS5zdHJlYW1SZWFkZXIgPSBudWxsO1xuXG4gICAgICAgIGlmICh0aGlzLl90cmFuc3BvcnQuZGVzdHJveWVkKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGludGVudFN0YXRlLm9wZXJhdG9yTGlzdCkge1xuICAgICAgICAgIGludGVudFN0YXRlLm9wZXJhdG9yTGlzdC5sYXN0Q2h1bmsgPSB0cnVlO1xuXG4gICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBpbnRlbnRTdGF0ZS5yZW5kZXJUYXNrcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgaW50ZW50U3RhdGUucmVuZGVyVGFza3NbaV0ub3BlcmF0b3JMaXN0Q2hhbmdlZCgpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHRoaXMuX3RyeUNsZWFudXAoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChpbnRlbnRTdGF0ZS5kaXNwbGF5UmVhZHlDYXBhYmlsaXR5KSB7XG4gICAgICAgICAgaW50ZW50U3RhdGUuZGlzcGxheVJlYWR5Q2FwYWJpbGl0eS5yZWplY3QocmVhc29uKTtcbiAgICAgICAgfSBlbHNlIGlmIChpbnRlbnRTdGF0ZS5vcExpc3RSZWFkQ2FwYWJpbGl0eSkge1xuICAgICAgICAgIGludGVudFN0YXRlLm9wTGlzdFJlYWRDYXBhYmlsaXR5LnJlamVjdChyZWFzb24pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRocm93IHJlYXNvbjtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfTtcblxuICAgIHB1bXAoKTtcbiAgfVxuXG4gIF9hYm9ydE9wZXJhdG9yTGlzdCh7XG4gICAgaW50ZW50U3RhdGUsXG4gICAgcmVhc29uLFxuICAgIGZvcmNlID0gZmFsc2VcbiAgfSkge1xuICAgICgwLCBfdXRpbC5hc3NlcnQpKHJlYXNvbiBpbnN0YW5jZW9mIEVycm9yIHx8IHR5cGVvZiByZWFzb24gPT09IFwib2JqZWN0XCIgJiYgcmVhc29uICE9PSBudWxsLCAnUERGUGFnZVByb3h5Ll9hYm9ydE9wZXJhdG9yTGlzdDogRXhwZWN0ZWQgXCJyZWFzb25cIiBhcmd1bWVudC4nKTtcblxuICAgIGlmICghaW50ZW50U3RhdGUuc3RyZWFtUmVhZGVyKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKCFmb3JjZSkge1xuICAgICAgaWYgKGludGVudFN0YXRlLnJlbmRlclRhc2tzLmxlbmd0aCAhPT0gMCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGlmIChyZWFzb24gaW5zdGFuY2VvZiBfZGlzcGxheV91dGlscy5SZW5kZXJpbmdDYW5jZWxsZWRFeGNlcHRpb24pIHtcbiAgICAgICAgaW50ZW50U3RhdGUuc3RyZWFtUmVhZGVyQ2FuY2VsVGltZW91dCA9IHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgIHRoaXMuX2Fib3J0T3BlcmF0b3JMaXN0KHtcbiAgICAgICAgICAgIGludGVudFN0YXRlLFxuICAgICAgICAgICAgcmVhc29uLFxuICAgICAgICAgICAgZm9yY2U6IHRydWVcbiAgICAgICAgICB9KTtcblxuICAgICAgICAgIGludGVudFN0YXRlLnN0cmVhbVJlYWRlckNhbmNlbFRpbWVvdXQgPSBudWxsO1xuICAgICAgICB9LCBSRU5ERVJJTkdfQ0FOQ0VMTEVEX1RJTUVPVVQpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgfVxuXG4gICAgaW50ZW50U3RhdGUuc3RyZWFtUmVhZGVyLmNhbmNlbChuZXcgX3V0aWwuQWJvcnRFeGNlcHRpb24ocmVhc29uICYmIHJlYXNvbi5tZXNzYWdlKSk7XG4gICAgaW50ZW50U3RhdGUuc3RyZWFtUmVhZGVyID0gbnVsbDtcblxuICAgIGlmICh0aGlzLl90cmFuc3BvcnQuZGVzdHJveWVkKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgT2JqZWN0LmtleXModGhpcy5pbnRlbnRTdGF0ZXMpLnNvbWUoaW50ZW50ID0+IHtcbiAgICAgIGlmICh0aGlzLmludGVudFN0YXRlc1tpbnRlbnRdID09PSBpbnRlbnRTdGF0ZSkge1xuICAgICAgICBkZWxldGUgdGhpcy5pbnRlbnRTdGF0ZXNbaW50ZW50XTtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9KTtcbiAgICB0aGlzLmNsZWFudXAoKTtcbiAgfVxuXG4gIGdldCBzdGF0cygpIHtcbiAgICByZXR1cm4gdGhpcy5fc3RhdHM7XG4gIH1cblxufVxuXG5leHBvcnRzLlBERlBhZ2VQcm94eSA9IFBERlBhZ2VQcm94eTtcblxuY2xhc3MgTG9vcGJhY2tQb3J0IHtcbiAgY29uc3RydWN0b3IoZGVmZXIgPSB0cnVlKSB7XG4gICAgdGhpcy5fbGlzdGVuZXJzID0gW107XG4gICAgdGhpcy5fZGVmZXIgPSBkZWZlcjtcbiAgICB0aGlzLl9kZWZlcnJlZCA9IFByb21pc2UucmVzb2x2ZSh1bmRlZmluZWQpO1xuICB9XG5cbiAgcG9zdE1lc3NhZ2Uob2JqLCB0cmFuc2ZlcnMpIHtcbiAgICBmdW5jdGlvbiBjbG9uZVZhbHVlKHZhbHVlKSB7XG4gICAgICBpZiAodHlwZW9mIHZhbHVlICE9PSBcIm9iamVjdFwiIHx8IHZhbHVlID09PSBudWxsKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgIH1cblxuICAgICAgaWYgKGNsb25lZC5oYXModmFsdWUpKSB7XG4gICAgICAgIHJldHVybiBjbG9uZWQuZ2V0KHZhbHVlKTtcbiAgICAgIH1cblxuICAgICAgbGV0IGJ1ZmZlciwgcmVzdWx0O1xuXG4gICAgICBpZiAoKGJ1ZmZlciA9IHZhbHVlLmJ1ZmZlcikgJiYgKDAsIF91dGlsLmlzQXJyYXlCdWZmZXIpKGJ1ZmZlcikpIHtcbiAgICAgICAgY29uc3QgdHJhbnNmZXJhYmxlID0gdHJhbnNmZXJzICYmIHRyYW5zZmVycy5pbmNsdWRlcyhidWZmZXIpO1xuXG4gICAgICAgIGlmICh0cmFuc2ZlcmFibGUpIHtcbiAgICAgICAgICByZXN1bHQgPSBuZXcgdmFsdWUuY29uc3RydWN0b3IoYnVmZmVyLCB2YWx1ZS5ieXRlT2Zmc2V0LCB2YWx1ZS5ieXRlTGVuZ3RoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXN1bHQgPSBuZXcgdmFsdWUuY29uc3RydWN0b3IodmFsdWUpO1xuICAgICAgICB9XG5cbiAgICAgICAgY2xvbmVkLnNldCh2YWx1ZSwgcmVzdWx0KTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH1cblxuICAgICAgcmVzdWx0ID0gQXJyYXkuaXNBcnJheSh2YWx1ZSkgPyBbXSA6IHt9O1xuICAgICAgY2xvbmVkLnNldCh2YWx1ZSwgcmVzdWx0KTtcblxuICAgICAgZm9yIChjb25zdCBpIGluIHZhbHVlKSB7XG4gICAgICAgIGxldCBkZXNjLFxuICAgICAgICAgICAgcCA9IHZhbHVlO1xuXG4gICAgICAgIHdoaWxlICghKGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHAsIGkpKSkge1xuICAgICAgICAgIHAgPSBPYmplY3QuZ2V0UHJvdG90eXBlT2YocCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodHlwZW9mIGRlc2MudmFsdWUgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0eXBlb2YgZGVzYy52YWx1ZSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgICAgaWYgKHZhbHVlLmhhc093blByb3BlcnR5ICYmIHZhbHVlLmhhc093blByb3BlcnR5KGkpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYExvb3BiYWNrUG9ydC5wb3N0TWVzc2FnZSAtIGNhbm5vdCBjbG9uZTogJHt2YWx1ZVtpXX1gKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJlc3VsdFtpXSA9IGNsb25lVmFsdWUoZGVzYy52YWx1ZSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgaWYgKCF0aGlzLl9kZWZlcikge1xuICAgICAgdGhpcy5fbGlzdGVuZXJzLmZvckVhY2gobGlzdGVuZXIgPT4ge1xuICAgICAgICBsaXN0ZW5lci5jYWxsKHRoaXMsIHtcbiAgICAgICAgICBkYXRhOiBvYmpcbiAgICAgICAgfSk7XG4gICAgICB9KTtcblxuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNvbnN0IGNsb25lZCA9IG5ldyBXZWFrTWFwKCk7XG4gICAgY29uc3QgZSA9IHtcbiAgICAgIGRhdGE6IGNsb25lVmFsdWUob2JqKVxuICAgIH07XG5cbiAgICB0aGlzLl9kZWZlcnJlZC50aGVuKCgpID0+IHtcbiAgICAgIHRoaXMuX2xpc3RlbmVycy5mb3JFYWNoKGxpc3RlbmVyID0+IHtcbiAgICAgICAgbGlzdGVuZXIuY2FsbCh0aGlzLCBlKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG5cbiAgYWRkRXZlbnRMaXN0ZW5lcihuYW1lLCBsaXN0ZW5lcikge1xuICAgIHRoaXMuX2xpc3RlbmVycy5wdXNoKGxpc3RlbmVyKTtcbiAgfVxuXG4gIHJlbW92ZUV2ZW50TGlzdGVuZXIobmFtZSwgbGlzdGVuZXIpIHtcbiAgICBjb25zdCBpID0gdGhpcy5fbGlzdGVuZXJzLmluZGV4T2YobGlzdGVuZXIpO1xuXG4gICAgdGhpcy5fbGlzdGVuZXJzLnNwbGljZShpLCAxKTtcbiAgfVxuXG4gIHRlcm1pbmF0ZSgpIHtcbiAgICB0aGlzLl9saXN0ZW5lcnMubGVuZ3RoID0gMDtcbiAgfVxuXG59XG5cbmV4cG9ydHMuTG9vcGJhY2tQb3J0ID0gTG9vcGJhY2tQb3J0O1xuXG5jb25zdCBQREZXb3JrZXIgPSBmdW5jdGlvbiBQREZXb3JrZXJDbG9zdXJlKCkge1xuICBjb25zdCBwZGZXb3JrZXJQb3J0cyA9IG5ldyBXZWFrTWFwKCk7XG4gIGxldCBpc1dvcmtlckRpc2FibGVkID0gZmFsc2U7XG4gIGxldCBmYWxsYmFja1dvcmtlclNyYztcbiAgbGV0IG5leHRGYWtlV29ya2VySWQgPSAwO1xuICBsZXQgZmFrZVdvcmtlckNhcGFiaWxpdHk7XG5cbiAgaWYgKF9pc19ub2RlLmlzTm9kZUpTICYmIHR5cGVvZiByZXF1aXJlID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICBpc1dvcmtlckRpc2FibGVkID0gdHJ1ZTtcbiAgICBmYWxsYmFja1dvcmtlclNyYyA9IFwiLi9wZGYud29ya2VyLmpzXCI7XG4gIH0gZWxzZSBpZiAodHlwZW9mIGRvY3VtZW50ID09PSBcIm9iamVjdFwiICYmIFwiY3VycmVudFNjcmlwdFwiIGluIGRvY3VtZW50KSB7XG4gICAgY29uc3QgcGRmanNGaWxlUGF0aCA9IGRvY3VtZW50LmN1cnJlbnRTY3JpcHQgJiYgZG9jdW1lbnQuY3VycmVudFNjcmlwdC5zcmM7XG5cbiAgICBpZiAocGRmanNGaWxlUGF0aCkge1xuICAgICAgZmFsbGJhY2tXb3JrZXJTcmMgPSBwZGZqc0ZpbGVQYXRoLnJlcGxhY2UoLyhcXC4oPzptaW5cXC4pP2pzKShcXD8uKik/JC9pLCBcIi53b3JrZXIkMSQyXCIpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGdldFdvcmtlclNyYygpIHtcbiAgICBpZiAoX3dvcmtlcl9vcHRpb25zLkdsb2JhbFdvcmtlck9wdGlvbnMud29ya2VyU3JjKSB7XG4gICAgICByZXR1cm4gX3dvcmtlcl9vcHRpb25zLkdsb2JhbFdvcmtlck9wdGlvbnMud29ya2VyU3JjO1xuICAgIH1cblxuICAgIGlmICh0eXBlb2YgZmFsbGJhY2tXb3JrZXJTcmMgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIGlmICghX2lzX25vZGUuaXNOb2RlSlMpIHtcbiAgICAgICAgKDAsIF9kaXNwbGF5X3V0aWxzLmRlcHJlY2F0ZWQpKCdObyBcIkdsb2JhbFdvcmtlck9wdGlvbnMud29ya2VyU3JjXCIgc3BlY2lmaWVkLicpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gZmFsbGJhY2tXb3JrZXJTcmM7XG4gICAgfVxuXG4gICAgdGhyb3cgbmV3IEVycm9yKCdObyBcIkdsb2JhbFdvcmtlck9wdGlvbnMud29ya2VyU3JjXCIgc3BlY2lmaWVkLicpO1xuICB9XG5cbiAgZnVuY3Rpb24gZ2V0TWFpblRocmVhZFdvcmtlck1lc3NhZ2VIYW5kbGVyKCkge1xuICAgIGxldCBtYWluV29ya2VyTWVzc2FnZUhhbmRsZXI7XG5cbiAgICB0cnkge1xuICAgICAgbWFpbldvcmtlck1lc3NhZ2VIYW5kbGVyID0gZ2xvYmFsVGhpcy5wZGZqc1dvcmtlciAmJiBnbG9iYWxUaGlzLnBkZmpzV29ya2VyLldvcmtlck1lc3NhZ2VIYW5kbGVyO1xuICAgIH0gY2F0Y2ggKGV4KSB7fVxuXG4gICAgcmV0dXJuIG1haW5Xb3JrZXJNZXNzYWdlSGFuZGxlciB8fCBudWxsO1xuICB9XG5cbiAgZnVuY3Rpb24gc2V0dXBGYWtlV29ya2VyR2xvYmFsKCkge1xuICAgIGlmIChmYWtlV29ya2VyQ2FwYWJpbGl0eSkge1xuICAgICAgcmV0dXJuIGZha2VXb3JrZXJDYXBhYmlsaXR5LnByb21pc2U7XG4gICAgfVxuXG4gICAgZmFrZVdvcmtlckNhcGFiaWxpdHkgPSAoMCwgX3V0aWwuY3JlYXRlUHJvbWlzZUNhcGFiaWxpdHkpKCk7XG5cbiAgICBjb25zdCBsb2FkZXIgPSBhc3luYyBmdW5jdGlvbiAoKSB7XG4gICAgICBjb25zdCBtYWluV29ya2VyTWVzc2FnZUhhbmRsZXIgPSBnZXRNYWluVGhyZWFkV29ya2VyTWVzc2FnZUhhbmRsZXIoKTtcblxuICAgICAgaWYgKG1haW5Xb3JrZXJNZXNzYWdlSGFuZGxlcikge1xuICAgICAgICByZXR1cm4gbWFpbldvcmtlck1lc3NhZ2VIYW5kbGVyO1xuICAgICAgfVxuXG4gICAgICBpZiAoX2lzX25vZGUuaXNOb2RlSlMgJiYgdHlwZW9mIHJlcXVpcmUgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICBjb25zdCB3b3JrZXIgPSBldmFsKFwicmVxdWlyZVwiKShnZXRXb3JrZXJTcmMoKSk7XG4gICAgICAgIHJldHVybiB3b3JrZXIuV29ya2VyTWVzc2FnZUhhbmRsZXI7XG4gICAgICB9XG5cbiAgICAgIGF3YWl0ICgwLCBfZGlzcGxheV91dGlscy5sb2FkU2NyaXB0KShnZXRXb3JrZXJTcmMoKSk7XG4gICAgICByZXR1cm4gd2luZG93LnBkZmpzV29ya2VyLldvcmtlck1lc3NhZ2VIYW5kbGVyO1xuICAgIH07XG5cbiAgICBsb2FkZXIoKS50aGVuKGZha2VXb3JrZXJDYXBhYmlsaXR5LnJlc29sdmUsIGZha2VXb3JrZXJDYXBhYmlsaXR5LnJlamVjdCk7XG4gICAgcmV0dXJuIGZha2VXb3JrZXJDYXBhYmlsaXR5LnByb21pc2U7XG4gIH1cblxuICBmdW5jdGlvbiBjcmVhdGVDRE5XcmFwcGVyKHVybCkge1xuICAgIGNvbnN0IHdyYXBwZXIgPSBcImltcG9ydFNjcmlwdHMoJ1wiICsgdXJsICsgXCInKTtcIjtcbiAgICByZXR1cm4gVVJMLmNyZWF0ZU9iamVjdFVSTChuZXcgQmxvYihbd3JhcHBlcl0pKTtcbiAgfVxuXG4gIGNsYXNzIFBERldvcmtlciB7XG4gICAgY29uc3RydWN0b3Ioe1xuICAgICAgbmFtZSA9IG51bGwsXG4gICAgICBwb3J0ID0gbnVsbCxcbiAgICAgIHZlcmJvc2l0eSA9ICgwLCBfdXRpbC5nZXRWZXJib3NpdHlMZXZlbCkoKVxuICAgIH0gPSB7fSkge1xuICAgICAgaWYgKHBvcnQgJiYgcGRmV29ya2VyUG9ydHMuaGFzKHBvcnQpKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIkNhbm5vdCB1c2UgbW9yZSB0aGFuIG9uZSBQREZXb3JrZXIgcGVyIHBvcnRcIik7XG4gICAgICB9XG5cbiAgICAgIHRoaXMubmFtZSA9IG5hbWU7XG4gICAgICB0aGlzLmRlc3Ryb3llZCA9IGZhbHNlO1xuICAgICAgdGhpcy5wb3N0TWVzc2FnZVRyYW5zZmVycyA9IHRydWU7XG4gICAgICB0aGlzLnZlcmJvc2l0eSA9IHZlcmJvc2l0eTtcbiAgICAgIHRoaXMuX3JlYWR5Q2FwYWJpbGl0eSA9ICgwLCBfdXRpbC5jcmVhdGVQcm9taXNlQ2FwYWJpbGl0eSkoKTtcbiAgICAgIHRoaXMuX3BvcnQgPSBudWxsO1xuICAgICAgdGhpcy5fd2ViV29ya2VyID0gbnVsbDtcbiAgICAgIHRoaXMuX21lc3NhZ2VIYW5kbGVyID0gbnVsbDtcblxuICAgICAgaWYgKHBvcnQpIHtcbiAgICAgICAgcGRmV29ya2VyUG9ydHMuc2V0KHBvcnQsIHRoaXMpO1xuXG4gICAgICAgIHRoaXMuX2luaXRpYWxpemVGcm9tUG9ydChwb3J0KTtcblxuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHRoaXMuX2luaXRpYWxpemUoKTtcbiAgICB9XG5cbiAgICBnZXQgcHJvbWlzZSgpIHtcbiAgICAgIHJldHVybiB0aGlzLl9yZWFkeUNhcGFiaWxpdHkucHJvbWlzZTtcbiAgICB9XG5cbiAgICBnZXQgcG9ydCgpIHtcbiAgICAgIHJldHVybiB0aGlzLl9wb3J0O1xuICAgIH1cblxuICAgIGdldCBtZXNzYWdlSGFuZGxlcigpIHtcbiAgICAgIHJldHVybiB0aGlzLl9tZXNzYWdlSGFuZGxlcjtcbiAgICB9XG5cbiAgICBfaW5pdGlhbGl6ZUZyb21Qb3J0KHBvcnQpIHtcbiAgICAgIHRoaXMuX3BvcnQgPSBwb3J0O1xuICAgICAgdGhpcy5fbWVzc2FnZUhhbmRsZXIgPSBuZXcgX21lc3NhZ2VfaGFuZGxlci5NZXNzYWdlSGFuZGxlcihcIm1haW5cIiwgXCJ3b3JrZXJcIiwgcG9ydCk7XG5cbiAgICAgIHRoaXMuX21lc3NhZ2VIYW5kbGVyLm9uKFwicmVhZHlcIiwgZnVuY3Rpb24gKCkge30pO1xuXG4gICAgICB0aGlzLl9yZWFkeUNhcGFiaWxpdHkucmVzb2x2ZSgpO1xuICAgIH1cblxuICAgIF9pbml0aWFsaXplKCkge1xuICAgICAgaWYgKHR5cGVvZiBXb3JrZXIgIT09IFwidW5kZWZpbmVkXCIgJiYgIWlzV29ya2VyRGlzYWJsZWQgJiYgIWdldE1haW5UaHJlYWRXb3JrZXJNZXNzYWdlSGFuZGxlcigpKSB7XG4gICAgICAgIGxldCB3b3JrZXJTcmMgPSBnZXRXb3JrZXJTcmMoKTtcblxuICAgICAgICB0cnkge1xuICAgICAgICAgIGlmICghKDAsIF91dGlsLmlzU2FtZU9yaWdpbikod2luZG93LmxvY2F0aW9uLmhyZWYsIHdvcmtlclNyYykpIHtcbiAgICAgICAgICAgIHdvcmtlclNyYyA9IGNyZWF0ZUNETldyYXBwZXIobmV3IFVSTCh3b3JrZXJTcmMsIHdpbmRvdy5sb2NhdGlvbikuaHJlZik7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgY29uc3Qgd29ya2VyID0gbmV3IFdvcmtlcih3b3JrZXJTcmMpO1xuICAgICAgICAgIGNvbnN0IG1lc3NhZ2VIYW5kbGVyID0gbmV3IF9tZXNzYWdlX2hhbmRsZXIuTWVzc2FnZUhhbmRsZXIoXCJtYWluXCIsIFwid29ya2VyXCIsIHdvcmtlcik7XG5cbiAgICAgICAgICBjb25zdCB0ZXJtaW5hdGVFYXJseSA9ICgpID0+IHtcbiAgICAgICAgICAgIHdvcmtlci5yZW1vdmVFdmVudExpc3RlbmVyKFwiZXJyb3JcIiwgb25Xb3JrZXJFcnJvcik7XG4gICAgICAgICAgICBtZXNzYWdlSGFuZGxlci5kZXN0cm95KCk7XG4gICAgICAgICAgICB3b3JrZXIudGVybWluYXRlKCk7XG5cbiAgICAgICAgICAgIGlmICh0aGlzLmRlc3Ryb3llZCkge1xuICAgICAgICAgICAgICB0aGlzLl9yZWFkeUNhcGFiaWxpdHkucmVqZWN0KG5ldyBFcnJvcihcIldvcmtlciB3YXMgZGVzdHJveWVkXCIpKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHRoaXMuX3NldHVwRmFrZVdvcmtlcigpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH07XG5cbiAgICAgICAgICBjb25zdCBvbldvcmtlckVycm9yID0gKCkgPT4ge1xuICAgICAgICAgICAgaWYgKCF0aGlzLl93ZWJXb3JrZXIpIHtcbiAgICAgICAgICAgICAgdGVybWluYXRlRWFybHkoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9O1xuXG4gICAgICAgICAgd29ya2VyLmFkZEV2ZW50TGlzdGVuZXIoXCJlcnJvclwiLCBvbldvcmtlckVycm9yKTtcbiAgICAgICAgICBtZXNzYWdlSGFuZGxlci5vbihcInRlc3RcIiwgZGF0YSA9PiB7XG4gICAgICAgICAgICB3b3JrZXIucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImVycm9yXCIsIG9uV29ya2VyRXJyb3IpO1xuXG4gICAgICAgICAgICBpZiAodGhpcy5kZXN0cm95ZWQpIHtcbiAgICAgICAgICAgICAgdGVybWluYXRlRWFybHkoKTtcbiAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoZGF0YSkge1xuICAgICAgICAgICAgICB0aGlzLl9tZXNzYWdlSGFuZGxlciA9IG1lc3NhZ2VIYW5kbGVyO1xuICAgICAgICAgICAgICB0aGlzLl9wb3J0ID0gd29ya2VyO1xuICAgICAgICAgICAgICB0aGlzLl93ZWJXb3JrZXIgPSB3b3JrZXI7XG5cbiAgICAgICAgICAgICAgaWYgKCFkYXRhLnN1cHBvcnRUcmFuc2ZlcnMpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnBvc3RNZXNzYWdlVHJhbnNmZXJzID0gZmFsc2U7XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICB0aGlzLl9yZWFkeUNhcGFiaWxpdHkucmVzb2x2ZSgpO1xuXG4gICAgICAgICAgICAgIG1lc3NhZ2VIYW5kbGVyLnNlbmQoXCJjb25maWd1cmVcIiwge1xuICAgICAgICAgICAgICAgIHZlcmJvc2l0eTogdGhpcy52ZXJib3NpdHlcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICB0aGlzLl9zZXR1cEZha2VXb3JrZXIoKTtcblxuICAgICAgICAgICAgICBtZXNzYWdlSGFuZGxlci5kZXN0cm95KCk7XG4gICAgICAgICAgICAgIHdvcmtlci50ZXJtaW5hdGUoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgICAgICBtZXNzYWdlSGFuZGxlci5vbihcInJlYWR5XCIsIGRhdGEgPT4ge1xuICAgICAgICAgICAgd29ya2VyLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJlcnJvclwiLCBvbldvcmtlckVycm9yKTtcblxuICAgICAgICAgICAgaWYgKHRoaXMuZGVzdHJveWVkKSB7XG4gICAgICAgICAgICAgIHRlcm1pbmF0ZUVhcmx5KCk7XG4gICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgc2VuZFRlc3QoKTtcbiAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgdGhpcy5fc2V0dXBGYWtlV29ya2VyKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgICBjb25zdCBzZW5kVGVzdCA9ICgpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHRlc3RPYmogPSBuZXcgVWludDhBcnJheShbdGhpcy5wb3N0TWVzc2FnZVRyYW5zZmVycyA/IDI1NSA6IDBdKTtcblxuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgbWVzc2FnZUhhbmRsZXIuc2VuZChcInRlc3RcIiwgdGVzdE9iaiwgW3Rlc3RPYmouYnVmZmVyXSk7XG4gICAgICAgICAgICB9IGNhdGNoIChleCkge1xuICAgICAgICAgICAgICAoMCwgX3V0aWwud2FybikoXCJDYW5ub3QgdXNlIHBvc3RNZXNzYWdlIHRyYW5zZmVycy5cIik7XG4gICAgICAgICAgICAgIHRlc3RPYmpbMF0gPSAwO1xuICAgICAgICAgICAgICBtZXNzYWdlSGFuZGxlci5zZW5kKFwidGVzdFwiLCB0ZXN0T2JqKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9O1xuXG4gICAgICAgICAgc2VuZFRlc3QoKTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAoMCwgX3V0aWwuaW5mbykoXCJUaGUgd29ya2VyIGhhcyBiZWVuIGRpc2FibGVkLlwiKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB0aGlzLl9zZXR1cEZha2VXb3JrZXIoKTtcbiAgICB9XG5cbiAgICBfc2V0dXBGYWtlV29ya2VyKCkge1xuICAgICAgaWYgKCFpc1dvcmtlckRpc2FibGVkKSB7XG4gICAgICAgICgwLCBfdXRpbC53YXJuKShcIlNldHRpbmcgdXAgZmFrZSB3b3JrZXIuXCIpO1xuICAgICAgICBpc1dvcmtlckRpc2FibGVkID0gdHJ1ZTtcbiAgICAgIH1cblxuICAgICAgc2V0dXBGYWtlV29ya2VyR2xvYmFsKCkudGhlbihXb3JrZXJNZXNzYWdlSGFuZGxlciA9PiB7XG4gICAgICAgIGlmICh0aGlzLmRlc3Ryb3llZCkge1xuICAgICAgICAgIHRoaXMuX3JlYWR5Q2FwYWJpbGl0eS5yZWplY3QobmV3IEVycm9yKFwiV29ya2VyIHdhcyBkZXN0cm95ZWRcIikpO1xuXG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgcG9ydCA9IG5ldyBMb29wYmFja1BvcnQoKTtcbiAgICAgICAgdGhpcy5fcG9ydCA9IHBvcnQ7XG4gICAgICAgIGNvbnN0IGlkID0gXCJmYWtlXCIgKyBuZXh0RmFrZVdvcmtlcklkKys7XG4gICAgICAgIGNvbnN0IHdvcmtlckhhbmRsZXIgPSBuZXcgX21lc3NhZ2VfaGFuZGxlci5NZXNzYWdlSGFuZGxlcihpZCArIFwiX3dvcmtlclwiLCBpZCwgcG9ydCk7XG4gICAgICAgIFdvcmtlck1lc3NhZ2VIYW5kbGVyLnNldHVwKHdvcmtlckhhbmRsZXIsIHBvcnQpO1xuICAgICAgICBjb25zdCBtZXNzYWdlSGFuZGxlciA9IG5ldyBfbWVzc2FnZV9oYW5kbGVyLk1lc3NhZ2VIYW5kbGVyKGlkLCBpZCArIFwiX3dvcmtlclwiLCBwb3J0KTtcbiAgICAgICAgdGhpcy5fbWVzc2FnZUhhbmRsZXIgPSBtZXNzYWdlSGFuZGxlcjtcblxuICAgICAgICB0aGlzLl9yZWFkeUNhcGFiaWxpdHkucmVzb2x2ZSgpO1xuXG4gICAgICAgIG1lc3NhZ2VIYW5kbGVyLnNlbmQoXCJjb25maWd1cmVcIiwge1xuICAgICAgICAgIHZlcmJvc2l0eTogdGhpcy52ZXJib3NpdHlcbiAgICAgICAgfSk7XG4gICAgICB9KS5jYXRjaChyZWFzb24gPT4ge1xuICAgICAgICB0aGlzLl9yZWFkeUNhcGFiaWxpdHkucmVqZWN0KG5ldyBFcnJvcihgU2V0dGluZyB1cCBmYWtlIHdvcmtlciBmYWlsZWQ6IFwiJHtyZWFzb24ubWVzc2FnZX1cIi5gKSk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBkZXN0cm95KCkge1xuICAgICAgdGhpcy5kZXN0cm95ZWQgPSB0cnVlO1xuXG4gICAgICBpZiAodGhpcy5fd2ViV29ya2VyKSB7XG4gICAgICAgIHRoaXMuX3dlYldvcmtlci50ZXJtaW5hdGUoKTtcblxuICAgICAgICB0aGlzLl93ZWJXb3JrZXIgPSBudWxsO1xuICAgICAgfVxuXG4gICAgICBwZGZXb3JrZXJQb3J0cy5kZWxldGUodGhpcy5fcG9ydCk7XG4gICAgICB0aGlzLl9wb3J0ID0gbnVsbDtcblxuICAgICAgaWYgKHRoaXMuX21lc3NhZ2VIYW5kbGVyKSB7XG4gICAgICAgIHRoaXMuX21lc3NhZ2VIYW5kbGVyLmRlc3Ryb3koKTtcblxuICAgICAgICB0aGlzLl9tZXNzYWdlSGFuZGxlciA9IG51bGw7XG4gICAgICB9XG4gICAgfVxuXG4gICAgc3RhdGljIGZyb21Qb3J0KHBhcmFtcykge1xuICAgICAgaWYgKCFwYXJhbXMgfHwgIXBhcmFtcy5wb3J0KSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIlBERldvcmtlci5mcm9tUG9ydCAtIGludmFsaWQgbWV0aG9kIHNpZ25hdHVyZS5cIik7XG4gICAgICB9XG5cbiAgICAgIGlmIChwZGZXb3JrZXJQb3J0cy5oYXMocGFyYW1zLnBvcnQpKSB7XG4gICAgICAgIHJldHVybiBwZGZXb3JrZXJQb3J0cy5nZXQocGFyYW1zLnBvcnQpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gbmV3IFBERldvcmtlcihwYXJhbXMpO1xuICAgIH1cblxuICAgIHN0YXRpYyBnZXRXb3JrZXJTcmMoKSB7XG4gICAgICByZXR1cm4gZ2V0V29ya2VyU3JjKCk7XG4gICAgfVxuXG4gIH1cblxuICByZXR1cm4gUERGV29ya2VyO1xufSgpO1xuXG5leHBvcnRzLlBERldvcmtlciA9IFBERldvcmtlcjtcblxuY2xhc3MgV29ya2VyVHJhbnNwb3J0IHtcbiAgY29uc3RydWN0b3IobWVzc2FnZUhhbmRsZXIsIGxvYWRpbmdUYXNrLCBuZXR3b3JrU3RyZWFtLCBwYXJhbXMpIHtcbiAgICB0aGlzLm1lc3NhZ2VIYW5kbGVyID0gbWVzc2FnZUhhbmRsZXI7XG4gICAgdGhpcy5sb2FkaW5nVGFzayA9IGxvYWRpbmdUYXNrO1xuICAgIHRoaXMuY29tbW9uT2JqcyA9IG5ldyBQREZPYmplY3RzKCk7XG4gICAgdGhpcy5mb250TG9hZGVyID0gbmV3IF9mb250X2xvYWRlci5Gb250TG9hZGVyKHtcbiAgICAgIGRvY0lkOiBsb2FkaW5nVGFzay5kb2NJZCxcbiAgICAgIG9uVW5zdXBwb3J0ZWRGZWF0dXJlOiB0aGlzLl9vblVuc3VwcG9ydGVkRmVhdHVyZS5iaW5kKHRoaXMpXG4gICAgfSk7XG4gICAgdGhpcy5fcGFyYW1zID0gcGFyYW1zO1xuICAgIHRoaXMuQ01hcFJlYWRlckZhY3RvcnkgPSBuZXcgcGFyYW1zLkNNYXBSZWFkZXJGYWN0b3J5KHtcbiAgICAgIGJhc2VVcmw6IHBhcmFtcy5jTWFwVXJsLFxuICAgICAgaXNDb21wcmVzc2VkOiBwYXJhbXMuY01hcFBhY2tlZFxuICAgIH0pO1xuICAgIHRoaXMuZGVzdHJveWVkID0gZmFsc2U7XG4gICAgdGhpcy5kZXN0cm95Q2FwYWJpbGl0eSA9IG51bGw7XG4gICAgdGhpcy5fcGFzc3dvcmRDYXBhYmlsaXR5ID0gbnVsbDtcbiAgICB0aGlzLl9uZXR3b3JrU3RyZWFtID0gbmV0d29ya1N0cmVhbTtcbiAgICB0aGlzLl9mdWxsUmVhZGVyID0gbnVsbDtcbiAgICB0aGlzLl9sYXN0UHJvZ3Jlc3MgPSBudWxsO1xuICAgIHRoaXMucGFnZUNhY2hlID0gW107XG4gICAgdGhpcy5wYWdlUHJvbWlzZXMgPSBbXTtcbiAgICB0aGlzLmRvd25sb2FkSW5mb0NhcGFiaWxpdHkgPSAoMCwgX3V0aWwuY3JlYXRlUHJvbWlzZUNhcGFiaWxpdHkpKCk7XG4gICAgdGhpcy5zZXR1cE1lc3NhZ2VIYW5kbGVyKCk7XG4gIH1cblxuICBkZXN0cm95KCkge1xuICAgIGlmICh0aGlzLmRlc3Ryb3lDYXBhYmlsaXR5KSB7XG4gICAgICByZXR1cm4gdGhpcy5kZXN0cm95Q2FwYWJpbGl0eS5wcm9taXNlO1xuICAgIH1cblxuICAgIHRoaXMuZGVzdHJveWVkID0gdHJ1ZTtcbiAgICB0aGlzLmRlc3Ryb3lDYXBhYmlsaXR5ID0gKDAsIF91dGlsLmNyZWF0ZVByb21pc2VDYXBhYmlsaXR5KSgpO1xuXG4gICAgaWYgKHRoaXMuX3Bhc3N3b3JkQ2FwYWJpbGl0eSkge1xuICAgICAgdGhpcy5fcGFzc3dvcmRDYXBhYmlsaXR5LnJlamVjdChuZXcgRXJyb3IoXCJXb3JrZXIgd2FzIGRlc3Ryb3llZCBkdXJpbmcgb25QYXNzd29yZCBjYWxsYmFja1wiKSk7XG4gICAgfVxuXG4gICAgY29uc3Qgd2FpdE9uID0gW107XG4gICAgdGhpcy5wYWdlQ2FjaGUuZm9yRWFjaChmdW5jdGlvbiAocGFnZSkge1xuICAgICAgaWYgKHBhZ2UpIHtcbiAgICAgICAgd2FpdE9uLnB1c2gocGFnZS5fZGVzdHJveSgpKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICB0aGlzLnBhZ2VDYWNoZS5sZW5ndGggPSAwO1xuICAgIHRoaXMucGFnZVByb21pc2VzLmxlbmd0aCA9IDA7XG4gICAgY29uc3QgdGVybWluYXRlZCA9IHRoaXMubWVzc2FnZUhhbmRsZXIuc2VuZFdpdGhQcm9taXNlKFwiVGVybWluYXRlXCIsIG51bGwpO1xuICAgIHdhaXRPbi5wdXNoKHRlcm1pbmF0ZWQpO1xuICAgIFByb21pc2UuYWxsKHdhaXRPbikudGhlbigoKSA9PiB7XG4gICAgICB0aGlzLmZvbnRMb2FkZXIuY2xlYXIoKTtcblxuICAgICAgaWYgKHRoaXMuX25ldHdvcmtTdHJlYW0pIHtcbiAgICAgICAgdGhpcy5fbmV0d29ya1N0cmVhbS5jYW5jZWxBbGxSZXF1ZXN0cyhuZXcgX3V0aWwuQWJvcnRFeGNlcHRpb24oXCJXb3JrZXIgd2FzIHRlcm1pbmF0ZWQuXCIpKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMubWVzc2FnZUhhbmRsZXIpIHtcbiAgICAgICAgdGhpcy5tZXNzYWdlSGFuZGxlci5kZXN0cm95KCk7XG4gICAgICAgIHRoaXMubWVzc2FnZUhhbmRsZXIgPSBudWxsO1xuICAgICAgfVxuXG4gICAgICB0aGlzLmRlc3Ryb3lDYXBhYmlsaXR5LnJlc29sdmUoKTtcbiAgICB9LCB0aGlzLmRlc3Ryb3lDYXBhYmlsaXR5LnJlamVjdCk7XG4gICAgcmV0dXJuIHRoaXMuZGVzdHJveUNhcGFiaWxpdHkucHJvbWlzZTtcbiAgfVxuXG4gIHNldHVwTWVzc2FnZUhhbmRsZXIoKSB7XG4gICAgY29uc3Qge1xuICAgICAgbWVzc2FnZUhhbmRsZXIsXG4gICAgICBsb2FkaW5nVGFza1xuICAgIH0gPSB0aGlzO1xuICAgIG1lc3NhZ2VIYW5kbGVyLm9uKFwiR2V0UmVhZGVyXCIsIChkYXRhLCBzaW5rKSA9PiB7XG4gICAgICAoMCwgX3V0aWwuYXNzZXJ0KSh0aGlzLl9uZXR3b3JrU3RyZWFtLCBcIkdldFJlYWRlciAtIG5vIGBJUERGU3RyZWFtYCBpbnN0YW5jZSBhdmFpbGFibGUuXCIpO1xuICAgICAgdGhpcy5fZnVsbFJlYWRlciA9IHRoaXMuX25ldHdvcmtTdHJlYW0uZ2V0RnVsbFJlYWRlcigpO1xuXG4gICAgICB0aGlzLl9mdWxsUmVhZGVyLm9uUHJvZ3Jlc3MgPSBldnQgPT4ge1xuICAgICAgICB0aGlzLl9sYXN0UHJvZ3Jlc3MgPSB7XG4gICAgICAgICAgbG9hZGVkOiBldnQubG9hZGVkLFxuICAgICAgICAgIHRvdGFsOiBldnQudG90YWxcbiAgICAgICAgfTtcbiAgICAgIH07XG5cbiAgICAgIHNpbmsub25QdWxsID0gKCkgPT4ge1xuICAgICAgICB0aGlzLl9mdWxsUmVhZGVyLnJlYWQoKS50aGVuKGZ1bmN0aW9uICh7XG4gICAgICAgICAgdmFsdWUsXG4gICAgICAgICAgZG9uZVxuICAgICAgICB9KSB7XG4gICAgICAgICAgaWYgKGRvbmUpIHtcbiAgICAgICAgICAgIHNpbmsuY2xvc2UoKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICAoMCwgX3V0aWwuYXNzZXJ0KSgoMCwgX3V0aWwuaXNBcnJheUJ1ZmZlcikodmFsdWUpLCBcIkdldFJlYWRlciAtIGV4cGVjdGVkIGFuIEFycmF5QnVmZmVyLlwiKTtcbiAgICAgICAgICBzaW5rLmVucXVldWUobmV3IFVpbnQ4QXJyYXkodmFsdWUpLCAxLCBbdmFsdWVdKTtcbiAgICAgICAgfSkuY2F0Y2gocmVhc29uID0+IHtcbiAgICAgICAgICBzaW5rLmVycm9yKHJlYXNvbik7XG4gICAgICAgIH0pO1xuICAgICAgfTtcblxuICAgICAgc2luay5vbkNhbmNlbCA9IHJlYXNvbiA9PiB7XG4gICAgICAgIHRoaXMuX2Z1bGxSZWFkZXIuY2FuY2VsKHJlYXNvbik7XG4gICAgICB9O1xuICAgIH0pO1xuICAgIG1lc3NhZ2VIYW5kbGVyLm9uKFwiUmVhZGVySGVhZGVyc1JlYWR5XCIsIGRhdGEgPT4ge1xuICAgICAgY29uc3QgaGVhZGVyc0NhcGFiaWxpdHkgPSAoMCwgX3V0aWwuY3JlYXRlUHJvbWlzZUNhcGFiaWxpdHkpKCk7XG4gICAgICBjb25zdCBmdWxsUmVhZGVyID0gdGhpcy5fZnVsbFJlYWRlcjtcbiAgICAgIGZ1bGxSZWFkZXIuaGVhZGVyc1JlYWR5LnRoZW4oKCkgPT4ge1xuICAgICAgICBpZiAoIWZ1bGxSZWFkZXIuaXNTdHJlYW1pbmdTdXBwb3J0ZWQgfHwgIWZ1bGxSZWFkZXIuaXNSYW5nZVN1cHBvcnRlZCkge1xuICAgICAgICAgIGlmICh0aGlzLl9sYXN0UHJvZ3Jlc3MgJiYgbG9hZGluZ1Rhc2sub25Qcm9ncmVzcykge1xuICAgICAgICAgICAgbG9hZGluZ1Rhc2sub25Qcm9ncmVzcyh0aGlzLl9sYXN0UHJvZ3Jlc3MpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGZ1bGxSZWFkZXIub25Qcm9ncmVzcyA9IGV2dCA9PiB7XG4gICAgICAgICAgICBpZiAobG9hZGluZ1Rhc2sub25Qcm9ncmVzcykge1xuICAgICAgICAgICAgICBsb2FkaW5nVGFzay5vblByb2dyZXNzKHtcbiAgICAgICAgICAgICAgICBsb2FkZWQ6IGV2dC5sb2FkZWQsXG4gICAgICAgICAgICAgICAgdG90YWw6IGV2dC50b3RhbFxuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9O1xuICAgICAgICB9XG5cbiAgICAgICAgaGVhZGVyc0NhcGFiaWxpdHkucmVzb2x2ZSh7XG4gICAgICAgICAgaXNTdHJlYW1pbmdTdXBwb3J0ZWQ6IGZ1bGxSZWFkZXIuaXNTdHJlYW1pbmdTdXBwb3J0ZWQsXG4gICAgICAgICAgaXNSYW5nZVN1cHBvcnRlZDogZnVsbFJlYWRlci5pc1JhbmdlU3VwcG9ydGVkLFxuICAgICAgICAgIGNvbnRlbnRMZW5ndGg6IGZ1bGxSZWFkZXIuY29udGVudExlbmd0aFxuICAgICAgICB9KTtcbiAgICAgIH0sIGhlYWRlcnNDYXBhYmlsaXR5LnJlamVjdCk7XG4gICAgICByZXR1cm4gaGVhZGVyc0NhcGFiaWxpdHkucHJvbWlzZTtcbiAgICB9KTtcbiAgICBtZXNzYWdlSGFuZGxlci5vbihcIkdldFJhbmdlUmVhZGVyXCIsIChkYXRhLCBzaW5rKSA9PiB7XG4gICAgICAoMCwgX3V0aWwuYXNzZXJ0KSh0aGlzLl9uZXR3b3JrU3RyZWFtLCBcIkdldFJhbmdlUmVhZGVyIC0gbm8gYElQREZTdHJlYW1gIGluc3RhbmNlIGF2YWlsYWJsZS5cIik7XG5cbiAgICAgIGNvbnN0IHJhbmdlUmVhZGVyID0gdGhpcy5fbmV0d29ya1N0cmVhbS5nZXRSYW5nZVJlYWRlcihkYXRhLmJlZ2luLCBkYXRhLmVuZCk7XG5cbiAgICAgIGlmICghcmFuZ2VSZWFkZXIpIHtcbiAgICAgICAgc2luay5jbG9zZSgpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHNpbmsub25QdWxsID0gKCkgPT4ge1xuICAgICAgICByYW5nZVJlYWRlci5yZWFkKCkudGhlbihmdW5jdGlvbiAoe1xuICAgICAgICAgIHZhbHVlLFxuICAgICAgICAgIGRvbmVcbiAgICAgICAgfSkge1xuICAgICAgICAgIGlmIChkb25lKSB7XG4gICAgICAgICAgICBzaW5rLmNsb3NlKCk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgKDAsIF91dGlsLmFzc2VydCkoKDAsIF91dGlsLmlzQXJyYXlCdWZmZXIpKHZhbHVlKSwgXCJHZXRSYW5nZVJlYWRlciAtIGV4cGVjdGVkIGFuIEFycmF5QnVmZmVyLlwiKTtcbiAgICAgICAgICBzaW5rLmVucXVldWUobmV3IFVpbnQ4QXJyYXkodmFsdWUpLCAxLCBbdmFsdWVdKTtcbiAgICAgICAgfSkuY2F0Y2gocmVhc29uID0+IHtcbiAgICAgICAgICBzaW5rLmVycm9yKHJlYXNvbik7XG4gICAgICAgIH0pO1xuICAgICAgfTtcblxuICAgICAgc2luay5vbkNhbmNlbCA9IHJlYXNvbiA9PiB7XG4gICAgICAgIHJhbmdlUmVhZGVyLmNhbmNlbChyZWFzb24pO1xuICAgICAgfTtcbiAgICB9KTtcbiAgICBtZXNzYWdlSGFuZGxlci5vbihcIkdldERvY1wiLCAoe1xuICAgICAgcGRmSW5mb1xuICAgIH0pID0+IHtcbiAgICAgIHRoaXMuX251bVBhZ2VzID0gcGRmSW5mby5udW1QYWdlcztcblxuICAgICAgbG9hZGluZ1Rhc2suX2NhcGFiaWxpdHkucmVzb2x2ZShuZXcgUERGRG9jdW1lbnRQcm94eShwZGZJbmZvLCB0aGlzKSk7XG4gICAgfSk7XG4gICAgbWVzc2FnZUhhbmRsZXIub24oXCJEb2NFeGNlcHRpb25cIiwgZnVuY3Rpb24gKGV4KSB7XG4gICAgICBsZXQgcmVhc29uO1xuXG4gICAgICBzd2l0Y2ggKGV4Lm5hbWUpIHtcbiAgICAgICAgY2FzZSBcIlBhc3N3b3JkRXhjZXB0aW9uXCI6XG4gICAgICAgICAgcmVhc29uID0gbmV3IF91dGlsLlBhc3N3b3JkRXhjZXB0aW9uKGV4Lm1lc3NhZ2UsIGV4LmNvZGUpO1xuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgXCJJbnZhbGlkUERGRXhjZXB0aW9uXCI6XG4gICAgICAgICAgcmVhc29uID0gbmV3IF91dGlsLkludmFsaWRQREZFeGNlcHRpb24oZXgubWVzc2FnZSk7XG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSBcIk1pc3NpbmdQREZFeGNlcHRpb25cIjpcbiAgICAgICAgICByZWFzb24gPSBuZXcgX3V0aWwuTWlzc2luZ1BERkV4Y2VwdGlvbihleC5tZXNzYWdlKTtcbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlIFwiVW5leHBlY3RlZFJlc3BvbnNlRXhjZXB0aW9uXCI6XG4gICAgICAgICAgcmVhc29uID0gbmV3IF91dGlsLlVuZXhwZWN0ZWRSZXNwb25zZUV4Y2VwdGlvbihleC5tZXNzYWdlLCBleC5zdGF0dXMpO1xuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgXCJVbmtub3duRXJyb3JFeGNlcHRpb25cIjpcbiAgICAgICAgICByZWFzb24gPSBuZXcgX3V0aWwuVW5rbm93bkVycm9yRXhjZXB0aW9uKGV4Lm1lc3NhZ2UsIGV4LmRldGFpbHMpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgfVxuXG4gICAgICBsb2FkaW5nVGFzay5fY2FwYWJpbGl0eS5yZWplY3QocmVhc29uKTtcbiAgICB9KTtcbiAgICBtZXNzYWdlSGFuZGxlci5vbihcIlBhc3N3b3JkUmVxdWVzdFwiLCBleGNlcHRpb24gPT4ge1xuICAgICAgdGhpcy5fcGFzc3dvcmRDYXBhYmlsaXR5ID0gKDAsIF91dGlsLmNyZWF0ZVByb21pc2VDYXBhYmlsaXR5KSgpO1xuXG4gICAgICBpZiAobG9hZGluZ1Rhc2sub25QYXNzd29yZCkge1xuICAgICAgICBjb25zdCB1cGRhdGVQYXNzd29yZCA9IHBhc3N3b3JkID0+IHtcbiAgICAgICAgICB0aGlzLl9wYXNzd29yZENhcGFiaWxpdHkucmVzb2x2ZSh7XG4gICAgICAgICAgICBwYXNzd29yZFxuICAgICAgICAgIH0pO1xuICAgICAgICB9O1xuXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgbG9hZGluZ1Rhc2sub25QYXNzd29yZCh1cGRhdGVQYXNzd29yZCwgZXhjZXB0aW9uLmNvZGUpO1xuICAgICAgICB9IGNhdGNoIChleCkge1xuICAgICAgICAgIHRoaXMuX3Bhc3N3b3JkQ2FwYWJpbGl0eS5yZWplY3QoZXgpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLl9wYXNzd29yZENhcGFiaWxpdHkucmVqZWN0KG5ldyBfdXRpbC5QYXNzd29yZEV4Y2VwdGlvbihleGNlcHRpb24ubWVzc2FnZSwgZXhjZXB0aW9uLmNvZGUpKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXMuX3Bhc3N3b3JkQ2FwYWJpbGl0eS5wcm9taXNlO1xuICAgIH0pO1xuICAgIG1lc3NhZ2VIYW5kbGVyLm9uKFwiRGF0YUxvYWRlZFwiLCBkYXRhID0+IHtcbiAgICAgIGlmIChsb2FkaW5nVGFzay5vblByb2dyZXNzKSB7XG4gICAgICAgIGxvYWRpbmdUYXNrLm9uUHJvZ3Jlc3Moe1xuICAgICAgICAgIGxvYWRlZDogZGF0YS5sZW5ndGgsXG4gICAgICAgICAgdG90YWw6IGRhdGEubGVuZ3RoXG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICB0aGlzLmRvd25sb2FkSW5mb0NhcGFiaWxpdHkucmVzb2x2ZShkYXRhKTtcbiAgICB9KTtcbiAgICBtZXNzYWdlSGFuZGxlci5vbihcIlN0YXJ0UmVuZGVyUGFnZVwiLCBkYXRhID0+IHtcbiAgICAgIGlmICh0aGlzLmRlc3Ryb3llZCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IHBhZ2UgPSB0aGlzLnBhZ2VDYWNoZVtkYXRhLnBhZ2VJbmRleF07XG5cbiAgICAgIHBhZ2UuX3N0YXJ0UmVuZGVyUGFnZShkYXRhLnRyYW5zcGFyZW5jeSwgZGF0YS5pbnRlbnQpO1xuICAgIH0pO1xuICAgIG1lc3NhZ2VIYW5kbGVyLm9uKFwiY29tbW9ub2JqXCIsIGRhdGEgPT4ge1xuICAgICAgaWYgKHRoaXMuZGVzdHJveWVkKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgY29uc3QgW2lkLCB0eXBlLCBleHBvcnRlZERhdGFdID0gZGF0YTtcblxuICAgICAgaWYgKHRoaXMuY29tbW9uT2Jqcy5oYXMoaWQpKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgc3dpdGNoICh0eXBlKSB7XG4gICAgICAgIGNhc2UgXCJGb250XCI6XG4gICAgICAgICAgY29uc3QgcGFyYW1zID0gdGhpcy5fcGFyYW1zO1xuXG4gICAgICAgICAgaWYgKFwiZXJyb3JcIiBpbiBleHBvcnRlZERhdGEpIHtcbiAgICAgICAgICAgIGNvbnN0IGV4cG9ydGVkRXJyb3IgPSBleHBvcnRlZERhdGEuZXJyb3I7XG4gICAgICAgICAgICAoMCwgX3V0aWwud2FybikoYEVycm9yIGR1cmluZyBmb250IGxvYWRpbmc6ICR7ZXhwb3J0ZWRFcnJvcn1gKTtcbiAgICAgICAgICAgIHRoaXMuY29tbW9uT2Jqcy5yZXNvbHZlKGlkLCBleHBvcnRlZEVycm9yKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGxldCBmb250UmVnaXN0cnkgPSBudWxsO1xuXG4gICAgICAgICAgaWYgKHBhcmFtcy5wZGZCdWcgJiYgZ2xvYmFsVGhpcy5Gb250SW5zcGVjdG9yICYmIGdsb2JhbFRoaXMuRm9udEluc3BlY3Rvci5lbmFibGVkKSB7XG4gICAgICAgICAgICBmb250UmVnaXN0cnkgPSB7XG4gICAgICAgICAgICAgIHJlZ2lzdGVyRm9udChmb250LCB1cmwpIHtcbiAgICAgICAgICAgICAgICBnbG9iYWxUaGlzLkZvbnRJbnNwZWN0b3IuZm9udEFkZGVkKGZvbnQsIHVybCk7XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgfTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBjb25zdCBmb250ID0gbmV3IF9mb250X2xvYWRlci5Gb250RmFjZU9iamVjdChleHBvcnRlZERhdGEsIHtcbiAgICAgICAgICAgIGlzRXZhbFN1cHBvcnRlZDogcGFyYW1zLmlzRXZhbFN1cHBvcnRlZCxcbiAgICAgICAgICAgIGRpc2FibGVGb250RmFjZTogcGFyYW1zLmRpc2FibGVGb250RmFjZSxcbiAgICAgICAgICAgIGlnbm9yZUVycm9yczogcGFyYW1zLmlnbm9yZUVycm9ycyxcbiAgICAgICAgICAgIG9uVW5zdXBwb3J0ZWRGZWF0dXJlOiB0aGlzLl9vblVuc3VwcG9ydGVkRmVhdHVyZS5iaW5kKHRoaXMpLFxuICAgICAgICAgICAgZm9udFJlZ2lzdHJ5XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgdGhpcy5mb250TG9hZGVyLmJpbmQoZm9udCkuY2F0Y2gocmVhc29uID0+IHtcbiAgICAgICAgICAgIHJldHVybiBtZXNzYWdlSGFuZGxlci5zZW5kV2l0aFByb21pc2UoXCJGb250RmFsbGJhY2tcIiwge1xuICAgICAgICAgICAgICBpZFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfSkuZmluYWxseSgoKSA9PiB7XG4gICAgICAgICAgICBpZiAoIXBhcmFtcy5mb250RXh0cmFQcm9wZXJ0aWVzICYmIGZvbnQuZGF0YSkge1xuICAgICAgICAgICAgICBmb250LmRhdGEgPSBudWxsO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0aGlzLmNvbW1vbk9ianMucmVzb2x2ZShpZCwgZm9udCk7XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSBcIkZvbnRQYXRoXCI6XG4gICAgICAgIGNhc2UgXCJGb250VHlwZTNSZXNcIjpcbiAgICAgICAgY2FzZSBcIkltYWdlXCI6XG4gICAgICAgICAgdGhpcy5jb21tb25PYmpzLnJlc29sdmUoaWQsIGV4cG9ydGVkRGF0YSk7XG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEdvdCB1bmtub3duIGNvbW1vbiBvYmplY3QgdHlwZSAke3R5cGV9YCk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgbWVzc2FnZUhhbmRsZXIub24oXCJvYmpcIiwgZGF0YSA9PiB7XG4gICAgICBpZiAodGhpcy5kZXN0cm95ZWQpIHtcbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgIH1cblxuICAgICAgY29uc3QgW2lkLCBwYWdlSW5kZXgsIHR5cGUsIGltYWdlRGF0YV0gPSBkYXRhO1xuICAgICAgY29uc3QgcGFnZVByb3h5ID0gdGhpcy5wYWdlQ2FjaGVbcGFnZUluZGV4XTtcblxuICAgICAgaWYgKHBhZ2VQcm94eS5vYmpzLmhhcyhpZCkpIHtcbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgIH1cblxuICAgICAgc3dpdGNoICh0eXBlKSB7XG4gICAgICAgIGNhc2UgXCJJbWFnZVwiOlxuICAgICAgICAgIHBhZ2VQcm94eS5vYmpzLnJlc29sdmUoaWQsIGltYWdlRGF0YSk7XG4gICAgICAgICAgY29uc3QgTUFYX0lNQUdFX1NJWkVfVE9fU1RPUkUgPSA4MDAwMDAwO1xuXG4gICAgICAgICAgaWYgKGltYWdlRGF0YSAmJiBcImRhdGFcIiBpbiBpbWFnZURhdGEgJiYgaW1hZ2VEYXRhLmRhdGEubGVuZ3RoID4gTUFYX0lNQUdFX1NJWkVfVE9fU1RPUkUpIHtcbiAgICAgICAgICAgIHBhZ2VQcm94eS5jbGVhbnVwQWZ0ZXJSZW5kZXIgPSB0cnVlO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBHb3QgdW5rbm93biBvYmplY3QgdHlwZSAke3R5cGV9YCk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfSk7XG4gICAgbWVzc2FnZUhhbmRsZXIub24oXCJEb2NQcm9ncmVzc1wiLCBkYXRhID0+IHtcbiAgICAgIGlmICh0aGlzLmRlc3Ryb3llZCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGlmIChsb2FkaW5nVGFzay5vblByb2dyZXNzKSB7XG4gICAgICAgIGxvYWRpbmdUYXNrLm9uUHJvZ3Jlc3Moe1xuICAgICAgICAgIGxvYWRlZDogZGF0YS5sb2FkZWQsXG4gICAgICAgICAgdG90YWw6IGRhdGEudG90YWxcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgbWVzc2FnZUhhbmRsZXIub24oXCJVbnN1cHBvcnRlZEZlYXR1cmVcIiwgdGhpcy5fb25VbnN1cHBvcnRlZEZlYXR1cmUuYmluZCh0aGlzKSk7XG4gICAgbWVzc2FnZUhhbmRsZXIub24oXCJGZXRjaEJ1aWx0SW5DTWFwXCIsIChkYXRhLCBzaW5rKSA9PiB7XG4gICAgICBpZiAodGhpcy5kZXN0cm95ZWQpIHtcbiAgICAgICAgc2luay5lcnJvcihuZXcgRXJyb3IoXCJXb3JrZXIgd2FzIGRlc3Ryb3llZFwiKSk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgbGV0IGZldGNoZWQgPSBmYWxzZTtcblxuICAgICAgc2luay5vblB1bGwgPSAoKSA9PiB7XG4gICAgICAgIGlmIChmZXRjaGVkKSB7XG4gICAgICAgICAgc2luay5jbG9zZSgpO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGZldGNoZWQgPSB0cnVlO1xuICAgICAgICB0aGlzLkNNYXBSZWFkZXJGYWN0b3J5LmZldGNoKGRhdGEpLnRoZW4oZnVuY3Rpb24gKGJ1aWx0SW5DTWFwKSB7XG4gICAgICAgICAgc2luay5lbnF1ZXVlKGJ1aWx0SW5DTWFwLCAxLCBbYnVpbHRJbkNNYXAuY01hcERhdGEuYnVmZmVyXSk7XG4gICAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uIChyZWFzb24pIHtcbiAgICAgICAgICBzaW5rLmVycm9yKHJlYXNvbik7XG4gICAgICAgIH0pO1xuICAgICAgfTtcbiAgICB9KTtcbiAgfVxuXG4gIF9vblVuc3VwcG9ydGVkRmVhdHVyZSh7XG4gICAgZmVhdHVyZUlkXG4gIH0pIHtcbiAgICBpZiAodGhpcy5kZXN0cm95ZWQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5sb2FkaW5nVGFzay5vblVuc3VwcG9ydGVkRmVhdHVyZSkge1xuICAgICAgdGhpcy5sb2FkaW5nVGFzay5vblVuc3VwcG9ydGVkRmVhdHVyZShmZWF0dXJlSWQpO1xuICAgIH1cbiAgfVxuXG4gIGdldERhdGEoKSB7XG4gICAgcmV0dXJuIHRoaXMubWVzc2FnZUhhbmRsZXIuc2VuZFdpdGhQcm9taXNlKFwiR2V0RGF0YVwiLCBudWxsKTtcbiAgfVxuXG4gIGdldFBhZ2UocGFnZU51bWJlcikge1xuICAgIGlmICghTnVtYmVyLmlzSW50ZWdlcihwYWdlTnVtYmVyKSB8fCBwYWdlTnVtYmVyIDw9IDAgfHwgcGFnZU51bWJlciA+IHRoaXMuX251bVBhZ2VzKSB7XG4gICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QobmV3IEVycm9yKFwiSW52YWxpZCBwYWdlIHJlcXVlc3RcIikpO1xuICAgIH1cblxuICAgIGNvbnN0IHBhZ2VJbmRleCA9IHBhZ2VOdW1iZXIgLSAxO1xuXG4gICAgaWYgKHBhZ2VJbmRleCBpbiB0aGlzLnBhZ2VQcm9taXNlcykge1xuICAgICAgcmV0dXJuIHRoaXMucGFnZVByb21pc2VzW3BhZ2VJbmRleF07XG4gICAgfVxuXG4gICAgY29uc3QgcHJvbWlzZSA9IHRoaXMubWVzc2FnZUhhbmRsZXIuc2VuZFdpdGhQcm9taXNlKFwiR2V0UGFnZVwiLCB7XG4gICAgICBwYWdlSW5kZXhcbiAgICB9KS50aGVuKHBhZ2VJbmZvID0+IHtcbiAgICAgIGlmICh0aGlzLmRlc3Ryb3llZCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJUcmFuc3BvcnQgZGVzdHJveWVkXCIpO1xuICAgICAgfVxuXG4gICAgICBjb25zdCBwYWdlID0gbmV3IFBERlBhZ2VQcm94eShwYWdlSW5kZXgsIHBhZ2VJbmZvLCB0aGlzLCB0aGlzLl9wYXJhbXMucGRmQnVnKTtcbiAgICAgIHRoaXMucGFnZUNhY2hlW3BhZ2VJbmRleF0gPSBwYWdlO1xuICAgICAgcmV0dXJuIHBhZ2U7XG4gICAgfSk7XG4gICAgdGhpcy5wYWdlUHJvbWlzZXNbcGFnZUluZGV4XSA9IHByb21pc2U7XG4gICAgcmV0dXJuIHByb21pc2U7XG4gIH1cblxuICBnZXRQYWdlSW5kZXgocmVmKSB7XG4gICAgcmV0dXJuIHRoaXMubWVzc2FnZUhhbmRsZXIuc2VuZFdpdGhQcm9taXNlKFwiR2V0UGFnZUluZGV4XCIsIHtcbiAgICAgIHJlZlxuICAgIH0pLmNhdGNoKGZ1bmN0aW9uIChyZWFzb24pIHtcbiAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChuZXcgRXJyb3IocmVhc29uKSk7XG4gICAgfSk7XG4gIH1cblxuICBnZXRBbm5vdGF0aW9ucyhwYWdlSW5kZXgsIGludGVudCkge1xuICAgIHJldHVybiB0aGlzLm1lc3NhZ2VIYW5kbGVyLnNlbmRXaXRoUHJvbWlzZShcIkdldEFubm90YXRpb25zXCIsIHtcbiAgICAgIHBhZ2VJbmRleCxcbiAgICAgIGludGVudFxuICAgIH0pO1xuICB9XG5cbiAgZ2V0RGVzdGluYXRpb25zKCkge1xuICAgIHJldHVybiB0aGlzLm1lc3NhZ2VIYW5kbGVyLnNlbmRXaXRoUHJvbWlzZShcIkdldERlc3RpbmF0aW9uc1wiLCBudWxsKTtcbiAgfVxuXG4gIGdldERlc3RpbmF0aW9uKGlkKSB7XG4gICAgaWYgKHR5cGVvZiBpZCAhPT0gXCJzdHJpbmdcIikge1xuICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KG5ldyBFcnJvcihcIkludmFsaWQgZGVzdGluYXRpb24gcmVxdWVzdC5cIikpO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLm1lc3NhZ2VIYW5kbGVyLnNlbmRXaXRoUHJvbWlzZShcIkdldERlc3RpbmF0aW9uXCIsIHtcbiAgICAgIGlkXG4gICAgfSk7XG4gIH1cblxuICBnZXRQYWdlTGFiZWxzKCkge1xuICAgIHJldHVybiB0aGlzLm1lc3NhZ2VIYW5kbGVyLnNlbmRXaXRoUHJvbWlzZShcIkdldFBhZ2VMYWJlbHNcIiwgbnVsbCk7XG4gIH1cblxuICBnZXRQYWdlTGF5b3V0KCkge1xuICAgIHJldHVybiB0aGlzLm1lc3NhZ2VIYW5kbGVyLnNlbmRXaXRoUHJvbWlzZShcIkdldFBhZ2VMYXlvdXRcIiwgbnVsbCk7XG4gIH1cblxuICBnZXRQYWdlTW9kZSgpIHtcbiAgICByZXR1cm4gdGhpcy5tZXNzYWdlSGFuZGxlci5zZW5kV2l0aFByb21pc2UoXCJHZXRQYWdlTW9kZVwiLCBudWxsKTtcbiAgfVxuXG4gIGdldFZpZXdlclByZWZlcmVuY2VzKCkge1xuICAgIHJldHVybiB0aGlzLm1lc3NhZ2VIYW5kbGVyLnNlbmRXaXRoUHJvbWlzZShcIkdldFZpZXdlclByZWZlcmVuY2VzXCIsIG51bGwpO1xuICB9XG5cbiAgZ2V0T3BlbkFjdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5tZXNzYWdlSGFuZGxlci5zZW5kV2l0aFByb21pc2UoXCJHZXRPcGVuQWN0aW9uXCIsIG51bGwpO1xuICB9XG5cbiAgZ2V0QXR0YWNobWVudHMoKSB7XG4gICAgcmV0dXJuIHRoaXMubWVzc2FnZUhhbmRsZXIuc2VuZFdpdGhQcm9taXNlKFwiR2V0QXR0YWNobWVudHNcIiwgbnVsbCk7XG4gIH1cblxuICBnZXRKYXZhU2NyaXB0KCkge1xuICAgIHJldHVybiB0aGlzLm1lc3NhZ2VIYW5kbGVyLnNlbmRXaXRoUHJvbWlzZShcIkdldEphdmFTY3JpcHRcIiwgbnVsbCk7XG4gIH1cblxuICBnZXRPdXRsaW5lKCkge1xuICAgIHJldHVybiB0aGlzLm1lc3NhZ2VIYW5kbGVyLnNlbmRXaXRoUHJvbWlzZShcIkdldE91dGxpbmVcIiwgbnVsbCk7XG4gIH1cblxuICBnZXRQZXJtaXNzaW9ucygpIHtcbiAgICByZXR1cm4gdGhpcy5tZXNzYWdlSGFuZGxlci5zZW5kV2l0aFByb21pc2UoXCJHZXRQZXJtaXNzaW9uc1wiLCBudWxsKTtcbiAgfVxuXG4gIGdldE1ldGFkYXRhKCkge1xuICAgIHJldHVybiB0aGlzLm1lc3NhZ2VIYW5kbGVyLnNlbmRXaXRoUHJvbWlzZShcIkdldE1ldGFkYXRhXCIsIG51bGwpLnRoZW4ocmVzdWx0cyA9PiB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBpbmZvOiByZXN1bHRzWzBdLFxuICAgICAgICBtZXRhZGF0YTogcmVzdWx0c1sxXSA/IG5ldyBfbWV0YWRhdGEuTWV0YWRhdGEocmVzdWx0c1sxXSkgOiBudWxsLFxuICAgICAgICBjb250ZW50RGlzcG9zaXRpb25GaWxlbmFtZTogdGhpcy5fZnVsbFJlYWRlciA/IHRoaXMuX2Z1bGxSZWFkZXIuZmlsZW5hbWUgOiBudWxsXG4gICAgICB9O1xuICAgIH0pO1xuICB9XG5cbiAgZ2V0U3RhdHMoKSB7XG4gICAgcmV0dXJuIHRoaXMubWVzc2FnZUhhbmRsZXIuc2VuZFdpdGhQcm9taXNlKFwiR2V0U3RhdHNcIiwgbnVsbCk7XG4gIH1cblxuICBzdGFydENsZWFudXAoKSB7XG4gICAgcmV0dXJuIHRoaXMubWVzc2FnZUhhbmRsZXIuc2VuZFdpdGhQcm9taXNlKFwiQ2xlYW51cFwiLCBudWxsKS50aGVuKCgpID0+IHtcbiAgICAgIGZvciAobGV0IGkgPSAwLCBpaSA9IHRoaXMucGFnZUNhY2hlLmxlbmd0aDsgaSA8IGlpOyBpKyspIHtcbiAgICAgICAgY29uc3QgcGFnZSA9IHRoaXMucGFnZUNhY2hlW2ldO1xuXG4gICAgICAgIGlmIChwYWdlKSB7XG4gICAgICAgICAgY29uc3QgY2xlYW51cFN1Y2Nlc3NmdWwgPSBwYWdlLmNsZWFudXAoKTtcblxuICAgICAgICAgIGlmICghY2xlYW51cFN1Y2Nlc3NmdWwpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgc3RhcnRDbGVhbnVwOiBQYWdlICR7aSArIDF9IGlzIGN1cnJlbnRseSByZW5kZXJpbmcuYCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHRoaXMuY29tbW9uT2Jqcy5jbGVhcigpO1xuICAgICAgdGhpcy5mb250TG9hZGVyLmNsZWFyKCk7XG4gICAgfSk7XG4gIH1cblxuICBnZXQgbG9hZGluZ1BhcmFtcygpIHtcbiAgICBjb25zdCBwYXJhbXMgPSB0aGlzLl9wYXJhbXM7XG4gICAgcmV0dXJuICgwLCBfdXRpbC5zaGFkb3cpKHRoaXMsIFwibG9hZGluZ1BhcmFtc1wiLCB7XG4gICAgICBkaXNhYmxlQXV0b0ZldGNoOiBwYXJhbXMuZGlzYWJsZUF1dG9GZXRjaCxcbiAgICAgIGRpc2FibGVGb250RmFjZTogcGFyYW1zLmRpc2FibGVGb250RmFjZVxuICAgIH0pO1xuICB9XG5cbn1cblxuY2xhc3MgUERGT2JqZWN0cyB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMuX29ianMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICB9XG5cbiAgX2Vuc3VyZU9iaihvYmpJZCkge1xuICAgIGlmICh0aGlzLl9vYmpzW29iaklkXSkge1xuICAgICAgcmV0dXJuIHRoaXMuX29ianNbb2JqSWRdO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLl9vYmpzW29iaklkXSA9IHtcbiAgICAgIGNhcGFiaWxpdHk6ICgwLCBfdXRpbC5jcmVhdGVQcm9taXNlQ2FwYWJpbGl0eSkoKSxcbiAgICAgIGRhdGE6IG51bGwsXG4gICAgICByZXNvbHZlZDogZmFsc2VcbiAgICB9O1xuICB9XG5cbiAgZ2V0KG9iaklkLCBjYWxsYmFjayA9IG51bGwpIHtcbiAgICBpZiAoY2FsbGJhY2spIHtcbiAgICAgIHRoaXMuX2Vuc3VyZU9iaihvYmpJZCkuY2FwYWJpbGl0eS5wcm9taXNlLnRoZW4oY2FsbGJhY2spO1xuXG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICBjb25zdCBvYmogPSB0aGlzLl9vYmpzW29iaklkXTtcblxuICAgIGlmICghb2JqIHx8ICFvYmoucmVzb2x2ZWQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgUmVxdWVzdGluZyBvYmplY3QgdGhhdCBpc24ndCByZXNvbHZlZCB5ZXQgJHtvYmpJZH0uYCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIG9iai5kYXRhO1xuICB9XG5cbiAgaGFzKG9iaklkKSB7XG4gICAgY29uc3Qgb2JqID0gdGhpcy5fb2Jqc1tvYmpJZF07XG4gICAgcmV0dXJuIG9iaiA/IG9iai5yZXNvbHZlZCA6IGZhbHNlO1xuICB9XG5cbiAgcmVzb2x2ZShvYmpJZCwgZGF0YSkge1xuICAgIGNvbnN0IG9iaiA9IHRoaXMuX2Vuc3VyZU9iaihvYmpJZCk7XG5cbiAgICBvYmoucmVzb2x2ZWQgPSB0cnVlO1xuICAgIG9iai5kYXRhID0gZGF0YTtcbiAgICBvYmouY2FwYWJpbGl0eS5yZXNvbHZlKGRhdGEpO1xuICB9XG5cbiAgY2xlYXIoKSB7XG4gICAgdGhpcy5fb2JqcyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gIH1cblxufVxuXG5jbGFzcyBSZW5kZXJUYXNrIHtcbiAgY29uc3RydWN0b3IoaW50ZXJuYWxSZW5kZXJUYXNrKSB7XG4gICAgdGhpcy5faW50ZXJuYWxSZW5kZXJUYXNrID0gaW50ZXJuYWxSZW5kZXJUYXNrO1xuICAgIHRoaXMub25Db250aW51ZSA9IG51bGw7XG4gIH1cblxuICBnZXQgcHJvbWlzZSgpIHtcbiAgICByZXR1cm4gdGhpcy5faW50ZXJuYWxSZW5kZXJUYXNrLmNhcGFiaWxpdHkucHJvbWlzZTtcbiAgfVxuXG4gIGNhbmNlbCgpIHtcbiAgICB0aGlzLl9pbnRlcm5hbFJlbmRlclRhc2suY2FuY2VsKCk7XG4gIH1cblxufVxuXG5jb25zdCBJbnRlcm5hbFJlbmRlclRhc2sgPSBmdW5jdGlvbiBJbnRlcm5hbFJlbmRlclRhc2tDbG9zdXJlKCkge1xuICBjb25zdCBjYW52YXNJblJlbmRlcmluZyA9IG5ldyBXZWFrU2V0KCk7XG5cbiAgY2xhc3MgSW50ZXJuYWxSZW5kZXJUYXNrIHtcbiAgICBjb25zdHJ1Y3Rvcih7XG4gICAgICBjYWxsYmFjayxcbiAgICAgIHBhcmFtcyxcbiAgICAgIG9ianMsXG4gICAgICBjb21tb25PYmpzLFxuICAgICAgb3BlcmF0b3JMaXN0LFxuICAgICAgcGFnZUluZGV4LFxuICAgICAgY2FudmFzRmFjdG9yeSxcbiAgICAgIHdlYkdMQ29udGV4dCxcbiAgICAgIHVzZVJlcXVlc3RBbmltYXRpb25GcmFtZSA9IGZhbHNlLFxuICAgICAgcGRmQnVnID0gZmFsc2VcbiAgICB9KSB7XG4gICAgICB0aGlzLmNhbGxiYWNrID0gY2FsbGJhY2s7XG4gICAgICB0aGlzLnBhcmFtcyA9IHBhcmFtcztcbiAgICAgIHRoaXMub2JqcyA9IG9ianM7XG4gICAgICB0aGlzLmNvbW1vbk9ianMgPSBjb21tb25PYmpzO1xuICAgICAgdGhpcy5vcGVyYXRvckxpc3RJZHggPSBudWxsO1xuICAgICAgdGhpcy5vcGVyYXRvckxpc3QgPSBvcGVyYXRvckxpc3Q7XG4gICAgICB0aGlzLl9wYWdlSW5kZXggPSBwYWdlSW5kZXg7XG4gICAgICB0aGlzLmNhbnZhc0ZhY3RvcnkgPSBjYW52YXNGYWN0b3J5O1xuICAgICAgdGhpcy53ZWJHTENvbnRleHQgPSB3ZWJHTENvbnRleHQ7XG4gICAgICB0aGlzLl9wZGZCdWcgPSBwZGZCdWc7XG4gICAgICB0aGlzLnJ1bm5pbmcgPSBmYWxzZTtcbiAgICAgIHRoaXMuZ3JhcGhpY3NSZWFkeUNhbGxiYWNrID0gbnVsbDtcbiAgICAgIHRoaXMuZ3JhcGhpY3NSZWFkeSA9IGZhbHNlO1xuICAgICAgdGhpcy5fdXNlUmVxdWVzdEFuaW1hdGlvbkZyYW1lID0gdXNlUmVxdWVzdEFuaW1hdGlvbkZyYW1lID09PSB0cnVlICYmIHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCI7XG4gICAgICB0aGlzLmNhbmNlbGxlZCA9IGZhbHNlO1xuICAgICAgdGhpcy5jYXBhYmlsaXR5ID0gKDAsIF91dGlsLmNyZWF0ZVByb21pc2VDYXBhYmlsaXR5KSgpO1xuICAgICAgdGhpcy50YXNrID0gbmV3IFJlbmRlclRhc2sodGhpcyk7XG4gICAgICB0aGlzLl9jb250aW51ZUJvdW5kID0gdGhpcy5fY29udGludWUuYmluZCh0aGlzKTtcbiAgICAgIHRoaXMuX3NjaGVkdWxlTmV4dEJvdW5kID0gdGhpcy5fc2NoZWR1bGVOZXh0LmJpbmQodGhpcyk7XG4gICAgICB0aGlzLl9uZXh0Qm91bmQgPSB0aGlzLl9uZXh0LmJpbmQodGhpcyk7XG4gICAgICB0aGlzLl9jYW52YXMgPSBwYXJhbXMuY2FudmFzQ29udGV4dC5jYW52YXM7XG4gICAgfVxuXG4gICAgaW5pdGlhbGl6ZUdyYXBoaWNzKHRyYW5zcGFyZW5jeSA9IGZhbHNlKSB7XG4gICAgICBpZiAodGhpcy5jYW5jZWxsZWQpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5fY2FudmFzKSB7XG4gICAgICAgIGlmIChjYW52YXNJblJlbmRlcmluZy5oYXModGhpcy5fY2FudmFzKSkge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkNhbm5vdCB1c2UgdGhlIHNhbWUgY2FudmFzIGR1cmluZyBtdWx0aXBsZSByZW5kZXIoKSBvcGVyYXRpb25zLiBcIiArIFwiVXNlIGRpZmZlcmVudCBjYW52YXMgb3IgZW5zdXJlIHByZXZpb3VzIG9wZXJhdGlvbnMgd2VyZSBcIiArIFwiY2FuY2VsbGVkIG9yIGNvbXBsZXRlZC5cIik7XG4gICAgICAgIH1cblxuICAgICAgICBjYW52YXNJblJlbmRlcmluZy5hZGQodGhpcy5fY2FudmFzKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMuX3BkZkJ1ZyAmJiBnbG9iYWxUaGlzLlN0ZXBwZXJNYW5hZ2VyICYmIGdsb2JhbFRoaXMuU3RlcHBlck1hbmFnZXIuZW5hYmxlZCkge1xuICAgICAgICB0aGlzLnN0ZXBwZXIgPSBnbG9iYWxUaGlzLlN0ZXBwZXJNYW5hZ2VyLmNyZWF0ZSh0aGlzLl9wYWdlSW5kZXgpO1xuICAgICAgICB0aGlzLnN0ZXBwZXIuaW5pdCh0aGlzLm9wZXJhdG9yTGlzdCk7XG4gICAgICAgIHRoaXMuc3RlcHBlci5uZXh0QnJlYWtQb2ludCA9IHRoaXMuc3RlcHBlci5nZXROZXh0QnJlYWtQb2ludCgpO1xuICAgICAgfVxuXG4gICAgICBjb25zdCB7XG4gICAgICAgIGNhbnZhc0NvbnRleHQsXG4gICAgICAgIHZpZXdwb3J0LFxuICAgICAgICB0cmFuc2Zvcm0sXG4gICAgICAgIGltYWdlTGF5ZXIsXG4gICAgICAgIGJhY2tncm91bmRcbiAgICAgIH0gPSB0aGlzLnBhcmFtcztcbiAgICAgIHRoaXMuZ2Z4ID0gbmV3IF9jYW52YXMuQ2FudmFzR3JhcGhpY3MoY2FudmFzQ29udGV4dCwgdGhpcy5jb21tb25PYmpzLCB0aGlzLm9ianMsIHRoaXMuY2FudmFzRmFjdG9yeSwgdGhpcy53ZWJHTENvbnRleHQsIGltYWdlTGF5ZXIpO1xuICAgICAgdGhpcy5nZnguYmVnaW5EcmF3aW5nKHtcbiAgICAgICAgdHJhbnNmb3JtLFxuICAgICAgICB2aWV3cG9ydCxcbiAgICAgICAgdHJhbnNwYXJlbmN5LFxuICAgICAgICBiYWNrZ3JvdW5kXG4gICAgICB9KTtcbiAgICAgIHRoaXMub3BlcmF0b3JMaXN0SWR4ID0gMDtcbiAgICAgIHRoaXMuZ3JhcGhpY3NSZWFkeSA9IHRydWU7XG5cbiAgICAgIGlmICh0aGlzLmdyYXBoaWNzUmVhZHlDYWxsYmFjaykge1xuICAgICAgICB0aGlzLmdyYXBoaWNzUmVhZHlDYWxsYmFjaygpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGNhbmNlbChlcnJvciA9IG51bGwpIHtcbiAgICAgIHRoaXMucnVubmluZyA9IGZhbHNlO1xuICAgICAgdGhpcy5jYW5jZWxsZWQgPSB0cnVlO1xuXG4gICAgICBpZiAodGhpcy5nZngpIHtcbiAgICAgICAgdGhpcy5nZnguZW5kRHJhd2luZygpO1xuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5fY2FudmFzKSB7XG4gICAgICAgIGNhbnZhc0luUmVuZGVyaW5nLmRlbGV0ZSh0aGlzLl9jYW52YXMpO1xuICAgICAgfVxuXG4gICAgICB0aGlzLmNhbGxiYWNrKGVycm9yIHx8IG5ldyBfZGlzcGxheV91dGlscy5SZW5kZXJpbmdDYW5jZWxsZWRFeGNlcHRpb24oYFJlbmRlcmluZyBjYW5jZWxsZWQsIHBhZ2UgJHt0aGlzLl9wYWdlSW5kZXggKyAxfWAsIFwiY2FudmFzXCIpKTtcbiAgICB9XG5cbiAgICBvcGVyYXRvckxpc3RDaGFuZ2VkKCkge1xuICAgICAgaWYgKCF0aGlzLmdyYXBoaWNzUmVhZHkpIHtcbiAgICAgICAgaWYgKCF0aGlzLmdyYXBoaWNzUmVhZHlDYWxsYmFjaykge1xuICAgICAgICAgIHRoaXMuZ3JhcGhpY3NSZWFkeUNhbGxiYWNrID0gdGhpcy5fY29udGludWVCb3VuZDtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMuc3RlcHBlcikge1xuICAgICAgICB0aGlzLnN0ZXBwZXIudXBkYXRlT3BlcmF0b3JMaXN0KHRoaXMub3BlcmF0b3JMaXN0KTtcbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMucnVubmluZykge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHRoaXMuX2NvbnRpbnVlKCk7XG4gICAgfVxuXG4gICAgX2NvbnRpbnVlKCkge1xuICAgICAgdGhpcy5ydW5uaW5nID0gdHJ1ZTtcblxuICAgICAgaWYgKHRoaXMuY2FuY2VsbGVkKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMudGFzay5vbkNvbnRpbnVlKSB7XG4gICAgICAgIHRoaXMudGFzay5vbkNvbnRpbnVlKHRoaXMuX3NjaGVkdWxlTmV4dEJvdW5kKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuX3NjaGVkdWxlTmV4dCgpO1xuICAgICAgfVxuICAgIH1cblxuICAgIF9zY2hlZHVsZU5leHQoKSB7XG4gICAgICBpZiAodGhpcy5fdXNlUmVxdWVzdEFuaW1hdGlvbkZyYW1lKSB7XG4gICAgICAgIHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKCkgPT4ge1xuICAgICAgICAgIHRoaXMuX25leHRCb3VuZCgpLmNhdGNoKHRoaXMuY2FuY2VsLmJpbmQodGhpcykpO1xuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIFByb21pc2UucmVzb2x2ZSgpLnRoZW4odGhpcy5fbmV4dEJvdW5kKS5jYXRjaCh0aGlzLmNhbmNlbC5iaW5kKHRoaXMpKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBhc3luYyBfbmV4dCgpIHtcbiAgICAgIGlmICh0aGlzLmNhbmNlbGxlZCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHRoaXMub3BlcmF0b3JMaXN0SWR4ID0gdGhpcy5nZnguZXhlY3V0ZU9wZXJhdG9yTGlzdCh0aGlzLm9wZXJhdG9yTGlzdCwgdGhpcy5vcGVyYXRvckxpc3RJZHgsIHRoaXMuX2NvbnRpbnVlQm91bmQsIHRoaXMuc3RlcHBlcik7XG5cbiAgICAgIGlmICh0aGlzLm9wZXJhdG9yTGlzdElkeCA9PT0gdGhpcy5vcGVyYXRvckxpc3QuYXJnc0FycmF5Lmxlbmd0aCkge1xuICAgICAgICB0aGlzLnJ1bm5pbmcgPSBmYWxzZTtcblxuICAgICAgICBpZiAodGhpcy5vcGVyYXRvckxpc3QubGFzdENodW5rKSB7XG4gICAgICAgICAgdGhpcy5nZnguZW5kRHJhd2luZygpO1xuXG4gICAgICAgICAgaWYgKHRoaXMuX2NhbnZhcykge1xuICAgICAgICAgICAgY2FudmFzSW5SZW5kZXJpbmcuZGVsZXRlKHRoaXMuX2NhbnZhcyk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdGhpcy5jYWxsYmFjaygpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gIH1cblxuICByZXR1cm4gSW50ZXJuYWxSZW5kZXJUYXNrO1xufSgpO1xuXG5jb25zdCB2ZXJzaW9uID0gJzIuNS4yMDcnO1xuZXhwb3J0cy52ZXJzaW9uID0gdmVyc2lvbjtcbmNvbnN0IGJ1aWxkID0gJzA5NzRkNjA1JztcbmV4cG9ydHMuYnVpbGQgPSBidWlsZDtcblxuLyoqKi8gfSksXG4vKiA2ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dfcGRmanNfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLkZvbnRMb2FkZXIgPSBleHBvcnRzLkZvbnRGYWNlT2JqZWN0ID0gdm9pZCAwO1xuXG52YXIgX3V0aWwgPSBfX3dfcGRmanNfcmVxdWlyZV9fKDIpO1xuXG5jbGFzcyBCYXNlRm9udExvYWRlciB7XG4gIGNvbnN0cnVjdG9yKHtcbiAgICBkb2NJZCxcbiAgICBvblVuc3VwcG9ydGVkRmVhdHVyZVxuICB9KSB7XG4gICAgaWYgKHRoaXMuY29uc3RydWN0b3IgPT09IEJhc2VGb250TG9hZGVyKSB7XG4gICAgICAoMCwgX3V0aWwudW5yZWFjaGFibGUpKFwiQ2Fubm90IGluaXRpYWxpemUgQmFzZUZvbnRMb2FkZXIuXCIpO1xuICAgIH1cblxuICAgIHRoaXMuZG9jSWQgPSBkb2NJZDtcbiAgICB0aGlzLl9vblVuc3VwcG9ydGVkRmVhdHVyZSA9IG9uVW5zdXBwb3J0ZWRGZWF0dXJlO1xuICAgIHRoaXMubmF0aXZlRm9udEZhY2VzID0gW107XG4gICAgdGhpcy5zdHlsZUVsZW1lbnQgPSBudWxsO1xuICB9XG5cbiAgYWRkTmF0aXZlRm9udEZhY2UobmF0aXZlRm9udEZhY2UpIHtcbiAgICB0aGlzLm5hdGl2ZUZvbnRGYWNlcy5wdXNoKG5hdGl2ZUZvbnRGYWNlKTtcbiAgICBkb2N1bWVudC5mb250cy5hZGQobmF0aXZlRm9udEZhY2UpO1xuICB9XG5cbiAgaW5zZXJ0UnVsZShydWxlKSB7XG4gICAgbGV0IHN0eWxlRWxlbWVudCA9IHRoaXMuc3R5bGVFbGVtZW50O1xuXG4gICAgaWYgKCFzdHlsZUVsZW1lbnQpIHtcbiAgICAgIHN0eWxlRWxlbWVudCA9IHRoaXMuc3R5bGVFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInN0eWxlXCIpO1xuICAgICAgc3R5bGVFbGVtZW50LmlkID0gYFBERkpTX0ZPTlRfU1RZTEVfVEFHXyR7dGhpcy5kb2NJZH1gO1xuICAgICAgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKFwiaGVhZFwiKVswXS5hcHBlbmRDaGlsZChzdHlsZUVsZW1lbnQpO1xuICAgIH1cblxuICAgIGNvbnN0IHN0eWxlU2hlZXQgPSBzdHlsZUVsZW1lbnQuc2hlZXQ7XG4gICAgc3R5bGVTaGVldC5pbnNlcnRSdWxlKHJ1bGUsIHN0eWxlU2hlZXQuY3NzUnVsZXMubGVuZ3RoKTtcbiAgfVxuXG4gIGNsZWFyKCkge1xuICAgIHRoaXMubmF0aXZlRm9udEZhY2VzLmZvckVhY2goZnVuY3Rpb24gKG5hdGl2ZUZvbnRGYWNlKSB7XG4gICAgICBkb2N1bWVudC5mb250cy5kZWxldGUobmF0aXZlRm9udEZhY2UpO1xuICAgIH0pO1xuICAgIHRoaXMubmF0aXZlRm9udEZhY2VzLmxlbmd0aCA9IDA7XG5cbiAgICBpZiAodGhpcy5zdHlsZUVsZW1lbnQpIHtcbiAgICAgIHRoaXMuc3R5bGVFbGVtZW50LnJlbW92ZSgpO1xuICAgICAgdGhpcy5zdHlsZUVsZW1lbnQgPSBudWxsO1xuICAgIH1cbiAgfVxuXG4gIGFzeW5jIGJpbmQoZm9udCkge1xuICAgIGlmIChmb250LmF0dGFjaGVkIHx8IGZvbnQubWlzc2luZ0ZpbGUpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBmb250LmF0dGFjaGVkID0gdHJ1ZTtcblxuICAgIGlmICh0aGlzLmlzRm9udExvYWRpbmdBUElTdXBwb3J0ZWQpIHtcbiAgICAgIGNvbnN0IG5hdGl2ZUZvbnRGYWNlID0gZm9udC5jcmVhdGVOYXRpdmVGb250RmFjZSgpO1xuXG4gICAgICBpZiAobmF0aXZlRm9udEZhY2UpIHtcbiAgICAgICAgdGhpcy5hZGROYXRpdmVGb250RmFjZShuYXRpdmVGb250RmFjZSk7XG5cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBhd2FpdCBuYXRpdmVGb250RmFjZS5sb2FkZWQ7XG4gICAgICAgIH0gY2F0Y2ggKGV4KSB7XG4gICAgICAgICAgdGhpcy5fb25VbnN1cHBvcnRlZEZlYXR1cmUoe1xuICAgICAgICAgICAgZmVhdHVyZUlkOiBfdXRpbC5VTlNVUFBPUlRFRF9GRUFUVVJFUy5lcnJvckZvbnRMb2FkTmF0aXZlXG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgICAoMCwgX3V0aWwud2FybikoYEZhaWxlZCB0byBsb2FkIGZvbnQgJyR7bmF0aXZlRm9udEZhY2UuZmFtaWx5fSc6ICcke2V4fScuYCk7XG4gICAgICAgICAgZm9udC5kaXNhYmxlRm9udEZhY2UgPSB0cnVlO1xuICAgICAgICAgIHRocm93IGV4O1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjb25zdCBydWxlID0gZm9udC5jcmVhdGVGb250RmFjZVJ1bGUoKTtcblxuICAgIGlmIChydWxlKSB7XG4gICAgICB0aGlzLmluc2VydFJ1bGUocnVsZSk7XG5cbiAgICAgIGlmICh0aGlzLmlzU3luY0ZvbnRMb2FkaW5nU3VwcG9ydGVkKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgYXdhaXQgbmV3IFByb21pc2UocmVzb2x2ZSA9PiB7XG4gICAgICAgIGNvbnN0IHJlcXVlc3QgPSB0aGlzLl9xdWV1ZUxvYWRpbmdDYWxsYmFjayhyZXNvbHZlKTtcblxuICAgICAgICB0aGlzLl9wcmVwYXJlRm9udExvYWRFdmVudChbcnVsZV0sIFtmb250XSwgcmVxdWVzdCk7XG4gICAgICB9KTtcbiAgICB9XG4gIH1cblxuICBfcXVldWVMb2FkaW5nQ2FsbGJhY2soY2FsbGJhY2spIHtcbiAgICAoMCwgX3V0aWwudW5yZWFjaGFibGUpKFwiQWJzdHJhY3QgbWV0aG9kIGBfcXVldWVMb2FkaW5nQ2FsbGJhY2tgLlwiKTtcbiAgfVxuXG4gIGdldCBpc0ZvbnRMb2FkaW5nQVBJU3VwcG9ydGVkKCkge1xuICAgIGNvbnN0IHN1cHBvcnRlZCA9IHR5cGVvZiBkb2N1bWVudCAhPT0gXCJ1bmRlZmluZWRcIiAmJiAhIWRvY3VtZW50LmZvbnRzO1xuICAgIHJldHVybiAoMCwgX3V0aWwuc2hhZG93KSh0aGlzLCBcImlzRm9udExvYWRpbmdBUElTdXBwb3J0ZWRcIiwgc3VwcG9ydGVkKTtcbiAgfVxuXG4gIGdldCBpc1N5bmNGb250TG9hZGluZ1N1cHBvcnRlZCgpIHtcbiAgICAoMCwgX3V0aWwudW5yZWFjaGFibGUpKFwiQWJzdHJhY3QgbWV0aG9kIGBpc1N5bmNGb250TG9hZGluZ1N1cHBvcnRlZGAuXCIpO1xuICB9XG5cbiAgZ2V0IF9sb2FkVGVzdEZvbnQoKSB7XG4gICAgKDAsIF91dGlsLnVucmVhY2hhYmxlKShcIkFic3RyYWN0IG1ldGhvZCBgX2xvYWRUZXN0Rm9udGAuXCIpO1xuICB9XG5cbiAgX3ByZXBhcmVGb250TG9hZEV2ZW50KHJ1bGVzLCBmb250c1RvTG9hZCwgcmVxdWVzdCkge1xuICAgICgwLCBfdXRpbC51bnJlYWNoYWJsZSkoXCJBYnN0cmFjdCBtZXRob2QgYF9wcmVwYXJlRm9udExvYWRFdmVudGAuXCIpO1xuICB9XG5cbn1cblxubGV0IEZvbnRMb2FkZXI7XG5leHBvcnRzLkZvbnRMb2FkZXIgPSBGb250TG9hZGVyO1xue1xuICBleHBvcnRzLkZvbnRMb2FkZXIgPSBGb250TG9hZGVyID0gY2xhc3MgR2VuZXJpY0ZvbnRMb2FkZXIgZXh0ZW5kcyBCYXNlRm9udExvYWRlciB7XG4gICAgY29uc3RydWN0b3IoZG9jSWQpIHtcbiAgICAgIHN1cGVyKGRvY0lkKTtcbiAgICAgIHRoaXMubG9hZGluZ0NvbnRleHQgPSB7XG4gICAgICAgIHJlcXVlc3RzOiBbXSxcbiAgICAgICAgbmV4dFJlcXVlc3RJZDogMFxuICAgICAgfTtcbiAgICAgIHRoaXMubG9hZFRlc3RGb250SWQgPSAwO1xuICAgIH1cblxuICAgIGdldCBpc1N5bmNGb250TG9hZGluZ1N1cHBvcnRlZCgpIHtcbiAgICAgIGxldCBzdXBwb3J0ZWQgPSBmYWxzZTtcblxuICAgICAgaWYgKHR5cGVvZiBuYXZpZ2F0b3IgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgc3VwcG9ydGVkID0gdHJ1ZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnN0IG0gPSAvTW96aWxsYVxcLzUuMC4qP3J2OihcXGQrKS4qPyBHZWNrby8uZXhlYyhuYXZpZ2F0b3IudXNlckFnZW50KTtcblxuICAgICAgICBpZiAobSAmJiBtWzFdID49IDE0KSB7XG4gICAgICAgICAgc3VwcG9ydGVkID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gKDAsIF91dGlsLnNoYWRvdykodGhpcywgXCJpc1N5bmNGb250TG9hZGluZ1N1cHBvcnRlZFwiLCBzdXBwb3J0ZWQpO1xuICAgIH1cblxuICAgIF9xdWV1ZUxvYWRpbmdDYWxsYmFjayhjYWxsYmFjaykge1xuICAgICAgZnVuY3Rpb24gY29tcGxldGVSZXF1ZXN0KCkge1xuICAgICAgICAoMCwgX3V0aWwuYXNzZXJ0KSghcmVxdWVzdC5kb25lLCBcImNvbXBsZXRlUmVxdWVzdCgpIGNhbm5vdCBiZSBjYWxsZWQgdHdpY2UuXCIpO1xuICAgICAgICByZXF1ZXN0LmRvbmUgPSB0cnVlO1xuXG4gICAgICAgIHdoaWxlIChjb250ZXh0LnJlcXVlc3RzLmxlbmd0aCA+IDAgJiYgY29udGV4dC5yZXF1ZXN0c1swXS5kb25lKSB7XG4gICAgICAgICAgY29uc3Qgb3RoZXJSZXF1ZXN0ID0gY29udGV4dC5yZXF1ZXN0cy5zaGlmdCgpO1xuICAgICAgICAgIHNldFRpbWVvdXQob3RoZXJSZXF1ZXN0LmNhbGxiYWNrLCAwKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBjb25zdCBjb250ZXh0ID0gdGhpcy5sb2FkaW5nQ29udGV4dDtcbiAgICAgIGNvbnN0IHJlcXVlc3QgPSB7XG4gICAgICAgIGlkOiBgcGRmanMtZm9udC1sb2FkaW5nLSR7Y29udGV4dC5uZXh0UmVxdWVzdElkKyt9YCxcbiAgICAgICAgZG9uZTogZmFsc2UsXG4gICAgICAgIGNvbXBsZXRlOiBjb21wbGV0ZVJlcXVlc3QsXG4gICAgICAgIGNhbGxiYWNrXG4gICAgICB9O1xuICAgICAgY29udGV4dC5yZXF1ZXN0cy5wdXNoKHJlcXVlc3QpO1xuICAgICAgcmV0dXJuIHJlcXVlc3Q7XG4gICAgfVxuXG4gICAgZ2V0IF9sb2FkVGVzdEZvbnQoKSB7XG4gICAgICBjb25zdCBnZXRMb2FkVGVzdEZvbnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBhdG9iKFwiVDFSVVR3QUxBSUFBQXdBd1EwWkdJREh0Wmc0QUFBT1lBQUFBZ1VaR1ZFMWxrelp3QUFBRUhBQUFBQnhIUkVWR0FCUUFcIiArIFwiRlFBQUJEZ0FBQUFlVDFNdk1sWU5Zd2tBQUFFZ0FBQUFZR050WVhBQkRRTFVBQUFDTkFBQUFVSm9aV0ZrL3hWRkRRQUFcIiArIFwiQUx3QUFBQTJhR2hsWVFka0Erb0FBQUQwQUFBQUpHaHRkSGdENkFBQUFBQUVXQUFBQUFadFlYaHdBQUpRQUFBQUFSZ0FcIiArIFwiQUFBR2JtRnRaVmptZEg0QUFBR0FBQUFBc1hCdmMzVC9oZ0F6QUFBRGVBQUFBQ0FBQVFBQUFBRUFBTFpSRnNSZkR6ejFcIiArIFwiQUFzRDZBQUFBQURPQk9UTEFBQUFBTTRLSER3QUFBQUFBK2dESVFBQUFBZ0FBZ0FBQUFBQUFBQUJBQUFESVFBQUFGb0RcIiArIFwiNkFBQUFBQUQ2QUFCQUFBQUFBQUFBQUFBQUFBQUFBQUFBUUFBVUFBQUFnQUFBQVFENkFIMEFBVUFBQUtLQXJ3QUFBQ01cIiArIFwiQW9vQ3ZBQUFBZUFBTVFFQ0FBQUNBQVlKQUFBQUFBQUFBQUFBQVFBQUFBQUFBQUFBQUFBQUFGQm1SV1FBd0FBdUFDNERcIiArIFwiSVA4NEFGb0RJUUFBQUFBQUFRQUFBQUFBQUFBQUFDQUFJQUFCQUFBQURnQ3VBQUVBQUFBQUFBQUFBUUFBQUFFQUFBQUFcIiArIFwiQUFFQUFRQUFBQUVBQUFBQUFBSUFBUUFBQUFFQUFBQUFBQU1BQVFBQUFBRUFBQUFBQUFRQUFRQUFBQUVBQUFBQUFBVUFcIiArIFwiQVFBQUFBRUFBQUFBQUFZQUFRQUFBQU1BQVFRSkFBQUFBZ0FCQUFNQUFRUUpBQUVBQWdBQkFBTUFBUVFKQUFJQUFnQUJcIiArIFwiQUFNQUFRUUpBQU1BQWdBQkFBTUFBUVFKQUFRQUFnQUJBQU1BQVFRSkFBVUFBZ0FCQUFNQUFRUUpBQVlBQWdBQldBQllcIiArIFwiQUFBQUFBQUFBd0FBQUFNQUFBQWNBQUVBQUFBQUFEd0FBd0FCQUFBQUhBQUVBQ0FBQUFBRUFBUUFBUUFBQUM3Ly93QUFcIiArIFwiQUM3Ly8vL1RBQUVBQUFBQUFBQUJCZ0FBQVFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFcIiArIFwiQUFBQUFBQUFBQUFBQUFBQUFBRUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFcIiArIFwiQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFcIiArIFwiQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFcIiArIFwiQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFcIiArIFwiQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBTUFBQUFBQUFEL2d3QXlBQUFBQVFBQUFBQUFBQUFBQUFBQUFBQUFcIiArIFwiQUFBQkFBUUVBQUVCQVFKWUFBRUJBU0g0RHdENEd3SEVBdmdjQS9nWEJJd01BWXVMK256NXRRWGtENWozQ0JMbkVRQUNcIiArIFwiQVFFQklWaFlXRmhZV0ZoWVdGaFlXRmhZV0ZoWVdGaFlXRmhZV0ZoWVdGaFlXRmhZQUFBQkFRQUFEd0FDQVFFRUUvdDNcIiArIFwiRG92NmZBSDZmQVQrZlBwOCtud0hEb3NNQ3ZtMUN2bTFEQXo2ZkJRQUFBQUFBQUFCQUFBQUFNbUpiekVBQUFBQXpnVGpcIiArIFwiRlFBQUFBRE9CT1FwQUFFQUFBQUFBQUFBREFBVUFBUUFBQUFCQUFBQUFnQUJBQUFBQUFBQUFBQUQ2QUFBQUFBQUFBPT1cIik7XG4gICAgICB9O1xuXG4gICAgICByZXR1cm4gKDAsIF91dGlsLnNoYWRvdykodGhpcywgXCJfbG9hZFRlc3RGb250XCIsIGdldExvYWRUZXN0Rm9udCgpKTtcbiAgICB9XG5cbiAgICBfcHJlcGFyZUZvbnRMb2FkRXZlbnQocnVsZXMsIGZvbnRzLCByZXF1ZXN0KSB7XG4gICAgICBmdW5jdGlvbiBpbnQzMihkYXRhLCBvZmZzZXQpIHtcbiAgICAgICAgcmV0dXJuIGRhdGEuY2hhckNvZGVBdChvZmZzZXQpIDw8IDI0IHwgZGF0YS5jaGFyQ29kZUF0KG9mZnNldCArIDEpIDw8IDE2IHwgZGF0YS5jaGFyQ29kZUF0KG9mZnNldCArIDIpIDw8IDggfCBkYXRhLmNoYXJDb2RlQXQob2Zmc2V0ICsgMykgJiAweGZmO1xuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiBzcGxpY2VTdHJpbmcocywgb2Zmc2V0LCByZW1vdmUsIGluc2VydCkge1xuICAgICAgICBjb25zdCBjaHVuazEgPSBzLnN1YnN0cmluZygwLCBvZmZzZXQpO1xuICAgICAgICBjb25zdCBjaHVuazIgPSBzLnN1YnN0cmluZyhvZmZzZXQgKyByZW1vdmUpO1xuICAgICAgICByZXR1cm4gY2h1bmsxICsgaW5zZXJ0ICsgY2h1bmsyO1xuICAgICAgfVxuXG4gICAgICBsZXQgaSwgaWk7XG4gICAgICBjb25zdCBjYW52YXMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiY2FudmFzXCIpO1xuICAgICAgY2FudmFzLndpZHRoID0gMTtcbiAgICAgIGNhbnZhcy5oZWlnaHQgPSAxO1xuICAgICAgY29uc3QgY3R4ID0gY2FudmFzLmdldENvbnRleHQoXCIyZFwiKTtcbiAgICAgIGxldCBjYWxsZWQgPSAwO1xuXG4gICAgICBmdW5jdGlvbiBpc0ZvbnRSZWFkeShuYW1lLCBjYWxsYmFjaykge1xuICAgICAgICBjYWxsZWQrKztcblxuICAgICAgICBpZiAoY2FsbGVkID4gMzApIHtcbiAgICAgICAgICAoMCwgX3V0aWwud2FybikoXCJMb2FkIHRlc3QgZm9udCBuZXZlciBsb2FkZWQuXCIpO1xuICAgICAgICAgIGNhbGxiYWNrKCk7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgY3R4LmZvbnQgPSBcIjMwcHggXCIgKyBuYW1lO1xuICAgICAgICBjdHguZmlsbFRleHQoXCIuXCIsIDAsIDIwKTtcbiAgICAgICAgY29uc3QgaW1hZ2VEYXRhID0gY3R4LmdldEltYWdlRGF0YSgwLCAwLCAxLCAxKTtcblxuICAgICAgICBpZiAoaW1hZ2VEYXRhLmRhdGFbM10gPiAwKSB7XG4gICAgICAgICAgY2FsbGJhY2soKTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBzZXRUaW1lb3V0KGlzRm9udFJlYWR5LmJpbmQobnVsbCwgbmFtZSwgY2FsbGJhY2spKTtcbiAgICAgIH1cblxuICAgICAgY29uc3QgbG9hZFRlc3RGb250SWQgPSBgbHQke0RhdGUubm93KCl9JHt0aGlzLmxvYWRUZXN0Rm9udElkKyt9YDtcbiAgICAgIGxldCBkYXRhID0gdGhpcy5fbG9hZFRlc3RGb250O1xuICAgICAgY29uc3QgQ09NTUVOVF9PRkZTRVQgPSA5NzY7XG4gICAgICBkYXRhID0gc3BsaWNlU3RyaW5nKGRhdGEsIENPTU1FTlRfT0ZGU0VULCBsb2FkVGVzdEZvbnRJZC5sZW5ndGgsIGxvYWRUZXN0Rm9udElkKTtcbiAgICAgIGNvbnN0IENGRl9DSEVDS1NVTV9PRkZTRVQgPSAxNjtcbiAgICAgIGNvbnN0IFhYWFhfVkFMVUUgPSAweDU4NTg1ODU4O1xuICAgICAgbGV0IGNoZWNrc3VtID0gaW50MzIoZGF0YSwgQ0ZGX0NIRUNLU1VNX09GRlNFVCk7XG5cbiAgICAgIGZvciAoaSA9IDAsIGlpID0gbG9hZFRlc3RGb250SWQubGVuZ3RoIC0gMzsgaSA8IGlpOyBpICs9IDQpIHtcbiAgICAgICAgY2hlY2tzdW0gPSBjaGVja3N1bSAtIFhYWFhfVkFMVUUgKyBpbnQzMihsb2FkVGVzdEZvbnRJZCwgaSkgfCAwO1xuICAgICAgfVxuXG4gICAgICBpZiAoaSA8IGxvYWRUZXN0Rm9udElkLmxlbmd0aCkge1xuICAgICAgICBjaGVja3N1bSA9IGNoZWNrc3VtIC0gWFhYWF9WQUxVRSArIGludDMyKGxvYWRUZXN0Rm9udElkICsgXCJYWFhcIiwgaSkgfCAwO1xuICAgICAgfVxuXG4gICAgICBkYXRhID0gc3BsaWNlU3RyaW5nKGRhdGEsIENGRl9DSEVDS1NVTV9PRkZTRVQsIDQsICgwLCBfdXRpbC5zdHJpbmczMikoY2hlY2tzdW0pKTtcbiAgICAgIGNvbnN0IHVybCA9IGB1cmwoZGF0YTpmb250L29wZW50eXBlO2Jhc2U2NCwke2J0b2EoZGF0YSl9KTtgO1xuICAgICAgY29uc3QgcnVsZSA9IGBAZm9udC1mYWNlIHtmb250LWZhbWlseTpcIiR7bG9hZFRlc3RGb250SWR9XCI7c3JjOiR7dXJsfX1gO1xuICAgICAgdGhpcy5pbnNlcnRSdWxlKHJ1bGUpO1xuICAgICAgY29uc3QgbmFtZXMgPSBbXTtcblxuICAgICAgZm9yIChpID0gMCwgaWkgPSBmb250cy5sZW5ndGg7IGkgPCBpaTsgaSsrKSB7XG4gICAgICAgIG5hbWVzLnB1c2goZm9udHNbaV0ubG9hZGVkTmFtZSk7XG4gICAgICB9XG5cbiAgICAgIG5hbWVzLnB1c2gobG9hZFRlc3RGb250SWQpO1xuICAgICAgY29uc3QgZGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICAgIGRpdi5zdHlsZS52aXNpYmlsaXR5ID0gXCJoaWRkZW5cIjtcbiAgICAgIGRpdi5zdHlsZS53aWR0aCA9IGRpdi5zdHlsZS5oZWlnaHQgPSBcIjEwcHhcIjtcbiAgICAgIGRpdi5zdHlsZS5wb3NpdGlvbiA9IFwiYWJzb2x1dGVcIjtcbiAgICAgIGRpdi5zdHlsZS50b3AgPSBkaXYuc3R5bGUubGVmdCA9IFwiMHB4XCI7XG5cbiAgICAgIGZvciAoaSA9IDAsIGlpID0gbmFtZXMubGVuZ3RoOyBpIDwgaWk7ICsraSkge1xuICAgICAgICBjb25zdCBzcGFuID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInNwYW5cIik7XG4gICAgICAgIHNwYW4udGV4dENvbnRlbnQgPSBcIkhpXCI7XG4gICAgICAgIHNwYW4uc3R5bGUuZm9udEZhbWlseSA9IG5hbWVzW2ldO1xuICAgICAgICBkaXYuYXBwZW5kQ2hpbGQoc3Bhbik7XG4gICAgICB9XG5cbiAgICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoZGl2KTtcbiAgICAgIGlzRm9udFJlYWR5KGxvYWRUZXN0Rm9udElkLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGRvY3VtZW50LmJvZHkucmVtb3ZlQ2hpbGQoZGl2KTtcbiAgICAgICAgcmVxdWVzdC5jb21wbGV0ZSgpO1xuICAgICAgfSk7XG4gICAgfVxuXG4gIH07XG59XG5cbmNsYXNzIEZvbnRGYWNlT2JqZWN0IHtcbiAgY29uc3RydWN0b3IodHJhbnNsYXRlZERhdGEsIHtcbiAgICBpc0V2YWxTdXBwb3J0ZWQgPSB0cnVlLFxuICAgIGRpc2FibGVGb250RmFjZSA9IGZhbHNlLFxuICAgIGlnbm9yZUVycm9ycyA9IGZhbHNlLFxuICAgIG9uVW5zdXBwb3J0ZWRGZWF0dXJlID0gbnVsbCxcbiAgICBmb250UmVnaXN0cnkgPSBudWxsXG4gIH0pIHtcbiAgICB0aGlzLmNvbXBpbGVkR2x5cGhzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcblxuICAgIGZvciAoY29uc3QgaSBpbiB0cmFuc2xhdGVkRGF0YSkge1xuICAgICAgdGhpc1tpXSA9IHRyYW5zbGF0ZWREYXRhW2ldO1xuICAgIH1cblxuICAgIHRoaXMuaXNFdmFsU3VwcG9ydGVkID0gaXNFdmFsU3VwcG9ydGVkICE9PSBmYWxzZTtcbiAgICB0aGlzLmRpc2FibGVGb250RmFjZSA9IGRpc2FibGVGb250RmFjZSA9PT0gdHJ1ZTtcbiAgICB0aGlzLmlnbm9yZUVycm9ycyA9IGlnbm9yZUVycm9ycyA9PT0gdHJ1ZTtcbiAgICB0aGlzLl9vblVuc3VwcG9ydGVkRmVhdHVyZSA9IG9uVW5zdXBwb3J0ZWRGZWF0dXJlO1xuICAgIHRoaXMuZm9udFJlZ2lzdHJ5ID0gZm9udFJlZ2lzdHJ5O1xuICB9XG5cbiAgY3JlYXRlTmF0aXZlRm9udEZhY2UoKSB7XG4gICAgaWYgKCF0aGlzLmRhdGEgfHwgdGhpcy5kaXNhYmxlRm9udEZhY2UpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIGNvbnN0IG5hdGl2ZUZvbnRGYWNlID0gbmV3IEZvbnRGYWNlKHRoaXMubG9hZGVkTmFtZSwgdGhpcy5kYXRhLCB7fSk7XG5cbiAgICBpZiAodGhpcy5mb250UmVnaXN0cnkpIHtcbiAgICAgIHRoaXMuZm9udFJlZ2lzdHJ5LnJlZ2lzdGVyRm9udCh0aGlzKTtcbiAgICB9XG5cbiAgICByZXR1cm4gbmF0aXZlRm9udEZhY2U7XG4gIH1cblxuICBjcmVhdGVGb250RmFjZVJ1bGUoKSB7XG4gICAgaWYgKCF0aGlzLmRhdGEgfHwgdGhpcy5kaXNhYmxlRm9udEZhY2UpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIGNvbnN0IGRhdGEgPSAoMCwgX3V0aWwuYnl0ZXNUb1N0cmluZykobmV3IFVpbnQ4QXJyYXkodGhpcy5kYXRhKSk7XG4gICAgY29uc3QgdXJsID0gYHVybChkYXRhOiR7dGhpcy5taW1ldHlwZX07YmFzZTY0LCR7YnRvYShkYXRhKX0pO2A7XG4gICAgY29uc3QgcnVsZSA9IGBAZm9udC1mYWNlIHtmb250LWZhbWlseTpcIiR7dGhpcy5sb2FkZWROYW1lfVwiO3NyYzoke3VybH19YDtcblxuICAgIGlmICh0aGlzLmZvbnRSZWdpc3RyeSkge1xuICAgICAgdGhpcy5mb250UmVnaXN0cnkucmVnaXN0ZXJGb250KHRoaXMsIHVybCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJ1bGU7XG4gIH1cblxuICBnZXRQYXRoR2VuZXJhdG9yKG9ianMsIGNoYXJhY3Rlcikge1xuICAgIGlmICh0aGlzLmNvbXBpbGVkR2x5cGhzW2NoYXJhY3Rlcl0gIT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuIHRoaXMuY29tcGlsZWRHbHlwaHNbY2hhcmFjdGVyXTtcbiAgICB9XG5cbiAgICBsZXQgY21kcywgY3VycmVudDtcblxuICAgIHRyeSB7XG4gICAgICBjbWRzID0gb2Jqcy5nZXQodGhpcy5sb2FkZWROYW1lICsgXCJfcGF0aF9cIiArIGNoYXJhY3Rlcik7XG4gICAgfSBjYXRjaCAoZXgpIHtcbiAgICAgIGlmICghdGhpcy5pZ25vcmVFcnJvcnMpIHtcbiAgICAgICAgdGhyb3cgZXg7XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLl9vblVuc3VwcG9ydGVkRmVhdHVyZSkge1xuICAgICAgICB0aGlzLl9vblVuc3VwcG9ydGVkRmVhdHVyZSh7XG4gICAgICAgICAgZmVhdHVyZUlkOiBfdXRpbC5VTlNVUFBPUlRFRF9GRUFUVVJFUy5lcnJvckZvbnRHZXRQYXRoXG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICAoMCwgX3V0aWwud2FybikoYGdldFBhdGhHZW5lcmF0b3IgLSBpZ25vcmluZyBjaGFyYWN0ZXI6IFwiJHtleH1cIi5gKTtcbiAgICAgIHJldHVybiB0aGlzLmNvbXBpbGVkR2x5cGhzW2NoYXJhY3Rlcl0gPSBmdW5jdGlvbiAoYywgc2l6ZSkge307XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuaXNFdmFsU3VwcG9ydGVkICYmIF91dGlsLklzRXZhbFN1cHBvcnRlZENhY2hlZC52YWx1ZSkge1xuICAgICAgbGV0IGFyZ3MsXG4gICAgICAgICAganMgPSBcIlwiO1xuXG4gICAgICBmb3IgKGxldCBpID0gMCwgaWkgPSBjbWRzLmxlbmd0aDsgaSA8IGlpOyBpKyspIHtcbiAgICAgICAgY3VycmVudCA9IGNtZHNbaV07XG5cbiAgICAgICAgaWYgKGN1cnJlbnQuYXJncyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgYXJncyA9IGN1cnJlbnQuYXJncy5qb2luKFwiLFwiKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBhcmdzID0gXCJcIjtcbiAgICAgICAgfVxuXG4gICAgICAgIGpzICs9IFwiYy5cIiArIGN1cnJlbnQuY21kICsgXCIoXCIgKyBhcmdzICsgXCIpO1xcblwiO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpcy5jb21waWxlZEdseXBoc1tjaGFyYWN0ZXJdID0gbmV3IEZ1bmN0aW9uKFwiY1wiLCBcInNpemVcIiwganMpO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLmNvbXBpbGVkR2x5cGhzW2NoYXJhY3Rlcl0gPSBmdW5jdGlvbiAoYywgc2l6ZSkge1xuICAgICAgZm9yIChsZXQgaSA9IDAsIGlpID0gY21kcy5sZW5ndGg7IGkgPCBpaTsgaSsrKSB7XG4gICAgICAgIGN1cnJlbnQgPSBjbWRzW2ldO1xuXG4gICAgICAgIGlmIChjdXJyZW50LmNtZCA9PT0gXCJzY2FsZVwiKSB7XG4gICAgICAgICAgY3VycmVudC5hcmdzID0gW3NpemUsIC1zaXplXTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNbY3VycmVudC5jbWRdLmFwcGx5KGMsIGN1cnJlbnQuYXJncyk7XG4gICAgICB9XG4gICAgfTtcbiAgfVxuXG59XG5cbmV4cG9ydHMuRm9udEZhY2VPYmplY3QgPSBGb250RmFjZU9iamVjdDtcblxuLyoqKi8gfSksXG4vKiA3ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dfcGRmanNfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmFwaUNvbXBhdGliaWxpdHlQYXJhbXMgPSB2b2lkIDA7XG5cbnZhciBfaXNfbm9kZSA9IF9fd19wZGZqc19yZXF1aXJlX18oNCk7XG5cbmNvbnN0IGNvbXBhdGliaWxpdHlQYXJhbXMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xue1xuICAoZnVuY3Rpb24gY2hlY2tGb250RmFjZSgpIHtcbiAgICBpZiAoX2lzX25vZGUuaXNOb2RlSlMpIHtcbiAgICAgIGNvbXBhdGliaWxpdHlQYXJhbXMuZGlzYWJsZUZvbnRGYWNlID0gdHJ1ZTtcbiAgICB9XG4gIH0pKCk7XG59XG5jb25zdCBhcGlDb21wYXRpYmlsaXR5UGFyYW1zID0gT2JqZWN0LmZyZWV6ZShjb21wYXRpYmlsaXR5UGFyYW1zKTtcbmV4cG9ydHMuYXBpQ29tcGF0aWJpbGl0eVBhcmFtcyA9IGFwaUNvbXBhdGliaWxpdHlQYXJhbXM7XG5cbi8qKiovIH0pLFxuLyogOCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193X3BkZmpzX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5DYW52YXNHcmFwaGljcyA9IHZvaWQgMDtcblxudmFyIF91dGlsID0gX193X3BkZmpzX3JlcXVpcmVfXygyKTtcblxudmFyIF9wYXR0ZXJuX2hlbHBlciA9IF9fd19wZGZqc19yZXF1aXJlX18oOSk7XG5cbnZhciBNSU5fRk9OVF9TSVpFID0gMTY7XG52YXIgTUFYX0ZPTlRfU0laRSA9IDEwMDtcbnZhciBNQVhfR1JPVVBfU0laRSA9IDQwOTY7XG52YXIgTUlOX1dJRFRIX0ZBQ1RPUiA9IDAuNjU7XG52YXIgQ09NUElMRV9UWVBFM19HTFlQSFMgPSB0cnVlO1xudmFyIE1BWF9TSVpFX1RPX0NPTVBJTEUgPSAxMDAwO1xudmFyIEZVTExfQ0hVTktfSEVJR0hUID0gMTY7XG5cbmZ1bmN0aW9uIGFkZENvbnRleHRDdXJyZW50VHJhbnNmb3JtKGN0eCkge1xuICBpZiAoIWN0eC5tb3pDdXJyZW50VHJhbnNmb3JtKSB7XG4gICAgY3R4Ll9vcmlnaW5hbFNhdmUgPSBjdHguc2F2ZTtcbiAgICBjdHguX29yaWdpbmFsUmVzdG9yZSA9IGN0eC5yZXN0b3JlO1xuICAgIGN0eC5fb3JpZ2luYWxSb3RhdGUgPSBjdHgucm90YXRlO1xuICAgIGN0eC5fb3JpZ2luYWxTY2FsZSA9IGN0eC5zY2FsZTtcbiAgICBjdHguX29yaWdpbmFsVHJhbnNsYXRlID0gY3R4LnRyYW5zbGF0ZTtcbiAgICBjdHguX29yaWdpbmFsVHJhbnNmb3JtID0gY3R4LnRyYW5zZm9ybTtcbiAgICBjdHguX29yaWdpbmFsU2V0VHJhbnNmb3JtID0gY3R4LnNldFRyYW5zZm9ybTtcbiAgICBjdHguX3RyYW5zZm9ybU1hdHJpeCA9IGN0eC5fdHJhbnNmb3JtTWF0cml4IHx8IFsxLCAwLCAwLCAxLCAwLCAwXTtcbiAgICBjdHguX3RyYW5zZm9ybVN0YWNrID0gW107XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGN0eCwgXCJtb3pDdXJyZW50VHJhbnNmb3JtXCIsIHtcbiAgICAgIGdldDogZnVuY3Rpb24gZ2V0Q3VycmVudFRyYW5zZm9ybSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3RyYW5zZm9ybU1hdHJpeDtcbiAgICAgIH1cbiAgICB9KTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoY3R4LCBcIm1vekN1cnJlbnRUcmFuc2Zvcm1JbnZlcnNlXCIsIHtcbiAgICAgIGdldDogZnVuY3Rpb24gZ2V0Q3VycmVudFRyYW5zZm9ybUludmVyc2UoKSB7XG4gICAgICAgIHZhciBtID0gdGhpcy5fdHJhbnNmb3JtTWF0cml4O1xuICAgICAgICB2YXIgYSA9IG1bMF0sXG4gICAgICAgICAgICBiID0gbVsxXSxcbiAgICAgICAgICAgIGMgPSBtWzJdLFxuICAgICAgICAgICAgZCA9IG1bM10sXG4gICAgICAgICAgICBlID0gbVs0XSxcbiAgICAgICAgICAgIGYgPSBtWzVdO1xuICAgICAgICB2YXIgYWRfYmMgPSBhICogZCAtIGIgKiBjO1xuICAgICAgICB2YXIgYmNfYWQgPSBiICogYyAtIGEgKiBkO1xuICAgICAgICByZXR1cm4gW2QgLyBhZF9iYywgYiAvIGJjX2FkLCBjIC8gYmNfYWQsIGEgLyBhZF9iYywgKGQgKiBlIC0gYyAqIGYpIC8gYmNfYWQsIChiICogZSAtIGEgKiBmKSAvIGFkX2JjXTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIGN0eC5zYXZlID0gZnVuY3Rpb24gY3R4U2F2ZSgpIHtcbiAgICAgIHZhciBvbGQgPSB0aGlzLl90cmFuc2Zvcm1NYXRyaXg7XG5cbiAgICAgIHRoaXMuX3RyYW5zZm9ybVN0YWNrLnB1c2gob2xkKTtcblxuICAgICAgdGhpcy5fdHJhbnNmb3JtTWF0cml4ID0gb2xkLnNsaWNlKDAsIDYpO1xuXG4gICAgICB0aGlzLl9vcmlnaW5hbFNhdmUoKTtcbiAgICB9O1xuXG4gICAgY3R4LnJlc3RvcmUgPSBmdW5jdGlvbiBjdHhSZXN0b3JlKCkge1xuICAgICAgdmFyIHByZXYgPSB0aGlzLl90cmFuc2Zvcm1TdGFjay5wb3AoKTtcblxuICAgICAgaWYgKHByZXYpIHtcbiAgICAgICAgdGhpcy5fdHJhbnNmb3JtTWF0cml4ID0gcHJldjtcblxuICAgICAgICB0aGlzLl9vcmlnaW5hbFJlc3RvcmUoKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgY3R4LnRyYW5zbGF0ZSA9IGZ1bmN0aW9uIGN0eFRyYW5zbGF0ZSh4LCB5KSB7XG4gICAgICB2YXIgbSA9IHRoaXMuX3RyYW5zZm9ybU1hdHJpeDtcbiAgICAgIG1bNF0gPSBtWzBdICogeCArIG1bMl0gKiB5ICsgbVs0XTtcbiAgICAgIG1bNV0gPSBtWzFdICogeCArIG1bM10gKiB5ICsgbVs1XTtcblxuICAgICAgdGhpcy5fb3JpZ2luYWxUcmFuc2xhdGUoeCwgeSk7XG4gICAgfTtcblxuICAgIGN0eC5zY2FsZSA9IGZ1bmN0aW9uIGN0eFNjYWxlKHgsIHkpIHtcbiAgICAgIHZhciBtID0gdGhpcy5fdHJhbnNmb3JtTWF0cml4O1xuICAgICAgbVswXSA9IG1bMF0gKiB4O1xuICAgICAgbVsxXSA9IG1bMV0gKiB4O1xuICAgICAgbVsyXSA9IG1bMl0gKiB5O1xuICAgICAgbVszXSA9IG1bM10gKiB5O1xuXG4gICAgICB0aGlzLl9vcmlnaW5hbFNjYWxlKHgsIHkpO1xuICAgIH07XG5cbiAgICBjdHgudHJhbnNmb3JtID0gZnVuY3Rpb24gY3R4VHJhbnNmb3JtKGEsIGIsIGMsIGQsIGUsIGYpIHtcbiAgICAgIHZhciBtID0gdGhpcy5fdHJhbnNmb3JtTWF0cml4O1xuICAgICAgdGhpcy5fdHJhbnNmb3JtTWF0cml4ID0gW21bMF0gKiBhICsgbVsyXSAqIGIsIG1bMV0gKiBhICsgbVszXSAqIGIsIG1bMF0gKiBjICsgbVsyXSAqIGQsIG1bMV0gKiBjICsgbVszXSAqIGQsIG1bMF0gKiBlICsgbVsyXSAqIGYgKyBtWzRdLCBtWzFdICogZSArIG1bM10gKiBmICsgbVs1XV07XG5cbiAgICAgIGN0eC5fb3JpZ2luYWxUcmFuc2Zvcm0oYSwgYiwgYywgZCwgZSwgZik7XG4gICAgfTtcblxuICAgIGN0eC5zZXRUcmFuc2Zvcm0gPSBmdW5jdGlvbiBjdHhTZXRUcmFuc2Zvcm0oYSwgYiwgYywgZCwgZSwgZikge1xuICAgICAgdGhpcy5fdHJhbnNmb3JtTWF0cml4ID0gW2EsIGIsIGMsIGQsIGUsIGZdO1xuXG4gICAgICBjdHguX29yaWdpbmFsU2V0VHJhbnNmb3JtKGEsIGIsIGMsIGQsIGUsIGYpO1xuICAgIH07XG5cbiAgICBjdHgucm90YXRlID0gZnVuY3Rpb24gY3R4Um90YXRlKGFuZ2xlKSB7XG4gICAgICB2YXIgY29zVmFsdWUgPSBNYXRoLmNvcyhhbmdsZSk7XG4gICAgICB2YXIgc2luVmFsdWUgPSBNYXRoLnNpbihhbmdsZSk7XG4gICAgICB2YXIgbSA9IHRoaXMuX3RyYW5zZm9ybU1hdHJpeDtcbiAgICAgIHRoaXMuX3RyYW5zZm9ybU1hdHJpeCA9IFttWzBdICogY29zVmFsdWUgKyBtWzJdICogc2luVmFsdWUsIG1bMV0gKiBjb3NWYWx1ZSArIG1bM10gKiBzaW5WYWx1ZSwgbVswXSAqIC1zaW5WYWx1ZSArIG1bMl0gKiBjb3NWYWx1ZSwgbVsxXSAqIC1zaW5WYWx1ZSArIG1bM10gKiBjb3NWYWx1ZSwgbVs0XSwgbVs1XV07XG5cbiAgICAgIHRoaXMuX29yaWdpbmFsUm90YXRlKGFuZ2xlKTtcbiAgICB9O1xuICB9XG59XG5cbnZhciBDYWNoZWRDYW52YXNlcyA9IGZ1bmN0aW9uIENhY2hlZENhbnZhc2VzQ2xvc3VyZSgpIHtcbiAgZnVuY3Rpb24gQ2FjaGVkQ2FudmFzZXMoY2FudmFzRmFjdG9yeSkge1xuICAgIHRoaXMuY2FudmFzRmFjdG9yeSA9IGNhbnZhc0ZhY3Rvcnk7XG4gICAgdGhpcy5jYWNoZSA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gIH1cblxuICBDYWNoZWRDYW52YXNlcy5wcm90b3R5cGUgPSB7XG4gICAgZ2V0Q2FudmFzOiBmdW5jdGlvbiBDYWNoZWRDYW52YXNlc19nZXRDYW52YXMoaWQsIHdpZHRoLCBoZWlnaHQsIHRyYWNrVHJhbnNmb3JtKSB7XG4gICAgICB2YXIgY2FudmFzRW50cnk7XG5cbiAgICAgIGlmICh0aGlzLmNhY2hlW2lkXSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGNhbnZhc0VudHJ5ID0gdGhpcy5jYWNoZVtpZF07XG4gICAgICAgIHRoaXMuY2FudmFzRmFjdG9yeS5yZXNldChjYW52YXNFbnRyeSwgd2lkdGgsIGhlaWdodCk7XG4gICAgICAgIGNhbnZhc0VudHJ5LmNvbnRleHQuc2V0VHJhbnNmb3JtKDEsIDAsIDAsIDEsIDAsIDApO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY2FudmFzRW50cnkgPSB0aGlzLmNhbnZhc0ZhY3RvcnkuY3JlYXRlKHdpZHRoLCBoZWlnaHQpO1xuICAgICAgICB0aGlzLmNhY2hlW2lkXSA9IGNhbnZhc0VudHJ5O1xuICAgICAgfVxuXG4gICAgICBpZiAodHJhY2tUcmFuc2Zvcm0pIHtcbiAgICAgICAgYWRkQ29udGV4dEN1cnJlbnRUcmFuc2Zvcm0oY2FudmFzRW50cnkuY29udGV4dCk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBjYW52YXNFbnRyeTtcbiAgICB9LFxuXG4gICAgY2xlYXIoKSB7XG4gICAgICBmb3IgKHZhciBpZCBpbiB0aGlzLmNhY2hlKSB7XG4gICAgICAgIHZhciBjYW52YXNFbnRyeSA9IHRoaXMuY2FjaGVbaWRdO1xuICAgICAgICB0aGlzLmNhbnZhc0ZhY3RvcnkuZGVzdHJveShjYW52YXNFbnRyeSk7XG4gICAgICAgIGRlbGV0ZSB0aGlzLmNhY2hlW2lkXTtcbiAgICAgIH1cbiAgICB9XG5cbiAgfTtcbiAgcmV0dXJuIENhY2hlZENhbnZhc2VzO1xufSgpO1xuXG5mdW5jdGlvbiBjb21waWxlVHlwZTNHbHlwaChpbWdEYXRhKSB7XG4gIHZhciBQT0lOVF9UT19QUk9DRVNTX0xJTUlUID0gMTAwMDtcbiAgdmFyIHdpZHRoID0gaW1nRGF0YS53aWR0aCxcbiAgICAgIGhlaWdodCA9IGltZ0RhdGEuaGVpZ2h0O1xuICB2YXIgaSxcbiAgICAgIGosXG4gICAgICBqMCxcbiAgICAgIHdpZHRoMSA9IHdpZHRoICsgMTtcbiAgdmFyIHBvaW50cyA9IG5ldyBVaW50OEFycmF5KHdpZHRoMSAqIChoZWlnaHQgKyAxKSk7XG4gIHZhciBQT0lOVF9UWVBFUyA9IG5ldyBVaW50OEFycmF5KFswLCAyLCA0LCAwLCAxLCAwLCA1LCA0LCA4LCAxMCwgMCwgOCwgMCwgMiwgMSwgMF0pO1xuICB2YXIgbGluZVNpemUgPSB3aWR0aCArIDcgJiB+NyxcbiAgICAgIGRhdGEwID0gaW1nRGF0YS5kYXRhO1xuICB2YXIgZGF0YSA9IG5ldyBVaW50OEFycmF5KGxpbmVTaXplICogaGVpZ2h0KSxcbiAgICAgIHBvcyA9IDAsXG4gICAgICBpaTtcblxuICBmb3IgKGkgPSAwLCBpaSA9IGRhdGEwLmxlbmd0aDsgaSA8IGlpOyBpKyspIHtcbiAgICB2YXIgbWFzayA9IDEyOCxcbiAgICAgICAgZWxlbSA9IGRhdGEwW2ldO1xuXG4gICAgd2hpbGUgKG1hc2sgPiAwKSB7XG4gICAgICBkYXRhW3BvcysrXSA9IGVsZW0gJiBtYXNrID8gMCA6IDI1NTtcbiAgICAgIG1hc2sgPj49IDE7XG4gICAgfVxuICB9XG5cbiAgdmFyIGNvdW50ID0gMDtcbiAgcG9zID0gMDtcblxuICBpZiAoZGF0YVtwb3NdICE9PSAwKSB7XG4gICAgcG9pbnRzWzBdID0gMTtcbiAgICArK2NvdW50O1xuICB9XG5cbiAgZm9yIChqID0gMTsgaiA8IHdpZHRoOyBqKyspIHtcbiAgICBpZiAoZGF0YVtwb3NdICE9PSBkYXRhW3BvcyArIDFdKSB7XG4gICAgICBwb2ludHNbal0gPSBkYXRhW3Bvc10gPyAyIDogMTtcbiAgICAgICsrY291bnQ7XG4gICAgfVxuXG4gICAgcG9zKys7XG4gIH1cblxuICBpZiAoZGF0YVtwb3NdICE9PSAwKSB7XG4gICAgcG9pbnRzW2pdID0gMjtcbiAgICArK2NvdW50O1xuICB9XG5cbiAgZm9yIChpID0gMTsgaSA8IGhlaWdodDsgaSsrKSB7XG4gICAgcG9zID0gaSAqIGxpbmVTaXplO1xuICAgIGowID0gaSAqIHdpZHRoMTtcblxuICAgIGlmIChkYXRhW3BvcyAtIGxpbmVTaXplXSAhPT0gZGF0YVtwb3NdKSB7XG4gICAgICBwb2ludHNbajBdID0gZGF0YVtwb3NdID8gMSA6IDg7XG4gICAgICArK2NvdW50O1xuICAgIH1cblxuICAgIHZhciBzdW0gPSAoZGF0YVtwb3NdID8gNCA6IDApICsgKGRhdGFbcG9zIC0gbGluZVNpemVdID8gOCA6IDApO1xuXG4gICAgZm9yIChqID0gMTsgaiA8IHdpZHRoOyBqKyspIHtcbiAgICAgIHN1bSA9IChzdW0gPj4gMikgKyAoZGF0YVtwb3MgKyAxXSA/IDQgOiAwKSArIChkYXRhW3BvcyAtIGxpbmVTaXplICsgMV0gPyA4IDogMCk7XG5cbiAgICAgIGlmIChQT0lOVF9UWVBFU1tzdW1dKSB7XG4gICAgICAgIHBvaW50c1tqMCArIGpdID0gUE9JTlRfVFlQRVNbc3VtXTtcbiAgICAgICAgKytjb3VudDtcbiAgICAgIH1cblxuICAgICAgcG9zKys7XG4gICAgfVxuXG4gICAgaWYgKGRhdGFbcG9zIC0gbGluZVNpemVdICE9PSBkYXRhW3Bvc10pIHtcbiAgICAgIHBvaW50c1tqMCArIGpdID0gZGF0YVtwb3NdID8gMiA6IDQ7XG4gICAgICArK2NvdW50O1xuICAgIH1cblxuICAgIGlmIChjb3VudCA+IFBPSU5UX1RPX1BST0NFU1NfTElNSVQpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgfVxuXG4gIHBvcyA9IGxpbmVTaXplICogKGhlaWdodCAtIDEpO1xuICBqMCA9IGkgKiB3aWR0aDE7XG5cbiAgaWYgKGRhdGFbcG9zXSAhPT0gMCkge1xuICAgIHBvaW50c1tqMF0gPSA4O1xuICAgICsrY291bnQ7XG4gIH1cblxuICBmb3IgKGogPSAxOyBqIDwgd2lkdGg7IGorKykge1xuICAgIGlmIChkYXRhW3Bvc10gIT09IGRhdGFbcG9zICsgMV0pIHtcbiAgICAgIHBvaW50c1tqMCArIGpdID0gZGF0YVtwb3NdID8gNCA6IDg7XG4gICAgICArK2NvdW50O1xuICAgIH1cblxuICAgIHBvcysrO1xuICB9XG5cbiAgaWYgKGRhdGFbcG9zXSAhPT0gMCkge1xuICAgIHBvaW50c1tqMCArIGpdID0gNDtcbiAgICArK2NvdW50O1xuICB9XG5cbiAgaWYgKGNvdW50ID4gUE9JTlRfVE9fUFJPQ0VTU19MSU1JVCkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgdmFyIHN0ZXBzID0gbmV3IEludDMyQXJyYXkoWzAsIHdpZHRoMSwgLTEsIDAsIC13aWR0aDEsIDAsIDAsIDAsIDFdKTtcbiAgdmFyIG91dGxpbmVzID0gW107XG5cbiAgZm9yIChpID0gMDsgY291bnQgJiYgaSA8PSBoZWlnaHQ7IGkrKykge1xuICAgIHZhciBwID0gaSAqIHdpZHRoMTtcbiAgICB2YXIgZW5kID0gcCArIHdpZHRoO1xuXG4gICAgd2hpbGUgKHAgPCBlbmQgJiYgIXBvaW50c1twXSkge1xuICAgICAgcCsrO1xuICAgIH1cblxuICAgIGlmIChwID09PSBlbmQpIHtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cblxuICAgIHZhciBjb29yZHMgPSBbcCAlIHdpZHRoMSwgaV07XG4gICAgdmFyIHR5cGUgPSBwb2ludHNbcF0sXG4gICAgICAgIHAwID0gcCxcbiAgICAgICAgcHA7XG5cbiAgICBkbyB7XG4gICAgICB2YXIgc3RlcCA9IHN0ZXBzW3R5cGVdO1xuXG4gICAgICBkbyB7XG4gICAgICAgIHAgKz0gc3RlcDtcbiAgICAgIH0gd2hpbGUgKCFwb2ludHNbcF0pO1xuXG4gICAgICBwcCA9IHBvaW50c1twXTtcblxuICAgICAgaWYgKHBwICE9PSA1ICYmIHBwICE9PSAxMCkge1xuICAgICAgICB0eXBlID0gcHA7XG4gICAgICAgIHBvaW50c1twXSA9IDA7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0eXBlID0gcHAgJiAweDMzICogdHlwZSA+PiA0O1xuICAgICAgICBwb2ludHNbcF0gJj0gdHlwZSA+PiAyIHwgdHlwZSA8PCAyO1xuICAgICAgfVxuXG4gICAgICBjb29yZHMucHVzaChwICUgd2lkdGgxKTtcbiAgICAgIGNvb3Jkcy5wdXNoKHAgLyB3aWR0aDEgfCAwKTtcblxuICAgICAgaWYgKCFwb2ludHNbcF0pIHtcbiAgICAgICAgLS1jb3VudDtcbiAgICAgIH1cbiAgICB9IHdoaWxlIChwMCAhPT0gcCk7XG5cbiAgICBvdXRsaW5lcy5wdXNoKGNvb3Jkcyk7XG4gICAgLS1pO1xuICB9XG5cbiAgdmFyIGRyYXdPdXRsaW5lID0gZnVuY3Rpb24gKGMpIHtcbiAgICBjLnNhdmUoKTtcbiAgICBjLnNjYWxlKDEgLyB3aWR0aCwgLTEgLyBoZWlnaHQpO1xuICAgIGMudHJhbnNsYXRlKDAsIC1oZWlnaHQpO1xuICAgIGMuYmVnaW5QYXRoKCk7XG5cbiAgICBmb3IgKGxldCBrID0gMCwga2sgPSBvdXRsaW5lcy5sZW5ndGg7IGsgPCBrazsgaysrKSB7XG4gICAgICB2YXIgbyA9IG91dGxpbmVzW2tdO1xuICAgICAgYy5tb3ZlVG8ob1swXSwgb1sxXSk7XG5cbiAgICAgIGZvciAobGV0IGwgPSAyLCBsbCA9IG8ubGVuZ3RoOyBsIDwgbGw7IGwgKz0gMikge1xuICAgICAgICBjLmxpbmVUbyhvW2xdLCBvW2wgKyAxXSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgYy5maWxsKCk7XG4gICAgYy5iZWdpblBhdGgoKTtcbiAgICBjLnJlc3RvcmUoKTtcbiAgfTtcblxuICByZXR1cm4gZHJhd091dGxpbmU7XG59XG5cbnZhciBDYW52YXNFeHRyYVN0YXRlID0gZnVuY3Rpb24gQ2FudmFzRXh0cmFTdGF0ZUNsb3N1cmUoKSB7XG4gIGZ1bmN0aW9uIENhbnZhc0V4dHJhU3RhdGUoKSB7XG4gICAgdGhpcy5hbHBoYUlzU2hhcGUgPSBmYWxzZTtcbiAgICB0aGlzLmZvbnRTaXplID0gMDtcbiAgICB0aGlzLmZvbnRTaXplU2NhbGUgPSAxO1xuICAgIHRoaXMudGV4dE1hdHJpeCA9IF91dGlsLklERU5USVRZX01BVFJJWDtcbiAgICB0aGlzLnRleHRNYXRyaXhTY2FsZSA9IDE7XG4gICAgdGhpcy5mb250TWF0cml4ID0gX3V0aWwuRk9OVF9JREVOVElUWV9NQVRSSVg7XG4gICAgdGhpcy5sZWFkaW5nID0gMDtcbiAgICB0aGlzLnggPSAwO1xuICAgIHRoaXMueSA9IDA7XG4gICAgdGhpcy5saW5lWCA9IDA7XG4gICAgdGhpcy5saW5lWSA9IDA7XG4gICAgdGhpcy5jaGFyU3BhY2luZyA9IDA7XG4gICAgdGhpcy53b3JkU3BhY2luZyA9IDA7XG4gICAgdGhpcy50ZXh0SFNjYWxlID0gMTtcbiAgICB0aGlzLnRleHRSZW5kZXJpbmdNb2RlID0gX3V0aWwuVGV4dFJlbmRlcmluZ01vZGUuRklMTDtcbiAgICB0aGlzLnRleHRSaXNlID0gMDtcbiAgICB0aGlzLmZpbGxDb2xvciA9IFwiIzAwMDAwMFwiO1xuICAgIHRoaXMuc3Ryb2tlQ29sb3IgPSBcIiMwMDAwMDBcIjtcbiAgICB0aGlzLnBhdHRlcm5GaWxsID0gZmFsc2U7XG4gICAgdGhpcy5maWxsQWxwaGEgPSAxO1xuICAgIHRoaXMuc3Ryb2tlQWxwaGEgPSAxO1xuICAgIHRoaXMubGluZVdpZHRoID0gMTtcbiAgICB0aGlzLmFjdGl2ZVNNYXNrID0gbnVsbDtcbiAgICB0aGlzLnJlc3VtZVNNYXNrQ3R4ID0gbnVsbDtcbiAgfVxuXG4gIENhbnZhc0V4dHJhU3RhdGUucHJvdG90eXBlID0ge1xuICAgIGNsb25lOiBmdW5jdGlvbiBDYW52YXNFeHRyYVN0YXRlX2Nsb25lKCkge1xuICAgICAgcmV0dXJuIE9iamVjdC5jcmVhdGUodGhpcyk7XG4gICAgfSxcbiAgICBzZXRDdXJyZW50UG9pbnQ6IGZ1bmN0aW9uIENhbnZhc0V4dHJhU3RhdGVfc2V0Q3VycmVudFBvaW50KHgsIHkpIHtcbiAgICAgIHRoaXMueCA9IHg7XG4gICAgICB0aGlzLnkgPSB5O1xuICAgIH1cbiAgfTtcbiAgcmV0dXJuIENhbnZhc0V4dHJhU3RhdGU7XG59KCk7XG5cbnZhciBDYW52YXNHcmFwaGljcyA9IGZ1bmN0aW9uIENhbnZhc0dyYXBoaWNzQ2xvc3VyZSgpIHtcbiAgdmFyIEVYRUNVVElPTl9USU1FID0gMTU7XG4gIHZhciBFWEVDVVRJT05fU1RFUFMgPSAxMDtcblxuICBmdW5jdGlvbiBDYW52YXNHcmFwaGljcyhjYW52YXNDdHgsIGNvbW1vbk9ianMsIG9ianMsIGNhbnZhc0ZhY3RvcnksIHdlYkdMQ29udGV4dCwgaW1hZ2VMYXllcikge1xuICAgIHRoaXMuY3R4ID0gY2FudmFzQ3R4O1xuICAgIHRoaXMuY3VycmVudCA9IG5ldyBDYW52YXNFeHRyYVN0YXRlKCk7XG4gICAgdGhpcy5zdGF0ZVN0YWNrID0gW107XG4gICAgdGhpcy5wZW5kaW5nQ2xpcCA9IG51bGw7XG4gICAgdGhpcy5wZW5kaW5nRU9GaWxsID0gZmFsc2U7XG4gICAgdGhpcy5yZXMgPSBudWxsO1xuICAgIHRoaXMueG9ianMgPSBudWxsO1xuICAgIHRoaXMuY29tbW9uT2JqcyA9IGNvbW1vbk9ianM7XG4gICAgdGhpcy5vYmpzID0gb2JqcztcbiAgICB0aGlzLmNhbnZhc0ZhY3RvcnkgPSBjYW52YXNGYWN0b3J5O1xuICAgIHRoaXMud2ViR0xDb250ZXh0ID0gd2ViR0xDb250ZXh0O1xuICAgIHRoaXMuaW1hZ2VMYXllciA9IGltYWdlTGF5ZXI7XG4gICAgdGhpcy5ncm91cFN0YWNrID0gW107XG4gICAgdGhpcy5wcm9jZXNzaW5nVHlwZTMgPSBudWxsO1xuICAgIHRoaXMuYmFzZVRyYW5zZm9ybSA9IG51bGw7XG4gICAgdGhpcy5iYXNlVHJhbnNmb3JtU3RhY2sgPSBbXTtcbiAgICB0aGlzLmdyb3VwTGV2ZWwgPSAwO1xuICAgIHRoaXMuc21hc2tTdGFjayA9IFtdO1xuICAgIHRoaXMuc21hc2tDb3VudGVyID0gMDtcbiAgICB0aGlzLnRlbXBTTWFzayA9IG51bGw7XG4gICAgdGhpcy5jYWNoZWRDYW52YXNlcyA9IG5ldyBDYWNoZWRDYW52YXNlcyh0aGlzLmNhbnZhc0ZhY3RvcnkpO1xuXG4gICAgaWYgKGNhbnZhc0N0eCkge1xuICAgICAgYWRkQ29udGV4dEN1cnJlbnRUcmFuc2Zvcm0oY2FudmFzQ3R4KTtcbiAgICB9XG5cbiAgICB0aGlzLl9jYWNoZWRHZXRTaW5nbGVQaXhlbFdpZHRoID0gbnVsbDtcbiAgfVxuXG4gIGZ1bmN0aW9uIHB1dEJpbmFyeUltYWdlRGF0YShjdHgsIGltZ0RhdGEpIHtcbiAgICBpZiAodHlwZW9mIEltYWdlRGF0YSAhPT0gXCJ1bmRlZmluZWRcIiAmJiBpbWdEYXRhIGluc3RhbmNlb2YgSW1hZ2VEYXRhKSB7XG4gICAgICBjdHgucHV0SW1hZ2VEYXRhKGltZ0RhdGEsIDAsIDApO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciBoZWlnaHQgPSBpbWdEYXRhLmhlaWdodCxcbiAgICAgICAgd2lkdGggPSBpbWdEYXRhLndpZHRoO1xuICAgIHZhciBwYXJ0aWFsQ2h1bmtIZWlnaHQgPSBoZWlnaHQgJSBGVUxMX0NIVU5LX0hFSUdIVDtcbiAgICB2YXIgZnVsbENodW5rcyA9IChoZWlnaHQgLSBwYXJ0aWFsQ2h1bmtIZWlnaHQpIC8gRlVMTF9DSFVOS19IRUlHSFQ7XG4gICAgdmFyIHRvdGFsQ2h1bmtzID0gcGFydGlhbENodW5rSGVpZ2h0ID09PSAwID8gZnVsbENodW5rcyA6IGZ1bGxDaHVua3MgKyAxO1xuICAgIHZhciBjaHVua0ltZ0RhdGEgPSBjdHguY3JlYXRlSW1hZ2VEYXRhKHdpZHRoLCBGVUxMX0NIVU5LX0hFSUdIVCk7XG4gICAgdmFyIHNyY1BvcyA9IDAsXG4gICAgICAgIGRlc3RQb3M7XG4gICAgdmFyIHNyYyA9IGltZ0RhdGEuZGF0YTtcbiAgICB2YXIgZGVzdCA9IGNodW5rSW1nRGF0YS5kYXRhO1xuICAgIHZhciBpLCBqLCB0aGlzQ2h1bmtIZWlnaHQsIGVsZW1zSW5UaGlzQ2h1bms7XG5cbiAgICBpZiAoaW1nRGF0YS5raW5kID09PSBfdXRpbC5JbWFnZUtpbmQuR1JBWVNDQUxFXzFCUFApIHtcbiAgICAgIHZhciBzcmNMZW5ndGggPSBzcmMuYnl0ZUxlbmd0aDtcbiAgICAgIHZhciBkZXN0MzIgPSBuZXcgVWludDMyQXJyYXkoZGVzdC5idWZmZXIsIDAsIGRlc3QuYnl0ZUxlbmd0aCA+PiAyKTtcbiAgICAgIHZhciBkZXN0MzJEYXRhTGVuZ3RoID0gZGVzdDMyLmxlbmd0aDtcbiAgICAgIHZhciBmdWxsU3JjRGlmZiA9IHdpZHRoICsgNyA+PiAzO1xuICAgICAgdmFyIHdoaXRlID0gMHhmZmZmZmZmZjtcbiAgICAgIHZhciBibGFjayA9IF91dGlsLklzTGl0dGxlRW5kaWFuQ2FjaGVkLnZhbHVlID8gMHhmZjAwMDAwMCA6IDB4MDAwMDAwZmY7XG5cbiAgICAgIGZvciAoaSA9IDA7IGkgPCB0b3RhbENodW5rczsgaSsrKSB7XG4gICAgICAgIHRoaXNDaHVua0hlaWdodCA9IGkgPCBmdWxsQ2h1bmtzID8gRlVMTF9DSFVOS19IRUlHSFQgOiBwYXJ0aWFsQ2h1bmtIZWlnaHQ7XG4gICAgICAgIGRlc3RQb3MgPSAwO1xuXG4gICAgICAgIGZvciAoaiA9IDA7IGogPCB0aGlzQ2h1bmtIZWlnaHQ7IGorKykge1xuICAgICAgICAgIHZhciBzcmNEaWZmID0gc3JjTGVuZ3RoIC0gc3JjUG9zO1xuICAgICAgICAgIHZhciBrID0gMDtcbiAgICAgICAgICB2YXIga0VuZCA9IHNyY0RpZmYgPiBmdWxsU3JjRGlmZiA/IHdpZHRoIDogc3JjRGlmZiAqIDggLSA3O1xuICAgICAgICAgIHZhciBrRW5kVW5yb2xsZWQgPSBrRW5kICYgfjc7XG4gICAgICAgICAgdmFyIG1hc2sgPSAwO1xuICAgICAgICAgIHZhciBzcmNCeXRlID0gMDtcblxuICAgICAgICAgIGZvciAoOyBrIDwga0VuZFVucm9sbGVkOyBrICs9IDgpIHtcbiAgICAgICAgICAgIHNyY0J5dGUgPSBzcmNbc3JjUG9zKytdO1xuICAgICAgICAgICAgZGVzdDMyW2Rlc3RQb3MrK10gPSBzcmNCeXRlICYgMTI4ID8gd2hpdGUgOiBibGFjaztcbiAgICAgICAgICAgIGRlc3QzMltkZXN0UG9zKytdID0gc3JjQnl0ZSAmIDY0ID8gd2hpdGUgOiBibGFjaztcbiAgICAgICAgICAgIGRlc3QzMltkZXN0UG9zKytdID0gc3JjQnl0ZSAmIDMyID8gd2hpdGUgOiBibGFjaztcbiAgICAgICAgICAgIGRlc3QzMltkZXN0UG9zKytdID0gc3JjQnl0ZSAmIDE2ID8gd2hpdGUgOiBibGFjaztcbiAgICAgICAgICAgIGRlc3QzMltkZXN0UG9zKytdID0gc3JjQnl0ZSAmIDggPyB3aGl0ZSA6IGJsYWNrO1xuICAgICAgICAgICAgZGVzdDMyW2Rlc3RQb3MrK10gPSBzcmNCeXRlICYgNCA/IHdoaXRlIDogYmxhY2s7XG4gICAgICAgICAgICBkZXN0MzJbZGVzdFBvcysrXSA9IHNyY0J5dGUgJiAyID8gd2hpdGUgOiBibGFjaztcbiAgICAgICAgICAgIGRlc3QzMltkZXN0UG9zKytdID0gc3JjQnl0ZSAmIDEgPyB3aGl0ZSA6IGJsYWNrO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGZvciAoOyBrIDwga0VuZDsgaysrKSB7XG4gICAgICAgICAgICBpZiAobWFzayA9PT0gMCkge1xuICAgICAgICAgICAgICBzcmNCeXRlID0gc3JjW3NyY1BvcysrXTtcbiAgICAgICAgICAgICAgbWFzayA9IDEyODtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZGVzdDMyW2Rlc3RQb3MrK10gPSBzcmNCeXRlICYgbWFzayA/IHdoaXRlIDogYmxhY2s7XG4gICAgICAgICAgICBtYXNrID4+PSAxO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHdoaWxlIChkZXN0UG9zIDwgZGVzdDMyRGF0YUxlbmd0aCkge1xuICAgICAgICAgIGRlc3QzMltkZXN0UG9zKytdID0gMDtcbiAgICAgICAgfVxuXG4gICAgICAgIGN0eC5wdXRJbWFnZURhdGEoY2h1bmtJbWdEYXRhLCAwLCBpICogRlVMTF9DSFVOS19IRUlHSFQpO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoaW1nRGF0YS5raW5kID09PSBfdXRpbC5JbWFnZUtpbmQuUkdCQV8zMkJQUCkge1xuICAgICAgaiA9IDA7XG4gICAgICBlbGVtc0luVGhpc0NodW5rID0gd2lkdGggKiBGVUxMX0NIVU5LX0hFSUdIVCAqIDQ7XG5cbiAgICAgIGZvciAoaSA9IDA7IGkgPCBmdWxsQ2h1bmtzOyBpKyspIHtcbiAgICAgICAgZGVzdC5zZXQoc3JjLnN1YmFycmF5KHNyY1Bvcywgc3JjUG9zICsgZWxlbXNJblRoaXNDaHVuaykpO1xuICAgICAgICBzcmNQb3MgKz0gZWxlbXNJblRoaXNDaHVuaztcbiAgICAgICAgY3R4LnB1dEltYWdlRGF0YShjaHVua0ltZ0RhdGEsIDAsIGopO1xuICAgICAgICBqICs9IEZVTExfQ0hVTktfSEVJR0hUO1xuICAgICAgfVxuXG4gICAgICBpZiAoaSA8IHRvdGFsQ2h1bmtzKSB7XG4gICAgICAgIGVsZW1zSW5UaGlzQ2h1bmsgPSB3aWR0aCAqIHBhcnRpYWxDaHVua0hlaWdodCAqIDQ7XG4gICAgICAgIGRlc3Quc2V0KHNyYy5zdWJhcnJheShzcmNQb3MsIHNyY1BvcyArIGVsZW1zSW5UaGlzQ2h1bmspKTtcbiAgICAgICAgY3R4LnB1dEltYWdlRGF0YShjaHVua0ltZ0RhdGEsIDAsIGopO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoaW1nRGF0YS5raW5kID09PSBfdXRpbC5JbWFnZUtpbmQuUkdCXzI0QlBQKSB7XG4gICAgICB0aGlzQ2h1bmtIZWlnaHQgPSBGVUxMX0NIVU5LX0hFSUdIVDtcbiAgICAgIGVsZW1zSW5UaGlzQ2h1bmsgPSB3aWR0aCAqIHRoaXNDaHVua0hlaWdodDtcblxuICAgICAgZm9yIChpID0gMDsgaSA8IHRvdGFsQ2h1bmtzOyBpKyspIHtcbiAgICAgICAgaWYgKGkgPj0gZnVsbENodW5rcykge1xuICAgICAgICAgIHRoaXNDaHVua0hlaWdodCA9IHBhcnRpYWxDaHVua0hlaWdodDtcbiAgICAgICAgICBlbGVtc0luVGhpc0NodW5rID0gd2lkdGggKiB0aGlzQ2h1bmtIZWlnaHQ7XG4gICAgICAgIH1cblxuICAgICAgICBkZXN0UG9zID0gMDtcblxuICAgICAgICBmb3IgKGogPSBlbGVtc0luVGhpc0NodW5rOyBqLS07KSB7XG4gICAgICAgICAgZGVzdFtkZXN0UG9zKytdID0gc3JjW3NyY1BvcysrXTtcbiAgICAgICAgICBkZXN0W2Rlc3RQb3MrK10gPSBzcmNbc3JjUG9zKytdO1xuICAgICAgICAgIGRlc3RbZGVzdFBvcysrXSA9IHNyY1tzcmNQb3MrK107XG4gICAgICAgICAgZGVzdFtkZXN0UG9zKytdID0gMjU1O1xuICAgICAgICB9XG5cbiAgICAgICAgY3R4LnB1dEltYWdlRGF0YShjaHVua0ltZ0RhdGEsIDAsIGkgKiBGVUxMX0NIVU5LX0hFSUdIVCk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgYmFkIGltYWdlIGtpbmQ6ICR7aW1nRGF0YS5raW5kfWApO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHB1dEJpbmFyeUltYWdlTWFzayhjdHgsIGltZ0RhdGEpIHtcbiAgICB2YXIgaGVpZ2h0ID0gaW1nRGF0YS5oZWlnaHQsXG4gICAgICAgIHdpZHRoID0gaW1nRGF0YS53aWR0aDtcbiAgICB2YXIgcGFydGlhbENodW5rSGVpZ2h0ID0gaGVpZ2h0ICUgRlVMTF9DSFVOS19IRUlHSFQ7XG4gICAgdmFyIGZ1bGxDaHVua3MgPSAoaGVpZ2h0IC0gcGFydGlhbENodW5rSGVpZ2h0KSAvIEZVTExfQ0hVTktfSEVJR0hUO1xuICAgIHZhciB0b3RhbENodW5rcyA9IHBhcnRpYWxDaHVua0hlaWdodCA9PT0gMCA/IGZ1bGxDaHVua3MgOiBmdWxsQ2h1bmtzICsgMTtcbiAgICB2YXIgY2h1bmtJbWdEYXRhID0gY3R4LmNyZWF0ZUltYWdlRGF0YSh3aWR0aCwgRlVMTF9DSFVOS19IRUlHSFQpO1xuICAgIHZhciBzcmNQb3MgPSAwO1xuICAgIHZhciBzcmMgPSBpbWdEYXRhLmRhdGE7XG4gICAgdmFyIGRlc3QgPSBjaHVua0ltZ0RhdGEuZGF0YTtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdG90YWxDaHVua3M7IGkrKykge1xuICAgICAgdmFyIHRoaXNDaHVua0hlaWdodCA9IGkgPCBmdWxsQ2h1bmtzID8gRlVMTF9DSFVOS19IRUlHSFQgOiBwYXJ0aWFsQ2h1bmtIZWlnaHQ7XG4gICAgICB2YXIgZGVzdFBvcyA9IDM7XG5cbiAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgdGhpc0NodW5rSGVpZ2h0OyBqKyspIHtcbiAgICAgICAgdmFyIG1hc2sgPSAwO1xuXG4gICAgICAgIGZvciAodmFyIGsgPSAwOyBrIDwgd2lkdGg7IGsrKykge1xuICAgICAgICAgIGlmICghbWFzaykge1xuICAgICAgICAgICAgdmFyIGVsZW0gPSBzcmNbc3JjUG9zKytdO1xuICAgICAgICAgICAgbWFzayA9IDEyODtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBkZXN0W2Rlc3RQb3NdID0gZWxlbSAmIG1hc2sgPyAwIDogMjU1O1xuICAgICAgICAgIGRlc3RQb3MgKz0gNDtcbiAgICAgICAgICBtYXNrID4+PSAxO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGN0eC5wdXRJbWFnZURhdGEoY2h1bmtJbWdEYXRhLCAwLCBpICogRlVMTF9DSFVOS19IRUlHSFQpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGNvcHlDdHhTdGF0ZShzb3VyY2VDdHgsIGRlc3RDdHgpIHtcbiAgICB2YXIgcHJvcGVydGllcyA9IFtcInN0cm9rZVN0eWxlXCIsIFwiZmlsbFN0eWxlXCIsIFwiZmlsbFJ1bGVcIiwgXCJnbG9iYWxBbHBoYVwiLCBcImxpbmVXaWR0aFwiLCBcImxpbmVDYXBcIiwgXCJsaW5lSm9pblwiLCBcIm1pdGVyTGltaXRcIiwgXCJnbG9iYWxDb21wb3NpdGVPcGVyYXRpb25cIiwgXCJmb250XCJdO1xuXG4gICAgZm9yICh2YXIgaSA9IDAsIGlpID0gcHJvcGVydGllcy5sZW5ndGg7IGkgPCBpaTsgaSsrKSB7XG4gICAgICB2YXIgcHJvcGVydHkgPSBwcm9wZXJ0aWVzW2ldO1xuXG4gICAgICBpZiAoc291cmNlQ3R4W3Byb3BlcnR5XSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGRlc3RDdHhbcHJvcGVydHldID0gc291cmNlQ3R4W3Byb3BlcnR5XTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoc291cmNlQ3R4LnNldExpbmVEYXNoICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGRlc3RDdHguc2V0TGluZURhc2goc291cmNlQ3R4LmdldExpbmVEYXNoKCkpO1xuICAgICAgZGVzdEN0eC5saW5lRGFzaE9mZnNldCA9IHNvdXJjZUN0eC5saW5lRGFzaE9mZnNldDtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiByZXNldEN0eFRvRGVmYXVsdChjdHgpIHtcbiAgICBjdHguc3Ryb2tlU3R5bGUgPSBcIiMwMDAwMDBcIjtcbiAgICBjdHguZmlsbFN0eWxlID0gXCIjMDAwMDAwXCI7XG4gICAgY3R4LmZpbGxSdWxlID0gXCJub256ZXJvXCI7XG4gICAgY3R4Lmdsb2JhbEFscGhhID0gMTtcbiAgICBjdHgubGluZVdpZHRoID0gMTtcbiAgICBjdHgubGluZUNhcCA9IFwiYnV0dFwiO1xuICAgIGN0eC5saW5lSm9pbiA9IFwibWl0ZXJcIjtcbiAgICBjdHgubWl0ZXJMaW1pdCA9IDEwO1xuICAgIGN0eC5nbG9iYWxDb21wb3NpdGVPcGVyYXRpb24gPSBcInNvdXJjZS1vdmVyXCI7XG4gICAgY3R4LmZvbnQgPSBcIjEwcHggc2Fucy1zZXJpZlwiO1xuXG4gICAgaWYgKGN0eC5zZXRMaW5lRGFzaCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBjdHguc2V0TGluZURhc2goW10pO1xuICAgICAgY3R4LmxpbmVEYXNoT2Zmc2V0ID0gMDtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBjb21wb3NlU01hc2tCYWNrZHJvcChieXRlcywgcjAsIGcwLCBiMCkge1xuICAgIHZhciBsZW5ndGggPSBieXRlcy5sZW5ndGg7XG5cbiAgICBmb3IgKHZhciBpID0gMzsgaSA8IGxlbmd0aDsgaSArPSA0KSB7XG4gICAgICB2YXIgYWxwaGEgPSBieXRlc1tpXTtcblxuICAgICAgaWYgKGFscGhhID09PSAwKSB7XG4gICAgICAgIGJ5dGVzW2kgLSAzXSA9IHIwO1xuICAgICAgICBieXRlc1tpIC0gMl0gPSBnMDtcbiAgICAgICAgYnl0ZXNbaSAtIDFdID0gYjA7XG4gICAgICB9IGVsc2UgaWYgKGFscGhhIDwgMjU1KSB7XG4gICAgICAgIHZhciBhbHBoYV8gPSAyNTUgLSBhbHBoYTtcbiAgICAgICAgYnl0ZXNbaSAtIDNdID0gYnl0ZXNbaSAtIDNdICogYWxwaGEgKyByMCAqIGFscGhhXyA+PiA4O1xuICAgICAgICBieXRlc1tpIC0gMl0gPSBieXRlc1tpIC0gMl0gKiBhbHBoYSArIGcwICogYWxwaGFfID4+IDg7XG4gICAgICAgIGJ5dGVzW2kgLSAxXSA9IGJ5dGVzW2kgLSAxXSAqIGFscGhhICsgYjAgKiBhbHBoYV8gPj4gODtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBjb21wb3NlU01hc2tBbHBoYShtYXNrRGF0YSwgbGF5ZXJEYXRhLCB0cmFuc2Zlck1hcCkge1xuICAgIHZhciBsZW5ndGggPSBtYXNrRGF0YS5sZW5ndGg7XG4gICAgdmFyIHNjYWxlID0gMSAvIDI1NTtcblxuICAgIGZvciAodmFyIGkgPSAzOyBpIDwgbGVuZ3RoOyBpICs9IDQpIHtcbiAgICAgIHZhciBhbHBoYSA9IHRyYW5zZmVyTWFwID8gdHJhbnNmZXJNYXBbbWFza0RhdGFbaV1dIDogbWFza0RhdGFbaV07XG4gICAgICBsYXllckRhdGFbaV0gPSBsYXllckRhdGFbaV0gKiBhbHBoYSAqIHNjYWxlIHwgMDtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBjb21wb3NlU01hc2tMdW1pbm9zaXR5KG1hc2tEYXRhLCBsYXllckRhdGEsIHRyYW5zZmVyTWFwKSB7XG4gICAgdmFyIGxlbmd0aCA9IG1hc2tEYXRhLmxlbmd0aDtcblxuICAgIGZvciAodmFyIGkgPSAzOyBpIDwgbGVuZ3RoOyBpICs9IDQpIHtcbiAgICAgIHZhciB5ID0gbWFza0RhdGFbaSAtIDNdICogNzcgKyBtYXNrRGF0YVtpIC0gMl0gKiAxNTIgKyBtYXNrRGF0YVtpIC0gMV0gKiAyODtcbiAgICAgIGxheWVyRGF0YVtpXSA9IHRyYW5zZmVyTWFwID8gbGF5ZXJEYXRhW2ldICogdHJhbnNmZXJNYXBbeSA+PiA4XSA+PiA4IDogbGF5ZXJEYXRhW2ldICogeSA+PiAxNjtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBnZW5lcmljQ29tcG9zZVNNYXNrKG1hc2tDdHgsIGxheWVyQ3R4LCB3aWR0aCwgaGVpZ2h0LCBzdWJ0eXBlLCBiYWNrZHJvcCwgdHJhbnNmZXJNYXApIHtcbiAgICB2YXIgaGFzQmFja2Ryb3AgPSAhIWJhY2tkcm9wO1xuICAgIHZhciByMCA9IGhhc0JhY2tkcm9wID8gYmFja2Ryb3BbMF0gOiAwO1xuICAgIHZhciBnMCA9IGhhc0JhY2tkcm9wID8gYmFja2Ryb3BbMV0gOiAwO1xuICAgIHZhciBiMCA9IGhhc0JhY2tkcm9wID8gYmFja2Ryb3BbMl0gOiAwO1xuICAgIHZhciBjb21wb3NlRm47XG5cbiAgICBpZiAoc3VidHlwZSA9PT0gXCJMdW1pbm9zaXR5XCIpIHtcbiAgICAgIGNvbXBvc2VGbiA9IGNvbXBvc2VTTWFza0x1bWlub3NpdHk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbXBvc2VGbiA9IGNvbXBvc2VTTWFza0FscGhhO1xuICAgIH1cblxuICAgIHZhciBQSVhFTFNfVE9fUFJPQ0VTUyA9IDEwNDg1NzY7XG4gICAgdmFyIGNodW5rU2l6ZSA9IE1hdGgubWluKGhlaWdodCwgTWF0aC5jZWlsKFBJWEVMU19UT19QUk9DRVNTIC8gd2lkdGgpKTtcblxuICAgIGZvciAodmFyIHJvdyA9IDA7IHJvdyA8IGhlaWdodDsgcm93ICs9IGNodW5rU2l6ZSkge1xuICAgICAgdmFyIGNodW5rSGVpZ2h0ID0gTWF0aC5taW4oY2h1bmtTaXplLCBoZWlnaHQgLSByb3cpO1xuICAgICAgdmFyIG1hc2tEYXRhID0gbWFza0N0eC5nZXRJbWFnZURhdGEoMCwgcm93LCB3aWR0aCwgY2h1bmtIZWlnaHQpO1xuICAgICAgdmFyIGxheWVyRGF0YSA9IGxheWVyQ3R4LmdldEltYWdlRGF0YSgwLCByb3csIHdpZHRoLCBjaHVua0hlaWdodCk7XG5cbiAgICAgIGlmIChoYXNCYWNrZHJvcCkge1xuICAgICAgICBjb21wb3NlU01hc2tCYWNrZHJvcChtYXNrRGF0YS5kYXRhLCByMCwgZzAsIGIwKTtcbiAgICAgIH1cblxuICAgICAgY29tcG9zZUZuKG1hc2tEYXRhLmRhdGEsIGxheWVyRGF0YS5kYXRhLCB0cmFuc2Zlck1hcCk7XG4gICAgICBtYXNrQ3R4LnB1dEltYWdlRGF0YShsYXllckRhdGEsIDAsIHJvdyk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gY29tcG9zZVNNYXNrKGN0eCwgc21hc2ssIGxheWVyQ3R4LCB3ZWJHTENvbnRleHQpIHtcbiAgICB2YXIgbWFzayA9IHNtYXNrLmNhbnZhcztcbiAgICB2YXIgbWFza0N0eCA9IHNtYXNrLmNvbnRleHQ7XG4gICAgY3R4LnNldFRyYW5zZm9ybShzbWFzay5zY2FsZVgsIDAsIDAsIHNtYXNrLnNjYWxlWSwgc21hc2sub2Zmc2V0WCwgc21hc2sub2Zmc2V0WSk7XG4gICAgdmFyIGJhY2tkcm9wID0gc21hc2suYmFja2Ryb3AgfHwgbnVsbDtcblxuICAgIGlmICghc21hc2sudHJhbnNmZXJNYXAgJiYgd2ViR0xDb250ZXh0LmlzRW5hYmxlZCkge1xuICAgICAgY29uc3QgY29tcG9zZWQgPSB3ZWJHTENvbnRleHQuY29tcG9zZVNNYXNrKHtcbiAgICAgICAgbGF5ZXI6IGxheWVyQ3R4LmNhbnZhcyxcbiAgICAgICAgbWFzayxcbiAgICAgICAgcHJvcGVydGllczoge1xuICAgICAgICAgIHN1YnR5cGU6IHNtYXNrLnN1YnR5cGUsXG4gICAgICAgICAgYmFja2Ryb3BcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICBjdHguc2V0VHJhbnNmb3JtKDEsIDAsIDAsIDEsIDAsIDApO1xuICAgICAgY3R4LmRyYXdJbWFnZShjb21wb3NlZCwgc21hc2sub2Zmc2V0WCwgc21hc2sub2Zmc2V0WSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgZ2VuZXJpY0NvbXBvc2VTTWFzayhtYXNrQ3R4LCBsYXllckN0eCwgbWFzay53aWR0aCwgbWFzay5oZWlnaHQsIHNtYXNrLnN1YnR5cGUsIGJhY2tkcm9wLCBzbWFzay50cmFuc2Zlck1hcCk7XG4gICAgY3R4LmRyYXdJbWFnZShtYXNrLCAwLCAwKTtcbiAgfVxuXG4gIHZhciBMSU5FX0NBUF9TVFlMRVMgPSBbXCJidXR0XCIsIFwicm91bmRcIiwgXCJzcXVhcmVcIl07XG4gIHZhciBMSU5FX0pPSU5fU1RZTEVTID0gW1wibWl0ZXJcIiwgXCJyb3VuZFwiLCBcImJldmVsXCJdO1xuICB2YXIgTk9STUFMX0NMSVAgPSB7fTtcbiAgdmFyIEVPX0NMSVAgPSB7fTtcbiAgQ2FudmFzR3JhcGhpY3MucHJvdG90eXBlID0ge1xuICAgIGJlZ2luRHJhd2luZyh7XG4gICAgICB0cmFuc2Zvcm0sXG4gICAgICB2aWV3cG9ydCxcbiAgICAgIHRyYW5zcGFyZW5jeSA9IGZhbHNlLFxuICAgICAgYmFja2dyb3VuZCA9IG51bGxcbiAgICB9KSB7XG4gICAgICB2YXIgd2lkdGggPSB0aGlzLmN0eC5jYW52YXMud2lkdGg7XG4gICAgICB2YXIgaGVpZ2h0ID0gdGhpcy5jdHguY2FudmFzLmhlaWdodDtcbiAgICAgIHRoaXMuY3R4LnNhdmUoKTtcbiAgICAgIHRoaXMuY3R4LmZpbGxTdHlsZSA9IGJhY2tncm91bmQgfHwgXCJyZ2IoMjU1LCAyNTUsIDI1NSlcIjtcbiAgICAgIHRoaXMuY3R4LmZpbGxSZWN0KDAsIDAsIHdpZHRoLCBoZWlnaHQpO1xuICAgICAgdGhpcy5jdHgucmVzdG9yZSgpO1xuXG4gICAgICBpZiAodHJhbnNwYXJlbmN5KSB7XG4gICAgICAgIHZhciB0cmFuc3BhcmVudENhbnZhcyA9IHRoaXMuY2FjaGVkQ2FudmFzZXMuZ2V0Q2FudmFzKFwidHJhbnNwYXJlbnRcIiwgd2lkdGgsIGhlaWdodCwgdHJ1ZSk7XG4gICAgICAgIHRoaXMuY29tcG9zaXRlQ3R4ID0gdGhpcy5jdHg7XG4gICAgICAgIHRoaXMudHJhbnNwYXJlbnRDYW52YXMgPSB0cmFuc3BhcmVudENhbnZhcy5jYW52YXM7XG4gICAgICAgIHRoaXMuY3R4ID0gdHJhbnNwYXJlbnRDYW52YXMuY29udGV4dDtcbiAgICAgICAgdGhpcy5jdHguc2F2ZSgpO1xuICAgICAgICB0aGlzLmN0eC50cmFuc2Zvcm0uYXBwbHkodGhpcy5jdHgsIHRoaXMuY29tcG9zaXRlQ3R4Lm1vekN1cnJlbnRUcmFuc2Zvcm0pO1xuICAgICAgfVxuXG4gICAgICB0aGlzLmN0eC5zYXZlKCk7XG4gICAgICByZXNldEN0eFRvRGVmYXVsdCh0aGlzLmN0eCk7XG5cbiAgICAgIGlmICh0cmFuc2Zvcm0pIHtcbiAgICAgICAgdGhpcy5jdHgudHJhbnNmb3JtLmFwcGx5KHRoaXMuY3R4LCB0cmFuc2Zvcm0pO1xuICAgICAgfVxuXG4gICAgICB0aGlzLmN0eC50cmFuc2Zvcm0uYXBwbHkodGhpcy5jdHgsIHZpZXdwb3J0LnRyYW5zZm9ybSk7XG4gICAgICB0aGlzLmJhc2VUcmFuc2Zvcm0gPSB0aGlzLmN0eC5tb3pDdXJyZW50VHJhbnNmb3JtLnNsaWNlKCk7XG5cbiAgICAgIGlmICh0aGlzLmltYWdlTGF5ZXIpIHtcbiAgICAgICAgdGhpcy5pbWFnZUxheWVyLmJlZ2luTGF5b3V0KCk7XG4gICAgICB9XG4gICAgfSxcblxuICAgIGV4ZWN1dGVPcGVyYXRvckxpc3Q6IGZ1bmN0aW9uIENhbnZhc0dyYXBoaWNzX2V4ZWN1dGVPcGVyYXRvckxpc3Qob3BlcmF0b3JMaXN0LCBleGVjdXRpb25TdGFydElkeCwgY29udGludWVDYWxsYmFjaywgc3RlcHBlcikge1xuICAgICAgdmFyIGFyZ3NBcnJheSA9IG9wZXJhdG9yTGlzdC5hcmdzQXJyYXk7XG4gICAgICB2YXIgZm5BcnJheSA9IG9wZXJhdG9yTGlzdC5mbkFycmF5O1xuICAgICAgdmFyIGkgPSBleGVjdXRpb25TdGFydElkeCB8fCAwO1xuICAgICAgdmFyIGFyZ3NBcnJheUxlbiA9IGFyZ3NBcnJheS5sZW5ndGg7XG5cbiAgICAgIGlmIChhcmdzQXJyYXlMZW4gPT09IGkpIHtcbiAgICAgICAgcmV0dXJuIGk7XG4gICAgICB9XG5cbiAgICAgIHZhciBjaHVua09wZXJhdGlvbnMgPSBhcmdzQXJyYXlMZW4gLSBpID4gRVhFQ1VUSU9OX1NURVBTICYmIHR5cGVvZiBjb250aW51ZUNhbGxiYWNrID09PSBcImZ1bmN0aW9uXCI7XG4gICAgICB2YXIgZW5kVGltZSA9IGNodW5rT3BlcmF0aW9ucyA/IERhdGUubm93KCkgKyBFWEVDVVRJT05fVElNRSA6IDA7XG4gICAgICB2YXIgc3RlcHMgPSAwO1xuICAgICAgdmFyIGNvbW1vbk9ianMgPSB0aGlzLmNvbW1vbk9ianM7XG4gICAgICB2YXIgb2JqcyA9IHRoaXMub2JqcztcbiAgICAgIHZhciBmbklkO1xuXG4gICAgICB3aGlsZSAodHJ1ZSkge1xuICAgICAgICBpZiAoc3RlcHBlciAhPT0gdW5kZWZpbmVkICYmIGkgPT09IHN0ZXBwZXIubmV4dEJyZWFrUG9pbnQpIHtcbiAgICAgICAgICBzdGVwcGVyLmJyZWFrSXQoaSwgY29udGludWVDYWxsYmFjayk7XG4gICAgICAgICAgcmV0dXJuIGk7XG4gICAgICAgIH1cblxuICAgICAgICBmbklkID0gZm5BcnJheVtpXTtcblxuICAgICAgICBpZiAoZm5JZCAhPT0gX3V0aWwuT1BTLmRlcGVuZGVuY3kpIHtcbiAgICAgICAgICB0aGlzW2ZuSWRdLmFwcGx5KHRoaXMsIGFyZ3NBcnJheVtpXSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZm9yIChjb25zdCBkZXBPYmpJZCBvZiBhcmdzQXJyYXlbaV0pIHtcbiAgICAgICAgICAgIGNvbnN0IG9ianNQb29sID0gZGVwT2JqSWQuc3RhcnRzV2l0aChcImdfXCIpID8gY29tbW9uT2JqcyA6IG9ianM7XG5cbiAgICAgICAgICAgIGlmICghb2Jqc1Bvb2wuaGFzKGRlcE9iaklkKSkge1xuICAgICAgICAgICAgICBvYmpzUG9vbC5nZXQoZGVwT2JqSWQsIGNvbnRpbnVlQ2FsbGJhY2spO1xuICAgICAgICAgICAgICByZXR1cm4gaTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpKys7XG5cbiAgICAgICAgaWYgKGkgPT09IGFyZ3NBcnJheUxlbikge1xuICAgICAgICAgIHJldHVybiBpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGNodW5rT3BlcmF0aW9ucyAmJiArK3N0ZXBzID4gRVhFQ1VUSU9OX1NURVBTKSB7XG4gICAgICAgICAgaWYgKERhdGUubm93KCkgPiBlbmRUaW1lKSB7XG4gICAgICAgICAgICBjb250aW51ZUNhbGxiYWNrKCk7XG4gICAgICAgICAgICByZXR1cm4gaTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBzdGVwcyA9IDA7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuICAgIGVuZERyYXdpbmc6IGZ1bmN0aW9uIENhbnZhc0dyYXBoaWNzX2VuZERyYXdpbmcoKSB7XG4gICAgICBpZiAodGhpcy5jdXJyZW50LmFjdGl2ZVNNYXNrICE9PSBudWxsKSB7XG4gICAgICAgIHRoaXMuZW5kU01hc2tHcm91cCgpO1xuICAgICAgfVxuXG4gICAgICB0aGlzLmN0eC5yZXN0b3JlKCk7XG5cbiAgICAgIGlmICh0aGlzLnRyYW5zcGFyZW50Q2FudmFzKSB7XG4gICAgICAgIHRoaXMuY3R4ID0gdGhpcy5jb21wb3NpdGVDdHg7XG4gICAgICAgIHRoaXMuY3R4LnNhdmUoKTtcbiAgICAgICAgdGhpcy5jdHguc2V0VHJhbnNmb3JtKDEsIDAsIDAsIDEsIDAsIDApO1xuICAgICAgICB0aGlzLmN0eC5kcmF3SW1hZ2UodGhpcy50cmFuc3BhcmVudENhbnZhcywgMCwgMCk7XG4gICAgICAgIHRoaXMuY3R4LnJlc3RvcmUoKTtcbiAgICAgICAgdGhpcy50cmFuc3BhcmVudENhbnZhcyA9IG51bGw7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuY2FjaGVkQ2FudmFzZXMuY2xlYXIoKTtcbiAgICAgIHRoaXMud2ViR0xDb250ZXh0LmNsZWFyKCk7XG5cbiAgICAgIGlmICh0aGlzLmltYWdlTGF5ZXIpIHtcbiAgICAgICAgdGhpcy5pbWFnZUxheWVyLmVuZExheW91dCgpO1xuICAgICAgfVxuICAgIH0sXG4gICAgc2V0TGluZVdpZHRoOiBmdW5jdGlvbiBDYW52YXNHcmFwaGljc19zZXRMaW5lV2lkdGgod2lkdGgpIHtcbiAgICAgIHRoaXMuY3VycmVudC5saW5lV2lkdGggPSB3aWR0aDtcbiAgICAgIHRoaXMuY3R4LmxpbmVXaWR0aCA9IHdpZHRoO1xuICAgIH0sXG4gICAgc2V0TGluZUNhcDogZnVuY3Rpb24gQ2FudmFzR3JhcGhpY3Nfc2V0TGluZUNhcChzdHlsZSkge1xuICAgICAgdGhpcy5jdHgubGluZUNhcCA9IExJTkVfQ0FQX1NUWUxFU1tzdHlsZV07XG4gICAgfSxcbiAgICBzZXRMaW5lSm9pbjogZnVuY3Rpb24gQ2FudmFzR3JhcGhpY3Nfc2V0TGluZUpvaW4oc3R5bGUpIHtcbiAgICAgIHRoaXMuY3R4LmxpbmVKb2luID0gTElORV9KT0lOX1NUWUxFU1tzdHlsZV07XG4gICAgfSxcbiAgICBzZXRNaXRlckxpbWl0OiBmdW5jdGlvbiBDYW52YXNHcmFwaGljc19zZXRNaXRlckxpbWl0KGxpbWl0KSB7XG4gICAgICB0aGlzLmN0eC5taXRlckxpbWl0ID0gbGltaXQ7XG4gICAgfSxcbiAgICBzZXREYXNoOiBmdW5jdGlvbiBDYW52YXNHcmFwaGljc19zZXREYXNoKGRhc2hBcnJheSwgZGFzaFBoYXNlKSB7XG4gICAgICB2YXIgY3R4ID0gdGhpcy5jdHg7XG5cbiAgICAgIGlmIChjdHguc2V0TGluZURhc2ggIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBjdHguc2V0TGluZURhc2goZGFzaEFycmF5KTtcbiAgICAgICAgY3R4LmxpbmVEYXNoT2Zmc2V0ID0gZGFzaFBoYXNlO1xuICAgICAgfVxuICAgIH0sXG5cbiAgICBzZXRSZW5kZXJpbmdJbnRlbnQoaW50ZW50KSB7fSxcblxuICAgIHNldEZsYXRuZXNzKGZsYXRuZXNzKSB7fSxcblxuICAgIHNldEdTdGF0ZTogZnVuY3Rpb24gQ2FudmFzR3JhcGhpY3Nfc2V0R1N0YXRlKHN0YXRlcykge1xuICAgICAgZm9yICh2YXIgaSA9IDAsIGlpID0gc3RhdGVzLmxlbmd0aDsgaSA8IGlpOyBpKyspIHtcbiAgICAgICAgdmFyIHN0YXRlID0gc3RhdGVzW2ldO1xuICAgICAgICB2YXIga2V5ID0gc3RhdGVbMF07XG4gICAgICAgIHZhciB2YWx1ZSA9IHN0YXRlWzFdO1xuXG4gICAgICAgIHN3aXRjaCAoa2V5KSB7XG4gICAgICAgICAgY2FzZSBcIkxXXCI6XG4gICAgICAgICAgICB0aGlzLnNldExpbmVXaWR0aCh2YWx1ZSk7XG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgIGNhc2UgXCJMQ1wiOlxuICAgICAgICAgICAgdGhpcy5zZXRMaW5lQ2FwKHZhbHVlKTtcbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgY2FzZSBcIkxKXCI6XG4gICAgICAgICAgICB0aGlzLnNldExpbmVKb2luKHZhbHVlKTtcbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgY2FzZSBcIk1MXCI6XG4gICAgICAgICAgICB0aGlzLnNldE1pdGVyTGltaXQodmFsdWUpO1xuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICBjYXNlIFwiRFwiOlxuICAgICAgICAgICAgdGhpcy5zZXREYXNoKHZhbHVlWzBdLCB2YWx1ZVsxXSk7XG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgIGNhc2UgXCJSSVwiOlxuICAgICAgICAgICAgdGhpcy5zZXRSZW5kZXJpbmdJbnRlbnQodmFsdWUpO1xuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICBjYXNlIFwiRkxcIjpcbiAgICAgICAgICAgIHRoaXMuc2V0RmxhdG5lc3ModmFsdWUpO1xuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICBjYXNlIFwiRm9udFwiOlxuICAgICAgICAgICAgdGhpcy5zZXRGb250KHZhbHVlWzBdLCB2YWx1ZVsxXSk7XG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgIGNhc2UgXCJDQVwiOlxuICAgICAgICAgICAgdGhpcy5jdXJyZW50LnN0cm9rZUFscGhhID0gc3RhdGVbMV07XG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgIGNhc2UgXCJjYVwiOlxuICAgICAgICAgICAgdGhpcy5jdXJyZW50LmZpbGxBbHBoYSA9IHN0YXRlWzFdO1xuICAgICAgICAgICAgdGhpcy5jdHguZ2xvYmFsQWxwaGEgPSBzdGF0ZVsxXTtcbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgY2FzZSBcIkJNXCI6XG4gICAgICAgICAgICB0aGlzLmN0eC5nbG9iYWxDb21wb3NpdGVPcGVyYXRpb24gPSB2YWx1ZTtcbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgY2FzZSBcIlNNYXNrXCI6XG4gICAgICAgICAgICBpZiAodGhpcy5jdXJyZW50LmFjdGl2ZVNNYXNrKSB7XG4gICAgICAgICAgICAgIGlmICh0aGlzLnN0YXRlU3RhY2subGVuZ3RoID4gMCAmJiB0aGlzLnN0YXRlU3RhY2tbdGhpcy5zdGF0ZVN0YWNrLmxlbmd0aCAtIDFdLmFjdGl2ZVNNYXNrID09PSB0aGlzLmN1cnJlbnQuYWN0aXZlU01hc2spIHtcbiAgICAgICAgICAgICAgICB0aGlzLnN1c3BlbmRTTWFza0dyb3VwKCk7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5lbmRTTWFza0dyb3VwKCk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdGhpcy5jdXJyZW50LmFjdGl2ZVNNYXNrID0gdmFsdWUgPyB0aGlzLnRlbXBTTWFzayA6IG51bGw7XG5cbiAgICAgICAgICAgIGlmICh0aGlzLmN1cnJlbnQuYWN0aXZlU01hc2spIHtcbiAgICAgICAgICAgICAgdGhpcy5iZWdpblNNYXNrR3JvdXAoKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdGhpcy50ZW1wU01hc2sgPSBudWxsO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuICAgIGJlZ2luU01hc2tHcm91cDogZnVuY3Rpb24gQ2FudmFzR3JhcGhpY3NfYmVnaW5TTWFza0dyb3VwKCkge1xuICAgICAgdmFyIGFjdGl2ZVNNYXNrID0gdGhpcy5jdXJyZW50LmFjdGl2ZVNNYXNrO1xuICAgICAgdmFyIGRyYXduV2lkdGggPSBhY3RpdmVTTWFzay5jYW52YXMud2lkdGg7XG4gICAgICB2YXIgZHJhd25IZWlnaHQgPSBhY3RpdmVTTWFzay5jYW52YXMuaGVpZ2h0O1xuICAgICAgdmFyIGNhY2hlSWQgPSBcInNtYXNrR3JvdXBBdFwiICsgdGhpcy5ncm91cExldmVsO1xuICAgICAgdmFyIHNjcmF0Y2hDYW52YXMgPSB0aGlzLmNhY2hlZENhbnZhc2VzLmdldENhbnZhcyhjYWNoZUlkLCBkcmF3bldpZHRoLCBkcmF3bkhlaWdodCwgdHJ1ZSk7XG4gICAgICB2YXIgY3VycmVudEN0eCA9IHRoaXMuY3R4O1xuICAgICAgdmFyIGN1cnJlbnRUcmFuc2Zvcm0gPSBjdXJyZW50Q3R4Lm1vekN1cnJlbnRUcmFuc2Zvcm07XG4gICAgICB0aGlzLmN0eC5zYXZlKCk7XG4gICAgICB2YXIgZ3JvdXBDdHggPSBzY3JhdGNoQ2FudmFzLmNvbnRleHQ7XG4gICAgICBncm91cEN0eC5zY2FsZSgxIC8gYWN0aXZlU01hc2suc2NhbGVYLCAxIC8gYWN0aXZlU01hc2suc2NhbGVZKTtcbiAgICAgIGdyb3VwQ3R4LnRyYW5zbGF0ZSgtYWN0aXZlU01hc2sub2Zmc2V0WCwgLWFjdGl2ZVNNYXNrLm9mZnNldFkpO1xuICAgICAgZ3JvdXBDdHgudHJhbnNmb3JtLmFwcGx5KGdyb3VwQ3R4LCBjdXJyZW50VHJhbnNmb3JtKTtcbiAgICAgIGFjdGl2ZVNNYXNrLnN0YXJ0VHJhbnNmb3JtSW52ZXJzZSA9IGdyb3VwQ3R4Lm1vekN1cnJlbnRUcmFuc2Zvcm1JbnZlcnNlO1xuICAgICAgY29weUN0eFN0YXRlKGN1cnJlbnRDdHgsIGdyb3VwQ3R4KTtcbiAgICAgIHRoaXMuY3R4ID0gZ3JvdXBDdHg7XG4gICAgICB0aGlzLnNldEdTdGF0ZShbW1wiQk1cIiwgXCJzb3VyY2Utb3ZlclwiXSwgW1wiY2FcIiwgMV0sIFtcIkNBXCIsIDFdXSk7XG4gICAgICB0aGlzLmdyb3VwU3RhY2sucHVzaChjdXJyZW50Q3R4KTtcbiAgICAgIHRoaXMuZ3JvdXBMZXZlbCsrO1xuICAgIH0sXG4gICAgc3VzcGVuZFNNYXNrR3JvdXA6IGZ1bmN0aW9uIENhbnZhc0dyYXBoaWNzX2VuZFNNYXNrR3JvdXAoKSB7XG4gICAgICB2YXIgZ3JvdXBDdHggPSB0aGlzLmN0eDtcbiAgICAgIHRoaXMuZ3JvdXBMZXZlbC0tO1xuICAgICAgdGhpcy5jdHggPSB0aGlzLmdyb3VwU3RhY2sucG9wKCk7XG4gICAgICBjb21wb3NlU01hc2sodGhpcy5jdHgsIHRoaXMuY3VycmVudC5hY3RpdmVTTWFzaywgZ3JvdXBDdHgsIHRoaXMud2ViR0xDb250ZXh0KTtcbiAgICAgIHRoaXMuY3R4LnJlc3RvcmUoKTtcbiAgICAgIHRoaXMuY3R4LnNhdmUoKTtcbiAgICAgIGNvcHlDdHhTdGF0ZShncm91cEN0eCwgdGhpcy5jdHgpO1xuICAgICAgdGhpcy5jdXJyZW50LnJlc3VtZVNNYXNrQ3R4ID0gZ3JvdXBDdHg7XG5cbiAgICAgIHZhciBkZWx0YVRyYW5zZm9ybSA9IF91dGlsLlV0aWwudHJhbnNmb3JtKHRoaXMuY3VycmVudC5hY3RpdmVTTWFzay5zdGFydFRyYW5zZm9ybUludmVyc2UsIGdyb3VwQ3R4Lm1vekN1cnJlbnRUcmFuc2Zvcm0pO1xuXG4gICAgICB0aGlzLmN0eC50cmFuc2Zvcm0uYXBwbHkodGhpcy5jdHgsIGRlbHRhVHJhbnNmb3JtKTtcbiAgICAgIGdyb3VwQ3R4LnNhdmUoKTtcbiAgICAgIGdyb3VwQ3R4LnNldFRyYW5zZm9ybSgxLCAwLCAwLCAxLCAwLCAwKTtcbiAgICAgIGdyb3VwQ3R4LmNsZWFyUmVjdCgwLCAwLCBncm91cEN0eC5jYW52YXMud2lkdGgsIGdyb3VwQ3R4LmNhbnZhcy5oZWlnaHQpO1xuICAgICAgZ3JvdXBDdHgucmVzdG9yZSgpO1xuICAgIH0sXG4gICAgcmVzdW1lU01hc2tHcm91cDogZnVuY3Rpb24gQ2FudmFzR3JhcGhpY3NfZW5kU01hc2tHcm91cCgpIHtcbiAgICAgIHZhciBncm91cEN0eCA9IHRoaXMuY3VycmVudC5yZXN1bWVTTWFza0N0eDtcbiAgICAgIHZhciBjdXJyZW50Q3R4ID0gdGhpcy5jdHg7XG4gICAgICB0aGlzLmN0eCA9IGdyb3VwQ3R4O1xuICAgICAgdGhpcy5ncm91cFN0YWNrLnB1c2goY3VycmVudEN0eCk7XG4gICAgICB0aGlzLmdyb3VwTGV2ZWwrKztcbiAgICB9LFxuICAgIGVuZFNNYXNrR3JvdXA6IGZ1bmN0aW9uIENhbnZhc0dyYXBoaWNzX2VuZFNNYXNrR3JvdXAoKSB7XG4gICAgICB2YXIgZ3JvdXBDdHggPSB0aGlzLmN0eDtcbiAgICAgIHRoaXMuZ3JvdXBMZXZlbC0tO1xuICAgICAgdGhpcy5jdHggPSB0aGlzLmdyb3VwU3RhY2sucG9wKCk7XG4gICAgICBjb21wb3NlU01hc2sodGhpcy5jdHgsIHRoaXMuY3VycmVudC5hY3RpdmVTTWFzaywgZ3JvdXBDdHgsIHRoaXMud2ViR0xDb250ZXh0KTtcbiAgICAgIHRoaXMuY3R4LnJlc3RvcmUoKTtcbiAgICAgIGNvcHlDdHhTdGF0ZShncm91cEN0eCwgdGhpcy5jdHgpO1xuXG4gICAgICB2YXIgZGVsdGFUcmFuc2Zvcm0gPSBfdXRpbC5VdGlsLnRyYW5zZm9ybSh0aGlzLmN1cnJlbnQuYWN0aXZlU01hc2suc3RhcnRUcmFuc2Zvcm1JbnZlcnNlLCBncm91cEN0eC5tb3pDdXJyZW50VHJhbnNmb3JtKTtcblxuICAgICAgdGhpcy5jdHgudHJhbnNmb3JtLmFwcGx5KHRoaXMuY3R4LCBkZWx0YVRyYW5zZm9ybSk7XG4gICAgfSxcbiAgICBzYXZlOiBmdW5jdGlvbiBDYW52YXNHcmFwaGljc19zYXZlKCkge1xuICAgICAgdGhpcy5jdHguc2F2ZSgpO1xuICAgICAgdmFyIG9sZCA9IHRoaXMuY3VycmVudDtcbiAgICAgIHRoaXMuc3RhdGVTdGFjay5wdXNoKG9sZCk7XG4gICAgICB0aGlzLmN1cnJlbnQgPSBvbGQuY2xvbmUoKTtcbiAgICAgIHRoaXMuY3VycmVudC5yZXN1bWVTTWFza0N0eCA9IG51bGw7XG4gICAgfSxcbiAgICByZXN0b3JlOiBmdW5jdGlvbiBDYW52YXNHcmFwaGljc19yZXN0b3JlKCkge1xuICAgICAgaWYgKHRoaXMuY3VycmVudC5yZXN1bWVTTWFza0N0eCkge1xuICAgICAgICB0aGlzLnJlc3VtZVNNYXNrR3JvdXAoKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMuY3VycmVudC5hY3RpdmVTTWFzayAhPT0gbnVsbCAmJiAodGhpcy5zdGF0ZVN0YWNrLmxlbmd0aCA9PT0gMCB8fCB0aGlzLnN0YXRlU3RhY2tbdGhpcy5zdGF0ZVN0YWNrLmxlbmd0aCAtIDFdLmFjdGl2ZVNNYXNrICE9PSB0aGlzLmN1cnJlbnQuYWN0aXZlU01hc2spKSB7XG4gICAgICAgIHRoaXMuZW5kU01hc2tHcm91cCgpO1xuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5zdGF0ZVN0YWNrLmxlbmd0aCAhPT0gMCkge1xuICAgICAgICB0aGlzLmN1cnJlbnQgPSB0aGlzLnN0YXRlU3RhY2sucG9wKCk7XG4gICAgICAgIHRoaXMuY3R4LnJlc3RvcmUoKTtcbiAgICAgICAgdGhpcy5wZW5kaW5nQ2xpcCA9IG51bGw7XG4gICAgICAgIHRoaXMuX2NhY2hlZEdldFNpbmdsZVBpeGVsV2lkdGggPSBudWxsO1xuICAgICAgfVxuICAgIH0sXG4gICAgdHJhbnNmb3JtOiBmdW5jdGlvbiBDYW52YXNHcmFwaGljc190cmFuc2Zvcm0oYSwgYiwgYywgZCwgZSwgZikge1xuICAgICAgdGhpcy5jdHgudHJhbnNmb3JtKGEsIGIsIGMsIGQsIGUsIGYpO1xuICAgICAgdGhpcy5fY2FjaGVkR2V0U2luZ2xlUGl4ZWxXaWR0aCA9IG51bGw7XG4gICAgfSxcbiAgICBjb25zdHJ1Y3RQYXRoOiBmdW5jdGlvbiBDYW52YXNHcmFwaGljc19jb25zdHJ1Y3RQYXRoKG9wcywgYXJncykge1xuICAgICAgdmFyIGN0eCA9IHRoaXMuY3R4O1xuICAgICAgdmFyIGN1cnJlbnQgPSB0aGlzLmN1cnJlbnQ7XG4gICAgICB2YXIgeCA9IGN1cnJlbnQueCxcbiAgICAgICAgICB5ID0gY3VycmVudC55O1xuXG4gICAgICBmb3IgKHZhciBpID0gMCwgaiA9IDAsIGlpID0gb3BzLmxlbmd0aDsgaSA8IGlpOyBpKyspIHtcbiAgICAgICAgc3dpdGNoIChvcHNbaV0gfCAwKSB7XG4gICAgICAgICAgY2FzZSBfdXRpbC5PUFMucmVjdGFuZ2xlOlxuICAgICAgICAgICAgeCA9IGFyZ3NbaisrXTtcbiAgICAgICAgICAgIHkgPSBhcmdzW2orK107XG4gICAgICAgICAgICB2YXIgd2lkdGggPSBhcmdzW2orK107XG4gICAgICAgICAgICB2YXIgaGVpZ2h0ID0gYXJnc1tqKytdO1xuXG4gICAgICAgICAgICBpZiAod2lkdGggPT09IDApIHtcbiAgICAgICAgICAgICAgd2lkdGggPSB0aGlzLmdldFNpbmdsZVBpeGVsV2lkdGgoKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKGhlaWdodCA9PT0gMCkge1xuICAgICAgICAgICAgICBoZWlnaHQgPSB0aGlzLmdldFNpbmdsZVBpeGVsV2lkdGgoKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdmFyIHh3ID0geCArIHdpZHRoO1xuICAgICAgICAgICAgdmFyIHloID0geSArIGhlaWdodDtcbiAgICAgICAgICAgIHRoaXMuY3R4Lm1vdmVUbyh4LCB5KTtcbiAgICAgICAgICAgIHRoaXMuY3R4LmxpbmVUbyh4dywgeSk7XG4gICAgICAgICAgICB0aGlzLmN0eC5saW5lVG8oeHcsIHloKTtcbiAgICAgICAgICAgIHRoaXMuY3R4LmxpbmVUbyh4LCB5aCk7XG4gICAgICAgICAgICB0aGlzLmN0eC5saW5lVG8oeCwgeSk7XG4gICAgICAgICAgICB0aGlzLmN0eC5jbG9zZVBhdGgoKTtcbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgY2FzZSBfdXRpbC5PUFMubW92ZVRvOlxuICAgICAgICAgICAgeCA9IGFyZ3NbaisrXTtcbiAgICAgICAgICAgIHkgPSBhcmdzW2orK107XG4gICAgICAgICAgICBjdHgubW92ZVRvKHgsIHkpO1xuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICBjYXNlIF91dGlsLk9QUy5saW5lVG86XG4gICAgICAgICAgICB4ID0gYXJnc1tqKytdO1xuICAgICAgICAgICAgeSA9IGFyZ3NbaisrXTtcbiAgICAgICAgICAgIGN0eC5saW5lVG8oeCwgeSk7XG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgIGNhc2UgX3V0aWwuT1BTLmN1cnZlVG86XG4gICAgICAgICAgICB4ID0gYXJnc1tqICsgNF07XG4gICAgICAgICAgICB5ID0gYXJnc1tqICsgNV07XG4gICAgICAgICAgICBjdHguYmV6aWVyQ3VydmVUbyhhcmdzW2pdLCBhcmdzW2ogKyAxXSwgYXJnc1tqICsgMl0sIGFyZ3NbaiArIDNdLCB4LCB5KTtcbiAgICAgICAgICAgIGogKz0gNjtcbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgY2FzZSBfdXRpbC5PUFMuY3VydmVUbzI6XG4gICAgICAgICAgICBjdHguYmV6aWVyQ3VydmVUbyh4LCB5LCBhcmdzW2pdLCBhcmdzW2ogKyAxXSwgYXJnc1tqICsgMl0sIGFyZ3NbaiArIDNdKTtcbiAgICAgICAgICAgIHggPSBhcmdzW2ogKyAyXTtcbiAgICAgICAgICAgIHkgPSBhcmdzW2ogKyAzXTtcbiAgICAgICAgICAgIGogKz0gNDtcbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgY2FzZSBfdXRpbC5PUFMuY3VydmVUbzM6XG4gICAgICAgICAgICB4ID0gYXJnc1tqICsgMl07XG4gICAgICAgICAgICB5ID0gYXJnc1tqICsgM107XG4gICAgICAgICAgICBjdHguYmV6aWVyQ3VydmVUbyhhcmdzW2pdLCBhcmdzW2ogKyAxXSwgeCwgeSwgeCwgeSk7XG4gICAgICAgICAgICBqICs9IDQ7XG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgIGNhc2UgX3V0aWwuT1BTLmNsb3NlUGF0aDpcbiAgICAgICAgICAgIGN0eC5jbG9zZVBhdGgoKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGN1cnJlbnQuc2V0Q3VycmVudFBvaW50KHgsIHkpO1xuICAgIH0sXG4gICAgY2xvc2VQYXRoOiBmdW5jdGlvbiBDYW52YXNHcmFwaGljc19jbG9zZVBhdGgoKSB7XG4gICAgICB0aGlzLmN0eC5jbG9zZVBhdGgoKTtcbiAgICB9LFxuICAgIHN0cm9rZTogZnVuY3Rpb24gQ2FudmFzR3JhcGhpY3Nfc3Ryb2tlKGNvbnN1bWVQYXRoKSB7XG4gICAgICBjb25zdW1lUGF0aCA9IHR5cGVvZiBjb25zdW1lUGF0aCAhPT0gXCJ1bmRlZmluZWRcIiA/IGNvbnN1bWVQYXRoIDogdHJ1ZTtcbiAgICAgIHZhciBjdHggPSB0aGlzLmN0eDtcbiAgICAgIHZhciBzdHJva2VDb2xvciA9IHRoaXMuY3VycmVudC5zdHJva2VDb2xvcjtcbiAgICAgIGN0eC5nbG9iYWxBbHBoYSA9IHRoaXMuY3VycmVudC5zdHJva2VBbHBoYTtcblxuICAgICAgaWYgKHN0cm9rZUNvbG9yICYmIHN0cm9rZUNvbG9yLmhhc093blByb3BlcnR5KFwidHlwZVwiKSAmJiBzdHJva2VDb2xvci50eXBlID09PSBcIlBhdHRlcm5cIikge1xuICAgICAgICBjdHguc2F2ZSgpO1xuICAgICAgICBjb25zdCB0cmFuc2Zvcm0gPSBjdHgubW96Q3VycmVudFRyYW5zZm9ybTtcblxuICAgICAgICBjb25zdCBzY2FsZSA9IF91dGlsLlV0aWwuc2luZ3VsYXJWYWx1ZURlY29tcG9zZTJkU2NhbGUodHJhbnNmb3JtKVswXTtcblxuICAgICAgICBjdHguc3Ryb2tlU3R5bGUgPSBzdHJva2VDb2xvci5nZXRQYXR0ZXJuKGN0eCwgdGhpcyk7XG4gICAgICAgIGN0eC5saW5lV2lkdGggPSBNYXRoLm1heCh0aGlzLmdldFNpbmdsZVBpeGVsV2lkdGgoKSAqIE1JTl9XSURUSF9GQUNUT1IsIHRoaXMuY3VycmVudC5saW5lV2lkdGggKiBzY2FsZSk7XG4gICAgICAgIGN0eC5zdHJva2UoKTtcbiAgICAgICAgY3R4LnJlc3RvcmUoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGN0eC5saW5lV2lkdGggPSBNYXRoLm1heCh0aGlzLmdldFNpbmdsZVBpeGVsV2lkdGgoKSAqIE1JTl9XSURUSF9GQUNUT1IsIHRoaXMuY3VycmVudC5saW5lV2lkdGgpO1xuICAgICAgICBjdHguc3Ryb2tlKCk7XG4gICAgICB9XG5cbiAgICAgIGlmIChjb25zdW1lUGF0aCkge1xuICAgICAgICB0aGlzLmNvbnN1bWVQYXRoKCk7XG4gICAgICB9XG5cbiAgICAgIGN0eC5nbG9iYWxBbHBoYSA9IHRoaXMuY3VycmVudC5maWxsQWxwaGE7XG4gICAgfSxcbiAgICBjbG9zZVN0cm9rZTogZnVuY3Rpb24gQ2FudmFzR3JhcGhpY3NfY2xvc2VTdHJva2UoKSB7XG4gICAgICB0aGlzLmNsb3NlUGF0aCgpO1xuICAgICAgdGhpcy5zdHJva2UoKTtcbiAgICB9LFxuICAgIGZpbGw6IGZ1bmN0aW9uIENhbnZhc0dyYXBoaWNzX2ZpbGwoY29uc3VtZVBhdGgpIHtcbiAgICAgIGNvbnN1bWVQYXRoID0gdHlwZW9mIGNvbnN1bWVQYXRoICE9PSBcInVuZGVmaW5lZFwiID8gY29uc3VtZVBhdGggOiB0cnVlO1xuICAgICAgdmFyIGN0eCA9IHRoaXMuY3R4O1xuICAgICAgdmFyIGZpbGxDb2xvciA9IHRoaXMuY3VycmVudC5maWxsQ29sb3I7XG4gICAgICB2YXIgaXNQYXR0ZXJuRmlsbCA9IHRoaXMuY3VycmVudC5wYXR0ZXJuRmlsbDtcbiAgICAgIHZhciBuZWVkUmVzdG9yZSA9IGZhbHNlO1xuXG4gICAgICBpZiAoaXNQYXR0ZXJuRmlsbCkge1xuICAgICAgICBjdHguc2F2ZSgpO1xuXG4gICAgICAgIGlmICh0aGlzLmJhc2VUcmFuc2Zvcm0pIHtcbiAgICAgICAgICBjdHguc2V0VHJhbnNmb3JtLmFwcGx5KGN0eCwgdGhpcy5iYXNlVHJhbnNmb3JtKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGN0eC5maWxsU3R5bGUgPSBmaWxsQ29sb3IuZ2V0UGF0dGVybihjdHgsIHRoaXMpO1xuICAgICAgICBuZWVkUmVzdG9yZSA9IHRydWU7XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLnBlbmRpbmdFT0ZpbGwpIHtcbiAgICAgICAgY3R4LmZpbGwoXCJldmVub2RkXCIpO1xuICAgICAgICB0aGlzLnBlbmRpbmdFT0ZpbGwgPSBmYWxzZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGN0eC5maWxsKCk7XG4gICAgICB9XG5cbiAgICAgIGlmIChuZWVkUmVzdG9yZSkge1xuICAgICAgICBjdHgucmVzdG9yZSgpO1xuICAgICAgfVxuXG4gICAgICBpZiAoY29uc3VtZVBhdGgpIHtcbiAgICAgICAgdGhpcy5jb25zdW1lUGF0aCgpO1xuICAgICAgfVxuICAgIH0sXG4gICAgZW9GaWxsOiBmdW5jdGlvbiBDYW52YXNHcmFwaGljc19lb0ZpbGwoKSB7XG4gICAgICB0aGlzLnBlbmRpbmdFT0ZpbGwgPSB0cnVlO1xuICAgICAgdGhpcy5maWxsKCk7XG4gICAgfSxcbiAgICBmaWxsU3Ryb2tlOiBmdW5jdGlvbiBDYW52YXNHcmFwaGljc19maWxsU3Ryb2tlKCkge1xuICAgICAgdGhpcy5maWxsKGZhbHNlKTtcbiAgICAgIHRoaXMuc3Ryb2tlKGZhbHNlKTtcbiAgICAgIHRoaXMuY29uc3VtZVBhdGgoKTtcbiAgICB9LFxuICAgIGVvRmlsbFN0cm9rZTogZnVuY3Rpb24gQ2FudmFzR3JhcGhpY3NfZW9GaWxsU3Ryb2tlKCkge1xuICAgICAgdGhpcy5wZW5kaW5nRU9GaWxsID0gdHJ1ZTtcbiAgICAgIHRoaXMuZmlsbFN0cm9rZSgpO1xuICAgIH0sXG4gICAgY2xvc2VGaWxsU3Ryb2tlOiBmdW5jdGlvbiBDYW52YXNHcmFwaGljc19jbG9zZUZpbGxTdHJva2UoKSB7XG4gICAgICB0aGlzLmNsb3NlUGF0aCgpO1xuICAgICAgdGhpcy5maWxsU3Ryb2tlKCk7XG4gICAgfSxcbiAgICBjbG9zZUVPRmlsbFN0cm9rZTogZnVuY3Rpb24gQ2FudmFzR3JhcGhpY3NfY2xvc2VFT0ZpbGxTdHJva2UoKSB7XG4gICAgICB0aGlzLnBlbmRpbmdFT0ZpbGwgPSB0cnVlO1xuICAgICAgdGhpcy5jbG9zZVBhdGgoKTtcbiAgICAgIHRoaXMuZmlsbFN0cm9rZSgpO1xuICAgIH0sXG4gICAgZW5kUGF0aDogZnVuY3Rpb24gQ2FudmFzR3JhcGhpY3NfZW5kUGF0aCgpIHtcbiAgICAgIHRoaXMuY29uc3VtZVBhdGgoKTtcbiAgICB9LFxuICAgIGNsaXA6IGZ1bmN0aW9uIENhbnZhc0dyYXBoaWNzX2NsaXAoKSB7XG4gICAgICB0aGlzLnBlbmRpbmdDbGlwID0gTk9STUFMX0NMSVA7XG4gICAgfSxcbiAgICBlb0NsaXA6IGZ1bmN0aW9uIENhbnZhc0dyYXBoaWNzX2VvQ2xpcCgpIHtcbiAgICAgIHRoaXMucGVuZGluZ0NsaXAgPSBFT19DTElQO1xuICAgIH0sXG4gICAgYmVnaW5UZXh0OiBmdW5jdGlvbiBDYW52YXNHcmFwaGljc19iZWdpblRleHQoKSB7XG4gICAgICB0aGlzLmN1cnJlbnQudGV4dE1hdHJpeCA9IF91dGlsLklERU5USVRZX01BVFJJWDtcbiAgICAgIHRoaXMuY3VycmVudC50ZXh0TWF0cml4U2NhbGUgPSAxO1xuICAgICAgdGhpcy5jdXJyZW50LnggPSB0aGlzLmN1cnJlbnQubGluZVggPSAwO1xuICAgICAgdGhpcy5jdXJyZW50LnkgPSB0aGlzLmN1cnJlbnQubGluZVkgPSAwO1xuICAgIH0sXG4gICAgZW5kVGV4dDogZnVuY3Rpb24gQ2FudmFzR3JhcGhpY3NfZW5kVGV4dCgpIHtcbiAgICAgIHZhciBwYXRocyA9IHRoaXMucGVuZGluZ1RleHRQYXRocztcbiAgICAgIHZhciBjdHggPSB0aGlzLmN0eDtcblxuICAgICAgaWYgKHBhdGhzID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgY3R4LmJlZ2luUGF0aCgpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGN0eC5zYXZlKCk7XG4gICAgICBjdHguYmVnaW5QYXRoKCk7XG5cbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcGF0aHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFyIHBhdGggPSBwYXRoc1tpXTtcbiAgICAgICAgY3R4LnNldFRyYW5zZm9ybS5hcHBseShjdHgsIHBhdGgudHJhbnNmb3JtKTtcbiAgICAgICAgY3R4LnRyYW5zbGF0ZShwYXRoLngsIHBhdGgueSk7XG4gICAgICAgIHBhdGguYWRkVG9QYXRoKGN0eCwgcGF0aC5mb250U2l6ZSk7XG4gICAgICB9XG5cbiAgICAgIGN0eC5yZXN0b3JlKCk7XG4gICAgICBjdHguY2xpcCgpO1xuICAgICAgY3R4LmJlZ2luUGF0aCgpO1xuICAgICAgZGVsZXRlIHRoaXMucGVuZGluZ1RleHRQYXRocztcbiAgICB9LFxuICAgIHNldENoYXJTcGFjaW5nOiBmdW5jdGlvbiBDYW52YXNHcmFwaGljc19zZXRDaGFyU3BhY2luZyhzcGFjaW5nKSB7XG4gICAgICB0aGlzLmN1cnJlbnQuY2hhclNwYWNpbmcgPSBzcGFjaW5nO1xuICAgIH0sXG4gICAgc2V0V29yZFNwYWNpbmc6IGZ1bmN0aW9uIENhbnZhc0dyYXBoaWNzX3NldFdvcmRTcGFjaW5nKHNwYWNpbmcpIHtcbiAgICAgIHRoaXMuY3VycmVudC53b3JkU3BhY2luZyA9IHNwYWNpbmc7XG4gICAgfSxcbiAgICBzZXRIU2NhbGU6IGZ1bmN0aW9uIENhbnZhc0dyYXBoaWNzX3NldEhTY2FsZShzY2FsZSkge1xuICAgICAgdGhpcy5jdXJyZW50LnRleHRIU2NhbGUgPSBzY2FsZSAvIDEwMDtcbiAgICB9LFxuICAgIHNldExlYWRpbmc6IGZ1bmN0aW9uIENhbnZhc0dyYXBoaWNzX3NldExlYWRpbmcobGVhZGluZykge1xuICAgICAgdGhpcy5jdXJyZW50LmxlYWRpbmcgPSAtbGVhZGluZztcbiAgICB9LFxuICAgIHNldEZvbnQ6IGZ1bmN0aW9uIENhbnZhc0dyYXBoaWNzX3NldEZvbnQoZm9udFJlZk5hbWUsIHNpemUpIHtcbiAgICAgIHZhciBmb250T2JqID0gdGhpcy5jb21tb25PYmpzLmdldChmb250UmVmTmFtZSk7XG4gICAgICB2YXIgY3VycmVudCA9IHRoaXMuY3VycmVudDtcblxuICAgICAgaWYgKCFmb250T2JqKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgQ2FuJ3QgZmluZCBmb250IGZvciAke2ZvbnRSZWZOYW1lfWApO1xuICAgICAgfVxuXG4gICAgICBjdXJyZW50LmZvbnRNYXRyaXggPSBmb250T2JqLmZvbnRNYXRyaXggPyBmb250T2JqLmZvbnRNYXRyaXggOiBfdXRpbC5GT05UX0lERU5USVRZX01BVFJJWDtcblxuICAgICAgaWYgKGN1cnJlbnQuZm9udE1hdHJpeFswXSA9PT0gMCB8fCBjdXJyZW50LmZvbnRNYXRyaXhbM10gPT09IDApIHtcbiAgICAgICAgKDAsIF91dGlsLndhcm4pKFwiSW52YWxpZCBmb250IG1hdHJpeCBmb3IgZm9udCBcIiArIGZvbnRSZWZOYW1lKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHNpemUgPCAwKSB7XG4gICAgICAgIHNpemUgPSAtc2l6ZTtcbiAgICAgICAgY3VycmVudC5mb250RGlyZWN0aW9uID0gLTE7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjdXJyZW50LmZvbnREaXJlY3Rpb24gPSAxO1xuICAgICAgfVxuXG4gICAgICB0aGlzLmN1cnJlbnQuZm9udCA9IGZvbnRPYmo7XG4gICAgICB0aGlzLmN1cnJlbnQuZm9udFNpemUgPSBzaXplO1xuXG4gICAgICBpZiAoZm9udE9iai5pc1R5cGUzRm9udCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHZhciBuYW1lID0gZm9udE9iai5sb2FkZWROYW1lIHx8IFwic2Fucy1zZXJpZlwiO1xuICAgICAgbGV0IGJvbGQgPSBcIm5vcm1hbFwiO1xuXG4gICAgICBpZiAoZm9udE9iai5ibGFjaykge1xuICAgICAgICBib2xkID0gXCI5MDBcIjtcbiAgICAgIH0gZWxzZSBpZiAoZm9udE9iai5ib2xkKSB7XG4gICAgICAgIGJvbGQgPSBcImJvbGRcIjtcbiAgICAgIH1cblxuICAgICAgdmFyIGl0YWxpYyA9IGZvbnRPYmouaXRhbGljID8gXCJpdGFsaWNcIiA6IFwibm9ybWFsXCI7XG4gICAgICB2YXIgdHlwZWZhY2UgPSBgXCIke25hbWV9XCIsICR7Zm9udE9iai5mYWxsYmFja05hbWV9YDtcbiAgICAgIGxldCBicm93c2VyRm9udFNpemUgPSBzaXplO1xuXG4gICAgICBpZiAoc2l6ZSA8IE1JTl9GT05UX1NJWkUpIHtcbiAgICAgICAgYnJvd3NlckZvbnRTaXplID0gTUlOX0ZPTlRfU0laRTtcbiAgICAgIH0gZWxzZSBpZiAoc2l6ZSA+IE1BWF9GT05UX1NJWkUpIHtcbiAgICAgICAgYnJvd3NlckZvbnRTaXplID0gTUFYX0ZPTlRfU0laRTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5jdXJyZW50LmZvbnRTaXplU2NhbGUgPSBzaXplIC8gYnJvd3NlckZvbnRTaXplO1xuICAgICAgdGhpcy5jdHguZm9udCA9IGAke2l0YWxpY30gJHtib2xkfSAke2Jyb3dzZXJGb250U2l6ZX1weCAke3R5cGVmYWNlfWA7XG4gICAgfSxcbiAgICBzZXRUZXh0UmVuZGVyaW5nTW9kZTogZnVuY3Rpb24gQ2FudmFzR3JhcGhpY3Nfc2V0VGV4dFJlbmRlcmluZ01vZGUobW9kZSkge1xuICAgICAgdGhpcy5jdXJyZW50LnRleHRSZW5kZXJpbmdNb2RlID0gbW9kZTtcbiAgICB9LFxuICAgIHNldFRleHRSaXNlOiBmdW5jdGlvbiBDYW52YXNHcmFwaGljc19zZXRUZXh0UmlzZShyaXNlKSB7XG4gICAgICB0aGlzLmN1cnJlbnQudGV4dFJpc2UgPSByaXNlO1xuICAgIH0sXG4gICAgbW92ZVRleHQ6IGZ1bmN0aW9uIENhbnZhc0dyYXBoaWNzX21vdmVUZXh0KHgsIHkpIHtcbiAgICAgIHRoaXMuY3VycmVudC54ID0gdGhpcy5jdXJyZW50LmxpbmVYICs9IHg7XG4gICAgICB0aGlzLmN1cnJlbnQueSA9IHRoaXMuY3VycmVudC5saW5lWSArPSB5O1xuICAgIH0sXG4gICAgc2V0TGVhZGluZ01vdmVUZXh0OiBmdW5jdGlvbiBDYW52YXNHcmFwaGljc19zZXRMZWFkaW5nTW92ZVRleHQoeCwgeSkge1xuICAgICAgdGhpcy5zZXRMZWFkaW5nKC15KTtcbiAgICAgIHRoaXMubW92ZVRleHQoeCwgeSk7XG4gICAgfSxcbiAgICBzZXRUZXh0TWF0cml4OiBmdW5jdGlvbiBDYW52YXNHcmFwaGljc19zZXRUZXh0TWF0cml4KGEsIGIsIGMsIGQsIGUsIGYpIHtcbiAgICAgIHRoaXMuY3VycmVudC50ZXh0TWF0cml4ID0gW2EsIGIsIGMsIGQsIGUsIGZdO1xuICAgICAgdGhpcy5jdXJyZW50LnRleHRNYXRyaXhTY2FsZSA9IE1hdGguc3FydChhICogYSArIGIgKiBiKTtcbiAgICAgIHRoaXMuY3VycmVudC54ID0gdGhpcy5jdXJyZW50LmxpbmVYID0gMDtcbiAgICAgIHRoaXMuY3VycmVudC55ID0gdGhpcy5jdXJyZW50LmxpbmVZID0gMDtcbiAgICB9LFxuICAgIG5leHRMaW5lOiBmdW5jdGlvbiBDYW52YXNHcmFwaGljc19uZXh0TGluZSgpIHtcbiAgICAgIHRoaXMubW92ZVRleHQoMCwgdGhpcy5jdXJyZW50LmxlYWRpbmcpO1xuICAgIH0sXG5cbiAgICBwYWludENoYXIoY2hhcmFjdGVyLCB4LCB5LCBwYXR0ZXJuVHJhbnNmb3JtKSB7XG4gICAgICB2YXIgY3R4ID0gdGhpcy5jdHg7XG4gICAgICB2YXIgY3VycmVudCA9IHRoaXMuY3VycmVudDtcbiAgICAgIHZhciBmb250ID0gY3VycmVudC5mb250O1xuICAgICAgdmFyIHRleHRSZW5kZXJpbmdNb2RlID0gY3VycmVudC50ZXh0UmVuZGVyaW5nTW9kZTtcbiAgICAgIHZhciBmb250U2l6ZSA9IGN1cnJlbnQuZm9udFNpemUgLyBjdXJyZW50LmZvbnRTaXplU2NhbGU7XG4gICAgICB2YXIgZmlsbFN0cm9rZU1vZGUgPSB0ZXh0UmVuZGVyaW5nTW9kZSAmIF91dGlsLlRleHRSZW5kZXJpbmdNb2RlLkZJTExfU1RST0tFX01BU0s7XG4gICAgICB2YXIgaXNBZGRUb1BhdGhTZXQgPSAhISh0ZXh0UmVuZGVyaW5nTW9kZSAmIF91dGlsLlRleHRSZW5kZXJpbmdNb2RlLkFERF9UT19QQVRIX0ZMQUcpO1xuICAgICAgY29uc3QgcGF0dGVybkZpbGwgPSBjdXJyZW50LnBhdHRlcm5GaWxsICYmICFmb250Lm1pc3NpbmdGaWxlO1xuICAgICAgdmFyIGFkZFRvUGF0aDtcblxuICAgICAgaWYgKGZvbnQuZGlzYWJsZUZvbnRGYWNlIHx8IGlzQWRkVG9QYXRoU2V0IHx8IHBhdHRlcm5GaWxsKSB7XG4gICAgICAgIGFkZFRvUGF0aCA9IGZvbnQuZ2V0UGF0aEdlbmVyYXRvcih0aGlzLmNvbW1vbk9ianMsIGNoYXJhY3Rlcik7XG4gICAgICB9XG5cbiAgICAgIGlmIChmb250LmRpc2FibGVGb250RmFjZSB8fCBwYXR0ZXJuRmlsbCkge1xuICAgICAgICBjdHguc2F2ZSgpO1xuICAgICAgICBjdHgudHJhbnNsYXRlKHgsIHkpO1xuICAgICAgICBjdHguYmVnaW5QYXRoKCk7XG4gICAgICAgIGFkZFRvUGF0aChjdHgsIGZvbnRTaXplKTtcblxuICAgICAgICBpZiAocGF0dGVyblRyYW5zZm9ybSkge1xuICAgICAgICAgIGN0eC5zZXRUcmFuc2Zvcm0uYXBwbHkoY3R4LCBwYXR0ZXJuVHJhbnNmb3JtKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChmaWxsU3Ryb2tlTW9kZSA9PT0gX3V0aWwuVGV4dFJlbmRlcmluZ01vZGUuRklMTCB8fCBmaWxsU3Ryb2tlTW9kZSA9PT0gX3V0aWwuVGV4dFJlbmRlcmluZ01vZGUuRklMTF9TVFJPS0UpIHtcbiAgICAgICAgICBjdHguZmlsbCgpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGZpbGxTdHJva2VNb2RlID09PSBfdXRpbC5UZXh0UmVuZGVyaW5nTW9kZS5TVFJPS0UgfHwgZmlsbFN0cm9rZU1vZGUgPT09IF91dGlsLlRleHRSZW5kZXJpbmdNb2RlLkZJTExfU1RST0tFKSB7XG4gICAgICAgICAgY3R4LnN0cm9rZSgpO1xuICAgICAgICB9XG5cbiAgICAgICAgY3R4LnJlc3RvcmUoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChmaWxsU3Ryb2tlTW9kZSA9PT0gX3V0aWwuVGV4dFJlbmRlcmluZ01vZGUuRklMTCB8fCBmaWxsU3Ryb2tlTW9kZSA9PT0gX3V0aWwuVGV4dFJlbmRlcmluZ01vZGUuRklMTF9TVFJPS0UpIHtcbiAgICAgICAgICBjdHguZmlsbFRleHQoY2hhcmFjdGVyLCB4LCB5KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChmaWxsU3Ryb2tlTW9kZSA9PT0gX3V0aWwuVGV4dFJlbmRlcmluZ01vZGUuU1RST0tFIHx8IGZpbGxTdHJva2VNb2RlID09PSBfdXRpbC5UZXh0UmVuZGVyaW5nTW9kZS5GSUxMX1NUUk9LRSkge1xuICAgICAgICAgIGN0eC5zdHJva2VUZXh0KGNoYXJhY3RlciwgeCwgeSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKGlzQWRkVG9QYXRoU2V0KSB7XG4gICAgICAgIHZhciBwYXRocyA9IHRoaXMucGVuZGluZ1RleHRQYXRocyB8fCAodGhpcy5wZW5kaW5nVGV4dFBhdGhzID0gW10pO1xuICAgICAgICBwYXRocy5wdXNoKHtcbiAgICAgICAgICB0cmFuc2Zvcm06IGN0eC5tb3pDdXJyZW50VHJhbnNmb3JtLFxuICAgICAgICAgIHgsXG4gICAgICAgICAgeSxcbiAgICAgICAgICBmb250U2l6ZSxcbiAgICAgICAgICBhZGRUb1BhdGhcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSxcblxuICAgIGdldCBpc0ZvbnRTdWJwaXhlbEFBRW5hYmxlZCgpIHtcbiAgICAgIGNvbnN0IHtcbiAgICAgICAgY29udGV4dDogY3R4XG4gICAgICB9ID0gdGhpcy5jYWNoZWRDYW52YXNlcy5nZXRDYW52YXMoXCJpc0ZvbnRTdWJwaXhlbEFBRW5hYmxlZFwiLCAxMCwgMTApO1xuICAgICAgY3R4LnNjYWxlKDEuNSwgMSk7XG4gICAgICBjdHguZmlsbFRleHQoXCJJXCIsIDAsIDEwKTtcbiAgICAgIHZhciBkYXRhID0gY3R4LmdldEltYWdlRGF0YSgwLCAwLCAxMCwgMTApLmRhdGE7XG4gICAgICB2YXIgZW5hYmxlZCA9IGZhbHNlO1xuXG4gICAgICBmb3IgKHZhciBpID0gMzsgaSA8IGRhdGEubGVuZ3RoOyBpICs9IDQpIHtcbiAgICAgICAgaWYgKGRhdGFbaV0gPiAwICYmIGRhdGFbaV0gPCAyNTUpIHtcbiAgICAgICAgICBlbmFibGVkID0gdHJ1ZTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gKDAsIF91dGlsLnNoYWRvdykodGhpcywgXCJpc0ZvbnRTdWJwaXhlbEFBRW5hYmxlZFwiLCBlbmFibGVkKTtcbiAgICB9LFxuXG4gICAgc2hvd1RleHQ6IGZ1bmN0aW9uIENhbnZhc0dyYXBoaWNzX3Nob3dUZXh0KGdseXBocykge1xuICAgICAgdmFyIGN1cnJlbnQgPSB0aGlzLmN1cnJlbnQ7XG4gICAgICB2YXIgZm9udCA9IGN1cnJlbnQuZm9udDtcblxuICAgICAgaWYgKGZvbnQuaXNUeXBlM0ZvbnQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc2hvd1R5cGUzVGV4dChnbHlwaHMpO1xuICAgICAgfVxuXG4gICAgICB2YXIgZm9udFNpemUgPSBjdXJyZW50LmZvbnRTaXplO1xuXG4gICAgICBpZiAoZm9udFNpemUgPT09IDApIHtcbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgIH1cblxuICAgICAgdmFyIGN0eCA9IHRoaXMuY3R4O1xuICAgICAgdmFyIGZvbnRTaXplU2NhbGUgPSBjdXJyZW50LmZvbnRTaXplU2NhbGU7XG4gICAgICB2YXIgY2hhclNwYWNpbmcgPSBjdXJyZW50LmNoYXJTcGFjaW5nO1xuICAgICAgdmFyIHdvcmRTcGFjaW5nID0gY3VycmVudC53b3JkU3BhY2luZztcbiAgICAgIHZhciBmb250RGlyZWN0aW9uID0gY3VycmVudC5mb250RGlyZWN0aW9uO1xuICAgICAgdmFyIHRleHRIU2NhbGUgPSBjdXJyZW50LnRleHRIU2NhbGUgKiBmb250RGlyZWN0aW9uO1xuICAgICAgdmFyIGdseXBoc0xlbmd0aCA9IGdseXBocy5sZW5ndGg7XG4gICAgICB2YXIgdmVydGljYWwgPSBmb250LnZlcnRpY2FsO1xuICAgICAgdmFyIHNwYWNpbmdEaXIgPSB2ZXJ0aWNhbCA/IDEgOiAtMTtcbiAgICAgIHZhciBkZWZhdWx0Vk1ldHJpY3MgPSBmb250LmRlZmF1bHRWTWV0cmljcztcbiAgICAgIHZhciB3aWR0aEFkdmFuY2VTY2FsZSA9IGZvbnRTaXplICogY3VycmVudC5mb250TWF0cml4WzBdO1xuICAgICAgdmFyIHNpbXBsZUZpbGxUZXh0ID0gY3VycmVudC50ZXh0UmVuZGVyaW5nTW9kZSA9PT0gX3V0aWwuVGV4dFJlbmRlcmluZ01vZGUuRklMTCAmJiAhZm9udC5kaXNhYmxlRm9udEZhY2UgJiYgIWN1cnJlbnQucGF0dGVybkZpbGw7XG4gICAgICBjdHguc2F2ZSgpO1xuICAgICAgbGV0IHBhdHRlcm5UcmFuc2Zvcm07XG5cbiAgICAgIGlmIChjdXJyZW50LnBhdHRlcm5GaWxsKSB7XG4gICAgICAgIGN0eC5zYXZlKCk7XG4gICAgICAgIGNvbnN0IHBhdHRlcm4gPSBjdXJyZW50LmZpbGxDb2xvci5nZXRQYXR0ZXJuKGN0eCwgdGhpcyk7XG4gICAgICAgIHBhdHRlcm5UcmFuc2Zvcm0gPSBjdHgubW96Q3VycmVudFRyYW5zZm9ybTtcbiAgICAgICAgY3R4LnJlc3RvcmUoKTtcbiAgICAgICAgY3R4LmZpbGxTdHlsZSA9IHBhdHRlcm47XG4gICAgICB9XG5cbiAgICAgIGN0eC50cmFuc2Zvcm0uYXBwbHkoY3R4LCBjdXJyZW50LnRleHRNYXRyaXgpO1xuICAgICAgY3R4LnRyYW5zbGF0ZShjdXJyZW50LngsIGN1cnJlbnQueSArIGN1cnJlbnQudGV4dFJpc2UpO1xuXG4gICAgICBpZiAoZm9udERpcmVjdGlvbiA+IDApIHtcbiAgICAgICAgY3R4LnNjYWxlKHRleHRIU2NhbGUsIC0xKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGN0eC5zY2FsZSh0ZXh0SFNjYWxlLCAxKTtcbiAgICAgIH1cblxuICAgICAgdmFyIGxpbmVXaWR0aCA9IGN1cnJlbnQubGluZVdpZHRoO1xuICAgICAgdmFyIHNjYWxlID0gY3VycmVudC50ZXh0TWF0cml4U2NhbGU7XG5cbiAgICAgIGlmIChzY2FsZSA9PT0gMCB8fCBsaW5lV2lkdGggPT09IDApIHtcbiAgICAgICAgdmFyIGZpbGxTdHJva2VNb2RlID0gY3VycmVudC50ZXh0UmVuZGVyaW5nTW9kZSAmIF91dGlsLlRleHRSZW5kZXJpbmdNb2RlLkZJTExfU1RST0tFX01BU0s7XG5cbiAgICAgICAgaWYgKGZpbGxTdHJva2VNb2RlID09PSBfdXRpbC5UZXh0UmVuZGVyaW5nTW9kZS5TVFJPS0UgfHwgZmlsbFN0cm9rZU1vZGUgPT09IF91dGlsLlRleHRSZW5kZXJpbmdNb2RlLkZJTExfU1RST0tFKSB7XG4gICAgICAgICAgdGhpcy5fY2FjaGVkR2V0U2luZ2xlUGl4ZWxXaWR0aCA9IG51bGw7XG4gICAgICAgICAgbGluZVdpZHRoID0gdGhpcy5nZXRTaW5nbGVQaXhlbFdpZHRoKCkgKiBNSU5fV0lEVEhfRkFDVE9SO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBsaW5lV2lkdGggLz0gc2NhbGU7XG4gICAgICB9XG5cbiAgICAgIGlmIChmb250U2l6ZVNjYWxlICE9PSAxLjApIHtcbiAgICAgICAgY3R4LnNjYWxlKGZvbnRTaXplU2NhbGUsIGZvbnRTaXplU2NhbGUpO1xuICAgICAgICBsaW5lV2lkdGggLz0gZm9udFNpemVTY2FsZTtcbiAgICAgIH1cblxuICAgICAgY3R4LmxpbmVXaWR0aCA9IGxpbmVXaWR0aDtcbiAgICAgIHZhciB4ID0gMCxcbiAgICAgICAgICBpO1xuXG4gICAgICBmb3IgKGkgPSAwOyBpIDwgZ2x5cGhzTGVuZ3RoOyArK2kpIHtcbiAgICAgICAgdmFyIGdseXBoID0gZ2x5cGhzW2ldO1xuXG4gICAgICAgIGlmICgoMCwgX3V0aWwuaXNOdW0pKGdseXBoKSkge1xuICAgICAgICAgIHggKz0gc3BhY2luZ0RpciAqIGdseXBoICogZm9udFNpemUgLyAxMDAwO1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHJlc3RvcmVOZWVkZWQgPSBmYWxzZTtcbiAgICAgICAgdmFyIHNwYWNpbmcgPSAoZ2x5cGguaXNTcGFjZSA/IHdvcmRTcGFjaW5nIDogMCkgKyBjaGFyU3BhY2luZztcbiAgICAgICAgdmFyIGNoYXJhY3RlciA9IGdseXBoLmZvbnRDaGFyO1xuICAgICAgICB2YXIgYWNjZW50ID0gZ2x5cGguYWNjZW50O1xuICAgICAgICB2YXIgc2NhbGVkWCwgc2NhbGVkWSwgc2NhbGVkQWNjZW50WCwgc2NhbGVkQWNjZW50WTtcbiAgICAgICAgdmFyIHdpZHRoID0gZ2x5cGgud2lkdGg7XG5cbiAgICAgICAgaWYgKHZlcnRpY2FsKSB7XG4gICAgICAgICAgdmFyIHZtZXRyaWMsIHZ4LCB2eTtcbiAgICAgICAgICB2bWV0cmljID0gZ2x5cGgudm1ldHJpYyB8fCBkZWZhdWx0Vk1ldHJpY3M7XG4gICAgICAgICAgdnggPSBnbHlwaC52bWV0cmljID8gdm1ldHJpY1sxXSA6IHdpZHRoICogMC41O1xuICAgICAgICAgIHZ4ID0gLXZ4ICogd2lkdGhBZHZhbmNlU2NhbGU7XG4gICAgICAgICAgdnkgPSB2bWV0cmljWzJdICogd2lkdGhBZHZhbmNlU2NhbGU7XG4gICAgICAgICAgd2lkdGggPSB2bWV0cmljID8gLXZtZXRyaWNbMF0gOiB3aWR0aDtcbiAgICAgICAgICBzY2FsZWRYID0gdnggLyBmb250U2l6ZVNjYWxlO1xuICAgICAgICAgIHNjYWxlZFkgPSAoeCArIHZ5KSAvIGZvbnRTaXplU2NhbGU7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgc2NhbGVkWCA9IHggLyBmb250U2l6ZVNjYWxlO1xuICAgICAgICAgIHNjYWxlZFkgPSAwO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGZvbnQucmVtZWFzdXJlICYmIHdpZHRoID4gMCkge1xuICAgICAgICAgIHZhciBtZWFzdXJlZFdpZHRoID0gY3R4Lm1lYXN1cmVUZXh0KGNoYXJhY3Rlcikud2lkdGggKiAxMDAwIC8gZm9udFNpemUgKiBmb250U2l6ZVNjYWxlO1xuXG4gICAgICAgICAgaWYgKHdpZHRoIDwgbWVhc3VyZWRXaWR0aCAmJiB0aGlzLmlzRm9udFN1YnBpeGVsQUFFbmFibGVkKSB7XG4gICAgICAgICAgICB2YXIgY2hhcmFjdGVyU2NhbGVYID0gd2lkdGggLyBtZWFzdXJlZFdpZHRoO1xuICAgICAgICAgICAgcmVzdG9yZU5lZWRlZCA9IHRydWU7XG4gICAgICAgICAgICBjdHguc2F2ZSgpO1xuICAgICAgICAgICAgY3R4LnNjYWxlKGNoYXJhY3RlclNjYWxlWCwgMSk7XG4gICAgICAgICAgICBzY2FsZWRYIC89IGNoYXJhY3RlclNjYWxlWDtcbiAgICAgICAgICB9IGVsc2UgaWYgKHdpZHRoICE9PSBtZWFzdXJlZFdpZHRoKSB7XG4gICAgICAgICAgICBzY2FsZWRYICs9ICh3aWR0aCAtIG1lYXN1cmVkV2lkdGgpIC8gMjAwMCAqIGZvbnRTaXplIC8gZm9udFNpemVTY2FsZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoZ2x5cGguaXNJbkZvbnQgfHwgZm9udC5taXNzaW5nRmlsZSkge1xuICAgICAgICAgIGlmIChzaW1wbGVGaWxsVGV4dCAmJiAhYWNjZW50KSB7XG4gICAgICAgICAgICBjdHguZmlsbFRleHQoY2hhcmFjdGVyLCBzY2FsZWRYLCBzY2FsZWRZKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5wYWludENoYXIoY2hhcmFjdGVyLCBzY2FsZWRYLCBzY2FsZWRZLCBwYXR0ZXJuVHJhbnNmb3JtKTtcblxuICAgICAgICAgICAgaWYgKGFjY2VudCkge1xuICAgICAgICAgICAgICBzY2FsZWRBY2NlbnRYID0gc2NhbGVkWCArIGFjY2VudC5vZmZzZXQueCAvIGZvbnRTaXplU2NhbGU7XG4gICAgICAgICAgICAgIHNjYWxlZEFjY2VudFkgPSBzY2FsZWRZIC0gYWNjZW50Lm9mZnNldC55IC8gZm9udFNpemVTY2FsZTtcbiAgICAgICAgICAgICAgdGhpcy5wYWludENoYXIoYWNjZW50LmZvbnRDaGFyLCBzY2FsZWRBY2NlbnRYLCBzY2FsZWRBY2NlbnRZLCBwYXR0ZXJuVHJhbnNmb3JtKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgY2hhcldpZHRoO1xuXG4gICAgICAgIGlmICh2ZXJ0aWNhbCkge1xuICAgICAgICAgIGNoYXJXaWR0aCA9IHdpZHRoICogd2lkdGhBZHZhbmNlU2NhbGUgLSBzcGFjaW5nICogZm9udERpcmVjdGlvbjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjaGFyV2lkdGggPSB3aWR0aCAqIHdpZHRoQWR2YW5jZVNjYWxlICsgc3BhY2luZyAqIGZvbnREaXJlY3Rpb247XG4gICAgICAgIH1cblxuICAgICAgICB4ICs9IGNoYXJXaWR0aDtcblxuICAgICAgICBpZiAocmVzdG9yZU5lZWRlZCkge1xuICAgICAgICAgIGN0eC5yZXN0b3JlKCk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKHZlcnRpY2FsKSB7XG4gICAgICAgIGN1cnJlbnQueSAtPSB4O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY3VycmVudC54ICs9IHggKiB0ZXh0SFNjYWxlO1xuICAgICAgfVxuXG4gICAgICBjdHgucmVzdG9yZSgpO1xuICAgIH0sXG4gICAgc2hvd1R5cGUzVGV4dDogZnVuY3Rpb24gQ2FudmFzR3JhcGhpY3Nfc2hvd1R5cGUzVGV4dChnbHlwaHMpIHtcbiAgICAgIHZhciBjdHggPSB0aGlzLmN0eDtcbiAgICAgIHZhciBjdXJyZW50ID0gdGhpcy5jdXJyZW50O1xuICAgICAgdmFyIGZvbnQgPSBjdXJyZW50LmZvbnQ7XG4gICAgICB2YXIgZm9udFNpemUgPSBjdXJyZW50LmZvbnRTaXplO1xuICAgICAgdmFyIGZvbnREaXJlY3Rpb24gPSBjdXJyZW50LmZvbnREaXJlY3Rpb247XG4gICAgICB2YXIgc3BhY2luZ0RpciA9IGZvbnQudmVydGljYWwgPyAxIDogLTE7XG4gICAgICB2YXIgY2hhclNwYWNpbmcgPSBjdXJyZW50LmNoYXJTcGFjaW5nO1xuICAgICAgdmFyIHdvcmRTcGFjaW5nID0gY3VycmVudC53b3JkU3BhY2luZztcbiAgICAgIHZhciB0ZXh0SFNjYWxlID0gY3VycmVudC50ZXh0SFNjYWxlICogZm9udERpcmVjdGlvbjtcbiAgICAgIHZhciBmb250TWF0cml4ID0gY3VycmVudC5mb250TWF0cml4IHx8IF91dGlsLkZPTlRfSURFTlRJVFlfTUFUUklYO1xuICAgICAgdmFyIGdseXBoc0xlbmd0aCA9IGdseXBocy5sZW5ndGg7XG4gICAgICB2YXIgaXNUZXh0SW52aXNpYmxlID0gY3VycmVudC50ZXh0UmVuZGVyaW5nTW9kZSA9PT0gX3V0aWwuVGV4dFJlbmRlcmluZ01vZGUuSU5WSVNJQkxFO1xuICAgICAgdmFyIGksIGdseXBoLCB3aWR0aCwgc3BhY2luZ0xlbmd0aDtcblxuICAgICAgaWYgKGlzVGV4dEludmlzaWJsZSB8fCBmb250U2l6ZSA9PT0gMCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHRoaXMuX2NhY2hlZEdldFNpbmdsZVBpeGVsV2lkdGggPSBudWxsO1xuICAgICAgY3R4LnNhdmUoKTtcbiAgICAgIGN0eC50cmFuc2Zvcm0uYXBwbHkoY3R4LCBjdXJyZW50LnRleHRNYXRyaXgpO1xuICAgICAgY3R4LnRyYW5zbGF0ZShjdXJyZW50LngsIGN1cnJlbnQueSk7XG4gICAgICBjdHguc2NhbGUodGV4dEhTY2FsZSwgZm9udERpcmVjdGlvbik7XG5cbiAgICAgIGZvciAoaSA9IDA7IGkgPCBnbHlwaHNMZW5ndGg7ICsraSkge1xuICAgICAgICBnbHlwaCA9IGdseXBoc1tpXTtcblxuICAgICAgICBpZiAoKDAsIF91dGlsLmlzTnVtKShnbHlwaCkpIHtcbiAgICAgICAgICBzcGFjaW5nTGVuZ3RoID0gc3BhY2luZ0RpciAqIGdseXBoICogZm9udFNpemUgLyAxMDAwO1xuICAgICAgICAgIHRoaXMuY3R4LnRyYW5zbGF0ZShzcGFjaW5nTGVuZ3RoLCAwKTtcbiAgICAgICAgICBjdXJyZW50LnggKz0gc3BhY2luZ0xlbmd0aCAqIHRleHRIU2NhbGU7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgc3BhY2luZyA9IChnbHlwaC5pc1NwYWNlID8gd29yZFNwYWNpbmcgOiAwKSArIGNoYXJTcGFjaW5nO1xuICAgICAgICB2YXIgb3BlcmF0b3JMaXN0ID0gZm9udC5jaGFyUHJvY09wZXJhdG9yTGlzdFtnbHlwaC5vcGVyYXRvckxpc3RJZF07XG5cbiAgICAgICAgaWYgKCFvcGVyYXRvckxpc3QpIHtcbiAgICAgICAgICAoMCwgX3V0aWwud2FybikoYFR5cGUzIGNoYXJhY3RlciBcIiR7Z2x5cGgub3BlcmF0b3JMaXN0SWR9XCIgaXMgbm90IGF2YWlsYWJsZS5gKTtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMucHJvY2Vzc2luZ1R5cGUzID0gZ2x5cGg7XG4gICAgICAgIHRoaXMuc2F2ZSgpO1xuICAgICAgICBjdHguc2NhbGUoZm9udFNpemUsIGZvbnRTaXplKTtcbiAgICAgICAgY3R4LnRyYW5zZm9ybS5hcHBseShjdHgsIGZvbnRNYXRyaXgpO1xuICAgICAgICB0aGlzLmV4ZWN1dGVPcGVyYXRvckxpc3Qob3BlcmF0b3JMaXN0KTtcbiAgICAgICAgdGhpcy5yZXN0b3JlKCk7XG5cbiAgICAgICAgdmFyIHRyYW5zZm9ybWVkID0gX3V0aWwuVXRpbC5hcHBseVRyYW5zZm9ybShbZ2x5cGgud2lkdGgsIDBdLCBmb250TWF0cml4KTtcblxuICAgICAgICB3aWR0aCA9IHRyYW5zZm9ybWVkWzBdICogZm9udFNpemUgKyBzcGFjaW5nO1xuICAgICAgICBjdHgudHJhbnNsYXRlKHdpZHRoLCAwKTtcbiAgICAgICAgY3VycmVudC54ICs9IHdpZHRoICogdGV4dEhTY2FsZTtcbiAgICAgIH1cblxuICAgICAgY3R4LnJlc3RvcmUoKTtcbiAgICAgIHRoaXMucHJvY2Vzc2luZ1R5cGUzID0gbnVsbDtcbiAgICB9LFxuICAgIHNldENoYXJXaWR0aDogZnVuY3Rpb24gQ2FudmFzR3JhcGhpY3Nfc2V0Q2hhcldpZHRoKHhXaWR0aCwgeVdpZHRoKSB7fSxcbiAgICBzZXRDaGFyV2lkdGhBbmRCb3VuZHM6IGZ1bmN0aW9uIENhbnZhc0dyYXBoaWNzX3NldENoYXJXaWR0aEFuZEJvdW5kcyh4V2lkdGgsIHlXaWR0aCwgbGx4LCBsbHksIHVyeCwgdXJ5KSB7XG4gICAgICB0aGlzLmN0eC5yZWN0KGxseCwgbGx5LCB1cnggLSBsbHgsIHVyeSAtIGxseSk7XG4gICAgICB0aGlzLmNsaXAoKTtcbiAgICAgIHRoaXMuZW5kUGF0aCgpO1xuICAgIH0sXG4gICAgZ2V0Q29sb3JOX1BhdHRlcm46IGZ1bmN0aW9uIENhbnZhc0dyYXBoaWNzX2dldENvbG9yTl9QYXR0ZXJuKElSKSB7XG4gICAgICB2YXIgcGF0dGVybjtcblxuICAgICAgaWYgKElSWzBdID09PSBcIlRpbGluZ1BhdHRlcm5cIikge1xuICAgICAgICB2YXIgY29sb3IgPSBJUlsxXTtcbiAgICAgICAgdmFyIGJhc2VUcmFuc2Zvcm0gPSB0aGlzLmJhc2VUcmFuc2Zvcm0gfHwgdGhpcy5jdHgubW96Q3VycmVudFRyYW5zZm9ybS5zbGljZSgpO1xuICAgICAgICB2YXIgY2FudmFzR3JhcGhpY3NGYWN0b3J5ID0ge1xuICAgICAgICAgIGNyZWF0ZUNhbnZhc0dyYXBoaWNzOiBjdHggPT4ge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBDYW52YXNHcmFwaGljcyhjdHgsIHRoaXMuY29tbW9uT2JqcywgdGhpcy5vYmpzLCB0aGlzLmNhbnZhc0ZhY3RvcnksIHRoaXMud2ViR0xDb250ZXh0KTtcbiAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIHBhdHRlcm4gPSBuZXcgX3BhdHRlcm5faGVscGVyLlRpbGluZ1BhdHRlcm4oSVIsIGNvbG9yLCB0aGlzLmN0eCwgY2FudmFzR3JhcGhpY3NGYWN0b3J5LCBiYXNlVHJhbnNmb3JtKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHBhdHRlcm4gPSAoMCwgX3BhdHRlcm5faGVscGVyLmdldFNoYWRpbmdQYXR0ZXJuRnJvbUlSKShJUik7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBwYXR0ZXJuO1xuICAgIH0sXG4gICAgc2V0U3Ryb2tlQ29sb3JOOiBmdW5jdGlvbiBDYW52YXNHcmFwaGljc19zZXRTdHJva2VDb2xvck4oKSB7XG4gICAgICB0aGlzLmN1cnJlbnQuc3Ryb2tlQ29sb3IgPSB0aGlzLmdldENvbG9yTl9QYXR0ZXJuKGFyZ3VtZW50cyk7XG4gICAgfSxcbiAgICBzZXRGaWxsQ29sb3JOOiBmdW5jdGlvbiBDYW52YXNHcmFwaGljc19zZXRGaWxsQ29sb3JOKCkge1xuICAgICAgdGhpcy5jdXJyZW50LmZpbGxDb2xvciA9IHRoaXMuZ2V0Q29sb3JOX1BhdHRlcm4oYXJndW1lbnRzKTtcbiAgICAgIHRoaXMuY3VycmVudC5wYXR0ZXJuRmlsbCA9IHRydWU7XG4gICAgfSxcbiAgICBzZXRTdHJva2VSR0JDb2xvcjogZnVuY3Rpb24gQ2FudmFzR3JhcGhpY3Nfc2V0U3Ryb2tlUkdCQ29sb3IociwgZywgYikge1xuICAgICAgdmFyIGNvbG9yID0gX3V0aWwuVXRpbC5tYWtlQ3NzUmdiKHIsIGcsIGIpO1xuXG4gICAgICB0aGlzLmN0eC5zdHJva2VTdHlsZSA9IGNvbG9yO1xuICAgICAgdGhpcy5jdXJyZW50LnN0cm9rZUNvbG9yID0gY29sb3I7XG4gICAgfSxcbiAgICBzZXRGaWxsUkdCQ29sb3I6IGZ1bmN0aW9uIENhbnZhc0dyYXBoaWNzX3NldEZpbGxSR0JDb2xvcihyLCBnLCBiKSB7XG4gICAgICB2YXIgY29sb3IgPSBfdXRpbC5VdGlsLm1ha2VDc3NSZ2IociwgZywgYik7XG5cbiAgICAgIHRoaXMuY3R4LmZpbGxTdHlsZSA9IGNvbG9yO1xuICAgICAgdGhpcy5jdXJyZW50LmZpbGxDb2xvciA9IGNvbG9yO1xuICAgICAgdGhpcy5jdXJyZW50LnBhdHRlcm5GaWxsID0gZmFsc2U7XG4gICAgfSxcbiAgICBzaGFkaW5nRmlsbDogZnVuY3Rpb24gQ2FudmFzR3JhcGhpY3Nfc2hhZGluZ0ZpbGwocGF0dGVybklSKSB7XG4gICAgICB2YXIgY3R4ID0gdGhpcy5jdHg7XG4gICAgICB0aGlzLnNhdmUoKTtcbiAgICAgIHZhciBwYXR0ZXJuID0gKDAsIF9wYXR0ZXJuX2hlbHBlci5nZXRTaGFkaW5nUGF0dGVybkZyb21JUikocGF0dGVybklSKTtcbiAgICAgIGN0eC5maWxsU3R5bGUgPSBwYXR0ZXJuLmdldFBhdHRlcm4oY3R4LCB0aGlzLCB0cnVlKTtcbiAgICAgIHZhciBpbnYgPSBjdHgubW96Q3VycmVudFRyYW5zZm9ybUludmVyc2U7XG5cbiAgICAgIGlmIChpbnYpIHtcbiAgICAgICAgdmFyIGNhbnZhcyA9IGN0eC5jYW52YXM7XG4gICAgICAgIHZhciB3aWR0aCA9IGNhbnZhcy53aWR0aDtcbiAgICAgICAgdmFyIGhlaWdodCA9IGNhbnZhcy5oZWlnaHQ7XG5cbiAgICAgICAgdmFyIGJsID0gX3V0aWwuVXRpbC5hcHBseVRyYW5zZm9ybShbMCwgMF0sIGludik7XG5cbiAgICAgICAgdmFyIGJyID0gX3V0aWwuVXRpbC5hcHBseVRyYW5zZm9ybShbMCwgaGVpZ2h0XSwgaW52KTtcblxuICAgICAgICB2YXIgdWwgPSBfdXRpbC5VdGlsLmFwcGx5VHJhbnNmb3JtKFt3aWR0aCwgMF0sIGludik7XG5cbiAgICAgICAgdmFyIHVyID0gX3V0aWwuVXRpbC5hcHBseVRyYW5zZm9ybShbd2lkdGgsIGhlaWdodF0sIGludik7XG5cbiAgICAgICAgdmFyIHgwID0gTWF0aC5taW4oYmxbMF0sIGJyWzBdLCB1bFswXSwgdXJbMF0pO1xuICAgICAgICB2YXIgeTAgPSBNYXRoLm1pbihibFsxXSwgYnJbMV0sIHVsWzFdLCB1clsxXSk7XG4gICAgICAgIHZhciB4MSA9IE1hdGgubWF4KGJsWzBdLCBiclswXSwgdWxbMF0sIHVyWzBdKTtcbiAgICAgICAgdmFyIHkxID0gTWF0aC5tYXgoYmxbMV0sIGJyWzFdLCB1bFsxXSwgdXJbMV0pO1xuICAgICAgICB0aGlzLmN0eC5maWxsUmVjdCh4MCwgeTAsIHgxIC0geDAsIHkxIC0geTApO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5jdHguZmlsbFJlY3QoLTFlMTAsIC0xZTEwLCAyZTEwLCAyZTEwKTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5yZXN0b3JlKCk7XG4gICAgfSxcbiAgICBiZWdpbklubGluZUltYWdlOiBmdW5jdGlvbiBDYW52YXNHcmFwaGljc19iZWdpbklubGluZUltYWdlKCkge1xuICAgICAgKDAsIF91dGlsLnVucmVhY2hhYmxlKShcIlNob3VsZCBub3QgY2FsbCBiZWdpbklubGluZUltYWdlXCIpO1xuICAgIH0sXG4gICAgYmVnaW5JbWFnZURhdGE6IGZ1bmN0aW9uIENhbnZhc0dyYXBoaWNzX2JlZ2luSW1hZ2VEYXRhKCkge1xuICAgICAgKDAsIF91dGlsLnVucmVhY2hhYmxlKShcIlNob3VsZCBub3QgY2FsbCBiZWdpbkltYWdlRGF0YVwiKTtcbiAgICB9LFxuICAgIHBhaW50Rm9ybVhPYmplY3RCZWdpbjogZnVuY3Rpb24gQ2FudmFzR3JhcGhpY3NfcGFpbnRGb3JtWE9iamVjdEJlZ2luKG1hdHJpeCwgYmJveCkge1xuICAgICAgdGhpcy5zYXZlKCk7XG4gICAgICB0aGlzLmJhc2VUcmFuc2Zvcm1TdGFjay5wdXNoKHRoaXMuYmFzZVRyYW5zZm9ybSk7XG5cbiAgICAgIGlmIChBcnJheS5pc0FycmF5KG1hdHJpeCkgJiYgbWF0cml4Lmxlbmd0aCA9PT0gNikge1xuICAgICAgICB0aGlzLnRyYW5zZm9ybS5hcHBseSh0aGlzLCBtYXRyaXgpO1xuICAgICAgfVxuXG4gICAgICB0aGlzLmJhc2VUcmFuc2Zvcm0gPSB0aGlzLmN0eC5tb3pDdXJyZW50VHJhbnNmb3JtO1xuXG4gICAgICBpZiAoYmJveCkge1xuICAgICAgICB2YXIgd2lkdGggPSBiYm94WzJdIC0gYmJveFswXTtcbiAgICAgICAgdmFyIGhlaWdodCA9IGJib3hbM10gLSBiYm94WzFdO1xuICAgICAgICB0aGlzLmN0eC5yZWN0KGJib3hbMF0sIGJib3hbMV0sIHdpZHRoLCBoZWlnaHQpO1xuICAgICAgICB0aGlzLmNsaXAoKTtcbiAgICAgICAgdGhpcy5lbmRQYXRoKCk7XG4gICAgICB9XG4gICAgfSxcbiAgICBwYWludEZvcm1YT2JqZWN0RW5kOiBmdW5jdGlvbiBDYW52YXNHcmFwaGljc19wYWludEZvcm1YT2JqZWN0RW5kKCkge1xuICAgICAgdGhpcy5yZXN0b3JlKCk7XG4gICAgICB0aGlzLmJhc2VUcmFuc2Zvcm0gPSB0aGlzLmJhc2VUcmFuc2Zvcm1TdGFjay5wb3AoKTtcbiAgICB9LFxuICAgIGJlZ2luR3JvdXA6IGZ1bmN0aW9uIENhbnZhc0dyYXBoaWNzX2JlZ2luR3JvdXAoZ3JvdXApIHtcbiAgICAgIHRoaXMuc2F2ZSgpO1xuICAgICAgdmFyIGN1cnJlbnRDdHggPSB0aGlzLmN0eDtcblxuICAgICAgaWYgKCFncm91cC5pc29sYXRlZCkge1xuICAgICAgICAoMCwgX3V0aWwuaW5mbykoXCJUT0RPOiBTdXBwb3J0IG5vbi1pc29sYXRlZCBncm91cHMuXCIpO1xuICAgICAgfVxuXG4gICAgICBpZiAoZ3JvdXAua25vY2tvdXQpIHtcbiAgICAgICAgKDAsIF91dGlsLndhcm4pKFwiS25vY2tvdXQgZ3JvdXBzIG5vdCBzdXBwb3J0ZWQuXCIpO1xuICAgICAgfVxuXG4gICAgICB2YXIgY3VycmVudFRyYW5zZm9ybSA9IGN1cnJlbnRDdHgubW96Q3VycmVudFRyYW5zZm9ybTtcblxuICAgICAgaWYgKGdyb3VwLm1hdHJpeCkge1xuICAgICAgICBjdXJyZW50Q3R4LnRyYW5zZm9ybS5hcHBseShjdXJyZW50Q3R4LCBncm91cC5tYXRyaXgpO1xuICAgICAgfVxuXG4gICAgICBpZiAoIWdyb3VwLmJib3gpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQm91bmRpbmcgYm94IGlzIHJlcXVpcmVkLlwiKTtcbiAgICAgIH1cblxuICAgICAgdmFyIGJvdW5kcyA9IF91dGlsLlV0aWwuZ2V0QXhpYWxBbGlnbmVkQm91bmRpbmdCb3goZ3JvdXAuYmJveCwgY3VycmVudEN0eC5tb3pDdXJyZW50VHJhbnNmb3JtKTtcblxuICAgICAgdmFyIGNhbnZhc0JvdW5kcyA9IFswLCAwLCBjdXJyZW50Q3R4LmNhbnZhcy53aWR0aCwgY3VycmVudEN0eC5jYW52YXMuaGVpZ2h0XTtcbiAgICAgIGJvdW5kcyA9IF91dGlsLlV0aWwuaW50ZXJzZWN0KGJvdW5kcywgY2FudmFzQm91bmRzKSB8fCBbMCwgMCwgMCwgMF07XG4gICAgICB2YXIgb2Zmc2V0WCA9IE1hdGguZmxvb3IoYm91bmRzWzBdKTtcbiAgICAgIHZhciBvZmZzZXRZID0gTWF0aC5mbG9vcihib3VuZHNbMV0pO1xuICAgICAgdmFyIGRyYXduV2lkdGggPSBNYXRoLm1heChNYXRoLmNlaWwoYm91bmRzWzJdKSAtIG9mZnNldFgsIDEpO1xuICAgICAgdmFyIGRyYXduSGVpZ2h0ID0gTWF0aC5tYXgoTWF0aC5jZWlsKGJvdW5kc1szXSkgLSBvZmZzZXRZLCAxKTtcbiAgICAgIHZhciBzY2FsZVggPSAxLFxuICAgICAgICAgIHNjYWxlWSA9IDE7XG5cbiAgICAgIGlmIChkcmF3bldpZHRoID4gTUFYX0dST1VQX1NJWkUpIHtcbiAgICAgICAgc2NhbGVYID0gZHJhd25XaWR0aCAvIE1BWF9HUk9VUF9TSVpFO1xuICAgICAgICBkcmF3bldpZHRoID0gTUFYX0dST1VQX1NJWkU7XG4gICAgICB9XG5cbiAgICAgIGlmIChkcmF3bkhlaWdodCA+IE1BWF9HUk9VUF9TSVpFKSB7XG4gICAgICAgIHNjYWxlWSA9IGRyYXduSGVpZ2h0IC8gTUFYX0dST1VQX1NJWkU7XG4gICAgICAgIGRyYXduSGVpZ2h0ID0gTUFYX0dST1VQX1NJWkU7XG4gICAgICB9XG5cbiAgICAgIHZhciBjYWNoZUlkID0gXCJncm91cEF0XCIgKyB0aGlzLmdyb3VwTGV2ZWw7XG5cbiAgICAgIGlmIChncm91cC5zbWFzaykge1xuICAgICAgICBjYWNoZUlkICs9IFwiX3NtYXNrX1wiICsgdGhpcy5zbWFza0NvdW50ZXIrKyAlIDI7XG4gICAgICB9XG5cbiAgICAgIHZhciBzY3JhdGNoQ2FudmFzID0gdGhpcy5jYWNoZWRDYW52YXNlcy5nZXRDYW52YXMoY2FjaGVJZCwgZHJhd25XaWR0aCwgZHJhd25IZWlnaHQsIHRydWUpO1xuICAgICAgdmFyIGdyb3VwQ3R4ID0gc2NyYXRjaENhbnZhcy5jb250ZXh0O1xuICAgICAgZ3JvdXBDdHguc2NhbGUoMSAvIHNjYWxlWCwgMSAvIHNjYWxlWSk7XG4gICAgICBncm91cEN0eC50cmFuc2xhdGUoLW9mZnNldFgsIC1vZmZzZXRZKTtcbiAgICAgIGdyb3VwQ3R4LnRyYW5zZm9ybS5hcHBseShncm91cEN0eCwgY3VycmVudFRyYW5zZm9ybSk7XG5cbiAgICAgIGlmIChncm91cC5zbWFzaykge1xuICAgICAgICB0aGlzLnNtYXNrU3RhY2sucHVzaCh7XG4gICAgICAgICAgY2FudmFzOiBzY3JhdGNoQ2FudmFzLmNhbnZhcyxcbiAgICAgICAgICBjb250ZXh0OiBncm91cEN0eCxcbiAgICAgICAgICBvZmZzZXRYLFxuICAgICAgICAgIG9mZnNldFksXG4gICAgICAgICAgc2NhbGVYLFxuICAgICAgICAgIHNjYWxlWSxcbiAgICAgICAgICBzdWJ0eXBlOiBncm91cC5zbWFzay5zdWJ0eXBlLFxuICAgICAgICAgIGJhY2tkcm9wOiBncm91cC5zbWFzay5iYWNrZHJvcCxcbiAgICAgICAgICB0cmFuc2Zlck1hcDogZ3JvdXAuc21hc2sudHJhbnNmZXJNYXAgfHwgbnVsbCxcbiAgICAgICAgICBzdGFydFRyYW5zZm9ybUludmVyc2U6IG51bGxcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjdXJyZW50Q3R4LnNldFRyYW5zZm9ybSgxLCAwLCAwLCAxLCAwLCAwKTtcbiAgICAgICAgY3VycmVudEN0eC50cmFuc2xhdGUob2Zmc2V0WCwgb2Zmc2V0WSk7XG4gICAgICAgIGN1cnJlbnRDdHguc2NhbGUoc2NhbGVYLCBzY2FsZVkpO1xuICAgICAgfVxuXG4gICAgICBjb3B5Q3R4U3RhdGUoY3VycmVudEN0eCwgZ3JvdXBDdHgpO1xuICAgICAgdGhpcy5jdHggPSBncm91cEN0eDtcbiAgICAgIHRoaXMuc2V0R1N0YXRlKFtbXCJCTVwiLCBcInNvdXJjZS1vdmVyXCJdLCBbXCJjYVwiLCAxXSwgW1wiQ0FcIiwgMV1dKTtcbiAgICAgIHRoaXMuZ3JvdXBTdGFjay5wdXNoKGN1cnJlbnRDdHgpO1xuICAgICAgdGhpcy5ncm91cExldmVsKys7XG4gICAgICB0aGlzLmN1cnJlbnQuYWN0aXZlU01hc2sgPSBudWxsO1xuICAgIH0sXG4gICAgZW5kR3JvdXA6IGZ1bmN0aW9uIENhbnZhc0dyYXBoaWNzX2VuZEdyb3VwKGdyb3VwKSB7XG4gICAgICB0aGlzLmdyb3VwTGV2ZWwtLTtcbiAgICAgIHZhciBncm91cEN0eCA9IHRoaXMuY3R4O1xuICAgICAgdGhpcy5jdHggPSB0aGlzLmdyb3VwU3RhY2sucG9wKCk7XG5cbiAgICAgIGlmICh0aGlzLmN0eC5pbWFnZVNtb290aGluZ0VuYWJsZWQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICB0aGlzLmN0eC5pbWFnZVNtb290aGluZ0VuYWJsZWQgPSBmYWxzZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuY3R4Lm1vekltYWdlU21vb3RoaW5nRW5hYmxlZCA9IGZhbHNlO1xuICAgICAgfVxuXG4gICAgICBpZiAoZ3JvdXAuc21hc2spIHtcbiAgICAgICAgdGhpcy50ZW1wU01hc2sgPSB0aGlzLnNtYXNrU3RhY2sucG9wKCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLmN0eC5kcmF3SW1hZ2UoZ3JvdXBDdHguY2FudmFzLCAwLCAwKTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5yZXN0b3JlKCk7XG4gICAgfSxcbiAgICBiZWdpbkFubm90YXRpb25zOiBmdW5jdGlvbiBDYW52YXNHcmFwaGljc19iZWdpbkFubm90YXRpb25zKCkge1xuICAgICAgdGhpcy5zYXZlKCk7XG5cbiAgICAgIGlmICh0aGlzLmJhc2VUcmFuc2Zvcm0pIHtcbiAgICAgICAgdGhpcy5jdHguc2V0VHJhbnNmb3JtLmFwcGx5KHRoaXMuY3R4LCB0aGlzLmJhc2VUcmFuc2Zvcm0pO1xuICAgICAgfVxuICAgIH0sXG4gICAgZW5kQW5ub3RhdGlvbnM6IGZ1bmN0aW9uIENhbnZhc0dyYXBoaWNzX2VuZEFubm90YXRpb25zKCkge1xuICAgICAgdGhpcy5yZXN0b3JlKCk7XG4gICAgfSxcbiAgICBiZWdpbkFubm90YXRpb246IGZ1bmN0aW9uIENhbnZhc0dyYXBoaWNzX2JlZ2luQW5ub3RhdGlvbihyZWN0LCB0cmFuc2Zvcm0sIG1hdHJpeCkge1xuICAgICAgdGhpcy5zYXZlKCk7XG4gICAgICByZXNldEN0eFRvRGVmYXVsdCh0aGlzLmN0eCk7XG4gICAgICB0aGlzLmN1cnJlbnQgPSBuZXcgQ2FudmFzRXh0cmFTdGF0ZSgpO1xuXG4gICAgICBpZiAoQXJyYXkuaXNBcnJheShyZWN0KSAmJiByZWN0Lmxlbmd0aCA9PT0gNCkge1xuICAgICAgICB2YXIgd2lkdGggPSByZWN0WzJdIC0gcmVjdFswXTtcbiAgICAgICAgdmFyIGhlaWdodCA9IHJlY3RbM10gLSByZWN0WzFdO1xuICAgICAgICB0aGlzLmN0eC5yZWN0KHJlY3RbMF0sIHJlY3RbMV0sIHdpZHRoLCBoZWlnaHQpO1xuICAgICAgICB0aGlzLmNsaXAoKTtcbiAgICAgICAgdGhpcy5lbmRQYXRoKCk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMudHJhbnNmb3JtLmFwcGx5KHRoaXMsIHRyYW5zZm9ybSk7XG4gICAgICB0aGlzLnRyYW5zZm9ybS5hcHBseSh0aGlzLCBtYXRyaXgpO1xuICAgIH0sXG4gICAgZW5kQW5ub3RhdGlvbjogZnVuY3Rpb24gQ2FudmFzR3JhcGhpY3NfZW5kQW5ub3RhdGlvbigpIHtcbiAgICAgIHRoaXMucmVzdG9yZSgpO1xuICAgIH0sXG4gICAgcGFpbnRJbWFnZU1hc2tYT2JqZWN0OiBmdW5jdGlvbiBDYW52YXNHcmFwaGljc19wYWludEltYWdlTWFza1hPYmplY3QoaW1nKSB7XG4gICAgICB2YXIgY3R4ID0gdGhpcy5jdHg7XG4gICAgICB2YXIgd2lkdGggPSBpbWcud2lkdGgsXG4gICAgICAgICAgaGVpZ2h0ID0gaW1nLmhlaWdodDtcbiAgICAgIHZhciBmaWxsQ29sb3IgPSB0aGlzLmN1cnJlbnQuZmlsbENvbG9yO1xuICAgICAgdmFyIGlzUGF0dGVybkZpbGwgPSB0aGlzLmN1cnJlbnQucGF0dGVybkZpbGw7XG4gICAgICB2YXIgZ2x5cGggPSB0aGlzLnByb2Nlc3NpbmdUeXBlMztcblxuICAgICAgaWYgKENPTVBJTEVfVFlQRTNfR0xZUEhTICYmIGdseXBoICYmIGdseXBoLmNvbXBpbGVkID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgaWYgKHdpZHRoIDw9IE1BWF9TSVpFX1RPX0NPTVBJTEUgJiYgaGVpZ2h0IDw9IE1BWF9TSVpFX1RPX0NPTVBJTEUpIHtcbiAgICAgICAgICBnbHlwaC5jb21waWxlZCA9IGNvbXBpbGVUeXBlM0dseXBoKHtcbiAgICAgICAgICAgIGRhdGE6IGltZy5kYXRhLFxuICAgICAgICAgICAgd2lkdGgsXG4gICAgICAgICAgICBoZWlnaHRcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBnbHlwaC5jb21waWxlZCA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKGdseXBoICYmIGdseXBoLmNvbXBpbGVkKSB7XG4gICAgICAgIGdseXBoLmNvbXBpbGVkKGN0eCk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdmFyIG1hc2tDYW52YXMgPSB0aGlzLmNhY2hlZENhbnZhc2VzLmdldENhbnZhcyhcIm1hc2tDYW52YXNcIiwgd2lkdGgsIGhlaWdodCk7XG4gICAgICB2YXIgbWFza0N0eCA9IG1hc2tDYW52YXMuY29udGV4dDtcbiAgICAgIG1hc2tDdHguc2F2ZSgpO1xuICAgICAgcHV0QmluYXJ5SW1hZ2VNYXNrKG1hc2tDdHgsIGltZyk7XG4gICAgICBtYXNrQ3R4Lmdsb2JhbENvbXBvc2l0ZU9wZXJhdGlvbiA9IFwic291cmNlLWluXCI7XG4gICAgICBtYXNrQ3R4LmZpbGxTdHlsZSA9IGlzUGF0dGVybkZpbGwgPyBmaWxsQ29sb3IuZ2V0UGF0dGVybihtYXNrQ3R4LCB0aGlzKSA6IGZpbGxDb2xvcjtcbiAgICAgIG1hc2tDdHguZmlsbFJlY3QoMCwgMCwgd2lkdGgsIGhlaWdodCk7XG4gICAgICBtYXNrQ3R4LnJlc3RvcmUoKTtcbiAgICAgIHRoaXMucGFpbnRJbmxpbmVJbWFnZVhPYmplY3QobWFza0NhbnZhcy5jYW52YXMpO1xuICAgIH0sXG4gICAgcGFpbnRJbWFnZU1hc2tYT2JqZWN0UmVwZWF0OiBmdW5jdGlvbiBDYW52YXNHcmFwaGljc19wYWludEltYWdlTWFza1hPYmplY3RSZXBlYXQoaW1nRGF0YSwgc2NhbGVYLCBzY2FsZVksIHBvc2l0aW9ucykge1xuICAgICAgdmFyIHdpZHRoID0gaW1nRGF0YS53aWR0aDtcbiAgICAgIHZhciBoZWlnaHQgPSBpbWdEYXRhLmhlaWdodDtcbiAgICAgIHZhciBmaWxsQ29sb3IgPSB0aGlzLmN1cnJlbnQuZmlsbENvbG9yO1xuICAgICAgdmFyIGlzUGF0dGVybkZpbGwgPSB0aGlzLmN1cnJlbnQucGF0dGVybkZpbGw7XG4gICAgICB2YXIgbWFza0NhbnZhcyA9IHRoaXMuY2FjaGVkQ2FudmFzZXMuZ2V0Q2FudmFzKFwibWFza0NhbnZhc1wiLCB3aWR0aCwgaGVpZ2h0KTtcbiAgICAgIHZhciBtYXNrQ3R4ID0gbWFza0NhbnZhcy5jb250ZXh0O1xuICAgICAgbWFza0N0eC5zYXZlKCk7XG4gICAgICBwdXRCaW5hcnlJbWFnZU1hc2sobWFza0N0eCwgaW1nRGF0YSk7XG4gICAgICBtYXNrQ3R4Lmdsb2JhbENvbXBvc2l0ZU9wZXJhdGlvbiA9IFwic291cmNlLWluXCI7XG4gICAgICBtYXNrQ3R4LmZpbGxTdHlsZSA9IGlzUGF0dGVybkZpbGwgPyBmaWxsQ29sb3IuZ2V0UGF0dGVybihtYXNrQ3R4LCB0aGlzKSA6IGZpbGxDb2xvcjtcbiAgICAgIG1hc2tDdHguZmlsbFJlY3QoMCwgMCwgd2lkdGgsIGhlaWdodCk7XG4gICAgICBtYXNrQ3R4LnJlc3RvcmUoKTtcbiAgICAgIHZhciBjdHggPSB0aGlzLmN0eDtcblxuICAgICAgZm9yICh2YXIgaSA9IDAsIGlpID0gcG9zaXRpb25zLmxlbmd0aDsgaSA8IGlpOyBpICs9IDIpIHtcbiAgICAgICAgY3R4LnNhdmUoKTtcbiAgICAgICAgY3R4LnRyYW5zZm9ybShzY2FsZVgsIDAsIDAsIHNjYWxlWSwgcG9zaXRpb25zW2ldLCBwb3NpdGlvbnNbaSArIDFdKTtcbiAgICAgICAgY3R4LnNjYWxlKDEsIC0xKTtcbiAgICAgICAgY3R4LmRyYXdJbWFnZShtYXNrQ2FudmFzLmNhbnZhcywgMCwgMCwgd2lkdGgsIGhlaWdodCwgMCwgLTEsIDEsIDEpO1xuICAgICAgICBjdHgucmVzdG9yZSgpO1xuICAgICAgfVxuICAgIH0sXG4gICAgcGFpbnRJbWFnZU1hc2tYT2JqZWN0R3JvdXA6IGZ1bmN0aW9uIENhbnZhc0dyYXBoaWNzX3BhaW50SW1hZ2VNYXNrWE9iamVjdEdyb3VwKGltYWdlcykge1xuICAgICAgdmFyIGN0eCA9IHRoaXMuY3R4O1xuICAgICAgdmFyIGZpbGxDb2xvciA9IHRoaXMuY3VycmVudC5maWxsQ29sb3I7XG4gICAgICB2YXIgaXNQYXR0ZXJuRmlsbCA9IHRoaXMuY3VycmVudC5wYXR0ZXJuRmlsbDtcblxuICAgICAgZm9yICh2YXIgaSA9IDAsIGlpID0gaW1hZ2VzLmxlbmd0aDsgaSA8IGlpOyBpKyspIHtcbiAgICAgICAgdmFyIGltYWdlID0gaW1hZ2VzW2ldO1xuICAgICAgICB2YXIgd2lkdGggPSBpbWFnZS53aWR0aCxcbiAgICAgICAgICAgIGhlaWdodCA9IGltYWdlLmhlaWdodDtcbiAgICAgICAgdmFyIG1hc2tDYW52YXMgPSB0aGlzLmNhY2hlZENhbnZhc2VzLmdldENhbnZhcyhcIm1hc2tDYW52YXNcIiwgd2lkdGgsIGhlaWdodCk7XG4gICAgICAgIHZhciBtYXNrQ3R4ID0gbWFza0NhbnZhcy5jb250ZXh0O1xuICAgICAgICBtYXNrQ3R4LnNhdmUoKTtcbiAgICAgICAgcHV0QmluYXJ5SW1hZ2VNYXNrKG1hc2tDdHgsIGltYWdlKTtcbiAgICAgICAgbWFza0N0eC5nbG9iYWxDb21wb3NpdGVPcGVyYXRpb24gPSBcInNvdXJjZS1pblwiO1xuICAgICAgICBtYXNrQ3R4LmZpbGxTdHlsZSA9IGlzUGF0dGVybkZpbGwgPyBmaWxsQ29sb3IuZ2V0UGF0dGVybihtYXNrQ3R4LCB0aGlzKSA6IGZpbGxDb2xvcjtcbiAgICAgICAgbWFza0N0eC5maWxsUmVjdCgwLCAwLCB3aWR0aCwgaGVpZ2h0KTtcbiAgICAgICAgbWFza0N0eC5yZXN0b3JlKCk7XG4gICAgICAgIGN0eC5zYXZlKCk7XG4gICAgICAgIGN0eC50cmFuc2Zvcm0uYXBwbHkoY3R4LCBpbWFnZS50cmFuc2Zvcm0pO1xuICAgICAgICBjdHguc2NhbGUoMSwgLTEpO1xuICAgICAgICBjdHguZHJhd0ltYWdlKG1hc2tDYW52YXMuY2FudmFzLCAwLCAwLCB3aWR0aCwgaGVpZ2h0LCAwLCAtMSwgMSwgMSk7XG4gICAgICAgIGN0eC5yZXN0b3JlKCk7XG4gICAgICB9XG4gICAgfSxcbiAgICBwYWludEltYWdlWE9iamVjdDogZnVuY3Rpb24gQ2FudmFzR3JhcGhpY3NfcGFpbnRJbWFnZVhPYmplY3Qob2JqSWQpIHtcbiAgICAgIGNvbnN0IGltZ0RhdGEgPSBvYmpJZC5zdGFydHNXaXRoKFwiZ19cIikgPyB0aGlzLmNvbW1vbk9ianMuZ2V0KG9iaklkKSA6IHRoaXMub2Jqcy5nZXQob2JqSWQpO1xuXG4gICAgICBpZiAoIWltZ0RhdGEpIHtcbiAgICAgICAgKDAsIF91dGlsLndhcm4pKFwiRGVwZW5kZW50IGltYWdlIGlzbid0IHJlYWR5IHlldFwiKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB0aGlzLnBhaW50SW5saW5lSW1hZ2VYT2JqZWN0KGltZ0RhdGEpO1xuICAgIH0sXG4gICAgcGFpbnRJbWFnZVhPYmplY3RSZXBlYXQ6IGZ1bmN0aW9uIENhbnZhc0dyYXBoaWNzX3BhaW50SW1hZ2VYT2JqZWN0UmVwZWF0KG9iaklkLCBzY2FsZVgsIHNjYWxlWSwgcG9zaXRpb25zKSB7XG4gICAgICBjb25zdCBpbWdEYXRhID0gb2JqSWQuc3RhcnRzV2l0aChcImdfXCIpID8gdGhpcy5jb21tb25PYmpzLmdldChvYmpJZCkgOiB0aGlzLm9ianMuZ2V0KG9iaklkKTtcblxuICAgICAgaWYgKCFpbWdEYXRhKSB7XG4gICAgICAgICgwLCBfdXRpbC53YXJuKShcIkRlcGVuZGVudCBpbWFnZSBpc24ndCByZWFkeSB5ZXRcIik7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdmFyIHdpZHRoID0gaW1nRGF0YS53aWR0aDtcbiAgICAgIHZhciBoZWlnaHQgPSBpbWdEYXRhLmhlaWdodDtcbiAgICAgIHZhciBtYXAgPSBbXTtcblxuICAgICAgZm9yICh2YXIgaSA9IDAsIGlpID0gcG9zaXRpb25zLmxlbmd0aDsgaSA8IGlpOyBpICs9IDIpIHtcbiAgICAgICAgbWFwLnB1c2goe1xuICAgICAgICAgIHRyYW5zZm9ybTogW3NjYWxlWCwgMCwgMCwgc2NhbGVZLCBwb3NpdGlvbnNbaV0sIHBvc2l0aW9uc1tpICsgMV1dLFxuICAgICAgICAgIHg6IDAsXG4gICAgICAgICAgeTogMCxcbiAgICAgICAgICB3OiB3aWR0aCxcbiAgICAgICAgICBoOiBoZWlnaHRcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMucGFpbnRJbmxpbmVJbWFnZVhPYmplY3RHcm91cChpbWdEYXRhLCBtYXApO1xuICAgIH0sXG4gICAgcGFpbnRJbmxpbmVJbWFnZVhPYmplY3Q6IGZ1bmN0aW9uIENhbnZhc0dyYXBoaWNzX3BhaW50SW5saW5lSW1hZ2VYT2JqZWN0KGltZ0RhdGEpIHtcbiAgICAgIHZhciB3aWR0aCA9IGltZ0RhdGEud2lkdGg7XG4gICAgICB2YXIgaGVpZ2h0ID0gaW1nRGF0YS5oZWlnaHQ7XG4gICAgICB2YXIgY3R4ID0gdGhpcy5jdHg7XG4gICAgICB0aGlzLnNhdmUoKTtcbiAgICAgIGN0eC5zY2FsZSgxIC8gd2lkdGgsIC0xIC8gaGVpZ2h0KTtcbiAgICAgIHZhciBjdXJyZW50VHJhbnNmb3JtID0gY3R4Lm1vekN1cnJlbnRUcmFuc2Zvcm1JbnZlcnNlO1xuICAgICAgdmFyIGEgPSBjdXJyZW50VHJhbnNmb3JtWzBdLFxuICAgICAgICAgIGIgPSBjdXJyZW50VHJhbnNmb3JtWzFdO1xuICAgICAgdmFyIHdpZHRoU2NhbGUgPSBNYXRoLm1heChNYXRoLnNxcnQoYSAqIGEgKyBiICogYiksIDEpO1xuICAgICAgdmFyIGMgPSBjdXJyZW50VHJhbnNmb3JtWzJdLFxuICAgICAgICAgIGQgPSBjdXJyZW50VHJhbnNmb3JtWzNdO1xuICAgICAgdmFyIGhlaWdodFNjYWxlID0gTWF0aC5tYXgoTWF0aC5zcXJ0KGMgKiBjICsgZCAqIGQpLCAxKTtcbiAgICAgIHZhciBpbWdUb1BhaW50LCB0bXBDYW52YXM7XG5cbiAgICAgIGlmICh0eXBlb2YgSFRNTEVsZW1lbnQgPT09IFwiZnVuY3Rpb25cIiAmJiBpbWdEYXRhIGluc3RhbmNlb2YgSFRNTEVsZW1lbnQgfHwgIWltZ0RhdGEuZGF0YSkge1xuICAgICAgICBpbWdUb1BhaW50ID0gaW1nRGF0YTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRtcENhbnZhcyA9IHRoaXMuY2FjaGVkQ2FudmFzZXMuZ2V0Q2FudmFzKFwiaW5saW5lSW1hZ2VcIiwgd2lkdGgsIGhlaWdodCk7XG4gICAgICAgIHZhciB0bXBDdHggPSB0bXBDYW52YXMuY29udGV4dDtcbiAgICAgICAgcHV0QmluYXJ5SW1hZ2VEYXRhKHRtcEN0eCwgaW1nRGF0YSk7XG4gICAgICAgIGltZ1RvUGFpbnQgPSB0bXBDYW52YXMuY2FudmFzO1xuICAgICAgfVxuXG4gICAgICB2YXIgcGFpbnRXaWR0aCA9IHdpZHRoLFxuICAgICAgICAgIHBhaW50SGVpZ2h0ID0gaGVpZ2h0O1xuICAgICAgdmFyIHRtcENhbnZhc0lkID0gXCJwcmVzY2FsZTFcIjtcblxuICAgICAgd2hpbGUgKHdpZHRoU2NhbGUgPiAyICYmIHBhaW50V2lkdGggPiAxIHx8IGhlaWdodFNjYWxlID4gMiAmJiBwYWludEhlaWdodCA+IDEpIHtcbiAgICAgICAgdmFyIG5ld1dpZHRoID0gcGFpbnRXaWR0aCxcbiAgICAgICAgICAgIG5ld0hlaWdodCA9IHBhaW50SGVpZ2h0O1xuXG4gICAgICAgIGlmICh3aWR0aFNjYWxlID4gMiAmJiBwYWludFdpZHRoID4gMSkge1xuICAgICAgICAgIG5ld1dpZHRoID0gTWF0aC5jZWlsKHBhaW50V2lkdGggLyAyKTtcbiAgICAgICAgICB3aWR0aFNjYWxlIC89IHBhaW50V2lkdGggLyBuZXdXaWR0aDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChoZWlnaHRTY2FsZSA+IDIgJiYgcGFpbnRIZWlnaHQgPiAxKSB7XG4gICAgICAgICAgbmV3SGVpZ2h0ID0gTWF0aC5jZWlsKHBhaW50SGVpZ2h0IC8gMik7XG4gICAgICAgICAgaGVpZ2h0U2NhbGUgLz0gcGFpbnRIZWlnaHQgLyBuZXdIZWlnaHQ7XG4gICAgICAgIH1cblxuICAgICAgICB0bXBDYW52YXMgPSB0aGlzLmNhY2hlZENhbnZhc2VzLmdldENhbnZhcyh0bXBDYW52YXNJZCwgbmV3V2lkdGgsIG5ld0hlaWdodCk7XG4gICAgICAgIHRtcEN0eCA9IHRtcENhbnZhcy5jb250ZXh0O1xuICAgICAgICB0bXBDdHguY2xlYXJSZWN0KDAsIDAsIG5ld1dpZHRoLCBuZXdIZWlnaHQpO1xuICAgICAgICB0bXBDdHguZHJhd0ltYWdlKGltZ1RvUGFpbnQsIDAsIDAsIHBhaW50V2lkdGgsIHBhaW50SGVpZ2h0LCAwLCAwLCBuZXdXaWR0aCwgbmV3SGVpZ2h0KTtcbiAgICAgICAgaW1nVG9QYWludCA9IHRtcENhbnZhcy5jYW52YXM7XG4gICAgICAgIHBhaW50V2lkdGggPSBuZXdXaWR0aDtcbiAgICAgICAgcGFpbnRIZWlnaHQgPSBuZXdIZWlnaHQ7XG4gICAgICAgIHRtcENhbnZhc0lkID0gdG1wQ2FudmFzSWQgPT09IFwicHJlc2NhbGUxXCIgPyBcInByZXNjYWxlMlwiIDogXCJwcmVzY2FsZTFcIjtcbiAgICAgIH1cblxuICAgICAgY3R4LmRyYXdJbWFnZShpbWdUb1BhaW50LCAwLCAwLCBwYWludFdpZHRoLCBwYWludEhlaWdodCwgMCwgLWhlaWdodCwgd2lkdGgsIGhlaWdodCk7XG5cbiAgICAgIGlmICh0aGlzLmltYWdlTGF5ZXIpIHtcbiAgICAgICAgdmFyIHBvc2l0aW9uID0gdGhpcy5nZXRDYW52YXNQb3NpdGlvbigwLCAtaGVpZ2h0KTtcbiAgICAgICAgdGhpcy5pbWFnZUxheWVyLmFwcGVuZEltYWdlKHtcbiAgICAgICAgICBpbWdEYXRhLFxuICAgICAgICAgIGxlZnQ6IHBvc2l0aW9uWzBdLFxuICAgICAgICAgIHRvcDogcG9zaXRpb25bMV0sXG4gICAgICAgICAgd2lkdGg6IHdpZHRoIC8gY3VycmVudFRyYW5zZm9ybVswXSxcbiAgICAgICAgICBoZWlnaHQ6IGhlaWdodCAvIGN1cnJlbnRUcmFuc2Zvcm1bM11cbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMucmVzdG9yZSgpO1xuICAgIH0sXG4gICAgcGFpbnRJbmxpbmVJbWFnZVhPYmplY3RHcm91cDogZnVuY3Rpb24gQ2FudmFzR3JhcGhpY3NfcGFpbnRJbmxpbmVJbWFnZVhPYmplY3RHcm91cChpbWdEYXRhLCBtYXApIHtcbiAgICAgIHZhciBjdHggPSB0aGlzLmN0eDtcbiAgICAgIHZhciB3ID0gaW1nRGF0YS53aWR0aDtcbiAgICAgIHZhciBoID0gaW1nRGF0YS5oZWlnaHQ7XG4gICAgICB2YXIgdG1wQ2FudmFzID0gdGhpcy5jYWNoZWRDYW52YXNlcy5nZXRDYW52YXMoXCJpbmxpbmVJbWFnZVwiLCB3LCBoKTtcbiAgICAgIHZhciB0bXBDdHggPSB0bXBDYW52YXMuY29udGV4dDtcbiAgICAgIHB1dEJpbmFyeUltYWdlRGF0YSh0bXBDdHgsIGltZ0RhdGEpO1xuXG4gICAgICBmb3IgKHZhciBpID0gMCwgaWkgPSBtYXAubGVuZ3RoOyBpIDwgaWk7IGkrKykge1xuICAgICAgICB2YXIgZW50cnkgPSBtYXBbaV07XG4gICAgICAgIGN0eC5zYXZlKCk7XG4gICAgICAgIGN0eC50cmFuc2Zvcm0uYXBwbHkoY3R4LCBlbnRyeS50cmFuc2Zvcm0pO1xuICAgICAgICBjdHguc2NhbGUoMSwgLTEpO1xuICAgICAgICBjdHguZHJhd0ltYWdlKHRtcENhbnZhcy5jYW52YXMsIGVudHJ5LngsIGVudHJ5LnksIGVudHJ5LncsIGVudHJ5LmgsIDAsIC0xLCAxLCAxKTtcblxuICAgICAgICBpZiAodGhpcy5pbWFnZUxheWVyKSB7XG4gICAgICAgICAgdmFyIHBvc2l0aW9uID0gdGhpcy5nZXRDYW52YXNQb3NpdGlvbihlbnRyeS54LCBlbnRyeS55KTtcbiAgICAgICAgICB0aGlzLmltYWdlTGF5ZXIuYXBwZW5kSW1hZ2Uoe1xuICAgICAgICAgICAgaW1nRGF0YSxcbiAgICAgICAgICAgIGxlZnQ6IHBvc2l0aW9uWzBdLFxuICAgICAgICAgICAgdG9wOiBwb3NpdGlvblsxXSxcbiAgICAgICAgICAgIHdpZHRoOiB3LFxuICAgICAgICAgICAgaGVpZ2h0OiBoXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICBjdHgucmVzdG9yZSgpO1xuICAgICAgfVxuICAgIH0sXG4gICAgcGFpbnRTb2xpZENvbG9ySW1hZ2VNYXNrOiBmdW5jdGlvbiBDYW52YXNHcmFwaGljc19wYWludFNvbGlkQ29sb3JJbWFnZU1hc2soKSB7XG4gICAgICB0aGlzLmN0eC5maWxsUmVjdCgwLCAwLCAxLCAxKTtcbiAgICB9LFxuICAgIHBhaW50WE9iamVjdDogZnVuY3Rpb24gQ2FudmFzR3JhcGhpY3NfcGFpbnRYT2JqZWN0KCkge1xuICAgICAgKDAsIF91dGlsLndhcm4pKFwiVW5zdXBwb3J0ZWQgJ3BhaW50WE9iamVjdCcgY29tbWFuZC5cIik7XG4gICAgfSxcbiAgICBtYXJrUG9pbnQ6IGZ1bmN0aW9uIENhbnZhc0dyYXBoaWNzX21hcmtQb2ludCh0YWcpIHt9LFxuICAgIG1hcmtQb2ludFByb3BzOiBmdW5jdGlvbiBDYW52YXNHcmFwaGljc19tYXJrUG9pbnRQcm9wcyh0YWcsIHByb3BlcnRpZXMpIHt9LFxuICAgIGJlZ2luTWFya2VkQ29udGVudDogZnVuY3Rpb24gQ2FudmFzR3JhcGhpY3NfYmVnaW5NYXJrZWRDb250ZW50KHRhZykge30sXG4gICAgYmVnaW5NYXJrZWRDb250ZW50UHJvcHM6IGZ1bmN0aW9uIENhbnZhc0dyYXBoaWNzX2JlZ2luTWFya2VkQ29udGVudFByb3BzKHRhZywgcHJvcGVydGllcykge30sXG4gICAgZW5kTWFya2VkQ29udGVudDogZnVuY3Rpb24gQ2FudmFzR3JhcGhpY3NfZW5kTWFya2VkQ29udGVudCgpIHt9LFxuICAgIGJlZ2luQ29tcGF0OiBmdW5jdGlvbiBDYW52YXNHcmFwaGljc19iZWdpbkNvbXBhdCgpIHt9LFxuICAgIGVuZENvbXBhdDogZnVuY3Rpb24gQ2FudmFzR3JhcGhpY3NfZW5kQ29tcGF0KCkge30sXG4gICAgY29uc3VtZVBhdGg6IGZ1bmN0aW9uIENhbnZhc0dyYXBoaWNzX2NvbnN1bWVQYXRoKCkge1xuICAgICAgdmFyIGN0eCA9IHRoaXMuY3R4O1xuXG4gICAgICBpZiAodGhpcy5wZW5kaW5nQ2xpcCkge1xuICAgICAgICBpZiAodGhpcy5wZW5kaW5nQ2xpcCA9PT0gRU9fQ0xJUCkge1xuICAgICAgICAgIGN0eC5jbGlwKFwiZXZlbm9kZFwiKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjdHguY2xpcCgpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5wZW5kaW5nQ2xpcCA9IG51bGw7XG4gICAgICB9XG5cbiAgICAgIGN0eC5iZWdpblBhdGgoKTtcbiAgICB9LFxuXG4gICAgZ2V0U2luZ2xlUGl4ZWxXaWR0aChzY2FsZSkge1xuICAgICAgaWYgKHRoaXMuX2NhY2hlZEdldFNpbmdsZVBpeGVsV2lkdGggPT09IG51bGwpIHtcbiAgICAgICAgY29uc3QgaW52ZXJzZSA9IHRoaXMuY3R4Lm1vekN1cnJlbnRUcmFuc2Zvcm1JbnZlcnNlO1xuICAgICAgICB0aGlzLl9jYWNoZWRHZXRTaW5nbGVQaXhlbFdpZHRoID0gTWF0aC5zcXJ0KE1hdGgubWF4KGludmVyc2VbMF0gKiBpbnZlcnNlWzBdICsgaW52ZXJzZVsxXSAqIGludmVyc2VbMV0sIGludmVyc2VbMl0gKiBpbnZlcnNlWzJdICsgaW52ZXJzZVszXSAqIGludmVyc2VbM10pKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXMuX2NhY2hlZEdldFNpbmdsZVBpeGVsV2lkdGg7XG4gICAgfSxcblxuICAgIGdldENhbnZhc1Bvc2l0aW9uOiBmdW5jdGlvbiBDYW52YXNHcmFwaGljc19nZXRDYW52YXNQb3NpdGlvbih4LCB5KSB7XG4gICAgICB2YXIgdHJhbnNmb3JtID0gdGhpcy5jdHgubW96Q3VycmVudFRyYW5zZm9ybTtcbiAgICAgIHJldHVybiBbdHJhbnNmb3JtWzBdICogeCArIHRyYW5zZm9ybVsyXSAqIHkgKyB0cmFuc2Zvcm1bNF0sIHRyYW5zZm9ybVsxXSAqIHggKyB0cmFuc2Zvcm1bM10gKiB5ICsgdHJhbnNmb3JtWzVdXTtcbiAgICB9XG4gIH07XG5cbiAgZm9yICh2YXIgb3AgaW4gX3V0aWwuT1BTKSB7XG4gICAgQ2FudmFzR3JhcGhpY3MucHJvdG90eXBlW191dGlsLk9QU1tvcF1dID0gQ2FudmFzR3JhcGhpY3MucHJvdG90eXBlW29wXTtcbiAgfVxuXG4gIHJldHVybiBDYW52YXNHcmFwaGljcztcbn0oKTtcblxuZXhwb3J0cy5DYW52YXNHcmFwaGljcyA9IENhbnZhc0dyYXBoaWNzO1xuXG4vKioqLyB9KSxcbi8qIDkgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd19wZGZqc19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZ2V0U2hhZGluZ1BhdHRlcm5Gcm9tSVIgPSBnZXRTaGFkaW5nUGF0dGVybkZyb21JUjtcbmV4cG9ydHMuVGlsaW5nUGF0dGVybiA9IHZvaWQgMDtcblxudmFyIF91dGlsID0gX193X3BkZmpzX3JlcXVpcmVfXygyKTtcblxudmFyIFNoYWRpbmdJUnMgPSB7fTtcblxuZnVuY3Rpb24gYXBwbHlCb3VuZGluZ0JveChjdHgsIGJib3gpIHtcbiAgaWYgKCFiYm94IHx8IHR5cGVvZiBQYXRoMkQgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBjb25zdCB3aWR0aCA9IGJib3hbMl0gLSBiYm94WzBdO1xuICBjb25zdCBoZWlnaHQgPSBiYm94WzNdIC0gYmJveFsxXTtcbiAgY29uc3QgcmVnaW9uID0gbmV3IFBhdGgyRCgpO1xuICByZWdpb24ucmVjdChiYm94WzBdLCBiYm94WzFdLCB3aWR0aCwgaGVpZ2h0KTtcbiAgY3R4LmNsaXAocmVnaW9uKTtcbn1cblxuU2hhZGluZ0lScy5SYWRpYWxBeGlhbCA9IHtcbiAgZnJvbUlSOiBmdW5jdGlvbiBSYWRpYWxBeGlhbF9mcm9tSVIocmF3KSB7XG4gICAgdmFyIHR5cGUgPSByYXdbMV07XG4gICAgdmFyIGJib3ggPSByYXdbMl07XG4gICAgdmFyIGNvbG9yU3RvcHMgPSByYXdbM107XG4gICAgdmFyIHAwID0gcmF3WzRdO1xuICAgIHZhciBwMSA9IHJhd1s1XTtcbiAgICB2YXIgcjAgPSByYXdbNl07XG4gICAgdmFyIHIxID0gcmF3WzddO1xuICAgIHJldHVybiB7XG4gICAgICB0eXBlOiBcIlBhdHRlcm5cIixcbiAgICAgIGdldFBhdHRlcm46IGZ1bmN0aW9uIFJhZGlhbEF4aWFsX2dldFBhdHRlcm4oY3R4KSB7XG4gICAgICAgIGFwcGx5Qm91bmRpbmdCb3goY3R4LCBiYm94KTtcbiAgICAgICAgdmFyIGdyYWQ7XG5cbiAgICAgICAgaWYgKHR5cGUgPT09IFwiYXhpYWxcIikge1xuICAgICAgICAgIGdyYWQgPSBjdHguY3JlYXRlTGluZWFyR3JhZGllbnQocDBbMF0sIHAwWzFdLCBwMVswXSwgcDFbMV0pO1xuICAgICAgICB9IGVsc2UgaWYgKHR5cGUgPT09IFwicmFkaWFsXCIpIHtcbiAgICAgICAgICBncmFkID0gY3R4LmNyZWF0ZVJhZGlhbEdyYWRpZW50KHAwWzBdLCBwMFsxXSwgcjAsIHAxWzBdLCBwMVsxXSwgcjEpO1xuICAgICAgICB9XG5cbiAgICAgICAgZm9yICh2YXIgaSA9IDAsIGlpID0gY29sb3JTdG9wcy5sZW5ndGg7IGkgPCBpaTsgKytpKSB7XG4gICAgICAgICAgdmFyIGMgPSBjb2xvclN0b3BzW2ldO1xuICAgICAgICAgIGdyYWQuYWRkQ29sb3JTdG9wKGNbMF0sIGNbMV0pO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGdyYWQ7XG4gICAgICB9XG4gICAgfTtcbiAgfVxufTtcblxudmFyIGNyZWF0ZU1lc2hDYW52YXMgPSBmdW5jdGlvbiBjcmVhdGVNZXNoQ2FudmFzQ2xvc3VyZSgpIHtcbiAgZnVuY3Rpb24gZHJhd1RyaWFuZ2xlKGRhdGEsIGNvbnRleHQsIHAxLCBwMiwgcDMsIGMxLCBjMiwgYzMpIHtcbiAgICB2YXIgY29vcmRzID0gY29udGV4dC5jb29yZHMsXG4gICAgICAgIGNvbG9ycyA9IGNvbnRleHQuY29sb3JzO1xuICAgIHZhciBieXRlcyA9IGRhdGEuZGF0YSxcbiAgICAgICAgcm93U2l6ZSA9IGRhdGEud2lkdGggKiA0O1xuICAgIHZhciB0bXA7XG5cbiAgICBpZiAoY29vcmRzW3AxICsgMV0gPiBjb29yZHNbcDIgKyAxXSkge1xuICAgICAgdG1wID0gcDE7XG4gICAgICBwMSA9IHAyO1xuICAgICAgcDIgPSB0bXA7XG4gICAgICB0bXAgPSBjMTtcbiAgICAgIGMxID0gYzI7XG4gICAgICBjMiA9IHRtcDtcbiAgICB9XG5cbiAgICBpZiAoY29vcmRzW3AyICsgMV0gPiBjb29yZHNbcDMgKyAxXSkge1xuICAgICAgdG1wID0gcDI7XG4gICAgICBwMiA9IHAzO1xuICAgICAgcDMgPSB0bXA7XG4gICAgICB0bXAgPSBjMjtcbiAgICAgIGMyID0gYzM7XG4gICAgICBjMyA9IHRtcDtcbiAgICB9XG5cbiAgICBpZiAoY29vcmRzW3AxICsgMV0gPiBjb29yZHNbcDIgKyAxXSkge1xuICAgICAgdG1wID0gcDE7XG4gICAgICBwMSA9IHAyO1xuICAgICAgcDIgPSB0bXA7XG4gICAgICB0bXAgPSBjMTtcbiAgICAgIGMxID0gYzI7XG4gICAgICBjMiA9IHRtcDtcbiAgICB9XG5cbiAgICB2YXIgeDEgPSAoY29vcmRzW3AxXSArIGNvbnRleHQub2Zmc2V0WCkgKiBjb250ZXh0LnNjYWxlWDtcbiAgICB2YXIgeTEgPSAoY29vcmRzW3AxICsgMV0gKyBjb250ZXh0Lm9mZnNldFkpICogY29udGV4dC5zY2FsZVk7XG4gICAgdmFyIHgyID0gKGNvb3Jkc1twMl0gKyBjb250ZXh0Lm9mZnNldFgpICogY29udGV4dC5zY2FsZVg7XG4gICAgdmFyIHkyID0gKGNvb3Jkc1twMiArIDFdICsgY29udGV4dC5vZmZzZXRZKSAqIGNvbnRleHQuc2NhbGVZO1xuICAgIHZhciB4MyA9IChjb29yZHNbcDNdICsgY29udGV4dC5vZmZzZXRYKSAqIGNvbnRleHQuc2NhbGVYO1xuICAgIHZhciB5MyA9IChjb29yZHNbcDMgKyAxXSArIGNvbnRleHQub2Zmc2V0WSkgKiBjb250ZXh0LnNjYWxlWTtcblxuICAgIGlmICh5MSA+PSB5Mykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciBjMXIgPSBjb2xvcnNbYzFdLFxuICAgICAgICBjMWcgPSBjb2xvcnNbYzEgKyAxXSxcbiAgICAgICAgYzFiID0gY29sb3JzW2MxICsgMl07XG4gICAgdmFyIGMyciA9IGNvbG9yc1tjMl0sXG4gICAgICAgIGMyZyA9IGNvbG9yc1tjMiArIDFdLFxuICAgICAgICBjMmIgPSBjb2xvcnNbYzIgKyAyXTtcbiAgICB2YXIgYzNyID0gY29sb3JzW2MzXSxcbiAgICAgICAgYzNnID0gY29sb3JzW2MzICsgMV0sXG4gICAgICAgIGMzYiA9IGNvbG9yc1tjMyArIDJdO1xuICAgIHZhciBtaW5ZID0gTWF0aC5yb3VuZCh5MSksXG4gICAgICAgIG1heFkgPSBNYXRoLnJvdW5kKHkzKTtcbiAgICB2YXIgeGEsIGNhciwgY2FnLCBjYWI7XG4gICAgdmFyIHhiLCBjYnIsIGNiZywgY2JiO1xuXG4gICAgZm9yICh2YXIgeSA9IG1pblk7IHkgPD0gbWF4WTsgeSsrKSB7XG4gICAgICBpZiAoeSA8IHkyKSB7XG4gICAgICAgIGxldCBrO1xuXG4gICAgICAgIGlmICh5IDwgeTEpIHtcbiAgICAgICAgICBrID0gMDtcbiAgICAgICAgfSBlbHNlIGlmICh5MSA9PT0geTIpIHtcbiAgICAgICAgICBrID0gMTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBrID0gKHkxIC0geSkgLyAoeTEgLSB5Mik7XG4gICAgICAgIH1cblxuICAgICAgICB4YSA9IHgxIC0gKHgxIC0geDIpICogaztcbiAgICAgICAgY2FyID0gYzFyIC0gKGMxciAtIGMycikgKiBrO1xuICAgICAgICBjYWcgPSBjMWcgLSAoYzFnIC0gYzJnKSAqIGs7XG4gICAgICAgIGNhYiA9IGMxYiAtIChjMWIgLSBjMmIpICogaztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGxldCBrO1xuXG4gICAgICAgIGlmICh5ID4geTMpIHtcbiAgICAgICAgICBrID0gMTtcbiAgICAgICAgfSBlbHNlIGlmICh5MiA9PT0geTMpIHtcbiAgICAgICAgICBrID0gMDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBrID0gKHkyIC0geSkgLyAoeTIgLSB5Myk7XG4gICAgICAgIH1cblxuICAgICAgICB4YSA9IHgyIC0gKHgyIC0geDMpICogaztcbiAgICAgICAgY2FyID0gYzJyIC0gKGMyciAtIGMzcikgKiBrO1xuICAgICAgICBjYWcgPSBjMmcgLSAoYzJnIC0gYzNnKSAqIGs7XG4gICAgICAgIGNhYiA9IGMyYiAtIChjMmIgLSBjM2IpICogaztcbiAgICAgIH1cblxuICAgICAgbGV0IGs7XG5cbiAgICAgIGlmICh5IDwgeTEpIHtcbiAgICAgICAgayA9IDA7XG4gICAgICB9IGVsc2UgaWYgKHkgPiB5Mykge1xuICAgICAgICBrID0gMTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGsgPSAoeTEgLSB5KSAvICh5MSAtIHkzKTtcbiAgICAgIH1cblxuICAgICAgeGIgPSB4MSAtICh4MSAtIHgzKSAqIGs7XG4gICAgICBjYnIgPSBjMXIgLSAoYzFyIC0gYzNyKSAqIGs7XG4gICAgICBjYmcgPSBjMWcgLSAoYzFnIC0gYzNnKSAqIGs7XG4gICAgICBjYmIgPSBjMWIgLSAoYzFiIC0gYzNiKSAqIGs7XG4gICAgICB2YXIgeDFfID0gTWF0aC5yb3VuZChNYXRoLm1pbih4YSwgeGIpKTtcbiAgICAgIHZhciB4Ml8gPSBNYXRoLnJvdW5kKE1hdGgubWF4KHhhLCB4YikpO1xuICAgICAgdmFyIGogPSByb3dTaXplICogeSArIHgxXyAqIDQ7XG5cbiAgICAgIGZvciAodmFyIHggPSB4MV87IHggPD0geDJfOyB4KyspIHtcbiAgICAgICAgayA9ICh4YSAtIHgpIC8gKHhhIC0geGIpO1xuXG4gICAgICAgIGlmIChrIDwgMCkge1xuICAgICAgICAgIGsgPSAwO1xuICAgICAgICB9IGVsc2UgaWYgKGsgPiAxKSB7XG4gICAgICAgICAgayA9IDE7XG4gICAgICAgIH1cblxuICAgICAgICBieXRlc1tqKytdID0gY2FyIC0gKGNhciAtIGNicikgKiBrIHwgMDtcbiAgICAgICAgYnl0ZXNbaisrXSA9IGNhZyAtIChjYWcgLSBjYmcpICogayB8IDA7XG4gICAgICAgIGJ5dGVzW2orK10gPSBjYWIgLSAoY2FiIC0gY2JiKSAqIGsgfCAwO1xuICAgICAgICBieXRlc1tqKytdID0gMjU1O1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGRyYXdGaWd1cmUoZGF0YSwgZmlndXJlLCBjb250ZXh0KSB7XG4gICAgdmFyIHBzID0gZmlndXJlLmNvb3JkcztcbiAgICB2YXIgY3MgPSBmaWd1cmUuY29sb3JzO1xuICAgIHZhciBpLCBpaTtcblxuICAgIHN3aXRjaCAoZmlndXJlLnR5cGUpIHtcbiAgICAgIGNhc2UgXCJsYXR0aWNlXCI6XG4gICAgICAgIHZhciB2ZXJ0aWNlc1BlclJvdyA9IGZpZ3VyZS52ZXJ0aWNlc1BlclJvdztcbiAgICAgICAgdmFyIHJvd3MgPSBNYXRoLmZsb29yKHBzLmxlbmd0aCAvIHZlcnRpY2VzUGVyUm93KSAtIDE7XG4gICAgICAgIHZhciBjb2xzID0gdmVydGljZXNQZXJSb3cgLSAxO1xuXG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCByb3dzOyBpKyspIHtcbiAgICAgICAgICB2YXIgcSA9IGkgKiB2ZXJ0aWNlc1BlclJvdztcblxuICAgICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgY29sczsgaisrLCBxKyspIHtcbiAgICAgICAgICAgIGRyYXdUcmlhbmdsZShkYXRhLCBjb250ZXh0LCBwc1txXSwgcHNbcSArIDFdLCBwc1txICsgdmVydGljZXNQZXJSb3ddLCBjc1txXSwgY3NbcSArIDFdLCBjc1txICsgdmVydGljZXNQZXJSb3ddKTtcbiAgICAgICAgICAgIGRyYXdUcmlhbmdsZShkYXRhLCBjb250ZXh0LCBwc1txICsgdmVydGljZXNQZXJSb3cgKyAxXSwgcHNbcSArIDFdLCBwc1txICsgdmVydGljZXNQZXJSb3ddLCBjc1txICsgdmVydGljZXNQZXJSb3cgKyAxXSwgY3NbcSArIDFdLCBjc1txICsgdmVydGljZXNQZXJSb3ddKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSBcInRyaWFuZ2xlc1wiOlxuICAgICAgICBmb3IgKGkgPSAwLCBpaSA9IHBzLmxlbmd0aDsgaSA8IGlpOyBpICs9IDMpIHtcbiAgICAgICAgICBkcmF3VHJpYW5nbGUoZGF0YSwgY29udGV4dCwgcHNbaV0sIHBzW2kgKyAxXSwgcHNbaSArIDJdLCBjc1tpXSwgY3NbaSArIDFdLCBjc1tpICsgMl0pO1xuICAgICAgICB9XG5cbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcImlsbGVnYWwgZmlndXJlXCIpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGNyZWF0ZU1lc2hDYW52YXMoYm91bmRzLCBjb21iaW5lc1NjYWxlLCBjb29yZHMsIGNvbG9ycywgZmlndXJlcywgYmFja2dyb3VuZENvbG9yLCBjYWNoZWRDYW52YXNlcywgd2ViR0xDb250ZXh0KSB7XG4gICAgdmFyIEVYUEVDVEVEX1NDQUxFID0gMS4xO1xuICAgIHZhciBNQVhfUEFUVEVSTl9TSVpFID0gMzAwMDtcbiAgICB2YXIgQk9SREVSX1NJWkUgPSAyO1xuICAgIHZhciBvZmZzZXRYID0gTWF0aC5mbG9vcihib3VuZHNbMF0pO1xuICAgIHZhciBvZmZzZXRZID0gTWF0aC5mbG9vcihib3VuZHNbMV0pO1xuICAgIHZhciBib3VuZHNXaWR0aCA9IE1hdGguY2VpbChib3VuZHNbMl0pIC0gb2Zmc2V0WDtcbiAgICB2YXIgYm91bmRzSGVpZ2h0ID0gTWF0aC5jZWlsKGJvdW5kc1szXSkgLSBvZmZzZXRZO1xuICAgIHZhciB3aWR0aCA9IE1hdGgubWluKE1hdGguY2VpbChNYXRoLmFicyhib3VuZHNXaWR0aCAqIGNvbWJpbmVzU2NhbGVbMF0gKiBFWFBFQ1RFRF9TQ0FMRSkpLCBNQVhfUEFUVEVSTl9TSVpFKTtcbiAgICB2YXIgaGVpZ2h0ID0gTWF0aC5taW4oTWF0aC5jZWlsKE1hdGguYWJzKGJvdW5kc0hlaWdodCAqIGNvbWJpbmVzU2NhbGVbMV0gKiBFWFBFQ1RFRF9TQ0FMRSkpLCBNQVhfUEFUVEVSTl9TSVpFKTtcbiAgICB2YXIgc2NhbGVYID0gYm91bmRzV2lkdGggLyB3aWR0aDtcbiAgICB2YXIgc2NhbGVZID0gYm91bmRzSGVpZ2h0IC8gaGVpZ2h0O1xuICAgIHZhciBjb250ZXh0ID0ge1xuICAgICAgY29vcmRzLFxuICAgICAgY29sb3JzLFxuICAgICAgb2Zmc2V0WDogLW9mZnNldFgsXG4gICAgICBvZmZzZXRZOiAtb2Zmc2V0WSxcbiAgICAgIHNjYWxlWDogMSAvIHNjYWxlWCxcbiAgICAgIHNjYWxlWTogMSAvIHNjYWxlWVxuICAgIH07XG4gICAgdmFyIHBhZGRlZFdpZHRoID0gd2lkdGggKyBCT1JERVJfU0laRSAqIDI7XG4gICAgdmFyIHBhZGRlZEhlaWdodCA9IGhlaWdodCArIEJPUkRFUl9TSVpFICogMjtcbiAgICB2YXIgY2FudmFzLCB0bXBDYW52YXMsIGksIGlpO1xuXG4gICAgaWYgKHdlYkdMQ29udGV4dC5pc0VuYWJsZWQpIHtcbiAgICAgIGNhbnZhcyA9IHdlYkdMQ29udGV4dC5kcmF3RmlndXJlcyh7XG4gICAgICAgIHdpZHRoLFxuICAgICAgICBoZWlnaHQsXG4gICAgICAgIGJhY2tncm91bmRDb2xvcixcbiAgICAgICAgZmlndXJlcyxcbiAgICAgICAgY29udGV4dFxuICAgICAgfSk7XG4gICAgICB0bXBDYW52YXMgPSBjYWNoZWRDYW52YXNlcy5nZXRDYW52YXMoXCJtZXNoXCIsIHBhZGRlZFdpZHRoLCBwYWRkZWRIZWlnaHQsIGZhbHNlKTtcbiAgICAgIHRtcENhbnZhcy5jb250ZXh0LmRyYXdJbWFnZShjYW52YXMsIEJPUkRFUl9TSVpFLCBCT1JERVJfU0laRSk7XG4gICAgICBjYW52YXMgPSB0bXBDYW52YXMuY2FudmFzO1xuICAgIH0gZWxzZSB7XG4gICAgICB0bXBDYW52YXMgPSBjYWNoZWRDYW52YXNlcy5nZXRDYW52YXMoXCJtZXNoXCIsIHBhZGRlZFdpZHRoLCBwYWRkZWRIZWlnaHQsIGZhbHNlKTtcbiAgICAgIHZhciB0bXBDdHggPSB0bXBDYW52YXMuY29udGV4dDtcbiAgICAgIHZhciBkYXRhID0gdG1wQ3R4LmNyZWF0ZUltYWdlRGF0YSh3aWR0aCwgaGVpZ2h0KTtcblxuICAgICAgaWYgKGJhY2tncm91bmRDb2xvcikge1xuICAgICAgICB2YXIgYnl0ZXMgPSBkYXRhLmRhdGE7XG5cbiAgICAgICAgZm9yIChpID0gMCwgaWkgPSBieXRlcy5sZW5ndGg7IGkgPCBpaTsgaSArPSA0KSB7XG4gICAgICAgICAgYnl0ZXNbaV0gPSBiYWNrZ3JvdW5kQ29sb3JbMF07XG4gICAgICAgICAgYnl0ZXNbaSArIDFdID0gYmFja2dyb3VuZENvbG9yWzFdO1xuICAgICAgICAgIGJ5dGVzW2kgKyAyXSA9IGJhY2tncm91bmRDb2xvclsyXTtcbiAgICAgICAgICBieXRlc1tpICsgM10gPSAyNTU7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgZm9yIChpID0gMDsgaSA8IGZpZ3VyZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgZHJhd0ZpZ3VyZShkYXRhLCBmaWd1cmVzW2ldLCBjb250ZXh0KTtcbiAgICAgIH1cblxuICAgICAgdG1wQ3R4LnB1dEltYWdlRGF0YShkYXRhLCBCT1JERVJfU0laRSwgQk9SREVSX1NJWkUpO1xuICAgICAgY2FudmFzID0gdG1wQ2FudmFzLmNhbnZhcztcbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAgY2FudmFzLFxuICAgICAgb2Zmc2V0WDogb2Zmc2V0WCAtIEJPUkRFUl9TSVpFICogc2NhbGVYLFxuICAgICAgb2Zmc2V0WTogb2Zmc2V0WSAtIEJPUkRFUl9TSVpFICogc2NhbGVZLFxuICAgICAgc2NhbGVYLFxuICAgICAgc2NhbGVZXG4gICAgfTtcbiAgfVxuXG4gIHJldHVybiBjcmVhdGVNZXNoQ2FudmFzO1xufSgpO1xuXG5TaGFkaW5nSVJzLk1lc2ggPSB7XG4gIGZyb21JUjogZnVuY3Rpb24gTWVzaF9mcm9tSVIocmF3KSB7XG4gICAgdmFyIGNvb3JkcyA9IHJhd1syXTtcbiAgICB2YXIgY29sb3JzID0gcmF3WzNdO1xuICAgIHZhciBmaWd1cmVzID0gcmF3WzRdO1xuICAgIHZhciBib3VuZHMgPSByYXdbNV07XG4gICAgdmFyIG1hdHJpeCA9IHJhd1s2XTtcbiAgICB2YXIgYmJveCA9IHJhd1s3XTtcbiAgICB2YXIgYmFja2dyb3VuZCA9IHJhd1s4XTtcbiAgICByZXR1cm4ge1xuICAgICAgdHlwZTogXCJQYXR0ZXJuXCIsXG4gICAgICBnZXRQYXR0ZXJuOiBmdW5jdGlvbiBNZXNoX2dldFBhdHRlcm4oY3R4LCBvd25lciwgc2hhZGluZ0ZpbGwpIHtcbiAgICAgICAgYXBwbHlCb3VuZGluZ0JveChjdHgsIGJib3gpO1xuICAgICAgICB2YXIgc2NhbGU7XG5cbiAgICAgICAgaWYgKHNoYWRpbmdGaWxsKSB7XG4gICAgICAgICAgc2NhbGUgPSBfdXRpbC5VdGlsLnNpbmd1bGFyVmFsdWVEZWNvbXBvc2UyZFNjYWxlKGN0eC5tb3pDdXJyZW50VHJhbnNmb3JtKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzY2FsZSA9IF91dGlsLlV0aWwuc2luZ3VsYXJWYWx1ZURlY29tcG9zZTJkU2NhbGUob3duZXIuYmFzZVRyYW5zZm9ybSk7XG5cbiAgICAgICAgICBpZiAobWF0cml4KSB7XG4gICAgICAgICAgICB2YXIgbWF0cml4U2NhbGUgPSBfdXRpbC5VdGlsLnNpbmd1bGFyVmFsdWVEZWNvbXBvc2UyZFNjYWxlKG1hdHJpeCk7XG5cbiAgICAgICAgICAgIHNjYWxlID0gW3NjYWxlWzBdICogbWF0cml4U2NhbGVbMF0sIHNjYWxlWzFdICogbWF0cml4U2NhbGVbMV1dO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHZhciB0ZW1wb3JhcnlQYXR0ZXJuQ2FudmFzID0gY3JlYXRlTWVzaENhbnZhcyhib3VuZHMsIHNjYWxlLCBjb29yZHMsIGNvbG9ycywgZmlndXJlcywgc2hhZGluZ0ZpbGwgPyBudWxsIDogYmFja2dyb3VuZCwgb3duZXIuY2FjaGVkQ2FudmFzZXMsIG93bmVyLndlYkdMQ29udGV4dCk7XG5cbiAgICAgICAgaWYgKCFzaGFkaW5nRmlsbCkge1xuICAgICAgICAgIGN0eC5zZXRUcmFuc2Zvcm0uYXBwbHkoY3R4LCBvd25lci5iYXNlVHJhbnNmb3JtKTtcblxuICAgICAgICAgIGlmIChtYXRyaXgpIHtcbiAgICAgICAgICAgIGN0eC50cmFuc2Zvcm0uYXBwbHkoY3R4LCBtYXRyaXgpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGN0eC50cmFuc2xhdGUodGVtcG9yYXJ5UGF0dGVybkNhbnZhcy5vZmZzZXRYLCB0ZW1wb3JhcnlQYXR0ZXJuQ2FudmFzLm9mZnNldFkpO1xuICAgICAgICBjdHguc2NhbGUodGVtcG9yYXJ5UGF0dGVybkNhbnZhcy5zY2FsZVgsIHRlbXBvcmFyeVBhdHRlcm5DYW52YXMuc2NhbGVZKTtcbiAgICAgICAgcmV0dXJuIGN0eC5jcmVhdGVQYXR0ZXJuKHRlbXBvcmFyeVBhdHRlcm5DYW52YXMuY2FudmFzLCBcIm5vLXJlcGVhdFwiKTtcbiAgICAgIH1cbiAgICB9O1xuICB9XG59O1xuU2hhZGluZ0lScy5EdW1teSA9IHtcbiAgZnJvbUlSOiBmdW5jdGlvbiBEdW1teV9mcm9tSVIoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHR5cGU6IFwiUGF0dGVyblwiLFxuICAgICAgZ2V0UGF0dGVybjogZnVuY3Rpb24gRHVtbXlfZnJvbUlSX2dldFBhdHRlcm4oKSB7XG4gICAgICAgIHJldHVybiBcImhvdHBpbmtcIjtcbiAgICAgIH1cbiAgICB9O1xuICB9XG59O1xuXG5mdW5jdGlvbiBnZXRTaGFkaW5nUGF0dGVybkZyb21JUihyYXcpIHtcbiAgdmFyIHNoYWRpbmdJUiA9IFNoYWRpbmdJUnNbcmF3WzBdXTtcblxuICBpZiAoIXNoYWRpbmdJUikge1xuICAgIHRocm93IG5ldyBFcnJvcihgVW5rbm93biBJUiB0eXBlOiAke3Jhd1swXX1gKTtcbiAgfVxuXG4gIHJldHVybiBzaGFkaW5nSVIuZnJvbUlSKHJhdyk7XG59XG5cbnZhciBUaWxpbmdQYXR0ZXJuID0gZnVuY3Rpb24gVGlsaW5nUGF0dGVybkNsb3N1cmUoKSB7XG4gIHZhciBQYWludFR5cGUgPSB7XG4gICAgQ09MT1JFRDogMSxcbiAgICBVTkNPTE9SRUQ6IDJcbiAgfTtcbiAgdmFyIE1BWF9QQVRURVJOX1NJWkUgPSAzMDAwO1xuXG4gIGZ1bmN0aW9uIFRpbGluZ1BhdHRlcm4oSVIsIGNvbG9yLCBjdHgsIGNhbnZhc0dyYXBoaWNzRmFjdG9yeSwgYmFzZVRyYW5zZm9ybSkge1xuICAgIHRoaXMub3BlcmF0b3JMaXN0ID0gSVJbMl07XG4gICAgdGhpcy5tYXRyaXggPSBJUlszXSB8fCBbMSwgMCwgMCwgMSwgMCwgMF07XG4gICAgdGhpcy5iYm94ID0gSVJbNF07XG4gICAgdGhpcy54c3RlcCA9IElSWzVdO1xuICAgIHRoaXMueXN0ZXAgPSBJUls2XTtcbiAgICB0aGlzLnBhaW50VHlwZSA9IElSWzddO1xuICAgIHRoaXMudGlsaW5nVHlwZSA9IElSWzhdO1xuICAgIHRoaXMuY29sb3IgPSBjb2xvcjtcbiAgICB0aGlzLmNhbnZhc0dyYXBoaWNzRmFjdG9yeSA9IGNhbnZhc0dyYXBoaWNzRmFjdG9yeTtcbiAgICB0aGlzLmJhc2VUcmFuc2Zvcm0gPSBiYXNlVHJhbnNmb3JtO1xuICAgIHRoaXMudHlwZSA9IFwiUGF0dGVyblwiO1xuICAgIHRoaXMuY3R4ID0gY3R4O1xuICB9XG5cbiAgVGlsaW5nUGF0dGVybi5wcm90b3R5cGUgPSB7XG4gICAgY3JlYXRlUGF0dGVybkNhbnZhczogZnVuY3Rpb24gVGlsaW5QYXR0ZXJuX2NyZWF0ZVBhdHRlcm5DYW52YXMob3duZXIpIHtcbiAgICAgIHZhciBvcGVyYXRvckxpc3QgPSB0aGlzLm9wZXJhdG9yTGlzdDtcbiAgICAgIHZhciBiYm94ID0gdGhpcy5iYm94O1xuICAgICAgdmFyIHhzdGVwID0gdGhpcy54c3RlcDtcbiAgICAgIHZhciB5c3RlcCA9IHRoaXMueXN0ZXA7XG4gICAgICB2YXIgcGFpbnRUeXBlID0gdGhpcy5wYWludFR5cGU7XG4gICAgICB2YXIgdGlsaW5nVHlwZSA9IHRoaXMudGlsaW5nVHlwZTtcbiAgICAgIHZhciBjb2xvciA9IHRoaXMuY29sb3I7XG4gICAgICB2YXIgY2FudmFzR3JhcGhpY3NGYWN0b3J5ID0gdGhpcy5jYW52YXNHcmFwaGljc0ZhY3Rvcnk7XG4gICAgICAoMCwgX3V0aWwuaW5mbykoXCJUaWxpbmdUeXBlOiBcIiArIHRpbGluZ1R5cGUpO1xuICAgICAgdmFyIHgwID0gYmJveFswXSxcbiAgICAgICAgICB5MCA9IGJib3hbMV0sXG4gICAgICAgICAgeDEgPSBiYm94WzJdLFxuICAgICAgICAgIHkxID0gYmJveFszXTtcblxuICAgICAgdmFyIG1hdHJpeFNjYWxlID0gX3V0aWwuVXRpbC5zaW5ndWxhclZhbHVlRGVjb21wb3NlMmRTY2FsZSh0aGlzLm1hdHJpeCk7XG5cbiAgICAgIHZhciBjdXJNYXRyaXhTY2FsZSA9IF91dGlsLlV0aWwuc2luZ3VsYXJWYWx1ZURlY29tcG9zZTJkU2NhbGUodGhpcy5iYXNlVHJhbnNmb3JtKTtcblxuICAgICAgdmFyIGNvbWJpbmVkU2NhbGUgPSBbbWF0cml4U2NhbGVbMF0gKiBjdXJNYXRyaXhTY2FsZVswXSwgbWF0cml4U2NhbGVbMV0gKiBjdXJNYXRyaXhTY2FsZVsxXV07XG4gICAgICB2YXIgZGlteCA9IHRoaXMuZ2V0U2l6ZUFuZFNjYWxlKHhzdGVwLCB0aGlzLmN0eC5jYW52YXMud2lkdGgsIGNvbWJpbmVkU2NhbGVbMF0pO1xuICAgICAgdmFyIGRpbXkgPSB0aGlzLmdldFNpemVBbmRTY2FsZSh5c3RlcCwgdGhpcy5jdHguY2FudmFzLmhlaWdodCwgY29tYmluZWRTY2FsZVsxXSk7XG4gICAgICB2YXIgdG1wQ2FudmFzID0gb3duZXIuY2FjaGVkQ2FudmFzZXMuZ2V0Q2FudmFzKFwicGF0dGVyblwiLCBkaW14LnNpemUsIGRpbXkuc2l6ZSwgdHJ1ZSk7XG4gICAgICB2YXIgdG1wQ3R4ID0gdG1wQ2FudmFzLmNvbnRleHQ7XG4gICAgICB2YXIgZ3JhcGhpY3MgPSBjYW52YXNHcmFwaGljc0ZhY3RvcnkuY3JlYXRlQ2FudmFzR3JhcGhpY3ModG1wQ3R4KTtcbiAgICAgIGdyYXBoaWNzLmdyb3VwTGV2ZWwgPSBvd25lci5ncm91cExldmVsO1xuICAgICAgdGhpcy5zZXRGaWxsQW5kU3Ryb2tlU3R5bGVUb0NvbnRleHQoZ3JhcGhpY3MsIHBhaW50VHlwZSwgY29sb3IpO1xuICAgICAgZ3JhcGhpY3MudHJhbnNmb3JtKGRpbXguc2NhbGUsIDAsIDAsIGRpbXkuc2NhbGUsIDAsIDApO1xuICAgICAgZ3JhcGhpY3MudHJhbnNmb3JtKDEsIDAsIDAsIDEsIC14MCwgLXkwKTtcbiAgICAgIHRoaXMuY2xpcEJib3goZ3JhcGhpY3MsIGJib3gsIHgwLCB5MCwgeDEsIHkxKTtcbiAgICAgIGdyYXBoaWNzLmV4ZWN1dGVPcGVyYXRvckxpc3Qob3BlcmF0b3JMaXN0KTtcbiAgICAgIHRoaXMuY3R4LnRyYW5zZm9ybSgxLCAwLCAwLCAxLCB4MCwgeTApO1xuICAgICAgdGhpcy5jdHguc2NhbGUoMSAvIGRpbXguc2NhbGUsIDEgLyBkaW15LnNjYWxlKTtcbiAgICAgIHJldHVybiB0bXBDYW52YXMuY2FudmFzO1xuICAgIH0sXG4gICAgZ2V0U2l6ZUFuZFNjYWxlOiBmdW5jdGlvbiBUaWxpbmdQYXR0ZXJuX2dldFNpemVBbmRTY2FsZShzdGVwLCByZWFsT3V0cHV0U2l6ZSwgc2NhbGUpIHtcbiAgICAgIHN0ZXAgPSBNYXRoLmFicyhzdGVwKTtcbiAgICAgIHZhciBtYXhTaXplID0gTWF0aC5tYXgoTUFYX1BBVFRFUk5fU0laRSwgcmVhbE91dHB1dFNpemUpO1xuICAgICAgdmFyIHNpemUgPSBNYXRoLmNlaWwoc3RlcCAqIHNjYWxlKTtcblxuICAgICAgaWYgKHNpemUgPj0gbWF4U2l6ZSkge1xuICAgICAgICBzaXplID0gbWF4U2l6ZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHNjYWxlID0gc2l6ZSAvIHN0ZXA7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB7XG4gICAgICAgIHNjYWxlLFxuICAgICAgICBzaXplXG4gICAgICB9O1xuICAgIH0sXG4gICAgY2xpcEJib3g6IGZ1bmN0aW9uIGNsaXBCYm94KGdyYXBoaWNzLCBiYm94LCB4MCwgeTAsIHgxLCB5MSkge1xuICAgICAgaWYgKEFycmF5LmlzQXJyYXkoYmJveCkgJiYgYmJveC5sZW5ndGggPT09IDQpIHtcbiAgICAgICAgdmFyIGJib3hXaWR0aCA9IHgxIC0geDA7XG4gICAgICAgIHZhciBiYm94SGVpZ2h0ID0geTEgLSB5MDtcbiAgICAgICAgZ3JhcGhpY3MuY3R4LnJlY3QoeDAsIHkwLCBiYm94V2lkdGgsIGJib3hIZWlnaHQpO1xuICAgICAgICBncmFwaGljcy5jbGlwKCk7XG4gICAgICAgIGdyYXBoaWNzLmVuZFBhdGgoKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIHNldEZpbGxBbmRTdHJva2VTdHlsZVRvQ29udGV4dDogZnVuY3Rpb24gc2V0RmlsbEFuZFN0cm9rZVN0eWxlVG9Db250ZXh0KGdyYXBoaWNzLCBwYWludFR5cGUsIGNvbG9yKSB7XG4gICAgICBjb25zdCBjb250ZXh0ID0gZ3JhcGhpY3MuY3R4LFxuICAgICAgICAgICAgY3VycmVudCA9IGdyYXBoaWNzLmN1cnJlbnQ7XG5cbiAgICAgIHN3aXRjaCAocGFpbnRUeXBlKSB7XG4gICAgICAgIGNhc2UgUGFpbnRUeXBlLkNPTE9SRUQ6XG4gICAgICAgICAgdmFyIGN0eCA9IHRoaXMuY3R4O1xuICAgICAgICAgIGNvbnRleHQuZmlsbFN0eWxlID0gY3R4LmZpbGxTdHlsZTtcbiAgICAgICAgICBjb250ZXh0LnN0cm9rZVN0eWxlID0gY3R4LnN0cm9rZVN0eWxlO1xuICAgICAgICAgIGN1cnJlbnQuZmlsbENvbG9yID0gY3R4LmZpbGxTdHlsZTtcbiAgICAgICAgICBjdXJyZW50LnN0cm9rZUNvbG9yID0gY3R4LnN0cm9rZVN0eWxlO1xuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgUGFpbnRUeXBlLlVOQ09MT1JFRDpcbiAgICAgICAgICB2YXIgY3NzQ29sb3IgPSBfdXRpbC5VdGlsLm1ha2VDc3NSZ2IoY29sb3JbMF0sIGNvbG9yWzFdLCBjb2xvclsyXSk7XG5cbiAgICAgICAgICBjb250ZXh0LmZpbGxTdHlsZSA9IGNzc0NvbG9yO1xuICAgICAgICAgIGNvbnRleHQuc3Ryb2tlU3R5bGUgPSBjc3NDb2xvcjtcbiAgICAgICAgICBjdXJyZW50LmZpbGxDb2xvciA9IGNzc0NvbG9yO1xuICAgICAgICAgIGN1cnJlbnQuc3Ryb2tlQ29sb3IgPSBjc3NDb2xvcjtcbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIHRocm93IG5ldyBfdXRpbC5Gb3JtYXRFcnJvcihgVW5zdXBwb3J0ZWQgcGFpbnQgdHlwZTogJHtwYWludFR5cGV9YCk7XG4gICAgICB9XG4gICAgfSxcbiAgICBnZXRQYXR0ZXJuOiBmdW5jdGlvbiBUaWxpbmdQYXR0ZXJuX2dldFBhdHRlcm4oY3R4LCBvd25lcikge1xuICAgICAgY3R4ID0gdGhpcy5jdHg7XG4gICAgICBjdHguc2V0VHJhbnNmb3JtLmFwcGx5KGN0eCwgdGhpcy5iYXNlVHJhbnNmb3JtKTtcbiAgICAgIGN0eC50cmFuc2Zvcm0uYXBwbHkoY3R4LCB0aGlzLm1hdHJpeCk7XG4gICAgICB2YXIgdGVtcG9yYXJ5UGF0dGVybkNhbnZhcyA9IHRoaXMuY3JlYXRlUGF0dGVybkNhbnZhcyhvd25lcik7XG4gICAgICByZXR1cm4gY3R4LmNyZWF0ZVBhdHRlcm4odGVtcG9yYXJ5UGF0dGVybkNhbnZhcywgXCJyZXBlYXRcIik7XG4gICAgfVxuICB9O1xuICByZXR1cm4gVGlsaW5nUGF0dGVybjtcbn0oKTtcblxuZXhwb3J0cy5UaWxpbmdQYXR0ZXJuID0gVGlsaW5nUGF0dGVybjtcblxuLyoqKi8gfSksXG4vKiAxMCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193X3BkZmpzX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5HbG9iYWxXb3JrZXJPcHRpb25zID0gdm9pZCAwO1xuY29uc3QgR2xvYmFsV29ya2VyT3B0aW9ucyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG5leHBvcnRzLkdsb2JhbFdvcmtlck9wdGlvbnMgPSBHbG9iYWxXb3JrZXJPcHRpb25zO1xuR2xvYmFsV29ya2VyT3B0aW9ucy53b3JrZXJQb3J0ID0gR2xvYmFsV29ya2VyT3B0aW9ucy53b3JrZXJQb3J0ID09PSB1bmRlZmluZWQgPyBudWxsIDogR2xvYmFsV29ya2VyT3B0aW9ucy53b3JrZXJQb3J0O1xuR2xvYmFsV29ya2VyT3B0aW9ucy53b3JrZXJTcmMgPSBHbG9iYWxXb3JrZXJPcHRpb25zLndvcmtlclNyYyA9PT0gdW5kZWZpbmVkID8gXCJcIiA6IEdsb2JhbFdvcmtlck9wdGlvbnMud29ya2VyU3JjO1xuXG4vKioqLyB9KSxcbi8qIDExICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dfcGRmanNfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLk1lc3NhZ2VIYW5kbGVyID0gdm9pZCAwO1xuXG52YXIgX3V0aWwgPSBfX3dfcGRmanNfcmVxdWlyZV9fKDIpO1xuXG5jb25zdCBDYWxsYmFja0tpbmQgPSB7XG4gIFVOS05PV046IDAsXG4gIERBVEE6IDEsXG4gIEVSUk9SOiAyXG59O1xuY29uc3QgU3RyZWFtS2luZCA9IHtcbiAgVU5LTk9XTjogMCxcbiAgQ0FOQ0VMOiAxLFxuICBDQU5DRUxfQ09NUExFVEU6IDIsXG4gIENMT1NFOiAzLFxuICBFTlFVRVVFOiA0LFxuICBFUlJPUjogNSxcbiAgUFVMTDogNixcbiAgUFVMTF9DT01QTEVURTogNyxcbiAgU1RBUlRfQ09NUExFVEU6IDhcbn07XG5cbmZ1bmN0aW9uIHdyYXBSZWFzb24ocmVhc29uKSB7XG4gIGlmICh0eXBlb2YgcmVhc29uICE9PSBcIm9iamVjdFwiIHx8IHJlYXNvbiA9PT0gbnVsbCkge1xuICAgIHJldHVybiByZWFzb247XG4gIH1cblxuICBzd2l0Y2ggKHJlYXNvbi5uYW1lKSB7XG4gICAgY2FzZSBcIkFib3J0RXhjZXB0aW9uXCI6XG4gICAgICByZXR1cm4gbmV3IF91dGlsLkFib3J0RXhjZXB0aW9uKHJlYXNvbi5tZXNzYWdlKTtcblxuICAgIGNhc2UgXCJNaXNzaW5nUERGRXhjZXB0aW9uXCI6XG4gICAgICByZXR1cm4gbmV3IF91dGlsLk1pc3NpbmdQREZFeGNlcHRpb24ocmVhc29uLm1lc3NhZ2UpO1xuXG4gICAgY2FzZSBcIlVuZXhwZWN0ZWRSZXNwb25zZUV4Y2VwdGlvblwiOlxuICAgICAgcmV0dXJuIG5ldyBfdXRpbC5VbmV4cGVjdGVkUmVzcG9uc2VFeGNlcHRpb24ocmVhc29uLm1lc3NhZ2UsIHJlYXNvbi5zdGF0dXMpO1xuXG4gICAgY2FzZSBcIlVua25vd25FcnJvckV4Y2VwdGlvblwiOlxuICAgICAgcmV0dXJuIG5ldyBfdXRpbC5Vbmtub3duRXJyb3JFeGNlcHRpb24ocmVhc29uLm1lc3NhZ2UsIHJlYXNvbi5kZXRhaWxzKTtcblxuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gbmV3IF91dGlsLlVua25vd25FcnJvckV4Y2VwdGlvbihyZWFzb24ubWVzc2FnZSwgcmVhc29uLnRvU3RyaW5nKCkpO1xuICB9XG59XG5cbmNsYXNzIE1lc3NhZ2VIYW5kbGVyIHtcbiAgY29uc3RydWN0b3Ioc291cmNlTmFtZSwgdGFyZ2V0TmFtZSwgY29tT2JqKSB7XG4gICAgdGhpcy5zb3VyY2VOYW1lID0gc291cmNlTmFtZTtcbiAgICB0aGlzLnRhcmdldE5hbWUgPSB0YXJnZXROYW1lO1xuICAgIHRoaXMuY29tT2JqID0gY29tT2JqO1xuICAgIHRoaXMuY2FsbGJhY2tJZCA9IDE7XG4gICAgdGhpcy5zdHJlYW1JZCA9IDE7XG4gICAgdGhpcy5wb3N0TWVzc2FnZVRyYW5zZmVycyA9IHRydWU7XG4gICAgdGhpcy5zdHJlYW1TaW5rcyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgdGhpcy5zdHJlYW1Db250cm9sbGVycyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgdGhpcy5jYWxsYmFja0NhcGFiaWxpdGllcyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgdGhpcy5hY3Rpb25IYW5kbGVyID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcblxuICAgIHRoaXMuX29uQ29tT2JqT25NZXNzYWdlID0gZXZlbnQgPT4ge1xuICAgICAgY29uc3QgZGF0YSA9IGV2ZW50LmRhdGE7XG5cbiAgICAgIGlmIChkYXRhLnRhcmdldE5hbWUgIT09IHRoaXMuc291cmNlTmFtZSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGlmIChkYXRhLnN0cmVhbSkge1xuICAgICAgICB0aGlzLl9wcm9jZXNzU3RyZWFtTWVzc2FnZShkYXRhKTtcblxuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGlmIChkYXRhLmNhbGxiYWNrKSB7XG4gICAgICAgIGNvbnN0IGNhbGxiYWNrSWQgPSBkYXRhLmNhbGxiYWNrSWQ7XG4gICAgICAgIGNvbnN0IGNhcGFiaWxpdHkgPSB0aGlzLmNhbGxiYWNrQ2FwYWJpbGl0aWVzW2NhbGxiYWNrSWRdO1xuXG4gICAgICAgIGlmICghY2FwYWJpbGl0eSkge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgQ2Fubm90IHJlc29sdmUgY2FsbGJhY2sgJHtjYWxsYmFja0lkfWApO1xuICAgICAgICB9XG5cbiAgICAgICAgZGVsZXRlIHRoaXMuY2FsbGJhY2tDYXBhYmlsaXRpZXNbY2FsbGJhY2tJZF07XG5cbiAgICAgICAgaWYgKGRhdGEuY2FsbGJhY2sgPT09IENhbGxiYWNrS2luZC5EQVRBKSB7XG4gICAgICAgICAgY2FwYWJpbGl0eS5yZXNvbHZlKGRhdGEuZGF0YSk7XG4gICAgICAgIH0gZWxzZSBpZiAoZGF0YS5jYWxsYmFjayA9PT0gQ2FsbGJhY2tLaW5kLkVSUk9SKSB7XG4gICAgICAgICAgY2FwYWJpbGl0eS5yZWplY3Qod3JhcFJlYXNvbihkYXRhLnJlYXNvbikpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIlVuZXhwZWN0ZWQgY2FsbGJhY2sgY2FzZVwiKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgY29uc3QgYWN0aW9uID0gdGhpcy5hY3Rpb25IYW5kbGVyW2RhdGEuYWN0aW9uXTtcblxuICAgICAgaWYgKCFhY3Rpb24pIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBVbmtub3duIGFjdGlvbiBmcm9tIHdvcmtlcjogJHtkYXRhLmFjdGlvbn1gKTtcbiAgICAgIH1cblxuICAgICAgaWYgKGRhdGEuY2FsbGJhY2tJZCkge1xuICAgICAgICBjb25zdCBjYlNvdXJjZU5hbWUgPSB0aGlzLnNvdXJjZU5hbWU7XG4gICAgICAgIGNvbnN0IGNiVGFyZ2V0TmFtZSA9IGRhdGEuc291cmNlTmFtZTtcbiAgICAgICAgbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUpIHtcbiAgICAgICAgICByZXNvbHZlKGFjdGlvbihkYXRhLmRhdGEpKTtcbiAgICAgICAgfSkudGhlbihmdW5jdGlvbiAocmVzdWx0KSB7XG4gICAgICAgICAgY29tT2JqLnBvc3RNZXNzYWdlKHtcbiAgICAgICAgICAgIHNvdXJjZU5hbWU6IGNiU291cmNlTmFtZSxcbiAgICAgICAgICAgIHRhcmdldE5hbWU6IGNiVGFyZ2V0TmFtZSxcbiAgICAgICAgICAgIGNhbGxiYWNrOiBDYWxsYmFja0tpbmQuREFUQSxcbiAgICAgICAgICAgIGNhbGxiYWNrSWQ6IGRhdGEuY2FsbGJhY2tJZCxcbiAgICAgICAgICAgIGRhdGE6IHJlc3VsdFxuICAgICAgICAgIH0pO1xuICAgICAgICB9LCBmdW5jdGlvbiAocmVhc29uKSB7XG4gICAgICAgICAgY29tT2JqLnBvc3RNZXNzYWdlKHtcbiAgICAgICAgICAgIHNvdXJjZU5hbWU6IGNiU291cmNlTmFtZSxcbiAgICAgICAgICAgIHRhcmdldE5hbWU6IGNiVGFyZ2V0TmFtZSxcbiAgICAgICAgICAgIGNhbGxiYWNrOiBDYWxsYmFja0tpbmQuRVJST1IsXG4gICAgICAgICAgICBjYWxsYmFja0lkOiBkYXRhLmNhbGxiYWNrSWQsXG4gICAgICAgICAgICByZWFzb246IHdyYXBSZWFzb24ocmVhc29uKVxuICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAoZGF0YS5zdHJlYW1JZCkge1xuICAgICAgICB0aGlzLl9jcmVhdGVTdHJlYW1TaW5rKGRhdGEpO1xuXG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgYWN0aW9uKGRhdGEuZGF0YSk7XG4gICAgfTtcblxuICAgIGNvbU9iai5hZGRFdmVudExpc3RlbmVyKFwibWVzc2FnZVwiLCB0aGlzLl9vbkNvbU9iak9uTWVzc2FnZSk7XG4gIH1cblxuICBvbihhY3Rpb25OYW1lLCBoYW5kbGVyKSB7XG4gICAgY29uc3QgYWggPSB0aGlzLmFjdGlvbkhhbmRsZXI7XG5cbiAgICBpZiAoYWhbYWN0aW9uTmFtZV0pIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgVGhlcmUgaXMgYWxyZWFkeSBhbiBhY3Rpb25OYW1lIGNhbGxlZCBcIiR7YWN0aW9uTmFtZX1cImApO1xuICAgIH1cblxuICAgIGFoW2FjdGlvbk5hbWVdID0gaGFuZGxlcjtcbiAgfVxuXG4gIHNlbmQoYWN0aW9uTmFtZSwgZGF0YSwgdHJhbnNmZXJzKSB7XG4gICAgdGhpcy5fcG9zdE1lc3NhZ2Uoe1xuICAgICAgc291cmNlTmFtZTogdGhpcy5zb3VyY2VOYW1lLFxuICAgICAgdGFyZ2V0TmFtZTogdGhpcy50YXJnZXROYW1lLFxuICAgICAgYWN0aW9uOiBhY3Rpb25OYW1lLFxuICAgICAgZGF0YVxuICAgIH0sIHRyYW5zZmVycyk7XG4gIH1cblxuICBzZW5kV2l0aFByb21pc2UoYWN0aW9uTmFtZSwgZGF0YSwgdHJhbnNmZXJzKSB7XG4gICAgY29uc3QgY2FsbGJhY2tJZCA9IHRoaXMuY2FsbGJhY2tJZCsrO1xuICAgIGNvbnN0IGNhcGFiaWxpdHkgPSAoMCwgX3V0aWwuY3JlYXRlUHJvbWlzZUNhcGFiaWxpdHkpKCk7XG4gICAgdGhpcy5jYWxsYmFja0NhcGFiaWxpdGllc1tjYWxsYmFja0lkXSA9IGNhcGFiaWxpdHk7XG5cbiAgICB0cnkge1xuICAgICAgdGhpcy5fcG9zdE1lc3NhZ2Uoe1xuICAgICAgICBzb3VyY2VOYW1lOiB0aGlzLnNvdXJjZU5hbWUsXG4gICAgICAgIHRhcmdldE5hbWU6IHRoaXMudGFyZ2V0TmFtZSxcbiAgICAgICAgYWN0aW9uOiBhY3Rpb25OYW1lLFxuICAgICAgICBjYWxsYmFja0lkLFxuICAgICAgICBkYXRhXG4gICAgICB9LCB0cmFuc2ZlcnMpO1xuICAgIH0gY2F0Y2ggKGV4KSB7XG4gICAgICBjYXBhYmlsaXR5LnJlamVjdChleCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGNhcGFiaWxpdHkucHJvbWlzZTtcbiAgfVxuXG4gIHNlbmRXaXRoU3RyZWFtKGFjdGlvbk5hbWUsIGRhdGEsIHF1ZXVlaW5nU3RyYXRlZ3ksIHRyYW5zZmVycykge1xuICAgIGNvbnN0IHN0cmVhbUlkID0gdGhpcy5zdHJlYW1JZCsrO1xuICAgIGNvbnN0IHNvdXJjZU5hbWUgPSB0aGlzLnNvdXJjZU5hbWU7XG4gICAgY29uc3QgdGFyZ2V0TmFtZSA9IHRoaXMudGFyZ2V0TmFtZTtcbiAgICBjb25zdCBjb21PYmogPSB0aGlzLmNvbU9iajtcbiAgICByZXR1cm4gbmV3IFJlYWRhYmxlU3RyZWFtKHtcbiAgICAgIHN0YXJ0OiBjb250cm9sbGVyID0+IHtcbiAgICAgICAgY29uc3Qgc3RhcnRDYXBhYmlsaXR5ID0gKDAsIF91dGlsLmNyZWF0ZVByb21pc2VDYXBhYmlsaXR5KSgpO1xuICAgICAgICB0aGlzLnN0cmVhbUNvbnRyb2xsZXJzW3N0cmVhbUlkXSA9IHtcbiAgICAgICAgICBjb250cm9sbGVyLFxuICAgICAgICAgIHN0YXJ0Q2FsbDogc3RhcnRDYXBhYmlsaXR5LFxuICAgICAgICAgIHB1bGxDYWxsOiBudWxsLFxuICAgICAgICAgIGNhbmNlbENhbGw6IG51bGwsXG4gICAgICAgICAgaXNDbG9zZWQ6IGZhbHNlXG4gICAgICAgIH07XG5cbiAgICAgICAgdGhpcy5fcG9zdE1lc3NhZ2Uoe1xuICAgICAgICAgIHNvdXJjZU5hbWUsXG4gICAgICAgICAgdGFyZ2V0TmFtZSxcbiAgICAgICAgICBhY3Rpb246IGFjdGlvbk5hbWUsXG4gICAgICAgICAgc3RyZWFtSWQsXG4gICAgICAgICAgZGF0YSxcbiAgICAgICAgICBkZXNpcmVkU2l6ZTogY29udHJvbGxlci5kZXNpcmVkU2l6ZVxuICAgICAgICB9LCB0cmFuc2ZlcnMpO1xuXG4gICAgICAgIHJldHVybiBzdGFydENhcGFiaWxpdHkucHJvbWlzZTtcbiAgICAgIH0sXG4gICAgICBwdWxsOiBjb250cm9sbGVyID0+IHtcbiAgICAgICAgY29uc3QgcHVsbENhcGFiaWxpdHkgPSAoMCwgX3V0aWwuY3JlYXRlUHJvbWlzZUNhcGFiaWxpdHkpKCk7XG4gICAgICAgIHRoaXMuc3RyZWFtQ29udHJvbGxlcnNbc3RyZWFtSWRdLnB1bGxDYWxsID0gcHVsbENhcGFiaWxpdHk7XG4gICAgICAgIGNvbU9iai5wb3N0TWVzc2FnZSh7XG4gICAgICAgICAgc291cmNlTmFtZSxcbiAgICAgICAgICB0YXJnZXROYW1lLFxuICAgICAgICAgIHN0cmVhbTogU3RyZWFtS2luZC5QVUxMLFxuICAgICAgICAgIHN0cmVhbUlkLFxuICAgICAgICAgIGRlc2lyZWRTaXplOiBjb250cm9sbGVyLmRlc2lyZWRTaXplXG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gcHVsbENhcGFiaWxpdHkucHJvbWlzZTtcbiAgICAgIH0sXG4gICAgICBjYW5jZWw6IHJlYXNvbiA9PiB7XG4gICAgICAgICgwLCBfdXRpbC5hc3NlcnQpKHJlYXNvbiBpbnN0YW5jZW9mIEVycm9yLCBcImNhbmNlbCBtdXN0IGhhdmUgYSB2YWxpZCByZWFzb25cIik7XG4gICAgICAgIGNvbnN0IGNhbmNlbENhcGFiaWxpdHkgPSAoMCwgX3V0aWwuY3JlYXRlUHJvbWlzZUNhcGFiaWxpdHkpKCk7XG4gICAgICAgIHRoaXMuc3RyZWFtQ29udHJvbGxlcnNbc3RyZWFtSWRdLmNhbmNlbENhbGwgPSBjYW5jZWxDYXBhYmlsaXR5O1xuICAgICAgICB0aGlzLnN0cmVhbUNvbnRyb2xsZXJzW3N0cmVhbUlkXS5pc0Nsb3NlZCA9IHRydWU7XG4gICAgICAgIGNvbU9iai5wb3N0TWVzc2FnZSh7XG4gICAgICAgICAgc291cmNlTmFtZSxcbiAgICAgICAgICB0YXJnZXROYW1lLFxuICAgICAgICAgIHN0cmVhbTogU3RyZWFtS2luZC5DQU5DRUwsXG4gICAgICAgICAgc3RyZWFtSWQsXG4gICAgICAgICAgcmVhc29uOiB3cmFwUmVhc29uKHJlYXNvbilcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBjYW5jZWxDYXBhYmlsaXR5LnByb21pc2U7XG4gICAgICB9XG4gICAgfSwgcXVldWVpbmdTdHJhdGVneSk7XG4gIH1cblxuICBfY3JlYXRlU3RyZWFtU2luayhkYXRhKSB7XG4gICAgY29uc3Qgc2VsZiA9IHRoaXM7XG4gICAgY29uc3QgYWN0aW9uID0gdGhpcy5hY3Rpb25IYW5kbGVyW2RhdGEuYWN0aW9uXTtcbiAgICBjb25zdCBzdHJlYW1JZCA9IGRhdGEuc3RyZWFtSWQ7XG4gICAgY29uc3Qgc291cmNlTmFtZSA9IHRoaXMuc291cmNlTmFtZTtcbiAgICBjb25zdCB0YXJnZXROYW1lID0gZGF0YS5zb3VyY2VOYW1lO1xuICAgIGNvbnN0IGNvbU9iaiA9IHRoaXMuY29tT2JqO1xuICAgIGNvbnN0IHN0cmVhbVNpbmsgPSB7XG4gICAgICBlbnF1ZXVlKGNodW5rLCBzaXplID0gMSwgdHJhbnNmZXJzKSB7XG4gICAgICAgIGlmICh0aGlzLmlzQ2FuY2VsbGVkKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgbGFzdERlc2lyZWRTaXplID0gdGhpcy5kZXNpcmVkU2l6ZTtcbiAgICAgICAgdGhpcy5kZXNpcmVkU2l6ZSAtPSBzaXplO1xuXG4gICAgICAgIGlmIChsYXN0RGVzaXJlZFNpemUgPiAwICYmIHRoaXMuZGVzaXJlZFNpemUgPD0gMCkge1xuICAgICAgICAgIHRoaXMuc2lua0NhcGFiaWxpdHkgPSAoMCwgX3V0aWwuY3JlYXRlUHJvbWlzZUNhcGFiaWxpdHkpKCk7XG4gICAgICAgICAgdGhpcy5yZWFkeSA9IHRoaXMuc2lua0NhcGFiaWxpdHkucHJvbWlzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHNlbGYuX3Bvc3RNZXNzYWdlKHtcbiAgICAgICAgICBzb3VyY2VOYW1lLFxuICAgICAgICAgIHRhcmdldE5hbWUsXG4gICAgICAgICAgc3RyZWFtOiBTdHJlYW1LaW5kLkVOUVVFVUUsXG4gICAgICAgICAgc3RyZWFtSWQsXG4gICAgICAgICAgY2h1bmtcbiAgICAgICAgfSwgdHJhbnNmZXJzKTtcbiAgICAgIH0sXG5cbiAgICAgIGNsb3NlKCkge1xuICAgICAgICBpZiAodGhpcy5pc0NhbmNlbGxlZCkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuaXNDYW5jZWxsZWQgPSB0cnVlO1xuICAgICAgICBjb21PYmoucG9zdE1lc3NhZ2Uoe1xuICAgICAgICAgIHNvdXJjZU5hbWUsXG4gICAgICAgICAgdGFyZ2V0TmFtZSxcbiAgICAgICAgICBzdHJlYW06IFN0cmVhbUtpbmQuQ0xPU0UsXG4gICAgICAgICAgc3RyZWFtSWRcbiAgICAgICAgfSk7XG4gICAgICAgIGRlbGV0ZSBzZWxmLnN0cmVhbVNpbmtzW3N0cmVhbUlkXTtcbiAgICAgIH0sXG5cbiAgICAgIGVycm9yKHJlYXNvbikge1xuICAgICAgICAoMCwgX3V0aWwuYXNzZXJ0KShyZWFzb24gaW5zdGFuY2VvZiBFcnJvciwgXCJlcnJvciBtdXN0IGhhdmUgYSB2YWxpZCByZWFzb25cIik7XG5cbiAgICAgICAgaWYgKHRoaXMuaXNDYW5jZWxsZWQpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLmlzQ2FuY2VsbGVkID0gdHJ1ZTtcbiAgICAgICAgY29tT2JqLnBvc3RNZXNzYWdlKHtcbiAgICAgICAgICBzb3VyY2VOYW1lLFxuICAgICAgICAgIHRhcmdldE5hbWUsXG4gICAgICAgICAgc3RyZWFtOiBTdHJlYW1LaW5kLkVSUk9SLFxuICAgICAgICAgIHN0cmVhbUlkLFxuICAgICAgICAgIHJlYXNvbjogd3JhcFJlYXNvbihyZWFzb24pXG4gICAgICAgIH0pO1xuICAgICAgfSxcblxuICAgICAgc2lua0NhcGFiaWxpdHk6ICgwLCBfdXRpbC5jcmVhdGVQcm9taXNlQ2FwYWJpbGl0eSkoKSxcbiAgICAgIG9uUHVsbDogbnVsbCxcbiAgICAgIG9uQ2FuY2VsOiBudWxsLFxuICAgICAgaXNDYW5jZWxsZWQ6IGZhbHNlLFxuICAgICAgZGVzaXJlZFNpemU6IGRhdGEuZGVzaXJlZFNpemUsXG4gICAgICByZWFkeTogbnVsbFxuICAgIH07XG4gICAgc3RyZWFtU2luay5zaW5rQ2FwYWJpbGl0eS5yZXNvbHZlKCk7XG4gICAgc3RyZWFtU2luay5yZWFkeSA9IHN0cmVhbVNpbmsuc2lua0NhcGFiaWxpdHkucHJvbWlzZTtcbiAgICB0aGlzLnN0cmVhbVNpbmtzW3N0cmVhbUlkXSA9IHN0cmVhbVNpbms7XG4gICAgbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUpIHtcbiAgICAgIHJlc29sdmUoYWN0aW9uKGRhdGEuZGF0YSwgc3RyZWFtU2luaykpO1xuICAgIH0pLnRoZW4oZnVuY3Rpb24gKCkge1xuICAgICAgY29tT2JqLnBvc3RNZXNzYWdlKHtcbiAgICAgICAgc291cmNlTmFtZSxcbiAgICAgICAgdGFyZ2V0TmFtZSxcbiAgICAgICAgc3RyZWFtOiBTdHJlYW1LaW5kLlNUQVJUX0NPTVBMRVRFLFxuICAgICAgICBzdHJlYW1JZCxcbiAgICAgICAgc3VjY2VzczogdHJ1ZVxuICAgICAgfSk7XG4gICAgfSwgZnVuY3Rpb24gKHJlYXNvbikge1xuICAgICAgY29tT2JqLnBvc3RNZXNzYWdlKHtcbiAgICAgICAgc291cmNlTmFtZSxcbiAgICAgICAgdGFyZ2V0TmFtZSxcbiAgICAgICAgc3RyZWFtOiBTdHJlYW1LaW5kLlNUQVJUX0NPTVBMRVRFLFxuICAgICAgICBzdHJlYW1JZCxcbiAgICAgICAgcmVhc29uOiB3cmFwUmVhc29uKHJlYXNvbilcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG5cbiAgX3Byb2Nlc3NTdHJlYW1NZXNzYWdlKGRhdGEpIHtcbiAgICBjb25zdCBzdHJlYW1JZCA9IGRhdGEuc3RyZWFtSWQ7XG4gICAgY29uc3Qgc291cmNlTmFtZSA9IHRoaXMuc291cmNlTmFtZTtcbiAgICBjb25zdCB0YXJnZXROYW1lID0gZGF0YS5zb3VyY2VOYW1lO1xuICAgIGNvbnN0IGNvbU9iaiA9IHRoaXMuY29tT2JqO1xuXG4gICAgc3dpdGNoIChkYXRhLnN0cmVhbSkge1xuICAgICAgY2FzZSBTdHJlYW1LaW5kLlNUQVJUX0NPTVBMRVRFOlxuICAgICAgICBpZiAoZGF0YS5zdWNjZXNzKSB7XG4gICAgICAgICAgdGhpcy5zdHJlYW1Db250cm9sbGVyc1tzdHJlYW1JZF0uc3RhcnRDYWxsLnJlc29sdmUoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLnN0cmVhbUNvbnRyb2xsZXJzW3N0cmVhbUlkXS5zdGFydENhbGwucmVqZWN0KHdyYXBSZWFzb24oZGF0YS5yZWFzb24pKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBjYXNlIFN0cmVhbUtpbmQuUFVMTF9DT01QTEVURTpcbiAgICAgICAgaWYgKGRhdGEuc3VjY2Vzcykge1xuICAgICAgICAgIHRoaXMuc3RyZWFtQ29udHJvbGxlcnNbc3RyZWFtSWRdLnB1bGxDYWxsLnJlc29sdmUoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLnN0cmVhbUNvbnRyb2xsZXJzW3N0cmVhbUlkXS5wdWxsQ2FsbC5yZWplY3Qod3JhcFJlYXNvbihkYXRhLnJlYXNvbikpO1xuICAgICAgICB9XG5cbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGNhc2UgU3RyZWFtS2luZC5QVUxMOlxuICAgICAgICBpZiAoIXRoaXMuc3RyZWFtU2lua3Nbc3RyZWFtSWRdKSB7XG4gICAgICAgICAgY29tT2JqLnBvc3RNZXNzYWdlKHtcbiAgICAgICAgICAgIHNvdXJjZU5hbWUsXG4gICAgICAgICAgICB0YXJnZXROYW1lLFxuICAgICAgICAgICAgc3RyZWFtOiBTdHJlYW1LaW5kLlBVTExfQ09NUExFVEUsXG4gICAgICAgICAgICBzdHJlYW1JZCxcbiAgICAgICAgICAgIHN1Y2Nlc3M6IHRydWVcbiAgICAgICAgICB9KTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aGlzLnN0cmVhbVNpbmtzW3N0cmVhbUlkXS5kZXNpcmVkU2l6ZSA8PSAwICYmIGRhdGEuZGVzaXJlZFNpemUgPiAwKSB7XG4gICAgICAgICAgdGhpcy5zdHJlYW1TaW5rc1tzdHJlYW1JZF0uc2lua0NhcGFiaWxpdHkucmVzb2x2ZSgpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5zdHJlYW1TaW5rc1tzdHJlYW1JZF0uZGVzaXJlZFNpemUgPSBkYXRhLmRlc2lyZWRTaXplO1xuICAgICAgICBjb25zdCB7XG4gICAgICAgICAgb25QdWxsXG4gICAgICAgIH0gPSB0aGlzLnN0cmVhbVNpbmtzW2RhdGEuc3RyZWFtSWRdO1xuICAgICAgICBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSkge1xuICAgICAgICAgIHJlc29sdmUob25QdWxsICYmIG9uUHVsbCgpKTtcbiAgICAgICAgfSkudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgY29tT2JqLnBvc3RNZXNzYWdlKHtcbiAgICAgICAgICAgIHNvdXJjZU5hbWUsXG4gICAgICAgICAgICB0YXJnZXROYW1lLFxuICAgICAgICAgICAgc3RyZWFtOiBTdHJlYW1LaW5kLlBVTExfQ09NUExFVEUsXG4gICAgICAgICAgICBzdHJlYW1JZCxcbiAgICAgICAgICAgIHN1Y2Nlc3M6IHRydWVcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSwgZnVuY3Rpb24gKHJlYXNvbikge1xuICAgICAgICAgIGNvbU9iai5wb3N0TWVzc2FnZSh7XG4gICAgICAgICAgICBzb3VyY2VOYW1lLFxuICAgICAgICAgICAgdGFyZ2V0TmFtZSxcbiAgICAgICAgICAgIHN0cmVhbTogU3RyZWFtS2luZC5QVUxMX0NPTVBMRVRFLFxuICAgICAgICAgICAgc3RyZWFtSWQsXG4gICAgICAgICAgICByZWFzb246IHdyYXBSZWFzb24ocmVhc29uKVxuICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGNhc2UgU3RyZWFtS2luZC5FTlFVRVVFOlxuICAgICAgICAoMCwgX3V0aWwuYXNzZXJ0KSh0aGlzLnN0cmVhbUNvbnRyb2xsZXJzW3N0cmVhbUlkXSwgXCJlbnF1ZXVlIHNob3VsZCBoYXZlIHN0cmVhbSBjb250cm9sbGVyXCIpO1xuXG4gICAgICAgIGlmICh0aGlzLnN0cmVhbUNvbnRyb2xsZXJzW3N0cmVhbUlkXS5pc0Nsb3NlZCkge1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5zdHJlYW1Db250cm9sbGVyc1tzdHJlYW1JZF0uY29udHJvbGxlci5lbnF1ZXVlKGRhdGEuY2h1bmspO1xuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSBTdHJlYW1LaW5kLkNMT1NFOlxuICAgICAgICAoMCwgX3V0aWwuYXNzZXJ0KSh0aGlzLnN0cmVhbUNvbnRyb2xsZXJzW3N0cmVhbUlkXSwgXCJjbG9zZSBzaG91bGQgaGF2ZSBzdHJlYW0gY29udHJvbGxlclwiKTtcblxuICAgICAgICBpZiAodGhpcy5zdHJlYW1Db250cm9sbGVyc1tzdHJlYW1JZF0uaXNDbG9zZWQpIHtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuc3RyZWFtQ29udHJvbGxlcnNbc3RyZWFtSWRdLmlzQ2xvc2VkID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5zdHJlYW1Db250cm9sbGVyc1tzdHJlYW1JZF0uY29udHJvbGxlci5jbG9zZSgpO1xuXG4gICAgICAgIHRoaXMuX2RlbGV0ZVN0cmVhbUNvbnRyb2xsZXIoc3RyZWFtSWQpO1xuXG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBjYXNlIFN0cmVhbUtpbmQuRVJST1I6XG4gICAgICAgICgwLCBfdXRpbC5hc3NlcnQpKHRoaXMuc3RyZWFtQ29udHJvbGxlcnNbc3RyZWFtSWRdLCBcImVycm9yIHNob3VsZCBoYXZlIHN0cmVhbSBjb250cm9sbGVyXCIpO1xuICAgICAgICB0aGlzLnN0cmVhbUNvbnRyb2xsZXJzW3N0cmVhbUlkXS5jb250cm9sbGVyLmVycm9yKHdyYXBSZWFzb24oZGF0YS5yZWFzb24pKTtcblxuICAgICAgICB0aGlzLl9kZWxldGVTdHJlYW1Db250cm9sbGVyKHN0cmVhbUlkKTtcblxuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSBTdHJlYW1LaW5kLkNBTkNFTF9DT01QTEVURTpcbiAgICAgICAgaWYgKGRhdGEuc3VjY2Vzcykge1xuICAgICAgICAgIHRoaXMuc3RyZWFtQ29udHJvbGxlcnNbc3RyZWFtSWRdLmNhbmNlbENhbGwucmVzb2x2ZSgpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXMuc3RyZWFtQ29udHJvbGxlcnNbc3RyZWFtSWRdLmNhbmNlbENhbGwucmVqZWN0KHdyYXBSZWFzb24oZGF0YS5yZWFzb24pKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuX2RlbGV0ZVN0cmVhbUNvbnRyb2xsZXIoc3RyZWFtSWQpO1xuXG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBjYXNlIFN0cmVhbUtpbmQuQ0FOQ0VMOlxuICAgICAgICBpZiAoIXRoaXMuc3RyZWFtU2lua3Nbc3RyZWFtSWRdKSB7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCB7XG4gICAgICAgICAgb25DYW5jZWxcbiAgICAgICAgfSA9IHRoaXMuc3RyZWFtU2lua3NbZGF0YS5zdHJlYW1JZF07XG4gICAgICAgIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlKSB7XG4gICAgICAgICAgcmVzb2x2ZShvbkNhbmNlbCAmJiBvbkNhbmNlbCh3cmFwUmVhc29uKGRhdGEucmVhc29uKSkpO1xuICAgICAgICB9KS50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBjb21PYmoucG9zdE1lc3NhZ2Uoe1xuICAgICAgICAgICAgc291cmNlTmFtZSxcbiAgICAgICAgICAgIHRhcmdldE5hbWUsXG4gICAgICAgICAgICBzdHJlYW06IFN0cmVhbUtpbmQuQ0FOQ0VMX0NPTVBMRVRFLFxuICAgICAgICAgICAgc3RyZWFtSWQsXG4gICAgICAgICAgICBzdWNjZXNzOiB0cnVlXG4gICAgICAgICAgfSk7XG4gICAgICAgIH0sIGZ1bmN0aW9uIChyZWFzb24pIHtcbiAgICAgICAgICBjb21PYmoucG9zdE1lc3NhZ2Uoe1xuICAgICAgICAgICAgc291cmNlTmFtZSxcbiAgICAgICAgICAgIHRhcmdldE5hbWUsXG4gICAgICAgICAgICBzdHJlYW06IFN0cmVhbUtpbmQuQ0FOQ0VMX0NPTVBMRVRFLFxuICAgICAgICAgICAgc3RyZWFtSWQsXG4gICAgICAgICAgICByZWFzb246IHdyYXBSZWFzb24ocmVhc29uKVxuICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5zdHJlYW1TaW5rc1tzdHJlYW1JZF0uc2lua0NhcGFiaWxpdHkucmVqZWN0KHdyYXBSZWFzb24oZGF0YS5yZWFzb24pKTtcbiAgICAgICAgdGhpcy5zdHJlYW1TaW5rc1tzdHJlYW1JZF0uaXNDYW5jZWxsZWQgPSB0cnVlO1xuICAgICAgICBkZWxldGUgdGhpcy5zdHJlYW1TaW5rc1tzdHJlYW1JZF07XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBkZWZhdWx0OlxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJVbmV4cGVjdGVkIHN0cmVhbSBjYXNlXCIpO1xuICAgIH1cbiAgfVxuXG4gIGFzeW5jIF9kZWxldGVTdHJlYW1Db250cm9sbGVyKHN0cmVhbUlkKSB7XG4gICAgYXdhaXQgUHJvbWlzZS5hbGxTZXR0bGVkKFt0aGlzLnN0cmVhbUNvbnRyb2xsZXJzW3N0cmVhbUlkXS5zdGFydENhbGwsIHRoaXMuc3RyZWFtQ29udHJvbGxlcnNbc3RyZWFtSWRdLnB1bGxDYWxsLCB0aGlzLnN0cmVhbUNvbnRyb2xsZXJzW3N0cmVhbUlkXS5jYW5jZWxDYWxsXS5tYXAoZnVuY3Rpb24gKGNhcGFiaWxpdHkpIHtcbiAgICAgIHJldHVybiBjYXBhYmlsaXR5ICYmIGNhcGFiaWxpdHkucHJvbWlzZTtcbiAgICB9KSk7XG4gICAgZGVsZXRlIHRoaXMuc3RyZWFtQ29udHJvbGxlcnNbc3RyZWFtSWRdO1xuICB9XG5cbiAgX3Bvc3RNZXNzYWdlKG1lc3NhZ2UsIHRyYW5zZmVycykge1xuICAgIGlmICh0cmFuc2ZlcnMgJiYgdGhpcy5wb3N0TWVzc2FnZVRyYW5zZmVycykge1xuICAgICAgdGhpcy5jb21PYmoucG9zdE1lc3NhZ2UobWVzc2FnZSwgdHJhbnNmZXJzKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5jb21PYmoucG9zdE1lc3NhZ2UobWVzc2FnZSk7XG4gICAgfVxuICB9XG5cbiAgZGVzdHJveSgpIHtcbiAgICB0aGlzLmNvbU9iai5yZW1vdmVFdmVudExpc3RlbmVyKFwibWVzc2FnZVwiLCB0aGlzLl9vbkNvbU9iak9uTWVzc2FnZSk7XG4gIH1cblxufVxuXG5leHBvcnRzLk1lc3NhZ2VIYW5kbGVyID0gTWVzc2FnZUhhbmRsZXI7XG5cbi8qKiovIH0pLFxuLyogMTIgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd19wZGZqc19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuTWV0YWRhdGEgPSB2b2lkIDA7XG5cbnZhciBfdXRpbCA9IF9fd19wZGZqc19yZXF1aXJlX18oMik7XG5cbnZhciBfeG1sX3BhcnNlciA9IF9fd19wZGZqc19yZXF1aXJlX18oMTMpO1xuXG5jbGFzcyBNZXRhZGF0YSB7XG4gIGNvbnN0cnVjdG9yKGRhdGEpIHtcbiAgICAoMCwgX3V0aWwuYXNzZXJ0KSh0eXBlb2YgZGF0YSA9PT0gXCJzdHJpbmdcIiwgXCJNZXRhZGF0YTogaW5wdXQgaXMgbm90IGEgc3RyaW5nXCIpO1xuICAgIGRhdGEgPSB0aGlzLl9yZXBhaXIoZGF0YSk7XG4gICAgY29uc3QgcGFyc2VyID0gbmV3IF94bWxfcGFyc2VyLlNpbXBsZVhNTFBhcnNlcigpO1xuICAgIGNvbnN0IHhtbERvY3VtZW50ID0gcGFyc2VyLnBhcnNlRnJvbVN0cmluZyhkYXRhKTtcbiAgICB0aGlzLl9tZXRhZGF0YU1hcCA9IG5ldyBNYXAoKTtcblxuICAgIGlmICh4bWxEb2N1bWVudCkge1xuICAgICAgdGhpcy5fcGFyc2UoeG1sRG9jdW1lbnQpO1xuICAgIH1cbiAgfVxuXG4gIF9yZXBhaXIoZGF0YSkge1xuICAgIHJldHVybiBkYXRhLnJlcGxhY2UoL15bXjxdKy8sIFwiXCIpLnJlcGxhY2UoLz5cXFxcMzc2XFxcXDM3NyhbXjxdKykvZywgZnVuY3Rpb24gKGFsbCwgY29kZXMpIHtcbiAgICAgIGNvbnN0IGJ5dGVzID0gY29kZXMucmVwbGFjZSgvXFxcXChbMC0zXSkoWzAtN10pKFswLTddKS9nLCBmdW5jdGlvbiAoY29kZSwgZDEsIGQyLCBkMykge1xuICAgICAgICByZXR1cm4gU3RyaW5nLmZyb21DaGFyQ29kZShkMSAqIDY0ICsgZDIgKiA4ICsgZDMgKiAxKTtcbiAgICAgIH0pLnJlcGxhY2UoLyYoYW1wfGFwb3N8Z3R8bHR8cXVvdCk7L2csIGZ1bmN0aW9uIChzdHIsIG5hbWUpIHtcbiAgICAgICAgc3dpdGNoIChuYW1lKSB7XG4gICAgICAgICAgY2FzZSBcImFtcFwiOlxuICAgICAgICAgICAgcmV0dXJuIFwiJlwiO1xuXG4gICAgICAgICAgY2FzZSBcImFwb3NcIjpcbiAgICAgICAgICAgIHJldHVybiBcIidcIjtcblxuICAgICAgICAgIGNhc2UgXCJndFwiOlxuICAgICAgICAgICAgcmV0dXJuIFwiPlwiO1xuXG4gICAgICAgICAgY2FzZSBcImx0XCI6XG4gICAgICAgICAgICByZXR1cm4gXCI8XCI7XG5cbiAgICAgICAgICBjYXNlIFwicXVvdFwiOlxuICAgICAgICAgICAgcmV0dXJuICdcIic7XG4gICAgICAgIH1cblxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYF9yZXBhaXI6ICR7bmFtZX0gaXNuJ3QgZGVmaW5lZC5gKTtcbiAgICAgIH0pO1xuICAgICAgbGV0IGNoYXJzID0gXCJcIjtcblxuICAgICAgZm9yIChsZXQgaSA9IDAsIGlpID0gYnl0ZXMubGVuZ3RoOyBpIDwgaWk7IGkgKz0gMikge1xuICAgICAgICBjb25zdCBjb2RlID0gYnl0ZXMuY2hhckNvZGVBdChpKSAqIDI1NiArIGJ5dGVzLmNoYXJDb2RlQXQoaSArIDEpO1xuXG4gICAgICAgIGlmIChjb2RlID49IDMyICYmIGNvZGUgPCAxMjcgJiYgY29kZSAhPT0gNjAgJiYgY29kZSAhPT0gNjIgJiYgY29kZSAhPT0gMzgpIHtcbiAgICAgICAgICBjaGFycyArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGNvZGUpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNoYXJzICs9IFwiJiN4XCIgKyAoMHgxMDAwMCArIGNvZGUpLnRvU3RyaW5nKDE2KS5zdWJzdHJpbmcoMSkgKyBcIjtcIjtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gXCI+XCIgKyBjaGFycztcbiAgICB9KTtcbiAgfVxuXG4gIF9wYXJzZSh4bWxEb2N1bWVudCkge1xuICAgIGxldCByZGYgPSB4bWxEb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XG5cbiAgICBpZiAocmRmLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgIT09IFwicmRmOnJkZlwiKSB7XG4gICAgICByZGYgPSByZGYuZmlyc3RDaGlsZDtcblxuICAgICAgd2hpbGUgKHJkZiAmJiByZGYubm9kZU5hbWUudG9Mb3dlckNhc2UoKSAhPT0gXCJyZGY6cmRmXCIpIHtcbiAgICAgICAgcmRmID0gcmRmLm5leHRTaWJsaW5nO1xuICAgICAgfVxuICAgIH1cblxuICAgIGNvbnN0IG5vZGVOYW1lID0gcmRmID8gcmRmLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgOiBudWxsO1xuXG4gICAgaWYgKCFyZGYgfHwgbm9kZU5hbWUgIT09IFwicmRmOnJkZlwiIHx8ICFyZGYuaGFzQ2hpbGROb2RlcygpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY29uc3QgY2hpbGRyZW4gPSByZGYuY2hpbGROb2RlcztcblxuICAgIGZvciAobGV0IGkgPSAwLCBpaSA9IGNoaWxkcmVuLmxlbmd0aDsgaSA8IGlpOyBpKyspIHtcbiAgICAgIGNvbnN0IGRlc2MgPSBjaGlsZHJlbltpXTtcblxuICAgICAgaWYgKGRlc2Mubm9kZU5hbWUudG9Mb3dlckNhc2UoKSAhPT0gXCJyZGY6ZGVzY3JpcHRpb25cIikge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgZm9yIChsZXQgaiA9IDAsIGpqID0gZGVzYy5jaGlsZE5vZGVzLmxlbmd0aDsgaiA8IGpqOyBqKyspIHtcbiAgICAgICAgaWYgKGRlc2MuY2hpbGROb2Rlc1tqXS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpICE9PSBcIiN0ZXh0XCIpIHtcbiAgICAgICAgICBjb25zdCBlbnRyeSA9IGRlc2MuY2hpbGROb2Rlc1tqXTtcbiAgICAgICAgICBjb25zdCBuYW1lID0gZW50cnkubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtcblxuICAgICAgICAgIHRoaXMuX21ldGFkYXRhTWFwLnNldChuYW1lLCBlbnRyeS50ZXh0Q29udGVudC50cmltKCkpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZ2V0KG5hbWUpIHtcbiAgICByZXR1cm4gdGhpcy5fbWV0YWRhdGFNYXAuaGFzKG5hbWUpID8gdGhpcy5fbWV0YWRhdGFNYXAuZ2V0KG5hbWUpIDogbnVsbDtcbiAgfVxuXG4gIGdldEFsbCgpIHtcbiAgICBjb25zdCBvYmogPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuXG4gICAgZm9yIChjb25zdCBba2V5LCB2YWx1ZV0gb2YgdGhpcy5fbWV0YWRhdGFNYXApIHtcbiAgICAgIG9ialtrZXldID0gdmFsdWU7XG4gICAgfVxuXG4gICAgcmV0dXJuIG9iajtcbiAgfVxuXG4gIGhhcyhuYW1lKSB7XG4gICAgcmV0dXJuIHRoaXMuX21ldGFkYXRhTWFwLmhhcyhuYW1lKTtcbiAgfVxuXG59XG5cbmV4cG9ydHMuTWV0YWRhdGEgPSBNZXRhZGF0YTtcblxuLyoqKi8gfSksXG4vKiAxMyAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193X3BkZmpzX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5TaW1wbGVYTUxQYXJzZXIgPSB2b2lkIDA7XG5jb25zdCBYTUxQYXJzZXJFcnJvckNvZGUgPSB7XG4gIE5vRXJyb3I6IDAsXG4gIEVuZE9mRG9jdW1lbnQ6IC0xLFxuICBVbnRlcm1pbmF0ZWRDZGF0OiAtMixcbiAgVW50ZXJtaW5hdGVkWG1sRGVjbGFyYXRpb246IC0zLFxuICBVbnRlcm1pbmF0ZWREb2N0eXBlRGVjbGFyYXRpb246IC00LFxuICBVbnRlcm1pbmF0ZWRDb21tZW50OiAtNSxcbiAgTWFsZm9ybWVkRWxlbWVudDogLTYsXG4gIE91dE9mTWVtb3J5OiAtNyxcbiAgVW50ZXJtaW5hdGVkQXR0cmlidXRlVmFsdWU6IC04LFxuICBVbnRlcm1pbmF0ZWRFbGVtZW50OiAtOSxcbiAgRWxlbWVudE5ldmVyQmVndW46IC0xMFxufTtcblxuZnVuY3Rpb24gaXNXaGl0ZXNwYWNlKHMsIGluZGV4KSB7XG4gIGNvbnN0IGNoID0gc1tpbmRleF07XG4gIHJldHVybiBjaCA9PT0gXCIgXCIgfHwgY2ggPT09IFwiXFxuXCIgfHwgY2ggPT09IFwiXFxyXCIgfHwgY2ggPT09IFwiXFx0XCI7XG59XG5cbmZ1bmN0aW9uIGlzV2hpdGVzcGFjZVN0cmluZyhzKSB7XG4gIGZvciAobGV0IGkgPSAwLCBpaSA9IHMubGVuZ3RoOyBpIDwgaWk7IGkrKykge1xuICAgIGlmICghaXNXaGl0ZXNwYWNlKHMsIGkpKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRydWU7XG59XG5cbmNsYXNzIFhNTFBhcnNlckJhc2Uge1xuICBfcmVzb2x2ZUVudGl0aWVzKHMpIHtcbiAgICByZXR1cm4gcy5yZXBsYWNlKC8mKFteO10rKTsvZywgKGFsbCwgZW50aXR5KSA9PiB7XG4gICAgICBpZiAoZW50aXR5LnN1YnN0cmluZygwLCAyKSA9PT0gXCIjeFwiKSB7XG4gICAgICAgIHJldHVybiBTdHJpbmcuZnJvbUNoYXJDb2RlKHBhcnNlSW50KGVudGl0eS5zdWJzdHJpbmcoMiksIDE2KSk7XG4gICAgICB9IGVsc2UgaWYgKGVudGl0eS5zdWJzdHJpbmcoMCwgMSkgPT09IFwiI1wiKSB7XG4gICAgICAgIHJldHVybiBTdHJpbmcuZnJvbUNoYXJDb2RlKHBhcnNlSW50KGVudGl0eS5zdWJzdHJpbmcoMSksIDEwKSk7XG4gICAgICB9XG5cbiAgICAgIHN3aXRjaCAoZW50aXR5KSB7XG4gICAgICAgIGNhc2UgXCJsdFwiOlxuICAgICAgICAgIHJldHVybiBcIjxcIjtcblxuICAgICAgICBjYXNlIFwiZ3RcIjpcbiAgICAgICAgICByZXR1cm4gXCI+XCI7XG5cbiAgICAgICAgY2FzZSBcImFtcFwiOlxuICAgICAgICAgIHJldHVybiBcIiZcIjtcblxuICAgICAgICBjYXNlIFwicXVvdFwiOlxuICAgICAgICAgIHJldHVybiAnXCInO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpcy5vblJlc29sdmVFbnRpdHkoZW50aXR5KTtcbiAgICB9KTtcbiAgfVxuXG4gIF9wYXJzZUNvbnRlbnQocywgc3RhcnQpIHtcbiAgICBjb25zdCBhdHRyaWJ1dGVzID0gW107XG4gICAgbGV0IHBvcyA9IHN0YXJ0O1xuXG4gICAgZnVuY3Rpb24gc2tpcFdzKCkge1xuICAgICAgd2hpbGUgKHBvcyA8IHMubGVuZ3RoICYmIGlzV2hpdGVzcGFjZShzLCBwb3MpKSB7XG4gICAgICAgICsrcG9zO1xuICAgICAgfVxuICAgIH1cblxuICAgIHdoaWxlIChwb3MgPCBzLmxlbmd0aCAmJiAhaXNXaGl0ZXNwYWNlKHMsIHBvcykgJiYgc1twb3NdICE9PSBcIj5cIiAmJiBzW3Bvc10gIT09IFwiL1wiKSB7XG4gICAgICArK3BvcztcbiAgICB9XG5cbiAgICBjb25zdCBuYW1lID0gcy5zdWJzdHJpbmcoc3RhcnQsIHBvcyk7XG4gICAgc2tpcFdzKCk7XG5cbiAgICB3aGlsZSAocG9zIDwgcy5sZW5ndGggJiYgc1twb3NdICE9PSBcIj5cIiAmJiBzW3Bvc10gIT09IFwiL1wiICYmIHNbcG9zXSAhPT0gXCI/XCIpIHtcbiAgICAgIHNraXBXcygpO1xuICAgICAgbGV0IGF0dHJOYW1lID0gXCJcIixcbiAgICAgICAgICBhdHRyVmFsdWUgPSBcIlwiO1xuXG4gICAgICB3aGlsZSAocG9zIDwgcy5sZW5ndGggJiYgIWlzV2hpdGVzcGFjZShzLCBwb3MpICYmIHNbcG9zXSAhPT0gXCI9XCIpIHtcbiAgICAgICAgYXR0ck5hbWUgKz0gc1twb3NdO1xuICAgICAgICArK3BvcztcbiAgICAgIH1cblxuICAgICAgc2tpcFdzKCk7XG5cbiAgICAgIGlmIChzW3Bvc10gIT09IFwiPVwiKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuXG4gICAgICArK3BvcztcbiAgICAgIHNraXBXcygpO1xuICAgICAgY29uc3QgYXR0ckVuZENoYXIgPSBzW3Bvc107XG5cbiAgICAgIGlmIChhdHRyRW5kQ2hhciAhPT0gJ1wiJyAmJiBhdHRyRW5kQ2hhciAhPT0gXCInXCIpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IGF0dHJFbmRJbmRleCA9IHMuaW5kZXhPZihhdHRyRW5kQ2hhciwgKytwb3MpO1xuXG4gICAgICBpZiAoYXR0ckVuZEluZGV4IDwgMCkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH1cblxuICAgICAgYXR0clZhbHVlID0gcy5zdWJzdHJpbmcocG9zLCBhdHRyRW5kSW5kZXgpO1xuICAgICAgYXR0cmlidXRlcy5wdXNoKHtcbiAgICAgICAgbmFtZTogYXR0ck5hbWUsXG4gICAgICAgIHZhbHVlOiB0aGlzLl9yZXNvbHZlRW50aXRpZXMoYXR0clZhbHVlKVxuICAgICAgfSk7XG4gICAgICBwb3MgPSBhdHRyRW5kSW5kZXggKyAxO1xuICAgICAgc2tpcFdzKCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgIG5hbWUsXG4gICAgICBhdHRyaWJ1dGVzLFxuICAgICAgcGFyc2VkOiBwb3MgLSBzdGFydFxuICAgIH07XG4gIH1cblxuICBfcGFyc2VQcm9jZXNzaW5nSW5zdHJ1Y3Rpb24ocywgc3RhcnQpIHtcbiAgICBsZXQgcG9zID0gc3RhcnQ7XG5cbiAgICBmdW5jdGlvbiBza2lwV3MoKSB7XG4gICAgICB3aGlsZSAocG9zIDwgcy5sZW5ndGggJiYgaXNXaGl0ZXNwYWNlKHMsIHBvcykpIHtcbiAgICAgICAgKytwb3M7XG4gICAgICB9XG4gICAgfVxuXG4gICAgd2hpbGUgKHBvcyA8IHMubGVuZ3RoICYmICFpc1doaXRlc3BhY2UocywgcG9zKSAmJiBzW3Bvc10gIT09IFwiPlwiICYmIHNbcG9zXSAhPT0gXCIvXCIpIHtcbiAgICAgICsrcG9zO1xuICAgIH1cblxuICAgIGNvbnN0IG5hbWUgPSBzLnN1YnN0cmluZyhzdGFydCwgcG9zKTtcbiAgICBza2lwV3MoKTtcbiAgICBjb25zdCBhdHRyU3RhcnQgPSBwb3M7XG5cbiAgICB3aGlsZSAocG9zIDwgcy5sZW5ndGggJiYgKHNbcG9zXSAhPT0gXCI/XCIgfHwgc1twb3MgKyAxXSAhPT0gXCI+XCIpKSB7XG4gICAgICArK3BvcztcbiAgICB9XG5cbiAgICBjb25zdCB2YWx1ZSA9IHMuc3Vic3RyaW5nKGF0dHJTdGFydCwgcG9zKTtcbiAgICByZXR1cm4ge1xuICAgICAgbmFtZSxcbiAgICAgIHZhbHVlLFxuICAgICAgcGFyc2VkOiBwb3MgLSBzdGFydFxuICAgIH07XG4gIH1cblxuICBwYXJzZVhtbChzKSB7XG4gICAgbGV0IGkgPSAwO1xuXG4gICAgd2hpbGUgKGkgPCBzLmxlbmd0aCkge1xuICAgICAgY29uc3QgY2ggPSBzW2ldO1xuICAgICAgbGV0IGogPSBpO1xuXG4gICAgICBpZiAoY2ggPT09IFwiPFwiKSB7XG4gICAgICAgICsrajtcbiAgICAgICAgY29uc3QgY2gyID0gc1tqXTtcbiAgICAgICAgbGV0IHE7XG5cbiAgICAgICAgc3dpdGNoIChjaDIpIHtcbiAgICAgICAgICBjYXNlIFwiL1wiOlxuICAgICAgICAgICAgKytqO1xuICAgICAgICAgICAgcSA9IHMuaW5kZXhPZihcIj5cIiwgaik7XG5cbiAgICAgICAgICAgIGlmIChxIDwgMCkge1xuICAgICAgICAgICAgICB0aGlzLm9uRXJyb3IoWE1MUGFyc2VyRXJyb3JDb2RlLlVudGVybWluYXRlZEVsZW1lbnQpO1xuICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRoaXMub25FbmRFbGVtZW50KHMuc3Vic3RyaW5nKGosIHEpKTtcbiAgICAgICAgICAgIGogPSBxICsgMTtcbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgY2FzZSBcIj9cIjpcbiAgICAgICAgICAgICsrajtcblxuICAgICAgICAgICAgY29uc3QgcGkgPSB0aGlzLl9wYXJzZVByb2Nlc3NpbmdJbnN0cnVjdGlvbihzLCBqKTtcblxuICAgICAgICAgICAgaWYgKHMuc3Vic3RyaW5nKGogKyBwaS5wYXJzZWQsIGogKyBwaS5wYXJzZWQgKyAyKSAhPT0gXCI/PlwiKSB7XG4gICAgICAgICAgICAgIHRoaXMub25FcnJvcihYTUxQYXJzZXJFcnJvckNvZGUuVW50ZXJtaW5hdGVkWG1sRGVjbGFyYXRpb24pO1xuICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRoaXMub25QaShwaS5uYW1lLCBwaS52YWx1ZSk7XG4gICAgICAgICAgICBqICs9IHBpLnBhcnNlZCArIDI7XG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgIGNhc2UgXCIhXCI6XG4gICAgICAgICAgICBpZiAocy5zdWJzdHJpbmcoaiArIDEsIGogKyAzKSA9PT0gXCItLVwiKSB7XG4gICAgICAgICAgICAgIHEgPSBzLmluZGV4T2YoXCItLT5cIiwgaiArIDMpO1xuXG4gICAgICAgICAgICAgIGlmIChxIDwgMCkge1xuICAgICAgICAgICAgICAgIHRoaXMub25FcnJvcihYTUxQYXJzZXJFcnJvckNvZGUuVW50ZXJtaW5hdGVkQ29tbWVudCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgdGhpcy5vbkNvbW1lbnQocy5zdWJzdHJpbmcoaiArIDMsIHEpKTtcbiAgICAgICAgICAgICAgaiA9IHEgKyAzO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChzLnN1YnN0cmluZyhqICsgMSwgaiArIDgpID09PSBcIltDREFUQVtcIikge1xuICAgICAgICAgICAgICBxID0gcy5pbmRleE9mKFwiXV0+XCIsIGogKyA4KTtcblxuICAgICAgICAgICAgICBpZiAocSA8IDApIHtcbiAgICAgICAgICAgICAgICB0aGlzLm9uRXJyb3IoWE1MUGFyc2VyRXJyb3JDb2RlLlVudGVybWluYXRlZENkYXQpO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIHRoaXMub25DZGF0YShzLnN1YnN0cmluZyhqICsgOCwgcSkpO1xuICAgICAgICAgICAgICBqID0gcSArIDM7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHMuc3Vic3RyaW5nKGogKyAxLCBqICsgOCkgPT09IFwiRE9DVFlQRVwiKSB7XG4gICAgICAgICAgICAgIGNvbnN0IHEyID0gcy5pbmRleE9mKFwiW1wiLCBqICsgOCk7XG4gICAgICAgICAgICAgIGxldCBjb21wbGV4RG9jdHlwZSA9IGZhbHNlO1xuICAgICAgICAgICAgICBxID0gcy5pbmRleE9mKFwiPlwiLCBqICsgOCk7XG5cbiAgICAgICAgICAgICAgaWYgKHEgPCAwKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5vbkVycm9yKFhNTFBhcnNlckVycm9yQ29kZS5VbnRlcm1pbmF0ZWREb2N0eXBlRGVjbGFyYXRpb24pO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIGlmIChxMiA+IDAgJiYgcSA+IHEyKSB7XG4gICAgICAgICAgICAgICAgcSA9IHMuaW5kZXhPZihcIl0+XCIsIGogKyA4KTtcblxuICAgICAgICAgICAgICAgIGlmIChxIDwgMCkge1xuICAgICAgICAgICAgICAgICAgdGhpcy5vbkVycm9yKFhNTFBhcnNlckVycm9yQ29kZS5VbnRlcm1pbmF0ZWREb2N0eXBlRGVjbGFyYXRpb24pO1xuICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGNvbXBsZXhEb2N0eXBlID0gdHJ1ZTtcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIGNvbnN0IGRvY3R5cGVDb250ZW50ID0gcy5zdWJzdHJpbmcoaiArIDgsIHEgKyAoY29tcGxleERvY3R5cGUgPyAxIDogMCkpO1xuICAgICAgICAgICAgICB0aGlzLm9uRG9jdHlwZShkb2N0eXBlQ29udGVudCk7XG4gICAgICAgICAgICAgIGogPSBxICsgKGNvbXBsZXhEb2N0eXBlID8gMiA6IDEpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgdGhpcy5vbkVycm9yKFhNTFBhcnNlckVycm9yQ29kZS5NYWxmb3JtZWRFbGVtZW50KTtcbiAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICBjb25zdCBjb250ZW50ID0gdGhpcy5fcGFyc2VDb250ZW50KHMsIGopO1xuXG4gICAgICAgICAgICBpZiAoY29udGVudCA9PT0gbnVsbCkge1xuICAgICAgICAgICAgICB0aGlzLm9uRXJyb3IoWE1MUGFyc2VyRXJyb3JDb2RlLk1hbGZvcm1lZEVsZW1lbnQpO1xuICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGxldCBpc0Nsb3NlZCA9IGZhbHNlO1xuXG4gICAgICAgICAgICBpZiAocy5zdWJzdHJpbmcoaiArIGNvbnRlbnQucGFyc2VkLCBqICsgY29udGVudC5wYXJzZWQgKyAyKSA9PT0gXCIvPlwiKSB7XG4gICAgICAgICAgICAgIGlzQ2xvc2VkID0gdHJ1ZTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAocy5zdWJzdHJpbmcoaiArIGNvbnRlbnQucGFyc2VkLCBqICsgY29udGVudC5wYXJzZWQgKyAxKSAhPT0gXCI+XCIpIHtcbiAgICAgICAgICAgICAgdGhpcy5vbkVycm9yKFhNTFBhcnNlckVycm9yQ29kZS5VbnRlcm1pbmF0ZWRFbGVtZW50KTtcbiAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0aGlzLm9uQmVnaW5FbGVtZW50KGNvbnRlbnQubmFtZSwgY29udGVudC5hdHRyaWJ1dGVzLCBpc0Nsb3NlZCk7XG4gICAgICAgICAgICBqICs9IGNvbnRlbnQucGFyc2VkICsgKGlzQ2xvc2VkID8gMiA6IDEpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHdoaWxlIChqIDwgcy5sZW5ndGggJiYgc1tqXSAhPT0gXCI8XCIpIHtcbiAgICAgICAgICBqKys7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCB0ZXh0ID0gcy5zdWJzdHJpbmcoaSwgaik7XG4gICAgICAgIHRoaXMub25UZXh0KHRoaXMuX3Jlc29sdmVFbnRpdGllcyh0ZXh0KSk7XG4gICAgICB9XG5cbiAgICAgIGkgPSBqO1xuICAgIH1cbiAgfVxuXG4gIG9uUmVzb2x2ZUVudGl0eShuYW1lKSB7XG4gICAgcmV0dXJuIGAmJHtuYW1lfTtgO1xuICB9XG5cbiAgb25QaShuYW1lLCB2YWx1ZSkge31cblxuICBvbkNvbW1lbnQodGV4dCkge31cblxuICBvbkNkYXRhKHRleHQpIHt9XG5cbiAgb25Eb2N0eXBlKGRvY3R5cGVDb250ZW50KSB7fVxuXG4gIG9uVGV4dCh0ZXh0KSB7fVxuXG4gIG9uQmVnaW5FbGVtZW50KG5hbWUsIGF0dHJpYnV0ZXMsIGlzRW1wdHkpIHt9XG5cbiAgb25FbmRFbGVtZW50KG5hbWUpIHt9XG5cbiAgb25FcnJvcihjb2RlKSB7fVxuXG59XG5cbmNsYXNzIFNpbXBsZURPTU5vZGUge1xuICBjb25zdHJ1Y3Rvcihub2RlTmFtZSwgbm9kZVZhbHVlKSB7XG4gICAgdGhpcy5ub2RlTmFtZSA9IG5vZGVOYW1lO1xuICAgIHRoaXMubm9kZVZhbHVlID0gbm9kZVZhbHVlO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcInBhcmVudE5vZGVcIiwge1xuICAgICAgdmFsdWU6IG51bGwsXG4gICAgICB3cml0YWJsZTogdHJ1ZVxuICAgIH0pO1xuICB9XG5cbiAgZ2V0IGZpcnN0Q2hpbGQoKSB7XG4gICAgcmV0dXJuIHRoaXMuY2hpbGROb2RlcyAmJiB0aGlzLmNoaWxkTm9kZXNbMF07XG4gIH1cblxuICBnZXQgbmV4dFNpYmxpbmcoKSB7XG4gICAgY29uc3QgY2hpbGROb2RlcyA9IHRoaXMucGFyZW50Tm9kZS5jaGlsZE5vZGVzO1xuXG4gICAgaWYgKCFjaGlsZE5vZGVzKSB7XG4gICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIGNvbnN0IGluZGV4ID0gY2hpbGROb2Rlcy5pbmRleE9mKHRoaXMpO1xuXG4gICAgaWYgKGluZGV4ID09PSAtMSkge1xuICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICByZXR1cm4gY2hpbGROb2Rlc1tpbmRleCArIDFdO1xuICB9XG5cbiAgZ2V0IHRleHRDb250ZW50KCkge1xuICAgIGlmICghdGhpcy5jaGlsZE5vZGVzKSB7XG4gICAgICByZXR1cm4gdGhpcy5ub2RlVmFsdWUgfHwgXCJcIjtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5jaGlsZE5vZGVzLm1hcChmdW5jdGlvbiAoY2hpbGQpIHtcbiAgICAgIHJldHVybiBjaGlsZC50ZXh0Q29udGVudDtcbiAgICB9KS5qb2luKFwiXCIpO1xuICB9XG5cbiAgaGFzQ2hpbGROb2RlcygpIHtcbiAgICByZXR1cm4gdGhpcy5jaGlsZE5vZGVzICYmIHRoaXMuY2hpbGROb2Rlcy5sZW5ndGggPiAwO1xuICB9XG5cbn1cblxuY2xhc3MgU2ltcGxlWE1MUGFyc2VyIGV4dGVuZHMgWE1MUGFyc2VyQmFzZSB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKCk7XG4gICAgdGhpcy5fY3VycmVudEZyYWdtZW50ID0gbnVsbDtcbiAgICB0aGlzLl9zdGFjayA9IG51bGw7XG4gICAgdGhpcy5fZXJyb3JDb2RlID0gWE1MUGFyc2VyRXJyb3JDb2RlLk5vRXJyb3I7XG4gIH1cblxuICBwYXJzZUZyb21TdHJpbmcoZGF0YSkge1xuICAgIHRoaXMuX2N1cnJlbnRGcmFnbWVudCA9IFtdO1xuICAgIHRoaXMuX3N0YWNrID0gW107XG4gICAgdGhpcy5fZXJyb3JDb2RlID0gWE1MUGFyc2VyRXJyb3JDb2RlLk5vRXJyb3I7XG4gICAgdGhpcy5wYXJzZVhtbChkYXRhKTtcblxuICAgIGlmICh0aGlzLl9lcnJvckNvZGUgIT09IFhNTFBhcnNlckVycm9yQ29kZS5Ob0Vycm9yKSB7XG4gICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIGNvbnN0IFtkb2N1bWVudEVsZW1lbnRdID0gdGhpcy5fY3VycmVudEZyYWdtZW50O1xuXG4gICAgaWYgKCFkb2N1bWVudEVsZW1lbnQpIHtcbiAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgIGRvY3VtZW50RWxlbWVudFxuICAgIH07XG4gIH1cblxuICBvblJlc29sdmVFbnRpdHkobmFtZSkge1xuICAgIHN3aXRjaCAobmFtZSkge1xuICAgICAgY2FzZSBcImFwb3NcIjpcbiAgICAgICAgcmV0dXJuIFwiJ1wiO1xuICAgIH1cblxuICAgIHJldHVybiBzdXBlci5vblJlc29sdmVFbnRpdHkobmFtZSk7XG4gIH1cblxuICBvblRleHQodGV4dCkge1xuICAgIGlmIChpc1doaXRlc3BhY2VTdHJpbmcodGV4dCkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjb25zdCBub2RlID0gbmV3IFNpbXBsZURPTU5vZGUoXCIjdGV4dFwiLCB0ZXh0KTtcblxuICAgIHRoaXMuX2N1cnJlbnRGcmFnbWVudC5wdXNoKG5vZGUpO1xuICB9XG5cbiAgb25DZGF0YSh0ZXh0KSB7XG4gICAgY29uc3Qgbm9kZSA9IG5ldyBTaW1wbGVET01Ob2RlKFwiI3RleHRcIiwgdGV4dCk7XG5cbiAgICB0aGlzLl9jdXJyZW50RnJhZ21lbnQucHVzaChub2RlKTtcbiAgfVxuXG4gIG9uQmVnaW5FbGVtZW50KG5hbWUsIGF0dHJpYnV0ZXMsIGlzRW1wdHkpIHtcbiAgICBjb25zdCBub2RlID0gbmV3IFNpbXBsZURPTU5vZGUobmFtZSk7XG4gICAgbm9kZS5jaGlsZE5vZGVzID0gW107XG5cbiAgICB0aGlzLl9jdXJyZW50RnJhZ21lbnQucHVzaChub2RlKTtcblxuICAgIGlmIChpc0VtcHR5KSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdGhpcy5fc3RhY2sucHVzaCh0aGlzLl9jdXJyZW50RnJhZ21lbnQpO1xuXG4gICAgdGhpcy5fY3VycmVudEZyYWdtZW50ID0gbm9kZS5jaGlsZE5vZGVzO1xuICB9XG5cbiAgb25FbmRFbGVtZW50KG5hbWUpIHtcbiAgICB0aGlzLl9jdXJyZW50RnJhZ21lbnQgPSB0aGlzLl9zdGFjay5wb3AoKSB8fCBbXTtcbiAgICBjb25zdCBsYXN0RWxlbWVudCA9IHRoaXMuX2N1cnJlbnRGcmFnbWVudFt0aGlzLl9jdXJyZW50RnJhZ21lbnQubGVuZ3RoIC0gMV07XG5cbiAgICBpZiAoIWxhc3RFbGVtZW50KSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgZm9yIChsZXQgaSA9IDAsIGlpID0gbGFzdEVsZW1lbnQuY2hpbGROb2Rlcy5sZW5ndGg7IGkgPCBpaTsgaSsrKSB7XG4gICAgICBsYXN0RWxlbWVudC5jaGlsZE5vZGVzW2ldLnBhcmVudE5vZGUgPSBsYXN0RWxlbWVudDtcbiAgICB9XG4gIH1cblxuICBvbkVycm9yKGNvZGUpIHtcbiAgICB0aGlzLl9lcnJvckNvZGUgPSBjb2RlO1xuICB9XG5cbn1cblxuZXhwb3J0cy5TaW1wbGVYTUxQYXJzZXIgPSBTaW1wbGVYTUxQYXJzZXI7XG5cbi8qKiovIH0pLFxuLyogMTQgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd19wZGZqc19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuUERGRGF0YVRyYW5zcG9ydFN0cmVhbSA9IHZvaWQgMDtcblxudmFyIF91dGlsID0gX193X3BkZmpzX3JlcXVpcmVfXygyKTtcblxuY2xhc3MgUERGRGF0YVRyYW5zcG9ydFN0cmVhbSB7XG4gIGNvbnN0cnVjdG9yKHBhcmFtcywgcGRmRGF0YVJhbmdlVHJhbnNwb3J0KSB7XG4gICAgKDAsIF91dGlsLmFzc2VydCkocGRmRGF0YVJhbmdlVHJhbnNwb3J0LCAnUERGRGF0YVRyYW5zcG9ydFN0cmVhbSAtIG1pc3NpbmcgcmVxdWlyZWQgXCJwZGZEYXRhUmFuZ2VUcmFuc3BvcnRcIiBhcmd1bWVudC4nKTtcbiAgICB0aGlzLl9xdWV1ZWRDaHVua3MgPSBbXTtcbiAgICB0aGlzLl9wcm9ncmVzc2l2ZURvbmUgPSBwYXJhbXMucHJvZ3Jlc3NpdmVEb25lIHx8IGZhbHNlO1xuICAgIGNvbnN0IGluaXRpYWxEYXRhID0gcGFyYW1zLmluaXRpYWxEYXRhO1xuXG4gICAgaWYgKGluaXRpYWxEYXRhICYmIGluaXRpYWxEYXRhLmxlbmd0aCA+IDApIHtcbiAgICAgIGNvbnN0IGJ1ZmZlciA9IG5ldyBVaW50OEFycmF5KGluaXRpYWxEYXRhKS5idWZmZXI7XG5cbiAgICAgIHRoaXMuX3F1ZXVlZENodW5rcy5wdXNoKGJ1ZmZlcik7XG4gICAgfVxuXG4gICAgdGhpcy5fcGRmRGF0YVJhbmdlVHJhbnNwb3J0ID0gcGRmRGF0YVJhbmdlVHJhbnNwb3J0O1xuICAgIHRoaXMuX2lzU3RyZWFtaW5nU3VwcG9ydGVkID0gIXBhcmFtcy5kaXNhYmxlU3RyZWFtO1xuICAgIHRoaXMuX2lzUmFuZ2VTdXBwb3J0ZWQgPSAhcGFyYW1zLmRpc2FibGVSYW5nZTtcbiAgICB0aGlzLl9jb250ZW50TGVuZ3RoID0gcGFyYW1zLmxlbmd0aDtcbiAgICB0aGlzLl9mdWxsUmVxdWVzdFJlYWRlciA9IG51bGw7XG4gICAgdGhpcy5fcmFuZ2VSZWFkZXJzID0gW107XG5cbiAgICB0aGlzLl9wZGZEYXRhUmFuZ2VUcmFuc3BvcnQuYWRkUmFuZ2VMaXN0ZW5lcigoYmVnaW4sIGNodW5rKSA9PiB7XG4gICAgICB0aGlzLl9vblJlY2VpdmVEYXRhKHtcbiAgICAgICAgYmVnaW4sXG4gICAgICAgIGNodW5rXG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIHRoaXMuX3BkZkRhdGFSYW5nZVRyYW5zcG9ydC5hZGRQcm9ncmVzc0xpc3RlbmVyKChsb2FkZWQsIHRvdGFsKSA9PiB7XG4gICAgICB0aGlzLl9vblByb2dyZXNzKHtcbiAgICAgICAgbG9hZGVkLFxuICAgICAgICB0b3RhbFxuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICB0aGlzLl9wZGZEYXRhUmFuZ2VUcmFuc3BvcnQuYWRkUHJvZ3Jlc3NpdmVSZWFkTGlzdGVuZXIoY2h1bmsgPT4ge1xuICAgICAgdGhpcy5fb25SZWNlaXZlRGF0YSh7XG4gICAgICAgIGNodW5rXG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIHRoaXMuX3BkZkRhdGFSYW5nZVRyYW5zcG9ydC5hZGRQcm9ncmVzc2l2ZURvbmVMaXN0ZW5lcigoKSA9PiB7XG4gICAgICB0aGlzLl9vblByb2dyZXNzaXZlRG9uZSgpO1xuICAgIH0pO1xuXG4gICAgdGhpcy5fcGRmRGF0YVJhbmdlVHJhbnNwb3J0LnRyYW5zcG9ydFJlYWR5KCk7XG4gIH1cblxuICBfb25SZWNlaXZlRGF0YShhcmdzKSB7XG4gICAgY29uc3QgYnVmZmVyID0gbmV3IFVpbnQ4QXJyYXkoYXJncy5jaHVuaykuYnVmZmVyO1xuXG4gICAgaWYgKGFyZ3MuYmVnaW4gPT09IHVuZGVmaW5lZCkge1xuICAgICAgaWYgKHRoaXMuX2Z1bGxSZXF1ZXN0UmVhZGVyKSB7XG4gICAgICAgIHRoaXMuX2Z1bGxSZXF1ZXN0UmVhZGVyLl9lbnF1ZXVlKGJ1ZmZlcik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLl9xdWV1ZWRDaHVua3MucHVzaChidWZmZXIpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBjb25zdCBmb3VuZCA9IHRoaXMuX3JhbmdlUmVhZGVycy5zb21lKGZ1bmN0aW9uIChyYW5nZVJlYWRlcikge1xuICAgICAgICBpZiAocmFuZ2VSZWFkZXIuX2JlZ2luICE9PSBhcmdzLmJlZ2luKSB7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgcmFuZ2VSZWFkZXIuX2VucXVldWUoYnVmZmVyKTtcblxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH0pO1xuXG4gICAgICAoMCwgX3V0aWwuYXNzZXJ0KShmb3VuZCwgXCJfb25SZWNlaXZlRGF0YSAtIG5vIGBQREZEYXRhVHJhbnNwb3J0U3RyZWFtUmFuZ2VSZWFkZXJgIGluc3RhbmNlIGZvdW5kLlwiKTtcbiAgICB9XG4gIH1cblxuICBnZXQgX3Byb2dyZXNzaXZlRGF0YUxlbmd0aCgpIHtcbiAgICByZXR1cm4gdGhpcy5fZnVsbFJlcXVlc3RSZWFkZXIgPyB0aGlzLl9mdWxsUmVxdWVzdFJlYWRlci5fbG9hZGVkIDogMDtcbiAgfVxuXG4gIF9vblByb2dyZXNzKGV2dCkge1xuICAgIGlmIChldnQudG90YWwgPT09IHVuZGVmaW5lZCkge1xuICAgICAgY29uc3QgZmlyc3RSZWFkZXIgPSB0aGlzLl9yYW5nZVJlYWRlcnNbMF07XG5cbiAgICAgIGlmIChmaXJzdFJlYWRlciAmJiBmaXJzdFJlYWRlci5vblByb2dyZXNzKSB7XG4gICAgICAgIGZpcnN0UmVhZGVyLm9uUHJvZ3Jlc3Moe1xuICAgICAgICAgIGxvYWRlZDogZXZ0LmxvYWRlZFxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgY29uc3QgZnVsbFJlYWRlciA9IHRoaXMuX2Z1bGxSZXF1ZXN0UmVhZGVyO1xuXG4gICAgICBpZiAoZnVsbFJlYWRlciAmJiBmdWxsUmVhZGVyLm9uUHJvZ3Jlc3MpIHtcbiAgICAgICAgZnVsbFJlYWRlci5vblByb2dyZXNzKHtcbiAgICAgICAgICBsb2FkZWQ6IGV2dC5sb2FkZWQsXG4gICAgICAgICAgdG90YWw6IGV2dC50b3RhbFxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBfb25Qcm9ncmVzc2l2ZURvbmUoKSB7XG4gICAgaWYgKHRoaXMuX2Z1bGxSZXF1ZXN0UmVhZGVyKSB7XG4gICAgICB0aGlzLl9mdWxsUmVxdWVzdFJlYWRlci5wcm9ncmVzc2l2ZURvbmUoKTtcbiAgICB9XG5cbiAgICB0aGlzLl9wcm9ncmVzc2l2ZURvbmUgPSB0cnVlO1xuICB9XG5cbiAgX3JlbW92ZVJhbmdlUmVhZGVyKHJlYWRlcikge1xuICAgIGNvbnN0IGkgPSB0aGlzLl9yYW5nZVJlYWRlcnMuaW5kZXhPZihyZWFkZXIpO1xuXG4gICAgaWYgKGkgPj0gMCkge1xuICAgICAgdGhpcy5fcmFuZ2VSZWFkZXJzLnNwbGljZShpLCAxKTtcbiAgICB9XG4gIH1cblxuICBnZXRGdWxsUmVhZGVyKCkge1xuICAgICgwLCBfdXRpbC5hc3NlcnQpKCF0aGlzLl9mdWxsUmVxdWVzdFJlYWRlciwgXCJQREZEYXRhVHJhbnNwb3J0U3RyZWFtLmdldEZ1bGxSZWFkZXIgY2FuIG9ubHkgYmUgY2FsbGVkIG9uY2UuXCIpO1xuICAgIGNvbnN0IHF1ZXVlZENodW5rcyA9IHRoaXMuX3F1ZXVlZENodW5rcztcbiAgICB0aGlzLl9xdWV1ZWRDaHVua3MgPSBudWxsO1xuICAgIHJldHVybiBuZXcgUERGRGF0YVRyYW5zcG9ydFN0cmVhbVJlYWRlcih0aGlzLCBxdWV1ZWRDaHVua3MsIHRoaXMuX3Byb2dyZXNzaXZlRG9uZSk7XG4gIH1cblxuICBnZXRSYW5nZVJlYWRlcihiZWdpbiwgZW5kKSB7XG4gICAgaWYgKGVuZCA8PSB0aGlzLl9wcm9ncmVzc2l2ZURhdGFMZW5ndGgpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIGNvbnN0IHJlYWRlciA9IG5ldyBQREZEYXRhVHJhbnNwb3J0U3RyZWFtUmFuZ2VSZWFkZXIodGhpcywgYmVnaW4sIGVuZCk7XG5cbiAgICB0aGlzLl9wZGZEYXRhUmFuZ2VUcmFuc3BvcnQucmVxdWVzdERhdGFSYW5nZShiZWdpbiwgZW5kKTtcblxuICAgIHRoaXMuX3JhbmdlUmVhZGVycy5wdXNoKHJlYWRlcik7XG5cbiAgICByZXR1cm4gcmVhZGVyO1xuICB9XG5cbiAgY2FuY2VsQWxsUmVxdWVzdHMocmVhc29uKSB7XG4gICAgaWYgKHRoaXMuX2Z1bGxSZXF1ZXN0UmVhZGVyKSB7XG4gICAgICB0aGlzLl9mdWxsUmVxdWVzdFJlYWRlci5jYW5jZWwocmVhc29uKTtcbiAgICB9XG5cbiAgICBjb25zdCByZWFkZXJzID0gdGhpcy5fcmFuZ2VSZWFkZXJzLnNsaWNlKDApO1xuXG4gICAgcmVhZGVycy5mb3JFYWNoKGZ1bmN0aW9uIChyYW5nZVJlYWRlcikge1xuICAgICAgcmFuZ2VSZWFkZXIuY2FuY2VsKHJlYXNvbik7XG4gICAgfSk7XG5cbiAgICB0aGlzLl9wZGZEYXRhUmFuZ2VUcmFuc3BvcnQuYWJvcnQoKTtcbiAgfVxuXG59XG5cbmV4cG9ydHMuUERGRGF0YVRyYW5zcG9ydFN0cmVhbSA9IFBERkRhdGFUcmFuc3BvcnRTdHJlYW07XG5cbmNsYXNzIFBERkRhdGFUcmFuc3BvcnRTdHJlYW1SZWFkZXIge1xuICBjb25zdHJ1Y3RvcihzdHJlYW0sIHF1ZXVlZENodW5rcywgcHJvZ3Jlc3NpdmVEb25lID0gZmFsc2UpIHtcbiAgICB0aGlzLl9zdHJlYW0gPSBzdHJlYW07XG4gICAgdGhpcy5fZG9uZSA9IHByb2dyZXNzaXZlRG9uZSB8fCBmYWxzZTtcbiAgICB0aGlzLl9maWxlbmFtZSA9IG51bGw7XG4gICAgdGhpcy5fcXVldWVkQ2h1bmtzID0gcXVldWVkQ2h1bmtzIHx8IFtdO1xuICAgIHRoaXMuX2xvYWRlZCA9IDA7XG5cbiAgICBmb3IgKGNvbnN0IGNodW5rIG9mIHRoaXMuX3F1ZXVlZENodW5rcykge1xuICAgICAgdGhpcy5fbG9hZGVkICs9IGNodW5rLmJ5dGVMZW5ndGg7XG4gICAgfVxuXG4gICAgdGhpcy5fcmVxdWVzdHMgPSBbXTtcbiAgICB0aGlzLl9oZWFkZXJzUmVhZHkgPSBQcm9taXNlLnJlc29sdmUoKTtcbiAgICBzdHJlYW0uX2Z1bGxSZXF1ZXN0UmVhZGVyID0gdGhpcztcbiAgICB0aGlzLm9uUHJvZ3Jlc3MgPSBudWxsO1xuICB9XG5cbiAgX2VucXVldWUoY2h1bmspIHtcbiAgICBpZiAodGhpcy5fZG9uZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmICh0aGlzLl9yZXF1ZXN0cy5sZW5ndGggPiAwKSB7XG4gICAgICBjb25zdCByZXF1ZXN0Q2FwYWJpbGl0eSA9IHRoaXMuX3JlcXVlc3RzLnNoaWZ0KCk7XG5cbiAgICAgIHJlcXVlc3RDYXBhYmlsaXR5LnJlc29sdmUoe1xuICAgICAgICB2YWx1ZTogY2h1bmssXG4gICAgICAgIGRvbmU6IGZhbHNlXG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5fcXVldWVkQ2h1bmtzLnB1c2goY2h1bmspO1xuICAgIH1cblxuICAgIHRoaXMuX2xvYWRlZCArPSBjaHVuay5ieXRlTGVuZ3RoO1xuICB9XG5cbiAgZ2V0IGhlYWRlcnNSZWFkeSgpIHtcbiAgICByZXR1cm4gdGhpcy5faGVhZGVyc1JlYWR5O1xuICB9XG5cbiAgZ2V0IGZpbGVuYW1lKCkge1xuICAgIHJldHVybiB0aGlzLl9maWxlbmFtZTtcbiAgfVxuXG4gIGdldCBpc1JhbmdlU3VwcG9ydGVkKCkge1xuICAgIHJldHVybiB0aGlzLl9zdHJlYW0uX2lzUmFuZ2VTdXBwb3J0ZWQ7XG4gIH1cblxuICBnZXQgaXNTdHJlYW1pbmdTdXBwb3J0ZWQoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3N0cmVhbS5faXNTdHJlYW1pbmdTdXBwb3J0ZWQ7XG4gIH1cblxuICBnZXQgY29udGVudExlbmd0aCgpIHtcbiAgICByZXR1cm4gdGhpcy5fc3RyZWFtLl9jb250ZW50TGVuZ3RoO1xuICB9XG5cbiAgYXN5bmMgcmVhZCgpIHtcbiAgICBpZiAodGhpcy5fcXVldWVkQ2h1bmtzLmxlbmd0aCA+IDApIHtcbiAgICAgIGNvbnN0IGNodW5rID0gdGhpcy5fcXVldWVkQ2h1bmtzLnNoaWZ0KCk7XG5cbiAgICAgIHJldHVybiB7XG4gICAgICAgIHZhbHVlOiBjaHVuayxcbiAgICAgICAgZG9uZTogZmFsc2VcbiAgICAgIH07XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuX2RvbmUpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHZhbHVlOiB1bmRlZmluZWQsXG4gICAgICAgIGRvbmU6IHRydWVcbiAgICAgIH07XG4gICAgfVxuXG4gICAgY29uc3QgcmVxdWVzdENhcGFiaWxpdHkgPSAoMCwgX3V0aWwuY3JlYXRlUHJvbWlzZUNhcGFiaWxpdHkpKCk7XG5cbiAgICB0aGlzLl9yZXF1ZXN0cy5wdXNoKHJlcXVlc3RDYXBhYmlsaXR5KTtcblxuICAgIHJldHVybiByZXF1ZXN0Q2FwYWJpbGl0eS5wcm9taXNlO1xuICB9XG5cbiAgY2FuY2VsKHJlYXNvbikge1xuICAgIHRoaXMuX2RvbmUgPSB0cnVlO1xuXG4gICAgdGhpcy5fcmVxdWVzdHMuZm9yRWFjaChmdW5jdGlvbiAocmVxdWVzdENhcGFiaWxpdHkpIHtcbiAgICAgIHJlcXVlc3RDYXBhYmlsaXR5LnJlc29sdmUoe1xuICAgICAgICB2YWx1ZTogdW5kZWZpbmVkLFxuICAgICAgICBkb25lOiB0cnVlXG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIHRoaXMuX3JlcXVlc3RzID0gW107XG4gIH1cblxuICBwcm9ncmVzc2l2ZURvbmUoKSB7XG4gICAgaWYgKHRoaXMuX2RvbmUpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0aGlzLl9kb25lID0gdHJ1ZTtcbiAgfVxuXG59XG5cbmNsYXNzIFBERkRhdGFUcmFuc3BvcnRTdHJlYW1SYW5nZVJlYWRlciB7XG4gIGNvbnN0cnVjdG9yKHN0cmVhbSwgYmVnaW4sIGVuZCkge1xuICAgIHRoaXMuX3N0cmVhbSA9IHN0cmVhbTtcbiAgICB0aGlzLl9iZWdpbiA9IGJlZ2luO1xuICAgIHRoaXMuX2VuZCA9IGVuZDtcbiAgICB0aGlzLl9xdWV1ZWRDaHVuayA9IG51bGw7XG4gICAgdGhpcy5fcmVxdWVzdHMgPSBbXTtcbiAgICB0aGlzLl9kb25lID0gZmFsc2U7XG4gICAgdGhpcy5vblByb2dyZXNzID0gbnVsbDtcbiAgfVxuXG4gIF9lbnF1ZXVlKGNodW5rKSB7XG4gICAgaWYgKHRoaXMuX2RvbmUpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5fcmVxdWVzdHMubGVuZ3RoID09PSAwKSB7XG4gICAgICB0aGlzLl9xdWV1ZWRDaHVuayA9IGNodW5rO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25zdCByZXF1ZXN0c0NhcGFiaWxpdHkgPSB0aGlzLl9yZXF1ZXN0cy5zaGlmdCgpO1xuXG4gICAgICByZXF1ZXN0c0NhcGFiaWxpdHkucmVzb2x2ZSh7XG4gICAgICAgIHZhbHVlOiBjaHVuayxcbiAgICAgICAgZG9uZTogZmFsc2VcbiAgICAgIH0pO1xuXG4gICAgICB0aGlzLl9yZXF1ZXN0cy5mb3JFYWNoKGZ1bmN0aW9uIChyZXF1ZXN0Q2FwYWJpbGl0eSkge1xuICAgICAgICByZXF1ZXN0Q2FwYWJpbGl0eS5yZXNvbHZlKHtcbiAgICAgICAgICB2YWx1ZTogdW5kZWZpbmVkLFxuICAgICAgICAgIGRvbmU6IHRydWVcbiAgICAgICAgfSk7XG4gICAgICB9KTtcblxuICAgICAgdGhpcy5fcmVxdWVzdHMgPSBbXTtcbiAgICB9XG5cbiAgICB0aGlzLl9kb25lID0gdHJ1ZTtcblxuICAgIHRoaXMuX3N0cmVhbS5fcmVtb3ZlUmFuZ2VSZWFkZXIodGhpcyk7XG4gIH1cblxuICBnZXQgaXNTdHJlYW1pbmdTdXBwb3J0ZWQoKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgYXN5bmMgcmVhZCgpIHtcbiAgICBpZiAodGhpcy5fcXVldWVkQ2h1bmspIHtcbiAgICAgIGNvbnN0IGNodW5rID0gdGhpcy5fcXVldWVkQ2h1bms7XG4gICAgICB0aGlzLl9xdWV1ZWRDaHVuayA9IG51bGw7XG4gICAgICByZXR1cm4ge1xuICAgICAgICB2YWx1ZTogY2h1bmssXG4gICAgICAgIGRvbmU6IGZhbHNlXG4gICAgICB9O1xuICAgIH1cblxuICAgIGlmICh0aGlzLl9kb25lKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICB2YWx1ZTogdW5kZWZpbmVkLFxuICAgICAgICBkb25lOiB0cnVlXG4gICAgICB9O1xuICAgIH1cblxuICAgIGNvbnN0IHJlcXVlc3RDYXBhYmlsaXR5ID0gKDAsIF91dGlsLmNyZWF0ZVByb21pc2VDYXBhYmlsaXR5KSgpO1xuXG4gICAgdGhpcy5fcmVxdWVzdHMucHVzaChyZXF1ZXN0Q2FwYWJpbGl0eSk7XG5cbiAgICByZXR1cm4gcmVxdWVzdENhcGFiaWxpdHkucHJvbWlzZTtcbiAgfVxuXG4gIGNhbmNlbChyZWFzb24pIHtcbiAgICB0aGlzLl9kb25lID0gdHJ1ZTtcblxuICAgIHRoaXMuX3JlcXVlc3RzLmZvckVhY2goZnVuY3Rpb24gKHJlcXVlc3RDYXBhYmlsaXR5KSB7XG4gICAgICByZXF1ZXN0Q2FwYWJpbGl0eS5yZXNvbHZlKHtcbiAgICAgICAgdmFsdWU6IHVuZGVmaW5lZCxcbiAgICAgICAgZG9uZTogdHJ1ZVxuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICB0aGlzLl9yZXF1ZXN0cyA9IFtdO1xuXG4gICAgdGhpcy5fc3RyZWFtLl9yZW1vdmVSYW5nZVJlYWRlcih0aGlzKTtcbiAgfVxuXG59XG5cbi8qKiovIH0pLFxuLyogMTUgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd19wZGZqc19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuV2ViR0xDb250ZXh0ID0gdm9pZCAwO1xuXG52YXIgX3V0aWwgPSBfX3dfcGRmanNfcmVxdWlyZV9fKDIpO1xuXG5jbGFzcyBXZWJHTENvbnRleHQge1xuICBjb25zdHJ1Y3Rvcih7XG4gICAgZW5hYmxlID0gZmFsc2VcbiAgfSkge1xuICAgIHRoaXMuX2VuYWJsZWQgPSBlbmFibGUgPT09IHRydWU7XG4gIH1cblxuICBnZXQgaXNFbmFibGVkKCkge1xuICAgIGxldCBlbmFibGVkID0gdGhpcy5fZW5hYmxlZDtcblxuICAgIGlmIChlbmFibGVkKSB7XG4gICAgICBlbmFibGVkID0gV2ViR0xVdGlscy50cnlJbml0R0woKTtcbiAgICB9XG5cbiAgICByZXR1cm4gKDAsIF91dGlsLnNoYWRvdykodGhpcywgXCJpc0VuYWJsZWRcIiwgZW5hYmxlZCk7XG4gIH1cblxuICBjb21wb3NlU01hc2soe1xuICAgIGxheWVyLFxuICAgIG1hc2ssXG4gICAgcHJvcGVydGllc1xuICB9KSB7XG4gICAgcmV0dXJuIFdlYkdMVXRpbHMuY29tcG9zZVNNYXNrKGxheWVyLCBtYXNrLCBwcm9wZXJ0aWVzKTtcbiAgfVxuXG4gIGRyYXdGaWd1cmVzKHtcbiAgICB3aWR0aCxcbiAgICBoZWlnaHQsXG4gICAgYmFja2dyb3VuZENvbG9yLFxuICAgIGZpZ3VyZXMsXG4gICAgY29udGV4dFxuICB9KSB7XG4gICAgcmV0dXJuIFdlYkdMVXRpbHMuZHJhd0ZpZ3VyZXMod2lkdGgsIGhlaWdodCwgYmFja2dyb3VuZENvbG9yLCBmaWd1cmVzLCBjb250ZXh0KTtcbiAgfVxuXG4gIGNsZWFyKCkge1xuICAgIFdlYkdMVXRpbHMuY2xlYW51cCgpO1xuICB9XG5cbn1cblxuZXhwb3J0cy5XZWJHTENvbnRleHQgPSBXZWJHTENvbnRleHQ7XG5cbnZhciBXZWJHTFV0aWxzID0gZnVuY3Rpb24gV2ViR0xVdGlsc0Nsb3N1cmUoKSB7XG4gIGZ1bmN0aW9uIGxvYWRTaGFkZXIoZ2wsIGNvZGUsIHNoYWRlclR5cGUpIHtcbiAgICB2YXIgc2hhZGVyID0gZ2wuY3JlYXRlU2hhZGVyKHNoYWRlclR5cGUpO1xuICAgIGdsLnNoYWRlclNvdXJjZShzaGFkZXIsIGNvZGUpO1xuICAgIGdsLmNvbXBpbGVTaGFkZXIoc2hhZGVyKTtcbiAgICB2YXIgY29tcGlsZWQgPSBnbC5nZXRTaGFkZXJQYXJhbWV0ZXIoc2hhZGVyLCBnbC5DT01QSUxFX1NUQVRVUyk7XG5cbiAgICBpZiAoIWNvbXBpbGVkKSB7XG4gICAgICB2YXIgZXJyb3JNc2cgPSBnbC5nZXRTaGFkZXJJbmZvTG9nKHNoYWRlcik7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJFcnJvciBkdXJpbmcgc2hhZGVyIGNvbXBpbGF0aW9uOiBcIiArIGVycm9yTXNnKTtcbiAgICB9XG5cbiAgICByZXR1cm4gc2hhZGVyO1xuICB9XG5cbiAgZnVuY3Rpb24gY3JlYXRlVmVydGV4U2hhZGVyKGdsLCBjb2RlKSB7XG4gICAgcmV0dXJuIGxvYWRTaGFkZXIoZ2wsIGNvZGUsIGdsLlZFUlRFWF9TSEFERVIpO1xuICB9XG5cbiAgZnVuY3Rpb24gY3JlYXRlRnJhZ21lbnRTaGFkZXIoZ2wsIGNvZGUpIHtcbiAgICByZXR1cm4gbG9hZFNoYWRlcihnbCwgY29kZSwgZ2wuRlJBR01FTlRfU0hBREVSKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNyZWF0ZVByb2dyYW0oZ2wsIHNoYWRlcnMpIHtcbiAgICB2YXIgcHJvZ3JhbSA9IGdsLmNyZWF0ZVByb2dyYW0oKTtcblxuICAgIGZvciAodmFyIGkgPSAwLCBpaSA9IHNoYWRlcnMubGVuZ3RoOyBpIDwgaWk7ICsraSkge1xuICAgICAgZ2wuYXR0YWNoU2hhZGVyKHByb2dyYW0sIHNoYWRlcnNbaV0pO1xuICAgIH1cblxuICAgIGdsLmxpbmtQcm9ncmFtKHByb2dyYW0pO1xuICAgIHZhciBsaW5rZWQgPSBnbC5nZXRQcm9ncmFtUGFyYW1ldGVyKHByb2dyYW0sIGdsLkxJTktfU1RBVFVTKTtcblxuICAgIGlmICghbGlua2VkKSB7XG4gICAgICB2YXIgZXJyb3JNc2cgPSBnbC5nZXRQcm9ncmFtSW5mb0xvZyhwcm9ncmFtKTtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIkVycm9yIGR1cmluZyBwcm9ncmFtIGxpbmtpbmc6IFwiICsgZXJyb3JNc2cpO1xuICAgIH1cblxuICAgIHJldHVybiBwcm9ncmFtO1xuICB9XG5cbiAgZnVuY3Rpb24gY3JlYXRlVGV4dHVyZShnbCwgaW1hZ2UsIHRleHR1cmVJZCkge1xuICAgIGdsLmFjdGl2ZVRleHR1cmUodGV4dHVyZUlkKTtcbiAgICB2YXIgdGV4dHVyZSA9IGdsLmNyZWF0ZVRleHR1cmUoKTtcbiAgICBnbC5iaW5kVGV4dHVyZShnbC5URVhUVVJFXzJELCB0ZXh0dXJlKTtcbiAgICBnbC50ZXhQYXJhbWV0ZXJpKGdsLlRFWFRVUkVfMkQsIGdsLlRFWFRVUkVfV1JBUF9TLCBnbC5DTEFNUF9UT19FREdFKTtcbiAgICBnbC50ZXhQYXJhbWV0ZXJpKGdsLlRFWFRVUkVfMkQsIGdsLlRFWFRVUkVfV1JBUF9ULCBnbC5DTEFNUF9UT19FREdFKTtcbiAgICBnbC50ZXhQYXJhbWV0ZXJpKGdsLlRFWFRVUkVfMkQsIGdsLlRFWFRVUkVfTUlOX0ZJTFRFUiwgZ2wuTkVBUkVTVCk7XG4gICAgZ2wudGV4UGFyYW1ldGVyaShnbC5URVhUVVJFXzJELCBnbC5URVhUVVJFX01BR19GSUxURVIsIGdsLk5FQVJFU1QpO1xuICAgIGdsLnRleEltYWdlMkQoZ2wuVEVYVFVSRV8yRCwgMCwgZ2wuUkdCQSwgZ2wuUkdCQSwgZ2wuVU5TSUdORURfQllURSwgaW1hZ2UpO1xuICAgIHJldHVybiB0ZXh0dXJlO1xuICB9XG5cbiAgdmFyIGN1cnJlbnRHTCwgY3VycmVudENhbnZhcztcblxuICBmdW5jdGlvbiBnZW5lcmF0ZUdMKCkge1xuICAgIGlmIChjdXJyZW50R0wpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjdXJyZW50Q2FudmFzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImNhbnZhc1wiKTtcbiAgICBjdXJyZW50R0wgPSBjdXJyZW50Q2FudmFzLmdldENvbnRleHQoXCJ3ZWJnbFwiLCB7XG4gICAgICBwcmVtdWx0aXBsaWVkYWxwaGE6IGZhbHNlXG4gICAgfSk7XG4gIH1cblxuICB2YXIgc21hc2tWZXJ0ZXhTaGFkZXJDb2RlID0gXCJcXFxuICBhdHRyaWJ1dGUgdmVjMiBhX3Bvc2l0aW9uOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxcXG4gIGF0dHJpYnV0ZSB2ZWMyIGFfdGV4Q29vcmQ7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcXFxuICB1bmlmb3JtIHZlYzIgdV9yZXNvbHV0aW9uOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXFxcbiAgdmFyeWluZyB2ZWMyIHZfdGV4Q29vcmQ7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxcXG4gIHZvaWQgbWFpbigpIHsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXFxcbiAgICB2ZWMyIGNsaXBTcGFjZSA9IChhX3Bvc2l0aW9uIC8gdV9yZXNvbHV0aW9uKSAqIDIuMCAtIDEuMDsgICBcXFxuICAgIGdsX1Bvc2l0aW9uID0gdmVjNChjbGlwU3BhY2UgKiB2ZWMyKDEsIC0xKSwgMCwgMSk7ICAgICAgICAgIFxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXFxcbiAgICB2X3RleENvb3JkID0gYV90ZXhDb29yZDsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcXFxuICB9ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiO1xuICB2YXIgc21hc2tGcmFnbWVudFNoYWRlckNvZGUgPSBcIlxcXG4gIHByZWNpc2lvbiBtZWRpdW1wIGZsb2F0OyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcXFxuICB1bmlmb3JtIHZlYzQgdV9iYWNrZHJvcDsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxcXG4gIHVuaWZvcm0gaW50IHVfc3VidHlwZTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXFxcbiAgdW5pZm9ybSBzYW1wbGVyMkQgdV9pbWFnZTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcXFxuICB1bmlmb3JtIHNhbXBsZXIyRCB1X21hc2s7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXFxcbiAgdmFyeWluZyB2ZWMyIHZfdGV4Q29vcmQ7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxcXG4gIHZvaWQgbWFpbigpIHsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXFxcbiAgICB2ZWM0IGltYWdlQ29sb3IgPSB0ZXh0dXJlMkQodV9pbWFnZSwgdl90ZXhDb29yZCk7ICAgICAgICAgICBcXFxuICAgIHZlYzQgbWFza0NvbG9yID0gdGV4dHVyZTJEKHVfbWFzaywgdl90ZXhDb29yZCk7ICAgICAgICAgICAgIFxcXG4gICAgaWYgKHVfYmFja2Ryb3AuYSA+IDAuMCkgeyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXFxcbiAgICAgIG1hc2tDb2xvci5yZ2IgPSBtYXNrQ29sb3IucmdiICogbWFza0NvbG9yLmEgKyAgICAgICAgICAgICBcXFxuICAgICAgICAgICAgICAgICAgICAgIHVfYmFja2Ryb3AucmdiICogKDEuMCAtIG1hc2tDb2xvci5hKTsgICAgIFxcXG4gICAgfSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXFxcbiAgICBmbG9hdCBsdW07ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcXFxuICAgIGlmICh1X3N1YnR5cGUgPT0gMCkgeyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxcXG4gICAgICBsdW0gPSBtYXNrQ29sb3IuYTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXFxcbiAgICB9IGVsc2UgeyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcXFxuICAgICAgbHVtID0gbWFza0NvbG9yLnIgKiAwLjMgKyBtYXNrQ29sb3IuZyAqIDAuNTkgKyAgICAgICAgICAgIFxcXG4gICAgICAgICAgICBtYXNrQ29sb3IuYiAqIDAuMTE7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXFxcbiAgICB9ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcXFxuICAgIGltYWdlQ29sb3IuYSAqPSBsdW07ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxcXG4gICAgaW1hZ2VDb2xvci5yZ2IgKj0gaW1hZ2VDb2xvci5hOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXFxcbiAgICBnbF9GcmFnQ29sb3IgPSBpbWFnZUNvbG9yOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcXFxuICB9ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiO1xuICB2YXIgc21hc2tDYWNoZSA9IG51bGw7XG5cbiAgZnVuY3Rpb24gaW5pdFNtYXNrR0woKSB7XG4gICAgdmFyIGNhbnZhcywgZ2w7XG4gICAgZ2VuZXJhdGVHTCgpO1xuICAgIGNhbnZhcyA9IGN1cnJlbnRDYW52YXM7XG4gICAgY3VycmVudENhbnZhcyA9IG51bGw7XG4gICAgZ2wgPSBjdXJyZW50R0w7XG4gICAgY3VycmVudEdMID0gbnVsbDtcbiAgICB2YXIgdmVydGV4U2hhZGVyID0gY3JlYXRlVmVydGV4U2hhZGVyKGdsLCBzbWFza1ZlcnRleFNoYWRlckNvZGUpO1xuICAgIHZhciBmcmFnbWVudFNoYWRlciA9IGNyZWF0ZUZyYWdtZW50U2hhZGVyKGdsLCBzbWFza0ZyYWdtZW50U2hhZGVyQ29kZSk7XG4gICAgdmFyIHByb2dyYW0gPSBjcmVhdGVQcm9ncmFtKGdsLCBbdmVydGV4U2hhZGVyLCBmcmFnbWVudFNoYWRlcl0pO1xuICAgIGdsLnVzZVByb2dyYW0ocHJvZ3JhbSk7XG4gICAgdmFyIGNhY2hlID0ge307XG4gICAgY2FjaGUuZ2wgPSBnbDtcbiAgICBjYWNoZS5jYW52YXMgPSBjYW52YXM7XG4gICAgY2FjaGUucmVzb2x1dGlvbkxvY2F0aW9uID0gZ2wuZ2V0VW5pZm9ybUxvY2F0aW9uKHByb2dyYW0sIFwidV9yZXNvbHV0aW9uXCIpO1xuICAgIGNhY2hlLnBvc2l0aW9uTG9jYXRpb24gPSBnbC5nZXRBdHRyaWJMb2NhdGlvbihwcm9ncmFtLCBcImFfcG9zaXRpb25cIik7XG4gICAgY2FjaGUuYmFja2Ryb3BMb2NhdGlvbiA9IGdsLmdldFVuaWZvcm1Mb2NhdGlvbihwcm9ncmFtLCBcInVfYmFja2Ryb3BcIik7XG4gICAgY2FjaGUuc3VidHlwZUxvY2F0aW9uID0gZ2wuZ2V0VW5pZm9ybUxvY2F0aW9uKHByb2dyYW0sIFwidV9zdWJ0eXBlXCIpO1xuICAgIHZhciB0ZXhDb29yZExvY2F0aW9uID0gZ2wuZ2V0QXR0cmliTG9jYXRpb24ocHJvZ3JhbSwgXCJhX3RleENvb3JkXCIpO1xuICAgIHZhciB0ZXhMYXllckxvY2F0aW9uID0gZ2wuZ2V0VW5pZm9ybUxvY2F0aW9uKHByb2dyYW0sIFwidV9pbWFnZVwiKTtcbiAgICB2YXIgdGV4TWFza0xvY2F0aW9uID0gZ2wuZ2V0VW5pZm9ybUxvY2F0aW9uKHByb2dyYW0sIFwidV9tYXNrXCIpO1xuICAgIHZhciB0ZXhDb29yZEJ1ZmZlciA9IGdsLmNyZWF0ZUJ1ZmZlcigpO1xuICAgIGdsLmJpbmRCdWZmZXIoZ2wuQVJSQVlfQlVGRkVSLCB0ZXhDb29yZEJ1ZmZlcik7XG4gICAgZ2wuYnVmZmVyRGF0YShnbC5BUlJBWV9CVUZGRVIsIG5ldyBGbG9hdDMyQXJyYXkoWzAuMCwgMC4wLCAxLjAsIDAuMCwgMC4wLCAxLjAsIDAuMCwgMS4wLCAxLjAsIDAuMCwgMS4wLCAxLjBdKSwgZ2wuU1RBVElDX0RSQVcpO1xuICAgIGdsLmVuYWJsZVZlcnRleEF0dHJpYkFycmF5KHRleENvb3JkTG9jYXRpb24pO1xuICAgIGdsLnZlcnRleEF0dHJpYlBvaW50ZXIodGV4Q29vcmRMb2NhdGlvbiwgMiwgZ2wuRkxPQVQsIGZhbHNlLCAwLCAwKTtcbiAgICBnbC51bmlmb3JtMWkodGV4TGF5ZXJMb2NhdGlvbiwgMCk7XG4gICAgZ2wudW5pZm9ybTFpKHRleE1hc2tMb2NhdGlvbiwgMSk7XG4gICAgc21hc2tDYWNoZSA9IGNhY2hlO1xuICB9XG5cbiAgZnVuY3Rpb24gY29tcG9zZVNNYXNrKGxheWVyLCBtYXNrLCBwcm9wZXJ0aWVzKSB7XG4gICAgdmFyIHdpZHRoID0gbGF5ZXIud2lkdGgsXG4gICAgICAgIGhlaWdodCA9IGxheWVyLmhlaWdodDtcblxuICAgIGlmICghc21hc2tDYWNoZSkge1xuICAgICAgaW5pdFNtYXNrR0woKTtcbiAgICB9XG5cbiAgICB2YXIgY2FjaGUgPSBzbWFza0NhY2hlLFxuICAgICAgICBjYW52YXMgPSBjYWNoZS5jYW52YXMsXG4gICAgICAgIGdsID0gY2FjaGUuZ2w7XG4gICAgY2FudmFzLndpZHRoID0gd2lkdGg7XG4gICAgY2FudmFzLmhlaWdodCA9IGhlaWdodDtcbiAgICBnbC52aWV3cG9ydCgwLCAwLCBnbC5kcmF3aW5nQnVmZmVyV2lkdGgsIGdsLmRyYXdpbmdCdWZmZXJIZWlnaHQpO1xuICAgIGdsLnVuaWZvcm0yZihjYWNoZS5yZXNvbHV0aW9uTG9jYXRpb24sIHdpZHRoLCBoZWlnaHQpO1xuXG4gICAgaWYgKHByb3BlcnRpZXMuYmFja2Ryb3ApIHtcbiAgICAgIGdsLnVuaWZvcm00ZihjYWNoZS5yZXNvbHV0aW9uTG9jYXRpb24sIHByb3BlcnRpZXMuYmFja2Ryb3BbMF0sIHByb3BlcnRpZXMuYmFja2Ryb3BbMV0sIHByb3BlcnRpZXMuYmFja2Ryb3BbMl0sIDEpO1xuICAgIH0gZWxzZSB7XG4gICAgICBnbC51bmlmb3JtNGYoY2FjaGUucmVzb2x1dGlvbkxvY2F0aW9uLCAwLCAwLCAwLCAwKTtcbiAgICB9XG5cbiAgICBnbC51bmlmb3JtMWkoY2FjaGUuc3VidHlwZUxvY2F0aW9uLCBwcm9wZXJ0aWVzLnN1YnR5cGUgPT09IFwiTHVtaW5vc2l0eVwiID8gMSA6IDApO1xuICAgIHZhciB0ZXh0dXJlID0gY3JlYXRlVGV4dHVyZShnbCwgbGF5ZXIsIGdsLlRFWFRVUkUwKTtcbiAgICB2YXIgbWFza1RleHR1cmUgPSBjcmVhdGVUZXh0dXJlKGdsLCBtYXNrLCBnbC5URVhUVVJFMSk7XG4gICAgdmFyIGJ1ZmZlciA9IGdsLmNyZWF0ZUJ1ZmZlcigpO1xuICAgIGdsLmJpbmRCdWZmZXIoZ2wuQVJSQVlfQlVGRkVSLCBidWZmZXIpO1xuICAgIGdsLmJ1ZmZlckRhdGEoZ2wuQVJSQVlfQlVGRkVSLCBuZXcgRmxvYXQzMkFycmF5KFswLCAwLCB3aWR0aCwgMCwgMCwgaGVpZ2h0LCAwLCBoZWlnaHQsIHdpZHRoLCAwLCB3aWR0aCwgaGVpZ2h0XSksIGdsLlNUQVRJQ19EUkFXKTtcbiAgICBnbC5lbmFibGVWZXJ0ZXhBdHRyaWJBcnJheShjYWNoZS5wb3NpdGlvbkxvY2F0aW9uKTtcbiAgICBnbC52ZXJ0ZXhBdHRyaWJQb2ludGVyKGNhY2hlLnBvc2l0aW9uTG9jYXRpb24sIDIsIGdsLkZMT0FULCBmYWxzZSwgMCwgMCk7XG4gICAgZ2wuY2xlYXJDb2xvcigwLCAwLCAwLCAwKTtcbiAgICBnbC5lbmFibGUoZ2wuQkxFTkQpO1xuICAgIGdsLmJsZW5kRnVuYyhnbC5PTkUsIGdsLk9ORV9NSU5VU19TUkNfQUxQSEEpO1xuICAgIGdsLmNsZWFyKGdsLkNPTE9SX0JVRkZFUl9CSVQpO1xuICAgIGdsLmRyYXdBcnJheXMoZ2wuVFJJQU5HTEVTLCAwLCA2KTtcbiAgICBnbC5mbHVzaCgpO1xuICAgIGdsLmRlbGV0ZVRleHR1cmUodGV4dHVyZSk7XG4gICAgZ2wuZGVsZXRlVGV4dHVyZShtYXNrVGV4dHVyZSk7XG4gICAgZ2wuZGVsZXRlQnVmZmVyKGJ1ZmZlcik7XG4gICAgcmV0dXJuIGNhbnZhcztcbiAgfVxuXG4gIHZhciBmaWd1cmVzVmVydGV4U2hhZGVyQ29kZSA9IFwiXFxcbiAgYXR0cmlidXRlIHZlYzIgYV9wb3NpdGlvbjsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcXFxuICBhdHRyaWJ1dGUgdmVjMyBhX2NvbG9yOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXFxcbiAgdW5pZm9ybSB2ZWMyIHVfcmVzb2x1dGlvbjsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcXFxuICB1bmlmb3JtIHZlYzIgdV9zY2FsZTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxcXG4gIHVuaWZvcm0gdmVjMiB1X29mZnNldDsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcXFxuICB2YXJ5aW5nIHZlYzQgdl9jb2xvcjsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXFxcbiAgdm9pZCBtYWluKCkgeyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcXFxuICAgIHZlYzIgcG9zaXRpb24gPSAoYV9wb3NpdGlvbiArIHVfb2Zmc2V0KSAqIHVfc2NhbGU7ICAgICAgICAgIFxcXG4gICAgdmVjMiBjbGlwU3BhY2UgPSAocG9zaXRpb24gLyB1X3Jlc29sdXRpb24pICogMi4wIC0gMS4wOyAgICAgXFxcbiAgICBnbF9Qb3NpdGlvbiA9IHZlYzQoY2xpcFNwYWNlICogdmVjMigxLCAtMSksIDAsIDEpOyAgICAgICAgICBcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxcXG4gICAgdl9jb2xvciA9IHZlYzQoYV9jb2xvciAvIDI1NS4wLCAxLjApOyAgICAgICAgICAgICAgICAgICAgICAgXFxcbiAgfSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIjtcbiAgdmFyIGZpZ3VyZXNGcmFnbWVudFNoYWRlckNvZGUgPSBcIlxcXG4gIHByZWNpc2lvbiBtZWRpdW1wIGZsb2F0OyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcXFxuICB2YXJ5aW5nIHZlYzQgdl9jb2xvcjsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXFxcbiAgdm9pZCBtYWluKCkgeyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcXFxuICAgIGdsX0ZyYWdDb2xvciA9IHZfY29sb3I7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxcXG4gIH0gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCI7XG4gIHZhciBmaWd1cmVzQ2FjaGUgPSBudWxsO1xuXG4gIGZ1bmN0aW9uIGluaXRGaWd1cmVzR0woKSB7XG4gICAgdmFyIGNhbnZhcywgZ2w7XG4gICAgZ2VuZXJhdGVHTCgpO1xuICAgIGNhbnZhcyA9IGN1cnJlbnRDYW52YXM7XG4gICAgY3VycmVudENhbnZhcyA9IG51bGw7XG4gICAgZ2wgPSBjdXJyZW50R0w7XG4gICAgY3VycmVudEdMID0gbnVsbDtcbiAgICB2YXIgdmVydGV4U2hhZGVyID0gY3JlYXRlVmVydGV4U2hhZGVyKGdsLCBmaWd1cmVzVmVydGV4U2hhZGVyQ29kZSk7XG4gICAgdmFyIGZyYWdtZW50U2hhZGVyID0gY3JlYXRlRnJhZ21lbnRTaGFkZXIoZ2wsIGZpZ3VyZXNGcmFnbWVudFNoYWRlckNvZGUpO1xuICAgIHZhciBwcm9ncmFtID0gY3JlYXRlUHJvZ3JhbShnbCwgW3ZlcnRleFNoYWRlciwgZnJhZ21lbnRTaGFkZXJdKTtcbiAgICBnbC51c2VQcm9ncmFtKHByb2dyYW0pO1xuICAgIHZhciBjYWNoZSA9IHt9O1xuICAgIGNhY2hlLmdsID0gZ2w7XG4gICAgY2FjaGUuY2FudmFzID0gY2FudmFzO1xuICAgIGNhY2hlLnJlc29sdXRpb25Mb2NhdGlvbiA9IGdsLmdldFVuaWZvcm1Mb2NhdGlvbihwcm9ncmFtLCBcInVfcmVzb2x1dGlvblwiKTtcbiAgICBjYWNoZS5zY2FsZUxvY2F0aW9uID0gZ2wuZ2V0VW5pZm9ybUxvY2F0aW9uKHByb2dyYW0sIFwidV9zY2FsZVwiKTtcbiAgICBjYWNoZS5vZmZzZXRMb2NhdGlvbiA9IGdsLmdldFVuaWZvcm1Mb2NhdGlvbihwcm9ncmFtLCBcInVfb2Zmc2V0XCIpO1xuICAgIGNhY2hlLnBvc2l0aW9uTG9jYXRpb24gPSBnbC5nZXRBdHRyaWJMb2NhdGlvbihwcm9ncmFtLCBcImFfcG9zaXRpb25cIik7XG4gICAgY2FjaGUuY29sb3JMb2NhdGlvbiA9IGdsLmdldEF0dHJpYkxvY2F0aW9uKHByb2dyYW0sIFwiYV9jb2xvclwiKTtcbiAgICBmaWd1cmVzQ2FjaGUgPSBjYWNoZTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGRyYXdGaWd1cmVzKHdpZHRoLCBoZWlnaHQsIGJhY2tncm91bmRDb2xvciwgZmlndXJlcywgY29udGV4dCkge1xuICAgIGlmICghZmlndXJlc0NhY2hlKSB7XG4gICAgICBpbml0RmlndXJlc0dMKCk7XG4gICAgfVxuXG4gICAgdmFyIGNhY2hlID0gZmlndXJlc0NhY2hlLFxuICAgICAgICBjYW52YXMgPSBjYWNoZS5jYW52YXMsXG4gICAgICAgIGdsID0gY2FjaGUuZ2w7XG4gICAgY2FudmFzLndpZHRoID0gd2lkdGg7XG4gICAgY2FudmFzLmhlaWdodCA9IGhlaWdodDtcbiAgICBnbC52aWV3cG9ydCgwLCAwLCBnbC5kcmF3aW5nQnVmZmVyV2lkdGgsIGdsLmRyYXdpbmdCdWZmZXJIZWlnaHQpO1xuICAgIGdsLnVuaWZvcm0yZihjYWNoZS5yZXNvbHV0aW9uTG9jYXRpb24sIHdpZHRoLCBoZWlnaHQpO1xuICAgIHZhciBjb3VudCA9IDA7XG4gICAgdmFyIGksIGlpLCByb3dzO1xuXG4gICAgZm9yIChpID0gMCwgaWkgPSBmaWd1cmVzLmxlbmd0aDsgaSA8IGlpOyBpKyspIHtcbiAgICAgIHN3aXRjaCAoZmlndXJlc1tpXS50eXBlKSB7XG4gICAgICAgIGNhc2UgXCJsYXR0aWNlXCI6XG4gICAgICAgICAgcm93cyA9IGZpZ3VyZXNbaV0uY29vcmRzLmxlbmd0aCAvIGZpZ3VyZXNbaV0udmVydGljZXNQZXJSb3cgfCAwO1xuICAgICAgICAgIGNvdW50ICs9IChyb3dzIC0gMSkgKiAoZmlndXJlc1tpXS52ZXJ0aWNlc1BlclJvdyAtIDEpICogNjtcbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlIFwidHJpYW5nbGVzXCI6XG4gICAgICAgICAgY291bnQgKz0gZmlndXJlc1tpXS5jb29yZHMubGVuZ3RoO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cblxuICAgIHZhciBjb29yZHMgPSBuZXcgRmxvYXQzMkFycmF5KGNvdW50ICogMik7XG4gICAgdmFyIGNvbG9ycyA9IG5ldyBVaW50OEFycmF5KGNvdW50ICogMyk7XG4gICAgdmFyIGNvb3Jkc01hcCA9IGNvbnRleHQuY29vcmRzLFxuICAgICAgICBjb2xvcnNNYXAgPSBjb250ZXh0LmNvbG9ycztcbiAgICB2YXIgcEluZGV4ID0gMCxcbiAgICAgICAgY0luZGV4ID0gMDtcblxuICAgIGZvciAoaSA9IDAsIGlpID0gZmlndXJlcy5sZW5ndGg7IGkgPCBpaTsgaSsrKSB7XG4gICAgICB2YXIgZmlndXJlID0gZmlndXJlc1tpXSxcbiAgICAgICAgICBwcyA9IGZpZ3VyZS5jb29yZHMsXG4gICAgICAgICAgY3MgPSBmaWd1cmUuY29sb3JzO1xuXG4gICAgICBzd2l0Y2ggKGZpZ3VyZS50eXBlKSB7XG4gICAgICAgIGNhc2UgXCJsYXR0aWNlXCI6XG4gICAgICAgICAgdmFyIGNvbHMgPSBmaWd1cmUudmVydGljZXNQZXJSb3c7XG4gICAgICAgICAgcm93cyA9IHBzLmxlbmd0aCAvIGNvbHMgfCAwO1xuXG4gICAgICAgICAgZm9yICh2YXIgcm93ID0gMTsgcm93IDwgcm93czsgcm93KyspIHtcbiAgICAgICAgICAgIHZhciBvZmZzZXQgPSByb3cgKiBjb2xzICsgMTtcblxuICAgICAgICAgICAgZm9yICh2YXIgY29sID0gMTsgY29sIDwgY29sczsgY29sKyssIG9mZnNldCsrKSB7XG4gICAgICAgICAgICAgIGNvb3Jkc1twSW5kZXhdID0gY29vcmRzTWFwW3BzW29mZnNldCAtIGNvbHMgLSAxXV07XG4gICAgICAgICAgICAgIGNvb3Jkc1twSW5kZXggKyAxXSA9IGNvb3Jkc01hcFtwc1tvZmZzZXQgLSBjb2xzIC0gMV0gKyAxXTtcbiAgICAgICAgICAgICAgY29vcmRzW3BJbmRleCArIDJdID0gY29vcmRzTWFwW3BzW29mZnNldCAtIGNvbHNdXTtcbiAgICAgICAgICAgICAgY29vcmRzW3BJbmRleCArIDNdID0gY29vcmRzTWFwW3BzW29mZnNldCAtIGNvbHNdICsgMV07XG4gICAgICAgICAgICAgIGNvb3Jkc1twSW5kZXggKyA0XSA9IGNvb3Jkc01hcFtwc1tvZmZzZXQgLSAxXV07XG4gICAgICAgICAgICAgIGNvb3Jkc1twSW5kZXggKyA1XSA9IGNvb3Jkc01hcFtwc1tvZmZzZXQgLSAxXSArIDFdO1xuICAgICAgICAgICAgICBjb2xvcnNbY0luZGV4XSA9IGNvbG9yc01hcFtjc1tvZmZzZXQgLSBjb2xzIC0gMV1dO1xuICAgICAgICAgICAgICBjb2xvcnNbY0luZGV4ICsgMV0gPSBjb2xvcnNNYXBbY3Nbb2Zmc2V0IC0gY29scyAtIDFdICsgMV07XG4gICAgICAgICAgICAgIGNvbG9yc1tjSW5kZXggKyAyXSA9IGNvbG9yc01hcFtjc1tvZmZzZXQgLSBjb2xzIC0gMV0gKyAyXTtcbiAgICAgICAgICAgICAgY29sb3JzW2NJbmRleCArIDNdID0gY29sb3JzTWFwW2NzW29mZnNldCAtIGNvbHNdXTtcbiAgICAgICAgICAgICAgY29sb3JzW2NJbmRleCArIDRdID0gY29sb3JzTWFwW2NzW29mZnNldCAtIGNvbHNdICsgMV07XG4gICAgICAgICAgICAgIGNvbG9yc1tjSW5kZXggKyA1XSA9IGNvbG9yc01hcFtjc1tvZmZzZXQgLSBjb2xzXSArIDJdO1xuICAgICAgICAgICAgICBjb2xvcnNbY0luZGV4ICsgNl0gPSBjb2xvcnNNYXBbY3Nbb2Zmc2V0IC0gMV1dO1xuICAgICAgICAgICAgICBjb2xvcnNbY0luZGV4ICsgN10gPSBjb2xvcnNNYXBbY3Nbb2Zmc2V0IC0gMV0gKyAxXTtcbiAgICAgICAgICAgICAgY29sb3JzW2NJbmRleCArIDhdID0gY29sb3JzTWFwW2NzW29mZnNldCAtIDFdICsgMl07XG4gICAgICAgICAgICAgIGNvb3Jkc1twSW5kZXggKyA2XSA9IGNvb3Jkc1twSW5kZXggKyAyXTtcbiAgICAgICAgICAgICAgY29vcmRzW3BJbmRleCArIDddID0gY29vcmRzW3BJbmRleCArIDNdO1xuICAgICAgICAgICAgICBjb29yZHNbcEluZGV4ICsgOF0gPSBjb29yZHNbcEluZGV4ICsgNF07XG4gICAgICAgICAgICAgIGNvb3Jkc1twSW5kZXggKyA5XSA9IGNvb3Jkc1twSW5kZXggKyA1XTtcbiAgICAgICAgICAgICAgY29vcmRzW3BJbmRleCArIDEwXSA9IGNvb3Jkc01hcFtwc1tvZmZzZXRdXTtcbiAgICAgICAgICAgICAgY29vcmRzW3BJbmRleCArIDExXSA9IGNvb3Jkc01hcFtwc1tvZmZzZXRdICsgMV07XG4gICAgICAgICAgICAgIGNvbG9yc1tjSW5kZXggKyA5XSA9IGNvbG9yc1tjSW5kZXggKyAzXTtcbiAgICAgICAgICAgICAgY29sb3JzW2NJbmRleCArIDEwXSA9IGNvbG9yc1tjSW5kZXggKyA0XTtcbiAgICAgICAgICAgICAgY29sb3JzW2NJbmRleCArIDExXSA9IGNvbG9yc1tjSW5kZXggKyA1XTtcbiAgICAgICAgICAgICAgY29sb3JzW2NJbmRleCArIDEyXSA9IGNvbG9yc1tjSW5kZXggKyA2XTtcbiAgICAgICAgICAgICAgY29sb3JzW2NJbmRleCArIDEzXSA9IGNvbG9yc1tjSW5kZXggKyA3XTtcbiAgICAgICAgICAgICAgY29sb3JzW2NJbmRleCArIDE0XSA9IGNvbG9yc1tjSW5kZXggKyA4XTtcbiAgICAgICAgICAgICAgY29sb3JzW2NJbmRleCArIDE1XSA9IGNvbG9yc01hcFtjc1tvZmZzZXRdXTtcbiAgICAgICAgICAgICAgY29sb3JzW2NJbmRleCArIDE2XSA9IGNvbG9yc01hcFtjc1tvZmZzZXRdICsgMV07XG4gICAgICAgICAgICAgIGNvbG9yc1tjSW5kZXggKyAxN10gPSBjb2xvcnNNYXBbY3Nbb2Zmc2V0XSArIDJdO1xuICAgICAgICAgICAgICBwSW5kZXggKz0gMTI7XG4gICAgICAgICAgICAgIGNJbmRleCArPSAxODtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlIFwidHJpYW5nbGVzXCI6XG4gICAgICAgICAgZm9yICh2YXIgaiA9IDAsIGpqID0gcHMubGVuZ3RoOyBqIDwgamo7IGorKykge1xuICAgICAgICAgICAgY29vcmRzW3BJbmRleF0gPSBjb29yZHNNYXBbcHNbal1dO1xuICAgICAgICAgICAgY29vcmRzW3BJbmRleCArIDFdID0gY29vcmRzTWFwW3BzW2pdICsgMV07XG4gICAgICAgICAgICBjb2xvcnNbY0luZGV4XSA9IGNvbG9yc01hcFtjc1tqXV07XG4gICAgICAgICAgICBjb2xvcnNbY0luZGV4ICsgMV0gPSBjb2xvcnNNYXBbY3Nbal0gKyAxXTtcbiAgICAgICAgICAgIGNvbG9yc1tjSW5kZXggKyAyXSA9IGNvbG9yc01hcFtjc1tqXSArIDJdO1xuICAgICAgICAgICAgcEluZGV4ICs9IDI7XG4gICAgICAgICAgICBjSW5kZXggKz0gMztcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoYmFja2dyb3VuZENvbG9yKSB7XG4gICAgICBnbC5jbGVhckNvbG9yKGJhY2tncm91bmRDb2xvclswXSAvIDI1NSwgYmFja2dyb3VuZENvbG9yWzFdIC8gMjU1LCBiYWNrZ3JvdW5kQ29sb3JbMl0gLyAyNTUsIDEuMCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGdsLmNsZWFyQ29sb3IoMCwgMCwgMCwgMCk7XG4gICAgfVxuXG4gICAgZ2wuY2xlYXIoZ2wuQ09MT1JfQlVGRkVSX0JJVCk7XG4gICAgdmFyIGNvb3Jkc0J1ZmZlciA9IGdsLmNyZWF0ZUJ1ZmZlcigpO1xuICAgIGdsLmJpbmRCdWZmZXIoZ2wuQVJSQVlfQlVGRkVSLCBjb29yZHNCdWZmZXIpO1xuICAgIGdsLmJ1ZmZlckRhdGEoZ2wuQVJSQVlfQlVGRkVSLCBjb29yZHMsIGdsLlNUQVRJQ19EUkFXKTtcbiAgICBnbC5lbmFibGVWZXJ0ZXhBdHRyaWJBcnJheShjYWNoZS5wb3NpdGlvbkxvY2F0aW9uKTtcbiAgICBnbC52ZXJ0ZXhBdHRyaWJQb2ludGVyKGNhY2hlLnBvc2l0aW9uTG9jYXRpb24sIDIsIGdsLkZMT0FULCBmYWxzZSwgMCwgMCk7XG4gICAgdmFyIGNvbG9yc0J1ZmZlciA9IGdsLmNyZWF0ZUJ1ZmZlcigpO1xuICAgIGdsLmJpbmRCdWZmZXIoZ2wuQVJSQVlfQlVGRkVSLCBjb2xvcnNCdWZmZXIpO1xuICAgIGdsLmJ1ZmZlckRhdGEoZ2wuQVJSQVlfQlVGRkVSLCBjb2xvcnMsIGdsLlNUQVRJQ19EUkFXKTtcbiAgICBnbC5lbmFibGVWZXJ0ZXhBdHRyaWJBcnJheShjYWNoZS5jb2xvckxvY2F0aW9uKTtcbiAgICBnbC52ZXJ0ZXhBdHRyaWJQb2ludGVyKGNhY2hlLmNvbG9yTG9jYXRpb24sIDMsIGdsLlVOU0lHTkVEX0JZVEUsIGZhbHNlLCAwLCAwKTtcbiAgICBnbC51bmlmb3JtMmYoY2FjaGUuc2NhbGVMb2NhdGlvbiwgY29udGV4dC5zY2FsZVgsIGNvbnRleHQuc2NhbGVZKTtcbiAgICBnbC51bmlmb3JtMmYoY2FjaGUub2Zmc2V0TG9jYXRpb24sIGNvbnRleHQub2Zmc2V0WCwgY29udGV4dC5vZmZzZXRZKTtcbiAgICBnbC5kcmF3QXJyYXlzKGdsLlRSSUFOR0xFUywgMCwgY291bnQpO1xuICAgIGdsLmZsdXNoKCk7XG4gICAgZ2wuZGVsZXRlQnVmZmVyKGNvb3Jkc0J1ZmZlcik7XG4gICAgZ2wuZGVsZXRlQnVmZmVyKGNvbG9yc0J1ZmZlcik7XG4gICAgcmV0dXJuIGNhbnZhcztcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgdHJ5SW5pdEdMKCkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgZ2VuZXJhdGVHTCgpO1xuICAgICAgICByZXR1cm4gISFjdXJyZW50R0w7XG4gICAgICB9IGNhdGNoIChleCkge31cblxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH0sXG5cbiAgICBjb21wb3NlU01hc2ssXG4gICAgZHJhd0ZpZ3VyZXMsXG5cbiAgICBjbGVhbnVwKCkge1xuICAgICAgaWYgKHNtYXNrQ2FjaGUgJiYgc21hc2tDYWNoZS5jYW52YXMpIHtcbiAgICAgICAgc21hc2tDYWNoZS5jYW52YXMud2lkdGggPSAwO1xuICAgICAgICBzbWFza0NhY2hlLmNhbnZhcy5oZWlnaHQgPSAwO1xuICAgICAgfVxuXG4gICAgICBpZiAoZmlndXJlc0NhY2hlICYmIGZpZ3VyZXNDYWNoZS5jYW52YXMpIHtcbiAgICAgICAgZmlndXJlc0NhY2hlLmNhbnZhcy53aWR0aCA9IDA7XG4gICAgICAgIGZpZ3VyZXNDYWNoZS5jYW52YXMuaGVpZ2h0ID0gMDtcbiAgICAgIH1cblxuICAgICAgc21hc2tDYWNoZSA9IG51bGw7XG4gICAgICBmaWd1cmVzQ2FjaGUgPSBudWxsO1xuICAgIH1cblxuICB9O1xufSgpO1xuXG4vKioqLyB9KSxcbi8qIDE2ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dfcGRmanNfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLkFubm90YXRpb25MYXllciA9IHZvaWQgMDtcblxudmFyIF9kaXNwbGF5X3V0aWxzID0gX193X3BkZmpzX3JlcXVpcmVfXygxKTtcblxudmFyIF91dGlsID0gX193X3BkZmpzX3JlcXVpcmVfXygyKTtcblxuY2xhc3MgQW5ub3RhdGlvbkVsZW1lbnRGYWN0b3J5IHtcbiAgc3RhdGljIGNyZWF0ZShwYXJhbWV0ZXJzKSB7XG4gICAgY29uc3Qgc3VidHlwZSA9IHBhcmFtZXRlcnMuZGF0YS5hbm5vdGF0aW9uVHlwZTtcblxuICAgIHN3aXRjaCAoc3VidHlwZSkge1xuICAgICAgY2FzZSBfdXRpbC5Bbm5vdGF0aW9uVHlwZS5MSU5LOlxuICAgICAgICByZXR1cm4gbmV3IExpbmtBbm5vdGF0aW9uRWxlbWVudChwYXJhbWV0ZXJzKTtcblxuICAgICAgY2FzZSBfdXRpbC5Bbm5vdGF0aW9uVHlwZS5URVhUOlxuICAgICAgICByZXR1cm4gbmV3IFRleHRBbm5vdGF0aW9uRWxlbWVudChwYXJhbWV0ZXJzKTtcblxuICAgICAgY2FzZSBfdXRpbC5Bbm5vdGF0aW9uVHlwZS5XSURHRVQ6XG4gICAgICAgIGNvbnN0IGZpZWxkVHlwZSA9IHBhcmFtZXRlcnMuZGF0YS5maWVsZFR5cGU7XG5cbiAgICAgICAgc3dpdGNoIChmaWVsZFR5cGUpIHtcbiAgICAgICAgICBjYXNlIFwiVHhcIjpcbiAgICAgICAgICAgIHJldHVybiBuZXcgVGV4dFdpZGdldEFubm90YXRpb25FbGVtZW50KHBhcmFtZXRlcnMpO1xuXG4gICAgICAgICAgY2FzZSBcIkJ0blwiOlxuICAgICAgICAgICAgaWYgKHBhcmFtZXRlcnMuZGF0YS5yYWRpb0J1dHRvbikge1xuICAgICAgICAgICAgICByZXR1cm4gbmV3IFJhZGlvQnV0dG9uV2lkZ2V0QW5ub3RhdGlvbkVsZW1lbnQocGFyYW1ldGVycyk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHBhcmFtZXRlcnMuZGF0YS5jaGVja0JveCkge1xuICAgICAgICAgICAgICByZXR1cm4gbmV3IENoZWNrYm94V2lkZ2V0QW5ub3RhdGlvbkVsZW1lbnQocGFyYW1ldGVycyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiBuZXcgUHVzaEJ1dHRvbldpZGdldEFubm90YXRpb25FbGVtZW50KHBhcmFtZXRlcnMpO1xuXG4gICAgICAgICAgY2FzZSBcIkNoXCI6XG4gICAgICAgICAgICByZXR1cm4gbmV3IENob2ljZVdpZGdldEFubm90YXRpb25FbGVtZW50KHBhcmFtZXRlcnMpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG5ldyBXaWRnZXRBbm5vdGF0aW9uRWxlbWVudChwYXJhbWV0ZXJzKTtcblxuICAgICAgY2FzZSBfdXRpbC5Bbm5vdGF0aW9uVHlwZS5QT1BVUDpcbiAgICAgICAgcmV0dXJuIG5ldyBQb3B1cEFubm90YXRpb25FbGVtZW50KHBhcmFtZXRlcnMpO1xuXG4gICAgICBjYXNlIF91dGlsLkFubm90YXRpb25UeXBlLkZSRUVURVhUOlxuICAgICAgICByZXR1cm4gbmV3IEZyZWVUZXh0QW5ub3RhdGlvbkVsZW1lbnQocGFyYW1ldGVycyk7XG5cbiAgICAgIGNhc2UgX3V0aWwuQW5ub3RhdGlvblR5cGUuTElORTpcbiAgICAgICAgcmV0dXJuIG5ldyBMaW5lQW5ub3RhdGlvbkVsZW1lbnQocGFyYW1ldGVycyk7XG5cbiAgICAgIGNhc2UgX3V0aWwuQW5ub3RhdGlvblR5cGUuU1FVQVJFOlxuICAgICAgICByZXR1cm4gbmV3IFNxdWFyZUFubm90YXRpb25FbGVtZW50KHBhcmFtZXRlcnMpO1xuXG4gICAgICBjYXNlIF91dGlsLkFubm90YXRpb25UeXBlLkNJUkNMRTpcbiAgICAgICAgcmV0dXJuIG5ldyBDaXJjbGVBbm5vdGF0aW9uRWxlbWVudChwYXJhbWV0ZXJzKTtcblxuICAgICAgY2FzZSBfdXRpbC5Bbm5vdGF0aW9uVHlwZS5QT0xZTElORTpcbiAgICAgICAgcmV0dXJuIG5ldyBQb2x5bGluZUFubm90YXRpb25FbGVtZW50KHBhcmFtZXRlcnMpO1xuXG4gICAgICBjYXNlIF91dGlsLkFubm90YXRpb25UeXBlLkNBUkVUOlxuICAgICAgICByZXR1cm4gbmV3IENhcmV0QW5ub3RhdGlvbkVsZW1lbnQocGFyYW1ldGVycyk7XG5cbiAgICAgIGNhc2UgX3V0aWwuQW5ub3RhdGlvblR5cGUuSU5LOlxuICAgICAgICByZXR1cm4gbmV3IElua0Fubm90YXRpb25FbGVtZW50KHBhcmFtZXRlcnMpO1xuXG4gICAgICBjYXNlIF91dGlsLkFubm90YXRpb25UeXBlLlBPTFlHT046XG4gICAgICAgIHJldHVybiBuZXcgUG9seWdvbkFubm90YXRpb25FbGVtZW50KHBhcmFtZXRlcnMpO1xuXG4gICAgICBjYXNlIF91dGlsLkFubm90YXRpb25UeXBlLkhJR0hMSUdIVDpcbiAgICAgICAgcmV0dXJuIG5ldyBIaWdobGlnaHRBbm5vdGF0aW9uRWxlbWVudChwYXJhbWV0ZXJzKTtcblxuICAgICAgY2FzZSBfdXRpbC5Bbm5vdGF0aW9uVHlwZS5VTkRFUkxJTkU6XG4gICAgICAgIHJldHVybiBuZXcgVW5kZXJsaW5lQW5ub3RhdGlvbkVsZW1lbnQocGFyYW1ldGVycyk7XG5cbiAgICAgIGNhc2UgX3V0aWwuQW5ub3RhdGlvblR5cGUuU1FVSUdHTFk6XG4gICAgICAgIHJldHVybiBuZXcgU3F1aWdnbHlBbm5vdGF0aW9uRWxlbWVudChwYXJhbWV0ZXJzKTtcblxuICAgICAgY2FzZSBfdXRpbC5Bbm5vdGF0aW9uVHlwZS5TVFJJS0VPVVQ6XG4gICAgICAgIHJldHVybiBuZXcgU3RyaWtlT3V0QW5ub3RhdGlvbkVsZW1lbnQocGFyYW1ldGVycyk7XG5cbiAgICAgIGNhc2UgX3V0aWwuQW5ub3RhdGlvblR5cGUuU1RBTVA6XG4gICAgICAgIHJldHVybiBuZXcgU3RhbXBBbm5vdGF0aW9uRWxlbWVudChwYXJhbWV0ZXJzKTtcblxuICAgICAgY2FzZSBfdXRpbC5Bbm5vdGF0aW9uVHlwZS5GSUxFQVRUQUNITUVOVDpcbiAgICAgICAgcmV0dXJuIG5ldyBGaWxlQXR0YWNobWVudEFubm90YXRpb25FbGVtZW50KHBhcmFtZXRlcnMpO1xuXG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gbmV3IEFubm90YXRpb25FbGVtZW50KHBhcmFtZXRlcnMpO1xuICAgIH1cbiAgfVxuXG59XG5cbmNsYXNzIEFubm90YXRpb25FbGVtZW50IHtcbiAgY29uc3RydWN0b3IocGFyYW1ldGVycywgaXNSZW5kZXJhYmxlID0gZmFsc2UsIGlnbm9yZUJvcmRlciA9IGZhbHNlKSB7XG4gICAgdGhpcy5pc1JlbmRlcmFibGUgPSBpc1JlbmRlcmFibGU7XG4gICAgdGhpcy5kYXRhID0gcGFyYW1ldGVycy5kYXRhO1xuICAgIHRoaXMubGF5ZXIgPSBwYXJhbWV0ZXJzLmxheWVyO1xuICAgIHRoaXMucGFnZSA9IHBhcmFtZXRlcnMucGFnZTtcbiAgICB0aGlzLnZpZXdwb3J0ID0gcGFyYW1ldGVycy52aWV3cG9ydDtcbiAgICB0aGlzLmxpbmtTZXJ2aWNlID0gcGFyYW1ldGVycy5saW5rU2VydmljZTtcbiAgICB0aGlzLmRvd25sb2FkTWFuYWdlciA9IHBhcmFtZXRlcnMuZG93bmxvYWRNYW5hZ2VyO1xuICAgIHRoaXMuaW1hZ2VSZXNvdXJjZXNQYXRoID0gcGFyYW1ldGVycy5pbWFnZVJlc291cmNlc1BhdGg7XG4gICAgdGhpcy5yZW5kZXJJbnRlcmFjdGl2ZUZvcm1zID0gcGFyYW1ldGVycy5yZW5kZXJJbnRlcmFjdGl2ZUZvcm1zO1xuICAgIHRoaXMuc3ZnRmFjdG9yeSA9IHBhcmFtZXRlcnMuc3ZnRmFjdG9yeTtcblxuICAgIGlmIChpc1JlbmRlcmFibGUpIHtcbiAgICAgIHRoaXMuY29udGFpbmVyID0gdGhpcy5fY3JlYXRlQ29udGFpbmVyKGlnbm9yZUJvcmRlcik7XG4gICAgfVxuICB9XG5cbiAgX2NyZWF0ZUNvbnRhaW5lcihpZ25vcmVCb3JkZXIgPSBmYWxzZSkge1xuICAgIGNvbnN0IGRhdGEgPSB0aGlzLmRhdGEsXG4gICAgICAgICAgcGFnZSA9IHRoaXMucGFnZSxcbiAgICAgICAgICB2aWV3cG9ydCA9IHRoaXMudmlld3BvcnQ7XG4gICAgY29uc3QgY29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInNlY3Rpb25cIik7XG4gICAgbGV0IHdpZHRoID0gZGF0YS5yZWN0WzJdIC0gZGF0YS5yZWN0WzBdO1xuICAgIGxldCBoZWlnaHQgPSBkYXRhLnJlY3RbM10gLSBkYXRhLnJlY3RbMV07XG4gICAgY29udGFpbmVyLnNldEF0dHJpYnV0ZShcImRhdGEtYW5ub3RhdGlvbi1pZFwiLCBkYXRhLmlkKTtcblxuICAgIGNvbnN0IHJlY3QgPSBfdXRpbC5VdGlsLm5vcm1hbGl6ZVJlY3QoW2RhdGEucmVjdFswXSwgcGFnZS52aWV3WzNdIC0gZGF0YS5yZWN0WzFdICsgcGFnZS52aWV3WzFdLCBkYXRhLnJlY3RbMl0sIHBhZ2Uudmlld1szXSAtIGRhdGEucmVjdFszXSArIHBhZ2Uudmlld1sxXV0pO1xuXG4gICAgY29udGFpbmVyLnN0eWxlLnRyYW5zZm9ybSA9IGBtYXRyaXgoJHt2aWV3cG9ydC50cmFuc2Zvcm0uam9pbihcIixcIil9KWA7XG4gICAgY29udGFpbmVyLnN0eWxlLnRyYW5zZm9ybU9yaWdpbiA9IGAtJHtyZWN0WzBdfXB4IC0ke3JlY3RbMV19cHhgO1xuXG4gICAgaWYgKCFpZ25vcmVCb3JkZXIgJiYgZGF0YS5ib3JkZXJTdHlsZS53aWR0aCA+IDApIHtcbiAgICAgIGNvbnRhaW5lci5zdHlsZS5ib3JkZXJXaWR0aCA9IGAke2RhdGEuYm9yZGVyU3R5bGUud2lkdGh9cHhgO1xuXG4gICAgICBpZiAoZGF0YS5ib3JkZXJTdHlsZS5zdHlsZSAhPT0gX3V0aWwuQW5ub3RhdGlvbkJvcmRlclN0eWxlVHlwZS5VTkRFUkxJTkUpIHtcbiAgICAgICAgd2lkdGggPSB3aWR0aCAtIDIgKiBkYXRhLmJvcmRlclN0eWxlLndpZHRoO1xuICAgICAgICBoZWlnaHQgPSBoZWlnaHQgLSAyICogZGF0YS5ib3JkZXJTdHlsZS53aWR0aDtcbiAgICAgIH1cblxuICAgICAgY29uc3QgaG9yaXpvbnRhbFJhZGl1cyA9IGRhdGEuYm9yZGVyU3R5bGUuaG9yaXpvbnRhbENvcm5lclJhZGl1cztcbiAgICAgIGNvbnN0IHZlcnRpY2FsUmFkaXVzID0gZGF0YS5ib3JkZXJTdHlsZS52ZXJ0aWNhbENvcm5lclJhZGl1cztcblxuICAgICAgaWYgKGhvcml6b250YWxSYWRpdXMgPiAwIHx8IHZlcnRpY2FsUmFkaXVzID4gMCkge1xuICAgICAgICBjb25zdCByYWRpdXMgPSBgJHtob3Jpem9udGFsUmFkaXVzfXB4IC8gJHt2ZXJ0aWNhbFJhZGl1c31weGA7XG4gICAgICAgIGNvbnRhaW5lci5zdHlsZS5ib3JkZXJSYWRpdXMgPSByYWRpdXM7XG4gICAgICB9XG5cbiAgICAgIHN3aXRjaCAoZGF0YS5ib3JkZXJTdHlsZS5zdHlsZSkge1xuICAgICAgICBjYXNlIF91dGlsLkFubm90YXRpb25Cb3JkZXJTdHlsZVR5cGUuU09MSUQ6XG4gICAgICAgICAgY29udGFpbmVyLnN0eWxlLmJvcmRlclN0eWxlID0gXCJzb2xpZFwiO1xuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgX3V0aWwuQW5ub3RhdGlvbkJvcmRlclN0eWxlVHlwZS5EQVNIRUQ6XG4gICAgICAgICAgY29udGFpbmVyLnN0eWxlLmJvcmRlclN0eWxlID0gXCJkYXNoZWRcIjtcbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlIF91dGlsLkFubm90YXRpb25Cb3JkZXJTdHlsZVR5cGUuQkVWRUxFRDpcbiAgICAgICAgICAoMCwgX3V0aWwud2FybikoXCJVbmltcGxlbWVudGVkIGJvcmRlciBzdHlsZTogYmV2ZWxlZFwiKTtcbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlIF91dGlsLkFubm90YXRpb25Cb3JkZXJTdHlsZVR5cGUuSU5TRVQ6XG4gICAgICAgICAgKDAsIF91dGlsLndhcm4pKFwiVW5pbXBsZW1lbnRlZCBib3JkZXIgc3R5bGU6IGluc2V0XCIpO1xuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgX3V0aWwuQW5ub3RhdGlvbkJvcmRlclN0eWxlVHlwZS5VTkRFUkxJTkU6XG4gICAgICAgICAgY29udGFpbmVyLnN0eWxlLmJvcmRlckJvdHRvbVN0eWxlID0gXCJzb2xpZFwiO1xuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgYnJlYWs7XG4gICAgICB9XG5cbiAgICAgIGlmIChkYXRhLmNvbG9yKSB7XG4gICAgICAgIGNvbnRhaW5lci5zdHlsZS5ib3JkZXJDb2xvciA9IF91dGlsLlV0aWwubWFrZUNzc1JnYihkYXRhLmNvbG9yWzBdIHwgMCwgZGF0YS5jb2xvclsxXSB8IDAsIGRhdGEuY29sb3JbMl0gfCAwKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnRhaW5lci5zdHlsZS5ib3JkZXJXaWR0aCA9IDA7XG4gICAgICB9XG4gICAgfVxuXG4gICAgY29udGFpbmVyLnN0eWxlLmxlZnQgPSBgJHtyZWN0WzBdfXB4YDtcbiAgICBjb250YWluZXIuc3R5bGUudG9wID0gYCR7cmVjdFsxXX1weGA7XG4gICAgY29udGFpbmVyLnN0eWxlLndpZHRoID0gYCR7d2lkdGh9cHhgO1xuICAgIGNvbnRhaW5lci5zdHlsZS5oZWlnaHQgPSBgJHtoZWlnaHR9cHhgO1xuICAgIHJldHVybiBjb250YWluZXI7XG4gIH1cblxuICBfY3JlYXRlUG9wdXAoY29udGFpbmVyLCB0cmlnZ2VyLCBkYXRhKSB7XG4gICAgaWYgKCF0cmlnZ2VyKSB7XG4gICAgICB0cmlnZ2VyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICAgIHRyaWdnZXIuc3R5bGUuaGVpZ2h0ID0gY29udGFpbmVyLnN0eWxlLmhlaWdodDtcbiAgICAgIHRyaWdnZXIuc3R5bGUud2lkdGggPSBjb250YWluZXIuc3R5bGUud2lkdGg7XG4gICAgICBjb250YWluZXIuYXBwZW5kQ2hpbGQodHJpZ2dlcik7XG4gICAgfVxuXG4gICAgY29uc3QgcG9wdXBFbGVtZW50ID0gbmV3IFBvcHVwRWxlbWVudCh7XG4gICAgICBjb250YWluZXIsXG4gICAgICB0cmlnZ2VyLFxuICAgICAgY29sb3I6IGRhdGEuY29sb3IsXG4gICAgICB0aXRsZTogZGF0YS50aXRsZSxcbiAgICAgIG1vZGlmaWNhdGlvbkRhdGU6IGRhdGEubW9kaWZpY2F0aW9uRGF0ZSxcbiAgICAgIGNvbnRlbnRzOiBkYXRhLmNvbnRlbnRzLFxuICAgICAgaGlkZVdyYXBwZXI6IHRydWVcbiAgICB9KTtcbiAgICBjb25zdCBwb3B1cCA9IHBvcHVwRWxlbWVudC5yZW5kZXIoKTtcbiAgICBwb3B1cC5zdHlsZS5sZWZ0ID0gY29udGFpbmVyLnN0eWxlLndpZHRoO1xuICAgIGNvbnRhaW5lci5hcHBlbmRDaGlsZChwb3B1cCk7XG4gIH1cblxuICByZW5kZXIoKSB7XG4gICAgKDAsIF91dGlsLnVucmVhY2hhYmxlKShcIkFic3RyYWN0IG1ldGhvZCBgQW5ub3RhdGlvbkVsZW1lbnQucmVuZGVyYCBjYWxsZWRcIik7XG4gIH1cblxufVxuXG5jbGFzcyBMaW5rQW5ub3RhdGlvbkVsZW1lbnQgZXh0ZW5kcyBBbm5vdGF0aW9uRWxlbWVudCB7XG4gIGNvbnN0cnVjdG9yKHBhcmFtZXRlcnMpIHtcbiAgICBjb25zdCBpc1JlbmRlcmFibGUgPSAhIShwYXJhbWV0ZXJzLmRhdGEudXJsIHx8IHBhcmFtZXRlcnMuZGF0YS5kZXN0IHx8IHBhcmFtZXRlcnMuZGF0YS5hY3Rpb24pO1xuICAgIHN1cGVyKHBhcmFtZXRlcnMsIGlzUmVuZGVyYWJsZSk7XG4gIH1cblxuICByZW5kZXIoKSB7XG4gICAgdGhpcy5jb250YWluZXIuY2xhc3NOYW1lID0gXCJsaW5rQW5ub3RhdGlvblwiO1xuICAgIGNvbnN0IHtcbiAgICAgIGRhdGEsXG4gICAgICBsaW5rU2VydmljZVxuICAgIH0gPSB0aGlzO1xuICAgIGNvbnN0IGxpbmsgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiYVwiKTtcblxuICAgIGlmIChkYXRhLnVybCkge1xuICAgICAgKDAsIF9kaXNwbGF5X3V0aWxzLmFkZExpbmtBdHRyaWJ1dGVzKShsaW5rLCB7XG4gICAgICAgIHVybDogZGF0YS51cmwsXG4gICAgICAgIHRhcmdldDogZGF0YS5uZXdXaW5kb3cgPyBfZGlzcGxheV91dGlscy5MaW5rVGFyZ2V0LkJMQU5LIDogbGlua1NlcnZpY2UuZXh0ZXJuYWxMaW5rVGFyZ2V0LFxuICAgICAgICByZWw6IGxpbmtTZXJ2aWNlLmV4dGVybmFsTGlua1JlbCxcbiAgICAgICAgZW5hYmxlZDogbGlua1NlcnZpY2UuZXh0ZXJuYWxMaW5rRW5hYmxlZFxuICAgICAgfSk7XG4gICAgfSBlbHNlIGlmIChkYXRhLmFjdGlvbikge1xuICAgICAgdGhpcy5fYmluZE5hbWVkQWN0aW9uKGxpbmssIGRhdGEuYWN0aW9uKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5fYmluZExpbmsobGluaywgZGF0YS5kZXN0KTtcbiAgICB9XG5cbiAgICB0aGlzLmNvbnRhaW5lci5hcHBlbmRDaGlsZChsaW5rKTtcbiAgICByZXR1cm4gdGhpcy5jb250YWluZXI7XG4gIH1cblxuICBfYmluZExpbmsobGluaywgZGVzdGluYXRpb24pIHtcbiAgICBsaW5rLmhyZWYgPSB0aGlzLmxpbmtTZXJ2aWNlLmdldERlc3RpbmF0aW9uSGFzaChkZXN0aW5hdGlvbik7XG5cbiAgICBsaW5rLm9uY2xpY2sgPSAoKSA9PiB7XG4gICAgICBpZiAoZGVzdGluYXRpb24pIHtcbiAgICAgICAgdGhpcy5saW5rU2VydmljZS5uYXZpZ2F0ZVRvKGRlc3RpbmF0aW9uKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH07XG5cbiAgICBpZiAoZGVzdGluYXRpb24pIHtcbiAgICAgIGxpbmsuY2xhc3NOYW1lID0gXCJpbnRlcm5hbExpbmtcIjtcbiAgICB9XG4gIH1cblxuICBfYmluZE5hbWVkQWN0aW9uKGxpbmssIGFjdGlvbikge1xuICAgIGxpbmsuaHJlZiA9IHRoaXMubGlua1NlcnZpY2UuZ2V0QW5jaG9yVXJsKFwiXCIpO1xuXG4gICAgbGluay5vbmNsaWNrID0gKCkgPT4ge1xuICAgICAgdGhpcy5saW5rU2VydmljZS5leGVjdXRlTmFtZWRBY3Rpb24oYWN0aW9uKTtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9O1xuXG4gICAgbGluay5jbGFzc05hbWUgPSBcImludGVybmFsTGlua1wiO1xuICB9XG5cbn1cblxuY2xhc3MgVGV4dEFubm90YXRpb25FbGVtZW50IGV4dGVuZHMgQW5ub3RhdGlvbkVsZW1lbnQge1xuICBjb25zdHJ1Y3RvcihwYXJhbWV0ZXJzKSB7XG4gICAgY29uc3QgaXNSZW5kZXJhYmxlID0gISEocGFyYW1ldGVycy5kYXRhLmhhc1BvcHVwIHx8IHBhcmFtZXRlcnMuZGF0YS50aXRsZSB8fCBwYXJhbWV0ZXJzLmRhdGEuY29udGVudHMpO1xuICAgIHN1cGVyKHBhcmFtZXRlcnMsIGlzUmVuZGVyYWJsZSk7XG4gIH1cblxuICByZW5kZXIoKSB7XG4gICAgdGhpcy5jb250YWluZXIuY2xhc3NOYW1lID0gXCJ0ZXh0QW5ub3RhdGlvblwiO1xuICAgIGNvbnN0IGltYWdlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImltZ1wiKTtcbiAgICBpbWFnZS5zdHlsZS5oZWlnaHQgPSB0aGlzLmNvbnRhaW5lci5zdHlsZS5oZWlnaHQ7XG4gICAgaW1hZ2Uuc3R5bGUud2lkdGggPSB0aGlzLmNvbnRhaW5lci5zdHlsZS53aWR0aDtcbiAgICBpbWFnZS5zcmMgPSB0aGlzLmltYWdlUmVzb3VyY2VzUGF0aCArIFwiYW5ub3RhdGlvbi1cIiArIHRoaXMuZGF0YS5uYW1lLnRvTG93ZXJDYXNlKCkgKyBcIi5zdmdcIjtcbiAgICBpbWFnZS5hbHQgPSBcIlt7e3R5cGV9fSBBbm5vdGF0aW9uXVwiO1xuICAgIGltYWdlLmRhdGFzZXQubDEwbklkID0gXCJ0ZXh0X2Fubm90YXRpb25fdHlwZVwiO1xuICAgIGltYWdlLmRhdGFzZXQubDEwbkFyZ3MgPSBKU09OLnN0cmluZ2lmeSh7XG4gICAgICB0eXBlOiB0aGlzLmRhdGEubmFtZVxuICAgIH0pO1xuXG4gICAgaWYgKCF0aGlzLmRhdGEuaGFzUG9wdXApIHtcbiAgICAgIHRoaXMuX2NyZWF0ZVBvcHVwKHRoaXMuY29udGFpbmVyLCBpbWFnZSwgdGhpcy5kYXRhKTtcbiAgICB9XG5cbiAgICB0aGlzLmNvbnRhaW5lci5hcHBlbmRDaGlsZChpbWFnZSk7XG4gICAgcmV0dXJuIHRoaXMuY29udGFpbmVyO1xuICB9XG5cbn1cblxuY2xhc3MgV2lkZ2V0QW5ub3RhdGlvbkVsZW1lbnQgZXh0ZW5kcyBBbm5vdGF0aW9uRWxlbWVudCB7XG4gIHJlbmRlcigpIHtcbiAgICByZXR1cm4gdGhpcy5jb250YWluZXI7XG4gIH1cblxufVxuXG5jbGFzcyBUZXh0V2lkZ2V0QW5ub3RhdGlvbkVsZW1lbnQgZXh0ZW5kcyBXaWRnZXRBbm5vdGF0aW9uRWxlbWVudCB7XG4gIGNvbnN0cnVjdG9yKHBhcmFtZXRlcnMpIHtcbiAgICBjb25zdCBpc1JlbmRlcmFibGUgPSBwYXJhbWV0ZXJzLnJlbmRlckludGVyYWN0aXZlRm9ybXMgfHwgIXBhcmFtZXRlcnMuZGF0YS5oYXNBcHBlYXJhbmNlICYmICEhcGFyYW1ldGVycy5kYXRhLmZpZWxkVmFsdWU7XG4gICAgc3VwZXIocGFyYW1ldGVycywgaXNSZW5kZXJhYmxlKTtcbiAgfVxuXG4gIHJlbmRlcigpIHtcbiAgICBjb25zdCBURVhUX0FMSUdOTUVOVCA9IFtcImxlZnRcIiwgXCJjZW50ZXJcIiwgXCJyaWdodFwiXTtcbiAgICB0aGlzLmNvbnRhaW5lci5jbGFzc05hbWUgPSBcInRleHRXaWRnZXRBbm5vdGF0aW9uXCI7XG4gICAgbGV0IGVsZW1lbnQgPSBudWxsO1xuXG4gICAgaWYgKHRoaXMucmVuZGVySW50ZXJhY3RpdmVGb3Jtcykge1xuICAgICAgaWYgKHRoaXMuZGF0YS5tdWx0aUxpbmUpIHtcbiAgICAgICAgZWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJ0ZXh0YXJlYVwiKTtcbiAgICAgICAgZWxlbWVudC50ZXh0Q29udGVudCA9IHRoaXMuZGF0YS5maWVsZFZhbHVlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJpbnB1dFwiKTtcbiAgICAgICAgZWxlbWVudC50eXBlID0gXCJ0ZXh0XCI7XG4gICAgICAgIGVsZW1lbnQuc2V0QXR0cmlidXRlKFwidmFsdWVcIiwgdGhpcy5kYXRhLmZpZWxkVmFsdWUpO1xuICAgICAgfVxuXG4gICAgICBlbGVtZW50LmRpc2FibGVkID0gdGhpcy5kYXRhLnJlYWRPbmx5O1xuICAgICAgZWxlbWVudC5uYW1lID0gdGhpcy5kYXRhLmZpZWxkTmFtZTtcblxuICAgICAgaWYgKHRoaXMuZGF0YS5tYXhMZW4gIT09IG51bGwpIHtcbiAgICAgICAgZWxlbWVudC5tYXhMZW5ndGggPSB0aGlzLmRhdGEubWF4TGVuO1xuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5kYXRhLmNvbWIpIHtcbiAgICAgICAgY29uc3QgZmllbGRXaWR0aCA9IHRoaXMuZGF0YS5yZWN0WzJdIC0gdGhpcy5kYXRhLnJlY3RbMF07XG4gICAgICAgIGNvbnN0IGNvbWJXaWR0aCA9IGZpZWxkV2lkdGggLyB0aGlzLmRhdGEubWF4TGVuO1xuICAgICAgICBlbGVtZW50LmNsYXNzTGlzdC5hZGQoXCJjb21iXCIpO1xuICAgICAgICBlbGVtZW50LnN0eWxlLmxldHRlclNwYWNpbmcgPSBgY2FsYygke2NvbWJXaWR0aH1weCAtIDFjaClgO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBlbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICAgIGVsZW1lbnQudGV4dENvbnRlbnQgPSB0aGlzLmRhdGEuZmllbGRWYWx1ZTtcbiAgICAgIGVsZW1lbnQuc3R5bGUudmVydGljYWxBbGlnbiA9IFwibWlkZGxlXCI7XG4gICAgICBlbGVtZW50LnN0eWxlLmRpc3BsYXkgPSBcInRhYmxlLWNlbGxcIjtcbiAgICAgIGxldCBmb250ID0gbnVsbDtcblxuICAgICAgaWYgKHRoaXMuZGF0YS5mb250UmVmTmFtZSAmJiB0aGlzLnBhZ2UuY29tbW9uT2Jqcy5oYXModGhpcy5kYXRhLmZvbnRSZWZOYW1lKSkge1xuICAgICAgICBmb250ID0gdGhpcy5wYWdlLmNvbW1vbk9ianMuZ2V0KHRoaXMuZGF0YS5mb250UmVmTmFtZSk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuX3NldFRleHRTdHlsZShlbGVtZW50LCBmb250KTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5kYXRhLnRleHRBbGlnbm1lbnQgIT09IG51bGwpIHtcbiAgICAgIGVsZW1lbnQuc3R5bGUudGV4dEFsaWduID0gVEVYVF9BTElHTk1FTlRbdGhpcy5kYXRhLnRleHRBbGlnbm1lbnRdO1xuICAgIH1cblxuICAgIHRoaXMuY29udGFpbmVyLmFwcGVuZENoaWxkKGVsZW1lbnQpO1xuICAgIHJldHVybiB0aGlzLmNvbnRhaW5lcjtcbiAgfVxuXG4gIF9zZXRUZXh0U3R5bGUoZWxlbWVudCwgZm9udCkge1xuICAgIGNvbnN0IHN0eWxlID0gZWxlbWVudC5zdHlsZTtcbiAgICBzdHlsZS5mb250U2l6ZSA9IGAke3RoaXMuZGF0YS5mb250U2l6ZX1weGA7XG4gICAgc3R5bGUuZGlyZWN0aW9uID0gdGhpcy5kYXRhLmZvbnREaXJlY3Rpb24gPCAwID8gXCJydGxcIiA6IFwibHRyXCI7XG5cbiAgICBpZiAoIWZvbnQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBsZXQgYm9sZCA9IFwibm9ybWFsXCI7XG5cbiAgICBpZiAoZm9udC5ibGFjaykge1xuICAgICAgYm9sZCA9IFwiOTAwXCI7XG4gICAgfSBlbHNlIGlmIChmb250LmJvbGQpIHtcbiAgICAgIGJvbGQgPSBcImJvbGRcIjtcbiAgICB9XG5cbiAgICBzdHlsZS5mb250V2VpZ2h0ID0gYm9sZDtcbiAgICBzdHlsZS5mb250U3R5bGUgPSBmb250Lml0YWxpYyA/IFwiaXRhbGljXCIgOiBcIm5vcm1hbFwiO1xuICAgIGNvbnN0IGZvbnRGYW1pbHkgPSBmb250LmxvYWRlZE5hbWUgPyBgXCIke2ZvbnQubG9hZGVkTmFtZX1cIiwgYCA6IFwiXCI7XG4gICAgY29uc3QgZmFsbGJhY2tOYW1lID0gZm9udC5mYWxsYmFja05hbWUgfHwgXCJIZWx2ZXRpY2EsIHNhbnMtc2VyaWZcIjtcbiAgICBzdHlsZS5mb250RmFtaWx5ID0gZm9udEZhbWlseSArIGZhbGxiYWNrTmFtZTtcbiAgfVxuXG59XG5cbmNsYXNzIENoZWNrYm94V2lkZ2V0QW5ub3RhdGlvbkVsZW1lbnQgZXh0ZW5kcyBXaWRnZXRBbm5vdGF0aW9uRWxlbWVudCB7XG4gIGNvbnN0cnVjdG9yKHBhcmFtZXRlcnMpIHtcbiAgICBzdXBlcihwYXJhbWV0ZXJzLCBwYXJhbWV0ZXJzLnJlbmRlckludGVyYWN0aXZlRm9ybXMpO1xuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIHRoaXMuY29udGFpbmVyLmNsYXNzTmFtZSA9IFwiYnV0dG9uV2lkZ2V0QW5ub3RhdGlvbiBjaGVja0JveFwiO1xuICAgIGNvbnN0IGVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiaW5wdXRcIik7XG4gICAgZWxlbWVudC5kaXNhYmxlZCA9IHRoaXMuZGF0YS5yZWFkT25seTtcbiAgICBlbGVtZW50LnR5cGUgPSBcImNoZWNrYm94XCI7XG4gICAgZWxlbWVudC5uYW1lID0gdGhpcy5kYXRhLmZpZWxkTmFtZTtcblxuICAgIGlmICh0aGlzLmRhdGEuZmllbGRWYWx1ZSAmJiB0aGlzLmRhdGEuZmllbGRWYWx1ZSAhPT0gXCJPZmZcIikge1xuICAgICAgZWxlbWVudC5zZXRBdHRyaWJ1dGUoXCJjaGVja2VkXCIsIHRydWUpO1xuICAgIH1cblxuICAgIHRoaXMuY29udGFpbmVyLmFwcGVuZENoaWxkKGVsZW1lbnQpO1xuICAgIHJldHVybiB0aGlzLmNvbnRhaW5lcjtcbiAgfVxuXG59XG5cbmNsYXNzIFJhZGlvQnV0dG9uV2lkZ2V0QW5ub3RhdGlvbkVsZW1lbnQgZXh0ZW5kcyBXaWRnZXRBbm5vdGF0aW9uRWxlbWVudCB7XG4gIGNvbnN0cnVjdG9yKHBhcmFtZXRlcnMpIHtcbiAgICBzdXBlcihwYXJhbWV0ZXJzLCBwYXJhbWV0ZXJzLnJlbmRlckludGVyYWN0aXZlRm9ybXMpO1xuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIHRoaXMuY29udGFpbmVyLmNsYXNzTmFtZSA9IFwiYnV0dG9uV2lkZ2V0QW5ub3RhdGlvbiByYWRpb0J1dHRvblwiO1xuICAgIGNvbnN0IGVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiaW5wdXRcIik7XG4gICAgZWxlbWVudC5kaXNhYmxlZCA9IHRoaXMuZGF0YS5yZWFkT25seTtcbiAgICBlbGVtZW50LnR5cGUgPSBcInJhZGlvXCI7XG4gICAgZWxlbWVudC5uYW1lID0gdGhpcy5kYXRhLmZpZWxkTmFtZTtcblxuICAgIGlmICh0aGlzLmRhdGEuZmllbGRWYWx1ZSA9PT0gdGhpcy5kYXRhLmJ1dHRvblZhbHVlKSB7XG4gICAgICBlbGVtZW50LnNldEF0dHJpYnV0ZShcImNoZWNrZWRcIiwgdHJ1ZSk7XG4gICAgfVxuXG4gICAgdGhpcy5jb250YWluZXIuYXBwZW5kQ2hpbGQoZWxlbWVudCk7XG4gICAgcmV0dXJuIHRoaXMuY29udGFpbmVyO1xuICB9XG5cbn1cblxuY2xhc3MgUHVzaEJ1dHRvbldpZGdldEFubm90YXRpb25FbGVtZW50IGV4dGVuZHMgTGlua0Fubm90YXRpb25FbGVtZW50IHtcbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IGNvbnRhaW5lciA9IHN1cGVyLnJlbmRlcigpO1xuICAgIGNvbnRhaW5lci5jbGFzc05hbWUgPSBcImJ1dHRvbldpZGdldEFubm90YXRpb24gcHVzaEJ1dHRvblwiO1xuICAgIHJldHVybiBjb250YWluZXI7XG4gIH1cblxufVxuXG5jbGFzcyBDaG9pY2VXaWRnZXRBbm5vdGF0aW9uRWxlbWVudCBleHRlbmRzIFdpZGdldEFubm90YXRpb25FbGVtZW50IHtcbiAgY29uc3RydWN0b3IocGFyYW1ldGVycykge1xuICAgIHN1cGVyKHBhcmFtZXRlcnMsIHBhcmFtZXRlcnMucmVuZGVySW50ZXJhY3RpdmVGb3Jtcyk7XG4gIH1cblxuICByZW5kZXIoKSB7XG4gICAgdGhpcy5jb250YWluZXIuY2xhc3NOYW1lID0gXCJjaG9pY2VXaWRnZXRBbm5vdGF0aW9uXCI7XG4gICAgY29uc3Qgc2VsZWN0RWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzZWxlY3RcIik7XG4gICAgc2VsZWN0RWxlbWVudC5kaXNhYmxlZCA9IHRoaXMuZGF0YS5yZWFkT25seTtcbiAgICBzZWxlY3RFbGVtZW50Lm5hbWUgPSB0aGlzLmRhdGEuZmllbGROYW1lO1xuXG4gICAgaWYgKCF0aGlzLmRhdGEuY29tYm8pIHtcbiAgICAgIHNlbGVjdEVsZW1lbnQuc2l6ZSA9IHRoaXMuZGF0YS5vcHRpb25zLmxlbmd0aDtcblxuICAgICAgaWYgKHRoaXMuZGF0YS5tdWx0aVNlbGVjdCkge1xuICAgICAgICBzZWxlY3RFbGVtZW50Lm11bHRpcGxlID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBmb3IgKGNvbnN0IG9wdGlvbiBvZiB0aGlzLmRhdGEub3B0aW9ucykge1xuICAgICAgY29uc3Qgb3B0aW9uRWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJvcHRpb25cIik7XG4gICAgICBvcHRpb25FbGVtZW50LnRleHRDb250ZW50ID0gb3B0aW9uLmRpc3BsYXlWYWx1ZTtcbiAgICAgIG9wdGlvbkVsZW1lbnQudmFsdWUgPSBvcHRpb24uZXhwb3J0VmFsdWU7XG5cbiAgICAgIGlmICh0aGlzLmRhdGEuZmllbGRWYWx1ZS5pbmNsdWRlcyhvcHRpb24uZGlzcGxheVZhbHVlKSkge1xuICAgICAgICBvcHRpb25FbGVtZW50LnNldEF0dHJpYnV0ZShcInNlbGVjdGVkXCIsIHRydWUpO1xuICAgICAgfVxuXG4gICAgICBzZWxlY3RFbGVtZW50LmFwcGVuZENoaWxkKG9wdGlvbkVsZW1lbnQpO1xuICAgIH1cblxuICAgIHRoaXMuY29udGFpbmVyLmFwcGVuZENoaWxkKHNlbGVjdEVsZW1lbnQpO1xuICAgIHJldHVybiB0aGlzLmNvbnRhaW5lcjtcbiAgfVxuXG59XG5cbmNsYXNzIFBvcHVwQW5ub3RhdGlvbkVsZW1lbnQgZXh0ZW5kcyBBbm5vdGF0aW9uRWxlbWVudCB7XG4gIGNvbnN0cnVjdG9yKHBhcmFtZXRlcnMpIHtcbiAgICBjb25zdCBpc1JlbmRlcmFibGUgPSAhIShwYXJhbWV0ZXJzLmRhdGEudGl0bGUgfHwgcGFyYW1ldGVycy5kYXRhLmNvbnRlbnRzKTtcbiAgICBzdXBlcihwYXJhbWV0ZXJzLCBpc1JlbmRlcmFibGUpO1xuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IElHTk9SRV9UWVBFUyA9IFtcIkxpbmVcIiwgXCJTcXVhcmVcIiwgXCJDaXJjbGVcIiwgXCJQb2x5TGluZVwiLCBcIlBvbHlnb25cIiwgXCJJbmtcIl07XG4gICAgdGhpcy5jb250YWluZXIuY2xhc3NOYW1lID0gXCJwb3B1cEFubm90YXRpb25cIjtcblxuICAgIGlmIChJR05PUkVfVFlQRVMuaW5jbHVkZXModGhpcy5kYXRhLnBhcmVudFR5cGUpKSB7XG4gICAgICByZXR1cm4gdGhpcy5jb250YWluZXI7XG4gICAgfVxuXG4gICAgY29uc3Qgc2VsZWN0b3IgPSBgW2RhdGEtYW5ub3RhdGlvbi1pZD1cIiR7dGhpcy5kYXRhLnBhcmVudElkfVwiXWA7XG4gICAgY29uc3QgcGFyZW50RWxlbWVudCA9IHRoaXMubGF5ZXIucXVlcnlTZWxlY3RvcihzZWxlY3Rvcik7XG5cbiAgICBpZiAoIXBhcmVudEVsZW1lbnQpIHtcbiAgICAgIHJldHVybiB0aGlzLmNvbnRhaW5lcjtcbiAgICB9XG5cbiAgICBjb25zdCBwb3B1cCA9IG5ldyBQb3B1cEVsZW1lbnQoe1xuICAgICAgY29udGFpbmVyOiB0aGlzLmNvbnRhaW5lcixcbiAgICAgIHRyaWdnZXI6IHBhcmVudEVsZW1lbnQsXG4gICAgICBjb2xvcjogdGhpcy5kYXRhLmNvbG9yLFxuICAgICAgdGl0bGU6IHRoaXMuZGF0YS50aXRsZSxcbiAgICAgIG1vZGlmaWNhdGlvbkRhdGU6IHRoaXMuZGF0YS5tb2RpZmljYXRpb25EYXRlLFxuICAgICAgY29udGVudHM6IHRoaXMuZGF0YS5jb250ZW50c1xuICAgIH0pO1xuICAgIGNvbnN0IHBhcmVudExlZnQgPSBwYXJzZUZsb2F0KHBhcmVudEVsZW1lbnQuc3R5bGUubGVmdCk7XG4gICAgY29uc3QgcGFyZW50V2lkdGggPSBwYXJzZUZsb2F0KHBhcmVudEVsZW1lbnQuc3R5bGUud2lkdGgpO1xuICAgIHRoaXMuY29udGFpbmVyLnN0eWxlLnRyYW5zZm9ybU9yaWdpbiA9IGAtJHtwYXJlbnRMZWZ0ICsgcGFyZW50V2lkdGh9cHggLSR7cGFyZW50RWxlbWVudC5zdHlsZS50b3B9YDtcbiAgICB0aGlzLmNvbnRhaW5lci5zdHlsZS5sZWZ0ID0gYCR7cGFyZW50TGVmdCArIHBhcmVudFdpZHRofXB4YDtcbiAgICB0aGlzLmNvbnRhaW5lci5hcHBlbmRDaGlsZChwb3B1cC5yZW5kZXIoKSk7XG4gICAgcmV0dXJuIHRoaXMuY29udGFpbmVyO1xuICB9XG5cbn1cblxuY2xhc3MgUG9wdXBFbGVtZW50IHtcbiAgY29uc3RydWN0b3IocGFyYW1ldGVycykge1xuICAgIHRoaXMuY29udGFpbmVyID0gcGFyYW1ldGVycy5jb250YWluZXI7XG4gICAgdGhpcy50cmlnZ2VyID0gcGFyYW1ldGVycy50cmlnZ2VyO1xuICAgIHRoaXMuY29sb3IgPSBwYXJhbWV0ZXJzLmNvbG9yO1xuICAgIHRoaXMudGl0bGUgPSBwYXJhbWV0ZXJzLnRpdGxlO1xuICAgIHRoaXMubW9kaWZpY2F0aW9uRGF0ZSA9IHBhcmFtZXRlcnMubW9kaWZpY2F0aW9uRGF0ZTtcbiAgICB0aGlzLmNvbnRlbnRzID0gcGFyYW1ldGVycy5jb250ZW50cztcbiAgICB0aGlzLmhpZGVXcmFwcGVyID0gcGFyYW1ldGVycy5oaWRlV3JhcHBlciB8fCBmYWxzZTtcbiAgICB0aGlzLnBpbm5lZCA9IGZhbHNlO1xuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IEJBQ0tHUk9VTkRfRU5MSUdIVCA9IDAuNztcbiAgICBjb25zdCB3cmFwcGVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICB3cmFwcGVyLmNsYXNzTmFtZSA9IFwicG9wdXBXcmFwcGVyXCI7XG4gICAgdGhpcy5oaWRlRWxlbWVudCA9IHRoaXMuaGlkZVdyYXBwZXIgPyB3cmFwcGVyIDogdGhpcy5jb250YWluZXI7XG4gICAgdGhpcy5oaWRlRWxlbWVudC5zZXRBdHRyaWJ1dGUoXCJoaWRkZW5cIiwgdHJ1ZSk7XG4gICAgY29uc3QgcG9wdXAgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgIHBvcHVwLmNsYXNzTmFtZSA9IFwicG9wdXBcIjtcbiAgICBjb25zdCBjb2xvciA9IHRoaXMuY29sb3I7XG5cbiAgICBpZiAoY29sb3IpIHtcbiAgICAgIGNvbnN0IHIgPSBCQUNLR1JPVU5EX0VOTElHSFQgKiAoMjU1IC0gY29sb3JbMF0pICsgY29sb3JbMF07XG4gICAgICBjb25zdCBnID0gQkFDS0dST1VORF9FTkxJR0hUICogKDI1NSAtIGNvbG9yWzFdKSArIGNvbG9yWzFdO1xuICAgICAgY29uc3QgYiA9IEJBQ0tHUk9VTkRfRU5MSUdIVCAqICgyNTUgLSBjb2xvclsyXSkgKyBjb2xvclsyXTtcbiAgICAgIHBvcHVwLnN0eWxlLmJhY2tncm91bmRDb2xvciA9IF91dGlsLlV0aWwubWFrZUNzc1JnYihyIHwgMCwgZyB8IDAsIGIgfCAwKTtcbiAgICB9XG5cbiAgICBjb25zdCB0aXRsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJoMVwiKTtcbiAgICB0aXRsZS50ZXh0Q29udGVudCA9IHRoaXMudGl0bGU7XG4gICAgcG9wdXAuYXBwZW5kQ2hpbGQodGl0bGUpO1xuXG4gICAgY29uc3QgZGF0ZU9iamVjdCA9IF9kaXNwbGF5X3V0aWxzLlBERkRhdGVTdHJpbmcudG9EYXRlT2JqZWN0KHRoaXMubW9kaWZpY2F0aW9uRGF0ZSk7XG5cbiAgICBpZiAoZGF0ZU9iamVjdCkge1xuICAgICAgY29uc3QgbW9kaWZpY2F0aW9uRGF0ZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIpO1xuICAgICAgbW9kaWZpY2F0aW9uRGF0ZS50ZXh0Q29udGVudCA9IFwie3tkYXRlfX0sIHt7dGltZX19XCI7XG4gICAgICBtb2RpZmljYXRpb25EYXRlLmRhdGFzZXQubDEwbklkID0gXCJhbm5vdGF0aW9uX2RhdGVfc3RyaW5nXCI7XG4gICAgICBtb2RpZmljYXRpb25EYXRlLmRhdGFzZXQubDEwbkFyZ3MgPSBKU09OLnN0cmluZ2lmeSh7XG4gICAgICAgIGRhdGU6IGRhdGVPYmplY3QudG9Mb2NhbGVEYXRlU3RyaW5nKCksXG4gICAgICAgIHRpbWU6IGRhdGVPYmplY3QudG9Mb2NhbGVUaW1lU3RyaW5nKClcbiAgICAgIH0pO1xuICAgICAgcG9wdXAuYXBwZW5kQ2hpbGQobW9kaWZpY2F0aW9uRGF0ZSk7XG4gICAgfVxuXG4gICAgY29uc3QgY29udGVudHMgPSB0aGlzLl9mb3JtYXRDb250ZW50cyh0aGlzLmNvbnRlbnRzKTtcblxuICAgIHBvcHVwLmFwcGVuZENoaWxkKGNvbnRlbnRzKTtcbiAgICB0aGlzLnRyaWdnZXIuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIHRoaXMuX3RvZ2dsZS5iaW5kKHRoaXMpKTtcbiAgICB0aGlzLnRyaWdnZXIuYWRkRXZlbnRMaXN0ZW5lcihcIm1vdXNlb3ZlclwiLCB0aGlzLl9zaG93LmJpbmQodGhpcywgZmFsc2UpKTtcbiAgICB0aGlzLnRyaWdnZXIuYWRkRXZlbnRMaXN0ZW5lcihcIm1vdXNlb3V0XCIsIHRoaXMuX2hpZGUuYmluZCh0aGlzLCBmYWxzZSkpO1xuICAgIHBvcHVwLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCB0aGlzLl9oaWRlLmJpbmQodGhpcywgdHJ1ZSkpO1xuICAgIHdyYXBwZXIuYXBwZW5kQ2hpbGQocG9wdXApO1xuICAgIHJldHVybiB3cmFwcGVyO1xuICB9XG5cbiAgX2Zvcm1hdENvbnRlbnRzKGNvbnRlbnRzKSB7XG4gICAgY29uc3QgcCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJwXCIpO1xuICAgIGNvbnN0IGxpbmVzID0gY29udGVudHMuc3BsaXQoLyg/Olxcclxcbj98XFxuKS8pO1xuXG4gICAgZm9yIChsZXQgaSA9IDAsIGlpID0gbGluZXMubGVuZ3RoOyBpIDwgaWk7ICsraSkge1xuICAgICAgY29uc3QgbGluZSA9IGxpbmVzW2ldO1xuICAgICAgcC5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShsaW5lKSk7XG5cbiAgICAgIGlmIChpIDwgaWkgLSAxKSB7XG4gICAgICAgIHAuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImJyXCIpKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gcDtcbiAgfVxuXG4gIF90b2dnbGUoKSB7XG4gICAgaWYgKHRoaXMucGlubmVkKSB7XG4gICAgICB0aGlzLl9oaWRlKHRydWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLl9zaG93KHRydWUpO1xuICAgIH1cbiAgfVxuXG4gIF9zaG93KHBpbiA9IGZhbHNlKSB7XG4gICAgaWYgKHBpbikge1xuICAgICAgdGhpcy5waW5uZWQgPSB0cnVlO1xuICAgIH1cblxuICAgIGlmICh0aGlzLmhpZGVFbGVtZW50Lmhhc0F0dHJpYnV0ZShcImhpZGRlblwiKSkge1xuICAgICAgdGhpcy5oaWRlRWxlbWVudC5yZW1vdmVBdHRyaWJ1dGUoXCJoaWRkZW5cIik7XG4gICAgICB0aGlzLmNvbnRhaW5lci5zdHlsZS56SW5kZXggKz0gMTtcbiAgICB9XG4gIH1cblxuICBfaGlkZSh1bnBpbiA9IHRydWUpIHtcbiAgICBpZiAodW5waW4pIHtcbiAgICAgIHRoaXMucGlubmVkID0gZmFsc2U7XG4gICAgfVxuXG4gICAgaWYgKCF0aGlzLmhpZGVFbGVtZW50Lmhhc0F0dHJpYnV0ZShcImhpZGRlblwiKSAmJiAhdGhpcy5waW5uZWQpIHtcbiAgICAgIHRoaXMuaGlkZUVsZW1lbnQuc2V0QXR0cmlidXRlKFwiaGlkZGVuXCIsIHRydWUpO1xuICAgICAgdGhpcy5jb250YWluZXIuc3R5bGUuekluZGV4IC09IDE7XG4gICAgfVxuICB9XG5cbn1cblxuY2xhc3MgRnJlZVRleHRBbm5vdGF0aW9uRWxlbWVudCBleHRlbmRzIEFubm90YXRpb25FbGVtZW50IHtcbiAgY29uc3RydWN0b3IocGFyYW1ldGVycykge1xuICAgIGNvbnN0IGlzUmVuZGVyYWJsZSA9ICEhKHBhcmFtZXRlcnMuZGF0YS5oYXNQb3B1cCB8fCBwYXJhbWV0ZXJzLmRhdGEudGl0bGUgfHwgcGFyYW1ldGVycy5kYXRhLmNvbnRlbnRzKTtcbiAgICBzdXBlcihwYXJhbWV0ZXJzLCBpc1JlbmRlcmFibGUsIHRydWUpO1xuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIHRoaXMuY29udGFpbmVyLmNsYXNzTmFtZSA9IFwiZnJlZVRleHRBbm5vdGF0aW9uXCI7XG5cbiAgICBpZiAoIXRoaXMuZGF0YS5oYXNQb3B1cCkge1xuICAgICAgdGhpcy5fY3JlYXRlUG9wdXAodGhpcy5jb250YWluZXIsIG51bGwsIHRoaXMuZGF0YSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuY29udGFpbmVyO1xuICB9XG5cbn1cblxuY2xhc3MgTGluZUFubm90YXRpb25FbGVtZW50IGV4dGVuZHMgQW5ub3RhdGlvbkVsZW1lbnQge1xuICBjb25zdHJ1Y3RvcihwYXJhbWV0ZXJzKSB7XG4gICAgY29uc3QgaXNSZW5kZXJhYmxlID0gISEocGFyYW1ldGVycy5kYXRhLmhhc1BvcHVwIHx8IHBhcmFtZXRlcnMuZGF0YS50aXRsZSB8fCBwYXJhbWV0ZXJzLmRhdGEuY29udGVudHMpO1xuICAgIHN1cGVyKHBhcmFtZXRlcnMsIGlzUmVuZGVyYWJsZSwgdHJ1ZSk7XG4gIH1cblxuICByZW5kZXIoKSB7XG4gICAgdGhpcy5jb250YWluZXIuY2xhc3NOYW1lID0gXCJsaW5lQW5ub3RhdGlvblwiO1xuICAgIGNvbnN0IGRhdGEgPSB0aGlzLmRhdGE7XG4gICAgY29uc3Qgd2lkdGggPSBkYXRhLnJlY3RbMl0gLSBkYXRhLnJlY3RbMF07XG4gICAgY29uc3QgaGVpZ2h0ID0gZGF0YS5yZWN0WzNdIC0gZGF0YS5yZWN0WzFdO1xuICAgIGNvbnN0IHN2ZyA9IHRoaXMuc3ZnRmFjdG9yeS5jcmVhdGUod2lkdGgsIGhlaWdodCk7XG4gICAgY29uc3QgbGluZSA9IHRoaXMuc3ZnRmFjdG9yeS5jcmVhdGVFbGVtZW50KFwic3ZnOmxpbmVcIik7XG4gICAgbGluZS5zZXRBdHRyaWJ1dGUoXCJ4MVwiLCBkYXRhLnJlY3RbMl0gLSBkYXRhLmxpbmVDb29yZGluYXRlc1swXSk7XG4gICAgbGluZS5zZXRBdHRyaWJ1dGUoXCJ5MVwiLCBkYXRhLnJlY3RbM10gLSBkYXRhLmxpbmVDb29yZGluYXRlc1sxXSk7XG4gICAgbGluZS5zZXRBdHRyaWJ1dGUoXCJ4MlwiLCBkYXRhLnJlY3RbMl0gLSBkYXRhLmxpbmVDb29yZGluYXRlc1syXSk7XG4gICAgbGluZS5zZXRBdHRyaWJ1dGUoXCJ5MlwiLCBkYXRhLnJlY3RbM10gLSBkYXRhLmxpbmVDb29yZGluYXRlc1szXSk7XG4gICAgbGluZS5zZXRBdHRyaWJ1dGUoXCJzdHJva2Utd2lkdGhcIiwgZGF0YS5ib3JkZXJTdHlsZS53aWR0aCB8fCAxKTtcbiAgICBsaW5lLnNldEF0dHJpYnV0ZShcInN0cm9rZVwiLCBcInRyYW5zcGFyZW50XCIpO1xuICAgIHN2Zy5hcHBlbmRDaGlsZChsaW5lKTtcbiAgICB0aGlzLmNvbnRhaW5lci5hcHBlbmQoc3ZnKTtcblxuICAgIHRoaXMuX2NyZWF0ZVBvcHVwKHRoaXMuY29udGFpbmVyLCBsaW5lLCBkYXRhKTtcblxuICAgIHJldHVybiB0aGlzLmNvbnRhaW5lcjtcbiAgfVxuXG59XG5cbmNsYXNzIFNxdWFyZUFubm90YXRpb25FbGVtZW50IGV4dGVuZHMgQW5ub3RhdGlvbkVsZW1lbnQge1xuICBjb25zdHJ1Y3RvcihwYXJhbWV0ZXJzKSB7XG4gICAgY29uc3QgaXNSZW5kZXJhYmxlID0gISEocGFyYW1ldGVycy5kYXRhLmhhc1BvcHVwIHx8IHBhcmFtZXRlcnMuZGF0YS50aXRsZSB8fCBwYXJhbWV0ZXJzLmRhdGEuY29udGVudHMpO1xuICAgIHN1cGVyKHBhcmFtZXRlcnMsIGlzUmVuZGVyYWJsZSwgdHJ1ZSk7XG4gIH1cblxuICByZW5kZXIoKSB7XG4gICAgdGhpcy5jb250YWluZXIuY2xhc3NOYW1lID0gXCJzcXVhcmVBbm5vdGF0aW9uXCI7XG4gICAgY29uc3QgZGF0YSA9IHRoaXMuZGF0YTtcbiAgICBjb25zdCB3aWR0aCA9IGRhdGEucmVjdFsyXSAtIGRhdGEucmVjdFswXTtcbiAgICBjb25zdCBoZWlnaHQgPSBkYXRhLnJlY3RbM10gLSBkYXRhLnJlY3RbMV07XG4gICAgY29uc3Qgc3ZnID0gdGhpcy5zdmdGYWN0b3J5LmNyZWF0ZSh3aWR0aCwgaGVpZ2h0KTtcbiAgICBjb25zdCBib3JkZXJXaWR0aCA9IGRhdGEuYm9yZGVyU3R5bGUud2lkdGg7XG4gICAgY29uc3Qgc3F1YXJlID0gdGhpcy5zdmdGYWN0b3J5LmNyZWF0ZUVsZW1lbnQoXCJzdmc6cmVjdFwiKTtcbiAgICBzcXVhcmUuc2V0QXR0cmlidXRlKFwieFwiLCBib3JkZXJXaWR0aCAvIDIpO1xuICAgIHNxdWFyZS5zZXRBdHRyaWJ1dGUoXCJ5XCIsIGJvcmRlcldpZHRoIC8gMik7XG4gICAgc3F1YXJlLnNldEF0dHJpYnV0ZShcIndpZHRoXCIsIHdpZHRoIC0gYm9yZGVyV2lkdGgpO1xuICAgIHNxdWFyZS5zZXRBdHRyaWJ1dGUoXCJoZWlnaHRcIiwgaGVpZ2h0IC0gYm9yZGVyV2lkdGgpO1xuICAgIHNxdWFyZS5zZXRBdHRyaWJ1dGUoXCJzdHJva2Utd2lkdGhcIiwgYm9yZGVyV2lkdGggfHwgMSk7XG4gICAgc3F1YXJlLnNldEF0dHJpYnV0ZShcInN0cm9rZVwiLCBcInRyYW5zcGFyZW50XCIpO1xuICAgIHNxdWFyZS5zZXRBdHRyaWJ1dGUoXCJmaWxsXCIsIFwibm9uZVwiKTtcbiAgICBzdmcuYXBwZW5kQ2hpbGQoc3F1YXJlKTtcbiAgICB0aGlzLmNvbnRhaW5lci5hcHBlbmQoc3ZnKTtcblxuICAgIHRoaXMuX2NyZWF0ZVBvcHVwKHRoaXMuY29udGFpbmVyLCBzcXVhcmUsIGRhdGEpO1xuXG4gICAgcmV0dXJuIHRoaXMuY29udGFpbmVyO1xuICB9XG5cbn1cblxuY2xhc3MgQ2lyY2xlQW5ub3RhdGlvbkVsZW1lbnQgZXh0ZW5kcyBBbm5vdGF0aW9uRWxlbWVudCB7XG4gIGNvbnN0cnVjdG9yKHBhcmFtZXRlcnMpIHtcbiAgICBjb25zdCBpc1JlbmRlcmFibGUgPSAhIShwYXJhbWV0ZXJzLmRhdGEuaGFzUG9wdXAgfHwgcGFyYW1ldGVycy5kYXRhLnRpdGxlIHx8IHBhcmFtZXRlcnMuZGF0YS5jb250ZW50cyk7XG4gICAgc3VwZXIocGFyYW1ldGVycywgaXNSZW5kZXJhYmxlLCB0cnVlKTtcbiAgfVxuXG4gIHJlbmRlcigpIHtcbiAgICB0aGlzLmNvbnRhaW5lci5jbGFzc05hbWUgPSBcImNpcmNsZUFubm90YXRpb25cIjtcbiAgICBjb25zdCBkYXRhID0gdGhpcy5kYXRhO1xuICAgIGNvbnN0IHdpZHRoID0gZGF0YS5yZWN0WzJdIC0gZGF0YS5yZWN0WzBdO1xuICAgIGNvbnN0IGhlaWdodCA9IGRhdGEucmVjdFszXSAtIGRhdGEucmVjdFsxXTtcbiAgICBjb25zdCBzdmcgPSB0aGlzLnN2Z0ZhY3RvcnkuY3JlYXRlKHdpZHRoLCBoZWlnaHQpO1xuICAgIGNvbnN0IGJvcmRlcldpZHRoID0gZGF0YS5ib3JkZXJTdHlsZS53aWR0aDtcbiAgICBjb25zdCBjaXJjbGUgPSB0aGlzLnN2Z0ZhY3RvcnkuY3JlYXRlRWxlbWVudChcInN2ZzplbGxpcHNlXCIpO1xuICAgIGNpcmNsZS5zZXRBdHRyaWJ1dGUoXCJjeFwiLCB3aWR0aCAvIDIpO1xuICAgIGNpcmNsZS5zZXRBdHRyaWJ1dGUoXCJjeVwiLCBoZWlnaHQgLyAyKTtcbiAgICBjaXJjbGUuc2V0QXR0cmlidXRlKFwicnhcIiwgd2lkdGggLyAyIC0gYm9yZGVyV2lkdGggLyAyKTtcbiAgICBjaXJjbGUuc2V0QXR0cmlidXRlKFwicnlcIiwgaGVpZ2h0IC8gMiAtIGJvcmRlcldpZHRoIC8gMik7XG4gICAgY2lyY2xlLnNldEF0dHJpYnV0ZShcInN0cm9rZS13aWR0aFwiLCBib3JkZXJXaWR0aCB8fCAxKTtcbiAgICBjaXJjbGUuc2V0QXR0cmlidXRlKFwic3Ryb2tlXCIsIFwidHJhbnNwYXJlbnRcIik7XG4gICAgY2lyY2xlLnNldEF0dHJpYnV0ZShcImZpbGxcIiwgXCJub25lXCIpO1xuICAgIHN2Zy5hcHBlbmRDaGlsZChjaXJjbGUpO1xuICAgIHRoaXMuY29udGFpbmVyLmFwcGVuZChzdmcpO1xuXG4gICAgdGhpcy5fY3JlYXRlUG9wdXAodGhpcy5jb250YWluZXIsIGNpcmNsZSwgZGF0YSk7XG5cbiAgICByZXR1cm4gdGhpcy5jb250YWluZXI7XG4gIH1cblxufVxuXG5jbGFzcyBQb2x5bGluZUFubm90YXRpb25FbGVtZW50IGV4dGVuZHMgQW5ub3RhdGlvbkVsZW1lbnQge1xuICBjb25zdHJ1Y3RvcihwYXJhbWV0ZXJzKSB7XG4gICAgY29uc3QgaXNSZW5kZXJhYmxlID0gISEocGFyYW1ldGVycy5kYXRhLmhhc1BvcHVwIHx8IHBhcmFtZXRlcnMuZGF0YS50aXRsZSB8fCBwYXJhbWV0ZXJzLmRhdGEuY29udGVudHMpO1xuICAgIHN1cGVyKHBhcmFtZXRlcnMsIGlzUmVuZGVyYWJsZSwgdHJ1ZSk7XG4gICAgdGhpcy5jb250YWluZXJDbGFzc05hbWUgPSBcInBvbHlsaW5lQW5ub3RhdGlvblwiO1xuICAgIHRoaXMuc3ZnRWxlbWVudE5hbWUgPSBcInN2Zzpwb2x5bGluZVwiO1xuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIHRoaXMuY29udGFpbmVyLmNsYXNzTmFtZSA9IHRoaXMuY29udGFpbmVyQ2xhc3NOYW1lO1xuICAgIGNvbnN0IGRhdGEgPSB0aGlzLmRhdGE7XG4gICAgY29uc3Qgd2lkdGggPSBkYXRhLnJlY3RbMl0gLSBkYXRhLnJlY3RbMF07XG4gICAgY29uc3QgaGVpZ2h0ID0gZGF0YS5yZWN0WzNdIC0gZGF0YS5yZWN0WzFdO1xuICAgIGNvbnN0IHN2ZyA9IHRoaXMuc3ZnRmFjdG9yeS5jcmVhdGUod2lkdGgsIGhlaWdodCk7XG4gICAgbGV0IHBvaW50cyA9IFtdO1xuXG4gICAgZm9yIChjb25zdCBjb29yZGluYXRlIG9mIGRhdGEudmVydGljZXMpIHtcbiAgICAgIGNvbnN0IHggPSBjb29yZGluYXRlLnggLSBkYXRhLnJlY3RbMF07XG4gICAgICBjb25zdCB5ID0gZGF0YS5yZWN0WzNdIC0gY29vcmRpbmF0ZS55O1xuICAgICAgcG9pbnRzLnB1c2goeCArIFwiLFwiICsgeSk7XG4gICAgfVxuXG4gICAgcG9pbnRzID0gcG9pbnRzLmpvaW4oXCIgXCIpO1xuICAgIGNvbnN0IHBvbHlsaW5lID0gdGhpcy5zdmdGYWN0b3J5LmNyZWF0ZUVsZW1lbnQodGhpcy5zdmdFbGVtZW50TmFtZSk7XG4gICAgcG9seWxpbmUuc2V0QXR0cmlidXRlKFwicG9pbnRzXCIsIHBvaW50cyk7XG4gICAgcG9seWxpbmUuc2V0QXR0cmlidXRlKFwic3Ryb2tlLXdpZHRoXCIsIGRhdGEuYm9yZGVyU3R5bGUud2lkdGggfHwgMSk7XG4gICAgcG9seWxpbmUuc2V0QXR0cmlidXRlKFwic3Ryb2tlXCIsIFwidHJhbnNwYXJlbnRcIik7XG4gICAgcG9seWxpbmUuc2V0QXR0cmlidXRlKFwiZmlsbFwiLCBcIm5vbmVcIik7XG4gICAgc3ZnLmFwcGVuZENoaWxkKHBvbHlsaW5lKTtcbiAgICB0aGlzLmNvbnRhaW5lci5hcHBlbmQoc3ZnKTtcblxuICAgIHRoaXMuX2NyZWF0ZVBvcHVwKHRoaXMuY29udGFpbmVyLCBwb2x5bGluZSwgZGF0YSk7XG5cbiAgICByZXR1cm4gdGhpcy5jb250YWluZXI7XG4gIH1cblxufVxuXG5jbGFzcyBQb2x5Z29uQW5ub3RhdGlvbkVsZW1lbnQgZXh0ZW5kcyBQb2x5bGluZUFubm90YXRpb25FbGVtZW50IHtcbiAgY29uc3RydWN0b3IocGFyYW1ldGVycykge1xuICAgIHN1cGVyKHBhcmFtZXRlcnMpO1xuICAgIHRoaXMuY29udGFpbmVyQ2xhc3NOYW1lID0gXCJwb2x5Z29uQW5ub3RhdGlvblwiO1xuICAgIHRoaXMuc3ZnRWxlbWVudE5hbWUgPSBcInN2Zzpwb2x5Z29uXCI7XG4gIH1cblxufVxuXG5jbGFzcyBDYXJldEFubm90YXRpb25FbGVtZW50IGV4dGVuZHMgQW5ub3RhdGlvbkVsZW1lbnQge1xuICBjb25zdHJ1Y3RvcihwYXJhbWV0ZXJzKSB7XG4gICAgY29uc3QgaXNSZW5kZXJhYmxlID0gISEocGFyYW1ldGVycy5kYXRhLmhhc1BvcHVwIHx8IHBhcmFtZXRlcnMuZGF0YS50aXRsZSB8fCBwYXJhbWV0ZXJzLmRhdGEuY29udGVudHMpO1xuICAgIHN1cGVyKHBhcmFtZXRlcnMsIGlzUmVuZGVyYWJsZSwgdHJ1ZSk7XG4gIH1cblxuICByZW5kZXIoKSB7XG4gICAgdGhpcy5jb250YWluZXIuY2xhc3NOYW1lID0gXCJjYXJldEFubm90YXRpb25cIjtcblxuICAgIGlmICghdGhpcy5kYXRhLmhhc1BvcHVwKSB7XG4gICAgICB0aGlzLl9jcmVhdGVQb3B1cCh0aGlzLmNvbnRhaW5lciwgbnVsbCwgdGhpcy5kYXRhKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5jb250YWluZXI7XG4gIH1cblxufVxuXG5jbGFzcyBJbmtBbm5vdGF0aW9uRWxlbWVudCBleHRlbmRzIEFubm90YXRpb25FbGVtZW50IHtcbiAgY29uc3RydWN0b3IocGFyYW1ldGVycykge1xuICAgIGNvbnN0IGlzUmVuZGVyYWJsZSA9ICEhKHBhcmFtZXRlcnMuZGF0YS5oYXNQb3B1cCB8fCBwYXJhbWV0ZXJzLmRhdGEudGl0bGUgfHwgcGFyYW1ldGVycy5kYXRhLmNvbnRlbnRzKTtcbiAgICBzdXBlcihwYXJhbWV0ZXJzLCBpc1JlbmRlcmFibGUsIHRydWUpO1xuICAgIHRoaXMuY29udGFpbmVyQ2xhc3NOYW1lID0gXCJpbmtBbm5vdGF0aW9uXCI7XG4gICAgdGhpcy5zdmdFbGVtZW50TmFtZSA9IFwic3ZnOnBvbHlsaW5lXCI7XG4gIH1cblxuICByZW5kZXIoKSB7XG4gICAgdGhpcy5jb250YWluZXIuY2xhc3NOYW1lID0gdGhpcy5jb250YWluZXJDbGFzc05hbWU7XG4gICAgY29uc3QgZGF0YSA9IHRoaXMuZGF0YTtcbiAgICBjb25zdCB3aWR0aCA9IGRhdGEucmVjdFsyXSAtIGRhdGEucmVjdFswXTtcbiAgICBjb25zdCBoZWlnaHQgPSBkYXRhLnJlY3RbM10gLSBkYXRhLnJlY3RbMV07XG4gICAgY29uc3Qgc3ZnID0gdGhpcy5zdmdGYWN0b3J5LmNyZWF0ZSh3aWR0aCwgaGVpZ2h0KTtcblxuICAgIGZvciAoY29uc3QgaW5rTGlzdCBvZiBkYXRhLmlua0xpc3RzKSB7XG4gICAgICBsZXQgcG9pbnRzID0gW107XG5cbiAgICAgIGZvciAoY29uc3QgY29vcmRpbmF0ZSBvZiBpbmtMaXN0KSB7XG4gICAgICAgIGNvbnN0IHggPSBjb29yZGluYXRlLnggLSBkYXRhLnJlY3RbMF07XG4gICAgICAgIGNvbnN0IHkgPSBkYXRhLnJlY3RbM10gLSBjb29yZGluYXRlLnk7XG4gICAgICAgIHBvaW50cy5wdXNoKGAke3h9LCR7eX1gKTtcbiAgICAgIH1cblxuICAgICAgcG9pbnRzID0gcG9pbnRzLmpvaW4oXCIgXCIpO1xuICAgICAgY29uc3QgcG9seWxpbmUgPSB0aGlzLnN2Z0ZhY3RvcnkuY3JlYXRlRWxlbWVudCh0aGlzLnN2Z0VsZW1lbnROYW1lKTtcbiAgICAgIHBvbHlsaW5lLnNldEF0dHJpYnV0ZShcInBvaW50c1wiLCBwb2ludHMpO1xuICAgICAgcG9seWxpbmUuc2V0QXR0cmlidXRlKFwic3Ryb2tlLXdpZHRoXCIsIGRhdGEuYm9yZGVyU3R5bGUud2lkdGggfHwgMSk7XG4gICAgICBwb2x5bGluZS5zZXRBdHRyaWJ1dGUoXCJzdHJva2VcIiwgXCJ0cmFuc3BhcmVudFwiKTtcbiAgICAgIHBvbHlsaW5lLnNldEF0dHJpYnV0ZShcImZpbGxcIiwgXCJub25lXCIpO1xuXG4gICAgICB0aGlzLl9jcmVhdGVQb3B1cCh0aGlzLmNvbnRhaW5lciwgcG9seWxpbmUsIGRhdGEpO1xuXG4gICAgICBzdmcuYXBwZW5kQ2hpbGQocG9seWxpbmUpO1xuICAgIH1cblxuICAgIHRoaXMuY29udGFpbmVyLmFwcGVuZChzdmcpO1xuICAgIHJldHVybiB0aGlzLmNvbnRhaW5lcjtcbiAgfVxuXG59XG5cbmNsYXNzIEhpZ2hsaWdodEFubm90YXRpb25FbGVtZW50IGV4dGVuZHMgQW5ub3RhdGlvbkVsZW1lbnQge1xuICBjb25zdHJ1Y3RvcihwYXJhbWV0ZXJzKSB7XG4gICAgY29uc3QgaXNSZW5kZXJhYmxlID0gISEocGFyYW1ldGVycy5kYXRhLmhhc1BvcHVwIHx8IHBhcmFtZXRlcnMuZGF0YS50aXRsZSB8fCBwYXJhbWV0ZXJzLmRhdGEuY29udGVudHMpO1xuICAgIHN1cGVyKHBhcmFtZXRlcnMsIGlzUmVuZGVyYWJsZSwgdHJ1ZSk7XG4gIH1cblxuICByZW5kZXIoKSB7XG4gICAgdGhpcy5jb250YWluZXIuY2xhc3NOYW1lID0gXCJoaWdobGlnaHRBbm5vdGF0aW9uXCI7XG5cbiAgICBpZiAoIXRoaXMuZGF0YS5oYXNQb3B1cCkge1xuICAgICAgdGhpcy5fY3JlYXRlUG9wdXAodGhpcy5jb250YWluZXIsIG51bGwsIHRoaXMuZGF0YSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuY29udGFpbmVyO1xuICB9XG5cbn1cblxuY2xhc3MgVW5kZXJsaW5lQW5ub3RhdGlvbkVsZW1lbnQgZXh0ZW5kcyBBbm5vdGF0aW9uRWxlbWVudCB7XG4gIGNvbnN0cnVjdG9yKHBhcmFtZXRlcnMpIHtcbiAgICBjb25zdCBpc1JlbmRlcmFibGUgPSAhIShwYXJhbWV0ZXJzLmRhdGEuaGFzUG9wdXAgfHwgcGFyYW1ldGVycy5kYXRhLnRpdGxlIHx8IHBhcmFtZXRlcnMuZGF0YS5jb250ZW50cyk7XG4gICAgc3VwZXIocGFyYW1ldGVycywgaXNSZW5kZXJhYmxlLCB0cnVlKTtcbiAgfVxuXG4gIHJlbmRlcigpIHtcbiAgICB0aGlzLmNvbnRhaW5lci5jbGFzc05hbWUgPSBcInVuZGVybGluZUFubm90YXRpb25cIjtcblxuICAgIGlmICghdGhpcy5kYXRhLmhhc1BvcHVwKSB7XG4gICAgICB0aGlzLl9jcmVhdGVQb3B1cCh0aGlzLmNvbnRhaW5lciwgbnVsbCwgdGhpcy5kYXRhKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5jb250YWluZXI7XG4gIH1cblxufVxuXG5jbGFzcyBTcXVpZ2dseUFubm90YXRpb25FbGVtZW50IGV4dGVuZHMgQW5ub3RhdGlvbkVsZW1lbnQge1xuICBjb25zdHJ1Y3RvcihwYXJhbWV0ZXJzKSB7XG4gICAgY29uc3QgaXNSZW5kZXJhYmxlID0gISEocGFyYW1ldGVycy5kYXRhLmhhc1BvcHVwIHx8IHBhcmFtZXRlcnMuZGF0YS50aXRsZSB8fCBwYXJhbWV0ZXJzLmRhdGEuY29udGVudHMpO1xuICAgIHN1cGVyKHBhcmFtZXRlcnMsIGlzUmVuZGVyYWJsZSwgdHJ1ZSk7XG4gIH1cblxuICByZW5kZXIoKSB7XG4gICAgdGhpcy5jb250YWluZXIuY2xhc3NOYW1lID0gXCJzcXVpZ2dseUFubm90YXRpb25cIjtcblxuICAgIGlmICghdGhpcy5kYXRhLmhhc1BvcHVwKSB7XG4gICAgICB0aGlzLl9jcmVhdGVQb3B1cCh0aGlzLmNvbnRhaW5lciwgbnVsbCwgdGhpcy5kYXRhKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5jb250YWluZXI7XG4gIH1cblxufVxuXG5jbGFzcyBTdHJpa2VPdXRBbm5vdGF0aW9uRWxlbWVudCBleHRlbmRzIEFubm90YXRpb25FbGVtZW50IHtcbiAgY29uc3RydWN0b3IocGFyYW1ldGVycykge1xuICAgIGNvbnN0IGlzUmVuZGVyYWJsZSA9ICEhKHBhcmFtZXRlcnMuZGF0YS5oYXNQb3B1cCB8fCBwYXJhbWV0ZXJzLmRhdGEudGl0bGUgfHwgcGFyYW1ldGVycy5kYXRhLmNvbnRlbnRzKTtcbiAgICBzdXBlcihwYXJhbWV0ZXJzLCBpc1JlbmRlcmFibGUsIHRydWUpO1xuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIHRoaXMuY29udGFpbmVyLmNsYXNzTmFtZSA9IFwic3RyaWtlb3V0QW5ub3RhdGlvblwiO1xuXG4gICAgaWYgKCF0aGlzLmRhdGEuaGFzUG9wdXApIHtcbiAgICAgIHRoaXMuX2NyZWF0ZVBvcHVwKHRoaXMuY29udGFpbmVyLCBudWxsLCB0aGlzLmRhdGEpO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLmNvbnRhaW5lcjtcbiAgfVxuXG59XG5cbmNsYXNzIFN0YW1wQW5ub3RhdGlvbkVsZW1lbnQgZXh0ZW5kcyBBbm5vdGF0aW9uRWxlbWVudCB7XG4gIGNvbnN0cnVjdG9yKHBhcmFtZXRlcnMpIHtcbiAgICBjb25zdCBpc1JlbmRlcmFibGUgPSAhIShwYXJhbWV0ZXJzLmRhdGEuaGFzUG9wdXAgfHwgcGFyYW1ldGVycy5kYXRhLnRpdGxlIHx8IHBhcmFtZXRlcnMuZGF0YS5jb250ZW50cyk7XG4gICAgc3VwZXIocGFyYW1ldGVycywgaXNSZW5kZXJhYmxlLCB0cnVlKTtcbiAgfVxuXG4gIHJlbmRlcigpIHtcbiAgICB0aGlzLmNvbnRhaW5lci5jbGFzc05hbWUgPSBcInN0YW1wQW5ub3RhdGlvblwiO1xuXG4gICAgaWYgKCF0aGlzLmRhdGEuaGFzUG9wdXApIHtcbiAgICAgIHRoaXMuX2NyZWF0ZVBvcHVwKHRoaXMuY29udGFpbmVyLCBudWxsLCB0aGlzLmRhdGEpO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLmNvbnRhaW5lcjtcbiAgfVxuXG59XG5cbmNsYXNzIEZpbGVBdHRhY2htZW50QW5ub3RhdGlvbkVsZW1lbnQgZXh0ZW5kcyBBbm5vdGF0aW9uRWxlbWVudCB7XG4gIGNvbnN0cnVjdG9yKHBhcmFtZXRlcnMpIHtcbiAgICBzdXBlcihwYXJhbWV0ZXJzLCB0cnVlKTtcbiAgICBjb25zdCB7XG4gICAgICBmaWxlbmFtZSxcbiAgICAgIGNvbnRlbnRcbiAgICB9ID0gdGhpcy5kYXRhLmZpbGU7XG4gICAgdGhpcy5maWxlbmFtZSA9ICgwLCBfZGlzcGxheV91dGlscy5nZXRGaWxlbmFtZUZyb21VcmwpKGZpbGVuYW1lKTtcbiAgICB0aGlzLmNvbnRlbnQgPSBjb250ZW50O1xuXG4gICAgaWYgKHRoaXMubGlua1NlcnZpY2UuZXZlbnRCdXMpIHtcbiAgICAgIHRoaXMubGlua1NlcnZpY2UuZXZlbnRCdXMuZGlzcGF0Y2goXCJmaWxlYXR0YWNobWVudGFubm90YXRpb25cIiwge1xuICAgICAgICBzb3VyY2U6IHRoaXMsXG4gICAgICAgIGlkOiAoMCwgX3V0aWwuc3RyaW5nVG9QREZTdHJpbmcpKGZpbGVuYW1lKSxcbiAgICAgICAgZmlsZW5hbWUsXG4gICAgICAgIGNvbnRlbnRcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG4gIHJlbmRlcigpIHtcbiAgICB0aGlzLmNvbnRhaW5lci5jbGFzc05hbWUgPSBcImZpbGVBdHRhY2htZW50QW5ub3RhdGlvblwiO1xuICAgIGNvbnN0IHRyaWdnZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgIHRyaWdnZXIuc3R5bGUuaGVpZ2h0ID0gdGhpcy5jb250YWluZXIuc3R5bGUuaGVpZ2h0O1xuICAgIHRyaWdnZXIuc3R5bGUud2lkdGggPSB0aGlzLmNvbnRhaW5lci5zdHlsZS53aWR0aDtcbiAgICB0cmlnZ2VyLmFkZEV2ZW50TGlzdGVuZXIoXCJkYmxjbGlja1wiLCB0aGlzLl9kb3dubG9hZC5iaW5kKHRoaXMpKTtcblxuICAgIGlmICghdGhpcy5kYXRhLmhhc1BvcHVwICYmICh0aGlzLmRhdGEudGl0bGUgfHwgdGhpcy5kYXRhLmNvbnRlbnRzKSkge1xuICAgICAgdGhpcy5fY3JlYXRlUG9wdXAodGhpcy5jb250YWluZXIsIHRyaWdnZXIsIHRoaXMuZGF0YSk7XG4gICAgfVxuXG4gICAgdGhpcy5jb250YWluZXIuYXBwZW5kQ2hpbGQodHJpZ2dlcik7XG4gICAgcmV0dXJuIHRoaXMuY29udGFpbmVyO1xuICB9XG5cbiAgX2Rvd25sb2FkKCkge1xuICAgIGlmICghdGhpcy5kb3dubG9hZE1hbmFnZXIpIHtcbiAgICAgICgwLCBfdXRpbC53YXJuKShcIkRvd25sb2FkIGNhbm5vdCBiZSBzdGFydGVkIGR1ZSB0byB1bmF2YWlsYWJsZSBkb3dubG9hZCBtYW5hZ2VyXCIpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRoaXMuZG93bmxvYWRNYW5hZ2VyLmRvd25sb2FkRGF0YSh0aGlzLmNvbnRlbnQsIHRoaXMuZmlsZW5hbWUsIFwiXCIpO1xuICB9XG5cbn1cblxuY2xhc3MgQW5ub3RhdGlvbkxheWVyIHtcbiAgc3RhdGljIHJlbmRlcihwYXJhbWV0ZXJzKSB7XG4gICAgY29uc3Qgc29ydGVkQW5ub3RhdGlvbnMgPSBbXSxcbiAgICAgICAgICBwb3B1cEFubm90YXRpb25zID0gW107XG5cbiAgICBmb3IgKGNvbnN0IGRhdGEgb2YgcGFyYW1ldGVycy5hbm5vdGF0aW9ucykge1xuICAgICAgaWYgKCFkYXRhKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICBpZiAoZGF0YS5hbm5vdGF0aW9uVHlwZSA9PT0gX3V0aWwuQW5ub3RhdGlvblR5cGUuUE9QVVApIHtcbiAgICAgICAgcG9wdXBBbm5vdGF0aW9ucy5wdXNoKGRhdGEpO1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgc29ydGVkQW5ub3RhdGlvbnMucHVzaChkYXRhKTtcbiAgICB9XG5cbiAgICBpZiAocG9wdXBBbm5vdGF0aW9ucy5sZW5ndGgpIHtcbiAgICAgIHNvcnRlZEFubm90YXRpb25zLnB1c2goLi4ucG9wdXBBbm5vdGF0aW9ucyk7XG4gICAgfVxuXG4gICAgZm9yIChjb25zdCBkYXRhIG9mIHNvcnRlZEFubm90YXRpb25zKSB7XG4gICAgICBjb25zdCBlbGVtZW50ID0gQW5ub3RhdGlvbkVsZW1lbnRGYWN0b3J5LmNyZWF0ZSh7XG4gICAgICAgIGRhdGEsXG4gICAgICAgIGxheWVyOiBwYXJhbWV0ZXJzLmRpdixcbiAgICAgICAgcGFnZTogcGFyYW1ldGVycy5wYWdlLFxuICAgICAgICB2aWV3cG9ydDogcGFyYW1ldGVycy52aWV3cG9ydCxcbiAgICAgICAgbGlua1NlcnZpY2U6IHBhcmFtZXRlcnMubGlua1NlcnZpY2UsXG4gICAgICAgIGRvd25sb2FkTWFuYWdlcjogcGFyYW1ldGVycy5kb3dubG9hZE1hbmFnZXIsXG4gICAgICAgIGltYWdlUmVzb3VyY2VzUGF0aDogcGFyYW1ldGVycy5pbWFnZVJlc291cmNlc1BhdGggfHwgXCJcIixcbiAgICAgICAgcmVuZGVySW50ZXJhY3RpdmVGb3JtczogcGFyYW1ldGVycy5yZW5kZXJJbnRlcmFjdGl2ZUZvcm1zIHx8IGZhbHNlLFxuICAgICAgICBzdmdGYWN0b3J5OiBuZXcgX2Rpc3BsYXlfdXRpbHMuRE9NU1ZHRmFjdG9yeSgpXG4gICAgICB9KTtcblxuICAgICAgaWYgKGVsZW1lbnQuaXNSZW5kZXJhYmxlKSB7XG4gICAgICAgIHBhcmFtZXRlcnMuZGl2LmFwcGVuZENoaWxkKGVsZW1lbnQucmVuZGVyKCkpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHN0YXRpYyB1cGRhdGUocGFyYW1ldGVycykge1xuICAgIGZvciAoY29uc3QgZGF0YSBvZiBwYXJhbWV0ZXJzLmFubm90YXRpb25zKSB7XG4gICAgICBjb25zdCBlbGVtZW50ID0gcGFyYW1ldGVycy5kaXYucXVlcnlTZWxlY3RvcihgW2RhdGEtYW5ub3RhdGlvbi1pZD1cIiR7ZGF0YS5pZH1cIl1gKTtcblxuICAgICAgaWYgKGVsZW1lbnQpIHtcbiAgICAgICAgZWxlbWVudC5zdHlsZS50cmFuc2Zvcm0gPSBgbWF0cml4KCR7cGFyYW1ldGVycy52aWV3cG9ydC50cmFuc2Zvcm0uam9pbihcIixcIil9KWA7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcGFyYW1ldGVycy5kaXYucmVtb3ZlQXR0cmlidXRlKFwiaGlkZGVuXCIpO1xuICB9XG5cbn1cblxuZXhwb3J0cy5Bbm5vdGF0aW9uTGF5ZXIgPSBBbm5vdGF0aW9uTGF5ZXI7XG5cbi8qKiovIH0pLFxuLyogMTcgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd19wZGZqc19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMucmVuZGVyVGV4dExheWVyID0gdm9pZCAwO1xuXG52YXIgX3V0aWwgPSBfX3dfcGRmanNfcmVxdWlyZV9fKDIpO1xuXG52YXIgcmVuZGVyVGV4dExheWVyID0gZnVuY3Rpb24gcmVuZGVyVGV4dExheWVyQ2xvc3VyZSgpIHtcbiAgdmFyIE1BWF9URVhUX0RJVlNfVE9fUkVOREVSID0gMTAwMDAwO1xuICB2YXIgTm9uV2hpdGVzcGFjZVJlZ2V4cCA9IC9cXFMvO1xuXG4gIGZ1bmN0aW9uIGlzQWxsV2hpdGVzcGFjZShzdHIpIHtcbiAgICByZXR1cm4gIU5vbldoaXRlc3BhY2VSZWdleHAudGVzdChzdHIpO1xuICB9XG5cbiAgZnVuY3Rpb24gYXBwZW5kVGV4dCh0YXNrLCBnZW9tLCBzdHlsZXMpIHtcbiAgICB2YXIgdGV4dERpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIpO1xuICAgIHZhciB0ZXh0RGl2UHJvcGVydGllcyA9IHtcbiAgICAgIGFuZ2xlOiAwLFxuICAgICAgY2FudmFzV2lkdGg6IDAsXG4gICAgICBpc1doaXRlc3BhY2U6IGZhbHNlLFxuICAgICAgb3JpZ2luYWxUcmFuc2Zvcm06IG51bGwsXG4gICAgICBwYWRkaW5nQm90dG9tOiAwLFxuICAgICAgcGFkZGluZ0xlZnQ6IDAsXG4gICAgICBwYWRkaW5nUmlnaHQ6IDAsXG4gICAgICBwYWRkaW5nVG9wOiAwLFxuICAgICAgc2NhbGU6IDFcbiAgICB9O1xuXG4gICAgdGFzay5fdGV4dERpdnMucHVzaCh0ZXh0RGl2KTtcblxuICAgIGlmIChpc0FsbFdoaXRlc3BhY2UoZ2VvbS5zdHIpKSB7XG4gICAgICB0ZXh0RGl2UHJvcGVydGllcy5pc1doaXRlc3BhY2UgPSB0cnVlO1xuXG4gICAgICB0YXNrLl90ZXh0RGl2UHJvcGVydGllcy5zZXQodGV4dERpdiwgdGV4dERpdlByb3BlcnRpZXMpO1xuXG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIHR4ID0gX3V0aWwuVXRpbC50cmFuc2Zvcm0odGFzay5fdmlld3BvcnQudHJhbnNmb3JtLCBnZW9tLnRyYW5zZm9ybSk7XG5cbiAgICB2YXIgYW5nbGUgPSBNYXRoLmF0YW4yKHR4WzFdLCB0eFswXSk7XG4gICAgdmFyIHN0eWxlID0gc3R5bGVzW2dlb20uZm9udE5hbWVdO1xuXG4gICAgaWYgKHN0eWxlLnZlcnRpY2FsKSB7XG4gICAgICBhbmdsZSArPSBNYXRoLlBJIC8gMjtcbiAgICB9XG5cbiAgICB2YXIgZm9udEhlaWdodCA9IE1hdGguc3FydCh0eFsyXSAqIHR4WzJdICsgdHhbM10gKiB0eFszXSk7XG4gICAgdmFyIGZvbnRBc2NlbnQgPSBmb250SGVpZ2h0O1xuXG4gICAgaWYgKHN0eWxlLmFzY2VudCkge1xuICAgICAgZm9udEFzY2VudCA9IHN0eWxlLmFzY2VudCAqIGZvbnRBc2NlbnQ7XG4gICAgfSBlbHNlIGlmIChzdHlsZS5kZXNjZW50KSB7XG4gICAgICBmb250QXNjZW50ID0gKDEgKyBzdHlsZS5kZXNjZW50KSAqIGZvbnRBc2NlbnQ7XG4gICAgfVxuXG4gICAgbGV0IGxlZnQsIHRvcDtcblxuICAgIGlmIChhbmdsZSA9PT0gMCkge1xuICAgICAgbGVmdCA9IHR4WzRdO1xuICAgICAgdG9wID0gdHhbNV0gLSBmb250QXNjZW50O1xuICAgIH0gZWxzZSB7XG4gICAgICBsZWZ0ID0gdHhbNF0gKyBmb250QXNjZW50ICogTWF0aC5zaW4oYW5nbGUpO1xuICAgICAgdG9wID0gdHhbNV0gLSBmb250QXNjZW50ICogTWF0aC5jb3MoYW5nbGUpO1xuICAgIH1cblxuICAgIHRleHREaXYuc3R5bGUubGVmdCA9IGAke2xlZnR9cHhgO1xuICAgIHRleHREaXYuc3R5bGUudG9wID0gYCR7dG9wfXB4YDtcbiAgICB0ZXh0RGl2LnN0eWxlLmZvbnRTaXplID0gYCR7Zm9udEhlaWdodH1weGA7XG4gICAgdGV4dERpdi5zdHlsZS5mb250RmFtaWx5ID0gc3R5bGUuZm9udEZhbWlseTtcbiAgICB0ZXh0RGl2LnRleHRDb250ZW50ID0gZ2VvbS5zdHI7XG5cbiAgICBpZiAodGFzay5fZm9udEluc3BlY3RvckVuYWJsZWQpIHtcbiAgICAgIHRleHREaXYuZGF0YXNldC5mb250TmFtZSA9IGdlb20uZm9udE5hbWU7XG4gICAgfVxuXG4gICAgaWYgKGFuZ2xlICE9PSAwKSB7XG4gICAgICB0ZXh0RGl2UHJvcGVydGllcy5hbmdsZSA9IGFuZ2xlICogKDE4MCAvIE1hdGguUEkpO1xuICAgIH1cblxuICAgIGxldCBzaG91bGRTY2FsZVRleHQgPSBmYWxzZTtcblxuICAgIGlmIChnZW9tLnN0ci5sZW5ndGggPiAxKSB7XG4gICAgICBzaG91bGRTY2FsZVRleHQgPSB0cnVlO1xuICAgIH0gZWxzZSBpZiAoZ2VvbS50cmFuc2Zvcm1bMF0gIT09IGdlb20udHJhbnNmb3JtWzNdKSB7XG4gICAgICBjb25zdCBhYnNTY2FsZVggPSBNYXRoLmFicyhnZW9tLnRyYW5zZm9ybVswXSksXG4gICAgICAgICAgICBhYnNTY2FsZVkgPSBNYXRoLmFicyhnZW9tLnRyYW5zZm9ybVszXSk7XG5cbiAgICAgIGlmIChhYnNTY2FsZVggIT09IGFic1NjYWxlWSAmJiBNYXRoLm1heChhYnNTY2FsZVgsIGFic1NjYWxlWSkgLyBNYXRoLm1pbihhYnNTY2FsZVgsIGFic1NjYWxlWSkgPiAxLjUpIHtcbiAgICAgICAgc2hvdWxkU2NhbGVUZXh0ID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoc2hvdWxkU2NhbGVUZXh0KSB7XG4gICAgICBpZiAoc3R5bGUudmVydGljYWwpIHtcbiAgICAgICAgdGV4dERpdlByb3BlcnRpZXMuY2FudmFzV2lkdGggPSBnZW9tLmhlaWdodCAqIHRhc2suX3ZpZXdwb3J0LnNjYWxlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGV4dERpdlByb3BlcnRpZXMuY2FudmFzV2lkdGggPSBnZW9tLndpZHRoICogdGFzay5fdmlld3BvcnQuc2NhbGU7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdGFzay5fdGV4dERpdlByb3BlcnRpZXMuc2V0KHRleHREaXYsIHRleHREaXZQcm9wZXJ0aWVzKTtcblxuICAgIGlmICh0YXNrLl90ZXh0Q29udGVudFN0cmVhbSkge1xuICAgICAgdGFzay5fbGF5b3V0VGV4dCh0ZXh0RGl2KTtcbiAgICB9XG5cbiAgICBpZiAodGFzay5fZW5oYW5jZVRleHRTZWxlY3Rpb24pIHtcbiAgICAgIHZhciBhbmdsZUNvcyA9IDEsXG4gICAgICAgICAgYW5nbGVTaW4gPSAwO1xuXG4gICAgICBpZiAoYW5nbGUgIT09IDApIHtcbiAgICAgICAgYW5nbGVDb3MgPSBNYXRoLmNvcyhhbmdsZSk7XG4gICAgICAgIGFuZ2xlU2luID0gTWF0aC5zaW4oYW5nbGUpO1xuICAgICAgfVxuXG4gICAgICB2YXIgZGl2V2lkdGggPSAoc3R5bGUudmVydGljYWwgPyBnZW9tLmhlaWdodCA6IGdlb20ud2lkdGgpICogdGFzay5fdmlld3BvcnQuc2NhbGU7XG4gICAgICB2YXIgZGl2SGVpZ2h0ID0gZm9udEhlaWdodDtcbiAgICAgIHZhciBtLCBiO1xuXG4gICAgICBpZiAoYW5nbGUgIT09IDApIHtcbiAgICAgICAgbSA9IFthbmdsZUNvcywgYW5nbGVTaW4sIC1hbmdsZVNpbiwgYW5nbGVDb3MsIGxlZnQsIHRvcF07XG4gICAgICAgIGIgPSBfdXRpbC5VdGlsLmdldEF4aWFsQWxpZ25lZEJvdW5kaW5nQm94KFswLCAwLCBkaXZXaWR0aCwgZGl2SGVpZ2h0XSwgbSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBiID0gW2xlZnQsIHRvcCwgbGVmdCArIGRpdldpZHRoLCB0b3AgKyBkaXZIZWlnaHRdO1xuICAgICAgfVxuXG4gICAgICB0YXNrLl9ib3VuZHMucHVzaCh7XG4gICAgICAgIGxlZnQ6IGJbMF0sXG4gICAgICAgIHRvcDogYlsxXSxcbiAgICAgICAgcmlnaHQ6IGJbMl0sXG4gICAgICAgIGJvdHRvbTogYlszXSxcbiAgICAgICAgZGl2OiB0ZXh0RGl2LFxuICAgICAgICBzaXplOiBbZGl2V2lkdGgsIGRpdkhlaWdodF0sXG4gICAgICAgIG1cbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHJlbmRlcih0YXNrKSB7XG4gICAgaWYgKHRhc2suX2NhbmNlbGVkKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIHRleHREaXZzID0gdGFzay5fdGV4dERpdnM7XG4gICAgdmFyIGNhcGFiaWxpdHkgPSB0YXNrLl9jYXBhYmlsaXR5O1xuICAgIHZhciB0ZXh0RGl2c0xlbmd0aCA9IHRleHREaXZzLmxlbmd0aDtcblxuICAgIGlmICh0ZXh0RGl2c0xlbmd0aCA+IE1BWF9URVhUX0RJVlNfVE9fUkVOREVSKSB7XG4gICAgICB0YXNrLl9yZW5kZXJpbmdEb25lID0gdHJ1ZTtcbiAgICAgIGNhcGFiaWxpdHkucmVzb2x2ZSgpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmICghdGFzay5fdGV4dENvbnRlbnRTdHJlYW0pIHtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGV4dERpdnNMZW5ndGg7IGkrKykge1xuICAgICAgICB0YXNrLl9sYXlvdXRUZXh0KHRleHREaXZzW2ldKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB0YXNrLl9yZW5kZXJpbmdEb25lID0gdHJ1ZTtcbiAgICBjYXBhYmlsaXR5LnJlc29sdmUoKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGZpbmRQb3NpdGl2ZU1pbih0cywgb2Zmc2V0LCBjb3VudCkge1xuICAgIGxldCByZXN1bHQgPSAwO1xuXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjb3VudDsgaSsrKSB7XG4gICAgICBjb25zdCB0ID0gdHNbb2Zmc2V0KytdO1xuXG4gICAgICBpZiAodCA+IDApIHtcbiAgICAgICAgcmVzdWx0ID0gcmVzdWx0ID8gTWF0aC5taW4odCwgcmVzdWx0KSA6IHQ7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIGZ1bmN0aW9uIGV4cGFuZCh0YXNrKSB7XG4gICAgdmFyIGJvdW5kcyA9IHRhc2suX2JvdW5kcztcbiAgICB2YXIgdmlld3BvcnQgPSB0YXNrLl92aWV3cG9ydDtcbiAgICB2YXIgZXhwYW5kZWQgPSBleHBhbmRCb3VuZHModmlld3BvcnQud2lkdGgsIHZpZXdwb3J0LmhlaWdodCwgYm91bmRzKTtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZXhwYW5kZWQubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBkaXYgPSBib3VuZHNbaV0uZGl2O1xuXG4gICAgICB2YXIgZGl2UHJvcGVydGllcyA9IHRhc2suX3RleHREaXZQcm9wZXJ0aWVzLmdldChkaXYpO1xuXG4gICAgICBpZiAoZGl2UHJvcGVydGllcy5hbmdsZSA9PT0gMCkge1xuICAgICAgICBkaXZQcm9wZXJ0aWVzLnBhZGRpbmdMZWZ0ID0gYm91bmRzW2ldLmxlZnQgLSBleHBhbmRlZFtpXS5sZWZ0O1xuICAgICAgICBkaXZQcm9wZXJ0aWVzLnBhZGRpbmdUb3AgPSBib3VuZHNbaV0udG9wIC0gZXhwYW5kZWRbaV0udG9wO1xuICAgICAgICBkaXZQcm9wZXJ0aWVzLnBhZGRpbmdSaWdodCA9IGV4cGFuZGVkW2ldLnJpZ2h0IC0gYm91bmRzW2ldLnJpZ2h0O1xuICAgICAgICBkaXZQcm9wZXJ0aWVzLnBhZGRpbmdCb3R0b20gPSBleHBhbmRlZFtpXS5ib3R0b20gLSBib3VuZHNbaV0uYm90dG9tO1xuXG4gICAgICAgIHRhc2suX3RleHREaXZQcm9wZXJ0aWVzLnNldChkaXYsIGRpdlByb3BlcnRpZXMpO1xuXG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICB2YXIgZSA9IGV4cGFuZGVkW2ldLFxuICAgICAgICAgIGIgPSBib3VuZHNbaV07XG4gICAgICB2YXIgbSA9IGIubSxcbiAgICAgICAgICBjID0gbVswXSxcbiAgICAgICAgICBzID0gbVsxXTtcbiAgICAgIHZhciBwb2ludHMgPSBbWzAsIDBdLCBbMCwgYi5zaXplWzFdXSwgW2Iuc2l6ZVswXSwgMF0sIGIuc2l6ZV07XG4gICAgICB2YXIgdHMgPSBuZXcgRmxvYXQ2NEFycmF5KDY0KTtcbiAgICAgIHBvaW50cy5mb3JFYWNoKGZ1bmN0aW9uIChwLCBqKSB7XG4gICAgICAgIHZhciB0ID0gX3V0aWwuVXRpbC5hcHBseVRyYW5zZm9ybShwLCBtKTtcblxuICAgICAgICB0c1tqICsgMF0gPSBjICYmIChlLmxlZnQgLSB0WzBdKSAvIGM7XG4gICAgICAgIHRzW2ogKyA0XSA9IHMgJiYgKGUudG9wIC0gdFsxXSkgLyBzO1xuICAgICAgICB0c1tqICsgOF0gPSBjICYmIChlLnJpZ2h0IC0gdFswXSkgLyBjO1xuICAgICAgICB0c1tqICsgMTJdID0gcyAmJiAoZS5ib3R0b20gLSB0WzFdKSAvIHM7XG4gICAgICAgIHRzW2ogKyAxNl0gPSBzICYmIChlLmxlZnQgLSB0WzBdKSAvIC1zO1xuICAgICAgICB0c1tqICsgMjBdID0gYyAmJiAoZS50b3AgLSB0WzFdKSAvIGM7XG4gICAgICAgIHRzW2ogKyAyNF0gPSBzICYmIChlLnJpZ2h0IC0gdFswXSkgLyAtcztcbiAgICAgICAgdHNbaiArIDI4XSA9IGMgJiYgKGUuYm90dG9tIC0gdFsxXSkgLyBjO1xuICAgICAgICB0c1tqICsgMzJdID0gYyAmJiAoZS5sZWZ0IC0gdFswXSkgLyAtYztcbiAgICAgICAgdHNbaiArIDM2XSA9IHMgJiYgKGUudG9wIC0gdFsxXSkgLyAtcztcbiAgICAgICAgdHNbaiArIDQwXSA9IGMgJiYgKGUucmlnaHQgLSB0WzBdKSAvIC1jO1xuICAgICAgICB0c1tqICsgNDRdID0gcyAmJiAoZS5ib3R0b20gLSB0WzFdKSAvIC1zO1xuICAgICAgICB0c1tqICsgNDhdID0gcyAmJiAoZS5sZWZ0IC0gdFswXSkgLyBzO1xuICAgICAgICB0c1tqICsgNTJdID0gYyAmJiAoZS50b3AgLSB0WzFdKSAvIC1jO1xuICAgICAgICB0c1tqICsgNTZdID0gcyAmJiAoZS5yaWdodCAtIHRbMF0pIC8gcztcbiAgICAgICAgdHNbaiArIDYwXSA9IGMgJiYgKGUuYm90dG9tIC0gdFsxXSkgLyAtYztcbiAgICAgIH0pO1xuICAgICAgdmFyIGJveFNjYWxlID0gMSArIE1hdGgubWluKE1hdGguYWJzKGMpLCBNYXRoLmFicyhzKSk7XG4gICAgICBkaXZQcm9wZXJ0aWVzLnBhZGRpbmdMZWZ0ID0gZmluZFBvc2l0aXZlTWluKHRzLCAzMiwgMTYpIC8gYm94U2NhbGU7XG4gICAgICBkaXZQcm9wZXJ0aWVzLnBhZGRpbmdUb3AgPSBmaW5kUG9zaXRpdmVNaW4odHMsIDQ4LCAxNikgLyBib3hTY2FsZTtcbiAgICAgIGRpdlByb3BlcnRpZXMucGFkZGluZ1JpZ2h0ID0gZmluZFBvc2l0aXZlTWluKHRzLCAwLCAxNikgLyBib3hTY2FsZTtcbiAgICAgIGRpdlByb3BlcnRpZXMucGFkZGluZ0JvdHRvbSA9IGZpbmRQb3NpdGl2ZU1pbih0cywgMTYsIDE2KSAvIGJveFNjYWxlO1xuXG4gICAgICB0YXNrLl90ZXh0RGl2UHJvcGVydGllcy5zZXQoZGl2LCBkaXZQcm9wZXJ0aWVzKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBleHBhbmRCb3VuZHMod2lkdGgsIGhlaWdodCwgYm94ZXMpIHtcbiAgICB2YXIgYm91bmRzID0gYm94ZXMubWFwKGZ1bmN0aW9uIChib3gsIGkpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHgxOiBib3gubGVmdCxcbiAgICAgICAgeTE6IGJveC50b3AsXG4gICAgICAgIHgyOiBib3gucmlnaHQsXG4gICAgICAgIHkyOiBib3guYm90dG9tLFxuICAgICAgICBpbmRleDogaSxcbiAgICAgICAgeDFOZXc6IHVuZGVmaW5lZCxcbiAgICAgICAgeDJOZXc6IHVuZGVmaW5lZFxuICAgICAgfTtcbiAgICB9KTtcbiAgICBleHBhbmRCb3VuZHNMVFIod2lkdGgsIGJvdW5kcyk7XG4gICAgdmFyIGV4cGFuZGVkID0gbmV3IEFycmF5KGJveGVzLmxlbmd0aCk7XG4gICAgYm91bmRzLmZvckVhY2goZnVuY3Rpb24gKGIpIHtcbiAgICAgIHZhciBpID0gYi5pbmRleDtcbiAgICAgIGV4cGFuZGVkW2ldID0ge1xuICAgICAgICBsZWZ0OiBiLngxTmV3LFxuICAgICAgICB0b3A6IDAsXG4gICAgICAgIHJpZ2h0OiBiLngyTmV3LFxuICAgICAgICBib3R0b206IDBcbiAgICAgIH07XG4gICAgfSk7XG4gICAgYm94ZXMubWFwKGZ1bmN0aW9uIChib3gsIGkpIHtcbiAgICAgIHZhciBlID0gZXhwYW5kZWRbaV0sXG4gICAgICAgICAgYiA9IGJvdW5kc1tpXTtcbiAgICAgIGIueDEgPSBib3gudG9wO1xuICAgICAgYi55MSA9IHdpZHRoIC0gZS5yaWdodDtcbiAgICAgIGIueDIgPSBib3guYm90dG9tO1xuICAgICAgYi55MiA9IHdpZHRoIC0gZS5sZWZ0O1xuICAgICAgYi5pbmRleCA9IGk7XG4gICAgICBiLngxTmV3ID0gdW5kZWZpbmVkO1xuICAgICAgYi54Mk5ldyA9IHVuZGVmaW5lZDtcbiAgICB9KTtcbiAgICBleHBhbmRCb3VuZHNMVFIoaGVpZ2h0LCBib3VuZHMpO1xuICAgIGJvdW5kcy5mb3JFYWNoKGZ1bmN0aW9uIChiKSB7XG4gICAgICB2YXIgaSA9IGIuaW5kZXg7XG4gICAgICBleHBhbmRlZFtpXS50b3AgPSBiLngxTmV3O1xuICAgICAgZXhwYW5kZWRbaV0uYm90dG9tID0gYi54Mk5ldztcbiAgICB9KTtcbiAgICByZXR1cm4gZXhwYW5kZWQ7XG4gIH1cblxuICBmdW5jdGlvbiBleHBhbmRCb3VuZHNMVFIod2lkdGgsIGJvdW5kcykge1xuICAgIGJvdW5kcy5zb3J0KGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgICByZXR1cm4gYS54MSAtIGIueDEgfHwgYS5pbmRleCAtIGIuaW5kZXg7XG4gICAgfSk7XG4gICAgdmFyIGZha2VCb3VuZGFyeSA9IHtcbiAgICAgIHgxOiAtSW5maW5pdHksXG4gICAgICB5MTogLUluZmluaXR5LFxuICAgICAgeDI6IDAsXG4gICAgICB5MjogSW5maW5pdHksXG4gICAgICBpbmRleDogLTEsXG4gICAgICB4MU5ldzogMCxcbiAgICAgIHgyTmV3OiAwXG4gICAgfTtcbiAgICB2YXIgaG9yaXpvbiA9IFt7XG4gICAgICBzdGFydDogLUluZmluaXR5LFxuICAgICAgZW5kOiBJbmZpbml0eSxcbiAgICAgIGJvdW5kYXJ5OiBmYWtlQm91bmRhcnlcbiAgICB9XTtcbiAgICBib3VuZHMuZm9yRWFjaChmdW5jdGlvbiAoYm91bmRhcnkpIHtcbiAgICAgIHZhciBpID0gMDtcblxuICAgICAgd2hpbGUgKGkgPCBob3Jpem9uLmxlbmd0aCAmJiBob3Jpem9uW2ldLmVuZCA8PSBib3VuZGFyeS55MSkge1xuICAgICAgICBpKys7XG4gICAgICB9XG5cbiAgICAgIHZhciBqID0gaG9yaXpvbi5sZW5ndGggLSAxO1xuXG4gICAgICB3aGlsZSAoaiA+PSAwICYmIGhvcml6b25bal0uc3RhcnQgPj0gYm91bmRhcnkueTIpIHtcbiAgICAgICAgai0tO1xuICAgICAgfVxuXG4gICAgICB2YXIgaG9yaXpvblBhcnQsIGFmZmVjdGVkQm91bmRhcnk7XG4gICAgICB2YXIgcSxcbiAgICAgICAgICBrLFxuICAgICAgICAgIG1heFhOZXcgPSAtSW5maW5pdHk7XG5cbiAgICAgIGZvciAocSA9IGk7IHEgPD0gajsgcSsrKSB7XG4gICAgICAgIGhvcml6b25QYXJ0ID0gaG9yaXpvbltxXTtcbiAgICAgICAgYWZmZWN0ZWRCb3VuZGFyeSA9IGhvcml6b25QYXJ0LmJvdW5kYXJ5O1xuICAgICAgICB2YXIgeE5ldztcblxuICAgICAgICBpZiAoYWZmZWN0ZWRCb3VuZGFyeS54MiA+IGJvdW5kYXJ5LngxKSB7XG4gICAgICAgICAgeE5ldyA9IGFmZmVjdGVkQm91bmRhcnkuaW5kZXggPiBib3VuZGFyeS5pbmRleCA/IGFmZmVjdGVkQm91bmRhcnkueDFOZXcgOiBib3VuZGFyeS54MTtcbiAgICAgICAgfSBlbHNlIGlmIChhZmZlY3RlZEJvdW5kYXJ5LngyTmV3ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICB4TmV3ID0gKGFmZmVjdGVkQm91bmRhcnkueDIgKyBib3VuZGFyeS54MSkgLyAyO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHhOZXcgPSBhZmZlY3RlZEJvdW5kYXJ5LngyTmV3O1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHhOZXcgPiBtYXhYTmV3KSB7XG4gICAgICAgICAgbWF4WE5ldyA9IHhOZXc7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgYm91bmRhcnkueDFOZXcgPSBtYXhYTmV3O1xuXG4gICAgICBmb3IgKHEgPSBpOyBxIDw9IGo7IHErKykge1xuICAgICAgICBob3Jpem9uUGFydCA9IGhvcml6b25bcV07XG4gICAgICAgIGFmZmVjdGVkQm91bmRhcnkgPSBob3Jpem9uUGFydC5ib3VuZGFyeTtcblxuICAgICAgICBpZiAoYWZmZWN0ZWRCb3VuZGFyeS54Mk5ldyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgaWYgKGFmZmVjdGVkQm91bmRhcnkueDIgPiBib3VuZGFyeS54MSkge1xuICAgICAgICAgICAgaWYgKGFmZmVjdGVkQm91bmRhcnkuaW5kZXggPiBib3VuZGFyeS5pbmRleCkge1xuICAgICAgICAgICAgICBhZmZlY3RlZEJvdW5kYXJ5LngyTmV3ID0gYWZmZWN0ZWRCb3VuZGFyeS54MjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgYWZmZWN0ZWRCb3VuZGFyeS54Mk5ldyA9IG1heFhOZXc7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKGFmZmVjdGVkQm91bmRhcnkueDJOZXcgPiBtYXhYTmV3KSB7XG4gICAgICAgICAgYWZmZWN0ZWRCb3VuZGFyeS54Mk5ldyA9IE1hdGgubWF4KG1heFhOZXcsIGFmZmVjdGVkQm91bmRhcnkueDIpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHZhciBjaGFuZ2VkSG9yaXpvbiA9IFtdLFxuICAgICAgICAgIGxhc3RCb3VuZGFyeSA9IG51bGw7XG5cbiAgICAgIGZvciAocSA9IGk7IHEgPD0gajsgcSsrKSB7XG4gICAgICAgIGhvcml6b25QYXJ0ID0gaG9yaXpvbltxXTtcbiAgICAgICAgYWZmZWN0ZWRCb3VuZGFyeSA9IGhvcml6b25QYXJ0LmJvdW5kYXJ5O1xuICAgICAgICB2YXIgdXNlQm91bmRhcnkgPSBhZmZlY3RlZEJvdW5kYXJ5LngyID4gYm91bmRhcnkueDIgPyBhZmZlY3RlZEJvdW5kYXJ5IDogYm91bmRhcnk7XG5cbiAgICAgICAgaWYgKGxhc3RCb3VuZGFyeSA9PT0gdXNlQm91bmRhcnkpIHtcbiAgICAgICAgICBjaGFuZ2VkSG9yaXpvbltjaGFuZ2VkSG9yaXpvbi5sZW5ndGggLSAxXS5lbmQgPSBob3Jpem9uUGFydC5lbmQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY2hhbmdlZEhvcml6b24ucHVzaCh7XG4gICAgICAgICAgICBzdGFydDogaG9yaXpvblBhcnQuc3RhcnQsXG4gICAgICAgICAgICBlbmQ6IGhvcml6b25QYXJ0LmVuZCxcbiAgICAgICAgICAgIGJvdW5kYXJ5OiB1c2VCb3VuZGFyeVxuICAgICAgICAgIH0pO1xuICAgICAgICAgIGxhc3RCb3VuZGFyeSA9IHVzZUJvdW5kYXJ5O1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChob3Jpem9uW2ldLnN0YXJ0IDwgYm91bmRhcnkueTEpIHtcbiAgICAgICAgY2hhbmdlZEhvcml6b25bMF0uc3RhcnQgPSBib3VuZGFyeS55MTtcbiAgICAgICAgY2hhbmdlZEhvcml6b24udW5zaGlmdCh7XG4gICAgICAgICAgc3RhcnQ6IGhvcml6b25baV0uc3RhcnQsXG4gICAgICAgICAgZW5kOiBib3VuZGFyeS55MSxcbiAgICAgICAgICBib3VuZGFyeTogaG9yaXpvbltpXS5ib3VuZGFyeVxuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgaWYgKGJvdW5kYXJ5LnkyIDwgaG9yaXpvbltqXS5lbmQpIHtcbiAgICAgICAgY2hhbmdlZEhvcml6b25bY2hhbmdlZEhvcml6b24ubGVuZ3RoIC0gMV0uZW5kID0gYm91bmRhcnkueTI7XG4gICAgICAgIGNoYW5nZWRIb3Jpem9uLnB1c2goe1xuICAgICAgICAgIHN0YXJ0OiBib3VuZGFyeS55MixcbiAgICAgICAgICBlbmQ6IGhvcml6b25bal0uZW5kLFxuICAgICAgICAgIGJvdW5kYXJ5OiBob3Jpem9uW2pdLmJvdW5kYXJ5XG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICBmb3IgKHEgPSBpOyBxIDw9IGo7IHErKykge1xuICAgICAgICBob3Jpem9uUGFydCA9IGhvcml6b25bcV07XG4gICAgICAgIGFmZmVjdGVkQm91bmRhcnkgPSBob3Jpem9uUGFydC5ib3VuZGFyeTtcblxuICAgICAgICBpZiAoYWZmZWN0ZWRCb3VuZGFyeS54Mk5ldyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgdXNlZCA9IGZhbHNlO1xuXG4gICAgICAgIGZvciAoayA9IGkgLSAxOyAhdXNlZCAmJiBrID49IDAgJiYgaG9yaXpvbltrXS5zdGFydCA+PSBhZmZlY3RlZEJvdW5kYXJ5LnkxOyBrLS0pIHtcbiAgICAgICAgICB1c2VkID0gaG9yaXpvbltrXS5ib3VuZGFyeSA9PT0gYWZmZWN0ZWRCb3VuZGFyeTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZvciAoayA9IGogKyAxOyAhdXNlZCAmJiBrIDwgaG9yaXpvbi5sZW5ndGggJiYgaG9yaXpvbltrXS5lbmQgPD0gYWZmZWN0ZWRCb3VuZGFyeS55MjsgaysrKSB7XG4gICAgICAgICAgdXNlZCA9IGhvcml6b25ba10uYm91bmRhcnkgPT09IGFmZmVjdGVkQm91bmRhcnk7XG4gICAgICAgIH1cblxuICAgICAgICBmb3IgKGsgPSAwOyAhdXNlZCAmJiBrIDwgY2hhbmdlZEhvcml6b24ubGVuZ3RoOyBrKyspIHtcbiAgICAgICAgICB1c2VkID0gY2hhbmdlZEhvcml6b25ba10uYm91bmRhcnkgPT09IGFmZmVjdGVkQm91bmRhcnk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIXVzZWQpIHtcbiAgICAgICAgICBhZmZlY3RlZEJvdW5kYXJ5LngyTmV3ID0gbWF4WE5ldztcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBBcnJheS5wcm90b3R5cGUuc3BsaWNlLmFwcGx5KGhvcml6b24sIFtpLCBqIC0gaSArIDFdLmNvbmNhdChjaGFuZ2VkSG9yaXpvbikpO1xuICAgIH0pO1xuICAgIGhvcml6b24uZm9yRWFjaChmdW5jdGlvbiAoaG9yaXpvblBhcnQpIHtcbiAgICAgIHZhciBhZmZlY3RlZEJvdW5kYXJ5ID0gaG9yaXpvblBhcnQuYm91bmRhcnk7XG5cbiAgICAgIGlmIChhZmZlY3RlZEJvdW5kYXJ5LngyTmV3ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgYWZmZWN0ZWRCb3VuZGFyeS54Mk5ldyA9IE1hdGgubWF4KHdpZHRoLCBhZmZlY3RlZEJvdW5kYXJ5LngyKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIFRleHRMYXllclJlbmRlclRhc2soe1xuICAgIHRleHRDb250ZW50LFxuICAgIHRleHRDb250ZW50U3RyZWFtLFxuICAgIGNvbnRhaW5lcixcbiAgICB2aWV3cG9ydCxcbiAgICB0ZXh0RGl2cyxcbiAgICB0ZXh0Q29udGVudEl0ZW1zU3RyLFxuICAgIGVuaGFuY2VUZXh0U2VsZWN0aW9uXG4gIH0pIHtcbiAgICB0aGlzLl90ZXh0Q29udGVudCA9IHRleHRDb250ZW50O1xuICAgIHRoaXMuX3RleHRDb250ZW50U3RyZWFtID0gdGV4dENvbnRlbnRTdHJlYW07XG4gICAgdGhpcy5fY29udGFpbmVyID0gY29udGFpbmVyO1xuICAgIHRoaXMuX3ZpZXdwb3J0ID0gdmlld3BvcnQ7XG4gICAgdGhpcy5fdGV4dERpdnMgPSB0ZXh0RGl2cyB8fCBbXTtcbiAgICB0aGlzLl90ZXh0Q29udGVudEl0ZW1zU3RyID0gdGV4dENvbnRlbnRJdGVtc1N0ciB8fCBbXTtcbiAgICB0aGlzLl9lbmhhbmNlVGV4dFNlbGVjdGlvbiA9ICEhZW5oYW5jZVRleHRTZWxlY3Rpb247XG4gICAgdGhpcy5fZm9udEluc3BlY3RvckVuYWJsZWQgPSAhIShnbG9iYWxUaGlzLkZvbnRJbnNwZWN0b3IgJiYgZ2xvYmFsVGhpcy5Gb250SW5zcGVjdG9yLmVuYWJsZWQpO1xuICAgIHRoaXMuX3JlYWRlciA9IG51bGw7XG4gICAgdGhpcy5fbGF5b3V0VGV4dExhc3RGb250U2l6ZSA9IG51bGw7XG4gICAgdGhpcy5fbGF5b3V0VGV4dExhc3RGb250RmFtaWx5ID0gbnVsbDtcbiAgICB0aGlzLl9sYXlvdXRUZXh0Q3R4ID0gbnVsbDtcbiAgICB0aGlzLl90ZXh0RGl2UHJvcGVydGllcyA9IG5ldyBXZWFrTWFwKCk7XG4gICAgdGhpcy5fcmVuZGVyaW5nRG9uZSA9IGZhbHNlO1xuICAgIHRoaXMuX2NhbmNlbGVkID0gZmFsc2U7XG4gICAgdGhpcy5fY2FwYWJpbGl0eSA9ICgwLCBfdXRpbC5jcmVhdGVQcm9taXNlQ2FwYWJpbGl0eSkoKTtcbiAgICB0aGlzLl9yZW5kZXJUaW1lciA9IG51bGw7XG4gICAgdGhpcy5fYm91bmRzID0gW107XG5cbiAgICB0aGlzLl9jYXBhYmlsaXR5LnByb21pc2UuZmluYWxseSgoKSA9PiB7XG4gICAgICBpZiAodGhpcy5fbGF5b3V0VGV4dEN0eCkge1xuICAgICAgICB0aGlzLl9sYXlvdXRUZXh0Q3R4LmNhbnZhcy53aWR0aCA9IDA7XG4gICAgICAgIHRoaXMuX2xheW91dFRleHRDdHguY2FudmFzLmhlaWdodCA9IDA7XG4gICAgICAgIHRoaXMuX2xheW91dFRleHRDdHggPSBudWxsO1xuICAgICAgfVxuICAgIH0pLmNhdGNoKCgpID0+IHt9KTtcbiAgfVxuXG4gIFRleHRMYXllclJlbmRlclRhc2sucHJvdG90eXBlID0ge1xuICAgIGdldCBwcm9taXNlKCkge1xuICAgICAgcmV0dXJuIHRoaXMuX2NhcGFiaWxpdHkucHJvbWlzZTtcbiAgICB9LFxuXG4gICAgY2FuY2VsOiBmdW5jdGlvbiBUZXh0TGF5ZXJfY2FuY2VsKCkge1xuICAgICAgdGhpcy5fY2FuY2VsZWQgPSB0cnVlO1xuXG4gICAgICBpZiAodGhpcy5fcmVhZGVyKSB7XG4gICAgICAgIHRoaXMuX3JlYWRlci5jYW5jZWwobmV3IF91dGlsLkFib3J0RXhjZXB0aW9uKFwiVGV4dExheWVyIHRhc2sgY2FuY2VsbGVkLlwiKSk7XG5cbiAgICAgICAgdGhpcy5fcmVhZGVyID0gbnVsbDtcbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMuX3JlbmRlclRpbWVyICE9PSBudWxsKSB7XG4gICAgICAgIGNsZWFyVGltZW91dCh0aGlzLl9yZW5kZXJUaW1lcik7XG4gICAgICAgIHRoaXMuX3JlbmRlclRpbWVyID0gbnVsbDtcbiAgICAgIH1cblxuICAgICAgdGhpcy5fY2FwYWJpbGl0eS5yZWplY3QobmV3IEVycm9yKFwiVGV4dExheWVyIHRhc2sgY2FuY2VsbGVkLlwiKSk7XG4gICAgfSxcblxuICAgIF9wcm9jZXNzSXRlbXMoaXRlbXMsIHN0eWxlQ2FjaGUpIHtcbiAgICAgIGZvciAobGV0IGkgPSAwLCBsZW4gPSBpdGVtcy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgICB0aGlzLl90ZXh0Q29udGVudEl0ZW1zU3RyLnB1c2goaXRlbXNbaV0uc3RyKTtcblxuICAgICAgICBhcHBlbmRUZXh0KHRoaXMsIGl0ZW1zW2ldLCBzdHlsZUNhY2hlKTtcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgX2xheW91dFRleHQodGV4dERpdikge1xuICAgICAgY29uc3QgdGV4dERpdlByb3BlcnRpZXMgPSB0aGlzLl90ZXh0RGl2UHJvcGVydGllcy5nZXQodGV4dERpdik7XG5cbiAgICAgIGlmICh0ZXh0RGl2UHJvcGVydGllcy5pc1doaXRlc3BhY2UpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBsZXQgdHJhbnNmb3JtID0gXCJcIjtcblxuICAgICAgaWYgKHRleHREaXZQcm9wZXJ0aWVzLmNhbnZhc1dpZHRoICE9PSAwKSB7XG4gICAgICAgIGNvbnN0IHtcbiAgICAgICAgICBmb250U2l6ZSxcbiAgICAgICAgICBmb250RmFtaWx5XG4gICAgICAgIH0gPSB0ZXh0RGl2LnN0eWxlO1xuXG4gICAgICAgIGlmIChmb250U2l6ZSAhPT0gdGhpcy5fbGF5b3V0VGV4dExhc3RGb250U2l6ZSB8fCBmb250RmFtaWx5ICE9PSB0aGlzLl9sYXlvdXRUZXh0TGFzdEZvbnRGYW1pbHkpIHtcbiAgICAgICAgICB0aGlzLl9sYXlvdXRUZXh0Q3R4LmZvbnQgPSBgJHtmb250U2l6ZX0gJHtmb250RmFtaWx5fWA7XG4gICAgICAgICAgdGhpcy5fbGF5b3V0VGV4dExhc3RGb250U2l6ZSA9IGZvbnRTaXplO1xuICAgICAgICAgIHRoaXMuX2xheW91dFRleHRMYXN0Rm9udEZhbWlseSA9IGZvbnRGYW1pbHk7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCB7XG4gICAgICAgICAgd2lkdGhcbiAgICAgICAgfSA9IHRoaXMuX2xheW91dFRleHRDdHgubWVhc3VyZVRleHQodGV4dERpdi50ZXh0Q29udGVudCk7XG5cbiAgICAgICAgaWYgKHdpZHRoID4gMCkge1xuICAgICAgICAgIHRleHREaXZQcm9wZXJ0aWVzLnNjYWxlID0gdGV4dERpdlByb3BlcnRpZXMuY2FudmFzV2lkdGggLyB3aWR0aDtcbiAgICAgICAgICB0cmFuc2Zvcm0gPSBgc2NhbGVYKCR7dGV4dERpdlByb3BlcnRpZXMuc2NhbGV9KWA7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKHRleHREaXZQcm9wZXJ0aWVzLmFuZ2xlICE9PSAwKSB7XG4gICAgICAgIHRyYW5zZm9ybSA9IGByb3RhdGUoJHt0ZXh0RGl2UHJvcGVydGllcy5hbmdsZX1kZWcpICR7dHJhbnNmb3JtfWA7XG4gICAgICB9XG5cbiAgICAgIGlmICh0cmFuc2Zvcm0ubGVuZ3RoID4gMCkge1xuICAgICAgICBpZiAodGhpcy5fZW5oYW5jZVRleHRTZWxlY3Rpb24pIHtcbiAgICAgICAgICB0ZXh0RGl2UHJvcGVydGllcy5vcmlnaW5hbFRyYW5zZm9ybSA9IHRyYW5zZm9ybTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRleHREaXYuc3R5bGUudHJhbnNmb3JtID0gdHJhbnNmb3JtO1xuICAgICAgfVxuXG4gICAgICB0aGlzLl90ZXh0RGl2UHJvcGVydGllcy5zZXQodGV4dERpdiwgdGV4dERpdlByb3BlcnRpZXMpO1xuXG4gICAgICB0aGlzLl9jb250YWluZXIuYXBwZW5kQ2hpbGQodGV4dERpdik7XG4gICAgfSxcblxuICAgIF9yZW5kZXI6IGZ1bmN0aW9uIFRleHRMYXllcl9yZW5kZXIodGltZW91dCkge1xuICAgICAgY29uc3QgY2FwYWJpbGl0eSA9ICgwLCBfdXRpbC5jcmVhdGVQcm9taXNlQ2FwYWJpbGl0eSkoKTtcbiAgICAgIGxldCBzdHlsZUNhY2hlID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICAgIGNvbnN0IGNhbnZhcyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJjYW52YXNcIik7XG4gICAgICBjYW52YXMubW96T3BhcXVlID0gdHJ1ZTtcbiAgICAgIHRoaXMuX2xheW91dFRleHRDdHggPSBjYW52YXMuZ2V0Q29udGV4dChcIjJkXCIsIHtcbiAgICAgICAgYWxwaGE6IGZhbHNlXG4gICAgICB9KTtcblxuICAgICAgaWYgKHRoaXMuX3RleHRDb250ZW50KSB7XG4gICAgICAgIGNvbnN0IHRleHRJdGVtcyA9IHRoaXMuX3RleHRDb250ZW50Lml0ZW1zO1xuICAgICAgICBjb25zdCB0ZXh0U3R5bGVzID0gdGhpcy5fdGV4dENvbnRlbnQuc3R5bGVzO1xuXG4gICAgICAgIHRoaXMuX3Byb2Nlc3NJdGVtcyh0ZXh0SXRlbXMsIHRleHRTdHlsZXMpO1xuXG4gICAgICAgIGNhcGFiaWxpdHkucmVzb2x2ZSgpO1xuICAgICAgfSBlbHNlIGlmICh0aGlzLl90ZXh0Q29udGVudFN0cmVhbSkge1xuICAgICAgICBjb25zdCBwdW1wID0gKCkgPT4ge1xuICAgICAgICAgIHRoaXMuX3JlYWRlci5yZWFkKCkudGhlbigoe1xuICAgICAgICAgICAgdmFsdWUsXG4gICAgICAgICAgICBkb25lXG4gICAgICAgICAgfSkgPT4ge1xuICAgICAgICAgICAgaWYgKGRvbmUpIHtcbiAgICAgICAgICAgICAgY2FwYWJpbGl0eS5yZXNvbHZlKCk7XG4gICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgT2JqZWN0LmFzc2lnbihzdHlsZUNhY2hlLCB2YWx1ZS5zdHlsZXMpO1xuXG4gICAgICAgICAgICB0aGlzLl9wcm9jZXNzSXRlbXModmFsdWUuaXRlbXMsIHN0eWxlQ2FjaGUpO1xuXG4gICAgICAgICAgICBwdW1wKCk7XG4gICAgICAgICAgfSwgY2FwYWJpbGl0eS5yZWplY3QpO1xuICAgICAgICB9O1xuXG4gICAgICAgIHRoaXMuX3JlYWRlciA9IHRoaXMuX3RleHRDb250ZW50U3RyZWFtLmdldFJlYWRlcigpO1xuICAgICAgICBwdW1wKCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ05laXRoZXIgXCJ0ZXh0Q29udGVudFwiIG5vciBcInRleHRDb250ZW50U3RyZWFtXCInICsgXCIgcGFyYW1ldGVycyBzcGVjaWZpZWQuXCIpO1xuICAgICAgfVxuXG4gICAgICBjYXBhYmlsaXR5LnByb21pc2UudGhlbigoKSA9PiB7XG4gICAgICAgIHN0eWxlQ2FjaGUgPSBudWxsO1xuXG4gICAgICAgIGlmICghdGltZW91dCkge1xuICAgICAgICAgIHJlbmRlcih0aGlzKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLl9yZW5kZXJUaW1lciA9IHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgcmVuZGVyKHRoaXMpO1xuICAgICAgICAgICAgdGhpcy5fcmVuZGVyVGltZXIgPSBudWxsO1xuICAgICAgICAgIH0sIHRpbWVvdXQpO1xuICAgICAgICB9XG4gICAgICB9LCB0aGlzLl9jYXBhYmlsaXR5LnJlamVjdCk7XG4gICAgfSxcbiAgICBleHBhbmRUZXh0RGl2czogZnVuY3Rpb24gVGV4dExheWVyX2V4cGFuZFRleHREaXZzKGV4cGFuZERpdnMpIHtcbiAgICAgIGlmICghdGhpcy5fZW5oYW5jZVRleHRTZWxlY3Rpb24gfHwgIXRoaXMuX3JlbmRlcmluZ0RvbmUpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5fYm91bmRzICE9PSBudWxsKSB7XG4gICAgICAgIGV4cGFuZCh0aGlzKTtcbiAgICAgICAgdGhpcy5fYm91bmRzID0gbnVsbDtcbiAgICAgIH1cblxuICAgICAgY29uc3QgdHJhbnNmb3JtQnVmID0gW10sXG4gICAgICAgICAgICBwYWRkaW5nQnVmID0gW107XG5cbiAgICAgIGZvciAodmFyIGkgPSAwLCBpaSA9IHRoaXMuX3RleHREaXZzLmxlbmd0aDsgaSA8IGlpOyBpKyspIHtcbiAgICAgICAgY29uc3QgZGl2ID0gdGhpcy5fdGV4dERpdnNbaV07XG5cbiAgICAgICAgY29uc3QgZGl2UHJvcHMgPSB0aGlzLl90ZXh0RGl2UHJvcGVydGllcy5nZXQoZGl2KTtcblxuICAgICAgICBpZiAoZGl2UHJvcHMuaXNXaGl0ZXNwYWNlKSB7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoZXhwYW5kRGl2cykge1xuICAgICAgICAgIHRyYW5zZm9ybUJ1Zi5sZW5ndGggPSAwO1xuICAgICAgICAgIHBhZGRpbmdCdWYubGVuZ3RoID0gMDtcblxuICAgICAgICAgIGlmIChkaXZQcm9wcy5vcmlnaW5hbFRyYW5zZm9ybSkge1xuICAgICAgICAgICAgdHJhbnNmb3JtQnVmLnB1c2goZGl2UHJvcHMub3JpZ2luYWxUcmFuc2Zvcm0pO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChkaXZQcm9wcy5wYWRkaW5nVG9wID4gMCkge1xuICAgICAgICAgICAgcGFkZGluZ0J1Zi5wdXNoKGAke2RpdlByb3BzLnBhZGRpbmdUb3B9cHhgKTtcbiAgICAgICAgICAgIHRyYW5zZm9ybUJ1Zi5wdXNoKGB0cmFuc2xhdGVZKCR7LWRpdlByb3BzLnBhZGRpbmdUb3B9cHgpYCk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHBhZGRpbmdCdWYucHVzaCgwKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoZGl2UHJvcHMucGFkZGluZ1JpZ2h0ID4gMCkge1xuICAgICAgICAgICAgcGFkZGluZ0J1Zi5wdXNoKGAke2RpdlByb3BzLnBhZGRpbmdSaWdodCAvIGRpdlByb3BzLnNjYWxlfXB4YCk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHBhZGRpbmdCdWYucHVzaCgwKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoZGl2UHJvcHMucGFkZGluZ0JvdHRvbSA+IDApIHtcbiAgICAgICAgICAgIHBhZGRpbmdCdWYucHVzaChgJHtkaXZQcm9wcy5wYWRkaW5nQm90dG9tfXB4YCk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHBhZGRpbmdCdWYucHVzaCgwKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoZGl2UHJvcHMucGFkZGluZ0xlZnQgPiAwKSB7XG4gICAgICAgICAgICBwYWRkaW5nQnVmLnB1c2goYCR7ZGl2UHJvcHMucGFkZGluZ0xlZnQgLyBkaXZQcm9wcy5zY2FsZX1weGApO1xuICAgICAgICAgICAgdHJhbnNmb3JtQnVmLnB1c2goYHRyYW5zbGF0ZVgoJHstZGl2UHJvcHMucGFkZGluZ0xlZnQgLyBkaXZQcm9wcy5zY2FsZX1weClgKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcGFkZGluZ0J1Zi5wdXNoKDApO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGRpdi5zdHlsZS5wYWRkaW5nID0gcGFkZGluZ0J1Zi5qb2luKFwiIFwiKTtcblxuICAgICAgICAgIGlmICh0cmFuc2Zvcm1CdWYubGVuZ3RoKSB7XG4gICAgICAgICAgICBkaXYuc3R5bGUudHJhbnNmb3JtID0gdHJhbnNmb3JtQnVmLmpvaW4oXCIgXCIpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBkaXYuc3R5bGUucGFkZGluZyA9IG51bGw7XG4gICAgICAgICAgZGl2LnN0eWxlLnRyYW5zZm9ybSA9IGRpdlByb3BzLm9yaWdpbmFsVHJhbnNmb3JtO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIGZ1bmN0aW9uIHJlbmRlclRleHRMYXllcihyZW5kZXJQYXJhbWV0ZXJzKSB7XG4gICAgdmFyIHRhc2sgPSBuZXcgVGV4dExheWVyUmVuZGVyVGFzayh7XG4gICAgICB0ZXh0Q29udGVudDogcmVuZGVyUGFyYW1ldGVycy50ZXh0Q29udGVudCxcbiAgICAgIHRleHRDb250ZW50U3RyZWFtOiByZW5kZXJQYXJhbWV0ZXJzLnRleHRDb250ZW50U3RyZWFtLFxuICAgICAgY29udGFpbmVyOiByZW5kZXJQYXJhbWV0ZXJzLmNvbnRhaW5lcixcbiAgICAgIHZpZXdwb3J0OiByZW5kZXJQYXJhbWV0ZXJzLnZpZXdwb3J0LFxuICAgICAgdGV4dERpdnM6IHJlbmRlclBhcmFtZXRlcnMudGV4dERpdnMsXG4gICAgICB0ZXh0Q29udGVudEl0ZW1zU3RyOiByZW5kZXJQYXJhbWV0ZXJzLnRleHRDb250ZW50SXRlbXNTdHIsXG4gICAgICBlbmhhbmNlVGV4dFNlbGVjdGlvbjogcmVuZGVyUGFyYW1ldGVycy5lbmhhbmNlVGV4dFNlbGVjdGlvblxuICAgIH0pO1xuXG4gICAgdGFzay5fcmVuZGVyKHJlbmRlclBhcmFtZXRlcnMudGltZW91dCk7XG5cbiAgICByZXR1cm4gdGFzaztcbiAgfVxuXG4gIHJldHVybiByZW5kZXJUZXh0TGF5ZXI7XG59KCk7XG5cbmV4cG9ydHMucmVuZGVyVGV4dExheWVyID0gcmVuZGVyVGV4dExheWVyO1xuXG4vKioqLyB9KSxcbi8qIDE4ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dfcGRmanNfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLlNWR0dyYXBoaWNzID0gdm9pZCAwO1xuXG52YXIgX3V0aWwgPSBfX3dfcGRmanNfcmVxdWlyZV9fKDIpO1xuXG52YXIgX2Rpc3BsYXlfdXRpbHMgPSBfX3dfcGRmanNfcmVxdWlyZV9fKDEpO1xuXG52YXIgX2lzX25vZGUgPSBfX3dfcGRmanNfcmVxdWlyZV9fKDQpO1xuXG5sZXQgU1ZHR3JhcGhpY3MgPSBmdW5jdGlvbiAoKSB7XG4gIHRocm93IG5ldyBFcnJvcihcIk5vdCBpbXBsZW1lbnRlZDogU1ZHR3JhcGhpY3NcIik7XG59O1xuXG5leHBvcnRzLlNWR0dyYXBoaWNzID0gU1ZHR3JhcGhpY3M7XG57XG4gIGNvbnN0IFNWR19ERUZBVUxUUyA9IHtcbiAgICBmb250U3R5bGU6IFwibm9ybWFsXCIsXG4gICAgZm9udFdlaWdodDogXCJub3JtYWxcIixcbiAgICBmaWxsQ29sb3I6IFwiIzAwMDAwMFwiXG4gIH07XG4gIGNvbnN0IFhNTF9OUyA9IFwiaHR0cDovL3d3dy53My5vcmcvWE1MLzE5OTgvbmFtZXNwYWNlXCI7XG4gIGNvbnN0IFhMSU5LX05TID0gXCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rXCI7XG4gIGNvbnN0IExJTkVfQ0FQX1NUWUxFUyA9IFtcImJ1dHRcIiwgXCJyb3VuZFwiLCBcInNxdWFyZVwiXTtcbiAgY29uc3QgTElORV9KT0lOX1NUWUxFUyA9IFtcIm1pdGVyXCIsIFwicm91bmRcIiwgXCJiZXZlbFwiXTtcblxuICBjb25zdCBjb252ZXJ0SW1nRGF0YVRvUG5nID0gZnVuY3Rpb24gKCkge1xuICAgIGNvbnN0IFBOR19IRUFERVIgPSBuZXcgVWludDhBcnJheShbMHg4OSwgMHg1MCwgMHg0ZSwgMHg0NywgMHgwZCwgMHgwYSwgMHgxYSwgMHgwYV0pO1xuICAgIGNvbnN0IENIVU5LX1dSQVBQRVJfU0laRSA9IDEyO1xuICAgIGNvbnN0IGNyY1RhYmxlID0gbmV3IEludDMyQXJyYXkoMjU2KTtcblxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgMjU2OyBpKyspIHtcbiAgICAgIGxldCBjID0gaTtcblxuICAgICAgZm9yIChsZXQgaCA9IDA7IGggPCA4OyBoKyspIHtcbiAgICAgICAgaWYgKGMgJiAxKSB7XG4gICAgICAgICAgYyA9IDB4ZWRiODgzMjAgXiBjID4+IDEgJiAweDdmZmZmZmZmO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGMgPSBjID4+IDEgJiAweDdmZmZmZmZmO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGNyY1RhYmxlW2ldID0gYztcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjcmMzMihkYXRhLCBzdGFydCwgZW5kKSB7XG4gICAgICBsZXQgY3JjID0gLTE7XG5cbiAgICAgIGZvciAobGV0IGkgPSBzdGFydDsgaSA8IGVuZDsgaSsrKSB7XG4gICAgICAgIGNvbnN0IGEgPSAoY3JjIF4gZGF0YVtpXSkgJiAweGZmO1xuICAgICAgICBjb25zdCBiID0gY3JjVGFibGVbYV07XG4gICAgICAgIGNyYyA9IGNyYyA+Pj4gOCBeIGI7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBjcmMgXiAtMTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiB3cml0ZVBuZ0NodW5rKHR5cGUsIGJvZHksIGRhdGEsIG9mZnNldCkge1xuICAgICAgbGV0IHAgPSBvZmZzZXQ7XG4gICAgICBjb25zdCBsZW4gPSBib2R5Lmxlbmd0aDtcbiAgICAgIGRhdGFbcF0gPSBsZW4gPj4gMjQgJiAweGZmO1xuICAgICAgZGF0YVtwICsgMV0gPSBsZW4gPj4gMTYgJiAweGZmO1xuICAgICAgZGF0YVtwICsgMl0gPSBsZW4gPj4gOCAmIDB4ZmY7XG4gICAgICBkYXRhW3AgKyAzXSA9IGxlbiAmIDB4ZmY7XG4gICAgICBwICs9IDQ7XG4gICAgICBkYXRhW3BdID0gdHlwZS5jaGFyQ29kZUF0KDApICYgMHhmZjtcbiAgICAgIGRhdGFbcCArIDFdID0gdHlwZS5jaGFyQ29kZUF0KDEpICYgMHhmZjtcbiAgICAgIGRhdGFbcCArIDJdID0gdHlwZS5jaGFyQ29kZUF0KDIpICYgMHhmZjtcbiAgICAgIGRhdGFbcCArIDNdID0gdHlwZS5jaGFyQ29kZUF0KDMpICYgMHhmZjtcbiAgICAgIHAgKz0gNDtcbiAgICAgIGRhdGEuc2V0KGJvZHksIHApO1xuICAgICAgcCArPSBib2R5Lmxlbmd0aDtcbiAgICAgIGNvbnN0IGNyYyA9IGNyYzMyKGRhdGEsIG9mZnNldCArIDQsIHApO1xuICAgICAgZGF0YVtwXSA9IGNyYyA+PiAyNCAmIDB4ZmY7XG4gICAgICBkYXRhW3AgKyAxXSA9IGNyYyA+PiAxNiAmIDB4ZmY7XG4gICAgICBkYXRhW3AgKyAyXSA9IGNyYyA+PiA4ICYgMHhmZjtcbiAgICAgIGRhdGFbcCArIDNdID0gY3JjICYgMHhmZjtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBhZGxlcjMyKGRhdGEsIHN0YXJ0LCBlbmQpIHtcbiAgICAgIGxldCBhID0gMTtcbiAgICAgIGxldCBiID0gMDtcblxuICAgICAgZm9yIChsZXQgaSA9IHN0YXJ0OyBpIDwgZW5kOyArK2kpIHtcbiAgICAgICAgYSA9IChhICsgKGRhdGFbaV0gJiAweGZmKSkgJSA2NTUyMTtcbiAgICAgICAgYiA9IChiICsgYSkgJSA2NTUyMTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGIgPDwgMTYgfCBhO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGRlZmxhdGVTeW5jKGxpdGVyYWxzKSB7XG4gICAgICBpZiAoIV9pc19ub2RlLmlzTm9kZUpTKSB7XG4gICAgICAgIHJldHVybiBkZWZsYXRlU3luY1VuY29tcHJlc3NlZChsaXRlcmFscyk7XG4gICAgICB9XG5cbiAgICAgIHRyeSB7XG4gICAgICAgIGxldCBpbnB1dDtcblxuICAgICAgICBpZiAocGFyc2VJbnQocHJvY2Vzcy52ZXJzaW9ucy5ub2RlKSA+PSA4KSB7XG4gICAgICAgICAgaW5wdXQgPSBsaXRlcmFscztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpbnB1dCA9IEJ1ZmZlci5mcm9tKGxpdGVyYWxzKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IG91dHB1dCA9IHJlcXVpcmUoXCJ6bGliXCIpLmRlZmxhdGVTeW5jKGlucHV0LCB7XG4gICAgICAgICAgbGV2ZWw6IDlcbiAgICAgICAgfSk7XG5cbiAgICAgICAgcmV0dXJuIG91dHB1dCBpbnN0YW5jZW9mIFVpbnQ4QXJyYXkgPyBvdXRwdXQgOiBuZXcgVWludDhBcnJheShvdXRwdXQpO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAoMCwgX3V0aWwud2FybikoXCJOb3QgY29tcHJlc3NpbmcgUE5HIGJlY2F1c2UgemxpYi5kZWZsYXRlU3luYyBpcyB1bmF2YWlsYWJsZTogXCIgKyBlKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGRlZmxhdGVTeW5jVW5jb21wcmVzc2VkKGxpdGVyYWxzKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBkZWZsYXRlU3luY1VuY29tcHJlc3NlZChsaXRlcmFscykge1xuICAgICAgbGV0IGxlbiA9IGxpdGVyYWxzLmxlbmd0aDtcbiAgICAgIGNvbnN0IG1heEJsb2NrTGVuZ3RoID0gMHhmZmZmO1xuICAgICAgY29uc3QgZGVmbGF0ZUJsb2NrcyA9IE1hdGguY2VpbChsZW4gLyBtYXhCbG9ja0xlbmd0aCk7XG4gICAgICBjb25zdCBpZGF0ID0gbmV3IFVpbnQ4QXJyYXkoMiArIGxlbiArIGRlZmxhdGVCbG9ja3MgKiA1ICsgNCk7XG4gICAgICBsZXQgcGkgPSAwO1xuICAgICAgaWRhdFtwaSsrXSA9IDB4Nzg7XG4gICAgICBpZGF0W3BpKytdID0gMHg5YztcbiAgICAgIGxldCBwb3MgPSAwO1xuXG4gICAgICB3aGlsZSAobGVuID4gbWF4QmxvY2tMZW5ndGgpIHtcbiAgICAgICAgaWRhdFtwaSsrXSA9IDB4MDA7XG4gICAgICAgIGlkYXRbcGkrK10gPSAweGZmO1xuICAgICAgICBpZGF0W3BpKytdID0gMHhmZjtcbiAgICAgICAgaWRhdFtwaSsrXSA9IDB4MDA7XG4gICAgICAgIGlkYXRbcGkrK10gPSAweDAwO1xuICAgICAgICBpZGF0LnNldChsaXRlcmFscy5zdWJhcnJheShwb3MsIHBvcyArIG1heEJsb2NrTGVuZ3RoKSwgcGkpO1xuICAgICAgICBwaSArPSBtYXhCbG9ja0xlbmd0aDtcbiAgICAgICAgcG9zICs9IG1heEJsb2NrTGVuZ3RoO1xuICAgICAgICBsZW4gLT0gbWF4QmxvY2tMZW5ndGg7XG4gICAgICB9XG5cbiAgICAgIGlkYXRbcGkrK10gPSAweDAxO1xuICAgICAgaWRhdFtwaSsrXSA9IGxlbiAmIDB4ZmY7XG4gICAgICBpZGF0W3BpKytdID0gbGVuID4+IDggJiAweGZmO1xuICAgICAgaWRhdFtwaSsrXSA9IH5sZW4gJiAweGZmZmYgJiAweGZmO1xuICAgICAgaWRhdFtwaSsrXSA9ICh+bGVuICYgMHhmZmZmKSA+PiA4ICYgMHhmZjtcbiAgICAgIGlkYXQuc2V0KGxpdGVyYWxzLnN1YmFycmF5KHBvcyksIHBpKTtcbiAgICAgIHBpICs9IGxpdGVyYWxzLmxlbmd0aCAtIHBvcztcbiAgICAgIGNvbnN0IGFkbGVyID0gYWRsZXIzMihsaXRlcmFscywgMCwgbGl0ZXJhbHMubGVuZ3RoKTtcbiAgICAgIGlkYXRbcGkrK10gPSBhZGxlciA+PiAyNCAmIDB4ZmY7XG4gICAgICBpZGF0W3BpKytdID0gYWRsZXIgPj4gMTYgJiAweGZmO1xuICAgICAgaWRhdFtwaSsrXSA9IGFkbGVyID4+IDggJiAweGZmO1xuICAgICAgaWRhdFtwaSsrXSA9IGFkbGVyICYgMHhmZjtcbiAgICAgIHJldHVybiBpZGF0O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGVuY29kZShpbWdEYXRhLCBraW5kLCBmb3JjZURhdGFTY2hlbWEsIGlzTWFzaykge1xuICAgICAgY29uc3Qgd2lkdGggPSBpbWdEYXRhLndpZHRoO1xuICAgICAgY29uc3QgaGVpZ2h0ID0gaW1nRGF0YS5oZWlnaHQ7XG4gICAgICBsZXQgYml0RGVwdGgsIGNvbG9yVHlwZSwgbGluZVNpemU7XG4gICAgICBjb25zdCBieXRlcyA9IGltZ0RhdGEuZGF0YTtcblxuICAgICAgc3dpdGNoIChraW5kKSB7XG4gICAgICAgIGNhc2UgX3V0aWwuSW1hZ2VLaW5kLkdSQVlTQ0FMRV8xQlBQOlxuICAgICAgICAgIGNvbG9yVHlwZSA9IDA7XG4gICAgICAgICAgYml0RGVwdGggPSAxO1xuICAgICAgICAgIGxpbmVTaXplID0gd2lkdGggKyA3ID4+IDM7XG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSBfdXRpbC5JbWFnZUtpbmQuUkdCXzI0QlBQOlxuICAgICAgICAgIGNvbG9yVHlwZSA9IDI7XG4gICAgICAgICAgYml0RGVwdGggPSA4O1xuICAgICAgICAgIGxpbmVTaXplID0gd2lkdGggKiAzO1xuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgX3V0aWwuSW1hZ2VLaW5kLlJHQkFfMzJCUFA6XG4gICAgICAgICAgY29sb3JUeXBlID0gNjtcbiAgICAgICAgICBiaXREZXB0aCA9IDg7XG4gICAgICAgICAgbGluZVNpemUgPSB3aWR0aCAqIDQ7XG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJpbnZhbGlkIGZvcm1hdFwiKTtcbiAgICAgIH1cblxuICAgICAgY29uc3QgbGl0ZXJhbHMgPSBuZXcgVWludDhBcnJheSgoMSArIGxpbmVTaXplKSAqIGhlaWdodCk7XG4gICAgICBsZXQgb2Zmc2V0TGl0ZXJhbHMgPSAwLFxuICAgICAgICAgIG9mZnNldEJ5dGVzID0gMDtcblxuICAgICAgZm9yIChsZXQgeSA9IDA7IHkgPCBoZWlnaHQ7ICsreSkge1xuICAgICAgICBsaXRlcmFsc1tvZmZzZXRMaXRlcmFscysrXSA9IDA7XG4gICAgICAgIGxpdGVyYWxzLnNldChieXRlcy5zdWJhcnJheShvZmZzZXRCeXRlcywgb2Zmc2V0Qnl0ZXMgKyBsaW5lU2l6ZSksIG9mZnNldExpdGVyYWxzKTtcbiAgICAgICAgb2Zmc2V0Qnl0ZXMgKz0gbGluZVNpemU7XG4gICAgICAgIG9mZnNldExpdGVyYWxzICs9IGxpbmVTaXplO1xuICAgICAgfVxuXG4gICAgICBpZiAoa2luZCA9PT0gX3V0aWwuSW1hZ2VLaW5kLkdSQVlTQ0FMRV8xQlBQICYmIGlzTWFzaykge1xuICAgICAgICBvZmZzZXRMaXRlcmFscyA9IDA7XG5cbiAgICAgICAgZm9yIChsZXQgeSA9IDA7IHkgPCBoZWlnaHQ7IHkrKykge1xuICAgICAgICAgIG9mZnNldExpdGVyYWxzKys7XG5cbiAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxpbmVTaXplOyBpKyspIHtcbiAgICAgICAgICAgIGxpdGVyYWxzW29mZnNldExpdGVyYWxzKytdIF49IDB4ZmY7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IGloZHIgPSBuZXcgVWludDhBcnJheShbd2lkdGggPj4gMjQgJiAweGZmLCB3aWR0aCA+PiAxNiAmIDB4ZmYsIHdpZHRoID4+IDggJiAweGZmLCB3aWR0aCAmIDB4ZmYsIGhlaWdodCA+PiAyNCAmIDB4ZmYsIGhlaWdodCA+PiAxNiAmIDB4ZmYsIGhlaWdodCA+PiA4ICYgMHhmZiwgaGVpZ2h0ICYgMHhmZiwgYml0RGVwdGgsIGNvbG9yVHlwZSwgMHgwMCwgMHgwMCwgMHgwMF0pO1xuICAgICAgY29uc3QgaWRhdCA9IGRlZmxhdGVTeW5jKGxpdGVyYWxzKTtcbiAgICAgIGNvbnN0IHBuZ0xlbmd0aCA9IFBOR19IRUFERVIubGVuZ3RoICsgQ0hVTktfV1JBUFBFUl9TSVpFICogMyArIGloZHIubGVuZ3RoICsgaWRhdC5sZW5ndGg7XG4gICAgICBjb25zdCBkYXRhID0gbmV3IFVpbnQ4QXJyYXkocG5nTGVuZ3RoKTtcbiAgICAgIGxldCBvZmZzZXQgPSAwO1xuICAgICAgZGF0YS5zZXQoUE5HX0hFQURFUiwgb2Zmc2V0KTtcbiAgICAgIG9mZnNldCArPSBQTkdfSEVBREVSLmxlbmd0aDtcbiAgICAgIHdyaXRlUG5nQ2h1bmsoXCJJSERSXCIsIGloZHIsIGRhdGEsIG9mZnNldCk7XG4gICAgICBvZmZzZXQgKz0gQ0hVTktfV1JBUFBFUl9TSVpFICsgaWhkci5sZW5ndGg7XG4gICAgICB3cml0ZVBuZ0NodW5rKFwiSURBVEFcIiwgaWRhdCwgZGF0YSwgb2Zmc2V0KTtcbiAgICAgIG9mZnNldCArPSBDSFVOS19XUkFQUEVSX1NJWkUgKyBpZGF0Lmxlbmd0aDtcbiAgICAgIHdyaXRlUG5nQ2h1bmsoXCJJRU5EXCIsIG5ldyBVaW50OEFycmF5KDApLCBkYXRhLCBvZmZzZXQpO1xuICAgICAgcmV0dXJuICgwLCBfdXRpbC5jcmVhdGVPYmplY3RVUkwpKGRhdGEsIFwiaW1hZ2UvcG5nXCIsIGZvcmNlRGF0YVNjaGVtYSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZ1bmN0aW9uIGNvbnZlcnRJbWdEYXRhVG9QbmcoaW1nRGF0YSwgZm9yY2VEYXRhU2NoZW1hLCBpc01hc2spIHtcbiAgICAgIGNvbnN0IGtpbmQgPSBpbWdEYXRhLmtpbmQgPT09IHVuZGVmaW5lZCA/IF91dGlsLkltYWdlS2luZC5HUkFZU0NBTEVfMUJQUCA6IGltZ0RhdGEua2luZDtcbiAgICAgIHJldHVybiBlbmNvZGUoaW1nRGF0YSwga2luZCwgZm9yY2VEYXRhU2NoZW1hLCBpc01hc2spO1xuICAgIH07XG4gIH0oKTtcblxuICBjbGFzcyBTVkdFeHRyYVN0YXRlIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgIHRoaXMuZm9udFNpemVTY2FsZSA9IDE7XG4gICAgICB0aGlzLmZvbnRXZWlnaHQgPSBTVkdfREVGQVVMVFMuZm9udFdlaWdodDtcbiAgICAgIHRoaXMuZm9udFNpemUgPSAwO1xuICAgICAgdGhpcy50ZXh0TWF0cml4ID0gX3V0aWwuSURFTlRJVFlfTUFUUklYO1xuICAgICAgdGhpcy5mb250TWF0cml4ID0gX3V0aWwuRk9OVF9JREVOVElUWV9NQVRSSVg7XG4gICAgICB0aGlzLmxlYWRpbmcgPSAwO1xuICAgICAgdGhpcy50ZXh0UmVuZGVyaW5nTW9kZSA9IF91dGlsLlRleHRSZW5kZXJpbmdNb2RlLkZJTEw7XG4gICAgICB0aGlzLnRleHRNYXRyaXhTY2FsZSA9IDE7XG4gICAgICB0aGlzLnggPSAwO1xuICAgICAgdGhpcy55ID0gMDtcbiAgICAgIHRoaXMubGluZVggPSAwO1xuICAgICAgdGhpcy5saW5lWSA9IDA7XG4gICAgICB0aGlzLmNoYXJTcGFjaW5nID0gMDtcbiAgICAgIHRoaXMud29yZFNwYWNpbmcgPSAwO1xuICAgICAgdGhpcy50ZXh0SFNjYWxlID0gMTtcbiAgICAgIHRoaXMudGV4dFJpc2UgPSAwO1xuICAgICAgdGhpcy5maWxsQ29sb3IgPSBTVkdfREVGQVVMVFMuZmlsbENvbG9yO1xuICAgICAgdGhpcy5zdHJva2VDb2xvciA9IFwiIzAwMDAwMFwiO1xuICAgICAgdGhpcy5maWxsQWxwaGEgPSAxO1xuICAgICAgdGhpcy5zdHJva2VBbHBoYSA9IDE7XG4gICAgICB0aGlzLmxpbmVXaWR0aCA9IDE7XG4gICAgICB0aGlzLmxpbmVKb2luID0gXCJcIjtcbiAgICAgIHRoaXMubGluZUNhcCA9IFwiXCI7XG4gICAgICB0aGlzLm1pdGVyTGltaXQgPSAwO1xuICAgICAgdGhpcy5kYXNoQXJyYXkgPSBbXTtcbiAgICAgIHRoaXMuZGFzaFBoYXNlID0gMDtcbiAgICAgIHRoaXMuZGVwZW5kZW5jaWVzID0gW107XG4gICAgICB0aGlzLmFjdGl2ZUNsaXBVcmwgPSBudWxsO1xuICAgICAgdGhpcy5jbGlwR3JvdXAgPSBudWxsO1xuICAgICAgdGhpcy5tYXNrSWQgPSBcIlwiO1xuICAgIH1cblxuICAgIGNsb25lKCkge1xuICAgICAgcmV0dXJuIE9iamVjdC5jcmVhdGUodGhpcyk7XG4gICAgfVxuXG4gICAgc2V0Q3VycmVudFBvaW50KHgsIHkpIHtcbiAgICAgIHRoaXMueCA9IHg7XG4gICAgICB0aGlzLnkgPSB5O1xuICAgIH1cblxuICB9XG5cbiAgZnVuY3Rpb24gb3BMaXN0VG9UcmVlKG9wTGlzdCkge1xuICAgIGxldCBvcFRyZWUgPSBbXTtcbiAgICBjb25zdCB0bXAgPSBbXTtcblxuICAgIGZvciAoY29uc3Qgb3BMaXN0RWxlbWVudCBvZiBvcExpc3QpIHtcbiAgICAgIGlmIChvcExpc3RFbGVtZW50LmZuID09PSBcInNhdmVcIikge1xuICAgICAgICBvcFRyZWUucHVzaCh7XG4gICAgICAgICAgZm5JZDogOTIsXG4gICAgICAgICAgZm46IFwiZ3JvdXBcIixcbiAgICAgICAgICBpdGVtczogW11cbiAgICAgICAgfSk7XG4gICAgICAgIHRtcC5wdXNoKG9wVHJlZSk7XG4gICAgICAgIG9wVHJlZSA9IG9wVHJlZVtvcFRyZWUubGVuZ3RoIC0gMV0uaXRlbXM7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICBpZiAob3BMaXN0RWxlbWVudC5mbiA9PT0gXCJyZXN0b3JlXCIpIHtcbiAgICAgICAgb3BUcmVlID0gdG1wLnBvcCgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgb3BUcmVlLnB1c2gob3BMaXN0RWxlbWVudCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIG9wVHJlZTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHBmKHZhbHVlKSB7XG4gICAgaWYgKE51bWJlci5pc0ludGVnZXIodmFsdWUpKSB7XG4gICAgICByZXR1cm4gdmFsdWUudG9TdHJpbmcoKTtcbiAgICB9XG5cbiAgICBjb25zdCBzID0gdmFsdWUudG9GaXhlZCgxMCk7XG4gICAgbGV0IGkgPSBzLmxlbmd0aCAtIDE7XG5cbiAgICBpZiAoc1tpXSAhPT0gXCIwXCIpIHtcbiAgICAgIHJldHVybiBzO1xuICAgIH1cblxuICAgIGRvIHtcbiAgICAgIGktLTtcbiAgICB9IHdoaWxlIChzW2ldID09PSBcIjBcIik7XG5cbiAgICByZXR1cm4gcy5zdWJzdHJpbmcoMCwgc1tpXSA9PT0gXCIuXCIgPyBpIDogaSArIDEpO1xuICB9XG5cbiAgZnVuY3Rpb24gcG0obSkge1xuICAgIGlmIChtWzRdID09PSAwICYmIG1bNV0gPT09IDApIHtcbiAgICAgIGlmIChtWzFdID09PSAwICYmIG1bMl0gPT09IDApIHtcbiAgICAgICAgaWYgKG1bMF0gPT09IDEgJiYgbVszXSA9PT0gMSkge1xuICAgICAgICAgIHJldHVybiBcIlwiO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGBzY2FsZSgke3BmKG1bMF0pfSAke3BmKG1bM10pfSlgO1xuICAgICAgfVxuXG4gICAgICBpZiAobVswXSA9PT0gbVszXSAmJiBtWzFdID09PSAtbVsyXSkge1xuICAgICAgICBjb25zdCBhID0gTWF0aC5hY29zKG1bMF0pICogMTgwIC8gTWF0aC5QSTtcbiAgICAgICAgcmV0dXJuIGByb3RhdGUoJHtwZihhKX0pYDtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKG1bMF0gPT09IDEgJiYgbVsxXSA9PT0gMCAmJiBtWzJdID09PSAwICYmIG1bM10gPT09IDEpIHtcbiAgICAgICAgcmV0dXJuIGB0cmFuc2xhdGUoJHtwZihtWzRdKX0gJHtwZihtWzVdKX0pYDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gYG1hdHJpeCgke3BmKG1bMF0pfSAke3BmKG1bMV0pfSAke3BmKG1bMl0pfSAke3BmKG1bM10pfSAke3BmKG1bNF0pfSBgICsgYCR7cGYobVs1XSl9KWA7XG4gIH1cblxuICBsZXQgY2xpcENvdW50ID0gMDtcbiAgbGV0IG1hc2tDb3VudCA9IDA7XG4gIGxldCBzaGFkaW5nQ291bnQgPSAwO1xuICBleHBvcnRzLlNWR0dyYXBoaWNzID0gU1ZHR3JhcGhpY3MgPSBjbGFzcyBTVkdHcmFwaGljcyB7XG4gICAgY29uc3RydWN0b3IoY29tbW9uT2Jqcywgb2JqcywgZm9yY2VEYXRhU2NoZW1hID0gZmFsc2UpIHtcbiAgICAgIHRoaXMuc3ZnRmFjdG9yeSA9IG5ldyBfZGlzcGxheV91dGlscy5ET01TVkdGYWN0b3J5KCk7XG4gICAgICB0aGlzLmN1cnJlbnQgPSBuZXcgU1ZHRXh0cmFTdGF0ZSgpO1xuICAgICAgdGhpcy50cmFuc2Zvcm1NYXRyaXggPSBfdXRpbC5JREVOVElUWV9NQVRSSVg7XG4gICAgICB0aGlzLnRyYW5zZm9ybVN0YWNrID0gW107XG4gICAgICB0aGlzLmV4dHJhU3RhY2sgPSBbXTtcbiAgICAgIHRoaXMuY29tbW9uT2JqcyA9IGNvbW1vbk9ianM7XG4gICAgICB0aGlzLm9ianMgPSBvYmpzO1xuICAgICAgdGhpcy5wZW5kaW5nQ2xpcCA9IG51bGw7XG4gICAgICB0aGlzLnBlbmRpbmdFT0ZpbGwgPSBmYWxzZTtcbiAgICAgIHRoaXMuZW1iZWRGb250cyA9IGZhbHNlO1xuICAgICAgdGhpcy5lbWJlZGRlZEZvbnRzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICAgIHRoaXMuY3NzU3R5bGUgPSBudWxsO1xuICAgICAgdGhpcy5mb3JjZURhdGFTY2hlbWEgPSAhIWZvcmNlRGF0YVNjaGVtYTtcbiAgICAgIHRoaXMuX29wZXJhdG9ySWRNYXBwaW5nID0gW107XG5cbiAgICAgIGZvciAoY29uc3Qgb3AgaW4gX3V0aWwuT1BTKSB7XG4gICAgICAgIHRoaXMuX29wZXJhdG9ySWRNYXBwaW5nW191dGlsLk9QU1tvcF1dID0gb3A7XG4gICAgICB9XG4gICAgfVxuXG4gICAgc2F2ZSgpIHtcbiAgICAgIHRoaXMudHJhbnNmb3JtU3RhY2sucHVzaCh0aGlzLnRyYW5zZm9ybU1hdHJpeCk7XG4gICAgICBjb25zdCBvbGQgPSB0aGlzLmN1cnJlbnQ7XG4gICAgICB0aGlzLmV4dHJhU3RhY2sucHVzaChvbGQpO1xuICAgICAgdGhpcy5jdXJyZW50ID0gb2xkLmNsb25lKCk7XG4gICAgfVxuXG4gICAgcmVzdG9yZSgpIHtcbiAgICAgIHRoaXMudHJhbnNmb3JtTWF0cml4ID0gdGhpcy50cmFuc2Zvcm1TdGFjay5wb3AoKTtcbiAgICAgIHRoaXMuY3VycmVudCA9IHRoaXMuZXh0cmFTdGFjay5wb3AoKTtcbiAgICAgIHRoaXMucGVuZGluZ0NsaXAgPSBudWxsO1xuICAgICAgdGhpcy50Z3JwID0gbnVsbDtcbiAgICB9XG5cbiAgICBncm91cChpdGVtcykge1xuICAgICAgdGhpcy5zYXZlKCk7XG4gICAgICB0aGlzLmV4ZWN1dGVPcFRyZWUoaXRlbXMpO1xuICAgICAgdGhpcy5yZXN0b3JlKCk7XG4gICAgfVxuXG4gICAgbG9hZERlcGVuZGVuY2llcyhvcGVyYXRvckxpc3QpIHtcbiAgICAgIGNvbnN0IGZuQXJyYXkgPSBvcGVyYXRvckxpc3QuZm5BcnJheTtcbiAgICAgIGNvbnN0IGFyZ3NBcnJheSA9IG9wZXJhdG9yTGlzdC5hcmdzQXJyYXk7XG5cbiAgICAgIGZvciAobGV0IGkgPSAwLCBpaSA9IGZuQXJyYXkubGVuZ3RoOyBpIDwgaWk7IGkrKykge1xuICAgICAgICBpZiAoZm5BcnJheVtpXSAhPT0gX3V0aWwuT1BTLmRlcGVuZGVuY3kpIHtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZvciAoY29uc3Qgb2JqIG9mIGFyZ3NBcnJheVtpXSkge1xuICAgICAgICAgIGNvbnN0IG9ianNQb29sID0gb2JqLnN0YXJ0c1dpdGgoXCJnX1wiKSA/IHRoaXMuY29tbW9uT2JqcyA6IHRoaXMub2JqcztcbiAgICAgICAgICBjb25zdCBwcm9taXNlID0gbmV3IFByb21pc2UocmVzb2x2ZSA9PiB7XG4gICAgICAgICAgICBvYmpzUG9vbC5nZXQob2JqLCByZXNvbHZlKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgICB0aGlzLmN1cnJlbnQuZGVwZW5kZW5jaWVzLnB1c2gocHJvbWlzZSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIFByb21pc2UuYWxsKHRoaXMuY3VycmVudC5kZXBlbmRlbmNpZXMpO1xuICAgIH1cblxuICAgIHRyYW5zZm9ybShhLCBiLCBjLCBkLCBlLCBmKSB7XG4gICAgICBjb25zdCB0cmFuc2Zvcm1NYXRyaXggPSBbYSwgYiwgYywgZCwgZSwgZl07XG4gICAgICB0aGlzLnRyYW5zZm9ybU1hdHJpeCA9IF91dGlsLlV0aWwudHJhbnNmb3JtKHRoaXMudHJhbnNmb3JtTWF0cml4LCB0cmFuc2Zvcm1NYXRyaXgpO1xuICAgICAgdGhpcy50Z3JwID0gbnVsbDtcbiAgICB9XG5cbiAgICBnZXRTVkcob3BlcmF0b3JMaXN0LCB2aWV3cG9ydCkge1xuICAgICAgdGhpcy52aWV3cG9ydCA9IHZpZXdwb3J0O1xuXG4gICAgICBjb25zdCBzdmdFbGVtZW50ID0gdGhpcy5faW5pdGlhbGl6ZSh2aWV3cG9ydCk7XG5cbiAgICAgIHJldHVybiB0aGlzLmxvYWREZXBlbmRlbmNpZXMob3BlcmF0b3JMaXN0KS50aGVuKCgpID0+IHtcbiAgICAgICAgdGhpcy50cmFuc2Zvcm1NYXRyaXggPSBfdXRpbC5JREVOVElUWV9NQVRSSVg7XG4gICAgICAgIHRoaXMuZXhlY3V0ZU9wVHJlZSh0aGlzLmNvbnZlcnRPcExpc3Qob3BlcmF0b3JMaXN0KSk7XG4gICAgICAgIHJldHVybiBzdmdFbGVtZW50O1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgY29udmVydE9wTGlzdChvcGVyYXRvckxpc3QpIHtcbiAgICAgIGNvbnN0IG9wZXJhdG9ySWRNYXBwaW5nID0gdGhpcy5fb3BlcmF0b3JJZE1hcHBpbmc7XG4gICAgICBjb25zdCBhcmdzQXJyYXkgPSBvcGVyYXRvckxpc3QuYXJnc0FycmF5O1xuICAgICAgY29uc3QgZm5BcnJheSA9IG9wZXJhdG9yTGlzdC5mbkFycmF5O1xuICAgICAgY29uc3Qgb3BMaXN0ID0gW107XG5cbiAgICAgIGZvciAobGV0IGkgPSAwLCBpaSA9IGZuQXJyYXkubGVuZ3RoOyBpIDwgaWk7IGkrKykge1xuICAgICAgICBjb25zdCBmbklkID0gZm5BcnJheVtpXTtcbiAgICAgICAgb3BMaXN0LnB1c2goe1xuICAgICAgICAgIGZuSWQsXG4gICAgICAgICAgZm46IG9wZXJhdG9ySWRNYXBwaW5nW2ZuSWRdLFxuICAgICAgICAgIGFyZ3M6IGFyZ3NBcnJheVtpXVxuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIG9wTGlzdFRvVHJlZShvcExpc3QpO1xuICAgIH1cblxuICAgIGV4ZWN1dGVPcFRyZWUob3BUcmVlKSB7XG4gICAgICBmb3IgKGNvbnN0IG9wVHJlZUVsZW1lbnQgb2Ygb3BUcmVlKSB7XG4gICAgICAgIGNvbnN0IGZuID0gb3BUcmVlRWxlbWVudC5mbjtcbiAgICAgICAgY29uc3QgZm5JZCA9IG9wVHJlZUVsZW1lbnQuZm5JZDtcbiAgICAgICAgY29uc3QgYXJncyA9IG9wVHJlZUVsZW1lbnQuYXJncztcblxuICAgICAgICBzd2l0Y2ggKGZuSWQgfCAwKSB7XG4gICAgICAgICAgY2FzZSBfdXRpbC5PUFMuYmVnaW5UZXh0OlxuICAgICAgICAgICAgdGhpcy5iZWdpblRleHQoKTtcbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgY2FzZSBfdXRpbC5PUFMuZGVwZW5kZW5jeTpcbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgY2FzZSBfdXRpbC5PUFMuc2V0TGVhZGluZzpcbiAgICAgICAgICAgIHRoaXMuc2V0TGVhZGluZyhhcmdzKTtcbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgY2FzZSBfdXRpbC5PUFMuc2V0TGVhZGluZ01vdmVUZXh0OlxuICAgICAgICAgICAgdGhpcy5zZXRMZWFkaW5nTW92ZVRleHQoYXJnc1swXSwgYXJnc1sxXSk7XG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgIGNhc2UgX3V0aWwuT1BTLnNldEZvbnQ6XG4gICAgICAgICAgICB0aGlzLnNldEZvbnQoYXJncyk7XG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgIGNhc2UgX3V0aWwuT1BTLnNob3dUZXh0OlxuICAgICAgICAgICAgdGhpcy5zaG93VGV4dChhcmdzWzBdKTtcbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgY2FzZSBfdXRpbC5PUFMuc2hvd1NwYWNlZFRleHQ6XG4gICAgICAgICAgICB0aGlzLnNob3dUZXh0KGFyZ3NbMF0pO1xuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICBjYXNlIF91dGlsLk9QUy5lbmRUZXh0OlxuICAgICAgICAgICAgdGhpcy5lbmRUZXh0KCk7XG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgIGNhc2UgX3V0aWwuT1BTLm1vdmVUZXh0OlxuICAgICAgICAgICAgdGhpcy5tb3ZlVGV4dChhcmdzWzBdLCBhcmdzWzFdKTtcbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgY2FzZSBfdXRpbC5PUFMuc2V0Q2hhclNwYWNpbmc6XG4gICAgICAgICAgICB0aGlzLnNldENoYXJTcGFjaW5nKGFyZ3NbMF0pO1xuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICBjYXNlIF91dGlsLk9QUy5zZXRXb3JkU3BhY2luZzpcbiAgICAgICAgICAgIHRoaXMuc2V0V29yZFNwYWNpbmcoYXJnc1swXSk7XG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgIGNhc2UgX3V0aWwuT1BTLnNldEhTY2FsZTpcbiAgICAgICAgICAgIHRoaXMuc2V0SFNjYWxlKGFyZ3NbMF0pO1xuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICBjYXNlIF91dGlsLk9QUy5zZXRUZXh0TWF0cml4OlxuICAgICAgICAgICAgdGhpcy5zZXRUZXh0TWF0cml4KGFyZ3NbMF0sIGFyZ3NbMV0sIGFyZ3NbMl0sIGFyZ3NbM10sIGFyZ3NbNF0sIGFyZ3NbNV0pO1xuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICBjYXNlIF91dGlsLk9QUy5zZXRUZXh0UmlzZTpcbiAgICAgICAgICAgIHRoaXMuc2V0VGV4dFJpc2UoYXJnc1swXSk7XG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgIGNhc2UgX3V0aWwuT1BTLnNldFRleHRSZW5kZXJpbmdNb2RlOlxuICAgICAgICAgICAgdGhpcy5zZXRUZXh0UmVuZGVyaW5nTW9kZShhcmdzWzBdKTtcbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgY2FzZSBfdXRpbC5PUFMuc2V0TGluZVdpZHRoOlxuICAgICAgICAgICAgdGhpcy5zZXRMaW5lV2lkdGgoYXJnc1swXSk7XG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgIGNhc2UgX3V0aWwuT1BTLnNldExpbmVKb2luOlxuICAgICAgICAgICAgdGhpcy5zZXRMaW5lSm9pbihhcmdzWzBdKTtcbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgY2FzZSBfdXRpbC5PUFMuc2V0TGluZUNhcDpcbiAgICAgICAgICAgIHRoaXMuc2V0TGluZUNhcChhcmdzWzBdKTtcbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgY2FzZSBfdXRpbC5PUFMuc2V0TWl0ZXJMaW1pdDpcbiAgICAgICAgICAgIHRoaXMuc2V0TWl0ZXJMaW1pdChhcmdzWzBdKTtcbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgY2FzZSBfdXRpbC5PUFMuc2V0RmlsbFJHQkNvbG9yOlxuICAgICAgICAgICAgdGhpcy5zZXRGaWxsUkdCQ29sb3IoYXJnc1swXSwgYXJnc1sxXSwgYXJnc1syXSk7XG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgIGNhc2UgX3V0aWwuT1BTLnNldFN0cm9rZVJHQkNvbG9yOlxuICAgICAgICAgICAgdGhpcy5zZXRTdHJva2VSR0JDb2xvcihhcmdzWzBdLCBhcmdzWzFdLCBhcmdzWzJdKTtcbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgY2FzZSBfdXRpbC5PUFMuc2V0U3Ryb2tlQ29sb3JOOlxuICAgICAgICAgICAgdGhpcy5zZXRTdHJva2VDb2xvck4oYXJncyk7XG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgIGNhc2UgX3V0aWwuT1BTLnNldEZpbGxDb2xvck46XG4gICAgICAgICAgICB0aGlzLnNldEZpbGxDb2xvck4oYXJncyk7XG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgIGNhc2UgX3V0aWwuT1BTLnNoYWRpbmdGaWxsOlxuICAgICAgICAgICAgdGhpcy5zaGFkaW5nRmlsbChhcmdzWzBdKTtcbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgY2FzZSBfdXRpbC5PUFMuc2V0RGFzaDpcbiAgICAgICAgICAgIHRoaXMuc2V0RGFzaChhcmdzWzBdLCBhcmdzWzFdKTtcbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgY2FzZSBfdXRpbC5PUFMuc2V0UmVuZGVyaW5nSW50ZW50OlxuICAgICAgICAgICAgdGhpcy5zZXRSZW5kZXJpbmdJbnRlbnQoYXJnc1swXSk7XG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgIGNhc2UgX3V0aWwuT1BTLnNldEZsYXRuZXNzOlxuICAgICAgICAgICAgdGhpcy5zZXRGbGF0bmVzcyhhcmdzWzBdKTtcbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgY2FzZSBfdXRpbC5PUFMuc2V0R1N0YXRlOlxuICAgICAgICAgICAgdGhpcy5zZXRHU3RhdGUoYXJnc1swXSk7XG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgIGNhc2UgX3V0aWwuT1BTLmZpbGw6XG4gICAgICAgICAgICB0aGlzLmZpbGwoKTtcbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgY2FzZSBfdXRpbC5PUFMuZW9GaWxsOlxuICAgICAgICAgICAgdGhpcy5lb0ZpbGwoKTtcbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgY2FzZSBfdXRpbC5PUFMuc3Ryb2tlOlxuICAgICAgICAgICAgdGhpcy5zdHJva2UoKTtcbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgY2FzZSBfdXRpbC5PUFMuZmlsbFN0cm9rZTpcbiAgICAgICAgICAgIHRoaXMuZmlsbFN0cm9rZSgpO1xuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICBjYXNlIF91dGlsLk9QUy5lb0ZpbGxTdHJva2U6XG4gICAgICAgICAgICB0aGlzLmVvRmlsbFN0cm9rZSgpO1xuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICBjYXNlIF91dGlsLk9QUy5jbGlwOlxuICAgICAgICAgICAgdGhpcy5jbGlwKFwibm9uemVyb1wiKTtcbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgY2FzZSBfdXRpbC5PUFMuZW9DbGlwOlxuICAgICAgICAgICAgdGhpcy5jbGlwKFwiZXZlbm9kZFwiKTtcbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgY2FzZSBfdXRpbC5PUFMucGFpbnRTb2xpZENvbG9ySW1hZ2VNYXNrOlxuICAgICAgICAgICAgdGhpcy5wYWludFNvbGlkQ29sb3JJbWFnZU1hc2soKTtcbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgY2FzZSBfdXRpbC5PUFMucGFpbnRJbWFnZVhPYmplY3Q6XG4gICAgICAgICAgICB0aGlzLnBhaW50SW1hZ2VYT2JqZWN0KGFyZ3NbMF0pO1xuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICBjYXNlIF91dGlsLk9QUy5wYWludElubGluZUltYWdlWE9iamVjdDpcbiAgICAgICAgICAgIHRoaXMucGFpbnRJbmxpbmVJbWFnZVhPYmplY3QoYXJnc1swXSk7XG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgIGNhc2UgX3V0aWwuT1BTLnBhaW50SW1hZ2VNYXNrWE9iamVjdDpcbiAgICAgICAgICAgIHRoaXMucGFpbnRJbWFnZU1hc2tYT2JqZWN0KGFyZ3NbMF0pO1xuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICBjYXNlIF91dGlsLk9QUy5wYWludEZvcm1YT2JqZWN0QmVnaW46XG4gICAgICAgICAgICB0aGlzLnBhaW50Rm9ybVhPYmplY3RCZWdpbihhcmdzWzBdLCBhcmdzWzFdKTtcbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgY2FzZSBfdXRpbC5PUFMucGFpbnRGb3JtWE9iamVjdEVuZDpcbiAgICAgICAgICAgIHRoaXMucGFpbnRGb3JtWE9iamVjdEVuZCgpO1xuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICBjYXNlIF91dGlsLk9QUy5jbG9zZVBhdGg6XG4gICAgICAgICAgICB0aGlzLmNsb3NlUGF0aCgpO1xuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICBjYXNlIF91dGlsLk9QUy5jbG9zZVN0cm9rZTpcbiAgICAgICAgICAgIHRoaXMuY2xvc2VTdHJva2UoKTtcbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgY2FzZSBfdXRpbC5PUFMuY2xvc2VGaWxsU3Ryb2tlOlxuICAgICAgICAgICAgdGhpcy5jbG9zZUZpbGxTdHJva2UoKTtcbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgY2FzZSBfdXRpbC5PUFMuY2xvc2VFT0ZpbGxTdHJva2U6XG4gICAgICAgICAgICB0aGlzLmNsb3NlRU9GaWxsU3Ryb2tlKCk7XG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgIGNhc2UgX3V0aWwuT1BTLm5leHRMaW5lOlxuICAgICAgICAgICAgdGhpcy5uZXh0TGluZSgpO1xuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICBjYXNlIF91dGlsLk9QUy50cmFuc2Zvcm06XG4gICAgICAgICAgICB0aGlzLnRyYW5zZm9ybShhcmdzWzBdLCBhcmdzWzFdLCBhcmdzWzJdLCBhcmdzWzNdLCBhcmdzWzRdLCBhcmdzWzVdKTtcbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgY2FzZSBfdXRpbC5PUFMuY29uc3RydWN0UGF0aDpcbiAgICAgICAgICAgIHRoaXMuY29uc3RydWN0UGF0aChhcmdzWzBdLCBhcmdzWzFdKTtcbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgY2FzZSBfdXRpbC5PUFMuZW5kUGF0aDpcbiAgICAgICAgICAgIHRoaXMuZW5kUGF0aCgpO1xuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICBjYXNlIDkyOlxuICAgICAgICAgICAgdGhpcy5ncm91cChvcFRyZWVFbGVtZW50Lml0ZW1zKTtcbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICgwLCBfdXRpbC53YXJuKShgVW5pbXBsZW1lbnRlZCBvcGVyYXRvciAke2ZufWApO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBzZXRXb3JkU3BhY2luZyh3b3JkU3BhY2luZykge1xuICAgICAgdGhpcy5jdXJyZW50LndvcmRTcGFjaW5nID0gd29yZFNwYWNpbmc7XG4gICAgfVxuXG4gICAgc2V0Q2hhclNwYWNpbmcoY2hhclNwYWNpbmcpIHtcbiAgICAgIHRoaXMuY3VycmVudC5jaGFyU3BhY2luZyA9IGNoYXJTcGFjaW5nO1xuICAgIH1cblxuICAgIG5leHRMaW5lKCkge1xuICAgICAgdGhpcy5tb3ZlVGV4dCgwLCB0aGlzLmN1cnJlbnQubGVhZGluZyk7XG4gICAgfVxuXG4gICAgc2V0VGV4dE1hdHJpeChhLCBiLCBjLCBkLCBlLCBmKSB7XG4gICAgICBjb25zdCBjdXJyZW50ID0gdGhpcy5jdXJyZW50O1xuICAgICAgY3VycmVudC50ZXh0TWF0cml4ID0gY3VycmVudC5saW5lTWF0cml4ID0gW2EsIGIsIGMsIGQsIGUsIGZdO1xuICAgICAgY3VycmVudC50ZXh0TWF0cml4U2NhbGUgPSBNYXRoLnNxcnQoYSAqIGEgKyBiICogYik7XG4gICAgICBjdXJyZW50LnggPSBjdXJyZW50LmxpbmVYID0gMDtcbiAgICAgIGN1cnJlbnQueSA9IGN1cnJlbnQubGluZVkgPSAwO1xuICAgICAgY3VycmVudC54Y29vcmRzID0gW107XG4gICAgICBjdXJyZW50Lnljb29yZHMgPSBbXTtcbiAgICAgIGN1cnJlbnQudHNwYW4gPSB0aGlzLnN2Z0ZhY3RvcnkuY3JlYXRlRWxlbWVudChcInN2Zzp0c3BhblwiKTtcbiAgICAgIGN1cnJlbnQudHNwYW4uc2V0QXR0cmlidXRlTlMobnVsbCwgXCJmb250LWZhbWlseVwiLCBjdXJyZW50LmZvbnRGYW1pbHkpO1xuICAgICAgY3VycmVudC50c3Bhbi5zZXRBdHRyaWJ1dGVOUyhudWxsLCBcImZvbnQtc2l6ZVwiLCBgJHtwZihjdXJyZW50LmZvbnRTaXplKX1weGApO1xuICAgICAgY3VycmVudC50c3Bhbi5zZXRBdHRyaWJ1dGVOUyhudWxsLCBcInlcIiwgcGYoLWN1cnJlbnQueSkpO1xuICAgICAgY3VycmVudC50eHRFbGVtZW50ID0gdGhpcy5zdmdGYWN0b3J5LmNyZWF0ZUVsZW1lbnQoXCJzdmc6dGV4dFwiKTtcbiAgICAgIGN1cnJlbnQudHh0RWxlbWVudC5hcHBlbmRDaGlsZChjdXJyZW50LnRzcGFuKTtcbiAgICB9XG5cbiAgICBiZWdpblRleHQoKSB7XG4gICAgICBjb25zdCBjdXJyZW50ID0gdGhpcy5jdXJyZW50O1xuICAgICAgY3VycmVudC54ID0gY3VycmVudC5saW5lWCA9IDA7XG4gICAgICBjdXJyZW50LnkgPSBjdXJyZW50LmxpbmVZID0gMDtcbiAgICAgIGN1cnJlbnQudGV4dE1hdHJpeCA9IF91dGlsLklERU5USVRZX01BVFJJWDtcbiAgICAgIGN1cnJlbnQubGluZU1hdHJpeCA9IF91dGlsLklERU5USVRZX01BVFJJWDtcbiAgICAgIGN1cnJlbnQudGV4dE1hdHJpeFNjYWxlID0gMTtcbiAgICAgIGN1cnJlbnQudHNwYW4gPSB0aGlzLnN2Z0ZhY3RvcnkuY3JlYXRlRWxlbWVudChcInN2Zzp0c3BhblwiKTtcbiAgICAgIGN1cnJlbnQudHh0RWxlbWVudCA9IHRoaXMuc3ZnRmFjdG9yeS5jcmVhdGVFbGVtZW50KFwic3ZnOnRleHRcIik7XG4gICAgICBjdXJyZW50LnR4dGdycCA9IHRoaXMuc3ZnRmFjdG9yeS5jcmVhdGVFbGVtZW50KFwic3ZnOmdcIik7XG4gICAgICBjdXJyZW50Lnhjb29yZHMgPSBbXTtcbiAgICAgIGN1cnJlbnQueWNvb3JkcyA9IFtdO1xuICAgIH1cblxuICAgIG1vdmVUZXh0KHgsIHkpIHtcbiAgICAgIGNvbnN0IGN1cnJlbnQgPSB0aGlzLmN1cnJlbnQ7XG4gICAgICBjdXJyZW50LnggPSBjdXJyZW50LmxpbmVYICs9IHg7XG4gICAgICBjdXJyZW50LnkgPSBjdXJyZW50LmxpbmVZICs9IHk7XG4gICAgICBjdXJyZW50Lnhjb29yZHMgPSBbXTtcbiAgICAgIGN1cnJlbnQueWNvb3JkcyA9IFtdO1xuICAgICAgY3VycmVudC50c3BhbiA9IHRoaXMuc3ZnRmFjdG9yeS5jcmVhdGVFbGVtZW50KFwic3ZnOnRzcGFuXCIpO1xuICAgICAgY3VycmVudC50c3Bhbi5zZXRBdHRyaWJ1dGVOUyhudWxsLCBcImZvbnQtZmFtaWx5XCIsIGN1cnJlbnQuZm9udEZhbWlseSk7XG4gICAgICBjdXJyZW50LnRzcGFuLnNldEF0dHJpYnV0ZU5TKG51bGwsIFwiZm9udC1zaXplXCIsIGAke3BmKGN1cnJlbnQuZm9udFNpemUpfXB4YCk7XG4gICAgICBjdXJyZW50LnRzcGFuLnNldEF0dHJpYnV0ZU5TKG51bGwsIFwieVwiLCBwZigtY3VycmVudC55KSk7XG4gICAgfVxuXG4gICAgc2hvd1RleHQoZ2x5cGhzKSB7XG4gICAgICBjb25zdCBjdXJyZW50ID0gdGhpcy5jdXJyZW50O1xuICAgICAgY29uc3QgZm9udCA9IGN1cnJlbnQuZm9udDtcbiAgICAgIGNvbnN0IGZvbnRTaXplID0gY3VycmVudC5mb250U2l6ZTtcblxuICAgICAgaWYgKGZvbnRTaXplID09PSAwKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgY29uc3QgZm9udFNpemVTY2FsZSA9IGN1cnJlbnQuZm9udFNpemVTY2FsZTtcbiAgICAgIGNvbnN0IGNoYXJTcGFjaW5nID0gY3VycmVudC5jaGFyU3BhY2luZztcbiAgICAgIGNvbnN0IHdvcmRTcGFjaW5nID0gY3VycmVudC53b3JkU3BhY2luZztcbiAgICAgIGNvbnN0IGZvbnREaXJlY3Rpb24gPSBjdXJyZW50LmZvbnREaXJlY3Rpb247XG4gICAgICBjb25zdCB0ZXh0SFNjYWxlID0gY3VycmVudC50ZXh0SFNjYWxlICogZm9udERpcmVjdGlvbjtcbiAgICAgIGNvbnN0IHZlcnRpY2FsID0gZm9udC52ZXJ0aWNhbDtcbiAgICAgIGNvbnN0IHNwYWNpbmdEaXIgPSB2ZXJ0aWNhbCA/IDEgOiAtMTtcbiAgICAgIGNvbnN0IGRlZmF1bHRWTWV0cmljcyA9IGZvbnQuZGVmYXVsdFZNZXRyaWNzO1xuICAgICAgY29uc3Qgd2lkdGhBZHZhbmNlU2NhbGUgPSBmb250U2l6ZSAqIGN1cnJlbnQuZm9udE1hdHJpeFswXTtcbiAgICAgIGxldCB4ID0gMDtcblxuICAgICAgZm9yIChjb25zdCBnbHlwaCBvZiBnbHlwaHMpIHtcbiAgICAgICAgaWYgKGdseXBoID09PSBudWxsKSB7XG4gICAgICAgICAgeCArPSBmb250RGlyZWN0aW9uICogd29yZFNwYWNpbmc7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH0gZWxzZSBpZiAoKDAsIF91dGlsLmlzTnVtKShnbHlwaCkpIHtcbiAgICAgICAgICB4ICs9IHNwYWNpbmdEaXIgKiBnbHlwaCAqIGZvbnRTaXplIC8gMTAwMDtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IHNwYWNpbmcgPSAoZ2x5cGguaXNTcGFjZSA/IHdvcmRTcGFjaW5nIDogMCkgKyBjaGFyU3BhY2luZztcbiAgICAgICAgY29uc3QgY2hhcmFjdGVyID0gZ2x5cGguZm9udENoYXI7XG4gICAgICAgIGxldCBzY2FsZWRYLCBzY2FsZWRZO1xuICAgICAgICBsZXQgd2lkdGggPSBnbHlwaC53aWR0aDtcblxuICAgICAgICBpZiAodmVydGljYWwpIHtcbiAgICAgICAgICBsZXQgdng7XG4gICAgICAgICAgY29uc3Qgdm1ldHJpYyA9IGdseXBoLnZtZXRyaWMgfHwgZGVmYXVsdFZNZXRyaWNzO1xuICAgICAgICAgIHZ4ID0gZ2x5cGgudm1ldHJpYyA/IHZtZXRyaWNbMV0gOiB3aWR0aCAqIDAuNTtcbiAgICAgICAgICB2eCA9IC12eCAqIHdpZHRoQWR2YW5jZVNjYWxlO1xuICAgICAgICAgIGNvbnN0IHZ5ID0gdm1ldHJpY1syXSAqIHdpZHRoQWR2YW5jZVNjYWxlO1xuICAgICAgICAgIHdpZHRoID0gdm1ldHJpYyA/IC12bWV0cmljWzBdIDogd2lkdGg7XG4gICAgICAgICAgc2NhbGVkWCA9IHZ4IC8gZm9udFNpemVTY2FsZTtcbiAgICAgICAgICBzY2FsZWRZID0gKHggKyB2eSkgLyBmb250U2l6ZVNjYWxlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHNjYWxlZFggPSB4IC8gZm9udFNpemVTY2FsZTtcbiAgICAgICAgICBzY2FsZWRZID0gMDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChnbHlwaC5pc0luRm9udCB8fCBmb250Lm1pc3NpbmdGaWxlKSB7XG4gICAgICAgICAgY3VycmVudC54Y29vcmRzLnB1c2goY3VycmVudC54ICsgc2NhbGVkWCk7XG5cbiAgICAgICAgICBpZiAodmVydGljYWwpIHtcbiAgICAgICAgICAgIGN1cnJlbnQueWNvb3Jkcy5wdXNoKC1jdXJyZW50LnkgKyBzY2FsZWRZKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBjdXJyZW50LnRzcGFuLnRleHRDb250ZW50ICs9IGNoYXJhY3RlcjtcbiAgICAgICAgfSBlbHNlIHt9XG5cbiAgICAgICAgbGV0IGNoYXJXaWR0aDtcblxuICAgICAgICBpZiAodmVydGljYWwpIHtcbiAgICAgICAgICBjaGFyV2lkdGggPSB3aWR0aCAqIHdpZHRoQWR2YW5jZVNjYWxlIC0gc3BhY2luZyAqIGZvbnREaXJlY3Rpb247XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY2hhcldpZHRoID0gd2lkdGggKiB3aWR0aEFkdmFuY2VTY2FsZSArIHNwYWNpbmcgKiBmb250RGlyZWN0aW9uO1xuICAgICAgICB9XG5cbiAgICAgICAgeCArPSBjaGFyV2lkdGg7XG4gICAgICB9XG5cbiAgICAgIGN1cnJlbnQudHNwYW4uc2V0QXR0cmlidXRlTlMobnVsbCwgXCJ4XCIsIGN1cnJlbnQueGNvb3Jkcy5tYXAocGYpLmpvaW4oXCIgXCIpKTtcblxuICAgICAgaWYgKHZlcnRpY2FsKSB7XG4gICAgICAgIGN1cnJlbnQudHNwYW4uc2V0QXR0cmlidXRlTlMobnVsbCwgXCJ5XCIsIGN1cnJlbnQueWNvb3Jkcy5tYXAocGYpLmpvaW4oXCIgXCIpKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGN1cnJlbnQudHNwYW4uc2V0QXR0cmlidXRlTlMobnVsbCwgXCJ5XCIsIHBmKC1jdXJyZW50LnkpKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHZlcnRpY2FsKSB7XG4gICAgICAgIGN1cnJlbnQueSAtPSB4O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY3VycmVudC54ICs9IHggKiB0ZXh0SFNjYWxlO1xuICAgICAgfVxuXG4gICAgICBjdXJyZW50LnRzcGFuLnNldEF0dHJpYnV0ZU5TKG51bGwsIFwiZm9udC1mYW1pbHlcIiwgY3VycmVudC5mb250RmFtaWx5KTtcbiAgICAgIGN1cnJlbnQudHNwYW4uc2V0QXR0cmlidXRlTlMobnVsbCwgXCJmb250LXNpemVcIiwgYCR7cGYoY3VycmVudC5mb250U2l6ZSl9cHhgKTtcblxuICAgICAgaWYgKGN1cnJlbnQuZm9udFN0eWxlICE9PSBTVkdfREVGQVVMVFMuZm9udFN0eWxlKSB7XG4gICAgICAgIGN1cnJlbnQudHNwYW4uc2V0QXR0cmlidXRlTlMobnVsbCwgXCJmb250LXN0eWxlXCIsIGN1cnJlbnQuZm9udFN0eWxlKTtcbiAgICAgIH1cblxuICAgICAgaWYgKGN1cnJlbnQuZm9udFdlaWdodCAhPT0gU1ZHX0RFRkFVTFRTLmZvbnRXZWlnaHQpIHtcbiAgICAgICAgY3VycmVudC50c3Bhbi5zZXRBdHRyaWJ1dGVOUyhudWxsLCBcImZvbnQtd2VpZ2h0XCIsIGN1cnJlbnQuZm9udFdlaWdodCk7XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IGZpbGxTdHJva2VNb2RlID0gY3VycmVudC50ZXh0UmVuZGVyaW5nTW9kZSAmIF91dGlsLlRleHRSZW5kZXJpbmdNb2RlLkZJTExfU1RST0tFX01BU0s7XG5cbiAgICAgIGlmIChmaWxsU3Ryb2tlTW9kZSA9PT0gX3V0aWwuVGV4dFJlbmRlcmluZ01vZGUuRklMTCB8fCBmaWxsU3Ryb2tlTW9kZSA9PT0gX3V0aWwuVGV4dFJlbmRlcmluZ01vZGUuRklMTF9TVFJPS0UpIHtcbiAgICAgICAgaWYgKGN1cnJlbnQuZmlsbENvbG9yICE9PSBTVkdfREVGQVVMVFMuZmlsbENvbG9yKSB7XG4gICAgICAgICAgY3VycmVudC50c3Bhbi5zZXRBdHRyaWJ1dGVOUyhudWxsLCBcImZpbGxcIiwgY3VycmVudC5maWxsQ29sb3IpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGN1cnJlbnQuZmlsbEFscGhhIDwgMSkge1xuICAgICAgICAgIGN1cnJlbnQudHNwYW4uc2V0QXR0cmlidXRlTlMobnVsbCwgXCJmaWxsLW9wYWNpdHlcIiwgY3VycmVudC5maWxsQWxwaGEpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKGN1cnJlbnQudGV4dFJlbmRlcmluZ01vZGUgPT09IF91dGlsLlRleHRSZW5kZXJpbmdNb2RlLkFERF9UT19QQVRIKSB7XG4gICAgICAgIGN1cnJlbnQudHNwYW4uc2V0QXR0cmlidXRlTlMobnVsbCwgXCJmaWxsXCIsIFwidHJhbnNwYXJlbnRcIik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjdXJyZW50LnRzcGFuLnNldEF0dHJpYnV0ZU5TKG51bGwsIFwiZmlsbFwiLCBcIm5vbmVcIik7XG4gICAgICB9XG5cbiAgICAgIGlmIChmaWxsU3Ryb2tlTW9kZSA9PT0gX3V0aWwuVGV4dFJlbmRlcmluZ01vZGUuU1RST0tFIHx8IGZpbGxTdHJva2VNb2RlID09PSBfdXRpbC5UZXh0UmVuZGVyaW5nTW9kZS5GSUxMX1NUUk9LRSkge1xuICAgICAgICBjb25zdCBsaW5lV2lkdGhTY2FsZSA9IDEgLyAoY3VycmVudC50ZXh0TWF0cml4U2NhbGUgfHwgMSk7XG5cbiAgICAgICAgdGhpcy5fc2V0U3Ryb2tlQXR0cmlidXRlcyhjdXJyZW50LnRzcGFuLCBsaW5lV2lkdGhTY2FsZSk7XG4gICAgICB9XG5cbiAgICAgIGxldCB0ZXh0TWF0cml4ID0gY3VycmVudC50ZXh0TWF0cml4O1xuXG4gICAgICBpZiAoY3VycmVudC50ZXh0UmlzZSAhPT0gMCkge1xuICAgICAgICB0ZXh0TWF0cml4ID0gdGV4dE1hdHJpeC5zbGljZSgpO1xuICAgICAgICB0ZXh0TWF0cml4WzVdICs9IGN1cnJlbnQudGV4dFJpc2U7XG4gICAgICB9XG5cbiAgICAgIGN1cnJlbnQudHh0RWxlbWVudC5zZXRBdHRyaWJ1dGVOUyhudWxsLCBcInRyYW5zZm9ybVwiLCBgJHtwbSh0ZXh0TWF0cml4KX0gc2NhbGUoJHtwZih0ZXh0SFNjYWxlKX0sIC0xKWApO1xuICAgICAgY3VycmVudC50eHRFbGVtZW50LnNldEF0dHJpYnV0ZU5TKFhNTF9OUywgXCJ4bWw6c3BhY2VcIiwgXCJwcmVzZXJ2ZVwiKTtcbiAgICAgIGN1cnJlbnQudHh0RWxlbWVudC5hcHBlbmRDaGlsZChjdXJyZW50LnRzcGFuKTtcbiAgICAgIGN1cnJlbnQudHh0Z3JwLmFwcGVuZENoaWxkKGN1cnJlbnQudHh0RWxlbWVudCk7XG5cbiAgICAgIHRoaXMuX2Vuc3VyZVRyYW5zZm9ybUdyb3VwKCkuYXBwZW5kQ2hpbGQoY3VycmVudC50eHRFbGVtZW50KTtcbiAgICB9XG5cbiAgICBzZXRMZWFkaW5nTW92ZVRleHQoeCwgeSkge1xuICAgICAgdGhpcy5zZXRMZWFkaW5nKC15KTtcbiAgICAgIHRoaXMubW92ZVRleHQoeCwgeSk7XG4gICAgfVxuXG4gICAgYWRkRm9udFN0eWxlKGZvbnRPYmopIHtcbiAgICAgIGlmICghZm9udE9iai5kYXRhKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcImFkZEZvbnRTdHlsZTogTm8gZm9udCBkYXRhIGF2YWlsYWJsZSwgXCIgKyAnZW5zdXJlIHRoYXQgdGhlIFwiZm9udEV4dHJhUHJvcGVydGllc1wiIEFQSSBwYXJhbWV0ZXIgaXMgc2V0LicpO1xuICAgICAgfVxuXG4gICAgICBpZiAoIXRoaXMuY3NzU3R5bGUpIHtcbiAgICAgICAgdGhpcy5jc3NTdHlsZSA9IHRoaXMuc3ZnRmFjdG9yeS5jcmVhdGVFbGVtZW50KFwic3ZnOnN0eWxlXCIpO1xuICAgICAgICB0aGlzLmNzc1N0eWxlLnNldEF0dHJpYnV0ZU5TKG51bGwsIFwidHlwZVwiLCBcInRleHQvY3NzXCIpO1xuICAgICAgICB0aGlzLmRlZnMuYXBwZW5kQ2hpbGQodGhpcy5jc3NTdHlsZSk7XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IHVybCA9ICgwLCBfdXRpbC5jcmVhdGVPYmplY3RVUkwpKGZvbnRPYmouZGF0YSwgZm9udE9iai5taW1ldHlwZSwgdGhpcy5mb3JjZURhdGFTY2hlbWEpO1xuICAgICAgdGhpcy5jc3NTdHlsZS50ZXh0Q29udGVudCArPSBgQGZvbnQtZmFjZSB7IGZvbnQtZmFtaWx5OiBcIiR7Zm9udE9iai5sb2FkZWROYW1lfVwiO2AgKyBgIHNyYzogdXJsKCR7dXJsfSk7IH1cXG5gO1xuICAgIH1cblxuICAgIHNldEZvbnQoZGV0YWlscykge1xuICAgICAgY29uc3QgY3VycmVudCA9IHRoaXMuY3VycmVudDtcbiAgICAgIGNvbnN0IGZvbnRPYmogPSB0aGlzLmNvbW1vbk9ianMuZ2V0KGRldGFpbHNbMF0pO1xuICAgICAgbGV0IHNpemUgPSBkZXRhaWxzWzFdO1xuICAgICAgY3VycmVudC5mb250ID0gZm9udE9iajtcblxuICAgICAgaWYgKHRoaXMuZW1iZWRGb250cyAmJiAhZm9udE9iai5taXNzaW5nRmlsZSAmJiAhdGhpcy5lbWJlZGRlZEZvbnRzW2ZvbnRPYmoubG9hZGVkTmFtZV0pIHtcbiAgICAgICAgdGhpcy5hZGRGb250U3R5bGUoZm9udE9iaik7XG4gICAgICAgIHRoaXMuZW1iZWRkZWRGb250c1tmb250T2JqLmxvYWRlZE5hbWVdID0gZm9udE9iajtcbiAgICAgIH1cblxuICAgICAgY3VycmVudC5mb250TWF0cml4ID0gZm9udE9iai5mb250TWF0cml4ID8gZm9udE9iai5mb250TWF0cml4IDogX3V0aWwuRk9OVF9JREVOVElUWV9NQVRSSVg7XG4gICAgICBsZXQgYm9sZCA9IFwibm9ybWFsXCI7XG5cbiAgICAgIGlmIChmb250T2JqLmJsYWNrKSB7XG4gICAgICAgIGJvbGQgPSBcIjkwMFwiO1xuICAgICAgfSBlbHNlIGlmIChmb250T2JqLmJvbGQpIHtcbiAgICAgICAgYm9sZCA9IFwiYm9sZFwiO1xuICAgICAgfVxuXG4gICAgICBjb25zdCBpdGFsaWMgPSBmb250T2JqLml0YWxpYyA/IFwiaXRhbGljXCIgOiBcIm5vcm1hbFwiO1xuXG4gICAgICBpZiAoc2l6ZSA8IDApIHtcbiAgICAgICAgc2l6ZSA9IC1zaXplO1xuICAgICAgICBjdXJyZW50LmZvbnREaXJlY3Rpb24gPSAtMTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGN1cnJlbnQuZm9udERpcmVjdGlvbiA9IDE7XG4gICAgICB9XG5cbiAgICAgIGN1cnJlbnQuZm9udFNpemUgPSBzaXplO1xuICAgICAgY3VycmVudC5mb250RmFtaWx5ID0gZm9udE9iai5sb2FkZWROYW1lO1xuICAgICAgY3VycmVudC5mb250V2VpZ2h0ID0gYm9sZDtcbiAgICAgIGN1cnJlbnQuZm9udFN0eWxlID0gaXRhbGljO1xuICAgICAgY3VycmVudC50c3BhbiA9IHRoaXMuc3ZnRmFjdG9yeS5jcmVhdGVFbGVtZW50KFwic3ZnOnRzcGFuXCIpO1xuICAgICAgY3VycmVudC50c3Bhbi5zZXRBdHRyaWJ1dGVOUyhudWxsLCBcInlcIiwgcGYoLWN1cnJlbnQueSkpO1xuICAgICAgY3VycmVudC54Y29vcmRzID0gW107XG4gICAgICBjdXJyZW50Lnljb29yZHMgPSBbXTtcbiAgICB9XG5cbiAgICBlbmRUZXh0KCkge1xuICAgICAgY29uc3QgY3VycmVudCA9IHRoaXMuY3VycmVudDtcblxuICAgICAgaWYgKGN1cnJlbnQudGV4dFJlbmRlcmluZ01vZGUgJiBfdXRpbC5UZXh0UmVuZGVyaW5nTW9kZS5BRERfVE9fUEFUSF9GTEFHICYmIGN1cnJlbnQudHh0RWxlbWVudCAmJiBjdXJyZW50LnR4dEVsZW1lbnQuaGFzQ2hpbGROb2RlcygpKSB7XG4gICAgICAgIGN1cnJlbnQuZWxlbWVudCA9IGN1cnJlbnQudHh0RWxlbWVudDtcbiAgICAgICAgdGhpcy5jbGlwKFwibm9uemVyb1wiKTtcbiAgICAgICAgdGhpcy5lbmRQYXRoKCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgc2V0TGluZVdpZHRoKHdpZHRoKSB7XG4gICAgICBpZiAod2lkdGggPiAwKSB7XG4gICAgICAgIHRoaXMuY3VycmVudC5saW5lV2lkdGggPSB3aWR0aDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBzZXRMaW5lQ2FwKHN0eWxlKSB7XG4gICAgICB0aGlzLmN1cnJlbnQubGluZUNhcCA9IExJTkVfQ0FQX1NUWUxFU1tzdHlsZV07XG4gICAgfVxuXG4gICAgc2V0TGluZUpvaW4oc3R5bGUpIHtcbiAgICAgIHRoaXMuY3VycmVudC5saW5lSm9pbiA9IExJTkVfSk9JTl9TVFlMRVNbc3R5bGVdO1xuICAgIH1cblxuICAgIHNldE1pdGVyTGltaXQobGltaXQpIHtcbiAgICAgIHRoaXMuY3VycmVudC5taXRlckxpbWl0ID0gbGltaXQ7XG4gICAgfVxuXG4gICAgc2V0U3Ryb2tlQWxwaGEoc3Ryb2tlQWxwaGEpIHtcbiAgICAgIHRoaXMuY3VycmVudC5zdHJva2VBbHBoYSA9IHN0cm9rZUFscGhhO1xuICAgIH1cblxuICAgIHNldFN0cm9rZVJHQkNvbG9yKHIsIGcsIGIpIHtcbiAgICAgIHRoaXMuY3VycmVudC5zdHJva2VDb2xvciA9IF91dGlsLlV0aWwubWFrZUNzc1JnYihyLCBnLCBiKTtcbiAgICB9XG5cbiAgICBzZXRGaWxsQWxwaGEoZmlsbEFscGhhKSB7XG4gICAgICB0aGlzLmN1cnJlbnQuZmlsbEFscGhhID0gZmlsbEFscGhhO1xuICAgIH1cblxuICAgIHNldEZpbGxSR0JDb2xvcihyLCBnLCBiKSB7XG4gICAgICB0aGlzLmN1cnJlbnQuZmlsbENvbG9yID0gX3V0aWwuVXRpbC5tYWtlQ3NzUmdiKHIsIGcsIGIpO1xuICAgICAgdGhpcy5jdXJyZW50LnRzcGFuID0gdGhpcy5zdmdGYWN0b3J5LmNyZWF0ZUVsZW1lbnQoXCJzdmc6dHNwYW5cIik7XG4gICAgICB0aGlzLmN1cnJlbnQueGNvb3JkcyA9IFtdO1xuICAgICAgdGhpcy5jdXJyZW50Lnljb29yZHMgPSBbXTtcbiAgICB9XG5cbiAgICBzZXRTdHJva2VDb2xvck4oYXJncykge1xuICAgICAgdGhpcy5jdXJyZW50LnN0cm9rZUNvbG9yID0gdGhpcy5fbWFrZUNvbG9yTl9QYXR0ZXJuKGFyZ3MpO1xuICAgIH1cblxuICAgIHNldEZpbGxDb2xvck4oYXJncykge1xuICAgICAgdGhpcy5jdXJyZW50LmZpbGxDb2xvciA9IHRoaXMuX21ha2VDb2xvck5fUGF0dGVybihhcmdzKTtcbiAgICB9XG5cbiAgICBzaGFkaW5nRmlsbChhcmdzKSB7XG4gICAgICBjb25zdCB3aWR0aCA9IHRoaXMudmlld3BvcnQud2lkdGg7XG4gICAgICBjb25zdCBoZWlnaHQgPSB0aGlzLnZpZXdwb3J0LmhlaWdodDtcblxuICAgICAgY29uc3QgaW52ID0gX3V0aWwuVXRpbC5pbnZlcnNlVHJhbnNmb3JtKHRoaXMudHJhbnNmb3JtTWF0cml4KTtcblxuICAgICAgY29uc3QgYmwgPSBfdXRpbC5VdGlsLmFwcGx5VHJhbnNmb3JtKFswLCAwXSwgaW52KTtcblxuICAgICAgY29uc3QgYnIgPSBfdXRpbC5VdGlsLmFwcGx5VHJhbnNmb3JtKFswLCBoZWlnaHRdLCBpbnYpO1xuXG4gICAgICBjb25zdCB1bCA9IF91dGlsLlV0aWwuYXBwbHlUcmFuc2Zvcm0oW3dpZHRoLCAwXSwgaW52KTtcblxuICAgICAgY29uc3QgdXIgPSBfdXRpbC5VdGlsLmFwcGx5VHJhbnNmb3JtKFt3aWR0aCwgaGVpZ2h0XSwgaW52KTtcblxuICAgICAgY29uc3QgeDAgPSBNYXRoLm1pbihibFswXSwgYnJbMF0sIHVsWzBdLCB1clswXSk7XG4gICAgICBjb25zdCB5MCA9IE1hdGgubWluKGJsWzFdLCBiclsxXSwgdWxbMV0sIHVyWzFdKTtcbiAgICAgIGNvbnN0IHgxID0gTWF0aC5tYXgoYmxbMF0sIGJyWzBdLCB1bFswXSwgdXJbMF0pO1xuICAgICAgY29uc3QgeTEgPSBNYXRoLm1heChibFsxXSwgYnJbMV0sIHVsWzFdLCB1clsxXSk7XG4gICAgICBjb25zdCByZWN0ID0gdGhpcy5zdmdGYWN0b3J5LmNyZWF0ZUVsZW1lbnQoXCJzdmc6cmVjdFwiKTtcbiAgICAgIHJlY3Quc2V0QXR0cmlidXRlTlMobnVsbCwgXCJ4XCIsIHgwKTtcbiAgICAgIHJlY3Quc2V0QXR0cmlidXRlTlMobnVsbCwgXCJ5XCIsIHkwKTtcbiAgICAgIHJlY3Quc2V0QXR0cmlidXRlTlMobnVsbCwgXCJ3aWR0aFwiLCB4MSAtIHgwKTtcbiAgICAgIHJlY3Quc2V0QXR0cmlidXRlTlMobnVsbCwgXCJoZWlnaHRcIiwgeTEgLSB5MCk7XG4gICAgICByZWN0LnNldEF0dHJpYnV0ZU5TKG51bGwsIFwiZmlsbFwiLCB0aGlzLl9tYWtlU2hhZGluZ1BhdHRlcm4oYXJncykpO1xuXG4gICAgICBpZiAodGhpcy5jdXJyZW50LmZpbGxBbHBoYSA8IDEpIHtcbiAgICAgICAgcmVjdC5zZXRBdHRyaWJ1dGVOUyhudWxsLCBcImZpbGwtb3BhY2l0eVwiLCB0aGlzLmN1cnJlbnQuZmlsbEFscGhhKTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5fZW5zdXJlVHJhbnNmb3JtR3JvdXAoKS5hcHBlbmRDaGlsZChyZWN0KTtcbiAgICB9XG5cbiAgICBfbWFrZUNvbG9yTl9QYXR0ZXJuKGFyZ3MpIHtcbiAgICAgIGlmIChhcmdzWzBdID09PSBcIlRpbGluZ1BhdHRlcm5cIikge1xuICAgICAgICByZXR1cm4gdGhpcy5fbWFrZVRpbGluZ1BhdHRlcm4oYXJncyk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzLl9tYWtlU2hhZGluZ1BhdHRlcm4oYXJncyk7XG4gICAgfVxuXG4gICAgX21ha2VUaWxpbmdQYXR0ZXJuKGFyZ3MpIHtcbiAgICAgIGNvbnN0IGNvbG9yID0gYXJnc1sxXTtcbiAgICAgIGNvbnN0IG9wZXJhdG9yTGlzdCA9IGFyZ3NbMl07XG4gICAgICBjb25zdCBtYXRyaXggPSBhcmdzWzNdIHx8IF91dGlsLklERU5USVRZX01BVFJJWDtcbiAgICAgIGNvbnN0IFt4MCwgeTAsIHgxLCB5MV0gPSBhcmdzWzRdO1xuICAgICAgY29uc3QgeHN0ZXAgPSBhcmdzWzVdO1xuICAgICAgY29uc3QgeXN0ZXAgPSBhcmdzWzZdO1xuICAgICAgY29uc3QgcGFpbnRUeXBlID0gYXJnc1s3XTtcbiAgICAgIGNvbnN0IHRpbGluZ0lkID0gYHNoYWRpbmcke3NoYWRpbmdDb3VudCsrfWA7XG5cbiAgICAgIGNvbnN0IFt0eDAsIHR5MF0gPSBfdXRpbC5VdGlsLmFwcGx5VHJhbnNmb3JtKFt4MCwgeTBdLCBtYXRyaXgpO1xuXG4gICAgICBjb25zdCBbdHgxLCB0eTFdID0gX3V0aWwuVXRpbC5hcHBseVRyYW5zZm9ybShbeDEsIHkxXSwgbWF0cml4KTtcblxuICAgICAgY29uc3QgW3hzY2FsZSwgeXNjYWxlXSA9IF91dGlsLlV0aWwuc2luZ3VsYXJWYWx1ZURlY29tcG9zZTJkU2NhbGUobWF0cml4KTtcblxuICAgICAgY29uc3QgdHhzdGVwID0geHN0ZXAgKiB4c2NhbGU7XG4gICAgICBjb25zdCB0eXN0ZXAgPSB5c3RlcCAqIHlzY2FsZTtcbiAgICAgIGNvbnN0IHRpbGluZyA9IHRoaXMuc3ZnRmFjdG9yeS5jcmVhdGVFbGVtZW50KFwic3ZnOnBhdHRlcm5cIik7XG4gICAgICB0aWxpbmcuc2V0QXR0cmlidXRlTlMobnVsbCwgXCJpZFwiLCB0aWxpbmdJZCk7XG4gICAgICB0aWxpbmcuc2V0QXR0cmlidXRlTlMobnVsbCwgXCJwYXR0ZXJuVW5pdHNcIiwgXCJ1c2VyU3BhY2VPblVzZVwiKTtcbiAgICAgIHRpbGluZy5zZXRBdHRyaWJ1dGVOUyhudWxsLCBcIndpZHRoXCIsIHR4c3RlcCk7XG4gICAgICB0aWxpbmcuc2V0QXR0cmlidXRlTlMobnVsbCwgXCJoZWlnaHRcIiwgdHlzdGVwKTtcbiAgICAgIHRpbGluZy5zZXRBdHRyaWJ1dGVOUyhudWxsLCBcInhcIiwgYCR7dHgwfWApO1xuICAgICAgdGlsaW5nLnNldEF0dHJpYnV0ZU5TKG51bGwsIFwieVwiLCBgJHt0eTB9YCk7XG4gICAgICBjb25zdCBzdmcgPSB0aGlzLnN2ZztcbiAgICAgIGNvbnN0IHRyYW5zZm9ybU1hdHJpeCA9IHRoaXMudHJhbnNmb3JtTWF0cml4O1xuICAgICAgY29uc3QgZmlsbENvbG9yID0gdGhpcy5jdXJyZW50LmZpbGxDb2xvcjtcbiAgICAgIGNvbnN0IHN0cm9rZUNvbG9yID0gdGhpcy5jdXJyZW50LnN0cm9rZUNvbG9yO1xuICAgICAgY29uc3QgYmJveCA9IHRoaXMuc3ZnRmFjdG9yeS5jcmVhdGUodHgxIC0gdHgwLCB0eTEgLSB0eTApO1xuICAgICAgdGhpcy5zdmcgPSBiYm94O1xuICAgICAgdGhpcy50cmFuc2Zvcm1NYXRyaXggPSBtYXRyaXg7XG5cbiAgICAgIGlmIChwYWludFR5cGUgPT09IDIpIHtcbiAgICAgICAgY29uc3QgY3NzQ29sb3IgPSBfdXRpbC5VdGlsLm1ha2VDc3NSZ2IoLi4uY29sb3IpO1xuXG4gICAgICAgIHRoaXMuY3VycmVudC5maWxsQ29sb3IgPSBjc3NDb2xvcjtcbiAgICAgICAgdGhpcy5jdXJyZW50LnN0cm9rZUNvbG9yID0gY3NzQ29sb3I7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuZXhlY3V0ZU9wVHJlZSh0aGlzLmNvbnZlcnRPcExpc3Qob3BlcmF0b3JMaXN0KSk7XG4gICAgICB0aGlzLnN2ZyA9IHN2ZztcbiAgICAgIHRoaXMudHJhbnNmb3JtTWF0cml4ID0gdHJhbnNmb3JtTWF0cml4O1xuICAgICAgdGhpcy5jdXJyZW50LmZpbGxDb2xvciA9IGZpbGxDb2xvcjtcbiAgICAgIHRoaXMuY3VycmVudC5zdHJva2VDb2xvciA9IHN0cm9rZUNvbG9yO1xuICAgICAgdGlsaW5nLmFwcGVuZENoaWxkKGJib3guY2hpbGROb2Rlc1swXSk7XG4gICAgICB0aGlzLmRlZnMuYXBwZW5kQ2hpbGQodGlsaW5nKTtcbiAgICAgIHJldHVybiBgdXJsKCMke3RpbGluZ0lkfSlgO1xuICAgIH1cblxuICAgIF9tYWtlU2hhZGluZ1BhdHRlcm4oYXJncykge1xuICAgICAgc3dpdGNoIChhcmdzWzBdKSB7XG4gICAgICAgIGNhc2UgXCJSYWRpYWxBeGlhbFwiOlxuICAgICAgICAgIGNvbnN0IHNoYWRpbmdJZCA9IGBzaGFkaW5nJHtzaGFkaW5nQ291bnQrK31gO1xuICAgICAgICAgIGNvbnN0IGNvbG9yU3RvcHMgPSBhcmdzWzNdO1xuICAgICAgICAgIGxldCBncmFkaWVudDtcblxuICAgICAgICAgIHN3aXRjaCAoYXJnc1sxXSkge1xuICAgICAgICAgICAgY2FzZSBcImF4aWFsXCI6XG4gICAgICAgICAgICAgIGNvbnN0IHBvaW50MCA9IGFyZ3NbNF07XG4gICAgICAgICAgICAgIGNvbnN0IHBvaW50MSA9IGFyZ3NbNV07XG4gICAgICAgICAgICAgIGdyYWRpZW50ID0gdGhpcy5zdmdGYWN0b3J5LmNyZWF0ZUVsZW1lbnQoXCJzdmc6bGluZWFyR3JhZGllbnRcIik7XG4gICAgICAgICAgICAgIGdyYWRpZW50LnNldEF0dHJpYnV0ZU5TKG51bGwsIFwiaWRcIiwgc2hhZGluZ0lkKTtcbiAgICAgICAgICAgICAgZ3JhZGllbnQuc2V0QXR0cmlidXRlTlMobnVsbCwgXCJncmFkaWVudFVuaXRzXCIsIFwidXNlclNwYWNlT25Vc2VcIik7XG4gICAgICAgICAgICAgIGdyYWRpZW50LnNldEF0dHJpYnV0ZU5TKG51bGwsIFwieDFcIiwgcG9pbnQwWzBdKTtcbiAgICAgICAgICAgICAgZ3JhZGllbnQuc2V0QXR0cmlidXRlTlMobnVsbCwgXCJ5MVwiLCBwb2ludDBbMV0pO1xuICAgICAgICAgICAgICBncmFkaWVudC5zZXRBdHRyaWJ1dGVOUyhudWxsLCBcIngyXCIsIHBvaW50MVswXSk7XG4gICAgICAgICAgICAgIGdyYWRpZW50LnNldEF0dHJpYnV0ZU5TKG51bGwsIFwieTJcIiwgcG9pbnQxWzFdKTtcbiAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgIGNhc2UgXCJyYWRpYWxcIjpcbiAgICAgICAgICAgICAgY29uc3QgZm9jYWxQb2ludCA9IGFyZ3NbNF07XG4gICAgICAgICAgICAgIGNvbnN0IGNpcmNsZVBvaW50ID0gYXJnc1s1XTtcbiAgICAgICAgICAgICAgY29uc3QgZm9jYWxSYWRpdXMgPSBhcmdzWzZdO1xuICAgICAgICAgICAgICBjb25zdCBjaXJjbGVSYWRpdXMgPSBhcmdzWzddO1xuICAgICAgICAgICAgICBncmFkaWVudCA9IHRoaXMuc3ZnRmFjdG9yeS5jcmVhdGVFbGVtZW50KFwic3ZnOnJhZGlhbEdyYWRpZW50XCIpO1xuICAgICAgICAgICAgICBncmFkaWVudC5zZXRBdHRyaWJ1dGVOUyhudWxsLCBcImlkXCIsIHNoYWRpbmdJZCk7XG4gICAgICAgICAgICAgIGdyYWRpZW50LnNldEF0dHJpYnV0ZU5TKG51bGwsIFwiZ3JhZGllbnRVbml0c1wiLCBcInVzZXJTcGFjZU9uVXNlXCIpO1xuICAgICAgICAgICAgICBncmFkaWVudC5zZXRBdHRyaWJ1dGVOUyhudWxsLCBcImN4XCIsIGNpcmNsZVBvaW50WzBdKTtcbiAgICAgICAgICAgICAgZ3JhZGllbnQuc2V0QXR0cmlidXRlTlMobnVsbCwgXCJjeVwiLCBjaXJjbGVQb2ludFsxXSk7XG4gICAgICAgICAgICAgIGdyYWRpZW50LnNldEF0dHJpYnV0ZU5TKG51bGwsIFwiclwiLCBjaXJjbGVSYWRpdXMpO1xuICAgICAgICAgICAgICBncmFkaWVudC5zZXRBdHRyaWJ1dGVOUyhudWxsLCBcImZ4XCIsIGZvY2FsUG9pbnRbMF0pO1xuICAgICAgICAgICAgICBncmFkaWVudC5zZXRBdHRyaWJ1dGVOUyhudWxsLCBcImZ5XCIsIGZvY2FsUG9pbnRbMV0pO1xuICAgICAgICAgICAgICBncmFkaWVudC5zZXRBdHRyaWJ1dGVOUyhudWxsLCBcImZyXCIsIGZvY2FsUmFkaXVzKTtcbiAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgVW5rbm93biBSYWRpYWxBeGlhbCB0eXBlOiAke2FyZ3NbMV19YCk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgZm9yIChjb25zdCBjb2xvclN0b3Agb2YgY29sb3JTdG9wcykge1xuICAgICAgICAgICAgY29uc3Qgc3RvcCA9IHRoaXMuc3ZnRmFjdG9yeS5jcmVhdGVFbGVtZW50KFwic3ZnOnN0b3BcIik7XG4gICAgICAgICAgICBzdG9wLnNldEF0dHJpYnV0ZU5TKG51bGwsIFwib2Zmc2V0XCIsIGNvbG9yU3RvcFswXSk7XG4gICAgICAgICAgICBzdG9wLnNldEF0dHJpYnV0ZU5TKG51bGwsIFwic3RvcC1jb2xvclwiLCBjb2xvclN0b3BbMV0pO1xuICAgICAgICAgICAgZ3JhZGllbnQuYXBwZW5kQ2hpbGQoc3RvcCk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdGhpcy5kZWZzLmFwcGVuZENoaWxkKGdyYWRpZW50KTtcbiAgICAgICAgICByZXR1cm4gYHVybCgjJHtzaGFkaW5nSWR9KWA7XG5cbiAgICAgICAgY2FzZSBcIk1lc2hcIjpcbiAgICAgICAgICAoMCwgX3V0aWwud2FybikoXCJVbmltcGxlbWVudGVkIHBhdHRlcm4gTWVzaFwiKTtcbiAgICAgICAgICByZXR1cm4gbnVsbDtcblxuICAgICAgICBjYXNlIFwiRHVtbXlcIjpcbiAgICAgICAgICByZXR1cm4gXCJob3RwaW5rXCI7XG5cbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFVua25vd24gSVIgdHlwZTogJHthcmdzWzBdfWApO1xuICAgICAgfVxuICAgIH1cblxuICAgIHNldERhc2goZGFzaEFycmF5LCBkYXNoUGhhc2UpIHtcbiAgICAgIHRoaXMuY3VycmVudC5kYXNoQXJyYXkgPSBkYXNoQXJyYXk7XG4gICAgICB0aGlzLmN1cnJlbnQuZGFzaFBoYXNlID0gZGFzaFBoYXNlO1xuICAgIH1cblxuICAgIGNvbnN0cnVjdFBhdGgob3BzLCBhcmdzKSB7XG4gICAgICBjb25zdCBjdXJyZW50ID0gdGhpcy5jdXJyZW50O1xuICAgICAgbGV0IHggPSBjdXJyZW50LngsXG4gICAgICAgICAgeSA9IGN1cnJlbnQueTtcbiAgICAgIGxldCBkID0gW107XG4gICAgICBsZXQgaiA9IDA7XG5cbiAgICAgIGZvciAoY29uc3Qgb3Agb2Ygb3BzKSB7XG4gICAgICAgIHN3aXRjaCAob3AgfCAwKSB7XG4gICAgICAgICAgY2FzZSBfdXRpbC5PUFMucmVjdGFuZ2xlOlxuICAgICAgICAgICAgeCA9IGFyZ3NbaisrXTtcbiAgICAgICAgICAgIHkgPSBhcmdzW2orK107XG4gICAgICAgICAgICBjb25zdCB3aWR0aCA9IGFyZ3NbaisrXTtcbiAgICAgICAgICAgIGNvbnN0IGhlaWdodCA9IGFyZ3NbaisrXTtcbiAgICAgICAgICAgIGNvbnN0IHh3ID0geCArIHdpZHRoO1xuICAgICAgICAgICAgY29uc3QgeWggPSB5ICsgaGVpZ2h0O1xuICAgICAgICAgICAgZC5wdXNoKFwiTVwiLCBwZih4KSwgcGYoeSksIFwiTFwiLCBwZih4dyksIHBmKHkpLCBcIkxcIiwgcGYoeHcpLCBwZih5aCksIFwiTFwiLCBwZih4KSwgcGYoeWgpLCBcIlpcIik7XG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgIGNhc2UgX3V0aWwuT1BTLm1vdmVUbzpcbiAgICAgICAgICAgIHggPSBhcmdzW2orK107XG4gICAgICAgICAgICB5ID0gYXJnc1tqKytdO1xuICAgICAgICAgICAgZC5wdXNoKFwiTVwiLCBwZih4KSwgcGYoeSkpO1xuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICBjYXNlIF91dGlsLk9QUy5saW5lVG86XG4gICAgICAgICAgICB4ID0gYXJnc1tqKytdO1xuICAgICAgICAgICAgeSA9IGFyZ3NbaisrXTtcbiAgICAgICAgICAgIGQucHVzaChcIkxcIiwgcGYoeCksIHBmKHkpKTtcbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgY2FzZSBfdXRpbC5PUFMuY3VydmVUbzpcbiAgICAgICAgICAgIHggPSBhcmdzW2ogKyA0XTtcbiAgICAgICAgICAgIHkgPSBhcmdzW2ogKyA1XTtcbiAgICAgICAgICAgIGQucHVzaChcIkNcIiwgcGYoYXJnc1tqXSksIHBmKGFyZ3NbaiArIDFdKSwgcGYoYXJnc1tqICsgMl0pLCBwZihhcmdzW2ogKyAzXSksIHBmKHgpLCBwZih5KSk7XG4gICAgICAgICAgICBqICs9IDY7XG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgIGNhc2UgX3V0aWwuT1BTLmN1cnZlVG8yOlxuICAgICAgICAgICAgZC5wdXNoKFwiQ1wiLCBwZih4KSwgcGYoeSksIHBmKGFyZ3Nbal0pLCBwZihhcmdzW2ogKyAxXSksIHBmKGFyZ3NbaiArIDJdKSwgcGYoYXJnc1tqICsgM10pKTtcbiAgICAgICAgICAgIHggPSBhcmdzW2ogKyAyXTtcbiAgICAgICAgICAgIHkgPSBhcmdzW2ogKyAzXTtcbiAgICAgICAgICAgIGogKz0gNDtcbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgY2FzZSBfdXRpbC5PUFMuY3VydmVUbzM6XG4gICAgICAgICAgICB4ID0gYXJnc1tqICsgMl07XG4gICAgICAgICAgICB5ID0gYXJnc1tqICsgM107XG4gICAgICAgICAgICBkLnB1c2goXCJDXCIsIHBmKGFyZ3Nbal0pLCBwZihhcmdzW2ogKyAxXSksIHBmKHgpLCBwZih5KSwgcGYoeCksIHBmKHkpKTtcbiAgICAgICAgICAgIGogKz0gNDtcbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgY2FzZSBfdXRpbC5PUFMuY2xvc2VQYXRoOlxuICAgICAgICAgICAgZC5wdXNoKFwiWlwiKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGQgPSBkLmpvaW4oXCIgXCIpO1xuXG4gICAgICBpZiAoY3VycmVudC5wYXRoICYmIG9wcy5sZW5ndGggPiAwICYmIG9wc1swXSAhPT0gX3V0aWwuT1BTLnJlY3RhbmdsZSAmJiBvcHNbMF0gIT09IF91dGlsLk9QUy5tb3ZlVG8pIHtcbiAgICAgICAgZCA9IGN1cnJlbnQucGF0aC5nZXRBdHRyaWJ1dGVOUyhudWxsLCBcImRcIikgKyBkO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY3VycmVudC5wYXRoID0gdGhpcy5zdmdGYWN0b3J5LmNyZWF0ZUVsZW1lbnQoXCJzdmc6cGF0aFwiKTtcblxuICAgICAgICB0aGlzLl9lbnN1cmVUcmFuc2Zvcm1Hcm91cCgpLmFwcGVuZENoaWxkKGN1cnJlbnQucGF0aCk7XG4gICAgICB9XG5cbiAgICAgIGN1cnJlbnQucGF0aC5zZXRBdHRyaWJ1dGVOUyhudWxsLCBcImRcIiwgZCk7XG4gICAgICBjdXJyZW50LnBhdGguc2V0QXR0cmlidXRlTlMobnVsbCwgXCJmaWxsXCIsIFwibm9uZVwiKTtcbiAgICAgIGN1cnJlbnQuZWxlbWVudCA9IGN1cnJlbnQucGF0aDtcbiAgICAgIGN1cnJlbnQuc2V0Q3VycmVudFBvaW50KHgsIHkpO1xuICAgIH1cblxuICAgIGVuZFBhdGgoKSB7XG4gICAgICBjb25zdCBjdXJyZW50ID0gdGhpcy5jdXJyZW50O1xuICAgICAgY3VycmVudC5wYXRoID0gbnVsbDtcblxuICAgICAgaWYgKCF0aGlzLnBlbmRpbmdDbGlwKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKCFjdXJyZW50LmVsZW1lbnQpIHtcbiAgICAgICAgdGhpcy5wZW5kaW5nQ2xpcCA9IG51bGw7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgY29uc3QgY2xpcElkID0gYGNsaXBwYXRoJHtjbGlwQ291bnQrK31gO1xuICAgICAgY29uc3QgY2xpcFBhdGggPSB0aGlzLnN2Z0ZhY3RvcnkuY3JlYXRlRWxlbWVudChcInN2ZzpjbGlwUGF0aFwiKTtcbiAgICAgIGNsaXBQYXRoLnNldEF0dHJpYnV0ZU5TKG51bGwsIFwiaWRcIiwgY2xpcElkKTtcbiAgICAgIGNsaXBQYXRoLnNldEF0dHJpYnV0ZU5TKG51bGwsIFwidHJhbnNmb3JtXCIsIHBtKHRoaXMudHJhbnNmb3JtTWF0cml4KSk7XG4gICAgICBjb25zdCBjbGlwRWxlbWVudCA9IGN1cnJlbnQuZWxlbWVudC5jbG9uZU5vZGUodHJ1ZSk7XG5cbiAgICAgIGlmICh0aGlzLnBlbmRpbmdDbGlwID09PSBcImV2ZW5vZGRcIikge1xuICAgICAgICBjbGlwRWxlbWVudC5zZXRBdHRyaWJ1dGVOUyhudWxsLCBcImNsaXAtcnVsZVwiLCBcImV2ZW5vZGRcIik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjbGlwRWxlbWVudC5zZXRBdHRyaWJ1dGVOUyhudWxsLCBcImNsaXAtcnVsZVwiLCBcIm5vbnplcm9cIik7XG4gICAgICB9XG5cbiAgICAgIHRoaXMucGVuZGluZ0NsaXAgPSBudWxsO1xuICAgICAgY2xpcFBhdGguYXBwZW5kQ2hpbGQoY2xpcEVsZW1lbnQpO1xuICAgICAgdGhpcy5kZWZzLmFwcGVuZENoaWxkKGNsaXBQYXRoKTtcblxuICAgICAgaWYgKGN1cnJlbnQuYWN0aXZlQ2xpcFVybCkge1xuICAgICAgICBjdXJyZW50LmNsaXBHcm91cCA9IG51bGw7XG4gICAgICAgIHRoaXMuZXh0cmFTdGFjay5mb3JFYWNoKGZ1bmN0aW9uIChwcmV2KSB7XG4gICAgICAgICAgcHJldi5jbGlwR3JvdXAgPSBudWxsO1xuICAgICAgICB9KTtcbiAgICAgICAgY2xpcFBhdGguc2V0QXR0cmlidXRlTlMobnVsbCwgXCJjbGlwLXBhdGhcIiwgY3VycmVudC5hY3RpdmVDbGlwVXJsKTtcbiAgICAgIH1cblxuICAgICAgY3VycmVudC5hY3RpdmVDbGlwVXJsID0gYHVybCgjJHtjbGlwSWR9KWA7XG4gICAgICB0aGlzLnRncnAgPSBudWxsO1xuICAgIH1cblxuICAgIGNsaXAodHlwZSkge1xuICAgICAgdGhpcy5wZW5kaW5nQ2xpcCA9IHR5cGU7XG4gICAgfVxuXG4gICAgY2xvc2VQYXRoKCkge1xuICAgICAgY29uc3QgY3VycmVudCA9IHRoaXMuY3VycmVudDtcblxuICAgICAgaWYgKGN1cnJlbnQucGF0aCkge1xuICAgICAgICBjb25zdCBkID0gYCR7Y3VycmVudC5wYXRoLmdldEF0dHJpYnV0ZU5TKG51bGwsIFwiZFwiKX1aYDtcbiAgICAgICAgY3VycmVudC5wYXRoLnNldEF0dHJpYnV0ZU5TKG51bGwsIFwiZFwiLCBkKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBzZXRMZWFkaW5nKGxlYWRpbmcpIHtcbiAgICAgIHRoaXMuY3VycmVudC5sZWFkaW5nID0gLWxlYWRpbmc7XG4gICAgfVxuXG4gICAgc2V0VGV4dFJpc2UodGV4dFJpc2UpIHtcbiAgICAgIHRoaXMuY3VycmVudC50ZXh0UmlzZSA9IHRleHRSaXNlO1xuICAgIH1cblxuICAgIHNldFRleHRSZW5kZXJpbmdNb2RlKHRleHRSZW5kZXJpbmdNb2RlKSB7XG4gICAgICB0aGlzLmN1cnJlbnQudGV4dFJlbmRlcmluZ01vZGUgPSB0ZXh0UmVuZGVyaW5nTW9kZTtcbiAgICB9XG5cbiAgICBzZXRIU2NhbGUoc2NhbGUpIHtcbiAgICAgIHRoaXMuY3VycmVudC50ZXh0SFNjYWxlID0gc2NhbGUgLyAxMDA7XG4gICAgfVxuXG4gICAgc2V0UmVuZGVyaW5nSW50ZW50KGludGVudCkge31cblxuICAgIHNldEZsYXRuZXNzKGZsYXRuZXNzKSB7fVxuXG4gICAgc2V0R1N0YXRlKHN0YXRlcykge1xuICAgICAgZm9yIChjb25zdCBba2V5LCB2YWx1ZV0gb2Ygc3RhdGVzKSB7XG4gICAgICAgIHN3aXRjaCAoa2V5KSB7XG4gICAgICAgICAgY2FzZSBcIkxXXCI6XG4gICAgICAgICAgICB0aGlzLnNldExpbmVXaWR0aCh2YWx1ZSk7XG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgIGNhc2UgXCJMQ1wiOlxuICAgICAgICAgICAgdGhpcy5zZXRMaW5lQ2FwKHZhbHVlKTtcbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgY2FzZSBcIkxKXCI6XG4gICAgICAgICAgICB0aGlzLnNldExpbmVKb2luKHZhbHVlKTtcbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgY2FzZSBcIk1MXCI6XG4gICAgICAgICAgICB0aGlzLnNldE1pdGVyTGltaXQodmFsdWUpO1xuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICBjYXNlIFwiRFwiOlxuICAgICAgICAgICAgdGhpcy5zZXREYXNoKHZhbHVlWzBdLCB2YWx1ZVsxXSk7XG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgIGNhc2UgXCJSSVwiOlxuICAgICAgICAgICAgdGhpcy5zZXRSZW5kZXJpbmdJbnRlbnQodmFsdWUpO1xuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICBjYXNlIFwiRkxcIjpcbiAgICAgICAgICAgIHRoaXMuc2V0RmxhdG5lc3ModmFsdWUpO1xuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICBjYXNlIFwiRm9udFwiOlxuICAgICAgICAgICAgdGhpcy5zZXRGb250KHZhbHVlKTtcbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgY2FzZSBcIkNBXCI6XG4gICAgICAgICAgICB0aGlzLnNldFN0cm9rZUFscGhhKHZhbHVlKTtcbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgY2FzZSBcImNhXCI6XG4gICAgICAgICAgICB0aGlzLnNldEZpbGxBbHBoYSh2YWx1ZSk7XG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAoMCwgX3V0aWwud2FybikoYFVuaW1wbGVtZW50ZWQgZ3JhcGhpYyBzdGF0ZSBvcGVyYXRvciAke2tleX1gKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgZmlsbCgpIHtcbiAgICAgIGNvbnN0IGN1cnJlbnQgPSB0aGlzLmN1cnJlbnQ7XG5cbiAgICAgIGlmIChjdXJyZW50LmVsZW1lbnQpIHtcbiAgICAgICAgY3VycmVudC5lbGVtZW50LnNldEF0dHJpYnV0ZU5TKG51bGwsIFwiZmlsbFwiLCBjdXJyZW50LmZpbGxDb2xvcik7XG4gICAgICAgIGN1cnJlbnQuZWxlbWVudC5zZXRBdHRyaWJ1dGVOUyhudWxsLCBcImZpbGwtb3BhY2l0eVwiLCBjdXJyZW50LmZpbGxBbHBoYSk7XG4gICAgICAgIHRoaXMuZW5kUGF0aCgpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHN0cm9rZSgpIHtcbiAgICAgIGNvbnN0IGN1cnJlbnQgPSB0aGlzLmN1cnJlbnQ7XG5cbiAgICAgIGlmIChjdXJyZW50LmVsZW1lbnQpIHtcbiAgICAgICAgdGhpcy5fc2V0U3Ryb2tlQXR0cmlidXRlcyhjdXJyZW50LmVsZW1lbnQpO1xuXG4gICAgICAgIGN1cnJlbnQuZWxlbWVudC5zZXRBdHRyaWJ1dGVOUyhudWxsLCBcImZpbGxcIiwgXCJub25lXCIpO1xuICAgICAgICB0aGlzLmVuZFBhdGgoKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBfc2V0U3Ryb2tlQXR0cmlidXRlcyhlbGVtZW50LCBsaW5lV2lkdGhTY2FsZSA9IDEpIHtcbiAgICAgIGNvbnN0IGN1cnJlbnQgPSB0aGlzLmN1cnJlbnQ7XG4gICAgICBsZXQgZGFzaEFycmF5ID0gY3VycmVudC5kYXNoQXJyYXk7XG5cbiAgICAgIGlmIChsaW5lV2lkdGhTY2FsZSAhPT0gMSAmJiBkYXNoQXJyYXkubGVuZ3RoID4gMCkge1xuICAgICAgICBkYXNoQXJyYXkgPSBkYXNoQXJyYXkubWFwKGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgIHJldHVybiBsaW5lV2lkdGhTY2FsZSAqIHZhbHVlO1xuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgZWxlbWVudC5zZXRBdHRyaWJ1dGVOUyhudWxsLCBcInN0cm9rZVwiLCBjdXJyZW50LnN0cm9rZUNvbG9yKTtcbiAgICAgIGVsZW1lbnQuc2V0QXR0cmlidXRlTlMobnVsbCwgXCJzdHJva2Utb3BhY2l0eVwiLCBjdXJyZW50LnN0cm9rZUFscGhhKTtcbiAgICAgIGVsZW1lbnQuc2V0QXR0cmlidXRlTlMobnVsbCwgXCJzdHJva2UtbWl0ZXJsaW1pdFwiLCBwZihjdXJyZW50Lm1pdGVyTGltaXQpKTtcbiAgICAgIGVsZW1lbnQuc2V0QXR0cmlidXRlTlMobnVsbCwgXCJzdHJva2UtbGluZWNhcFwiLCBjdXJyZW50LmxpbmVDYXApO1xuICAgICAgZWxlbWVudC5zZXRBdHRyaWJ1dGVOUyhudWxsLCBcInN0cm9rZS1saW5lam9pblwiLCBjdXJyZW50LmxpbmVKb2luKTtcbiAgICAgIGVsZW1lbnQuc2V0QXR0cmlidXRlTlMobnVsbCwgXCJzdHJva2Utd2lkdGhcIiwgcGYobGluZVdpZHRoU2NhbGUgKiBjdXJyZW50LmxpbmVXaWR0aCkgKyBcInB4XCIpO1xuICAgICAgZWxlbWVudC5zZXRBdHRyaWJ1dGVOUyhudWxsLCBcInN0cm9rZS1kYXNoYXJyYXlcIiwgZGFzaEFycmF5Lm1hcChwZikuam9pbihcIiBcIikpO1xuICAgICAgZWxlbWVudC5zZXRBdHRyaWJ1dGVOUyhudWxsLCBcInN0cm9rZS1kYXNob2Zmc2V0XCIsIHBmKGxpbmVXaWR0aFNjYWxlICogY3VycmVudC5kYXNoUGhhc2UpICsgXCJweFwiKTtcbiAgICB9XG5cbiAgICBlb0ZpbGwoKSB7XG4gICAgICBpZiAodGhpcy5jdXJyZW50LmVsZW1lbnQpIHtcbiAgICAgICAgdGhpcy5jdXJyZW50LmVsZW1lbnQuc2V0QXR0cmlidXRlTlMobnVsbCwgXCJmaWxsLXJ1bGVcIiwgXCJldmVub2RkXCIpO1xuICAgICAgfVxuXG4gICAgICB0aGlzLmZpbGwoKTtcbiAgICB9XG5cbiAgICBmaWxsU3Ryb2tlKCkge1xuICAgICAgdGhpcy5zdHJva2UoKTtcbiAgICAgIHRoaXMuZmlsbCgpO1xuICAgIH1cblxuICAgIGVvRmlsbFN0cm9rZSgpIHtcbiAgICAgIGlmICh0aGlzLmN1cnJlbnQuZWxlbWVudCkge1xuICAgICAgICB0aGlzLmN1cnJlbnQuZWxlbWVudC5zZXRBdHRyaWJ1dGVOUyhudWxsLCBcImZpbGwtcnVsZVwiLCBcImV2ZW5vZGRcIik7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuZmlsbFN0cm9rZSgpO1xuICAgIH1cblxuICAgIGNsb3NlU3Ryb2tlKCkge1xuICAgICAgdGhpcy5jbG9zZVBhdGgoKTtcbiAgICAgIHRoaXMuc3Ryb2tlKCk7XG4gICAgfVxuXG4gICAgY2xvc2VGaWxsU3Ryb2tlKCkge1xuICAgICAgdGhpcy5jbG9zZVBhdGgoKTtcbiAgICAgIHRoaXMuZmlsbFN0cm9rZSgpO1xuICAgIH1cblxuICAgIGNsb3NlRU9GaWxsU3Ryb2tlKCkge1xuICAgICAgdGhpcy5jbG9zZVBhdGgoKTtcbiAgICAgIHRoaXMuZW9GaWxsU3Ryb2tlKCk7XG4gICAgfVxuXG4gICAgcGFpbnRTb2xpZENvbG9ySW1hZ2VNYXNrKCkge1xuICAgICAgY29uc3QgcmVjdCA9IHRoaXMuc3ZnRmFjdG9yeS5jcmVhdGVFbGVtZW50KFwic3ZnOnJlY3RcIik7XG4gICAgICByZWN0LnNldEF0dHJpYnV0ZU5TKG51bGwsIFwieFwiLCBcIjBcIik7XG4gICAgICByZWN0LnNldEF0dHJpYnV0ZU5TKG51bGwsIFwieVwiLCBcIjBcIik7XG4gICAgICByZWN0LnNldEF0dHJpYnV0ZU5TKG51bGwsIFwid2lkdGhcIiwgXCIxcHhcIik7XG4gICAgICByZWN0LnNldEF0dHJpYnV0ZU5TKG51bGwsIFwiaGVpZ2h0XCIsIFwiMXB4XCIpO1xuICAgICAgcmVjdC5zZXRBdHRyaWJ1dGVOUyhudWxsLCBcImZpbGxcIiwgdGhpcy5jdXJyZW50LmZpbGxDb2xvcik7XG5cbiAgICAgIHRoaXMuX2Vuc3VyZVRyYW5zZm9ybUdyb3VwKCkuYXBwZW5kQ2hpbGQocmVjdCk7XG4gICAgfVxuXG4gICAgcGFpbnRJbWFnZVhPYmplY3Qob2JqSWQpIHtcbiAgICAgIGNvbnN0IGltZ0RhdGEgPSB0aGlzLm9ianMuZ2V0KG9iaklkKTtcblxuICAgICAgaWYgKCFpbWdEYXRhKSB7XG4gICAgICAgICgwLCBfdXRpbC53YXJuKShgRGVwZW5kZW50IGltYWdlIHdpdGggb2JqZWN0IElEICR7b2JqSWR9IGlzIG5vdCByZWFkeSB5ZXRgKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB0aGlzLnBhaW50SW5saW5lSW1hZ2VYT2JqZWN0KGltZ0RhdGEpO1xuICAgIH1cblxuICAgIHBhaW50SW5saW5lSW1hZ2VYT2JqZWN0KGltZ0RhdGEsIG1hc2spIHtcbiAgICAgIGNvbnN0IHdpZHRoID0gaW1nRGF0YS53aWR0aDtcbiAgICAgIGNvbnN0IGhlaWdodCA9IGltZ0RhdGEuaGVpZ2h0O1xuICAgICAgY29uc3QgaW1nU3JjID0gY29udmVydEltZ0RhdGFUb1BuZyhpbWdEYXRhLCB0aGlzLmZvcmNlRGF0YVNjaGVtYSwgISFtYXNrKTtcbiAgICAgIGNvbnN0IGNsaXByZWN0ID0gdGhpcy5zdmdGYWN0b3J5LmNyZWF0ZUVsZW1lbnQoXCJzdmc6cmVjdFwiKTtcbiAgICAgIGNsaXByZWN0LnNldEF0dHJpYnV0ZU5TKG51bGwsIFwieFwiLCBcIjBcIik7XG4gICAgICBjbGlwcmVjdC5zZXRBdHRyaWJ1dGVOUyhudWxsLCBcInlcIiwgXCIwXCIpO1xuICAgICAgY2xpcHJlY3Quc2V0QXR0cmlidXRlTlMobnVsbCwgXCJ3aWR0aFwiLCBwZih3aWR0aCkpO1xuICAgICAgY2xpcHJlY3Quc2V0QXR0cmlidXRlTlMobnVsbCwgXCJoZWlnaHRcIiwgcGYoaGVpZ2h0KSk7XG4gICAgICB0aGlzLmN1cnJlbnQuZWxlbWVudCA9IGNsaXByZWN0O1xuICAgICAgdGhpcy5jbGlwKFwibm9uemVyb1wiKTtcbiAgICAgIGNvbnN0IGltZ0VsID0gdGhpcy5zdmdGYWN0b3J5LmNyZWF0ZUVsZW1lbnQoXCJzdmc6aW1hZ2VcIik7XG4gICAgICBpbWdFbC5zZXRBdHRyaWJ1dGVOUyhYTElOS19OUywgXCJ4bGluazpocmVmXCIsIGltZ1NyYyk7XG4gICAgICBpbWdFbC5zZXRBdHRyaWJ1dGVOUyhudWxsLCBcInhcIiwgXCIwXCIpO1xuICAgICAgaW1nRWwuc2V0QXR0cmlidXRlTlMobnVsbCwgXCJ5XCIsIHBmKC1oZWlnaHQpKTtcbiAgICAgIGltZ0VsLnNldEF0dHJpYnV0ZU5TKG51bGwsIFwid2lkdGhcIiwgcGYod2lkdGgpICsgXCJweFwiKTtcbiAgICAgIGltZ0VsLnNldEF0dHJpYnV0ZU5TKG51bGwsIFwiaGVpZ2h0XCIsIHBmKGhlaWdodCkgKyBcInB4XCIpO1xuICAgICAgaW1nRWwuc2V0QXR0cmlidXRlTlMobnVsbCwgXCJ0cmFuc2Zvcm1cIiwgYHNjYWxlKCR7cGYoMSAvIHdpZHRoKX0gJHtwZigtMSAvIGhlaWdodCl9KWApO1xuXG4gICAgICBpZiAobWFzaykge1xuICAgICAgICBtYXNrLmFwcGVuZENoaWxkKGltZ0VsKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuX2Vuc3VyZVRyYW5zZm9ybUdyb3VwKCkuYXBwZW5kQ2hpbGQoaW1nRWwpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHBhaW50SW1hZ2VNYXNrWE9iamVjdChpbWdEYXRhKSB7XG4gICAgICBjb25zdCBjdXJyZW50ID0gdGhpcy5jdXJyZW50O1xuICAgICAgY29uc3Qgd2lkdGggPSBpbWdEYXRhLndpZHRoO1xuICAgICAgY29uc3QgaGVpZ2h0ID0gaW1nRGF0YS5oZWlnaHQ7XG4gICAgICBjb25zdCBmaWxsQ29sb3IgPSBjdXJyZW50LmZpbGxDb2xvcjtcbiAgICAgIGN1cnJlbnQubWFza0lkID0gYG1hc2ske21hc2tDb3VudCsrfWA7XG4gICAgICBjb25zdCBtYXNrID0gdGhpcy5zdmdGYWN0b3J5LmNyZWF0ZUVsZW1lbnQoXCJzdmc6bWFza1wiKTtcbiAgICAgIG1hc2suc2V0QXR0cmlidXRlTlMobnVsbCwgXCJpZFwiLCBjdXJyZW50Lm1hc2tJZCk7XG4gICAgICBjb25zdCByZWN0ID0gdGhpcy5zdmdGYWN0b3J5LmNyZWF0ZUVsZW1lbnQoXCJzdmc6cmVjdFwiKTtcbiAgICAgIHJlY3Quc2V0QXR0cmlidXRlTlMobnVsbCwgXCJ4XCIsIFwiMFwiKTtcbiAgICAgIHJlY3Quc2V0QXR0cmlidXRlTlMobnVsbCwgXCJ5XCIsIFwiMFwiKTtcbiAgICAgIHJlY3Quc2V0QXR0cmlidXRlTlMobnVsbCwgXCJ3aWR0aFwiLCBwZih3aWR0aCkpO1xuICAgICAgcmVjdC5zZXRBdHRyaWJ1dGVOUyhudWxsLCBcImhlaWdodFwiLCBwZihoZWlnaHQpKTtcbiAgICAgIHJlY3Quc2V0QXR0cmlidXRlTlMobnVsbCwgXCJmaWxsXCIsIGZpbGxDb2xvcik7XG4gICAgICByZWN0LnNldEF0dHJpYnV0ZU5TKG51bGwsIFwibWFza1wiLCBgdXJsKCMke2N1cnJlbnQubWFza0lkfSlgKTtcbiAgICAgIHRoaXMuZGVmcy5hcHBlbmRDaGlsZChtYXNrKTtcblxuICAgICAgdGhpcy5fZW5zdXJlVHJhbnNmb3JtR3JvdXAoKS5hcHBlbmRDaGlsZChyZWN0KTtcblxuICAgICAgdGhpcy5wYWludElubGluZUltYWdlWE9iamVjdChpbWdEYXRhLCBtYXNrKTtcbiAgICB9XG5cbiAgICBwYWludEZvcm1YT2JqZWN0QmVnaW4obWF0cml4LCBiYm94KSB7XG4gICAgICBpZiAoQXJyYXkuaXNBcnJheShtYXRyaXgpICYmIG1hdHJpeC5sZW5ndGggPT09IDYpIHtcbiAgICAgICAgdGhpcy50cmFuc2Zvcm0obWF0cml4WzBdLCBtYXRyaXhbMV0sIG1hdHJpeFsyXSwgbWF0cml4WzNdLCBtYXRyaXhbNF0sIG1hdHJpeFs1XSk7XG4gICAgICB9XG5cbiAgICAgIGlmIChiYm94KSB7XG4gICAgICAgIGNvbnN0IHdpZHRoID0gYmJveFsyXSAtIGJib3hbMF07XG4gICAgICAgIGNvbnN0IGhlaWdodCA9IGJib3hbM10gLSBiYm94WzFdO1xuICAgICAgICBjb25zdCBjbGlwcmVjdCA9IHRoaXMuc3ZnRmFjdG9yeS5jcmVhdGVFbGVtZW50KFwic3ZnOnJlY3RcIik7XG4gICAgICAgIGNsaXByZWN0LnNldEF0dHJpYnV0ZU5TKG51bGwsIFwieFwiLCBiYm94WzBdKTtcbiAgICAgICAgY2xpcHJlY3Quc2V0QXR0cmlidXRlTlMobnVsbCwgXCJ5XCIsIGJib3hbMV0pO1xuICAgICAgICBjbGlwcmVjdC5zZXRBdHRyaWJ1dGVOUyhudWxsLCBcIndpZHRoXCIsIHBmKHdpZHRoKSk7XG4gICAgICAgIGNsaXByZWN0LnNldEF0dHJpYnV0ZU5TKG51bGwsIFwiaGVpZ2h0XCIsIHBmKGhlaWdodCkpO1xuICAgICAgICB0aGlzLmN1cnJlbnQuZWxlbWVudCA9IGNsaXByZWN0O1xuICAgICAgICB0aGlzLmNsaXAoXCJub256ZXJvXCIpO1xuICAgICAgICB0aGlzLmVuZFBhdGgoKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBwYWludEZvcm1YT2JqZWN0RW5kKCkge31cblxuICAgIF9pbml0aWFsaXplKHZpZXdwb3J0KSB7XG4gICAgICBjb25zdCBzdmcgPSB0aGlzLnN2Z0ZhY3RvcnkuY3JlYXRlKHZpZXdwb3J0LndpZHRoLCB2aWV3cG9ydC5oZWlnaHQpO1xuICAgICAgY29uc3QgZGVmaW5pdGlvbnMgPSB0aGlzLnN2Z0ZhY3RvcnkuY3JlYXRlRWxlbWVudChcInN2ZzpkZWZzXCIpO1xuICAgICAgc3ZnLmFwcGVuZENoaWxkKGRlZmluaXRpb25zKTtcbiAgICAgIHRoaXMuZGVmcyA9IGRlZmluaXRpb25zO1xuICAgICAgY29uc3Qgcm9vdEdyb3VwID0gdGhpcy5zdmdGYWN0b3J5LmNyZWF0ZUVsZW1lbnQoXCJzdmc6Z1wiKTtcbiAgICAgIHJvb3RHcm91cC5zZXRBdHRyaWJ1dGVOUyhudWxsLCBcInRyYW5zZm9ybVwiLCBwbSh2aWV3cG9ydC50cmFuc2Zvcm0pKTtcbiAgICAgIHN2Zy5hcHBlbmRDaGlsZChyb290R3JvdXApO1xuICAgICAgdGhpcy5zdmcgPSByb290R3JvdXA7XG4gICAgICByZXR1cm4gc3ZnO1xuICAgIH1cblxuICAgIF9lbnN1cmVDbGlwR3JvdXAoKSB7XG4gICAgICBpZiAoIXRoaXMuY3VycmVudC5jbGlwR3JvdXApIHtcbiAgICAgICAgY29uc3QgY2xpcEdyb3VwID0gdGhpcy5zdmdGYWN0b3J5LmNyZWF0ZUVsZW1lbnQoXCJzdmc6Z1wiKTtcbiAgICAgICAgY2xpcEdyb3VwLnNldEF0dHJpYnV0ZU5TKG51bGwsIFwiY2xpcC1wYXRoXCIsIHRoaXMuY3VycmVudC5hY3RpdmVDbGlwVXJsKTtcbiAgICAgICAgdGhpcy5zdmcuYXBwZW5kQ2hpbGQoY2xpcEdyb3VwKTtcbiAgICAgICAgdGhpcy5jdXJyZW50LmNsaXBHcm91cCA9IGNsaXBHcm91cDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXMuY3VycmVudC5jbGlwR3JvdXA7XG4gICAgfVxuXG4gICAgX2Vuc3VyZVRyYW5zZm9ybUdyb3VwKCkge1xuICAgICAgaWYgKCF0aGlzLnRncnApIHtcbiAgICAgICAgdGhpcy50Z3JwID0gdGhpcy5zdmdGYWN0b3J5LmNyZWF0ZUVsZW1lbnQoXCJzdmc6Z1wiKTtcbiAgICAgICAgdGhpcy50Z3JwLnNldEF0dHJpYnV0ZU5TKG51bGwsIFwidHJhbnNmb3JtXCIsIHBtKHRoaXMudHJhbnNmb3JtTWF0cml4KSk7XG5cbiAgICAgICAgaWYgKHRoaXMuY3VycmVudC5hY3RpdmVDbGlwVXJsKSB7XG4gICAgICAgICAgdGhpcy5fZW5zdXJlQ2xpcEdyb3VwKCkuYXBwZW5kQ2hpbGQodGhpcy50Z3JwKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLnN2Zy5hcHBlbmRDaGlsZCh0aGlzLnRncnApO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzLnRncnA7XG4gICAgfVxuXG4gIH07XG59XG5cbi8qKiovIH0pLFxuLyogMTkgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd19wZGZqc19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuUERGTm9kZVN0cmVhbSA9IHZvaWQgMDtcblxudmFyIF91dGlsID0gX193X3BkZmpzX3JlcXVpcmVfXygyKTtcblxudmFyIF9uZXR3b3JrX3V0aWxzID0gX193X3BkZmpzX3JlcXVpcmVfXygyMCk7XG5cbjtcblxuY29uc3QgZnMgPSByZXF1aXJlKFwiZnNcIik7XG5cbmNvbnN0IGh0dHAgPSByZXF1aXJlKFwiaHR0cFwiKTtcblxuY29uc3QgaHR0cHMgPSByZXF1aXJlKFwiaHR0cHNcIik7XG5cbmNvbnN0IHVybCA9IHJlcXVpcmUoXCJ1cmxcIik7XG5cbmNvbnN0IGZpbGVVcmlSZWdleCA9IC9eZmlsZTpcXC9cXC9cXC9bYS16QS1aXTpcXC8vO1xuXG5mdW5jdGlvbiBwYXJzZVVybChzb3VyY2VVcmwpIHtcbiAgY29uc3QgcGFyc2VkVXJsID0gdXJsLnBhcnNlKHNvdXJjZVVybCk7XG5cbiAgaWYgKHBhcnNlZFVybC5wcm90b2NvbCA9PT0gXCJmaWxlOlwiIHx8IHBhcnNlZFVybC5ob3N0KSB7XG4gICAgcmV0dXJuIHBhcnNlZFVybDtcbiAgfVxuXG4gIGlmICgvXlthLXpdOlsvXFxcXF0vaS50ZXN0KHNvdXJjZVVybCkpIHtcbiAgICByZXR1cm4gdXJsLnBhcnNlKGBmaWxlOi8vLyR7c291cmNlVXJsfWApO1xuICB9XG5cbiAgaWYgKCFwYXJzZWRVcmwuaG9zdCkge1xuICAgIHBhcnNlZFVybC5wcm90b2NvbCA9IFwiZmlsZTpcIjtcbiAgfVxuXG4gIHJldHVybiBwYXJzZWRVcmw7XG59XG5cbmNsYXNzIFBERk5vZGVTdHJlYW0ge1xuICBjb25zdHJ1Y3Rvcihzb3VyY2UpIHtcbiAgICB0aGlzLnNvdXJjZSA9IHNvdXJjZTtcbiAgICB0aGlzLnVybCA9IHBhcnNlVXJsKHNvdXJjZS51cmwpO1xuICAgIHRoaXMuaXNIdHRwID0gdGhpcy51cmwucHJvdG9jb2wgPT09IFwiaHR0cDpcIiB8fCB0aGlzLnVybC5wcm90b2NvbCA9PT0gXCJodHRwczpcIjtcbiAgICB0aGlzLmlzRnNVcmwgPSB0aGlzLnVybC5wcm90b2NvbCA9PT0gXCJmaWxlOlwiO1xuICAgIHRoaXMuaHR0cEhlYWRlcnMgPSB0aGlzLmlzSHR0cCAmJiBzb3VyY2UuaHR0cEhlYWRlcnMgfHwge307XG4gICAgdGhpcy5fZnVsbFJlcXVlc3RSZWFkZXIgPSBudWxsO1xuICAgIHRoaXMuX3JhbmdlUmVxdWVzdFJlYWRlcnMgPSBbXTtcbiAgfVxuXG4gIGdldCBfcHJvZ3Jlc3NpdmVEYXRhTGVuZ3RoKCkge1xuICAgIHJldHVybiB0aGlzLl9mdWxsUmVxdWVzdFJlYWRlciA/IHRoaXMuX2Z1bGxSZXF1ZXN0UmVhZGVyLl9sb2FkZWQgOiAwO1xuICB9XG5cbiAgZ2V0RnVsbFJlYWRlcigpIHtcbiAgICAoMCwgX3V0aWwuYXNzZXJ0KSghdGhpcy5fZnVsbFJlcXVlc3RSZWFkZXIsIFwiUERGTm9kZVN0cmVhbS5nZXRGdWxsUmVhZGVyIGNhbiBvbmx5IGJlIGNhbGxlZCBvbmNlLlwiKTtcbiAgICB0aGlzLl9mdWxsUmVxdWVzdFJlYWRlciA9IHRoaXMuaXNGc1VybCA/IG5ldyBQREZOb2RlU3RyZWFtRnNGdWxsUmVhZGVyKHRoaXMpIDogbmV3IFBERk5vZGVTdHJlYW1GdWxsUmVhZGVyKHRoaXMpO1xuICAgIHJldHVybiB0aGlzLl9mdWxsUmVxdWVzdFJlYWRlcjtcbiAgfVxuXG4gIGdldFJhbmdlUmVhZGVyKHN0YXJ0LCBlbmQpIHtcbiAgICBpZiAoZW5kIDw9IHRoaXMuX3Byb2dyZXNzaXZlRGF0YUxlbmd0aCkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgY29uc3QgcmFuZ2VSZWFkZXIgPSB0aGlzLmlzRnNVcmwgPyBuZXcgUERGTm9kZVN0cmVhbUZzUmFuZ2VSZWFkZXIodGhpcywgc3RhcnQsIGVuZCkgOiBuZXcgUERGTm9kZVN0cmVhbVJhbmdlUmVhZGVyKHRoaXMsIHN0YXJ0LCBlbmQpO1xuXG4gICAgdGhpcy5fcmFuZ2VSZXF1ZXN0UmVhZGVycy5wdXNoKHJhbmdlUmVhZGVyKTtcblxuICAgIHJldHVybiByYW5nZVJlYWRlcjtcbiAgfVxuXG4gIGNhbmNlbEFsbFJlcXVlc3RzKHJlYXNvbikge1xuICAgIGlmICh0aGlzLl9mdWxsUmVxdWVzdFJlYWRlcikge1xuICAgICAgdGhpcy5fZnVsbFJlcXVlc3RSZWFkZXIuY2FuY2VsKHJlYXNvbik7XG4gICAgfVxuXG4gICAgY29uc3QgcmVhZGVycyA9IHRoaXMuX3JhbmdlUmVxdWVzdFJlYWRlcnMuc2xpY2UoMCk7XG5cbiAgICByZWFkZXJzLmZvckVhY2goZnVuY3Rpb24gKHJlYWRlcikge1xuICAgICAgcmVhZGVyLmNhbmNlbChyZWFzb24pO1xuICAgIH0pO1xuICB9XG5cbn1cblxuZXhwb3J0cy5QREZOb2RlU3RyZWFtID0gUERGTm9kZVN0cmVhbTtcblxuY2xhc3MgQmFzZUZ1bGxSZWFkZXIge1xuICBjb25zdHJ1Y3RvcihzdHJlYW0pIHtcbiAgICB0aGlzLl91cmwgPSBzdHJlYW0udXJsO1xuICAgIHRoaXMuX2RvbmUgPSBmYWxzZTtcbiAgICB0aGlzLl9zdG9yZWRFcnJvciA9IG51bGw7XG4gICAgdGhpcy5vblByb2dyZXNzID0gbnVsbDtcbiAgICBjb25zdCBzb3VyY2UgPSBzdHJlYW0uc291cmNlO1xuICAgIHRoaXMuX2NvbnRlbnRMZW5ndGggPSBzb3VyY2UubGVuZ3RoO1xuICAgIHRoaXMuX2xvYWRlZCA9IDA7XG4gICAgdGhpcy5fZmlsZW5hbWUgPSBudWxsO1xuICAgIHRoaXMuX2Rpc2FibGVSYW5nZSA9IHNvdXJjZS5kaXNhYmxlUmFuZ2UgfHwgZmFsc2U7XG4gICAgdGhpcy5fcmFuZ2VDaHVua1NpemUgPSBzb3VyY2UucmFuZ2VDaHVua1NpemU7XG5cbiAgICBpZiAoIXRoaXMuX3JhbmdlQ2h1bmtTaXplICYmICF0aGlzLl9kaXNhYmxlUmFuZ2UpIHtcbiAgICAgIHRoaXMuX2Rpc2FibGVSYW5nZSA9IHRydWU7XG4gICAgfVxuXG4gICAgdGhpcy5faXNTdHJlYW1pbmdTdXBwb3J0ZWQgPSAhc291cmNlLmRpc2FibGVTdHJlYW07XG4gICAgdGhpcy5faXNSYW5nZVN1cHBvcnRlZCA9ICFzb3VyY2UuZGlzYWJsZVJhbmdlO1xuICAgIHRoaXMuX3JlYWRhYmxlU3RyZWFtID0gbnVsbDtcbiAgICB0aGlzLl9yZWFkQ2FwYWJpbGl0eSA9ICgwLCBfdXRpbC5jcmVhdGVQcm9taXNlQ2FwYWJpbGl0eSkoKTtcbiAgICB0aGlzLl9oZWFkZXJzQ2FwYWJpbGl0eSA9ICgwLCBfdXRpbC5jcmVhdGVQcm9taXNlQ2FwYWJpbGl0eSkoKTtcbiAgfVxuXG4gIGdldCBoZWFkZXJzUmVhZHkoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2hlYWRlcnNDYXBhYmlsaXR5LnByb21pc2U7XG4gIH1cblxuICBnZXQgZmlsZW5hbWUoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2ZpbGVuYW1lO1xuICB9XG5cbiAgZ2V0IGNvbnRlbnRMZW5ndGgoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2NvbnRlbnRMZW5ndGg7XG4gIH1cblxuICBnZXQgaXNSYW5nZVN1cHBvcnRlZCgpIHtcbiAgICByZXR1cm4gdGhpcy5faXNSYW5nZVN1cHBvcnRlZDtcbiAgfVxuXG4gIGdldCBpc1N0cmVhbWluZ1N1cHBvcnRlZCgpIHtcbiAgICByZXR1cm4gdGhpcy5faXNTdHJlYW1pbmdTdXBwb3J0ZWQ7XG4gIH1cblxuICBhc3luYyByZWFkKCkge1xuICAgIGF3YWl0IHRoaXMuX3JlYWRDYXBhYmlsaXR5LnByb21pc2U7XG5cbiAgICBpZiAodGhpcy5fZG9uZSkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgdmFsdWU6IHVuZGVmaW5lZCxcbiAgICAgICAgZG9uZTogdHJ1ZVxuICAgICAgfTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5fc3RvcmVkRXJyb3IpIHtcbiAgICAgIHRocm93IHRoaXMuX3N0b3JlZEVycm9yO1xuICAgIH1cblxuICAgIGNvbnN0IGNodW5rID0gdGhpcy5fcmVhZGFibGVTdHJlYW0ucmVhZCgpO1xuXG4gICAgaWYgKGNodW5rID09PSBudWxsKSB7XG4gICAgICB0aGlzLl9yZWFkQ2FwYWJpbGl0eSA9ICgwLCBfdXRpbC5jcmVhdGVQcm9taXNlQ2FwYWJpbGl0eSkoKTtcbiAgICAgIHJldHVybiB0aGlzLnJlYWQoKTtcbiAgICB9XG5cbiAgICB0aGlzLl9sb2FkZWQgKz0gY2h1bmsubGVuZ3RoO1xuXG4gICAgaWYgKHRoaXMub25Qcm9ncmVzcykge1xuICAgICAgdGhpcy5vblByb2dyZXNzKHtcbiAgICAgICAgbG9hZGVkOiB0aGlzLl9sb2FkZWQsXG4gICAgICAgIHRvdGFsOiB0aGlzLl9jb250ZW50TGVuZ3RoXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBjb25zdCBidWZmZXIgPSBuZXcgVWludDhBcnJheShjaHVuaykuYnVmZmVyO1xuICAgIHJldHVybiB7XG4gICAgICB2YWx1ZTogYnVmZmVyLFxuICAgICAgZG9uZTogZmFsc2VcbiAgICB9O1xuICB9XG5cbiAgY2FuY2VsKHJlYXNvbikge1xuICAgIGlmICghdGhpcy5fcmVhZGFibGVTdHJlYW0pIHtcbiAgICAgIHRoaXMuX2Vycm9yKHJlYXNvbik7XG5cbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0aGlzLl9yZWFkYWJsZVN0cmVhbS5kZXN0cm95KHJlYXNvbik7XG4gIH1cblxuICBfZXJyb3IocmVhc29uKSB7XG4gICAgdGhpcy5fc3RvcmVkRXJyb3IgPSByZWFzb247XG5cbiAgICB0aGlzLl9yZWFkQ2FwYWJpbGl0eS5yZXNvbHZlKCk7XG4gIH1cblxuICBfc2V0UmVhZGFibGVTdHJlYW0ocmVhZGFibGVTdHJlYW0pIHtcbiAgICB0aGlzLl9yZWFkYWJsZVN0cmVhbSA9IHJlYWRhYmxlU3RyZWFtO1xuICAgIHJlYWRhYmxlU3RyZWFtLm9uKFwicmVhZGFibGVcIiwgKCkgPT4ge1xuICAgICAgdGhpcy5fcmVhZENhcGFiaWxpdHkucmVzb2x2ZSgpO1xuICAgIH0pO1xuICAgIHJlYWRhYmxlU3RyZWFtLm9uKFwiZW5kXCIsICgpID0+IHtcbiAgICAgIHJlYWRhYmxlU3RyZWFtLmRlc3Ryb3koKTtcbiAgICAgIHRoaXMuX2RvbmUgPSB0cnVlO1xuXG4gICAgICB0aGlzLl9yZWFkQ2FwYWJpbGl0eS5yZXNvbHZlKCk7XG4gICAgfSk7XG4gICAgcmVhZGFibGVTdHJlYW0ub24oXCJlcnJvclwiLCByZWFzb24gPT4ge1xuICAgICAgdGhpcy5fZXJyb3IocmVhc29uKTtcbiAgICB9KTtcblxuICAgIGlmICghdGhpcy5faXNTdHJlYW1pbmdTdXBwb3J0ZWQgJiYgdGhpcy5faXNSYW5nZVN1cHBvcnRlZCkge1xuICAgICAgdGhpcy5fZXJyb3IobmV3IF91dGlsLkFib3J0RXhjZXB0aW9uKFwic3RyZWFtaW5nIGlzIGRpc2FibGVkXCIpKTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5fc3RvcmVkRXJyb3IpIHtcbiAgICAgIHRoaXMuX3JlYWRhYmxlU3RyZWFtLmRlc3Ryb3kodGhpcy5fc3RvcmVkRXJyb3IpO1xuICAgIH1cbiAgfVxuXG59XG5cbmNsYXNzIEJhc2VSYW5nZVJlYWRlciB7XG4gIGNvbnN0cnVjdG9yKHN0cmVhbSkge1xuICAgIHRoaXMuX3VybCA9IHN0cmVhbS51cmw7XG4gICAgdGhpcy5fZG9uZSA9IGZhbHNlO1xuICAgIHRoaXMuX3N0b3JlZEVycm9yID0gbnVsbDtcbiAgICB0aGlzLm9uUHJvZ3Jlc3MgPSBudWxsO1xuICAgIHRoaXMuX2xvYWRlZCA9IDA7XG4gICAgdGhpcy5fcmVhZGFibGVTdHJlYW0gPSBudWxsO1xuICAgIHRoaXMuX3JlYWRDYXBhYmlsaXR5ID0gKDAsIF91dGlsLmNyZWF0ZVByb21pc2VDYXBhYmlsaXR5KSgpO1xuICAgIGNvbnN0IHNvdXJjZSA9IHN0cmVhbS5zb3VyY2U7XG4gICAgdGhpcy5faXNTdHJlYW1pbmdTdXBwb3J0ZWQgPSAhc291cmNlLmRpc2FibGVTdHJlYW07XG4gIH1cblxuICBnZXQgaXNTdHJlYW1pbmdTdXBwb3J0ZWQoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2lzU3RyZWFtaW5nU3VwcG9ydGVkO1xuICB9XG5cbiAgYXN5bmMgcmVhZCgpIHtcbiAgICBhd2FpdCB0aGlzLl9yZWFkQ2FwYWJpbGl0eS5wcm9taXNlO1xuXG4gICAgaWYgKHRoaXMuX2RvbmUpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHZhbHVlOiB1bmRlZmluZWQsXG4gICAgICAgIGRvbmU6IHRydWVcbiAgICAgIH07XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuX3N0b3JlZEVycm9yKSB7XG4gICAgICB0aHJvdyB0aGlzLl9zdG9yZWRFcnJvcjtcbiAgICB9XG5cbiAgICBjb25zdCBjaHVuayA9IHRoaXMuX3JlYWRhYmxlU3RyZWFtLnJlYWQoKTtcblxuICAgIGlmIChjaHVuayA9PT0gbnVsbCkge1xuICAgICAgdGhpcy5fcmVhZENhcGFiaWxpdHkgPSAoMCwgX3V0aWwuY3JlYXRlUHJvbWlzZUNhcGFiaWxpdHkpKCk7XG4gICAgICByZXR1cm4gdGhpcy5yZWFkKCk7XG4gICAgfVxuXG4gICAgdGhpcy5fbG9hZGVkICs9IGNodW5rLmxlbmd0aDtcblxuICAgIGlmICh0aGlzLm9uUHJvZ3Jlc3MpIHtcbiAgICAgIHRoaXMub25Qcm9ncmVzcyh7XG4gICAgICAgIGxvYWRlZDogdGhpcy5fbG9hZGVkXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBjb25zdCBidWZmZXIgPSBuZXcgVWludDhBcnJheShjaHVuaykuYnVmZmVyO1xuICAgIHJldHVybiB7XG4gICAgICB2YWx1ZTogYnVmZmVyLFxuICAgICAgZG9uZTogZmFsc2VcbiAgICB9O1xuICB9XG5cbiAgY2FuY2VsKHJlYXNvbikge1xuICAgIGlmICghdGhpcy5fcmVhZGFibGVTdHJlYW0pIHtcbiAgICAgIHRoaXMuX2Vycm9yKHJlYXNvbik7XG5cbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0aGlzLl9yZWFkYWJsZVN0cmVhbS5kZXN0cm95KHJlYXNvbik7XG4gIH1cblxuICBfZXJyb3IocmVhc29uKSB7XG4gICAgdGhpcy5fc3RvcmVkRXJyb3IgPSByZWFzb247XG5cbiAgICB0aGlzLl9yZWFkQ2FwYWJpbGl0eS5yZXNvbHZlKCk7XG4gIH1cblxuICBfc2V0UmVhZGFibGVTdHJlYW0ocmVhZGFibGVTdHJlYW0pIHtcbiAgICB0aGlzLl9yZWFkYWJsZVN0cmVhbSA9IHJlYWRhYmxlU3RyZWFtO1xuICAgIHJlYWRhYmxlU3RyZWFtLm9uKFwicmVhZGFibGVcIiwgKCkgPT4ge1xuICAgICAgdGhpcy5fcmVhZENhcGFiaWxpdHkucmVzb2x2ZSgpO1xuICAgIH0pO1xuICAgIHJlYWRhYmxlU3RyZWFtLm9uKFwiZW5kXCIsICgpID0+IHtcbiAgICAgIHJlYWRhYmxlU3RyZWFtLmRlc3Ryb3koKTtcbiAgICAgIHRoaXMuX2RvbmUgPSB0cnVlO1xuXG4gICAgICB0aGlzLl9yZWFkQ2FwYWJpbGl0eS5yZXNvbHZlKCk7XG4gICAgfSk7XG4gICAgcmVhZGFibGVTdHJlYW0ub24oXCJlcnJvclwiLCByZWFzb24gPT4ge1xuICAgICAgdGhpcy5fZXJyb3IocmVhc29uKTtcbiAgICB9KTtcblxuICAgIGlmICh0aGlzLl9zdG9yZWRFcnJvcikge1xuICAgICAgdGhpcy5fcmVhZGFibGVTdHJlYW0uZGVzdHJveSh0aGlzLl9zdG9yZWRFcnJvcik7XG4gICAgfVxuICB9XG5cbn1cblxuZnVuY3Rpb24gY3JlYXRlUmVxdWVzdE9wdGlvbnMocGFyc2VkVXJsLCBoZWFkZXJzKSB7XG4gIHJldHVybiB7XG4gICAgcHJvdG9jb2w6IHBhcnNlZFVybC5wcm90b2NvbCxcbiAgICBhdXRoOiBwYXJzZWRVcmwuYXV0aCxcbiAgICBob3N0OiBwYXJzZWRVcmwuaG9zdG5hbWUsXG4gICAgcG9ydDogcGFyc2VkVXJsLnBvcnQsXG4gICAgcGF0aDogcGFyc2VkVXJsLnBhdGgsXG4gICAgbWV0aG9kOiBcIkdFVFwiLFxuICAgIGhlYWRlcnNcbiAgfTtcbn1cblxuY2xhc3MgUERGTm9kZVN0cmVhbUZ1bGxSZWFkZXIgZXh0ZW5kcyBCYXNlRnVsbFJlYWRlciB7XG4gIGNvbnN0cnVjdG9yKHN0cmVhbSkge1xuICAgIHN1cGVyKHN0cmVhbSk7XG5cbiAgICBjb25zdCBoYW5kbGVSZXNwb25zZSA9IHJlc3BvbnNlID0+IHtcbiAgICAgIGlmIChyZXNwb25zZS5zdGF0dXNDb2RlID09PSA0MDQpIHtcbiAgICAgICAgY29uc3QgZXJyb3IgPSBuZXcgX3V0aWwuTWlzc2luZ1BERkV4Y2VwdGlvbihgTWlzc2luZyBQREYgXCIke3RoaXMuX3VybH1cIi5gKTtcbiAgICAgICAgdGhpcy5fc3RvcmVkRXJyb3IgPSBlcnJvcjtcblxuICAgICAgICB0aGlzLl9oZWFkZXJzQ2FwYWJpbGl0eS5yZWplY3QoZXJyb3IpO1xuXG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdGhpcy5faGVhZGVyc0NhcGFiaWxpdHkucmVzb2x2ZSgpO1xuXG4gICAgICB0aGlzLl9zZXRSZWFkYWJsZVN0cmVhbShyZXNwb25zZSk7XG5cbiAgICAgIGNvbnN0IGdldFJlc3BvbnNlSGVhZGVyID0gbmFtZSA9PiB7XG4gICAgICAgIHJldHVybiB0aGlzLl9yZWFkYWJsZVN0cmVhbS5oZWFkZXJzW25hbWUudG9Mb3dlckNhc2UoKV07XG4gICAgICB9O1xuXG4gICAgICBjb25zdCB7XG4gICAgICAgIGFsbG93UmFuZ2VSZXF1ZXN0cyxcbiAgICAgICAgc3VnZ2VzdGVkTGVuZ3RoXG4gICAgICB9ID0gKDAsIF9uZXR3b3JrX3V0aWxzLnZhbGlkYXRlUmFuZ2VSZXF1ZXN0Q2FwYWJpbGl0aWVzKSh7XG4gICAgICAgIGdldFJlc3BvbnNlSGVhZGVyLFxuICAgICAgICBpc0h0dHA6IHN0cmVhbS5pc0h0dHAsXG4gICAgICAgIHJhbmdlQ2h1bmtTaXplOiB0aGlzLl9yYW5nZUNodW5rU2l6ZSxcbiAgICAgICAgZGlzYWJsZVJhbmdlOiB0aGlzLl9kaXNhYmxlUmFuZ2VcbiAgICAgIH0pO1xuICAgICAgdGhpcy5faXNSYW5nZVN1cHBvcnRlZCA9IGFsbG93UmFuZ2VSZXF1ZXN0cztcbiAgICAgIHRoaXMuX2NvbnRlbnRMZW5ndGggPSBzdWdnZXN0ZWRMZW5ndGggfHwgdGhpcy5fY29udGVudExlbmd0aDtcbiAgICAgIHRoaXMuX2ZpbGVuYW1lID0gKDAsIF9uZXR3b3JrX3V0aWxzLmV4dHJhY3RGaWxlbmFtZUZyb21IZWFkZXIpKGdldFJlc3BvbnNlSGVhZGVyKTtcbiAgICB9O1xuXG4gICAgdGhpcy5fcmVxdWVzdCA9IG51bGw7XG5cbiAgICBpZiAodGhpcy5fdXJsLnByb3RvY29sID09PSBcImh0dHA6XCIpIHtcbiAgICAgIHRoaXMuX3JlcXVlc3QgPSBodHRwLnJlcXVlc3QoY3JlYXRlUmVxdWVzdE9wdGlvbnModGhpcy5fdXJsLCBzdHJlYW0uaHR0cEhlYWRlcnMpLCBoYW5kbGVSZXNwb25zZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuX3JlcXVlc3QgPSBodHRwcy5yZXF1ZXN0KGNyZWF0ZVJlcXVlc3RPcHRpb25zKHRoaXMuX3VybCwgc3RyZWFtLmh0dHBIZWFkZXJzKSwgaGFuZGxlUmVzcG9uc2UpO1xuICAgIH1cblxuICAgIHRoaXMuX3JlcXVlc3Qub24oXCJlcnJvclwiLCByZWFzb24gPT4ge1xuICAgICAgdGhpcy5fc3RvcmVkRXJyb3IgPSByZWFzb247XG5cbiAgICAgIHRoaXMuX2hlYWRlcnNDYXBhYmlsaXR5LnJlamVjdChyZWFzb24pO1xuICAgIH0pO1xuXG4gICAgdGhpcy5fcmVxdWVzdC5lbmQoKTtcbiAgfVxuXG59XG5cbmNsYXNzIFBERk5vZGVTdHJlYW1SYW5nZVJlYWRlciBleHRlbmRzIEJhc2VSYW5nZVJlYWRlciB7XG4gIGNvbnN0cnVjdG9yKHN0cmVhbSwgc3RhcnQsIGVuZCkge1xuICAgIHN1cGVyKHN0cmVhbSk7XG4gICAgdGhpcy5faHR0cEhlYWRlcnMgPSB7fTtcblxuICAgIGZvciAoY29uc3QgcHJvcGVydHkgaW4gc3RyZWFtLmh0dHBIZWFkZXJzKSB7XG4gICAgICBjb25zdCB2YWx1ZSA9IHN0cmVhbS5odHRwSGVhZGVyc1twcm9wZXJ0eV07XG5cbiAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuX2h0dHBIZWFkZXJzW3Byb3BlcnR5XSA9IHZhbHVlO1xuICAgIH1cblxuICAgIHRoaXMuX2h0dHBIZWFkZXJzLlJhbmdlID0gYGJ5dGVzPSR7c3RhcnR9LSR7ZW5kIC0gMX1gO1xuXG4gICAgY29uc3QgaGFuZGxlUmVzcG9uc2UgPSByZXNwb25zZSA9PiB7XG4gICAgICBpZiAocmVzcG9uc2Uuc3RhdHVzQ29kZSA9PT0gNDA0KSB7XG4gICAgICAgIGNvbnN0IGVycm9yID0gbmV3IF91dGlsLk1pc3NpbmdQREZFeGNlcHRpb24oYE1pc3NpbmcgUERGIFwiJHt0aGlzLl91cmx9XCIuYCk7XG4gICAgICAgIHRoaXMuX3N0b3JlZEVycm9yID0gZXJyb3I7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdGhpcy5fc2V0UmVhZGFibGVTdHJlYW0ocmVzcG9uc2UpO1xuICAgIH07XG5cbiAgICB0aGlzLl9yZXF1ZXN0ID0gbnVsbDtcblxuICAgIGlmICh0aGlzLl91cmwucHJvdG9jb2wgPT09IFwiaHR0cDpcIikge1xuICAgICAgdGhpcy5fcmVxdWVzdCA9IGh0dHAucmVxdWVzdChjcmVhdGVSZXF1ZXN0T3B0aW9ucyh0aGlzLl91cmwsIHRoaXMuX2h0dHBIZWFkZXJzKSwgaGFuZGxlUmVzcG9uc2UpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLl9yZXF1ZXN0ID0gaHR0cHMucmVxdWVzdChjcmVhdGVSZXF1ZXN0T3B0aW9ucyh0aGlzLl91cmwsIHRoaXMuX2h0dHBIZWFkZXJzKSwgaGFuZGxlUmVzcG9uc2UpO1xuICAgIH1cblxuICAgIHRoaXMuX3JlcXVlc3Qub24oXCJlcnJvclwiLCByZWFzb24gPT4ge1xuICAgICAgdGhpcy5fc3RvcmVkRXJyb3IgPSByZWFzb247XG4gICAgfSk7XG5cbiAgICB0aGlzLl9yZXF1ZXN0LmVuZCgpO1xuICB9XG5cbn1cblxuY2xhc3MgUERGTm9kZVN0cmVhbUZzRnVsbFJlYWRlciBleHRlbmRzIEJhc2VGdWxsUmVhZGVyIHtcbiAgY29uc3RydWN0b3Ioc3RyZWFtKSB7XG4gICAgc3VwZXIoc3RyZWFtKTtcbiAgICBsZXQgcGF0aCA9IGRlY29kZVVSSUNvbXBvbmVudCh0aGlzLl91cmwucGF0aCk7XG5cbiAgICBpZiAoZmlsZVVyaVJlZ2V4LnRlc3QodGhpcy5fdXJsLmhyZWYpKSB7XG4gICAgICBwYXRoID0gcGF0aC5yZXBsYWNlKC9eXFwvLywgXCJcIik7XG4gICAgfVxuXG4gICAgZnMubHN0YXQocGF0aCwgKGVycm9yLCBzdGF0KSA9PiB7XG4gICAgICBpZiAoZXJyb3IpIHtcbiAgICAgICAgaWYgKGVycm9yLmNvZGUgPT09IFwiRU5PRU5UXCIpIHtcbiAgICAgICAgICBlcnJvciA9IG5ldyBfdXRpbC5NaXNzaW5nUERGRXhjZXB0aW9uKGBNaXNzaW5nIFBERiBcIiR7cGF0aH1cIi5gKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuX3N0b3JlZEVycm9yID0gZXJyb3I7XG5cbiAgICAgICAgdGhpcy5faGVhZGVyc0NhcGFiaWxpdHkucmVqZWN0KGVycm9yKTtcblxuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHRoaXMuX2NvbnRlbnRMZW5ndGggPSBzdGF0LnNpemU7XG5cbiAgICAgIHRoaXMuX3NldFJlYWRhYmxlU3RyZWFtKGZzLmNyZWF0ZVJlYWRTdHJlYW0ocGF0aCkpO1xuXG4gICAgICB0aGlzLl9oZWFkZXJzQ2FwYWJpbGl0eS5yZXNvbHZlKCk7XG4gICAgfSk7XG4gIH1cblxufVxuXG5jbGFzcyBQREZOb2RlU3RyZWFtRnNSYW5nZVJlYWRlciBleHRlbmRzIEJhc2VSYW5nZVJlYWRlciB7XG4gIGNvbnN0cnVjdG9yKHN0cmVhbSwgc3RhcnQsIGVuZCkge1xuICAgIHN1cGVyKHN0cmVhbSk7XG4gICAgbGV0IHBhdGggPSBkZWNvZGVVUklDb21wb25lbnQodGhpcy5fdXJsLnBhdGgpO1xuXG4gICAgaWYgKGZpbGVVcmlSZWdleC50ZXN0KHRoaXMuX3VybC5ocmVmKSkge1xuICAgICAgcGF0aCA9IHBhdGgucmVwbGFjZSgvXlxcLy8sIFwiXCIpO1xuICAgIH1cblxuICAgIHRoaXMuX3NldFJlYWRhYmxlU3RyZWFtKGZzLmNyZWF0ZVJlYWRTdHJlYW0ocGF0aCwge1xuICAgICAgc3RhcnQsXG4gICAgICBlbmQ6IGVuZCAtIDFcbiAgICB9KSk7XG4gIH1cblxufVxuXG4vKioqLyB9KSxcbi8qIDIwICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dfcGRmanNfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmNyZWF0ZVJlc3BvbnNlU3RhdHVzRXJyb3IgPSBjcmVhdGVSZXNwb25zZVN0YXR1c0Vycm9yO1xuZXhwb3J0cy5leHRyYWN0RmlsZW5hbWVGcm9tSGVhZGVyID0gZXh0cmFjdEZpbGVuYW1lRnJvbUhlYWRlcjtcbmV4cG9ydHMudmFsaWRhdGVSYW5nZVJlcXVlc3RDYXBhYmlsaXRpZXMgPSB2YWxpZGF0ZVJhbmdlUmVxdWVzdENhcGFiaWxpdGllcztcbmV4cG9ydHMudmFsaWRhdGVSZXNwb25zZVN0YXR1cyA9IHZhbGlkYXRlUmVzcG9uc2VTdGF0dXM7XG5cbnZhciBfdXRpbCA9IF9fd19wZGZqc19yZXF1aXJlX18oMik7XG5cbnZhciBfY29udGVudF9kaXNwb3NpdGlvbiA9IF9fd19wZGZqc19yZXF1aXJlX18oMjEpO1xuXG5mdW5jdGlvbiB2YWxpZGF0ZVJhbmdlUmVxdWVzdENhcGFiaWxpdGllcyh7XG4gIGdldFJlc3BvbnNlSGVhZGVyLFxuICBpc0h0dHAsXG4gIHJhbmdlQ2h1bmtTaXplLFxuICBkaXNhYmxlUmFuZ2Vcbn0pIHtcbiAgKDAsIF91dGlsLmFzc2VydCkocmFuZ2VDaHVua1NpemUgPiAwLCBcIlJhbmdlIGNodW5rIHNpemUgbXVzdCBiZSBsYXJnZXIgdGhhbiB6ZXJvXCIpO1xuICBjb25zdCByZXR1cm5WYWx1ZXMgPSB7XG4gICAgYWxsb3dSYW5nZVJlcXVlc3RzOiBmYWxzZSxcbiAgICBzdWdnZXN0ZWRMZW5ndGg6IHVuZGVmaW5lZFxuICB9O1xuICBjb25zdCBsZW5ndGggPSBwYXJzZUludChnZXRSZXNwb25zZUhlYWRlcihcIkNvbnRlbnQtTGVuZ3RoXCIpLCAxMCk7XG5cbiAgaWYgKCFOdW1iZXIuaXNJbnRlZ2VyKGxlbmd0aCkpIHtcbiAgICByZXR1cm4gcmV0dXJuVmFsdWVzO1xuICB9XG5cbiAgcmV0dXJuVmFsdWVzLnN1Z2dlc3RlZExlbmd0aCA9IGxlbmd0aDtcblxuICBpZiAobGVuZ3RoIDw9IDIgKiByYW5nZUNodW5rU2l6ZSkge1xuICAgIHJldHVybiByZXR1cm5WYWx1ZXM7XG4gIH1cblxuICBpZiAoZGlzYWJsZVJhbmdlIHx8ICFpc0h0dHApIHtcbiAgICByZXR1cm4gcmV0dXJuVmFsdWVzO1xuICB9XG5cbiAgaWYgKGdldFJlc3BvbnNlSGVhZGVyKFwiQWNjZXB0LVJhbmdlc1wiKSAhPT0gXCJieXRlc1wiKSB7XG4gICAgcmV0dXJuIHJldHVyblZhbHVlcztcbiAgfVxuXG4gIGNvbnN0IGNvbnRlbnRFbmNvZGluZyA9IGdldFJlc3BvbnNlSGVhZGVyKFwiQ29udGVudC1FbmNvZGluZ1wiKSB8fCBcImlkZW50aXR5XCI7XG5cbiAgaWYgKGNvbnRlbnRFbmNvZGluZyAhPT0gXCJpZGVudGl0eVwiKSB7XG4gICAgcmV0dXJuIHJldHVyblZhbHVlcztcbiAgfVxuXG4gIHJldHVyblZhbHVlcy5hbGxvd1JhbmdlUmVxdWVzdHMgPSB0cnVlO1xuICByZXR1cm4gcmV0dXJuVmFsdWVzO1xufVxuXG5mdW5jdGlvbiBleHRyYWN0RmlsZW5hbWVGcm9tSGVhZGVyKGdldFJlc3BvbnNlSGVhZGVyKSB7XG4gIGNvbnN0IGNvbnRlbnREaXNwb3NpdGlvbiA9IGdldFJlc3BvbnNlSGVhZGVyKFwiQ29udGVudC1EaXNwb3NpdGlvblwiKTtcblxuICBpZiAoY29udGVudERpc3Bvc2l0aW9uKSB7XG4gICAgbGV0IGZpbGVuYW1lID0gKDAsIF9jb250ZW50X2Rpc3Bvc2l0aW9uLmdldEZpbGVuYW1lRnJvbUNvbnRlbnREaXNwb3NpdGlvbkhlYWRlcikoY29udGVudERpc3Bvc2l0aW9uKTtcblxuICAgIGlmIChmaWxlbmFtZS5pbmNsdWRlcyhcIiVcIikpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGZpbGVuYW1lID0gZGVjb2RlVVJJQ29tcG9uZW50KGZpbGVuYW1lKTtcbiAgICAgIH0gY2F0Y2ggKGV4KSB7fVxuICAgIH1cblxuICAgIGlmICgvXFwucGRmJC9pLnRlc3QoZmlsZW5hbWUpKSB7XG4gICAgICByZXR1cm4gZmlsZW5hbWU7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG51bGw7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVJlc3BvbnNlU3RhdHVzRXJyb3Ioc3RhdHVzLCB1cmwpIHtcbiAgaWYgKHN0YXR1cyA9PT0gNDA0IHx8IHN0YXR1cyA9PT0gMCAmJiB1cmwuc3RhcnRzV2l0aChcImZpbGU6XCIpKSB7XG4gICAgcmV0dXJuIG5ldyBfdXRpbC5NaXNzaW5nUERGRXhjZXB0aW9uKCdNaXNzaW5nIFBERiBcIicgKyB1cmwgKyAnXCIuJyk7XG4gIH1cblxuICByZXR1cm4gbmV3IF91dGlsLlVuZXhwZWN0ZWRSZXNwb25zZUV4Y2VwdGlvbihcIlVuZXhwZWN0ZWQgc2VydmVyIHJlc3BvbnNlIChcIiArIHN0YXR1cyArICcpIHdoaWxlIHJldHJpZXZpbmcgUERGIFwiJyArIHVybCArICdcIi4nLCBzdGF0dXMpO1xufVxuXG5mdW5jdGlvbiB2YWxpZGF0ZVJlc3BvbnNlU3RhdHVzKHN0YXR1cykge1xuICByZXR1cm4gc3RhdHVzID09PSAyMDAgfHwgc3RhdHVzID09PSAyMDY7XG59XG5cbi8qKiovIH0pLFxuLyogMjEgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd19wZGZqc19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZ2V0RmlsZW5hbWVGcm9tQ29udGVudERpc3Bvc2l0aW9uSGVhZGVyID0gZ2V0RmlsZW5hbWVGcm9tQ29udGVudERpc3Bvc2l0aW9uSGVhZGVyO1xuXG5mdW5jdGlvbiBnZXRGaWxlbmFtZUZyb21Db250ZW50RGlzcG9zaXRpb25IZWFkZXIoY29udGVudERpc3Bvc2l0aW9uKSB7XG4gIGxldCBuZWVkc0VuY29kaW5nRml4dXAgPSB0cnVlO1xuICBsZXQgdG1wID0gdG9QYXJhbVJlZ0V4cChcImZpbGVuYW1lXFxcXCpcIiwgXCJpXCIpLmV4ZWMoY29udGVudERpc3Bvc2l0aW9uKTtcblxuICBpZiAodG1wKSB7XG4gICAgdG1wID0gdG1wWzFdO1xuICAgIGxldCBmaWxlbmFtZSA9IHJmYzI2MTZ1bnF1b3RlKHRtcCk7XG4gICAgZmlsZW5hbWUgPSB1bmVzY2FwZShmaWxlbmFtZSk7XG4gICAgZmlsZW5hbWUgPSByZmM1OTg3ZGVjb2RlKGZpbGVuYW1lKTtcbiAgICBmaWxlbmFtZSA9IHJmYzIwNDdkZWNvZGUoZmlsZW5hbWUpO1xuICAgIHJldHVybiBmaXh1cEVuY29kaW5nKGZpbGVuYW1lKTtcbiAgfVxuXG4gIHRtcCA9IHJmYzIyMzFnZXRwYXJhbShjb250ZW50RGlzcG9zaXRpb24pO1xuXG4gIGlmICh0bXApIHtcbiAgICBjb25zdCBmaWxlbmFtZSA9IHJmYzIwNDdkZWNvZGUodG1wKTtcbiAgICByZXR1cm4gZml4dXBFbmNvZGluZyhmaWxlbmFtZSk7XG4gIH1cblxuICB0bXAgPSB0b1BhcmFtUmVnRXhwKFwiZmlsZW5hbWVcIiwgXCJpXCIpLmV4ZWMoY29udGVudERpc3Bvc2l0aW9uKTtcblxuICBpZiAodG1wKSB7XG4gICAgdG1wID0gdG1wWzFdO1xuICAgIGxldCBmaWxlbmFtZSA9IHJmYzI2MTZ1bnF1b3RlKHRtcCk7XG4gICAgZmlsZW5hbWUgPSByZmMyMDQ3ZGVjb2RlKGZpbGVuYW1lKTtcbiAgICByZXR1cm4gZml4dXBFbmNvZGluZyhmaWxlbmFtZSk7XG4gIH1cblxuICBmdW5jdGlvbiB0b1BhcmFtUmVnRXhwKGF0dHJpYnV0ZVBhdHRlcm4sIGZsYWdzKSB7XG4gICAgcmV0dXJuIG5ldyBSZWdFeHAoXCIoPzpefDspXFxcXHMqXCIgKyBhdHRyaWJ1dGVQYXR0ZXJuICsgXCJcXFxccyo9XFxcXHMqXCIgKyBcIihcIiArICdbXlwiO1xcXFxzXVteO1xcXFxzXSonICsgXCJ8XCIgKyAnXCIoPzpbXlwiXFxcXFxcXFxdfFxcXFxcXFxcXCI/KStcIj8nICsgXCIpXCIsIGZsYWdzKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHRleHRkZWNvZGUoZW5jb2RpbmcsIHZhbHVlKSB7XG4gICAgaWYgKGVuY29kaW5nKSB7XG4gICAgICBpZiAoIS9eW1xceDAwLVxceEZGXSskLy50ZXN0KHZhbHVlKSkge1xuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICB9XG5cbiAgICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IGRlY29kZXIgPSBuZXcgVGV4dERlY29kZXIoZW5jb2RpbmcsIHtcbiAgICAgICAgICBmYXRhbDogdHJ1ZVxuICAgICAgICB9KTtcbiAgICAgICAgY29uc3QgYnl0ZXMgPSBBcnJheS5mcm9tKHZhbHVlLCBmdW5jdGlvbiAoY2gpIHtcbiAgICAgICAgICByZXR1cm4gY2guY2hhckNvZGVBdCgwKSAmIDB4ZmY7XG4gICAgICAgIH0pO1xuICAgICAgICB2YWx1ZSA9IGRlY29kZXIuZGVjb2RlKG5ldyBVaW50OEFycmF5KGJ5dGVzKSk7XG4gICAgICAgIG5lZWRzRW5jb2RpbmdGaXh1cCA9IGZhbHNlO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBpZiAoL151dGYtPzgkL2kudGVzdChlbmNvZGluZykpIHtcbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgdmFsdWUgPSBkZWNvZGVVUklDb21wb25lbnQoZXNjYXBlKHZhbHVlKSk7XG4gICAgICAgICAgICBuZWVkc0VuY29kaW5nRml4dXAgPSBmYWxzZTtcbiAgICAgICAgICB9IGNhdGNoIChlcnIpIHt9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdmFsdWU7XG4gIH1cblxuICBmdW5jdGlvbiBmaXh1cEVuY29kaW5nKHZhbHVlKSB7XG4gICAgaWYgKG5lZWRzRW5jb2RpbmdGaXh1cCAmJiAvW1xceDgwLVxceGZmXS8udGVzdCh2YWx1ZSkpIHtcbiAgICAgIHZhbHVlID0gdGV4dGRlY29kZShcInV0Zi04XCIsIHZhbHVlKTtcblxuICAgICAgaWYgKG5lZWRzRW5jb2RpbmdGaXh1cCkge1xuICAgICAgICB2YWx1ZSA9IHRleHRkZWNvZGUoXCJpc28tODg1OS0xXCIsIHZhbHVlKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdmFsdWU7XG4gIH1cblxuICBmdW5jdGlvbiByZmMyMjMxZ2V0cGFyYW0oY29udGVudERpc3Bvc2l0aW9uU3RyKSB7XG4gICAgY29uc3QgbWF0Y2hlcyA9IFtdO1xuICAgIGxldCBtYXRjaDtcbiAgICBjb25zdCBpdGVyID0gdG9QYXJhbVJlZ0V4cChcImZpbGVuYW1lXFxcXCooKD8hMFxcXFxkKVxcXFxkKykoXFxcXCo/KVwiLCBcImlnXCIpO1xuXG4gICAgd2hpbGUgKChtYXRjaCA9IGl0ZXIuZXhlYyhjb250ZW50RGlzcG9zaXRpb25TdHIpKSAhPT0gbnVsbCkge1xuICAgICAgbGV0IFssIG4sIHF1b3QsIHBhcnRdID0gbWF0Y2g7XG4gICAgICBuID0gcGFyc2VJbnQobiwgMTApO1xuXG4gICAgICBpZiAobiBpbiBtYXRjaGVzKSB7XG4gICAgICAgIGlmIChuID09PSAwKSB7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cblxuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgbWF0Y2hlc1tuXSA9IFtxdW90LCBwYXJ0XTtcbiAgICB9XG5cbiAgICBjb25zdCBwYXJ0cyA9IFtdO1xuXG4gICAgZm9yIChsZXQgbiA9IDA7IG4gPCBtYXRjaGVzLmxlbmd0aDsgKytuKSB7XG4gICAgICBpZiAoIShuIGluIG1hdGNoZXMpKSB7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuXG4gICAgICBsZXQgW3F1b3QsIHBhcnRdID0gbWF0Y2hlc1tuXTtcbiAgICAgIHBhcnQgPSByZmMyNjE2dW5xdW90ZShwYXJ0KTtcblxuICAgICAgaWYgKHF1b3QpIHtcbiAgICAgICAgcGFydCA9IHVuZXNjYXBlKHBhcnQpO1xuXG4gICAgICAgIGlmIChuID09PSAwKSB7XG4gICAgICAgICAgcGFydCA9IHJmYzU5ODdkZWNvZGUocGFydCk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcGFydHMucHVzaChwYXJ0KTtcbiAgICB9XG5cbiAgICByZXR1cm4gcGFydHMuam9pbihcIlwiKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHJmYzI2MTZ1bnF1b3RlKHZhbHVlKSB7XG4gICAgaWYgKHZhbHVlLnN0YXJ0c1dpdGgoJ1wiJykpIHtcbiAgICAgIGNvbnN0IHBhcnRzID0gdmFsdWUuc2xpY2UoMSkuc3BsaXQoJ1xcXFxcIicpO1xuXG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHBhcnRzLmxlbmd0aDsgKytpKSB7XG4gICAgICAgIGNvbnN0IHF1b3RpbmRleCA9IHBhcnRzW2ldLmluZGV4T2YoJ1wiJyk7XG5cbiAgICAgICAgaWYgKHF1b3RpbmRleCAhPT0gLTEpIHtcbiAgICAgICAgICBwYXJ0c1tpXSA9IHBhcnRzW2ldLnNsaWNlKDAsIHF1b3RpbmRleCk7XG4gICAgICAgICAgcGFydHMubGVuZ3RoID0gaSArIDE7XG4gICAgICAgIH1cblxuICAgICAgICBwYXJ0c1tpXSA9IHBhcnRzW2ldLnJlcGxhY2UoL1xcXFwoLikvZywgXCIkMVwiKTtcbiAgICAgIH1cblxuICAgICAgdmFsdWUgPSBwYXJ0cy5qb2luKCdcIicpO1xuICAgIH1cblxuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHJmYzU5ODdkZWNvZGUoZXh0dmFsdWUpIHtcbiAgICBjb25zdCBlbmNvZGluZ2VuZCA9IGV4dHZhbHVlLmluZGV4T2YoXCInXCIpO1xuXG4gICAgaWYgKGVuY29kaW5nZW5kID09PSAtMSkge1xuICAgICAgcmV0dXJuIGV4dHZhbHVlO1xuICAgIH1cblxuICAgIGNvbnN0IGVuY29kaW5nID0gZXh0dmFsdWUuc2xpY2UoMCwgZW5jb2RpbmdlbmQpO1xuICAgIGNvbnN0IGxhbmd2YWx1ZSA9IGV4dHZhbHVlLnNsaWNlKGVuY29kaW5nZW5kICsgMSk7XG4gICAgY29uc3QgdmFsdWUgPSBsYW5ndmFsdWUucmVwbGFjZSgvXlteJ10qJy8sIFwiXCIpO1xuICAgIHJldHVybiB0ZXh0ZGVjb2RlKGVuY29kaW5nLCB2YWx1ZSk7XG4gIH1cblxuICBmdW5jdGlvbiByZmMyMDQ3ZGVjb2RlKHZhbHVlKSB7XG4gICAgaWYgKCF2YWx1ZS5zdGFydHNXaXRoKFwiPT9cIikgfHwgL1tcXHgwMC1cXHgxOVxceDgwLVxceGZmXS8udGVzdCh2YWx1ZSkpIHtcbiAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9XG5cbiAgICByZXR1cm4gdmFsdWUucmVwbGFjZSgvPVxcPyhbXFx3LV0qKVxcPyhbUXFCYl0pXFw/KCg/OlteP118XFw/KD8hPSkpKilcXD89L2csIGZ1bmN0aW9uIChtYXRjaGVzLCBjaGFyc2V0LCBlbmNvZGluZywgdGV4dCkge1xuICAgICAgaWYgKGVuY29kaW5nID09PSBcInFcIiB8fCBlbmNvZGluZyA9PT0gXCJRXCIpIHtcbiAgICAgICAgdGV4dCA9IHRleHQucmVwbGFjZSgvXy9nLCBcIiBcIik7XG4gICAgICAgIHRleHQgPSB0ZXh0LnJlcGxhY2UoLz0oWzAtOWEtZkEtRl17Mn0pL2csIGZ1bmN0aW9uIChtYXRjaCwgaGV4KSB7XG4gICAgICAgICAgcmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUocGFyc2VJbnQoaGV4LCAxNikpO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHRleHRkZWNvZGUoY2hhcnNldCwgdGV4dCk7XG4gICAgICB9XG5cbiAgICAgIHRyeSB7XG4gICAgICAgIHRleHQgPSBhdG9iKHRleHQpO1xuICAgICAgfSBjYXRjaCAoZSkge31cblxuICAgICAgcmV0dXJuIHRleHRkZWNvZGUoY2hhcnNldCwgdGV4dCk7XG4gICAgfSk7XG4gIH1cblxuICByZXR1cm4gXCJcIjtcbn1cblxuLyoqKi8gfSksXG4vKiAyMiAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193X3BkZmpzX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5QREZOZXR3b3JrU3RyZWFtID0gdm9pZCAwO1xuXG52YXIgX3V0aWwgPSBfX3dfcGRmanNfcmVxdWlyZV9fKDIpO1xuXG52YXIgX25ldHdvcmtfdXRpbHMgPSBfX3dfcGRmanNfcmVxdWlyZV9fKDIwKTtcblxuO1xuY29uc3QgT0tfUkVTUE9OU0UgPSAyMDA7XG5jb25zdCBQQVJUSUFMX0NPTlRFTlRfUkVTUE9OU0UgPSAyMDY7XG5cbmZ1bmN0aW9uIGdldEFycmF5QnVmZmVyKHhocikge1xuICBjb25zdCBkYXRhID0geGhyLnJlc3BvbnNlO1xuXG4gIGlmICh0eXBlb2YgZGF0YSAhPT0gXCJzdHJpbmdcIikge1xuICAgIHJldHVybiBkYXRhO1xuICB9XG5cbiAgY29uc3QgYXJyYXkgPSAoMCwgX3V0aWwuc3RyaW5nVG9CeXRlcykoZGF0YSk7XG4gIHJldHVybiBhcnJheS5idWZmZXI7XG59XG5cbmNsYXNzIE5ldHdvcmtNYW5hZ2VyIHtcbiAgY29uc3RydWN0b3IodXJsLCBhcmdzKSB7XG4gICAgdGhpcy51cmwgPSB1cmw7XG4gICAgYXJncyA9IGFyZ3MgfHwge307XG4gICAgdGhpcy5pc0h0dHAgPSAvXmh0dHBzPzovaS50ZXN0KHVybCk7XG4gICAgdGhpcy5odHRwSGVhZGVycyA9IHRoaXMuaXNIdHRwICYmIGFyZ3MuaHR0cEhlYWRlcnMgfHwge307XG4gICAgdGhpcy53aXRoQ3JlZGVudGlhbHMgPSBhcmdzLndpdGhDcmVkZW50aWFscyB8fCBmYWxzZTtcblxuICAgIHRoaXMuZ2V0WGhyID0gYXJncy5nZXRYaHIgfHwgZnVuY3Rpb24gTmV0d29ya01hbmFnZXJfZ2V0WGhyKCkge1xuICAgICAgcmV0dXJuIG5ldyBYTUxIdHRwUmVxdWVzdCgpO1xuICAgIH07XG5cbiAgICB0aGlzLmN1cnJYaHJJZCA9IDA7XG4gICAgdGhpcy5wZW5kaW5nUmVxdWVzdHMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICB9XG5cbiAgcmVxdWVzdFJhbmdlKGJlZ2luLCBlbmQsIGxpc3RlbmVycykge1xuICAgIGNvbnN0IGFyZ3MgPSB7XG4gICAgICBiZWdpbixcbiAgICAgIGVuZFxuICAgIH07XG5cbiAgICBmb3IgKGNvbnN0IHByb3AgaW4gbGlzdGVuZXJzKSB7XG4gICAgICBhcmdzW3Byb3BdID0gbGlzdGVuZXJzW3Byb3BdO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLnJlcXVlc3QoYXJncyk7XG4gIH1cblxuICByZXF1ZXN0RnVsbChsaXN0ZW5lcnMpIHtcbiAgICByZXR1cm4gdGhpcy5yZXF1ZXN0KGxpc3RlbmVycyk7XG4gIH1cblxuICByZXF1ZXN0KGFyZ3MpIHtcbiAgICBjb25zdCB4aHIgPSB0aGlzLmdldFhocigpO1xuICAgIGNvbnN0IHhocklkID0gdGhpcy5jdXJyWGhySWQrKztcbiAgICBjb25zdCBwZW5kaW5nUmVxdWVzdCA9IHRoaXMucGVuZGluZ1JlcXVlc3RzW3hocklkXSA9IHtcbiAgICAgIHhoclxuICAgIH07XG4gICAgeGhyLm9wZW4oXCJHRVRcIiwgdGhpcy51cmwpO1xuICAgIHhoci53aXRoQ3JlZGVudGlhbHMgPSB0aGlzLndpdGhDcmVkZW50aWFscztcblxuICAgIGZvciAoY29uc3QgcHJvcGVydHkgaW4gdGhpcy5odHRwSGVhZGVycykge1xuICAgICAgY29uc3QgdmFsdWUgPSB0aGlzLmh0dHBIZWFkZXJzW3Byb3BlcnR5XTtcblxuICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgeGhyLnNldFJlcXVlc3RIZWFkZXIocHJvcGVydHksIHZhbHVlKTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5pc0h0dHAgJiYgXCJiZWdpblwiIGluIGFyZ3MgJiYgXCJlbmRcIiBpbiBhcmdzKSB7XG4gICAgICB4aHIuc2V0UmVxdWVzdEhlYWRlcihcIlJhbmdlXCIsIGBieXRlcz0ke2FyZ3MuYmVnaW59LSR7YXJncy5lbmQgLSAxfWApO1xuICAgICAgcGVuZGluZ1JlcXVlc3QuZXhwZWN0ZWRTdGF0dXMgPSBQQVJUSUFMX0NPTlRFTlRfUkVTUE9OU0U7XG4gICAgfSBlbHNlIHtcbiAgICAgIHBlbmRpbmdSZXF1ZXN0LmV4cGVjdGVkU3RhdHVzID0gT0tfUkVTUE9OU0U7XG4gICAgfVxuXG4gICAgeGhyLnJlc3BvbnNlVHlwZSA9IFwiYXJyYXlidWZmZXJcIjtcblxuICAgIGlmIChhcmdzLm9uRXJyb3IpIHtcbiAgICAgIHhoci5vbmVycm9yID0gZnVuY3Rpb24gKGV2dCkge1xuICAgICAgICBhcmdzLm9uRXJyb3IoeGhyLnN0YXR1cyk7XG4gICAgICB9O1xuICAgIH1cblxuICAgIHhoci5vbnJlYWR5c3RhdGVjaGFuZ2UgPSB0aGlzLm9uU3RhdGVDaGFuZ2UuYmluZCh0aGlzLCB4aHJJZCk7XG4gICAgeGhyLm9ucHJvZ3Jlc3MgPSB0aGlzLm9uUHJvZ3Jlc3MuYmluZCh0aGlzLCB4aHJJZCk7XG4gICAgcGVuZGluZ1JlcXVlc3Qub25IZWFkZXJzUmVjZWl2ZWQgPSBhcmdzLm9uSGVhZGVyc1JlY2VpdmVkO1xuICAgIHBlbmRpbmdSZXF1ZXN0Lm9uRG9uZSA9IGFyZ3Mub25Eb25lO1xuICAgIHBlbmRpbmdSZXF1ZXN0Lm9uRXJyb3IgPSBhcmdzLm9uRXJyb3I7XG4gICAgcGVuZGluZ1JlcXVlc3Qub25Qcm9ncmVzcyA9IGFyZ3Mub25Qcm9ncmVzcztcbiAgICB4aHIuc2VuZChudWxsKTtcbiAgICByZXR1cm4geGhySWQ7XG4gIH1cblxuICBvblByb2dyZXNzKHhocklkLCBldnQpIHtcbiAgICBjb25zdCBwZW5kaW5nUmVxdWVzdCA9IHRoaXMucGVuZGluZ1JlcXVlc3RzW3hocklkXTtcblxuICAgIGlmICghcGVuZGluZ1JlcXVlc3QpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAocGVuZGluZ1JlcXVlc3Qub25Qcm9ncmVzcykge1xuICAgICAgcGVuZGluZ1JlcXVlc3Qub25Qcm9ncmVzcyhldnQpO1xuICAgIH1cbiAgfVxuXG4gIG9uU3RhdGVDaGFuZ2UoeGhySWQsIGV2dCkge1xuICAgIGNvbnN0IHBlbmRpbmdSZXF1ZXN0ID0gdGhpcy5wZW5kaW5nUmVxdWVzdHNbeGhySWRdO1xuXG4gICAgaWYgKCFwZW5kaW5nUmVxdWVzdCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNvbnN0IHhociA9IHBlbmRpbmdSZXF1ZXN0LnhocjtcblxuICAgIGlmICh4aHIucmVhZHlTdGF0ZSA+PSAyICYmIHBlbmRpbmdSZXF1ZXN0Lm9uSGVhZGVyc1JlY2VpdmVkKSB7XG4gICAgICBwZW5kaW5nUmVxdWVzdC5vbkhlYWRlcnNSZWNlaXZlZCgpO1xuICAgICAgZGVsZXRlIHBlbmRpbmdSZXF1ZXN0Lm9uSGVhZGVyc1JlY2VpdmVkO1xuICAgIH1cblxuICAgIGlmICh4aHIucmVhZHlTdGF0ZSAhPT0gNCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmICghKHhocklkIGluIHRoaXMucGVuZGluZ1JlcXVlc3RzKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGRlbGV0ZSB0aGlzLnBlbmRpbmdSZXF1ZXN0c1t4aHJJZF07XG5cbiAgICBpZiAoeGhyLnN0YXR1cyA9PT0gMCAmJiB0aGlzLmlzSHR0cCkge1xuICAgICAgaWYgKHBlbmRpbmdSZXF1ZXN0Lm9uRXJyb3IpIHtcbiAgICAgICAgcGVuZGluZ1JlcXVlc3Qub25FcnJvcih4aHIuc3RhdHVzKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNvbnN0IHhoclN0YXR1cyA9IHhoci5zdGF0dXMgfHwgT0tfUkVTUE9OU0U7XG4gICAgY29uc3Qgb2tfcmVzcG9uc2Vfb25fcmFuZ2VfcmVxdWVzdCA9IHhoclN0YXR1cyA9PT0gT0tfUkVTUE9OU0UgJiYgcGVuZGluZ1JlcXVlc3QuZXhwZWN0ZWRTdGF0dXMgPT09IFBBUlRJQUxfQ09OVEVOVF9SRVNQT05TRTtcblxuICAgIGlmICghb2tfcmVzcG9uc2Vfb25fcmFuZ2VfcmVxdWVzdCAmJiB4aHJTdGF0dXMgIT09IHBlbmRpbmdSZXF1ZXN0LmV4cGVjdGVkU3RhdHVzKSB7XG4gICAgICBpZiAocGVuZGluZ1JlcXVlc3Qub25FcnJvcikge1xuICAgICAgICBwZW5kaW5nUmVxdWVzdC5vbkVycm9yKHhoci5zdGF0dXMpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY29uc3QgY2h1bmsgPSBnZXRBcnJheUJ1ZmZlcih4aHIpO1xuXG4gICAgaWYgKHhoclN0YXR1cyA9PT0gUEFSVElBTF9DT05URU5UX1JFU1BPTlNFKSB7XG4gICAgICBjb25zdCByYW5nZUhlYWRlciA9IHhoci5nZXRSZXNwb25zZUhlYWRlcihcIkNvbnRlbnQtUmFuZ2VcIik7XG4gICAgICBjb25zdCBtYXRjaGVzID0gL2J5dGVzIChcXGQrKS0oXFxkKylcXC8oXFxkKykvLmV4ZWMocmFuZ2VIZWFkZXIpO1xuICAgICAgcGVuZGluZ1JlcXVlc3Qub25Eb25lKHtcbiAgICAgICAgYmVnaW46IHBhcnNlSW50KG1hdGNoZXNbMV0sIDEwKSxcbiAgICAgICAgY2h1bmtcbiAgICAgIH0pO1xuICAgIH0gZWxzZSBpZiAoY2h1bmspIHtcbiAgICAgIHBlbmRpbmdSZXF1ZXN0Lm9uRG9uZSh7XG4gICAgICAgIGJlZ2luOiAwLFxuICAgICAgICBjaHVua1xuICAgICAgfSk7XG4gICAgfSBlbHNlIGlmIChwZW5kaW5nUmVxdWVzdC5vbkVycm9yKSB7XG4gICAgICBwZW5kaW5nUmVxdWVzdC5vbkVycm9yKHhoci5zdGF0dXMpO1xuICAgIH1cbiAgfVxuXG4gIGhhc1BlbmRpbmdSZXF1ZXN0cygpIHtcbiAgICBmb3IgKGNvbnN0IHhocklkIGluIHRoaXMucGVuZGluZ1JlcXVlc3RzKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBnZXRSZXF1ZXN0WGhyKHhocklkKSB7XG4gICAgcmV0dXJuIHRoaXMucGVuZGluZ1JlcXVlc3RzW3hocklkXS54aHI7XG4gIH1cblxuICBpc1BlbmRpbmdSZXF1ZXN0KHhocklkKSB7XG4gICAgcmV0dXJuIHhocklkIGluIHRoaXMucGVuZGluZ1JlcXVlc3RzO1xuICB9XG5cbiAgYWJvcnRBbGxSZXF1ZXN0cygpIHtcbiAgICBmb3IgKGNvbnN0IHhocklkIGluIHRoaXMucGVuZGluZ1JlcXVlc3RzKSB7XG4gICAgICB0aGlzLmFib3J0UmVxdWVzdCh4aHJJZCB8IDApO1xuICAgIH1cbiAgfVxuXG4gIGFib3J0UmVxdWVzdCh4aHJJZCkge1xuICAgIGNvbnN0IHhociA9IHRoaXMucGVuZGluZ1JlcXVlc3RzW3hocklkXS54aHI7XG4gICAgZGVsZXRlIHRoaXMucGVuZGluZ1JlcXVlc3RzW3hocklkXTtcbiAgICB4aHIuYWJvcnQoKTtcbiAgfVxuXG59XG5cbmNsYXNzIFBERk5ldHdvcmtTdHJlYW0ge1xuICBjb25zdHJ1Y3Rvcihzb3VyY2UpIHtcbiAgICB0aGlzLl9zb3VyY2UgPSBzb3VyY2U7XG4gICAgdGhpcy5fbWFuYWdlciA9IG5ldyBOZXR3b3JrTWFuYWdlcihzb3VyY2UudXJsLCB7XG4gICAgICBodHRwSGVhZGVyczogc291cmNlLmh0dHBIZWFkZXJzLFxuICAgICAgd2l0aENyZWRlbnRpYWxzOiBzb3VyY2Uud2l0aENyZWRlbnRpYWxzXG4gICAgfSk7XG4gICAgdGhpcy5fcmFuZ2VDaHVua1NpemUgPSBzb3VyY2UucmFuZ2VDaHVua1NpemU7XG4gICAgdGhpcy5fZnVsbFJlcXVlc3RSZWFkZXIgPSBudWxsO1xuICAgIHRoaXMuX3JhbmdlUmVxdWVzdFJlYWRlcnMgPSBbXTtcbiAgfVxuXG4gIF9vblJhbmdlUmVxdWVzdFJlYWRlckNsb3NlZChyZWFkZXIpIHtcbiAgICBjb25zdCBpID0gdGhpcy5fcmFuZ2VSZXF1ZXN0UmVhZGVycy5pbmRleE9mKHJlYWRlcik7XG5cbiAgICBpZiAoaSA+PSAwKSB7XG4gICAgICB0aGlzLl9yYW5nZVJlcXVlc3RSZWFkZXJzLnNwbGljZShpLCAxKTtcbiAgICB9XG4gIH1cblxuICBnZXRGdWxsUmVhZGVyKCkge1xuICAgICgwLCBfdXRpbC5hc3NlcnQpKCF0aGlzLl9mdWxsUmVxdWVzdFJlYWRlciwgXCJQREZOZXR3b3JrU3RyZWFtLmdldEZ1bGxSZWFkZXIgY2FuIG9ubHkgYmUgY2FsbGVkIG9uY2UuXCIpO1xuICAgIHRoaXMuX2Z1bGxSZXF1ZXN0UmVhZGVyID0gbmV3IFBERk5ldHdvcmtTdHJlYW1GdWxsUmVxdWVzdFJlYWRlcih0aGlzLl9tYW5hZ2VyLCB0aGlzLl9zb3VyY2UpO1xuICAgIHJldHVybiB0aGlzLl9mdWxsUmVxdWVzdFJlYWRlcjtcbiAgfVxuXG4gIGdldFJhbmdlUmVhZGVyKGJlZ2luLCBlbmQpIHtcbiAgICBjb25zdCByZWFkZXIgPSBuZXcgUERGTmV0d29ya1N0cmVhbVJhbmdlUmVxdWVzdFJlYWRlcih0aGlzLl9tYW5hZ2VyLCBiZWdpbiwgZW5kKTtcbiAgICByZWFkZXIub25DbG9zZWQgPSB0aGlzLl9vblJhbmdlUmVxdWVzdFJlYWRlckNsb3NlZC5iaW5kKHRoaXMpO1xuXG4gICAgdGhpcy5fcmFuZ2VSZXF1ZXN0UmVhZGVycy5wdXNoKHJlYWRlcik7XG5cbiAgICByZXR1cm4gcmVhZGVyO1xuICB9XG5cbiAgY2FuY2VsQWxsUmVxdWVzdHMocmVhc29uKSB7XG4gICAgaWYgKHRoaXMuX2Z1bGxSZXF1ZXN0UmVhZGVyKSB7XG4gICAgICB0aGlzLl9mdWxsUmVxdWVzdFJlYWRlci5jYW5jZWwocmVhc29uKTtcbiAgICB9XG5cbiAgICBjb25zdCByZWFkZXJzID0gdGhpcy5fcmFuZ2VSZXF1ZXN0UmVhZGVycy5zbGljZSgwKTtcblxuICAgIHJlYWRlcnMuZm9yRWFjaChmdW5jdGlvbiAocmVhZGVyKSB7XG4gICAgICByZWFkZXIuY2FuY2VsKHJlYXNvbik7XG4gICAgfSk7XG4gIH1cblxufVxuXG5leHBvcnRzLlBERk5ldHdvcmtTdHJlYW0gPSBQREZOZXR3b3JrU3RyZWFtO1xuXG5jbGFzcyBQREZOZXR3b3JrU3RyZWFtRnVsbFJlcXVlc3RSZWFkZXIge1xuICBjb25zdHJ1Y3RvcihtYW5hZ2VyLCBzb3VyY2UpIHtcbiAgICB0aGlzLl9tYW5hZ2VyID0gbWFuYWdlcjtcbiAgICBjb25zdCBhcmdzID0ge1xuICAgICAgb25IZWFkZXJzUmVjZWl2ZWQ6IHRoaXMuX29uSGVhZGVyc1JlY2VpdmVkLmJpbmQodGhpcyksXG4gICAgICBvbkRvbmU6IHRoaXMuX29uRG9uZS5iaW5kKHRoaXMpLFxuICAgICAgb25FcnJvcjogdGhpcy5fb25FcnJvci5iaW5kKHRoaXMpLFxuICAgICAgb25Qcm9ncmVzczogdGhpcy5fb25Qcm9ncmVzcy5iaW5kKHRoaXMpXG4gICAgfTtcbiAgICB0aGlzLl91cmwgPSBzb3VyY2UudXJsO1xuICAgIHRoaXMuX2Z1bGxSZXF1ZXN0SWQgPSBtYW5hZ2VyLnJlcXVlc3RGdWxsKGFyZ3MpO1xuICAgIHRoaXMuX2hlYWRlcnNSZWNlaXZlZENhcGFiaWxpdHkgPSAoMCwgX3V0aWwuY3JlYXRlUHJvbWlzZUNhcGFiaWxpdHkpKCk7XG4gICAgdGhpcy5fZGlzYWJsZVJhbmdlID0gc291cmNlLmRpc2FibGVSYW5nZSB8fCBmYWxzZTtcbiAgICB0aGlzLl9jb250ZW50TGVuZ3RoID0gc291cmNlLmxlbmd0aDtcbiAgICB0aGlzLl9yYW5nZUNodW5rU2l6ZSA9IHNvdXJjZS5yYW5nZUNodW5rU2l6ZTtcblxuICAgIGlmICghdGhpcy5fcmFuZ2VDaHVua1NpemUgJiYgIXRoaXMuX2Rpc2FibGVSYW5nZSkge1xuICAgICAgdGhpcy5fZGlzYWJsZVJhbmdlID0gdHJ1ZTtcbiAgICB9XG5cbiAgICB0aGlzLl9pc1N0cmVhbWluZ1N1cHBvcnRlZCA9IGZhbHNlO1xuICAgIHRoaXMuX2lzUmFuZ2VTdXBwb3J0ZWQgPSBmYWxzZTtcbiAgICB0aGlzLl9jYWNoZWRDaHVua3MgPSBbXTtcbiAgICB0aGlzLl9yZXF1ZXN0cyA9IFtdO1xuICAgIHRoaXMuX2RvbmUgPSBmYWxzZTtcbiAgICB0aGlzLl9zdG9yZWRFcnJvciA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLl9maWxlbmFtZSA9IG51bGw7XG4gICAgdGhpcy5vblByb2dyZXNzID0gbnVsbDtcbiAgfVxuXG4gIF9vbkhlYWRlcnNSZWNlaXZlZCgpIHtcbiAgICBjb25zdCBmdWxsUmVxdWVzdFhocklkID0gdGhpcy5fZnVsbFJlcXVlc3RJZDtcblxuICAgIGNvbnN0IGZ1bGxSZXF1ZXN0WGhyID0gdGhpcy5fbWFuYWdlci5nZXRSZXF1ZXN0WGhyKGZ1bGxSZXF1ZXN0WGhySWQpO1xuXG4gICAgY29uc3QgZ2V0UmVzcG9uc2VIZWFkZXIgPSBuYW1lID0+IHtcbiAgICAgIHJldHVybiBmdWxsUmVxdWVzdFhoci5nZXRSZXNwb25zZUhlYWRlcihuYW1lKTtcbiAgICB9O1xuXG4gICAgY29uc3Qge1xuICAgICAgYWxsb3dSYW5nZVJlcXVlc3RzLFxuICAgICAgc3VnZ2VzdGVkTGVuZ3RoXG4gICAgfSA9ICgwLCBfbmV0d29ya191dGlscy52YWxpZGF0ZVJhbmdlUmVxdWVzdENhcGFiaWxpdGllcykoe1xuICAgICAgZ2V0UmVzcG9uc2VIZWFkZXIsXG4gICAgICBpc0h0dHA6IHRoaXMuX21hbmFnZXIuaXNIdHRwLFxuICAgICAgcmFuZ2VDaHVua1NpemU6IHRoaXMuX3JhbmdlQ2h1bmtTaXplLFxuICAgICAgZGlzYWJsZVJhbmdlOiB0aGlzLl9kaXNhYmxlUmFuZ2VcbiAgICB9KTtcblxuICAgIGlmIChhbGxvd1JhbmdlUmVxdWVzdHMpIHtcbiAgICAgIHRoaXMuX2lzUmFuZ2VTdXBwb3J0ZWQgPSB0cnVlO1xuICAgIH1cblxuICAgIHRoaXMuX2NvbnRlbnRMZW5ndGggPSBzdWdnZXN0ZWRMZW5ndGggfHwgdGhpcy5fY29udGVudExlbmd0aDtcbiAgICB0aGlzLl9maWxlbmFtZSA9ICgwLCBfbmV0d29ya191dGlscy5leHRyYWN0RmlsZW5hbWVGcm9tSGVhZGVyKShnZXRSZXNwb25zZUhlYWRlcik7XG5cbiAgICBpZiAodGhpcy5faXNSYW5nZVN1cHBvcnRlZCkge1xuICAgICAgdGhpcy5fbWFuYWdlci5hYm9ydFJlcXVlc3QoZnVsbFJlcXVlc3RYaHJJZCk7XG4gICAgfVxuXG4gICAgdGhpcy5faGVhZGVyc1JlY2VpdmVkQ2FwYWJpbGl0eS5yZXNvbHZlKCk7XG4gIH1cblxuICBfb25Eb25lKGFyZ3MpIHtcbiAgICBpZiAoYXJncykge1xuICAgICAgaWYgKHRoaXMuX3JlcXVlc3RzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgY29uc3QgcmVxdWVzdENhcGFiaWxpdHkgPSB0aGlzLl9yZXF1ZXN0cy5zaGlmdCgpO1xuXG4gICAgICAgIHJlcXVlc3RDYXBhYmlsaXR5LnJlc29sdmUoe1xuICAgICAgICAgIHZhbHVlOiBhcmdzLmNodW5rLFxuICAgICAgICAgIGRvbmU6IGZhbHNlXG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5fY2FjaGVkQ2h1bmtzLnB1c2goYXJncy5jaHVuayk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdGhpcy5fZG9uZSA9IHRydWU7XG5cbiAgICBpZiAodGhpcy5fY2FjaGVkQ2h1bmtzLmxlbmd0aCA+IDApIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0aGlzLl9yZXF1ZXN0cy5mb3JFYWNoKGZ1bmN0aW9uIChyZXF1ZXN0Q2FwYWJpbGl0eSkge1xuICAgICAgcmVxdWVzdENhcGFiaWxpdHkucmVzb2x2ZSh7XG4gICAgICAgIHZhbHVlOiB1bmRlZmluZWQsXG4gICAgICAgIGRvbmU6IHRydWVcbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgdGhpcy5fcmVxdWVzdHMgPSBbXTtcbiAgfVxuXG4gIF9vbkVycm9yKHN0YXR1cykge1xuICAgIGNvbnN0IHVybCA9IHRoaXMuX3VybDtcbiAgICBjb25zdCBleGNlcHRpb24gPSAoMCwgX25ldHdvcmtfdXRpbHMuY3JlYXRlUmVzcG9uc2VTdGF0dXNFcnJvcikoc3RhdHVzLCB1cmwpO1xuICAgIHRoaXMuX3N0b3JlZEVycm9yID0gZXhjZXB0aW9uO1xuXG4gICAgdGhpcy5faGVhZGVyc1JlY2VpdmVkQ2FwYWJpbGl0eS5yZWplY3QoZXhjZXB0aW9uKTtcblxuICAgIHRoaXMuX3JlcXVlc3RzLmZvckVhY2goZnVuY3Rpb24gKHJlcXVlc3RDYXBhYmlsaXR5KSB7XG4gICAgICByZXF1ZXN0Q2FwYWJpbGl0eS5yZWplY3QoZXhjZXB0aW9uKTtcbiAgICB9KTtcblxuICAgIHRoaXMuX3JlcXVlc3RzID0gW107XG4gICAgdGhpcy5fY2FjaGVkQ2h1bmtzID0gW107XG4gIH1cblxuICBfb25Qcm9ncmVzcyhkYXRhKSB7XG4gICAgaWYgKHRoaXMub25Qcm9ncmVzcykge1xuICAgICAgdGhpcy5vblByb2dyZXNzKHtcbiAgICAgICAgbG9hZGVkOiBkYXRhLmxvYWRlZCxcbiAgICAgICAgdG90YWw6IGRhdGEubGVuZ3RoQ29tcHV0YWJsZSA/IGRhdGEudG90YWwgOiB0aGlzLl9jb250ZW50TGVuZ3RoXG4gICAgICB9KTtcbiAgICB9XG4gIH1cblxuICBnZXQgZmlsZW5hbWUoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2ZpbGVuYW1lO1xuICB9XG5cbiAgZ2V0IGlzUmFuZ2VTdXBwb3J0ZWQoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2lzUmFuZ2VTdXBwb3J0ZWQ7XG4gIH1cblxuICBnZXQgaXNTdHJlYW1pbmdTdXBwb3J0ZWQoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2lzU3RyZWFtaW5nU3VwcG9ydGVkO1xuICB9XG5cbiAgZ2V0IGNvbnRlbnRMZW5ndGgoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2NvbnRlbnRMZW5ndGg7XG4gIH1cblxuICBnZXQgaGVhZGVyc1JlYWR5KCkge1xuICAgIHJldHVybiB0aGlzLl9oZWFkZXJzUmVjZWl2ZWRDYXBhYmlsaXR5LnByb21pc2U7XG4gIH1cblxuICBhc3luYyByZWFkKCkge1xuICAgIGlmICh0aGlzLl9zdG9yZWRFcnJvcikge1xuICAgICAgdGhyb3cgdGhpcy5fc3RvcmVkRXJyb3I7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuX2NhY2hlZENodW5rcy5sZW5ndGggPiAwKSB7XG4gICAgICBjb25zdCBjaHVuayA9IHRoaXMuX2NhY2hlZENodW5rcy5zaGlmdCgpO1xuXG4gICAgICByZXR1cm4ge1xuICAgICAgICB2YWx1ZTogY2h1bmssXG4gICAgICAgIGRvbmU6IGZhbHNlXG4gICAgICB9O1xuICAgIH1cblxuICAgIGlmICh0aGlzLl9kb25lKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICB2YWx1ZTogdW5kZWZpbmVkLFxuICAgICAgICBkb25lOiB0cnVlXG4gICAgICB9O1xuICAgIH1cblxuICAgIGNvbnN0IHJlcXVlc3RDYXBhYmlsaXR5ID0gKDAsIF91dGlsLmNyZWF0ZVByb21pc2VDYXBhYmlsaXR5KSgpO1xuXG4gICAgdGhpcy5fcmVxdWVzdHMucHVzaChyZXF1ZXN0Q2FwYWJpbGl0eSk7XG5cbiAgICByZXR1cm4gcmVxdWVzdENhcGFiaWxpdHkucHJvbWlzZTtcbiAgfVxuXG4gIGNhbmNlbChyZWFzb24pIHtcbiAgICB0aGlzLl9kb25lID0gdHJ1ZTtcblxuICAgIHRoaXMuX2hlYWRlcnNSZWNlaXZlZENhcGFiaWxpdHkucmVqZWN0KHJlYXNvbik7XG5cbiAgICB0aGlzLl9yZXF1ZXN0cy5mb3JFYWNoKGZ1bmN0aW9uIChyZXF1ZXN0Q2FwYWJpbGl0eSkge1xuICAgICAgcmVxdWVzdENhcGFiaWxpdHkucmVzb2x2ZSh7XG4gICAgICAgIHZhbHVlOiB1bmRlZmluZWQsXG4gICAgICAgIGRvbmU6IHRydWVcbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgdGhpcy5fcmVxdWVzdHMgPSBbXTtcblxuICAgIGlmICh0aGlzLl9tYW5hZ2VyLmlzUGVuZGluZ1JlcXVlc3QodGhpcy5fZnVsbFJlcXVlc3RJZCkpIHtcbiAgICAgIHRoaXMuX21hbmFnZXIuYWJvcnRSZXF1ZXN0KHRoaXMuX2Z1bGxSZXF1ZXN0SWQpO1xuICAgIH1cblxuICAgIHRoaXMuX2Z1bGxSZXF1ZXN0UmVhZGVyID0gbnVsbDtcbiAgfVxuXG59XG5cbmNsYXNzIFBERk5ldHdvcmtTdHJlYW1SYW5nZVJlcXVlc3RSZWFkZXIge1xuICBjb25zdHJ1Y3RvcihtYW5hZ2VyLCBiZWdpbiwgZW5kKSB7XG4gICAgdGhpcy5fbWFuYWdlciA9IG1hbmFnZXI7XG4gICAgY29uc3QgYXJncyA9IHtcbiAgICAgIG9uRG9uZTogdGhpcy5fb25Eb25lLmJpbmQodGhpcyksXG4gICAgICBvblByb2dyZXNzOiB0aGlzLl9vblByb2dyZXNzLmJpbmQodGhpcylcbiAgICB9O1xuICAgIHRoaXMuX3JlcXVlc3RJZCA9IG1hbmFnZXIucmVxdWVzdFJhbmdlKGJlZ2luLCBlbmQsIGFyZ3MpO1xuICAgIHRoaXMuX3JlcXVlc3RzID0gW107XG4gICAgdGhpcy5fcXVldWVkQ2h1bmsgPSBudWxsO1xuICAgIHRoaXMuX2RvbmUgPSBmYWxzZTtcbiAgICB0aGlzLm9uUHJvZ3Jlc3MgPSBudWxsO1xuICAgIHRoaXMub25DbG9zZWQgPSBudWxsO1xuICB9XG5cbiAgX2Nsb3NlKCkge1xuICAgIGlmICh0aGlzLm9uQ2xvc2VkKSB7XG4gICAgICB0aGlzLm9uQ2xvc2VkKHRoaXMpO1xuICAgIH1cbiAgfVxuXG4gIF9vbkRvbmUoZGF0YSkge1xuICAgIGNvbnN0IGNodW5rID0gZGF0YS5jaHVuaztcblxuICAgIGlmICh0aGlzLl9yZXF1ZXN0cy5sZW5ndGggPiAwKSB7XG4gICAgICBjb25zdCByZXF1ZXN0Q2FwYWJpbGl0eSA9IHRoaXMuX3JlcXVlc3RzLnNoaWZ0KCk7XG5cbiAgICAgIHJlcXVlc3RDYXBhYmlsaXR5LnJlc29sdmUoe1xuICAgICAgICB2YWx1ZTogY2h1bmssXG4gICAgICAgIGRvbmU6IGZhbHNlXG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5fcXVldWVkQ2h1bmsgPSBjaHVuaztcbiAgICB9XG5cbiAgICB0aGlzLl9kb25lID0gdHJ1ZTtcblxuICAgIHRoaXMuX3JlcXVlc3RzLmZvckVhY2goZnVuY3Rpb24gKHJlcXVlc3RDYXBhYmlsaXR5KSB7XG4gICAgICByZXF1ZXN0Q2FwYWJpbGl0eS5yZXNvbHZlKHtcbiAgICAgICAgdmFsdWU6IHVuZGVmaW5lZCxcbiAgICAgICAgZG9uZTogdHJ1ZVxuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICB0aGlzLl9yZXF1ZXN0cyA9IFtdO1xuXG4gICAgdGhpcy5fY2xvc2UoKTtcbiAgfVxuXG4gIF9vblByb2dyZXNzKGV2dCkge1xuICAgIGlmICghdGhpcy5pc1N0cmVhbWluZ1N1cHBvcnRlZCAmJiB0aGlzLm9uUHJvZ3Jlc3MpIHtcbiAgICAgIHRoaXMub25Qcm9ncmVzcyh7XG4gICAgICAgIGxvYWRlZDogZXZ0LmxvYWRlZFxuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgZ2V0IGlzU3RyZWFtaW5nU3VwcG9ydGVkKCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIGFzeW5jIHJlYWQoKSB7XG4gICAgaWYgKHRoaXMuX3F1ZXVlZENodW5rICE9PSBudWxsKSB7XG4gICAgICBjb25zdCBjaHVuayA9IHRoaXMuX3F1ZXVlZENodW5rO1xuICAgICAgdGhpcy5fcXVldWVkQ2h1bmsgPSBudWxsO1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgdmFsdWU6IGNodW5rLFxuICAgICAgICBkb25lOiBmYWxzZVxuICAgICAgfTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5fZG9uZSkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgdmFsdWU6IHVuZGVmaW5lZCxcbiAgICAgICAgZG9uZTogdHJ1ZVxuICAgICAgfTtcbiAgICB9XG5cbiAgICBjb25zdCByZXF1ZXN0Q2FwYWJpbGl0eSA9ICgwLCBfdXRpbC5jcmVhdGVQcm9taXNlQ2FwYWJpbGl0eSkoKTtcblxuICAgIHRoaXMuX3JlcXVlc3RzLnB1c2gocmVxdWVzdENhcGFiaWxpdHkpO1xuXG4gICAgcmV0dXJuIHJlcXVlc3RDYXBhYmlsaXR5LnByb21pc2U7XG4gIH1cblxuICBjYW5jZWwocmVhc29uKSB7XG4gICAgdGhpcy5fZG9uZSA9IHRydWU7XG5cbiAgICB0aGlzLl9yZXF1ZXN0cy5mb3JFYWNoKGZ1bmN0aW9uIChyZXF1ZXN0Q2FwYWJpbGl0eSkge1xuICAgICAgcmVxdWVzdENhcGFiaWxpdHkucmVzb2x2ZSh7XG4gICAgICAgIHZhbHVlOiB1bmRlZmluZWQsXG4gICAgICAgIGRvbmU6IHRydWVcbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgdGhpcy5fcmVxdWVzdHMgPSBbXTtcblxuICAgIGlmICh0aGlzLl9tYW5hZ2VyLmlzUGVuZGluZ1JlcXVlc3QodGhpcy5fcmVxdWVzdElkKSkge1xuICAgICAgdGhpcy5fbWFuYWdlci5hYm9ydFJlcXVlc3QodGhpcy5fcmVxdWVzdElkKTtcbiAgICB9XG5cbiAgICB0aGlzLl9jbG9zZSgpO1xuICB9XG5cbn1cblxuLyoqKi8gfSksXG4vKiAyMyAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193X3BkZmpzX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5QREZGZXRjaFN0cmVhbSA9IHZvaWQgMDtcblxudmFyIF91dGlsID0gX193X3BkZmpzX3JlcXVpcmVfXygyKTtcblxudmFyIF9uZXR3b3JrX3V0aWxzID0gX193X3BkZmpzX3JlcXVpcmVfXygyMCk7XG5cbjtcblxuZnVuY3Rpb24gY3JlYXRlRmV0Y2hPcHRpb25zKGhlYWRlcnMsIHdpdGhDcmVkZW50aWFscywgYWJvcnRDb250cm9sbGVyKSB7XG4gIHJldHVybiB7XG4gICAgbWV0aG9kOiBcIkdFVFwiLFxuICAgIGhlYWRlcnMsXG4gICAgc2lnbmFsOiBhYm9ydENvbnRyb2xsZXIgJiYgYWJvcnRDb250cm9sbGVyLnNpZ25hbCxcbiAgICBtb2RlOiBcImNvcnNcIixcbiAgICBjcmVkZW50aWFsczogd2l0aENyZWRlbnRpYWxzID8gXCJpbmNsdWRlXCIgOiBcInNhbWUtb3JpZ2luXCIsXG4gICAgcmVkaXJlY3Q6IFwiZm9sbG93XCJcbiAgfTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlSGVhZGVycyhodHRwSGVhZGVycykge1xuICBjb25zdCBoZWFkZXJzID0gbmV3IEhlYWRlcnMoKTtcblxuICBmb3IgKGNvbnN0IHByb3BlcnR5IGluIGh0dHBIZWFkZXJzKSB7XG4gICAgY29uc3QgdmFsdWUgPSBodHRwSGVhZGVyc1twcm9wZXJ0eV07XG5cbiAgICBpZiAodHlwZW9mIHZhbHVlID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG5cbiAgICBoZWFkZXJzLmFwcGVuZChwcm9wZXJ0eSwgdmFsdWUpO1xuICB9XG5cbiAgcmV0dXJuIGhlYWRlcnM7XG59XG5cbmNsYXNzIFBERkZldGNoU3RyZWFtIHtcbiAgY29uc3RydWN0b3Ioc291cmNlKSB7XG4gICAgdGhpcy5zb3VyY2UgPSBzb3VyY2U7XG4gICAgdGhpcy5pc0h0dHAgPSAvXmh0dHBzPzovaS50ZXN0KHNvdXJjZS51cmwpO1xuICAgIHRoaXMuaHR0cEhlYWRlcnMgPSB0aGlzLmlzSHR0cCAmJiBzb3VyY2UuaHR0cEhlYWRlcnMgfHwge307XG4gICAgdGhpcy5fZnVsbFJlcXVlc3RSZWFkZXIgPSBudWxsO1xuICAgIHRoaXMuX3JhbmdlUmVxdWVzdFJlYWRlcnMgPSBbXTtcbiAgfVxuXG4gIGdldCBfcHJvZ3Jlc3NpdmVEYXRhTGVuZ3RoKCkge1xuICAgIHJldHVybiB0aGlzLl9mdWxsUmVxdWVzdFJlYWRlciA/IHRoaXMuX2Z1bGxSZXF1ZXN0UmVhZGVyLl9sb2FkZWQgOiAwO1xuICB9XG5cbiAgZ2V0RnVsbFJlYWRlcigpIHtcbiAgICAoMCwgX3V0aWwuYXNzZXJ0KSghdGhpcy5fZnVsbFJlcXVlc3RSZWFkZXIsIFwiUERGRmV0Y2hTdHJlYW0uZ2V0RnVsbFJlYWRlciBjYW4gb25seSBiZSBjYWxsZWQgb25jZS5cIik7XG4gICAgdGhpcy5fZnVsbFJlcXVlc3RSZWFkZXIgPSBuZXcgUERGRmV0Y2hTdHJlYW1SZWFkZXIodGhpcyk7XG4gICAgcmV0dXJuIHRoaXMuX2Z1bGxSZXF1ZXN0UmVhZGVyO1xuICB9XG5cbiAgZ2V0UmFuZ2VSZWFkZXIoYmVnaW4sIGVuZCkge1xuICAgIGlmIChlbmQgPD0gdGhpcy5fcHJvZ3Jlc3NpdmVEYXRhTGVuZ3RoKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICBjb25zdCByZWFkZXIgPSBuZXcgUERGRmV0Y2hTdHJlYW1SYW5nZVJlYWRlcih0aGlzLCBiZWdpbiwgZW5kKTtcblxuICAgIHRoaXMuX3JhbmdlUmVxdWVzdFJlYWRlcnMucHVzaChyZWFkZXIpO1xuXG4gICAgcmV0dXJuIHJlYWRlcjtcbiAgfVxuXG4gIGNhbmNlbEFsbFJlcXVlc3RzKHJlYXNvbikge1xuICAgIGlmICh0aGlzLl9mdWxsUmVxdWVzdFJlYWRlcikge1xuICAgICAgdGhpcy5fZnVsbFJlcXVlc3RSZWFkZXIuY2FuY2VsKHJlYXNvbik7XG4gICAgfVxuXG4gICAgY29uc3QgcmVhZGVycyA9IHRoaXMuX3JhbmdlUmVxdWVzdFJlYWRlcnMuc2xpY2UoMCk7XG5cbiAgICByZWFkZXJzLmZvckVhY2goZnVuY3Rpb24gKHJlYWRlcikge1xuICAgICAgcmVhZGVyLmNhbmNlbChyZWFzb24pO1xuICAgIH0pO1xuICB9XG5cbn1cblxuZXhwb3J0cy5QREZGZXRjaFN0cmVhbSA9IFBERkZldGNoU3RyZWFtO1xuXG5jbGFzcyBQREZGZXRjaFN0cmVhbVJlYWRlciB7XG4gIGNvbnN0cnVjdG9yKHN0cmVhbSkge1xuICAgIHRoaXMuX3N0cmVhbSA9IHN0cmVhbTtcbiAgICB0aGlzLl9yZWFkZXIgPSBudWxsO1xuICAgIHRoaXMuX2xvYWRlZCA9IDA7XG4gICAgdGhpcy5fZmlsZW5hbWUgPSBudWxsO1xuICAgIGNvbnN0IHNvdXJjZSA9IHN0cmVhbS5zb3VyY2U7XG4gICAgdGhpcy5fd2l0aENyZWRlbnRpYWxzID0gc291cmNlLndpdGhDcmVkZW50aWFscyB8fCBmYWxzZTtcbiAgICB0aGlzLl9jb250ZW50TGVuZ3RoID0gc291cmNlLmxlbmd0aDtcbiAgICB0aGlzLl9oZWFkZXJzQ2FwYWJpbGl0eSA9ICgwLCBfdXRpbC5jcmVhdGVQcm9taXNlQ2FwYWJpbGl0eSkoKTtcbiAgICB0aGlzLl9kaXNhYmxlUmFuZ2UgPSBzb3VyY2UuZGlzYWJsZVJhbmdlIHx8IGZhbHNlO1xuICAgIHRoaXMuX3JhbmdlQ2h1bmtTaXplID0gc291cmNlLnJhbmdlQ2h1bmtTaXplO1xuXG4gICAgaWYgKCF0aGlzLl9yYW5nZUNodW5rU2l6ZSAmJiAhdGhpcy5fZGlzYWJsZVJhbmdlKSB7XG4gICAgICB0aGlzLl9kaXNhYmxlUmFuZ2UgPSB0cnVlO1xuICAgIH1cblxuICAgIGlmICh0eXBlb2YgQWJvcnRDb250cm9sbGVyICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICB0aGlzLl9hYm9ydENvbnRyb2xsZXIgPSBuZXcgQWJvcnRDb250cm9sbGVyKCk7XG4gICAgfVxuXG4gICAgdGhpcy5faXNTdHJlYW1pbmdTdXBwb3J0ZWQgPSAhc291cmNlLmRpc2FibGVTdHJlYW07XG4gICAgdGhpcy5faXNSYW5nZVN1cHBvcnRlZCA9ICFzb3VyY2UuZGlzYWJsZVJhbmdlO1xuICAgIHRoaXMuX2hlYWRlcnMgPSBjcmVhdGVIZWFkZXJzKHRoaXMuX3N0cmVhbS5odHRwSGVhZGVycyk7XG4gICAgY29uc3QgdXJsID0gc291cmNlLnVybDtcbiAgICBmZXRjaCh1cmwsIGNyZWF0ZUZldGNoT3B0aW9ucyh0aGlzLl9oZWFkZXJzLCB0aGlzLl93aXRoQ3JlZGVudGlhbHMsIHRoaXMuX2Fib3J0Q29udHJvbGxlcikpLnRoZW4ocmVzcG9uc2UgPT4ge1xuICAgICAgaWYgKCEoMCwgX25ldHdvcmtfdXRpbHMudmFsaWRhdGVSZXNwb25zZVN0YXR1cykocmVzcG9uc2Uuc3RhdHVzKSkge1xuICAgICAgICB0aHJvdyAoMCwgX25ldHdvcmtfdXRpbHMuY3JlYXRlUmVzcG9uc2VTdGF0dXNFcnJvcikocmVzcG9uc2Uuc3RhdHVzLCB1cmwpO1xuICAgICAgfVxuXG4gICAgICB0aGlzLl9yZWFkZXIgPSByZXNwb25zZS5ib2R5LmdldFJlYWRlcigpO1xuXG4gICAgICB0aGlzLl9oZWFkZXJzQ2FwYWJpbGl0eS5yZXNvbHZlKCk7XG5cbiAgICAgIGNvbnN0IGdldFJlc3BvbnNlSGVhZGVyID0gbmFtZSA9PiB7XG4gICAgICAgIHJldHVybiByZXNwb25zZS5oZWFkZXJzLmdldChuYW1lKTtcbiAgICAgIH07XG5cbiAgICAgIGNvbnN0IHtcbiAgICAgICAgYWxsb3dSYW5nZVJlcXVlc3RzLFxuICAgICAgICBzdWdnZXN0ZWRMZW5ndGhcbiAgICAgIH0gPSAoMCwgX25ldHdvcmtfdXRpbHMudmFsaWRhdGVSYW5nZVJlcXVlc3RDYXBhYmlsaXRpZXMpKHtcbiAgICAgICAgZ2V0UmVzcG9uc2VIZWFkZXIsXG4gICAgICAgIGlzSHR0cDogdGhpcy5fc3RyZWFtLmlzSHR0cCxcbiAgICAgICAgcmFuZ2VDaHVua1NpemU6IHRoaXMuX3JhbmdlQ2h1bmtTaXplLFxuICAgICAgICBkaXNhYmxlUmFuZ2U6IHRoaXMuX2Rpc2FibGVSYW5nZVxuICAgICAgfSk7XG4gICAgICB0aGlzLl9pc1JhbmdlU3VwcG9ydGVkID0gYWxsb3dSYW5nZVJlcXVlc3RzO1xuICAgICAgdGhpcy5fY29udGVudExlbmd0aCA9IHN1Z2dlc3RlZExlbmd0aCB8fCB0aGlzLl9jb250ZW50TGVuZ3RoO1xuICAgICAgdGhpcy5fZmlsZW5hbWUgPSAoMCwgX25ldHdvcmtfdXRpbHMuZXh0cmFjdEZpbGVuYW1lRnJvbUhlYWRlcikoZ2V0UmVzcG9uc2VIZWFkZXIpO1xuXG4gICAgICBpZiAoIXRoaXMuX2lzU3RyZWFtaW5nU3VwcG9ydGVkICYmIHRoaXMuX2lzUmFuZ2VTdXBwb3J0ZWQpIHtcbiAgICAgICAgdGhpcy5jYW5jZWwobmV3IF91dGlsLkFib3J0RXhjZXB0aW9uKFwiU3RyZWFtaW5nIGlzIGRpc2FibGVkLlwiKSk7XG4gICAgICB9XG4gICAgfSkuY2F0Y2godGhpcy5faGVhZGVyc0NhcGFiaWxpdHkucmVqZWN0KTtcbiAgICB0aGlzLm9uUHJvZ3Jlc3MgPSBudWxsO1xuICB9XG5cbiAgZ2V0IGhlYWRlcnNSZWFkeSgpIHtcbiAgICByZXR1cm4gdGhpcy5faGVhZGVyc0NhcGFiaWxpdHkucHJvbWlzZTtcbiAgfVxuXG4gIGdldCBmaWxlbmFtZSgpIHtcbiAgICByZXR1cm4gdGhpcy5fZmlsZW5hbWU7XG4gIH1cblxuICBnZXQgY29udGVudExlbmd0aCgpIHtcbiAgICByZXR1cm4gdGhpcy5fY29udGVudExlbmd0aDtcbiAgfVxuXG4gIGdldCBpc1JhbmdlU3VwcG9ydGVkKCkge1xuICAgIHJldHVybiB0aGlzLl9pc1JhbmdlU3VwcG9ydGVkO1xuICB9XG5cbiAgZ2V0IGlzU3RyZWFtaW5nU3VwcG9ydGVkKCkge1xuICAgIHJldHVybiB0aGlzLl9pc1N0cmVhbWluZ1N1cHBvcnRlZDtcbiAgfVxuXG4gIGFzeW5jIHJlYWQoKSB7XG4gICAgYXdhaXQgdGhpcy5faGVhZGVyc0NhcGFiaWxpdHkucHJvbWlzZTtcbiAgICBjb25zdCB7XG4gICAgICB2YWx1ZSxcbiAgICAgIGRvbmVcbiAgICB9ID0gYXdhaXQgdGhpcy5fcmVhZGVyLnJlYWQoKTtcblxuICAgIGlmIChkb25lKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICB2YWx1ZSxcbiAgICAgICAgZG9uZVxuICAgICAgfTtcbiAgICB9XG5cbiAgICB0aGlzLl9sb2FkZWQgKz0gdmFsdWUuYnl0ZUxlbmd0aDtcblxuICAgIGlmICh0aGlzLm9uUHJvZ3Jlc3MpIHtcbiAgICAgIHRoaXMub25Qcm9ncmVzcyh7XG4gICAgICAgIGxvYWRlZDogdGhpcy5fbG9hZGVkLFxuICAgICAgICB0b3RhbDogdGhpcy5fY29udGVudExlbmd0aFxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgY29uc3QgYnVmZmVyID0gbmV3IFVpbnQ4QXJyYXkodmFsdWUpLmJ1ZmZlcjtcbiAgICByZXR1cm4ge1xuICAgICAgdmFsdWU6IGJ1ZmZlcixcbiAgICAgIGRvbmU6IGZhbHNlXG4gICAgfTtcbiAgfVxuXG4gIGNhbmNlbChyZWFzb24pIHtcbiAgICBpZiAodGhpcy5fcmVhZGVyKSB7XG4gICAgICB0aGlzLl9yZWFkZXIuY2FuY2VsKHJlYXNvbik7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuX2Fib3J0Q29udHJvbGxlcikge1xuICAgICAgdGhpcy5fYWJvcnRDb250cm9sbGVyLmFib3J0KCk7XG4gICAgfVxuICB9XG5cbn1cblxuY2xhc3MgUERGRmV0Y2hTdHJlYW1SYW5nZVJlYWRlciB7XG4gIGNvbnN0cnVjdG9yKHN0cmVhbSwgYmVnaW4sIGVuZCkge1xuICAgIHRoaXMuX3N0cmVhbSA9IHN0cmVhbTtcbiAgICB0aGlzLl9yZWFkZXIgPSBudWxsO1xuICAgIHRoaXMuX2xvYWRlZCA9IDA7XG4gICAgY29uc3Qgc291cmNlID0gc3RyZWFtLnNvdXJjZTtcbiAgICB0aGlzLl93aXRoQ3JlZGVudGlhbHMgPSBzb3VyY2Uud2l0aENyZWRlbnRpYWxzIHx8IGZhbHNlO1xuICAgIHRoaXMuX3JlYWRDYXBhYmlsaXR5ID0gKDAsIF91dGlsLmNyZWF0ZVByb21pc2VDYXBhYmlsaXR5KSgpO1xuICAgIHRoaXMuX2lzU3RyZWFtaW5nU3VwcG9ydGVkID0gIXNvdXJjZS5kaXNhYmxlU3RyZWFtO1xuXG4gICAgaWYgKHR5cGVvZiBBYm9ydENvbnRyb2xsZXIgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIHRoaXMuX2Fib3J0Q29udHJvbGxlciA9IG5ldyBBYm9ydENvbnRyb2xsZXIoKTtcbiAgICB9XG5cbiAgICB0aGlzLl9oZWFkZXJzID0gY3JlYXRlSGVhZGVycyh0aGlzLl9zdHJlYW0uaHR0cEhlYWRlcnMpO1xuXG4gICAgdGhpcy5faGVhZGVycy5hcHBlbmQoXCJSYW5nZVwiLCBgYnl0ZXM9JHtiZWdpbn0tJHtlbmQgLSAxfWApO1xuXG4gICAgY29uc3QgdXJsID0gc291cmNlLnVybDtcbiAgICBmZXRjaCh1cmwsIGNyZWF0ZUZldGNoT3B0aW9ucyh0aGlzLl9oZWFkZXJzLCB0aGlzLl93aXRoQ3JlZGVudGlhbHMsIHRoaXMuX2Fib3J0Q29udHJvbGxlcikpLnRoZW4ocmVzcG9uc2UgPT4ge1xuICAgICAgaWYgKCEoMCwgX25ldHdvcmtfdXRpbHMudmFsaWRhdGVSZXNwb25zZVN0YXR1cykocmVzcG9uc2Uuc3RhdHVzKSkge1xuICAgICAgICB0aHJvdyAoMCwgX25ldHdvcmtfdXRpbHMuY3JlYXRlUmVzcG9uc2VTdGF0dXNFcnJvcikocmVzcG9uc2Uuc3RhdHVzLCB1cmwpO1xuICAgICAgfVxuXG4gICAgICB0aGlzLl9yZWFkQ2FwYWJpbGl0eS5yZXNvbHZlKCk7XG5cbiAgICAgIHRoaXMuX3JlYWRlciA9IHJlc3BvbnNlLmJvZHkuZ2V0UmVhZGVyKCk7XG4gICAgfSk7XG4gICAgdGhpcy5vblByb2dyZXNzID0gbnVsbDtcbiAgfVxuXG4gIGdldCBpc1N0cmVhbWluZ1N1cHBvcnRlZCgpIHtcbiAgICByZXR1cm4gdGhpcy5faXNTdHJlYW1pbmdTdXBwb3J0ZWQ7XG4gIH1cblxuICBhc3luYyByZWFkKCkge1xuICAgIGF3YWl0IHRoaXMuX3JlYWRDYXBhYmlsaXR5LnByb21pc2U7XG4gICAgY29uc3Qge1xuICAgICAgdmFsdWUsXG4gICAgICBkb25lXG4gICAgfSA9IGF3YWl0IHRoaXMuX3JlYWRlci5yZWFkKCk7XG5cbiAgICBpZiAoZG9uZSkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgdmFsdWUsXG4gICAgICAgIGRvbmVcbiAgICAgIH07XG4gICAgfVxuXG4gICAgdGhpcy5fbG9hZGVkICs9IHZhbHVlLmJ5dGVMZW5ndGg7XG5cbiAgICBpZiAodGhpcy5vblByb2dyZXNzKSB7XG4gICAgICB0aGlzLm9uUHJvZ3Jlc3Moe1xuICAgICAgICBsb2FkZWQ6IHRoaXMuX2xvYWRlZFxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgY29uc3QgYnVmZmVyID0gbmV3IFVpbnQ4QXJyYXkodmFsdWUpLmJ1ZmZlcjtcbiAgICByZXR1cm4ge1xuICAgICAgdmFsdWU6IGJ1ZmZlcixcbiAgICAgIGRvbmU6IGZhbHNlXG4gICAgfTtcbiAgfVxuXG4gIGNhbmNlbChyZWFzb24pIHtcbiAgICBpZiAodGhpcy5fcmVhZGVyKSB7XG4gICAgICB0aGlzLl9yZWFkZXIuY2FuY2VsKHJlYXNvbik7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuX2Fib3J0Q29udHJvbGxlcikge1xuICAgICAgdGhpcy5fYWJvcnRDb250cm9sbGVyLmFib3J0KCk7XG4gICAgfVxuICB9XG5cbn1cblxuLyoqKi8gfSlcbi8qKioqKiovIF0pO1xufSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1wZGYuanMubWFwIiwiaW1wb3J0e29wdGlvbnMgYXMgbn1mcm9tXCJwcmVhY3RcIjt2YXIgdCx1LHIsbz0wLGk9W10sYz1uLl9fYixmPW4uX19yLGU9bi5kaWZmZWQsYT1uLl9fYyx2PW4udW5tb3VudDtmdW5jdGlvbiBtKHQscil7bi5fX2gmJm4uX19oKHUsdCxvfHxyKSxvPTA7dmFyIGk9dS5fX0h8fCh1Ll9fSD17X186W10sX19oOltdfSk7cmV0dXJuIHQ+PWkuX18ubGVuZ3RoJiZpLl9fLnB1c2goe30pLGkuX19bdF19ZnVuY3Rpb24gbChuKXtyZXR1cm4gbz0xLHAodyxuKX1mdW5jdGlvbiBwKG4scixvKXt2YXIgaT1tKHQrKywyKTtyZXR1cm4gaS50PW4saS5fX2N8fChpLl9fPVtvP28ocik6dyh2b2lkIDAsciksZnVuY3Rpb24obil7dmFyIHQ9aS50KGkuX19bMF0sbik7aS5fX1swXSE9PXQmJihpLl9fPVt0LGkuX19bMV1dLGkuX19jLnNldFN0YXRlKHt9KSl9XSxpLl9fYz11KSxpLl9ffWZ1bmN0aW9uIHkocixvKXt2YXIgaT1tKHQrKywzKTshbi5fX3MmJmsoaS5fX0gsbykmJihpLl9fPXIsaS5fX0g9byx1Ll9fSC5fX2gucHVzaChpKSl9ZnVuY3Rpb24gaChyLG8pe3ZhciBpPW0odCsrLDQpOyFuLl9fcyYmayhpLl9fSCxvKSYmKGkuX189cixpLl9fSD1vLHUuX19oLnB1c2goaSkpfWZ1bmN0aW9uIHMobil7cmV0dXJuIG89NSxkKGZ1bmN0aW9uKCl7cmV0dXJue2N1cnJlbnQ6bn19LFtdKX1mdW5jdGlvbiBfKG4sdCx1KXtvPTYsaChmdW5jdGlvbigpe1wiZnVuY3Rpb25cIj09dHlwZW9mIG4/bih0KCkpOm4mJihuLmN1cnJlbnQ9dCgpKX0sbnVsbD09dT91OnUuY29uY2F0KG4pKX1mdW5jdGlvbiBkKG4sdSl7dmFyIHI9bSh0KyssNyk7cmV0dXJuIGsoci5fX0gsdSkmJihyLl9fPW4oKSxyLl9fSD11LHIuX19oPW4pLHIuX199ZnVuY3Rpb24gQShuLHQpe3JldHVybiBvPTgsZChmdW5jdGlvbigpe3JldHVybiBufSx0KX1mdW5jdGlvbiBGKG4pe3ZhciByPXUuY29udGV4dFtuLl9fY10sbz1tKHQrKyw5KTtyZXR1cm4gby5fX2M9bixyPyhudWxsPT1vLl9fJiYoby5fXz0hMCxyLnN1Yih1KSksci5wcm9wcy52YWx1ZSk6bi5fX31mdW5jdGlvbiBUKHQsdSl7bi51c2VEZWJ1Z1ZhbHVlJiZuLnVzZURlYnVnVmFsdWUodT91KHQpOnQpfWZ1bmN0aW9uIHEobil7dmFyIHI9bSh0KyssMTApLG89bCgpO3JldHVybiByLl9fPW4sdS5jb21wb25lbnREaWRDYXRjaHx8KHUuY29tcG9uZW50RGlkQ2F0Y2g9ZnVuY3Rpb24obil7ci5fXyYmci5fXyhuKSxvWzFdKG4pfSksW29bMF0sZnVuY3Rpb24oKXtvWzFdKHZvaWQgMCl9XX1mdW5jdGlvbiB4KCl7aS5mb3JFYWNoKGZ1bmN0aW9uKHQpe2lmKHQuX19QKXRyeXt0Ll9fSC5fX2guZm9yRWFjaChnKSx0Ll9fSC5fX2guZm9yRWFjaChqKSx0Ll9fSC5fX2g9W119Y2F0Y2godSl7dC5fX0guX19oPVtdLG4uX19lKHUsdC5fX3YpfX0pLGk9W119bi5fX2I9ZnVuY3Rpb24obil7dT1udWxsLGMmJmMobil9LG4uX19yPWZ1bmN0aW9uKG4pe2YmJmYobiksdD0wO3ZhciByPSh1PW4uX19jKS5fX0g7ciYmKHIuX19oLmZvckVhY2goZyksci5fX2guZm9yRWFjaChqKSxyLl9faD1bXSl9LG4uZGlmZmVkPWZ1bmN0aW9uKHQpe2UmJmUodCk7dmFyIG89dC5fX2M7byYmby5fX0gmJm8uX19ILl9faC5sZW5ndGgmJigxIT09aS5wdXNoKG8pJiZyPT09bi5yZXF1ZXN0QW5pbWF0aW9uRnJhbWV8fCgocj1uLnJlcXVlc3RBbmltYXRpb25GcmFtZSl8fGZ1bmN0aW9uKG4pe3ZhciB0LHU9ZnVuY3Rpb24oKXtjbGVhclRpbWVvdXQociksYiYmY2FuY2VsQW5pbWF0aW9uRnJhbWUodCksc2V0VGltZW91dChuKX0scj1zZXRUaW1lb3V0KHUsMTAwKTtiJiYodD1yZXF1ZXN0QW5pbWF0aW9uRnJhbWUodSkpfSkoeCkpLHU9dm9pZCAwfSxuLl9fYz1mdW5jdGlvbih0LHUpe3Uuc29tZShmdW5jdGlvbih0KXt0cnl7dC5fX2guZm9yRWFjaChnKSx0Ll9faD10Ll9faC5maWx0ZXIoZnVuY3Rpb24obil7cmV0dXJuIW4uX198fGoobil9KX1jYXRjaChyKXt1LnNvbWUoZnVuY3Rpb24obil7bi5fX2gmJihuLl9faD1bXSl9KSx1PVtdLG4uX19lKHIsdC5fX3YpfX0pLGEmJmEodCx1KX0sbi51bm1vdW50PWZ1bmN0aW9uKHQpe3YmJnYodCk7dmFyIHU9dC5fX2M7aWYodSYmdS5fX0gpdHJ5e3UuX19ILl9fLmZvckVhY2goZyl9Y2F0Y2godCl7bi5fX2UodCx1Ll9fdil9fTt2YXIgYj1cImZ1bmN0aW9uXCI9PXR5cGVvZiByZXF1ZXN0QW5pbWF0aW9uRnJhbWU7ZnVuY3Rpb24gZyhuKXt2YXIgdD11O1wiZnVuY3Rpb25cIj09dHlwZW9mIG4uX19jJiZuLl9fYygpLHU9dH1mdW5jdGlvbiBqKG4pe3ZhciB0PXU7bi5fX2M9bi5fXygpLHU9dH1mdW5jdGlvbiBrKG4sdCl7cmV0dXJuIW58fG4ubGVuZ3RoIT09dC5sZW5ndGh8fHQuc29tZShmdW5jdGlvbih0LHUpe3JldHVybiB0IT09blt1XX0pfWZ1bmN0aW9uIHcobix0KXtyZXR1cm5cImZ1bmN0aW9uXCI9PXR5cGVvZiB0P3Qobik6dH1leHBvcnR7bCBhcyB1c2VTdGF0ZSxwIGFzIHVzZVJlZHVjZXIseSBhcyB1c2VFZmZlY3QsaCBhcyB1c2VMYXlvdXRFZmZlY3QscyBhcyB1c2VSZWYsXyBhcyB1c2VJbXBlcmF0aXZlSGFuZGxlLGQgYXMgdXNlTWVtbyxBIGFzIHVzZUNhbGxiYWNrLEYgYXMgdXNlQ29udGV4dCxUIGFzIHVzZURlYnVnVmFsdWUscSBhcyB1c2VFcnJvckJvdW5kYXJ5fTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWhvb2tzLm1vZHVsZS5qcy5tYXBcbiIsImltcG9ydHt1c2VTdGF0ZSBhcyBuLHVzZVJlZHVjZXIgYXMgdCx1c2VFZmZlY3QgYXMgZSx1c2VMYXlvdXRFZmZlY3QgYXMgcix1c2VSZWYgYXMgdSx1c2VJbXBlcmF0aXZlSGFuZGxlIGFzIG8sdXNlTWVtbyBhcyBpLHVzZUNhbGxiYWNrIGFzIGwsdXNlQ29udGV4dCBhcyBjLHVzZURlYnVnVmFsdWUgYXMgZn1mcm9tXCJwcmVhY3QvaG9va3NcIjtleHBvcnQqZnJvbVwicHJlYWN0L2hvb2tzXCI7aW1wb3J0e0NvbXBvbmVudCBhcyBhLGNyZWF0ZUVsZW1lbnQgYXMgcyxvcHRpb25zIGFzIGgsdG9DaGlsZEFycmF5IGFzIHAsRnJhZ21lbnQgYXMgZCxyZW5kZXIgYXMgdixoeWRyYXRlIGFzIG0sY2xvbmVFbGVtZW50IGFzIHksY3JlYXRlUmVmIGFzIGIsY3JlYXRlQ29udGV4dCBhcyBffWZyb21cInByZWFjdFwiO2V4cG9ydHtjcmVhdGVFbGVtZW50LGNyZWF0ZUNvbnRleHQsY3JlYXRlUmVmLEZyYWdtZW50LENvbXBvbmVudH1mcm9tXCJwcmVhY3RcIjtmdW5jdGlvbiBDKG4sdCl7Zm9yKHZhciBlIGluIHQpbltlXT10W2VdO3JldHVybiBufWZ1bmN0aW9uIFMobix0KXtmb3IodmFyIGUgaW4gbilpZihcIl9fc291cmNlXCIhPT1lJiYhKGUgaW4gdCkpcmV0dXJuITA7Zm9yKHZhciByIGluIHQpaWYoXCJfX3NvdXJjZVwiIT09ciYmbltyXSE9PXRbcl0pcmV0dXJuITA7cmV0dXJuITF9ZnVuY3Rpb24gRShuKXt0aGlzLnByb3BzPW59ZnVuY3Rpb24gZyhuLHQpe2Z1bmN0aW9uIGUobil7dmFyIGU9dGhpcy5wcm9wcy5yZWYscj1lPT1uLnJlZjtyZXR1cm4hciYmZSYmKGUuY2FsbD9lKG51bGwpOmUuY3VycmVudD1udWxsKSx0PyF0KHRoaXMucHJvcHMsbil8fCFyOlModGhpcy5wcm9wcyxuKX1mdW5jdGlvbiByKHQpe3JldHVybiB0aGlzLnNob3VsZENvbXBvbmVudFVwZGF0ZT1lLHMobix0KX1yZXR1cm4gci5kaXNwbGF5TmFtZT1cIk1lbW8oXCIrKG4uZGlzcGxheU5hbWV8fG4ubmFtZSkrXCIpXCIsci5wcm90b3R5cGUuaXNSZWFjdENvbXBvbmVudD0hMCxyLl9fZj0hMCxyfShFLnByb3RvdHlwZT1uZXcgYSkuaXNQdXJlUmVhY3RDb21wb25lbnQ9ITAsRS5wcm90b3R5cGUuc2hvdWxkQ29tcG9uZW50VXBkYXRlPWZ1bmN0aW9uKG4sdCl7cmV0dXJuIFModGhpcy5wcm9wcyxuKXx8Uyh0aGlzLnN0YXRlLHQpfTt2YXIgdz1oLl9fYjtoLl9fYj1mdW5jdGlvbihuKXtuLnR5cGUmJm4udHlwZS5fX2YmJm4ucmVmJiYobi5wcm9wcy5yZWY9bi5yZWYsbi5yZWY9bnVsbCksdyYmdyhuKX07dmFyIFI9XCJ1bmRlZmluZWRcIiE9dHlwZW9mIFN5bWJvbCYmU3ltYm9sLmZvciYmU3ltYm9sLmZvcihcInJlYWN0LmZvcndhcmRfcmVmXCIpfHwzOTExO2Z1bmN0aW9uIHgobil7ZnVuY3Rpb24gdCh0LGUpe3ZhciByPUMoe30sdCk7cmV0dXJuIGRlbGV0ZSByLnJlZixuKHIsKGU9dC5yZWZ8fGUpJiYoXCJvYmplY3RcIiE9dHlwZW9mIGV8fFwiY3VycmVudFwiaW4gZSk/ZTpudWxsKX1yZXR1cm4gdC4kJHR5cGVvZj1SLHQucmVuZGVyPXQsdC5wcm90b3R5cGUuaXNSZWFjdENvbXBvbmVudD10Ll9fZj0hMCx0LmRpc3BsYXlOYW1lPVwiRm9yd2FyZFJlZihcIisobi5kaXNwbGF5TmFtZXx8bi5uYW1lKStcIilcIix0fXZhciBOPWZ1bmN0aW9uKG4sdCl7cmV0dXJuIG51bGw9PW4/bnVsbDpwKHAobikubWFwKHQpKX0saz17bWFwOk4sZm9yRWFjaDpOLGNvdW50OmZ1bmN0aW9uKG4pe3JldHVybiBuP3AobikubGVuZ3RoOjB9LG9ubHk6ZnVuY3Rpb24obil7dmFyIHQ9cChuKTtpZigxIT09dC5sZW5ndGgpdGhyb3dcIkNoaWxkcmVuLm9ubHlcIjtyZXR1cm4gdFswXX0sdG9BcnJheTpwfSxBPWguX19lO2Z1bmN0aW9uIE8obil7cmV0dXJuIG4mJihuLl9fYyYmbi5fX2MuX19IJiYobi5fX2MuX19ILl9fLmZvckVhY2goZnVuY3Rpb24obil7XCJmdW5jdGlvblwiPT10eXBlb2Ygbi5fX2MmJm4uX19jKCl9KSxuLl9fYy5fX0g9bnVsbCksKG49Qyh7fSxuKSkuX19jPW51bGwsbi5fX2s9bi5fX2smJm4uX19rLm1hcChPKSksbn1mdW5jdGlvbiBMKG4pe3JldHVybiBuJiYobi5fX3Y9bnVsbCxuLl9faz1uLl9fayYmbi5fX2subWFwKEwpKSxufWZ1bmN0aW9uIFUoKXt0aGlzLl9fdT0wLHRoaXMudD1udWxsLHRoaXMuX19iPW51bGx9ZnVuY3Rpb24gRihuKXt2YXIgdD1uLl9fLl9fYztyZXR1cm4gdCYmdC5fX2UmJnQuX19lKG4pfWZ1bmN0aW9uIE0obil7dmFyIHQsZSxyO2Z1bmN0aW9uIHUodSl7aWYodHx8KHQ9bigpKS50aGVuKGZ1bmN0aW9uKG4pe2U9bi5kZWZhdWx0fHxufSxmdW5jdGlvbihuKXtyPW59KSxyKXRocm93IHI7aWYoIWUpdGhyb3cgdDtyZXR1cm4gcyhlLHUpfXJldHVybiB1LmRpc3BsYXlOYW1lPVwiTGF6eVwiLHUuX19mPSEwLHV9ZnVuY3Rpb24gVCgpe3RoaXMudT1udWxsLHRoaXMubz1udWxsfWguX19lPWZ1bmN0aW9uKG4sdCxlKXtpZihuLnRoZW4pZm9yKHZhciByLHU9dDt1PXUuX187KWlmKChyPXUuX19jKSYmci5fX2MpcmV0dXJuIG51bGw9PXQuX19lJiYodC5fX2U9ZS5fX2UsdC5fX2s9ZS5fX2spLHIuX19jKG4sdCk7QShuLHQsZSl9LChVLnByb3RvdHlwZT1uZXcgYSkuX19jPWZ1bmN0aW9uKG4sdCl7dmFyIGU9dC5fX2Mscj10aGlzO251bGw9PXIudCYmKHIudD1bXSksci50LnB1c2goZSk7dmFyIHU9RihyLl9fdiksbz0hMSxpPWZ1bmN0aW9uKCl7b3x8KG89ITAsZS5jb21wb25lbnRXaWxsVW5tb3VudD1lLl9fYyx1P3UobCk6bCgpKX07ZS5fX2M9ZS5jb21wb25lbnRXaWxsVW5tb3VudCxlLmNvbXBvbmVudFdpbGxVbm1vdW50PWZ1bmN0aW9uKCl7aSgpLGUuX19jJiZlLl9fYygpfTt2YXIgbD1mdW5jdGlvbigpe3ZhciBuO2lmKCEtLXIuX191KWZvcihyLnN0YXRlLl9fZSYmKHIuX192Ll9fa1swXT1MKHIuc3RhdGUuX19lKSksci5zZXRTdGF0ZSh7X19lOnIuX19iPW51bGx9KTtuPXIudC5wb3AoKTspbi5mb3JjZVVwZGF0ZSgpfSxjPSEwPT09dC5fX2g7ci5fX3UrK3x8Y3x8ci5zZXRTdGF0ZSh7X19lOnIuX19iPXIuX192Ll9fa1swXX0pLG4udGhlbihpLGkpfSxVLnByb3RvdHlwZS5jb21wb25lbnRXaWxsVW5tb3VudD1mdW5jdGlvbigpe3RoaXMudD1bXX0sVS5wcm90b3R5cGUucmVuZGVyPWZ1bmN0aW9uKG4sdCl7dGhpcy5fX2ImJih0aGlzLl9fdi5fX2smJih0aGlzLl9fdi5fX2tbMF09Tyh0aGlzLl9fYikpLHRoaXMuX19iPW51bGwpO3ZhciBlPXQuX19lJiZzKGQsbnVsbCxuLmZhbGxiYWNrKTtyZXR1cm4gZSYmKGUuX19oPW51bGwpLFtzKGQsbnVsbCx0Ll9fZT9udWxsOm4uY2hpbGRyZW4pLGVdfTt2YXIgRD1mdW5jdGlvbihuLHQsZSl7aWYoKytlWzFdPT09ZVswXSYmbi5vLmRlbGV0ZSh0KSxuLnByb3BzLnJldmVhbE9yZGVyJiYoXCJ0XCIhPT1uLnByb3BzLnJldmVhbE9yZGVyWzBdfHwhbi5vLnNpemUpKWZvcihlPW4udTtlOyl7Zm9yKDtlLmxlbmd0aD4zOyllLnBvcCgpKCk7aWYoZVsxXTxlWzBdKWJyZWFrO24udT1lPWVbMl19fTtmdW5jdGlvbiBJKG4pe3JldHVybiB0aGlzLmdldENoaWxkQ29udGV4dD1mdW5jdGlvbigpe3JldHVybiBuLmNvbnRleHR9LG4uY2hpbGRyZW59ZnVuY3Rpb24gVyhuKXt2YXIgdD10aGlzLGU9bi5pO3QuY29tcG9uZW50V2lsbFVubW91bnQ9ZnVuY3Rpb24oKXt2KG51bGwsdC5sKSx0Lmw9bnVsbCx0Lmk9bnVsbH0sdC5pJiZ0LmkhPT1lJiZ0LmNvbXBvbmVudFdpbGxVbm1vdW50KCksbi5fX3Y/KHQubHx8KHQuaT1lLHQubD17bm9kZVR5cGU6MSxwYXJlbnROb2RlOmUsY2hpbGROb2RlczpbXSxhcHBlbmRDaGlsZDpmdW5jdGlvbihuKXt0aGlzLmNoaWxkTm9kZXMucHVzaChuKSx0LmkuYXBwZW5kQ2hpbGQobil9LGluc2VydEJlZm9yZTpmdW5jdGlvbihuLGUpe3RoaXMuY2hpbGROb2Rlcy5wdXNoKG4pLHQuaS5hcHBlbmRDaGlsZChuKX0scmVtb3ZlQ2hpbGQ6ZnVuY3Rpb24obil7dGhpcy5jaGlsZE5vZGVzLnNwbGljZSh0aGlzLmNoaWxkTm9kZXMuaW5kZXhPZihuKT4+PjEsMSksdC5pLnJlbW92ZUNoaWxkKG4pfX0pLHYocyhJLHtjb250ZXh0OnQuY29udGV4dH0sbi5fX3YpLHQubCkpOnQubCYmdC5jb21wb25lbnRXaWxsVW5tb3VudCgpfWZ1bmN0aW9uIGoobix0KXtyZXR1cm4gcyhXLHtfX3Y6bixpOnR9KX0oVC5wcm90b3R5cGU9bmV3IGEpLl9fZT1mdW5jdGlvbihuKXt2YXIgdD10aGlzLGU9Rih0Ll9fdikscj10Lm8uZ2V0KG4pO3JldHVybiByWzBdKyssZnVuY3Rpb24odSl7dmFyIG89ZnVuY3Rpb24oKXt0LnByb3BzLnJldmVhbE9yZGVyPyhyLnB1c2godSksRCh0LG4scikpOnUoKX07ZT9lKG8pOm8oKX19LFQucHJvdG90eXBlLnJlbmRlcj1mdW5jdGlvbihuKXt0aGlzLnU9bnVsbCx0aGlzLm89bmV3IE1hcDt2YXIgdD1wKG4uY2hpbGRyZW4pO24ucmV2ZWFsT3JkZXImJlwiYlwiPT09bi5yZXZlYWxPcmRlclswXSYmdC5yZXZlcnNlKCk7Zm9yKHZhciBlPXQubGVuZ3RoO2UtLTspdGhpcy5vLnNldCh0W2VdLHRoaXMudT1bMSwwLHRoaXMudV0pO3JldHVybiBuLmNoaWxkcmVufSxULnByb3RvdHlwZS5jb21wb25lbnREaWRVcGRhdGU9VC5wcm90b3R5cGUuY29tcG9uZW50RGlkTW91bnQ9ZnVuY3Rpb24oKXt2YXIgbj10aGlzO3RoaXMuby5mb3JFYWNoKGZ1bmN0aW9uKHQsZSl7RChuLGUsdCl9KX07dmFyIFA9XCJ1bmRlZmluZWRcIiE9dHlwZW9mIFN5bWJvbCYmU3ltYm9sLmZvciYmU3ltYm9sLmZvcihcInJlYWN0LmVsZW1lbnRcIil8fDYwMTAzLHo9L14oPzphY2NlbnR8YWxpZ25tZW50fGFyYWJpY3xiYXNlbGluZXxjYXB8Y2xpcCg/IVBhdGhVKXxjb2xvcnxmaWxsfGZsb29kfGZvbnR8Z2x5cGgoPyFSKXxob3JpenxtYXJrZXIoPyFIfFd8VSl8b3ZlcmxpbmV8cGFpbnR8c3RvcHxzdHJpa2V0aHJvdWdofHN0cm9rZXx0ZXh0KD8hTCl8dW5kZXJsaW5lfHVuaWNvZGV8dW5pdHN8dnx2ZWN0b3J8dmVydHx3b3JkfHdyaXRpbmd8eCg/IUMpKVtBLVpdLyxCPWZ1bmN0aW9uKG4pe3JldHVybihcInVuZGVmaW5lZFwiIT10eXBlb2YgU3ltYm9sJiZcInN5bWJvbFwiPT10eXBlb2YgU3ltYm9sKCk/L2ZpbHxjaGV8cmFkL2k6L2ZpbHxjaGV8cmEvaSkudGVzdChuKX07ZnVuY3Rpb24gVihuLHQsZSl7cmV0dXJuIG51bGw9PXQuX19rJiYodC50ZXh0Q29udGVudD1cIlwiKSx2KG4sdCksXCJmdW5jdGlvblwiPT10eXBlb2YgZSYmZSgpLG4/bi5fX2M6bnVsbH1mdW5jdGlvbiBIKG4sdCxlKXtyZXR1cm4gbShuLHQpLFwiZnVuY3Rpb25cIj09dHlwZW9mIGUmJmUoKSxuP24uX19jOm51bGx9YS5wcm90b3R5cGUuaXNSZWFjdENvbXBvbmVudD17fSxbXCJjb21wb25lbnRXaWxsTW91bnRcIixcImNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHNcIixcImNvbXBvbmVudFdpbGxVcGRhdGVcIl0uZm9yRWFjaChmdW5jdGlvbihuKXtPYmplY3QuZGVmaW5lUHJvcGVydHkoYS5wcm90b3R5cGUsbix7Y29uZmlndXJhYmxlOiEwLGdldDpmdW5jdGlvbigpe3JldHVybiB0aGlzW1wiVU5TQUZFX1wiK25dfSxzZXQ6ZnVuY3Rpb24odCl7T2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsbix7Y29uZmlndXJhYmxlOiEwLHdyaXRhYmxlOiEwLHZhbHVlOnR9KX19KX0pO3ZhciBaPWguZXZlbnQ7ZnVuY3Rpb24gWSgpe31mdW5jdGlvbiAkKCl7cmV0dXJuIHRoaXMuY2FuY2VsQnViYmxlfWZ1bmN0aW9uIHEoKXtyZXR1cm4gdGhpcy5kZWZhdWx0UHJldmVudGVkfWguZXZlbnQ9ZnVuY3Rpb24obil7cmV0dXJuIFomJihuPVoobikpLG4ucGVyc2lzdD1ZLG4uaXNQcm9wYWdhdGlvblN0b3BwZWQ9JCxuLmlzRGVmYXVsdFByZXZlbnRlZD1xLG4ubmF0aXZlRXZlbnQ9bn07dmFyIEcsSj17Y29uZmlndXJhYmxlOiEwLGdldDpmdW5jdGlvbigpe3JldHVybiB0aGlzLmNsYXNzfX0sSz1oLnZub2RlO2gudm5vZGU9ZnVuY3Rpb24obil7dmFyIHQ9bi50eXBlLGU9bi5wcm9wcyxyPWU7aWYoXCJzdHJpbmdcIj09dHlwZW9mIHQpe2Zvcih2YXIgdSBpbiByPXt9LGUpe3ZhciBvPWVbdV07XCJkZWZhdWx0VmFsdWVcIj09PXUmJlwidmFsdWVcImluIGUmJm51bGw9PWUudmFsdWU/dT1cInZhbHVlXCI6XCJkb3dubG9hZFwiPT09dSYmITA9PT1vP289XCJcIjovb25kb3VibGVjbGljay9pLnRlc3QodSk/dT1cIm9uZGJsY2xpY2tcIjovXm9uY2hhbmdlKHRleHRhcmVhfGlucHV0KS9pLnRlc3QodSt0KSYmIUIoZS50eXBlKT91PVwib25pbnB1dFwiOi9eb24oQW5pfFRyYXxUb3V8QmVmb3JlSW5wKS8udGVzdCh1KT91PXUudG9Mb3dlckNhc2UoKTp6LnRlc3QodSk/dT11LnJlcGxhY2UoL1tBLVowLTldLyxcIi0kJlwiKS50b0xvd2VyQ2FzZSgpOm51bGw9PT1vJiYobz12b2lkIDApLHJbdV09b31cInNlbGVjdFwiPT10JiZyLm11bHRpcGxlJiZBcnJheS5pc0FycmF5KHIudmFsdWUpJiYoci52YWx1ZT1wKGUuY2hpbGRyZW4pLmZvckVhY2goZnVuY3Rpb24obil7bi5wcm9wcy5zZWxlY3RlZD0tMSE9ci52YWx1ZS5pbmRleE9mKG4ucHJvcHMudmFsdWUpfSkpLFwic2VsZWN0XCI9PXQmJm51bGwhPXIuZGVmYXVsdFZhbHVlJiYoci52YWx1ZT1wKGUuY2hpbGRyZW4pLmZvckVhY2goZnVuY3Rpb24obil7bi5wcm9wcy5zZWxlY3RlZD1yLm11bHRpcGxlPy0xIT1yLmRlZmF1bHRWYWx1ZS5pbmRleE9mKG4ucHJvcHMudmFsdWUpOnIuZGVmYXVsdFZhbHVlPT1uLnByb3BzLnZhbHVlfSkpLG4ucHJvcHM9cn10JiZlLmNsYXNzIT1lLmNsYXNzTmFtZSYmKEouZW51bWVyYWJsZT1cImNsYXNzTmFtZVwiaW4gZSxudWxsIT1lLmNsYXNzTmFtZSYmKHIuY2xhc3M9ZS5jbGFzc05hbWUpLE9iamVjdC5kZWZpbmVQcm9wZXJ0eShyLFwiY2xhc3NOYW1lXCIsSikpLG4uJCR0eXBlb2Y9UCxLJiZLKG4pfTt2YXIgUT1oLl9fcjtoLl9fcj1mdW5jdGlvbihuKXtRJiZRKG4pLEc9bi5fX2N9O3ZhciBYPXtSZWFjdEN1cnJlbnREaXNwYXRjaGVyOntjdXJyZW50OntyZWFkQ29udGV4dDpmdW5jdGlvbihuKXtyZXR1cm4gRy5fX25bbi5fX2NdLnByb3BzLnZhbHVlfX19fSxubj1cIjE2LjguMFwiO2Z1bmN0aW9uIHRuKG4pe3JldHVybiBzLmJpbmQobnVsbCxuKX1mdW5jdGlvbiBlbihuKXtyZXR1cm4hIW4mJm4uJCR0eXBlb2Y9PT1QfWZ1bmN0aW9uIHJuKG4pe3JldHVybiBlbihuKT95LmFwcGx5KG51bGwsYXJndW1lbnRzKTpufWZ1bmN0aW9uIHVuKG4pe3JldHVybiEhbi5fX2smJih2KG51bGwsbiksITApfWZ1bmN0aW9uIG9uKG4pe3JldHVybiBuJiYobi5iYXNlfHwxPT09bi5ub2RlVHlwZSYmbil8fG51bGx9dmFyIGxuPWZ1bmN0aW9uKG4sdCl7cmV0dXJuIG4odCl9LGNuPWQ7ZXhwb3J0IGRlZmF1bHR7dXNlU3RhdGU6bix1c2VSZWR1Y2VyOnQsdXNlRWZmZWN0OmUsdXNlTGF5b3V0RWZmZWN0OnIsdXNlUmVmOnUsdXNlSW1wZXJhdGl2ZUhhbmRsZTpvLHVzZU1lbW86aSx1c2VDYWxsYmFjazpsLHVzZUNvbnRleHQ6Yyx1c2VEZWJ1Z1ZhbHVlOmYsdmVyc2lvbjpcIjE2LjguMFwiLENoaWxkcmVuOmsscmVuZGVyOlYsaHlkcmF0ZTpILHVubW91bnRDb21wb25lbnRBdE5vZGU6dW4sY3JlYXRlUG9ydGFsOmosY3JlYXRlRWxlbWVudDpzLGNyZWF0ZUNvbnRleHQ6XyxjcmVhdGVGYWN0b3J5OnRuLGNsb25lRWxlbWVudDpybixjcmVhdGVSZWY6YixGcmFnbWVudDpkLGlzVmFsaWRFbGVtZW50OmVuLGZpbmRET01Ob2RlOm9uLENvbXBvbmVudDphLFB1cmVDb21wb25lbnQ6RSxtZW1vOmcsZm9yd2FyZFJlZjp4LHVuc3RhYmxlX2JhdGNoZWRVcGRhdGVzOmxuLFN0cmljdE1vZGU6ZCxTdXNwZW5zZTpVLFN1c3BlbnNlTGlzdDpULGxhenk6TSxfX1NFQ1JFVF9JTlRFUk5BTFNfRE9fTk9UX1VTRV9PUl9ZT1VfV0lMTF9CRV9GSVJFRDpYfTtleHBvcnR7bm4gYXMgdmVyc2lvbixrIGFzIENoaWxkcmVuLFYgYXMgcmVuZGVyLEggYXMgaHlkcmF0ZSx1biBhcyB1bm1vdW50Q29tcG9uZW50QXROb2RlLGogYXMgY3JlYXRlUG9ydGFsLHRuIGFzIGNyZWF0ZUZhY3Rvcnkscm4gYXMgY2xvbmVFbGVtZW50LGVuIGFzIGlzVmFsaWRFbGVtZW50LG9uIGFzIGZpbmRET01Ob2RlLEUgYXMgUHVyZUNvbXBvbmVudCxnIGFzIG1lbW8seCBhcyBmb3J3YXJkUmVmLGxuIGFzIHVuc3RhYmxlX2JhdGNoZWRVcGRhdGVzLGNuIGFzIFN0cmljdE1vZGUsVSBhcyBTdXNwZW5zZSxUIGFzIFN1c3BlbnNlTGlzdCxNIGFzIGxhenksWCBhcyBfX1NFQ1JFVF9JTlRFUk5BTFNfRE9fTk9UX1VTRV9PUl9ZT1VfV0lMTF9CRV9GSVJFRH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jb21wYXQubW9kdWxlLmpzLm1hcFxuIiwidmFyIG4sbCx1LGksdCxvLHIsZj17fSxlPVtdLGM9L2FjaXR8ZXgoPzpzfGd8bnxwfCQpfHJwaHxncmlkfG93c3xtbmN8bnR3fGluZVtjaF18em9vfF5vcmR8aXRlcmEvaTtmdW5jdGlvbiBzKG4sbCl7Zm9yKHZhciB1IGluIGwpblt1XT1sW3VdO3JldHVybiBufWZ1bmN0aW9uIGEobil7dmFyIGw9bi5wYXJlbnROb2RlO2wmJmwucmVtb3ZlQ2hpbGQobil9ZnVuY3Rpb24gdihuLGwsdSl7dmFyIGksdCxvLHI9YXJndW1lbnRzLGY9e307Zm9yKG8gaW4gbClcImtleVwiPT1vP2k9bFtvXTpcInJlZlwiPT1vP3Q9bFtvXTpmW29dPWxbb107aWYoYXJndW1lbnRzLmxlbmd0aD4zKWZvcih1PVt1XSxvPTM7bzxhcmd1bWVudHMubGVuZ3RoO28rKyl1LnB1c2gocltvXSk7aWYobnVsbCE9dSYmKGYuY2hpbGRyZW49dSksXCJmdW5jdGlvblwiPT10eXBlb2YgbiYmbnVsbCE9bi5kZWZhdWx0UHJvcHMpZm9yKG8gaW4gbi5kZWZhdWx0UHJvcHMpdm9pZCAwPT09ZltvXSYmKGZbb109bi5kZWZhdWx0UHJvcHNbb10pO3JldHVybiBoKG4sZixpLHQsbnVsbCl9ZnVuY3Rpb24gaChsLHUsaSx0LG8pe3ZhciByPXt0eXBlOmwscHJvcHM6dSxrZXk6aSxyZWY6dCxfX2s6bnVsbCxfXzpudWxsLF9fYjowLF9fZTpudWxsLF9fZDp2b2lkIDAsX19jOm51bGwsX19oOm51bGwsY29uc3RydWN0b3I6dm9pZCAwLF9fdjpudWxsPT1vPysrbi5fX3Y6b307cmV0dXJuIG51bGwhPW4udm5vZGUmJm4udm5vZGUocikscn1mdW5jdGlvbiB5KCl7cmV0dXJue2N1cnJlbnQ6bnVsbH19ZnVuY3Rpb24gcChuKXtyZXR1cm4gbi5jaGlsZHJlbn1mdW5jdGlvbiBkKG4sbCl7dGhpcy5wcm9wcz1uLHRoaXMuY29udGV4dD1sfWZ1bmN0aW9uIF8obixsKXtpZihudWxsPT1sKXJldHVybiBuLl9fP18obi5fXyxuLl9fLl9fay5pbmRleE9mKG4pKzEpOm51bGw7Zm9yKHZhciB1O2w8bi5fX2subGVuZ3RoO2wrKylpZihudWxsIT0odT1uLl9fa1tsXSkmJm51bGwhPXUuX19lKXJldHVybiB1Ll9fZTtyZXR1cm5cImZ1bmN0aW9uXCI9PXR5cGVvZiBuLnR5cGU/XyhuKTpudWxsfWZ1bmN0aW9uIHcobil7dmFyIGwsdTtpZihudWxsIT0obj1uLl9fKSYmbnVsbCE9bi5fX2Mpe2ZvcihuLl9fZT1uLl9fYy5iYXNlPW51bGwsbD0wO2w8bi5fX2subGVuZ3RoO2wrKylpZihudWxsIT0odT1uLl9fa1tsXSkmJm51bGwhPXUuX19lKXtuLl9fZT1uLl9fYy5iYXNlPXUuX19lO2JyZWFrfXJldHVybiB3KG4pfX1mdW5jdGlvbiBrKGwpeyghbC5fX2QmJihsLl9fZD0hMCkmJnUucHVzaChsKSYmIWcuX19yKyt8fHQhPT1uLmRlYm91bmNlUmVuZGVyaW5nKSYmKCh0PW4uZGVib3VuY2VSZW5kZXJpbmcpfHxpKShnKX1mdW5jdGlvbiBnKCl7Zm9yKHZhciBuO2cuX19yPXUubGVuZ3RoOyluPXUuc29ydChmdW5jdGlvbihuLGwpe3JldHVybiBuLl9fdi5fX2ItbC5fX3YuX19ifSksdT1bXSxuLnNvbWUoZnVuY3Rpb24obil7dmFyIGwsdSxpLHQsbyxyO24uX19kJiYobz0odD0obD1uKS5fX3YpLl9fZSwocj1sLl9fUCkmJih1PVtdLChpPXMoe30sdCkpLl9fdj10Ll9fdisxLCQocix0LGksbC5fX24sdm9pZCAwIT09ci5vd25lclNWR0VsZW1lbnQsbnVsbCE9dC5fX2g/W29dOm51bGwsdSxudWxsPT1vP18odCk6byx0Ll9faCksaih1LHQpLHQuX19lIT1vJiZ3KHQpKSl9KX1mdW5jdGlvbiBtKG4sbCx1LGksdCxvLHIsYyxzLHYpe3ZhciB5LGQsdyxrLGcsbSx4LFA9aSYmaS5fX2t8fGUsQz1QLmxlbmd0aDtmb3Iocz09ZiYmKHM9bnVsbCE9cj9yWzBdOkM/XyhpLDApOm51bGwpLHUuX19rPVtdLHk9MDt5PGwubGVuZ3RoO3krKylpZihudWxsIT0oaz11Ll9fa1t5XT1udWxsPT0oaz1sW3ldKXx8XCJib29sZWFuXCI9PXR5cGVvZiBrP251bGw6XCJzdHJpbmdcIj09dHlwZW9mIGt8fFwibnVtYmVyXCI9PXR5cGVvZiBrP2gobnVsbCxrLG51bGwsbnVsbCxrKTpBcnJheS5pc0FycmF5KGspP2gocCx7Y2hpbGRyZW46a30sbnVsbCxudWxsLG51bGwpOmsuX19iPjA/aChrLnR5cGUsay5wcm9wcyxrLmtleSxudWxsLGsuX192KTprKSl7aWYoay5fXz11LGsuX19iPXUuX19iKzEsbnVsbD09PSh3PVBbeV0pfHx3JiZrLmtleT09dy5rZXkmJmsudHlwZT09PXcudHlwZSlQW3ldPXZvaWQgMDtlbHNlIGZvcihkPTA7ZDxDO2QrKyl7aWYoKHc9UFtkXSkmJmsua2V5PT13LmtleSYmay50eXBlPT09dy50eXBlKXtQW2RdPXZvaWQgMDticmVha313PW51bGx9JChuLGssdz13fHxmLHQsbyxyLGMscyx2KSxnPWsuX19lLChkPWsucmVmKSYmdy5yZWYhPWQmJih4fHwoeD1bXSksdy5yZWYmJngucHVzaCh3LnJlZixudWxsLGspLHgucHVzaChkLGsuX19jfHxnLGspKSxudWxsIT1nPyhudWxsPT1tJiYobT1nKSxcImZ1bmN0aW9uXCI9PXR5cGVvZiBrLnR5cGUmJm51bGwhPWsuX19rJiZrLl9faz09PXcuX19rP2suX19kPXM9YihrLHMsbik6cz1BKG4sayx3LFAscixnLHMpLHZ8fFwib3B0aW9uXCIhPT11LnR5cGU/XCJmdW5jdGlvblwiPT10eXBlb2YgdS50eXBlJiYodS5fX2Q9cyk6bi52YWx1ZT1cIlwiKTpzJiZ3Ll9fZT09cyYmcy5wYXJlbnROb2RlIT1uJiYocz1fKHcpKX1pZih1Ll9fZT1tLG51bGwhPXImJlwiZnVuY3Rpb25cIiE9dHlwZW9mIHUudHlwZSlmb3IoeT1yLmxlbmd0aDt5LS07KW51bGwhPXJbeV0mJmEoclt5XSk7Zm9yKHk9Qzt5LS07KW51bGwhPVBbeV0mJihcImZ1bmN0aW9uXCI9PXR5cGVvZiB1LnR5cGUmJm51bGwhPVBbeV0uX19lJiZQW3ldLl9fZT09dS5fX2QmJih1Ll9fZD1fKGkseSsxKSksTChQW3ldLFBbeV0pKTtpZih4KWZvcih5PTA7eTx4Lmxlbmd0aDt5KyspSSh4W3ldLHhbKyt5XSx4WysreV0pfWZ1bmN0aW9uIGIobixsLHUpe3ZhciBpLHQ7Zm9yKGk9MDtpPG4uX19rLmxlbmd0aDtpKyspKHQ9bi5fX2tbaV0pJiYodC5fXz1uLGw9XCJmdW5jdGlvblwiPT10eXBlb2YgdC50eXBlP2IodCxsLHUpOkEodSx0LHQsbi5fX2ssbnVsbCx0Ll9fZSxsKSk7cmV0dXJuIGx9ZnVuY3Rpb24geChuLGwpe3JldHVybiBsPWx8fFtdLG51bGw9PW58fFwiYm9vbGVhblwiPT10eXBlb2Ygbnx8KEFycmF5LmlzQXJyYXkobik/bi5zb21lKGZ1bmN0aW9uKG4pe3gobixsKX0pOmwucHVzaChuKSksbH1mdW5jdGlvbiBBKG4sbCx1LGksdCxvLHIpe3ZhciBmLGUsYztpZih2b2lkIDAhPT1sLl9fZClmPWwuX19kLGwuX19kPXZvaWQgMDtlbHNlIGlmKHQ9PXV8fG8hPXJ8fG51bGw9PW8ucGFyZW50Tm9kZSluOmlmKG51bGw9PXJ8fHIucGFyZW50Tm9kZSE9PW4pbi5hcHBlbmRDaGlsZChvKSxmPW51bGw7ZWxzZXtmb3IoZT1yLGM9MDsoZT1lLm5leHRTaWJsaW5nKSYmYzxpLmxlbmd0aDtjKz0yKWlmKGU9PW8pYnJlYWsgbjtuLmluc2VydEJlZm9yZShvLHIpLGY9cn1yZXR1cm4gdm9pZCAwIT09Zj9mOm8ubmV4dFNpYmxpbmd9ZnVuY3Rpb24gUChuLGwsdSxpLHQpe3ZhciBvO2ZvcihvIGluIHUpXCJjaGlsZHJlblwiPT09b3x8XCJrZXlcIj09PW98fG8gaW4gbHx8eihuLG8sbnVsbCx1W29dLGkpO2ZvcihvIGluIGwpdCYmXCJmdW5jdGlvblwiIT10eXBlb2YgbFtvXXx8XCJjaGlsZHJlblwiPT09b3x8XCJrZXlcIj09PW98fFwidmFsdWVcIj09PW98fFwiY2hlY2tlZFwiPT09b3x8dVtvXT09PWxbb118fHoobixvLGxbb10sdVtvXSxpKX1mdW5jdGlvbiBDKG4sbCx1KXtcIi1cIj09PWxbMF0/bi5zZXRQcm9wZXJ0eShsLHUpOm5bbF09bnVsbD09dT9cIlwiOlwibnVtYmVyXCIhPXR5cGVvZiB1fHxjLnRlc3QobCk/dTp1K1wicHhcIn1mdW5jdGlvbiB6KG4sbCx1LGksdCl7dmFyIG8scixmO2lmKHQmJlwiY2xhc3NOYW1lXCI9PWwmJihsPVwiY2xhc3NcIiksXCJzdHlsZVwiPT09bClpZihcInN0cmluZ1wiPT10eXBlb2YgdSluLnN0eWxlLmNzc1RleHQ9dTtlbHNle2lmKFwic3RyaW5nXCI9PXR5cGVvZiBpJiYobi5zdHlsZS5jc3NUZXh0PWk9XCJcIiksaSlmb3IobCBpbiBpKXUmJmwgaW4gdXx8QyhuLnN0eWxlLGwsXCJcIik7aWYodSlmb3IobCBpbiB1KWkmJnVbbF09PT1pW2xdfHxDKG4uc3R5bGUsbCx1W2xdKX1lbHNlXCJvXCI9PT1sWzBdJiZcIm5cIj09PWxbMV0/KG89bCE9PShsPWwucmVwbGFjZSgvQ2FwdHVyZSQvLFwiXCIpKSwocj1sLnRvTG93ZXJDYXNlKCkpaW4gbiYmKGw9ciksbD1sLnNsaWNlKDIpLG4ubHx8KG4ubD17fSksbi5sW2wrb109dSxmPW8/VDpOLHU/aXx8bi5hZGRFdmVudExpc3RlbmVyKGwsZixvKTpuLnJlbW92ZUV2ZW50TGlzdGVuZXIobCxmLG8pKTpcImxpc3RcIiE9PWwmJlwidGFnTmFtZVwiIT09bCYmXCJmb3JtXCIhPT1sJiZcInR5cGVcIiE9PWwmJlwic2l6ZVwiIT09bCYmXCJkb3dubG9hZFwiIT09bCYmXCJocmVmXCIhPT1sJiYhdCYmbCBpbiBuP25bbF09bnVsbD09dT9cIlwiOnU6XCJmdW5jdGlvblwiIT10eXBlb2YgdSYmXCJkYW5nZXJvdXNseVNldElubmVySFRNTFwiIT09bCYmKGwhPT0obD1sLnJlcGxhY2UoL3hsaW5rOj8vLFwiXCIpKT9udWxsPT11fHwhMT09PXU/bi5yZW1vdmVBdHRyaWJ1dGVOUyhcImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmtcIixsLnRvTG93ZXJDYXNlKCkpOm4uc2V0QXR0cmlidXRlTlMoXCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rXCIsbC50b0xvd2VyQ2FzZSgpLHUpOm51bGw9PXV8fCExPT09dSYmIS9eYXIvLnRlc3QobCk/bi5yZW1vdmVBdHRyaWJ1dGUobCk6bi5zZXRBdHRyaWJ1dGUobCx1KSl9ZnVuY3Rpb24gTihsKXt0aGlzLmxbbC50eXBlKyExXShuLmV2ZW50P24uZXZlbnQobCk6bCl9ZnVuY3Rpb24gVChsKXt0aGlzLmxbbC50eXBlKyEwXShuLmV2ZW50P24uZXZlbnQobCk6bCl9ZnVuY3Rpb24gJChsLHUsaSx0LG8scixmLGUsYyl7dmFyIGEsdixoLHksXyx3LGssZyxiLHgsQSxQPXUudHlwZTtpZih2b2lkIDAhPT11LmNvbnN0cnVjdG9yKXJldHVybiBudWxsO251bGwhPWkuX19oJiYoYz1pLl9faCxlPXUuX19lPWkuX19lLHUuX19oPW51bGwscj1bZV0pLChhPW4uX19iKSYmYSh1KTt0cnl7bjppZihcImZ1bmN0aW9uXCI9PXR5cGVvZiBQKXtpZihnPXUucHJvcHMsYj0oYT1QLmNvbnRleHRUeXBlKSYmdFthLl9fY10seD1hP2I/Yi5wcm9wcy52YWx1ZTphLl9fOnQsaS5fX2M/az0odj11Ll9fYz1pLl9fYykuX189di5fX0U6KFwicHJvdG90eXBlXCJpbiBQJiZQLnByb3RvdHlwZS5yZW5kZXI/dS5fX2M9dj1uZXcgUChnLHgpOih1Ll9fYz12PW5ldyBkKGcseCksdi5jb25zdHJ1Y3Rvcj1QLHYucmVuZGVyPU0pLGImJmIuc3ViKHYpLHYucHJvcHM9Zyx2LnN0YXRlfHwodi5zdGF0ZT17fSksdi5jb250ZXh0PXgsdi5fX249dCxoPXYuX19kPSEwLHYuX19oPVtdKSxudWxsPT12Ll9fcyYmKHYuX19zPXYuc3RhdGUpLG51bGwhPVAuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzJiYodi5fX3M9PXYuc3RhdGUmJih2Ll9fcz1zKHt9LHYuX19zKSkscyh2Ll9fcyxQLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyhnLHYuX19zKSkpLHk9di5wcm9wcyxfPXYuc3RhdGUsaCludWxsPT1QLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyYmbnVsbCE9di5jb21wb25lbnRXaWxsTW91bnQmJnYuY29tcG9uZW50V2lsbE1vdW50KCksbnVsbCE9di5jb21wb25lbnREaWRNb3VudCYmdi5fX2gucHVzaCh2LmNvbXBvbmVudERpZE1vdW50KTtlbHNle2lmKG51bGw9PVAuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzJiZnIT09eSYmbnVsbCE9di5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzJiZ2LmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMoZyx4KSwhdi5fX2UmJm51bGwhPXYuc2hvdWxkQ29tcG9uZW50VXBkYXRlJiYhMT09PXYuc2hvdWxkQ29tcG9uZW50VXBkYXRlKGcsdi5fX3MseCl8fHUuX192PT09aS5fX3Ype3YucHJvcHM9Zyx2LnN0YXRlPXYuX19zLHUuX192IT09aS5fX3YmJih2Ll9fZD0hMSksdi5fX3Y9dSx1Ll9fZT1pLl9fZSx1Ll9faz1pLl9fayx2Ll9faC5sZW5ndGgmJmYucHVzaCh2KTticmVhayBufW51bGwhPXYuY29tcG9uZW50V2lsbFVwZGF0ZSYmdi5jb21wb25lbnRXaWxsVXBkYXRlKGcsdi5fX3MseCksbnVsbCE9di5jb21wb25lbnREaWRVcGRhdGUmJnYuX19oLnB1c2goZnVuY3Rpb24oKXt2LmNvbXBvbmVudERpZFVwZGF0ZSh5LF8sdyl9KX12LmNvbnRleHQ9eCx2LnByb3BzPWcsdi5zdGF0ZT12Ll9fcywoYT1uLl9fcikmJmEodSksdi5fX2Q9ITEsdi5fX3Y9dSx2Ll9fUD1sLGE9di5yZW5kZXIodi5wcm9wcyx2LnN0YXRlLHYuY29udGV4dCksdi5zdGF0ZT12Ll9fcyxudWxsIT12LmdldENoaWxkQ29udGV4dCYmKHQ9cyhzKHt9LHQpLHYuZ2V0Q2hpbGRDb250ZXh0KCkpKSxofHxudWxsPT12LmdldFNuYXBzaG90QmVmb3JlVXBkYXRlfHwodz12LmdldFNuYXBzaG90QmVmb3JlVXBkYXRlKHksXykpLEE9bnVsbCE9YSYmYS50eXBlPT09cCYmbnVsbD09YS5rZXk/YS5wcm9wcy5jaGlsZHJlbjphLG0obCxBcnJheS5pc0FycmF5KEEpP0E6W0FdLHUsaSx0LG8scixmLGUsYyksdi5iYXNlPXUuX19lLHUuX19oPW51bGwsdi5fX2gubGVuZ3RoJiZmLnB1c2godiksayYmKHYuX19FPXYuX189bnVsbCksdi5fX2U9ITF9ZWxzZSBudWxsPT1yJiZ1Ll9fdj09PWkuX192Pyh1Ll9faz1pLl9fayx1Ll9fZT1pLl9fZSk6dS5fX2U9SChpLl9fZSx1LGksdCxvLHIsZixjKTsoYT1uLmRpZmZlZCkmJmEodSl9Y2F0Y2gobCl7dS5fX3Y9bnVsbCwoY3x8bnVsbCE9cikmJih1Ll9fZT1lLHUuX19oPSEhYyxyW3IuaW5kZXhPZihlKV09bnVsbCksbi5fX2UobCx1LGkpfX1mdW5jdGlvbiBqKGwsdSl7bi5fX2MmJm4uX19jKHUsbCksbC5zb21lKGZ1bmN0aW9uKHUpe3RyeXtsPXUuX19oLHUuX19oPVtdLGwuc29tZShmdW5jdGlvbihuKXtuLmNhbGwodSl9KX1jYXRjaChsKXtuLl9fZShsLHUuX192KX19KX1mdW5jdGlvbiBIKG4sbCx1LGksdCxvLHIsYyl7dmFyIHMsYSx2LGgseSxwPXUucHJvcHMsZD1sLnByb3BzO2lmKHQ9XCJzdmdcIj09PWwudHlwZXx8dCxudWxsIT1vKWZvcihzPTA7czxvLmxlbmd0aDtzKyspaWYobnVsbCE9KGE9b1tzXSkmJigobnVsbD09PWwudHlwZT8zPT09YS5ub2RlVHlwZTphLmxvY2FsTmFtZT09PWwudHlwZSl8fG49PWEpKXtuPWEsb1tzXT1udWxsO2JyZWFrfWlmKG51bGw9PW4pe2lmKG51bGw9PT1sLnR5cGUpcmV0dXJuIGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKGQpO249dD9kb2N1bWVudC5jcmVhdGVFbGVtZW50TlMoXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiLGwudHlwZSk6ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChsLnR5cGUsZC5pcyYme2lzOmQuaXN9KSxvPW51bGwsYz0hMX1pZihudWxsPT09bC50eXBlKXA9PT1kfHxjJiZuLmRhdGE9PT1kfHwobi5kYXRhPWQpO2Vsc2V7aWYobnVsbCE9byYmKG89ZS5zbGljZS5jYWxsKG4uY2hpbGROb2RlcykpLHY9KHA9dS5wcm9wc3x8ZikuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwsaD1kLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MLCFjKXtpZihudWxsIT1vKWZvcihwPXt9LHk9MDt5PG4uYXR0cmlidXRlcy5sZW5ndGg7eSsrKXBbbi5hdHRyaWJ1dGVzW3ldLm5hbWVdPW4uYXR0cmlidXRlc1t5XS52YWx1ZTsoaHx8dikmJihoJiYodiYmaC5fX2h0bWw9PXYuX19odG1sfHxoLl9faHRtbD09PW4uaW5uZXJIVE1MKXx8KG4uaW5uZXJIVE1MPWgmJmguX19odG1sfHxcIlwiKSl9UChuLGQscCx0LGMpLGg/bC5fX2s9W106KHM9bC5wcm9wcy5jaGlsZHJlbixtKG4sQXJyYXkuaXNBcnJheShzKT9zOltzXSxsLHUsaSxcImZvcmVpZ25PYmplY3RcIiE9PWwudHlwZSYmdCxvLHIsZixjKSksY3x8KFwidmFsdWVcImluIGQmJnZvaWQgMCE9PShzPWQudmFsdWUpJiYocyE9PW4udmFsdWV8fFwicHJvZ3Jlc3NcIj09PWwudHlwZSYmIXMpJiZ6KG4sXCJ2YWx1ZVwiLHMscC52YWx1ZSwhMSksXCJjaGVja2VkXCJpbiBkJiZ2b2lkIDAhPT0ocz1kLmNoZWNrZWQpJiZzIT09bi5jaGVja2VkJiZ6KG4sXCJjaGVja2VkXCIscyxwLmNoZWNrZWQsITEpKX1yZXR1cm4gbn1mdW5jdGlvbiBJKGwsdSxpKXt0cnl7XCJmdW5jdGlvblwiPT10eXBlb2YgbD9sKHUpOmwuY3VycmVudD11fWNhdGNoKGwpe24uX19lKGwsaSl9fWZ1bmN0aW9uIEwobCx1LGkpe3ZhciB0LG8scjtpZihuLnVubW91bnQmJm4udW5tb3VudChsKSwodD1sLnJlZikmJih0LmN1cnJlbnQmJnQuY3VycmVudCE9PWwuX19lfHxJKHQsbnVsbCx1KSksaXx8XCJmdW5jdGlvblwiPT10eXBlb2YgbC50eXBlfHwoaT1udWxsIT0obz1sLl9fZSkpLGwuX19lPWwuX19kPXZvaWQgMCxudWxsIT0odD1sLl9fYykpe2lmKHQuY29tcG9uZW50V2lsbFVubW91bnQpdHJ5e3QuY29tcG9uZW50V2lsbFVubW91bnQoKX1jYXRjaChsKXtuLl9fZShsLHUpfXQuYmFzZT10Ll9fUD1udWxsfWlmKHQ9bC5fX2spZm9yKHI9MDtyPHQubGVuZ3RoO3IrKyl0W3JdJiZMKHRbcl0sdSxpKTtudWxsIT1vJiZhKG8pfWZ1bmN0aW9uIE0obixsLHUpe3JldHVybiB0aGlzLmNvbnN0cnVjdG9yKG4sdSl9ZnVuY3Rpb24gTyhsLHUsaSl7dmFyIHQscixjO24uX18mJm4uX18obCx1KSxyPSh0PWk9PT1vKT9udWxsOmkmJmkuX19rfHx1Ll9fayxsPXYocCxudWxsLFtsXSksYz1bXSwkKHUsKHQ/dTppfHx1KS5fX2s9bCxyfHxmLGYsdm9pZCAwIT09dS5vd25lclNWR0VsZW1lbnQsaSYmIXQ/W2ldOnI/bnVsbDp1LmNoaWxkTm9kZXMubGVuZ3RoP2Uuc2xpY2UuY2FsbCh1LmNoaWxkTm9kZXMpOm51bGwsYyxpfHxmLHQpLGooYyxsKX1mdW5jdGlvbiBTKG4sbCl7TyhuLGwsbyl9ZnVuY3Rpb24gcShuLGwsdSl7dmFyIGksdCxvLHI9YXJndW1lbnRzLGY9cyh7fSxuLnByb3BzKTtmb3IobyBpbiBsKVwia2V5XCI9PW8/aT1sW29dOlwicmVmXCI9PW8/dD1sW29dOmZbb109bFtvXTtpZihhcmd1bWVudHMubGVuZ3RoPjMpZm9yKHU9W3VdLG89MztvPGFyZ3VtZW50cy5sZW5ndGg7bysrKXUucHVzaChyW29dKTtyZXR1cm4gbnVsbCE9dSYmKGYuY2hpbGRyZW49dSksaChuLnR5cGUsZixpfHxuLmtleSx0fHxuLnJlZixudWxsKX1mdW5jdGlvbiBCKG4sbCl7dmFyIHU9e19fYzpsPVwiX19jQ1wiK3IrKyxfXzpuLENvbnN1bWVyOmZ1bmN0aW9uKG4sbCl7cmV0dXJuIG4uY2hpbGRyZW4obCl9LFByb3ZpZGVyOmZ1bmN0aW9uKG4pe3ZhciB1LGk7cmV0dXJuIHRoaXMuZ2V0Q2hpbGRDb250ZXh0fHwodT1bXSwoaT17fSlbbF09dGhpcyx0aGlzLmdldENoaWxkQ29udGV4dD1mdW5jdGlvbigpe3JldHVybiBpfSx0aGlzLnNob3VsZENvbXBvbmVudFVwZGF0ZT1mdW5jdGlvbihuKXt0aGlzLnByb3BzLnZhbHVlIT09bi52YWx1ZSYmdS5zb21lKGspfSx0aGlzLnN1Yj1mdW5jdGlvbihuKXt1LnB1c2gobik7dmFyIGw9bi5jb21wb25lbnRXaWxsVW5tb3VudDtuLmNvbXBvbmVudFdpbGxVbm1vdW50PWZ1bmN0aW9uKCl7dS5zcGxpY2UodS5pbmRleE9mKG4pLDEpLGwmJmwuY2FsbChuKX19KSxuLmNoaWxkcmVufX07cmV0dXJuIHUuUHJvdmlkZXIuX189dS5Db25zdW1lci5jb250ZXh0VHlwZT11fW49e19fZTpmdW5jdGlvbihuLGwpe2Zvcih2YXIgdSxpLHQsbz1sLl9faDtsPWwuX187KWlmKCh1PWwuX19jKSYmIXUuX18pdHJ5e2lmKChpPXUuY29uc3RydWN0b3IpJiZudWxsIT1pLmdldERlcml2ZWRTdGF0ZUZyb21FcnJvciYmKHUuc2V0U3RhdGUoaS5nZXREZXJpdmVkU3RhdGVGcm9tRXJyb3IobikpLHQ9dS5fX2QpLG51bGwhPXUuY29tcG9uZW50RGlkQ2F0Y2gmJih1LmNvbXBvbmVudERpZENhdGNoKG4pLHQ9dS5fX2QpLHQpcmV0dXJuIGwuX19oPW8sdS5fX0U9dX1jYXRjaChsKXtuPWx9dGhyb3cgbn0sX192OjB9LGw9ZnVuY3Rpb24obil7cmV0dXJuIG51bGwhPW4mJnZvaWQgMD09PW4uY29uc3RydWN0b3J9LGQucHJvdG90eXBlLnNldFN0YXRlPWZ1bmN0aW9uKG4sbCl7dmFyIHU7dT1udWxsIT10aGlzLl9fcyYmdGhpcy5fX3MhPT10aGlzLnN0YXRlP3RoaXMuX19zOnRoaXMuX19zPXMoe30sdGhpcy5zdGF0ZSksXCJmdW5jdGlvblwiPT10eXBlb2YgbiYmKG49bihzKHt9LHUpLHRoaXMucHJvcHMpKSxuJiZzKHUsbiksbnVsbCE9biYmdGhpcy5fX3YmJihsJiZ0aGlzLl9faC5wdXNoKGwpLGsodGhpcykpfSxkLnByb3RvdHlwZS5mb3JjZVVwZGF0ZT1mdW5jdGlvbihuKXt0aGlzLl9fdiYmKHRoaXMuX19lPSEwLG4mJnRoaXMuX19oLnB1c2gobiksayh0aGlzKSl9LGQucHJvdG90eXBlLnJlbmRlcj1wLHU9W10saT1cImZ1bmN0aW9uXCI9PXR5cGVvZiBQcm9taXNlP1Byb21pc2UucHJvdG90eXBlLnRoZW4uYmluZChQcm9taXNlLnJlc29sdmUoKSk6c2V0VGltZW91dCxnLl9fcj0wLG89ZixyPTA7ZXhwb3J0e08gYXMgcmVuZGVyLFMgYXMgaHlkcmF0ZSx2IGFzIGNyZWF0ZUVsZW1lbnQsdiBhcyBoLHAgYXMgRnJhZ21lbnQseSBhcyBjcmVhdGVSZWYsbCBhcyBpc1ZhbGlkRWxlbWVudCxkIGFzIENvbXBvbmVudCxxIGFzIGNsb25lRWxlbWVudCxCIGFzIGNyZWF0ZUNvbnRleHQseCBhcyB0b0NoaWxkQXJyYXksbiBhcyBvcHRpb25zfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXByZWFjdC5tb2R1bGUuanMubWFwXG4iLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxNC1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbnZhciBydW50aW1lID0gKGZ1bmN0aW9uIChleHBvcnRzKSB7XG4gIFwidXNlIHN0cmljdFwiO1xuXG4gIHZhciBPcCA9IE9iamVjdC5wcm90b3R5cGU7XG4gIHZhciBoYXNPd24gPSBPcC5oYXNPd25Qcm9wZXJ0eTtcbiAgdmFyIHVuZGVmaW5lZDsgLy8gTW9yZSBjb21wcmVzc2libGUgdGhhbiB2b2lkIDAuXG4gIHZhciAkU3ltYm9sID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiID8gU3ltYm9sIDoge307XG4gIHZhciBpdGVyYXRvclN5bWJvbCA9ICRTeW1ib2wuaXRlcmF0b3IgfHwgXCJAQGl0ZXJhdG9yXCI7XG4gIHZhciBhc3luY0l0ZXJhdG9yU3ltYm9sID0gJFN5bWJvbC5hc3luY0l0ZXJhdG9yIHx8IFwiQEBhc3luY0l0ZXJhdG9yXCI7XG4gIHZhciB0b1N0cmluZ1RhZ1N5bWJvbCA9ICRTeW1ib2wudG9TdHJpbmdUYWcgfHwgXCJAQHRvU3RyaW5nVGFnXCI7XG5cbiAgZnVuY3Rpb24gZGVmaW5lKG9iaiwga2V5LCB2YWx1ZSkge1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwge1xuICAgICAgdmFsdWU6IHZhbHVlLFxuICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgIHdyaXRhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgcmV0dXJuIG9ialtrZXldO1xuICB9XG4gIHRyeSB7XG4gICAgLy8gSUUgOCBoYXMgYSBicm9rZW4gT2JqZWN0LmRlZmluZVByb3BlcnR5IHRoYXQgb25seSB3b3JrcyBvbiBET00gb2JqZWN0cy5cbiAgICBkZWZpbmUoe30sIFwiXCIpO1xuICB9IGNhdGNoIChlcnIpIHtcbiAgICBkZWZpbmUgPSBmdW5jdGlvbihvYmosIGtleSwgdmFsdWUpIHtcbiAgICAgIHJldHVybiBvYmpba2V5XSA9IHZhbHVlO1xuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiB3cmFwKGlubmVyRm4sIG91dGVyRm4sIHNlbGYsIHRyeUxvY3NMaXN0KSB7XG4gICAgLy8gSWYgb3V0ZXJGbiBwcm92aWRlZCBhbmQgb3V0ZXJGbi5wcm90b3R5cGUgaXMgYSBHZW5lcmF0b3IsIHRoZW4gb3V0ZXJGbi5wcm90b3R5cGUgaW5zdGFuY2VvZiBHZW5lcmF0b3IuXG4gICAgdmFyIHByb3RvR2VuZXJhdG9yID0gb3V0ZXJGbiAmJiBvdXRlckZuLnByb3RvdHlwZSBpbnN0YW5jZW9mIEdlbmVyYXRvciA/IG91dGVyRm4gOiBHZW5lcmF0b3I7XG4gICAgdmFyIGdlbmVyYXRvciA9IE9iamVjdC5jcmVhdGUocHJvdG9HZW5lcmF0b3IucHJvdG90eXBlKTtcbiAgICB2YXIgY29udGV4dCA9IG5ldyBDb250ZXh0KHRyeUxvY3NMaXN0IHx8IFtdKTtcblxuICAgIC8vIFRoZSAuX2ludm9rZSBtZXRob2QgdW5pZmllcyB0aGUgaW1wbGVtZW50YXRpb25zIG9mIHRoZSAubmV4dCxcbiAgICAvLyAudGhyb3csIGFuZCAucmV0dXJuIG1ldGhvZHMuXG4gICAgZ2VuZXJhdG9yLl9pbnZva2UgPSBtYWtlSW52b2tlTWV0aG9kKGlubmVyRm4sIHNlbGYsIGNvbnRleHQpO1xuXG4gICAgcmV0dXJuIGdlbmVyYXRvcjtcbiAgfVxuICBleHBvcnRzLndyYXAgPSB3cmFwO1xuXG4gIC8vIFRyeS9jYXRjaCBoZWxwZXIgdG8gbWluaW1pemUgZGVvcHRpbWl6YXRpb25zLiBSZXR1cm5zIGEgY29tcGxldGlvblxuICAvLyByZWNvcmQgbGlrZSBjb250ZXh0LnRyeUVudHJpZXNbaV0uY29tcGxldGlvbi4gVGhpcyBpbnRlcmZhY2UgY291bGRcbiAgLy8gaGF2ZSBiZWVuIChhbmQgd2FzIHByZXZpb3VzbHkpIGRlc2lnbmVkIHRvIHRha2UgYSBjbG9zdXJlIHRvIGJlXG4gIC8vIGludm9rZWQgd2l0aG91dCBhcmd1bWVudHMsIGJ1dCBpbiBhbGwgdGhlIGNhc2VzIHdlIGNhcmUgYWJvdXQgd2VcbiAgLy8gYWxyZWFkeSBoYXZlIGFuIGV4aXN0aW5nIG1ldGhvZCB3ZSB3YW50IHRvIGNhbGwsIHNvIHRoZXJlJ3Mgbm8gbmVlZFxuICAvLyB0byBjcmVhdGUgYSBuZXcgZnVuY3Rpb24gb2JqZWN0LiBXZSBjYW4gZXZlbiBnZXQgYXdheSB3aXRoIGFzc3VtaW5nXG4gIC8vIHRoZSBtZXRob2QgdGFrZXMgZXhhY3RseSBvbmUgYXJndW1lbnQsIHNpbmNlIHRoYXQgaGFwcGVucyB0byBiZSB0cnVlXG4gIC8vIGluIGV2ZXJ5IGNhc2UsIHNvIHdlIGRvbid0IGhhdmUgdG8gdG91Y2ggdGhlIGFyZ3VtZW50cyBvYmplY3QuIFRoZVxuICAvLyBvbmx5IGFkZGl0aW9uYWwgYWxsb2NhdGlvbiByZXF1aXJlZCBpcyB0aGUgY29tcGxldGlvbiByZWNvcmQsIHdoaWNoXG4gIC8vIGhhcyBhIHN0YWJsZSBzaGFwZSBhbmQgc28gaG9wZWZ1bGx5IHNob3VsZCBiZSBjaGVhcCB0byBhbGxvY2F0ZS5cbiAgZnVuY3Rpb24gdHJ5Q2F0Y2goZm4sIG9iaiwgYXJnKSB7XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiB7IHR5cGU6IFwibm9ybWFsXCIsIGFyZzogZm4uY2FsbChvYmosIGFyZykgfTtcbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIHJldHVybiB7IHR5cGU6IFwidGhyb3dcIiwgYXJnOiBlcnIgfTtcbiAgICB9XG4gIH1cblxuICB2YXIgR2VuU3RhdGVTdXNwZW5kZWRTdGFydCA9IFwic3VzcGVuZGVkU3RhcnRcIjtcbiAgdmFyIEdlblN0YXRlU3VzcGVuZGVkWWllbGQgPSBcInN1c3BlbmRlZFlpZWxkXCI7XG4gIHZhciBHZW5TdGF0ZUV4ZWN1dGluZyA9IFwiZXhlY3V0aW5nXCI7XG4gIHZhciBHZW5TdGF0ZUNvbXBsZXRlZCA9IFwiY29tcGxldGVkXCI7XG5cbiAgLy8gUmV0dXJuaW5nIHRoaXMgb2JqZWN0IGZyb20gdGhlIGlubmVyRm4gaGFzIHRoZSBzYW1lIGVmZmVjdCBhc1xuICAvLyBicmVha2luZyBvdXQgb2YgdGhlIGRpc3BhdGNoIHN3aXRjaCBzdGF0ZW1lbnQuXG4gIHZhciBDb250aW51ZVNlbnRpbmVsID0ge307XG5cbiAgLy8gRHVtbXkgY29uc3RydWN0b3IgZnVuY3Rpb25zIHRoYXQgd2UgdXNlIGFzIHRoZSAuY29uc3RydWN0b3IgYW5kXG4gIC8vIC5jb25zdHJ1Y3Rvci5wcm90b3R5cGUgcHJvcGVydGllcyBmb3IgZnVuY3Rpb25zIHRoYXQgcmV0dXJuIEdlbmVyYXRvclxuICAvLyBvYmplY3RzLiBGb3IgZnVsbCBzcGVjIGNvbXBsaWFuY2UsIHlvdSBtYXkgd2lzaCB0byBjb25maWd1cmUgeW91clxuICAvLyBtaW5pZmllciBub3QgdG8gbWFuZ2xlIHRoZSBuYW1lcyBvZiB0aGVzZSB0d28gZnVuY3Rpb25zLlxuICBmdW5jdGlvbiBHZW5lcmF0b3IoKSB7fVxuICBmdW5jdGlvbiBHZW5lcmF0b3JGdW5jdGlvbigpIHt9XG4gIGZ1bmN0aW9uIEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlKCkge31cblxuICAvLyBUaGlzIGlzIGEgcG9seWZpbGwgZm9yICVJdGVyYXRvclByb3RvdHlwZSUgZm9yIGVudmlyb25tZW50cyB0aGF0XG4gIC8vIGRvbid0IG5hdGl2ZWx5IHN1cHBvcnQgaXQuXG4gIHZhciBJdGVyYXRvclByb3RvdHlwZSA9IHt9O1xuICBJdGVyYXRvclByb3RvdHlwZVtpdGVyYXRvclN5bWJvbF0gPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgdmFyIGdldFByb3RvID0gT2JqZWN0LmdldFByb3RvdHlwZU9mO1xuICB2YXIgTmF0aXZlSXRlcmF0b3JQcm90b3R5cGUgPSBnZXRQcm90byAmJiBnZXRQcm90byhnZXRQcm90byh2YWx1ZXMoW10pKSk7XG4gIGlmIChOYXRpdmVJdGVyYXRvclByb3RvdHlwZSAmJlxuICAgICAgTmF0aXZlSXRlcmF0b3JQcm90b3R5cGUgIT09IE9wICYmXG4gICAgICBoYXNPd24uY2FsbChOYXRpdmVJdGVyYXRvclByb3RvdHlwZSwgaXRlcmF0b3JTeW1ib2wpKSB7XG4gICAgLy8gVGhpcyBlbnZpcm9ubWVudCBoYXMgYSBuYXRpdmUgJUl0ZXJhdG9yUHJvdG90eXBlJTsgdXNlIGl0IGluc3RlYWRcbiAgICAvLyBvZiB0aGUgcG9seWZpbGwuXG4gICAgSXRlcmF0b3JQcm90b3R5cGUgPSBOYXRpdmVJdGVyYXRvclByb3RvdHlwZTtcbiAgfVxuXG4gIHZhciBHcCA9IEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlLnByb3RvdHlwZSA9XG4gICAgR2VuZXJhdG9yLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoSXRlcmF0b3JQcm90b3R5cGUpO1xuICBHZW5lcmF0b3JGdW5jdGlvbi5wcm90b3R5cGUgPSBHcC5jb25zdHJ1Y3RvciA9IEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlO1xuICBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IEdlbmVyYXRvckZ1bmN0aW9uO1xuICBHZW5lcmF0b3JGdW5jdGlvbi5kaXNwbGF5TmFtZSA9IGRlZmluZShcbiAgICBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZSxcbiAgICB0b1N0cmluZ1RhZ1N5bWJvbCxcbiAgICBcIkdlbmVyYXRvckZ1bmN0aW9uXCJcbiAgKTtcblxuICAvLyBIZWxwZXIgZm9yIGRlZmluaW5nIHRoZSAubmV4dCwgLnRocm93LCBhbmQgLnJldHVybiBtZXRob2RzIG9mIHRoZVxuICAvLyBJdGVyYXRvciBpbnRlcmZhY2UgaW4gdGVybXMgb2YgYSBzaW5nbGUgLl9pbnZva2UgbWV0aG9kLlxuICBmdW5jdGlvbiBkZWZpbmVJdGVyYXRvck1ldGhvZHMocHJvdG90eXBlKSB7XG4gICAgW1wibmV4dFwiLCBcInRocm93XCIsIFwicmV0dXJuXCJdLmZvckVhY2goZnVuY3Rpb24obWV0aG9kKSB7XG4gICAgICBkZWZpbmUocHJvdG90eXBlLCBtZXRob2QsIGZ1bmN0aW9uKGFyZykge1xuICAgICAgICByZXR1cm4gdGhpcy5faW52b2tlKG1ldGhvZCwgYXJnKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG5cbiAgZXhwb3J0cy5pc0dlbmVyYXRvckZ1bmN0aW9uID0gZnVuY3Rpb24oZ2VuRnVuKSB7XG4gICAgdmFyIGN0b3IgPSB0eXBlb2YgZ2VuRnVuID09PSBcImZ1bmN0aW9uXCIgJiYgZ2VuRnVuLmNvbnN0cnVjdG9yO1xuICAgIHJldHVybiBjdG9yXG4gICAgICA/IGN0b3IgPT09IEdlbmVyYXRvckZ1bmN0aW9uIHx8XG4gICAgICAgIC8vIEZvciB0aGUgbmF0aXZlIEdlbmVyYXRvckZ1bmN0aW9uIGNvbnN0cnVjdG9yLCB0aGUgYmVzdCB3ZSBjYW5cbiAgICAgICAgLy8gZG8gaXMgdG8gY2hlY2sgaXRzIC5uYW1lIHByb3BlcnR5LlxuICAgICAgICAoY3Rvci5kaXNwbGF5TmFtZSB8fCBjdG9yLm5hbWUpID09PSBcIkdlbmVyYXRvckZ1bmN0aW9uXCJcbiAgICAgIDogZmFsc2U7XG4gIH07XG5cbiAgZXhwb3J0cy5tYXJrID0gZnVuY3Rpb24oZ2VuRnVuKSB7XG4gICAgaWYgKE9iamVjdC5zZXRQcm90b3R5cGVPZikge1xuICAgICAgT2JqZWN0LnNldFByb3RvdHlwZU9mKGdlbkZ1biwgR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUpO1xuICAgIH0gZWxzZSB7XG4gICAgICBnZW5GdW4uX19wcm90b19fID0gR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGU7XG4gICAgICBkZWZpbmUoZ2VuRnVuLCB0b1N0cmluZ1RhZ1N5bWJvbCwgXCJHZW5lcmF0b3JGdW5jdGlvblwiKTtcbiAgICB9XG4gICAgZ2VuRnVuLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoR3ApO1xuICAgIHJldHVybiBnZW5GdW47XG4gIH07XG5cbiAgLy8gV2l0aGluIHRoZSBib2R5IG9mIGFueSBhc3luYyBmdW5jdGlvbiwgYGF3YWl0IHhgIGlzIHRyYW5zZm9ybWVkIHRvXG4gIC8vIGB5aWVsZCByZWdlbmVyYXRvclJ1bnRpbWUuYXdyYXAoeClgLCBzbyB0aGF0IHRoZSBydW50aW1lIGNhbiB0ZXN0XG4gIC8vIGBoYXNPd24uY2FsbCh2YWx1ZSwgXCJfX2F3YWl0XCIpYCB0byBkZXRlcm1pbmUgaWYgdGhlIHlpZWxkZWQgdmFsdWUgaXNcbiAgLy8gbWVhbnQgdG8gYmUgYXdhaXRlZC5cbiAgZXhwb3J0cy5hd3JhcCA9IGZ1bmN0aW9uKGFyZykge1xuICAgIHJldHVybiB7IF9fYXdhaXQ6IGFyZyB9O1xuICB9O1xuXG4gIGZ1bmN0aW9uIEFzeW5jSXRlcmF0b3IoZ2VuZXJhdG9yLCBQcm9taXNlSW1wbCkge1xuICAgIGZ1bmN0aW9uIGludm9rZShtZXRob2QsIGFyZywgcmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICB2YXIgcmVjb3JkID0gdHJ5Q2F0Y2goZ2VuZXJhdG9yW21ldGhvZF0sIGdlbmVyYXRvciwgYXJnKTtcbiAgICAgIGlmIChyZWNvcmQudHlwZSA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgIHJlamVjdChyZWNvcmQuYXJnKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciByZXN1bHQgPSByZWNvcmQuYXJnO1xuICAgICAgICB2YXIgdmFsdWUgPSByZXN1bHQudmFsdWU7XG4gICAgICAgIGlmICh2YWx1ZSAmJlxuICAgICAgICAgICAgdHlwZW9mIHZhbHVlID09PSBcIm9iamVjdFwiICYmXG4gICAgICAgICAgICBoYXNPd24uY2FsbCh2YWx1ZSwgXCJfX2F3YWl0XCIpKSB7XG4gICAgICAgICAgcmV0dXJuIFByb21pc2VJbXBsLnJlc29sdmUodmFsdWUuX19hd2FpdCkudGhlbihmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICAgICAgaW52b2tlKFwibmV4dFwiLCB2YWx1ZSwgcmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgICAgICB9LCBmdW5jdGlvbihlcnIpIHtcbiAgICAgICAgICAgIGludm9rZShcInRocm93XCIsIGVyciwgcmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBQcm9taXNlSW1wbC5yZXNvbHZlKHZhbHVlKS50aGVuKGZ1bmN0aW9uKHVud3JhcHBlZCkge1xuICAgICAgICAgIC8vIFdoZW4gYSB5aWVsZGVkIFByb21pc2UgaXMgcmVzb2x2ZWQsIGl0cyBmaW5hbCB2YWx1ZSBiZWNvbWVzXG4gICAgICAgICAgLy8gdGhlIC52YWx1ZSBvZiB0aGUgUHJvbWlzZTx7dmFsdWUsZG9uZX0+IHJlc3VsdCBmb3IgdGhlXG4gICAgICAgICAgLy8gY3VycmVudCBpdGVyYXRpb24uXG4gICAgICAgICAgcmVzdWx0LnZhbHVlID0gdW53cmFwcGVkO1xuICAgICAgICAgIHJlc29sdmUocmVzdWx0KTtcbiAgICAgICAgfSwgZnVuY3Rpb24oZXJyb3IpIHtcbiAgICAgICAgICAvLyBJZiBhIHJlamVjdGVkIFByb21pc2Ugd2FzIHlpZWxkZWQsIHRocm93IHRoZSByZWplY3Rpb24gYmFja1xuICAgICAgICAgIC8vIGludG8gdGhlIGFzeW5jIGdlbmVyYXRvciBmdW5jdGlvbiBzbyBpdCBjYW4gYmUgaGFuZGxlZCB0aGVyZS5cbiAgICAgICAgICByZXR1cm4gaW52b2tlKFwidGhyb3dcIiwgZXJyb3IsIHJlc29sdmUsIHJlamVjdCk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIHZhciBwcmV2aW91c1Byb21pc2U7XG5cbiAgICBmdW5jdGlvbiBlbnF1ZXVlKG1ldGhvZCwgYXJnKSB7XG4gICAgICBmdW5jdGlvbiBjYWxsSW52b2tlV2l0aE1ldGhvZEFuZEFyZygpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlSW1wbChmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgICBpbnZva2UobWV0aG9kLCBhcmcsIHJlc29sdmUsIHJlamVjdCk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gcHJldmlvdXNQcm9taXNlID1cbiAgICAgICAgLy8gSWYgZW5xdWV1ZSBoYXMgYmVlbiBjYWxsZWQgYmVmb3JlLCB0aGVuIHdlIHdhbnQgdG8gd2FpdCB1bnRpbFxuICAgICAgICAvLyBhbGwgcHJldmlvdXMgUHJvbWlzZXMgaGF2ZSBiZWVuIHJlc29sdmVkIGJlZm9yZSBjYWxsaW5nIGludm9rZSxcbiAgICAgICAgLy8gc28gdGhhdCByZXN1bHRzIGFyZSBhbHdheXMgZGVsaXZlcmVkIGluIHRoZSBjb3JyZWN0IG9yZGVyLiBJZlxuICAgICAgICAvLyBlbnF1ZXVlIGhhcyBub3QgYmVlbiBjYWxsZWQgYmVmb3JlLCB0aGVuIGl0IGlzIGltcG9ydGFudCB0b1xuICAgICAgICAvLyBjYWxsIGludm9rZSBpbW1lZGlhdGVseSwgd2l0aG91dCB3YWl0aW5nIG9uIGEgY2FsbGJhY2sgdG8gZmlyZSxcbiAgICAgICAgLy8gc28gdGhhdCB0aGUgYXN5bmMgZ2VuZXJhdG9yIGZ1bmN0aW9uIGhhcyB0aGUgb3Bwb3J0dW5pdHkgdG8gZG9cbiAgICAgICAgLy8gYW55IG5lY2Vzc2FyeSBzZXR1cCBpbiBhIHByZWRpY3RhYmxlIHdheS4gVGhpcyBwcmVkaWN0YWJpbGl0eVxuICAgICAgICAvLyBpcyB3aHkgdGhlIFByb21pc2UgY29uc3RydWN0b3Igc3luY2hyb25vdXNseSBpbnZva2VzIGl0c1xuICAgICAgICAvLyBleGVjdXRvciBjYWxsYmFjaywgYW5kIHdoeSBhc3luYyBmdW5jdGlvbnMgc3luY2hyb25vdXNseVxuICAgICAgICAvLyBleGVjdXRlIGNvZGUgYmVmb3JlIHRoZSBmaXJzdCBhd2FpdC4gU2luY2Ugd2UgaW1wbGVtZW50IHNpbXBsZVxuICAgICAgICAvLyBhc3luYyBmdW5jdGlvbnMgaW4gdGVybXMgb2YgYXN5bmMgZ2VuZXJhdG9ycywgaXQgaXMgZXNwZWNpYWxseVxuICAgICAgICAvLyBpbXBvcnRhbnQgdG8gZ2V0IHRoaXMgcmlnaHQsIGV2ZW4gdGhvdWdoIGl0IHJlcXVpcmVzIGNhcmUuXG4gICAgICAgIHByZXZpb3VzUHJvbWlzZSA/IHByZXZpb3VzUHJvbWlzZS50aGVuKFxuICAgICAgICAgIGNhbGxJbnZva2VXaXRoTWV0aG9kQW5kQXJnLFxuICAgICAgICAgIC8vIEF2b2lkIHByb3BhZ2F0aW5nIGZhaWx1cmVzIHRvIFByb21pc2VzIHJldHVybmVkIGJ5IGxhdGVyXG4gICAgICAgICAgLy8gaW52b2NhdGlvbnMgb2YgdGhlIGl0ZXJhdG9yLlxuICAgICAgICAgIGNhbGxJbnZva2VXaXRoTWV0aG9kQW5kQXJnXG4gICAgICAgICkgOiBjYWxsSW52b2tlV2l0aE1ldGhvZEFuZEFyZygpO1xuICAgIH1cblxuICAgIC8vIERlZmluZSB0aGUgdW5pZmllZCBoZWxwZXIgbWV0aG9kIHRoYXQgaXMgdXNlZCB0byBpbXBsZW1lbnQgLm5leHQsXG4gICAgLy8gLnRocm93LCBhbmQgLnJldHVybiAoc2VlIGRlZmluZUl0ZXJhdG9yTWV0aG9kcykuXG4gICAgdGhpcy5faW52b2tlID0gZW5xdWV1ZTtcbiAgfVxuXG4gIGRlZmluZUl0ZXJhdG9yTWV0aG9kcyhBc3luY0l0ZXJhdG9yLnByb3RvdHlwZSk7XG4gIEFzeW5jSXRlcmF0b3IucHJvdG90eXBlW2FzeW5jSXRlcmF0b3JTeW1ib2xdID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzO1xuICB9O1xuICBleHBvcnRzLkFzeW5jSXRlcmF0b3IgPSBBc3luY0l0ZXJhdG9yO1xuXG4gIC8vIE5vdGUgdGhhdCBzaW1wbGUgYXN5bmMgZnVuY3Rpb25zIGFyZSBpbXBsZW1lbnRlZCBvbiB0b3Agb2ZcbiAgLy8gQXN5bmNJdGVyYXRvciBvYmplY3RzOyB0aGV5IGp1c3QgcmV0dXJuIGEgUHJvbWlzZSBmb3IgdGhlIHZhbHVlIG9mXG4gIC8vIHRoZSBmaW5hbCByZXN1bHQgcHJvZHVjZWQgYnkgdGhlIGl0ZXJhdG9yLlxuICBleHBvcnRzLmFzeW5jID0gZnVuY3Rpb24oaW5uZXJGbiwgb3V0ZXJGbiwgc2VsZiwgdHJ5TG9jc0xpc3QsIFByb21pc2VJbXBsKSB7XG4gICAgaWYgKFByb21pc2VJbXBsID09PSB2b2lkIDApIFByb21pc2VJbXBsID0gUHJvbWlzZTtcblxuICAgIHZhciBpdGVyID0gbmV3IEFzeW5jSXRlcmF0b3IoXG4gICAgICB3cmFwKGlubmVyRm4sIG91dGVyRm4sIHNlbGYsIHRyeUxvY3NMaXN0KSxcbiAgICAgIFByb21pc2VJbXBsXG4gICAgKTtcblxuICAgIHJldHVybiBleHBvcnRzLmlzR2VuZXJhdG9yRnVuY3Rpb24ob3V0ZXJGbilcbiAgICAgID8gaXRlciAvLyBJZiBvdXRlckZuIGlzIGEgZ2VuZXJhdG9yLCByZXR1cm4gdGhlIGZ1bGwgaXRlcmF0b3IuXG4gICAgICA6IGl0ZXIubmV4dCgpLnRoZW4oZnVuY3Rpb24ocmVzdWx0KSB7XG4gICAgICAgICAgcmV0dXJuIHJlc3VsdC5kb25lID8gcmVzdWx0LnZhbHVlIDogaXRlci5uZXh0KCk7XG4gICAgICAgIH0pO1xuICB9O1xuXG4gIGZ1bmN0aW9uIG1ha2VJbnZva2VNZXRob2QoaW5uZXJGbiwgc2VsZiwgY29udGV4dCkge1xuICAgIHZhciBzdGF0ZSA9IEdlblN0YXRlU3VzcGVuZGVkU3RhcnQ7XG5cbiAgICByZXR1cm4gZnVuY3Rpb24gaW52b2tlKG1ldGhvZCwgYXJnKSB7XG4gICAgICBpZiAoc3RhdGUgPT09IEdlblN0YXRlRXhlY3V0aW5nKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIkdlbmVyYXRvciBpcyBhbHJlYWR5IHJ1bm5pbmdcIik7XG4gICAgICB9XG5cbiAgICAgIGlmIChzdGF0ZSA9PT0gR2VuU3RhdGVDb21wbGV0ZWQpIHtcbiAgICAgICAgaWYgKG1ldGhvZCA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgICAgdGhyb3cgYXJnO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gQmUgZm9yZ2l2aW5nLCBwZXIgMjUuMy4zLjMuMyBvZiB0aGUgc3BlYzpcbiAgICAgICAgLy8gaHR0cHM6Ly9wZW9wbGUubW96aWxsYS5vcmcvfmpvcmVuZG9yZmYvZXM2LWRyYWZ0Lmh0bWwjc2VjLWdlbmVyYXRvcnJlc3VtZVxuICAgICAgICByZXR1cm4gZG9uZVJlc3VsdCgpO1xuICAgICAgfVxuXG4gICAgICBjb250ZXh0Lm1ldGhvZCA9IG1ldGhvZDtcbiAgICAgIGNvbnRleHQuYXJnID0gYXJnO1xuXG4gICAgICB3aGlsZSAodHJ1ZSkge1xuICAgICAgICB2YXIgZGVsZWdhdGUgPSBjb250ZXh0LmRlbGVnYXRlO1xuICAgICAgICBpZiAoZGVsZWdhdGUpIHtcbiAgICAgICAgICB2YXIgZGVsZWdhdGVSZXN1bHQgPSBtYXliZUludm9rZURlbGVnYXRlKGRlbGVnYXRlLCBjb250ZXh0KTtcbiAgICAgICAgICBpZiAoZGVsZWdhdGVSZXN1bHQpIHtcbiAgICAgICAgICAgIGlmIChkZWxlZ2F0ZVJlc3VsdCA9PT0gQ29udGludWVTZW50aW5lbCkgY29udGludWU7XG4gICAgICAgICAgICByZXR1cm4gZGVsZWdhdGVSZXN1bHQ7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGNvbnRleHQubWV0aG9kID09PSBcIm5leHRcIikge1xuICAgICAgICAgIC8vIFNldHRpbmcgY29udGV4dC5fc2VudCBmb3IgbGVnYWN5IHN1cHBvcnQgb2YgQmFiZWwnc1xuICAgICAgICAgIC8vIGZ1bmN0aW9uLnNlbnQgaW1wbGVtZW50YXRpb24uXG4gICAgICAgICAgY29udGV4dC5zZW50ID0gY29udGV4dC5fc2VudCA9IGNvbnRleHQuYXJnO1xuXG4gICAgICAgIH0gZWxzZSBpZiAoY29udGV4dC5tZXRob2QgPT09IFwidGhyb3dcIikge1xuICAgICAgICAgIGlmIChzdGF0ZSA9PT0gR2VuU3RhdGVTdXNwZW5kZWRTdGFydCkge1xuICAgICAgICAgICAgc3RhdGUgPSBHZW5TdGF0ZUNvbXBsZXRlZDtcbiAgICAgICAgICAgIHRocm93IGNvbnRleHQuYXJnO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGNvbnRleHQuZGlzcGF0Y2hFeGNlcHRpb24oY29udGV4dC5hcmcpO1xuXG4gICAgICAgIH0gZWxzZSBpZiAoY29udGV4dC5tZXRob2QgPT09IFwicmV0dXJuXCIpIHtcbiAgICAgICAgICBjb250ZXh0LmFicnVwdChcInJldHVyblwiLCBjb250ZXh0LmFyZyk7XG4gICAgICAgIH1cblxuICAgICAgICBzdGF0ZSA9IEdlblN0YXRlRXhlY3V0aW5nO1xuXG4gICAgICAgIHZhciByZWNvcmQgPSB0cnlDYXRjaChpbm5lckZuLCBzZWxmLCBjb250ZXh0KTtcbiAgICAgICAgaWYgKHJlY29yZC50eXBlID09PSBcIm5vcm1hbFwiKSB7XG4gICAgICAgICAgLy8gSWYgYW4gZXhjZXB0aW9uIGlzIHRocm93biBmcm9tIGlubmVyRm4sIHdlIGxlYXZlIHN0YXRlID09PVxuICAgICAgICAgIC8vIEdlblN0YXRlRXhlY3V0aW5nIGFuZCBsb29wIGJhY2sgZm9yIGFub3RoZXIgaW52b2NhdGlvbi5cbiAgICAgICAgICBzdGF0ZSA9IGNvbnRleHQuZG9uZVxuICAgICAgICAgICAgPyBHZW5TdGF0ZUNvbXBsZXRlZFxuICAgICAgICAgICAgOiBHZW5TdGF0ZVN1c3BlbmRlZFlpZWxkO1xuXG4gICAgICAgICAgaWYgKHJlY29yZC5hcmcgPT09IENvbnRpbnVlU2VudGluZWwpIHtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB2YWx1ZTogcmVjb3JkLmFyZyxcbiAgICAgICAgICAgIGRvbmU6IGNvbnRleHQuZG9uZVxuICAgICAgICAgIH07XG5cbiAgICAgICAgfSBlbHNlIGlmIChyZWNvcmQudHlwZSA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgICAgc3RhdGUgPSBHZW5TdGF0ZUNvbXBsZXRlZDtcbiAgICAgICAgICAvLyBEaXNwYXRjaCB0aGUgZXhjZXB0aW9uIGJ5IGxvb3BpbmcgYmFjayBhcm91bmQgdG8gdGhlXG4gICAgICAgICAgLy8gY29udGV4dC5kaXNwYXRjaEV4Y2VwdGlvbihjb250ZXh0LmFyZykgY2FsbCBhYm92ZS5cbiAgICAgICAgICBjb250ZXh0Lm1ldGhvZCA9IFwidGhyb3dcIjtcbiAgICAgICAgICBjb250ZXh0LmFyZyA9IHJlY29yZC5hcmc7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuICB9XG5cbiAgLy8gQ2FsbCBkZWxlZ2F0ZS5pdGVyYXRvcltjb250ZXh0Lm1ldGhvZF0oY29udGV4dC5hcmcpIGFuZCBoYW5kbGUgdGhlXG4gIC8vIHJlc3VsdCwgZWl0aGVyIGJ5IHJldHVybmluZyBhIHsgdmFsdWUsIGRvbmUgfSByZXN1bHQgZnJvbSB0aGVcbiAgLy8gZGVsZWdhdGUgaXRlcmF0b3IsIG9yIGJ5IG1vZGlmeWluZyBjb250ZXh0Lm1ldGhvZCBhbmQgY29udGV4dC5hcmcsXG4gIC8vIHNldHRpbmcgY29udGV4dC5kZWxlZ2F0ZSB0byBudWxsLCBhbmQgcmV0dXJuaW5nIHRoZSBDb250aW51ZVNlbnRpbmVsLlxuICBmdW5jdGlvbiBtYXliZUludm9rZURlbGVnYXRlKGRlbGVnYXRlLCBjb250ZXh0KSB7XG4gICAgdmFyIG1ldGhvZCA9IGRlbGVnYXRlLml0ZXJhdG9yW2NvbnRleHQubWV0aG9kXTtcbiAgICBpZiAobWV0aG9kID09PSB1bmRlZmluZWQpIHtcbiAgICAgIC8vIEEgLnRocm93IG9yIC5yZXR1cm4gd2hlbiB0aGUgZGVsZWdhdGUgaXRlcmF0b3IgaGFzIG5vIC50aHJvd1xuICAgICAgLy8gbWV0aG9kIGFsd2F5cyB0ZXJtaW5hdGVzIHRoZSB5aWVsZCogbG9vcC5cbiAgICAgIGNvbnRleHQuZGVsZWdhdGUgPSBudWxsO1xuXG4gICAgICBpZiAoY29udGV4dC5tZXRob2QgPT09IFwidGhyb3dcIikge1xuICAgICAgICAvLyBOb3RlOiBbXCJyZXR1cm5cIl0gbXVzdCBiZSB1c2VkIGZvciBFUzMgcGFyc2luZyBjb21wYXRpYmlsaXR5LlxuICAgICAgICBpZiAoZGVsZWdhdGUuaXRlcmF0b3JbXCJyZXR1cm5cIl0pIHtcbiAgICAgICAgICAvLyBJZiB0aGUgZGVsZWdhdGUgaXRlcmF0b3IgaGFzIGEgcmV0dXJuIG1ldGhvZCwgZ2l2ZSBpdCBhXG4gICAgICAgICAgLy8gY2hhbmNlIHRvIGNsZWFuIHVwLlxuICAgICAgICAgIGNvbnRleHQubWV0aG9kID0gXCJyZXR1cm5cIjtcbiAgICAgICAgICBjb250ZXh0LmFyZyA9IHVuZGVmaW5lZDtcbiAgICAgICAgICBtYXliZUludm9rZURlbGVnYXRlKGRlbGVnYXRlLCBjb250ZXh0KTtcblxuICAgICAgICAgIGlmIChjb250ZXh0Lm1ldGhvZCA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgICAgICAvLyBJZiBtYXliZUludm9rZURlbGVnYXRlKGNvbnRleHQpIGNoYW5nZWQgY29udGV4dC5tZXRob2QgZnJvbVxuICAgICAgICAgICAgLy8gXCJyZXR1cm5cIiB0byBcInRocm93XCIsIGxldCB0aGF0IG92ZXJyaWRlIHRoZSBUeXBlRXJyb3IgYmVsb3cuXG4gICAgICAgICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBjb250ZXh0Lm1ldGhvZCA9IFwidGhyb3dcIjtcbiAgICAgICAgY29udGV4dC5hcmcgPSBuZXcgVHlwZUVycm9yKFxuICAgICAgICAgIFwiVGhlIGl0ZXJhdG9yIGRvZXMgbm90IHByb3ZpZGUgYSAndGhyb3cnIG1ldGhvZFwiKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgfVxuXG4gICAgdmFyIHJlY29yZCA9IHRyeUNhdGNoKG1ldGhvZCwgZGVsZWdhdGUuaXRlcmF0b3IsIGNvbnRleHQuYXJnKTtcblxuICAgIGlmIChyZWNvcmQudHlwZSA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICBjb250ZXh0Lm1ldGhvZCA9IFwidGhyb3dcIjtcbiAgICAgIGNvbnRleHQuYXJnID0gcmVjb3JkLmFyZztcbiAgICAgIGNvbnRleHQuZGVsZWdhdGUgPSBudWxsO1xuICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgfVxuXG4gICAgdmFyIGluZm8gPSByZWNvcmQuYXJnO1xuXG4gICAgaWYgKCEgaW5mbykge1xuICAgICAgY29udGV4dC5tZXRob2QgPSBcInRocm93XCI7XG4gICAgICBjb250ZXh0LmFyZyA9IG5ldyBUeXBlRXJyb3IoXCJpdGVyYXRvciByZXN1bHQgaXMgbm90IGFuIG9iamVjdFwiKTtcbiAgICAgIGNvbnRleHQuZGVsZWdhdGUgPSBudWxsO1xuICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgfVxuXG4gICAgaWYgKGluZm8uZG9uZSkge1xuICAgICAgLy8gQXNzaWduIHRoZSByZXN1bHQgb2YgdGhlIGZpbmlzaGVkIGRlbGVnYXRlIHRvIHRoZSB0ZW1wb3JhcnlcbiAgICAgIC8vIHZhcmlhYmxlIHNwZWNpZmllZCBieSBkZWxlZ2F0ZS5yZXN1bHROYW1lIChzZWUgZGVsZWdhdGVZaWVsZCkuXG4gICAgICBjb250ZXh0W2RlbGVnYXRlLnJlc3VsdE5hbWVdID0gaW5mby52YWx1ZTtcblxuICAgICAgLy8gUmVzdW1lIGV4ZWN1dGlvbiBhdCB0aGUgZGVzaXJlZCBsb2NhdGlvbiAoc2VlIGRlbGVnYXRlWWllbGQpLlxuICAgICAgY29udGV4dC5uZXh0ID0gZGVsZWdhdGUubmV4dExvYztcblxuICAgICAgLy8gSWYgY29udGV4dC5tZXRob2Qgd2FzIFwidGhyb3dcIiBidXQgdGhlIGRlbGVnYXRlIGhhbmRsZWQgdGhlXG4gICAgICAvLyBleGNlcHRpb24sIGxldCB0aGUgb3V0ZXIgZ2VuZXJhdG9yIHByb2NlZWQgbm9ybWFsbHkuIElmXG4gICAgICAvLyBjb250ZXh0Lm1ldGhvZCB3YXMgXCJuZXh0XCIsIGZvcmdldCBjb250ZXh0LmFyZyBzaW5jZSBpdCBoYXMgYmVlblxuICAgICAgLy8gXCJjb25zdW1lZFwiIGJ5IHRoZSBkZWxlZ2F0ZSBpdGVyYXRvci4gSWYgY29udGV4dC5tZXRob2Qgd2FzXG4gICAgICAvLyBcInJldHVyblwiLCBhbGxvdyB0aGUgb3JpZ2luYWwgLnJldHVybiBjYWxsIHRvIGNvbnRpbnVlIGluIHRoZVxuICAgICAgLy8gb3V0ZXIgZ2VuZXJhdG9yLlxuICAgICAgaWYgKGNvbnRleHQubWV0aG9kICE9PSBcInJldHVyblwiKSB7XG4gICAgICAgIGNvbnRleHQubWV0aG9kID0gXCJuZXh0XCI7XG4gICAgICAgIGNvbnRleHQuYXJnID0gdW5kZWZpbmVkO1xuICAgICAgfVxuXG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIFJlLXlpZWxkIHRoZSByZXN1bHQgcmV0dXJuZWQgYnkgdGhlIGRlbGVnYXRlIG1ldGhvZC5cbiAgICAgIHJldHVybiBpbmZvO1xuICAgIH1cblxuICAgIC8vIFRoZSBkZWxlZ2F0ZSBpdGVyYXRvciBpcyBmaW5pc2hlZCwgc28gZm9yZ2V0IGl0IGFuZCBjb250aW51ZSB3aXRoXG4gICAgLy8gdGhlIG91dGVyIGdlbmVyYXRvci5cbiAgICBjb250ZXh0LmRlbGVnYXRlID0gbnVsbDtcbiAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgfVxuXG4gIC8vIERlZmluZSBHZW5lcmF0b3IucHJvdG90eXBlLntuZXh0LHRocm93LHJldHVybn0gaW4gdGVybXMgb2YgdGhlXG4gIC8vIHVuaWZpZWQgLl9pbnZva2UgaGVscGVyIG1ldGhvZC5cbiAgZGVmaW5lSXRlcmF0b3JNZXRob2RzKEdwKTtcblxuICBkZWZpbmUoR3AsIHRvU3RyaW5nVGFnU3ltYm9sLCBcIkdlbmVyYXRvclwiKTtcblxuICAvLyBBIEdlbmVyYXRvciBzaG91bGQgYWx3YXlzIHJldHVybiBpdHNlbGYgYXMgdGhlIGl0ZXJhdG9yIG9iamVjdCB3aGVuIHRoZVxuICAvLyBAQGl0ZXJhdG9yIGZ1bmN0aW9uIGlzIGNhbGxlZCBvbiBpdC4gU29tZSBicm93c2VycycgaW1wbGVtZW50YXRpb25zIG9mIHRoZVxuICAvLyBpdGVyYXRvciBwcm90b3R5cGUgY2hhaW4gaW5jb3JyZWN0bHkgaW1wbGVtZW50IHRoaXMsIGNhdXNpbmcgdGhlIEdlbmVyYXRvclxuICAvLyBvYmplY3QgdG8gbm90IGJlIHJldHVybmVkIGZyb20gdGhpcyBjYWxsLiBUaGlzIGVuc3VyZXMgdGhhdCBkb2Vzbid0IGhhcHBlbi5cbiAgLy8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9yZWdlbmVyYXRvci9pc3N1ZXMvMjc0IGZvciBtb3JlIGRldGFpbHMuXG4gIEdwW2l0ZXJhdG9yU3ltYm9sXSA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIEdwLnRvU3RyaW5nID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIFwiW29iamVjdCBHZW5lcmF0b3JdXCI7XG4gIH07XG5cbiAgZnVuY3Rpb24gcHVzaFRyeUVudHJ5KGxvY3MpIHtcbiAgICB2YXIgZW50cnkgPSB7IHRyeUxvYzogbG9jc1swXSB9O1xuXG4gICAgaWYgKDEgaW4gbG9jcykge1xuICAgICAgZW50cnkuY2F0Y2hMb2MgPSBsb2NzWzFdO1xuICAgIH1cblxuICAgIGlmICgyIGluIGxvY3MpIHtcbiAgICAgIGVudHJ5LmZpbmFsbHlMb2MgPSBsb2NzWzJdO1xuICAgICAgZW50cnkuYWZ0ZXJMb2MgPSBsb2NzWzNdO1xuICAgIH1cblxuICAgIHRoaXMudHJ5RW50cmllcy5wdXNoKGVudHJ5KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlc2V0VHJ5RW50cnkoZW50cnkpIHtcbiAgICB2YXIgcmVjb3JkID0gZW50cnkuY29tcGxldGlvbiB8fCB7fTtcbiAgICByZWNvcmQudHlwZSA9IFwibm9ybWFsXCI7XG4gICAgZGVsZXRlIHJlY29yZC5hcmc7XG4gICAgZW50cnkuY29tcGxldGlvbiA9IHJlY29yZDtcbiAgfVxuXG4gIGZ1bmN0aW9uIENvbnRleHQodHJ5TG9jc0xpc3QpIHtcbiAgICAvLyBUaGUgcm9vdCBlbnRyeSBvYmplY3QgKGVmZmVjdGl2ZWx5IGEgdHJ5IHN0YXRlbWVudCB3aXRob3V0IGEgY2F0Y2hcbiAgICAvLyBvciBhIGZpbmFsbHkgYmxvY2spIGdpdmVzIHVzIGEgcGxhY2UgdG8gc3RvcmUgdmFsdWVzIHRocm93biBmcm9tXG4gICAgLy8gbG9jYXRpb25zIHdoZXJlIHRoZXJlIGlzIG5vIGVuY2xvc2luZyB0cnkgc3RhdGVtZW50LlxuICAgIHRoaXMudHJ5RW50cmllcyA9IFt7IHRyeUxvYzogXCJyb290XCIgfV07XG4gICAgdHJ5TG9jc0xpc3QuZm9yRWFjaChwdXNoVHJ5RW50cnksIHRoaXMpO1xuICAgIHRoaXMucmVzZXQodHJ1ZSk7XG4gIH1cblxuICBleHBvcnRzLmtleXMgPSBmdW5jdGlvbihvYmplY3QpIHtcbiAgICB2YXIga2V5cyA9IFtdO1xuICAgIGZvciAodmFyIGtleSBpbiBvYmplY3QpIHtcbiAgICAgIGtleXMucHVzaChrZXkpO1xuICAgIH1cbiAgICBrZXlzLnJldmVyc2UoKTtcblxuICAgIC8vIFJhdGhlciB0aGFuIHJldHVybmluZyBhbiBvYmplY3Qgd2l0aCBhIG5leHQgbWV0aG9kLCB3ZSBrZWVwXG4gICAgLy8gdGhpbmdzIHNpbXBsZSBhbmQgcmV0dXJuIHRoZSBuZXh0IGZ1bmN0aW9uIGl0c2VsZi5cbiAgICByZXR1cm4gZnVuY3Rpb24gbmV4dCgpIHtcbiAgICAgIHdoaWxlIChrZXlzLmxlbmd0aCkge1xuICAgICAgICB2YXIga2V5ID0ga2V5cy5wb3AoKTtcbiAgICAgICAgaWYgKGtleSBpbiBvYmplY3QpIHtcbiAgICAgICAgICBuZXh0LnZhbHVlID0ga2V5O1xuICAgICAgICAgIG5leHQuZG9uZSA9IGZhbHNlO1xuICAgICAgICAgIHJldHVybiBuZXh0O1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIFRvIGF2b2lkIGNyZWF0aW5nIGFuIGFkZGl0aW9uYWwgb2JqZWN0LCB3ZSBqdXN0IGhhbmcgdGhlIC52YWx1ZVxuICAgICAgLy8gYW5kIC5kb25lIHByb3BlcnRpZXMgb2ZmIHRoZSBuZXh0IGZ1bmN0aW9uIG9iamVjdCBpdHNlbGYuIFRoaXNcbiAgICAgIC8vIGFsc28gZW5zdXJlcyB0aGF0IHRoZSBtaW5pZmllciB3aWxsIG5vdCBhbm9ueW1pemUgdGhlIGZ1bmN0aW9uLlxuICAgICAgbmV4dC5kb25lID0gdHJ1ZTtcbiAgICAgIHJldHVybiBuZXh0O1xuICAgIH07XG4gIH07XG5cbiAgZnVuY3Rpb24gdmFsdWVzKGl0ZXJhYmxlKSB7XG4gICAgaWYgKGl0ZXJhYmxlKSB7XG4gICAgICB2YXIgaXRlcmF0b3JNZXRob2QgPSBpdGVyYWJsZVtpdGVyYXRvclN5bWJvbF07XG4gICAgICBpZiAoaXRlcmF0b3JNZXRob2QpIHtcbiAgICAgICAgcmV0dXJuIGl0ZXJhdG9yTWV0aG9kLmNhbGwoaXRlcmFibGUpO1xuICAgICAgfVxuXG4gICAgICBpZiAodHlwZW9mIGl0ZXJhYmxlLm5leHQgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICByZXR1cm4gaXRlcmFibGU7XG4gICAgICB9XG5cbiAgICAgIGlmICghaXNOYU4oaXRlcmFibGUubGVuZ3RoKSkge1xuICAgICAgICB2YXIgaSA9IC0xLCBuZXh0ID0gZnVuY3Rpb24gbmV4dCgpIHtcbiAgICAgICAgICB3aGlsZSAoKytpIDwgaXRlcmFibGUubGVuZ3RoKSB7XG4gICAgICAgICAgICBpZiAoaGFzT3duLmNhbGwoaXRlcmFibGUsIGkpKSB7XG4gICAgICAgICAgICAgIG5leHQudmFsdWUgPSBpdGVyYWJsZVtpXTtcbiAgICAgICAgICAgICAgbmV4dC5kb25lID0gZmFsc2U7XG4gICAgICAgICAgICAgIHJldHVybiBuZXh0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIG5leHQudmFsdWUgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgbmV4dC5kb25lID0gdHJ1ZTtcblxuICAgICAgICAgIHJldHVybiBuZXh0O1xuICAgICAgICB9O1xuXG4gICAgICAgIHJldHVybiBuZXh0Lm5leHQgPSBuZXh0O1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIFJldHVybiBhbiBpdGVyYXRvciB3aXRoIG5vIHZhbHVlcy5cbiAgICByZXR1cm4geyBuZXh0OiBkb25lUmVzdWx0IH07XG4gIH1cbiAgZXhwb3J0cy52YWx1ZXMgPSB2YWx1ZXM7XG5cbiAgZnVuY3Rpb24gZG9uZVJlc3VsdCgpIHtcbiAgICByZXR1cm4geyB2YWx1ZTogdW5kZWZpbmVkLCBkb25lOiB0cnVlIH07XG4gIH1cblxuICBDb250ZXh0LnByb3RvdHlwZSA9IHtcbiAgICBjb25zdHJ1Y3RvcjogQ29udGV4dCxcblxuICAgIHJlc2V0OiBmdW5jdGlvbihza2lwVGVtcFJlc2V0KSB7XG4gICAgICB0aGlzLnByZXYgPSAwO1xuICAgICAgdGhpcy5uZXh0ID0gMDtcbiAgICAgIC8vIFJlc2V0dGluZyBjb250ZXh0Ll9zZW50IGZvciBsZWdhY3kgc3VwcG9ydCBvZiBCYWJlbCdzXG4gICAgICAvLyBmdW5jdGlvbi5zZW50IGltcGxlbWVudGF0aW9uLlxuICAgICAgdGhpcy5zZW50ID0gdGhpcy5fc2VudCA9IHVuZGVmaW5lZDtcbiAgICAgIHRoaXMuZG9uZSA9IGZhbHNlO1xuICAgICAgdGhpcy5kZWxlZ2F0ZSA9IG51bGw7XG5cbiAgICAgIHRoaXMubWV0aG9kID0gXCJuZXh0XCI7XG4gICAgICB0aGlzLmFyZyA9IHVuZGVmaW5lZDtcblxuICAgICAgdGhpcy50cnlFbnRyaWVzLmZvckVhY2gocmVzZXRUcnlFbnRyeSk7XG5cbiAgICAgIGlmICghc2tpcFRlbXBSZXNldCkge1xuICAgICAgICBmb3IgKHZhciBuYW1lIGluIHRoaXMpIHtcbiAgICAgICAgICAvLyBOb3Qgc3VyZSBhYm91dCB0aGUgb3B0aW1hbCBvcmRlciBvZiB0aGVzZSBjb25kaXRpb25zOlxuICAgICAgICAgIGlmIChuYW1lLmNoYXJBdCgwKSA9PT0gXCJ0XCIgJiZcbiAgICAgICAgICAgICAgaGFzT3duLmNhbGwodGhpcywgbmFtZSkgJiZcbiAgICAgICAgICAgICAgIWlzTmFOKCtuYW1lLnNsaWNlKDEpKSkge1xuICAgICAgICAgICAgdGhpc1tuYW1lXSA9IHVuZGVmaW5lZDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuXG4gICAgc3RvcDogZnVuY3Rpb24oKSB7XG4gICAgICB0aGlzLmRvbmUgPSB0cnVlO1xuXG4gICAgICB2YXIgcm9vdEVudHJ5ID0gdGhpcy50cnlFbnRyaWVzWzBdO1xuICAgICAgdmFyIHJvb3RSZWNvcmQgPSByb290RW50cnkuY29tcGxldGlvbjtcbiAgICAgIGlmIChyb290UmVjb3JkLnR5cGUgPT09IFwidGhyb3dcIikge1xuICAgICAgICB0aHJvdyByb290UmVjb3JkLmFyZztcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXMucnZhbDtcbiAgICB9LFxuXG4gICAgZGlzcGF0Y2hFeGNlcHRpb246IGZ1bmN0aW9uKGV4Y2VwdGlvbikge1xuICAgICAgaWYgKHRoaXMuZG9uZSkge1xuICAgICAgICB0aHJvdyBleGNlcHRpb247XG4gICAgICB9XG5cbiAgICAgIHZhciBjb250ZXh0ID0gdGhpcztcbiAgICAgIGZ1bmN0aW9uIGhhbmRsZShsb2MsIGNhdWdodCkge1xuICAgICAgICByZWNvcmQudHlwZSA9IFwidGhyb3dcIjtcbiAgICAgICAgcmVjb3JkLmFyZyA9IGV4Y2VwdGlvbjtcbiAgICAgICAgY29udGV4dC5uZXh0ID0gbG9jO1xuXG4gICAgICAgIGlmIChjYXVnaHQpIHtcbiAgICAgICAgICAvLyBJZiB0aGUgZGlzcGF0Y2hlZCBleGNlcHRpb24gd2FzIGNhdWdodCBieSBhIGNhdGNoIGJsb2NrLFxuICAgICAgICAgIC8vIHRoZW4gbGV0IHRoYXQgY2F0Y2ggYmxvY2sgaGFuZGxlIHRoZSBleGNlcHRpb24gbm9ybWFsbHkuXG4gICAgICAgICAgY29udGV4dC5tZXRob2QgPSBcIm5leHRcIjtcbiAgICAgICAgICBjb250ZXh0LmFyZyA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiAhISBjYXVnaHQ7XG4gICAgICB9XG5cbiAgICAgIGZvciAodmFyIGkgPSB0aGlzLnRyeUVudHJpZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICAgICAgdmFyIGVudHJ5ID0gdGhpcy50cnlFbnRyaWVzW2ldO1xuICAgICAgICB2YXIgcmVjb3JkID0gZW50cnkuY29tcGxldGlvbjtcblxuICAgICAgICBpZiAoZW50cnkudHJ5TG9jID09PSBcInJvb3RcIikge1xuICAgICAgICAgIC8vIEV4Y2VwdGlvbiB0aHJvd24gb3V0c2lkZSBvZiBhbnkgdHJ5IGJsb2NrIHRoYXQgY291bGQgaGFuZGxlXG4gICAgICAgICAgLy8gaXQsIHNvIHNldCB0aGUgY29tcGxldGlvbiB2YWx1ZSBvZiB0aGUgZW50aXJlIGZ1bmN0aW9uIHRvXG4gICAgICAgICAgLy8gdGhyb3cgdGhlIGV4Y2VwdGlvbi5cbiAgICAgICAgICByZXR1cm4gaGFuZGxlKFwiZW5kXCIpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGVudHJ5LnRyeUxvYyA8PSB0aGlzLnByZXYpIHtcbiAgICAgICAgICB2YXIgaGFzQ2F0Y2ggPSBoYXNPd24uY2FsbChlbnRyeSwgXCJjYXRjaExvY1wiKTtcbiAgICAgICAgICB2YXIgaGFzRmluYWxseSA9IGhhc093bi5jYWxsKGVudHJ5LCBcImZpbmFsbHlMb2NcIik7XG5cbiAgICAgICAgICBpZiAoaGFzQ2F0Y2ggJiYgaGFzRmluYWxseSkge1xuICAgICAgICAgICAgaWYgKHRoaXMucHJldiA8IGVudHJ5LmNhdGNoTG9jKSB7XG4gICAgICAgICAgICAgIHJldHVybiBoYW5kbGUoZW50cnkuY2F0Y2hMb2MsIHRydWUpO1xuICAgICAgICAgICAgfSBlbHNlIGlmICh0aGlzLnByZXYgPCBlbnRyeS5maW5hbGx5TG9jKSB7XG4gICAgICAgICAgICAgIHJldHVybiBoYW5kbGUoZW50cnkuZmluYWxseUxvYyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICB9IGVsc2UgaWYgKGhhc0NhdGNoKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5wcmV2IDwgZW50cnkuY2F0Y2hMb2MpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGhhbmRsZShlbnRyeS5jYXRjaExvYywgdHJ1ZSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICB9IGVsc2UgaWYgKGhhc0ZpbmFsbHkpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnByZXYgPCBlbnRyeS5maW5hbGx5TG9jKSB7XG4gICAgICAgICAgICAgIHJldHVybiBoYW5kbGUoZW50cnkuZmluYWxseUxvYyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwidHJ5IHN0YXRlbWVudCB3aXRob3V0IGNhdGNoIG9yIGZpbmFsbHlcIik7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcblxuICAgIGFicnVwdDogZnVuY3Rpb24odHlwZSwgYXJnKSB7XG4gICAgICBmb3IgKHZhciBpID0gdGhpcy50cnlFbnRyaWVzLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgICAgIHZhciBlbnRyeSA9IHRoaXMudHJ5RW50cmllc1tpXTtcbiAgICAgICAgaWYgKGVudHJ5LnRyeUxvYyA8PSB0aGlzLnByZXYgJiZcbiAgICAgICAgICAgIGhhc093bi5jYWxsKGVudHJ5LCBcImZpbmFsbHlMb2NcIikgJiZcbiAgICAgICAgICAgIHRoaXMucHJldiA8IGVudHJ5LmZpbmFsbHlMb2MpIHtcbiAgICAgICAgICB2YXIgZmluYWxseUVudHJ5ID0gZW50cnk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKGZpbmFsbHlFbnRyeSAmJlxuICAgICAgICAgICh0eXBlID09PSBcImJyZWFrXCIgfHxcbiAgICAgICAgICAgdHlwZSA9PT0gXCJjb250aW51ZVwiKSAmJlxuICAgICAgICAgIGZpbmFsbHlFbnRyeS50cnlMb2MgPD0gYXJnICYmXG4gICAgICAgICAgYXJnIDw9IGZpbmFsbHlFbnRyeS5maW5hbGx5TG9jKSB7XG4gICAgICAgIC8vIElnbm9yZSB0aGUgZmluYWxseSBlbnRyeSBpZiBjb250cm9sIGlzIG5vdCBqdW1waW5nIHRvIGFcbiAgICAgICAgLy8gbG9jYXRpb24gb3V0c2lkZSB0aGUgdHJ5L2NhdGNoIGJsb2NrLlxuICAgICAgICBmaW5hbGx5RW50cnkgPSBudWxsO1xuICAgICAgfVxuXG4gICAgICB2YXIgcmVjb3JkID0gZmluYWxseUVudHJ5ID8gZmluYWxseUVudHJ5LmNvbXBsZXRpb24gOiB7fTtcbiAgICAgIHJlY29yZC50eXBlID0gdHlwZTtcbiAgICAgIHJlY29yZC5hcmcgPSBhcmc7XG5cbiAgICAgIGlmIChmaW5hbGx5RW50cnkpIHtcbiAgICAgICAgdGhpcy5tZXRob2QgPSBcIm5leHRcIjtcbiAgICAgICAgdGhpcy5uZXh0ID0gZmluYWxseUVudHJ5LmZpbmFsbHlMb2M7XG4gICAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpcy5jb21wbGV0ZShyZWNvcmQpO1xuICAgIH0sXG5cbiAgICBjb21wbGV0ZTogZnVuY3Rpb24ocmVjb3JkLCBhZnRlckxvYykge1xuICAgICAgaWYgKHJlY29yZC50eXBlID09PSBcInRocm93XCIpIHtcbiAgICAgICAgdGhyb3cgcmVjb3JkLmFyZztcbiAgICAgIH1cblxuICAgICAgaWYgKHJlY29yZC50eXBlID09PSBcImJyZWFrXCIgfHxcbiAgICAgICAgICByZWNvcmQudHlwZSA9PT0gXCJjb250aW51ZVwiKSB7XG4gICAgICAgIHRoaXMubmV4dCA9IHJlY29yZC5hcmc7XG4gICAgICB9IGVsc2UgaWYgKHJlY29yZC50eXBlID09PSBcInJldHVyblwiKSB7XG4gICAgICAgIHRoaXMucnZhbCA9IHRoaXMuYXJnID0gcmVjb3JkLmFyZztcbiAgICAgICAgdGhpcy5tZXRob2QgPSBcInJldHVyblwiO1xuICAgICAgICB0aGlzLm5leHQgPSBcImVuZFwiO1xuICAgICAgfSBlbHNlIGlmIChyZWNvcmQudHlwZSA9PT0gXCJub3JtYWxcIiAmJiBhZnRlckxvYykge1xuICAgICAgICB0aGlzLm5leHQgPSBhZnRlckxvYztcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgfSxcblxuICAgIGZpbmlzaDogZnVuY3Rpb24oZmluYWxseUxvYykge1xuICAgICAgZm9yICh2YXIgaSA9IHRoaXMudHJ5RW50cmllcy5sZW5ndGggLSAxOyBpID49IDA7IC0taSkge1xuICAgICAgICB2YXIgZW50cnkgPSB0aGlzLnRyeUVudHJpZXNbaV07XG4gICAgICAgIGlmIChlbnRyeS5maW5hbGx5TG9jID09PSBmaW5hbGx5TG9jKSB7XG4gICAgICAgICAgdGhpcy5jb21wbGV0ZShlbnRyeS5jb21wbGV0aW9uLCBlbnRyeS5hZnRlckxvYyk7XG4gICAgICAgICAgcmVzZXRUcnlFbnRyeShlbnRyeSk7XG4gICAgICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuXG4gICAgXCJjYXRjaFwiOiBmdW5jdGlvbih0cnlMb2MpIHtcbiAgICAgIGZvciAodmFyIGkgPSB0aGlzLnRyeUVudHJpZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICAgICAgdmFyIGVudHJ5ID0gdGhpcy50cnlFbnRyaWVzW2ldO1xuICAgICAgICBpZiAoZW50cnkudHJ5TG9jID09PSB0cnlMb2MpIHtcbiAgICAgICAgICB2YXIgcmVjb3JkID0gZW50cnkuY29tcGxldGlvbjtcbiAgICAgICAgICBpZiAocmVjb3JkLnR5cGUgPT09IFwidGhyb3dcIikge1xuICAgICAgICAgICAgdmFyIHRocm93biA9IHJlY29yZC5hcmc7XG4gICAgICAgICAgICByZXNldFRyeUVudHJ5KGVudHJ5KTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIHRocm93bjtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBUaGUgY29udGV4dC5jYXRjaCBtZXRob2QgbXVzdCBvbmx5IGJlIGNhbGxlZCB3aXRoIGEgbG9jYXRpb25cbiAgICAgIC8vIGFyZ3VtZW50IHRoYXQgY29ycmVzcG9uZHMgdG8gYSBrbm93biBjYXRjaCBibG9jay5cbiAgICAgIHRocm93IG5ldyBFcnJvcihcImlsbGVnYWwgY2F0Y2ggYXR0ZW1wdFwiKTtcbiAgICB9LFxuXG4gICAgZGVsZWdhdGVZaWVsZDogZnVuY3Rpb24oaXRlcmFibGUsIHJlc3VsdE5hbWUsIG5leHRMb2MpIHtcbiAgICAgIHRoaXMuZGVsZWdhdGUgPSB7XG4gICAgICAgIGl0ZXJhdG9yOiB2YWx1ZXMoaXRlcmFibGUpLFxuICAgICAgICByZXN1bHROYW1lOiByZXN1bHROYW1lLFxuICAgICAgICBuZXh0TG9jOiBuZXh0TG9jXG4gICAgICB9O1xuXG4gICAgICBpZiAodGhpcy5tZXRob2QgPT09IFwibmV4dFwiKSB7XG4gICAgICAgIC8vIERlbGliZXJhdGVseSBmb3JnZXQgdGhlIGxhc3Qgc2VudCB2YWx1ZSBzbyB0aGF0IHdlIGRvbid0XG4gICAgICAgIC8vIGFjY2lkZW50YWxseSBwYXNzIGl0IG9uIHRvIHRoZSBkZWxlZ2F0ZS5cbiAgICAgICAgdGhpcy5hcmcgPSB1bmRlZmluZWQ7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgIH1cbiAgfTtcblxuICAvLyBSZWdhcmRsZXNzIG9mIHdoZXRoZXIgdGhpcyBzY3JpcHQgaXMgZXhlY3V0aW5nIGFzIGEgQ29tbW9uSlMgbW9kdWxlXG4gIC8vIG9yIG5vdCwgcmV0dXJuIHRoZSBydW50aW1lIG9iamVjdCBzbyB0aGF0IHdlIGNhbiBkZWNsYXJlIHRoZSB2YXJpYWJsZVxuICAvLyByZWdlbmVyYXRvclJ1bnRpbWUgaW4gdGhlIG91dGVyIHNjb3BlLCB3aGljaCBhbGxvd3MgdGhpcyBtb2R1bGUgdG8gYmVcbiAgLy8gaW5qZWN0ZWQgZWFzaWx5IGJ5IGBiaW4vcmVnZW5lcmF0b3IgLS1pbmNsdWRlLXJ1bnRpbWUgc2NyaXB0LmpzYC5cbiAgcmV0dXJuIGV4cG9ydHM7XG5cbn0oXG4gIC8vIElmIHRoaXMgc2NyaXB0IGlzIGV4ZWN1dGluZyBhcyBhIENvbW1vbkpTIG1vZHVsZSwgdXNlIG1vZHVsZS5leHBvcnRzXG4gIC8vIGFzIHRoZSByZWdlbmVyYXRvclJ1bnRpbWUgbmFtZXNwYWNlLiBPdGhlcndpc2UgY3JlYXRlIGEgbmV3IGVtcHR5XG4gIC8vIG9iamVjdC4gRWl0aGVyIHdheSwgdGhlIHJlc3VsdGluZyBvYmplY3Qgd2lsbCBiZSB1c2VkIHRvIGluaXRpYWxpemVcbiAgLy8gdGhlIHJlZ2VuZXJhdG9yUnVudGltZSB2YXJpYWJsZSBhdCB0aGUgdG9wIG9mIHRoaXMgZmlsZS5cbiAgdHlwZW9mIG1vZHVsZSA9PT0gXCJvYmplY3RcIiA/IG1vZHVsZS5leHBvcnRzIDoge31cbikpO1xuXG50cnkge1xuICByZWdlbmVyYXRvclJ1bnRpbWUgPSBydW50aW1lO1xufSBjYXRjaCAoYWNjaWRlbnRhbFN0cmljdE1vZGUpIHtcbiAgLy8gVGhpcyBtb2R1bGUgc2hvdWxkIG5vdCBiZSBydW5uaW5nIGluIHN0cmljdCBtb2RlLCBzbyB0aGUgYWJvdmVcbiAgLy8gYXNzaWdubWVudCBzaG91bGQgYWx3YXlzIHdvcmsgdW5sZXNzIHNvbWV0aGluZyBpcyBtaXNjb25maWd1cmVkLiBKdXN0XG4gIC8vIGluIGNhc2UgcnVudGltZS5qcyBhY2NpZGVudGFsbHkgcnVucyBpbiBzdHJpY3QgbW9kZSwgd2UgY2FuIGVzY2FwZVxuICAvLyBzdHJpY3QgbW9kZSB1c2luZyBhIGdsb2JhbCBGdW5jdGlvbiBjYWxsLiBUaGlzIGNvdWxkIGNvbmNlaXZhYmx5IGZhaWxcbiAgLy8gaWYgYSBDb250ZW50IFNlY3VyaXR5IFBvbGljeSBmb3JiaWRzIHVzaW5nIEZ1bmN0aW9uLCBidXQgaW4gdGhhdCBjYXNlXG4gIC8vIHRoZSBwcm9wZXIgc29sdXRpb24gaXMgdG8gZml4IHRoZSBhY2NpZGVudGFsIHN0cmljdCBtb2RlIHByb2JsZW0uIElmXG4gIC8vIHlvdSd2ZSBtaXNjb25maWd1cmVkIHlvdXIgYnVuZGxlciB0byBmb3JjZSBzdHJpY3QgbW9kZSBhbmQgYXBwbGllZCBhXG4gIC8vIENTUCB0byBmb3JiaWQgRnVuY3Rpb24sIGFuZCB5b3UncmUgbm90IHdpbGxpbmcgdG8gZml4IGVpdGhlciBvZiB0aG9zZVxuICAvLyBwcm9ibGVtcywgcGxlYXNlIGRldGFpbCB5b3VyIHVuaXF1ZSBwcmVkaWNhbWVudCBpbiBhIEdpdEh1YiBpc3N1ZS5cbiAgRnVuY3Rpb24oXCJyXCIsIFwicmVnZW5lcmF0b3JSdW50aW1lID0gclwiKShydW50aW1lKTtcbn1cbiIsIi8vIFRoZSBtb2R1bGUgY2FjaGVcbnZhciBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18gPSB7fTtcblxuLy8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbmZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG5cdGlmKF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF0pIHtcblx0XHRyZXR1cm4gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXS5leHBvcnRzO1xuXHR9XG5cdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG5cdHZhciBtb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdID0ge1xuXHRcdC8vIG5vIG1vZHVsZS5pZCBuZWVkZWRcblx0XHQvLyBubyBtb2R1bGUubG9hZGVkIG5lZWRlZFxuXHRcdGV4cG9ydHM6IHt9XG5cdH07XG5cblx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG5cdF9fd2VicGFja19tb2R1bGVzX19bbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG5cdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG5cdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbn1cblxuIiwiLy8gZGVmaW5lIGdldHRlciBmdW5jdGlvbnMgZm9yIGhhcm1vbnkgZXhwb3J0c1xuX193ZWJwYWNrX3JlcXVpcmVfXy5kID0gZnVuY3Rpb24oZXhwb3J0cywgZGVmaW5pdGlvbikge1xuXHRmb3IodmFyIGtleSBpbiBkZWZpbml0aW9uKSB7XG5cdFx0aWYoX193ZWJwYWNrX3JlcXVpcmVfXy5vKGRlZmluaXRpb24sIGtleSkgJiYgIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBrZXkpKSB7XG5cdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywga2V5LCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZGVmaW5pdGlvbltrZXldIH0pO1xuXHRcdH1cblx0fVxufTsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLmcgPSAoZnVuY3Rpb24oKSB7XG5cdGlmICh0eXBlb2YgZ2xvYmFsVGhpcyA9PT0gJ29iamVjdCcpIHJldHVybiBnbG9iYWxUaGlzO1xuXHR0cnkge1xuXHRcdHJldHVybiB0aGlzIHx8IG5ldyBGdW5jdGlvbigncmV0dXJuIHRoaXMnKSgpO1xuXHR9IGNhdGNoIChlKSB7XG5cdFx0aWYgKHR5cGVvZiB3aW5kb3cgPT09ICdvYmplY3QnKSByZXR1cm4gd2luZG93O1xuXHR9XG59KSgpOyIsIl9fd2VicGFja19yZXF1aXJlX18ubyA9IGZ1bmN0aW9uKG9iaiwgcHJvcCkgeyByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgcHJvcCk7IH0iLCIvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSBmdW5jdGlvbihleHBvcnRzKSB7XG5cdGlmKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC50b1N0cmluZ1RhZykge1xuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuXHR9XG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG59OyIsImltcG9ydCB7IGgsIHJlbmRlciB9IGZyb20gXCJwcmVhY3RcIjtcbmltcG9ydCB7IERvY3VtZW50LCBQYWdlLCBwZGZqcyB9IGZyb20gXCJyZWFjdC1wZGZcIjtcbmltcG9ydCB7IFZpZXdlciB9IGZyb20gXCJAcmVhY3QtcGRmLXZpZXdlci9jb3JlXCI7XG5pbXBvcnQgXCJjb3JlLWpzL3N0YWJsZVwiO1xuaW1wb3J0IFwicmVnZW5lcmF0b3ItcnVudGltZS9ydW50aW1lXCI7XG4vLyBodHRwczovL2dpdGh1Yi5jb20vd29qdGVrbWFqL3JlYWN0LXBkZi9pc3N1ZXMvMzIxXG5pZiAocGRmanMpIHtcbiAgICBwZGZqcy5HbG9iYWxXb3JrZXJPcHRpb25zLndvcmtlclNyYyA9IFwiLy9jZG5qcy5jbG91ZGZsYXJlLmNvbS9hamF4L2xpYnMvcGRmLmpzL1wiICsgcGRmanMudmVyc2lvbiArIFwiL3BkZi53b3JrZXIuanNcIjtcbn1cbi8vIGltcG9ydCBcIkByZWFjdC1wZGYtdmlld2VyL2NvcmUvbGliL3N0eWxlcy9pbmRleC5jc3NcIjtcbnZhciB1cmwgPSBcImh0dHBzOi8vb2ppc2FuLXRveWJveC5naXRodWIuaW8vdW5pdmVyc2FsLXBkZi1jb21wb25lbnQvZXhhbXBsZS5wZGZcIjtcbnZhciBNYWluID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiAoaChcImRpdlwiLCBudWxsLFxuICAgICAgICBoKFwiaDFcIiwgbnVsbCwgXCJpZnJhbWVcIiksXG4gICAgICAgIGgoXCJpZnJhbWVcIiwgeyBzcmM6IHVybCwgc2Nyb2xsaW5nOiBcIm5vXCIgfSxcbiAgICAgICAgICAgIGgoXCJwXCIsIG51bGwsIFwiSXQgYXBwZWFycyB5b3VyIHdlYiBicm93c2VyIGRvZXNuJ3Qgc3VwcG9ydCBpZnJhbWVzLlwiKSksXG4gICAgICAgIGgoXCJoMVwiLCBudWxsLCBcIm9iamVjdFwiKSxcbiAgICAgICAgaChcIm9iamVjdFwiLCB7IGRhdGE6IHVybCwgdHlwZTogXCJhcHBsaWNhdGlvbi9wZGZcIiB9LFxuICAgICAgICAgICAgaChcInBcIiwgbnVsbCxcbiAgICAgICAgICAgICAgICBcIkl0IGFwcGVhcnMgeW91IGRvbid0IGhhdmUgQWRvYmUgUmVhZGVyIG9yIFBERiBzdXBwb3J0IGluIHRoaXMgd2ViIGJyb3dzZXIuIFwiLFxuICAgICAgICAgICAgICAgIGgoXCJhXCIsIHsgaHJlZjogdXJsIH0sIFwiQ2xpY2sgaGVyZSB0byBkb3dubG9hZCB0aGUgUERGXCIpLFxuICAgICAgICAgICAgICAgIFwiLiBPclwiLFxuICAgICAgICAgICAgICAgIFwiIFwiLFxuICAgICAgICAgICAgICAgIGgoXCJhXCIsIHsgaHJlZjogXCJodHRwOi8vZ2V0LmFkb2JlLmNvbS9yZWFkZXIvXCIsIHRhcmdldDogXCJfYmxhbmtcIiB9LCBcImNsaWNrIGhlcmUgdG8gaW5zdGFsbCBBZG9iZSBSZWFkZXJcIiksXG4gICAgICAgICAgICAgICAgXCIuXCIpLFxuICAgICAgICAgICAgaChcImVtYmVkXCIsIHsgc3JjOiB1cmwsIHR5cGU6IFwiYXBwbGljYXRpb24vcGRmXCIgfSkpLFxuICAgICAgICBoKFwiaDFcIiwgbnVsbCwgXCJvYmplY3QgYW5kIGVtYmVkXCIpLFxuICAgICAgICBoKFwib2JqZWN0XCIsIHsgZGF0YTogdXJsLCB0eXBlOiBcImFwcGxpY2F0aW9uL3BkZlwiIH0sXG4gICAgICAgICAgICBoKFwicFwiLCBudWxsLFxuICAgICAgICAgICAgICAgIFwiSXQgYXBwZWFycyB5b3UgZG9uJ3QgaGF2ZSBBZG9iZSBSZWFkZXIgb3IgUERGIHN1cHBvcnQgaW4gdGhpcyB3ZWIgYnJvd3Nlci4gXCIsXG4gICAgICAgICAgICAgICAgaChcImFcIiwgeyBocmVmOiB1cmwgfSwgXCJDbGljayBoZXJlIHRvIGRvd25sb2FkIHRoZSBQREZcIiksXG4gICAgICAgICAgICAgICAgXCIuIE9yXCIsXG4gICAgICAgICAgICAgICAgXCIgXCIsXG4gICAgICAgICAgICAgICAgaChcImFcIiwgeyBocmVmOiBcImh0dHA6Ly9nZXQuYWRvYmUuY29tL3JlYWRlci9cIiwgdGFyZ2V0OiBcIl9ibGFua1wiIH0sIFwiY2xpY2sgaGVyZSB0byBpbnN0YWxsIEFkb2JlIFJlYWRlclwiKSxcbiAgICAgICAgICAgICAgICBcIi5cIiksXG4gICAgICAgICAgICBoKFwiZW1iZWRcIiwgeyBzcmM6IHVybCwgdHlwZTogXCJhcHBsaWNhdGlvbi9wZGZcIiB9KSksXG4gICAgICAgIGgoXCJoMVwiLCBudWxsLCBcImVtYmVkXCIpLFxuICAgICAgICBoKFwiZW1iZWRcIiwgeyB3aWR0aDogXCI1MDBcIiwgaGVpZ2h0OiBcIjM3NVwiLCBzcmM6IHVybCwgdHlwZTogXCJhcHBsaWNhdGlvbi9wZGZcIiB9KSxcbiAgICAgICAgaChcImgxXCIsIG51bGwsIFwiZ29vZ2xlIGRyaXZlXCIpLFxuICAgICAgICBoKFwiZW1iZWRcIiwgeyBzcmM6IFwiaHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL3ZpZXdlcm5nL1xcbnZpZXdlcj9lbWJlZGRlZD10cnVlJnVybD1cIiArIHVybCwgd2lkdGg6IFwiNTAwXCIsIGhlaWdodDogXCIzNzVcIiB9KSxcbiAgICAgICAgaChcImgxXCIsIG51bGwsIFwicmVhY3QtcGRmXCIpLFxuICAgICAgICBoKERvY3VtZW50LCB7IGZpbGU6IHVybCB9LFxuICAgICAgICAgICAgaChQYWdlLCB7IHBhZ2VOdW1iZXI6IDEgfSkpLFxuICAgICAgICBoKFwiaDFcIiwgbnVsbCwgXCJyZWFjdC1wZC12aWV3ZXJcIiksXG4gICAgICAgIGgoVmlld2VyLCB7IGZpbGVVcmw6IHVybCB9KSkpO1xufTtcbnJlbmRlcihoKE1haW4sIG51bGwpLCBkb2N1bWVudC5ib2R5KTtcbiIsImltcG9ydCB7IGgsIHJlbmRlciB9IGZyb20gXCJwcmVhY3RcIjtcbmltcG9ydCB7IERvY3VtZW50LCBQYWdlLCBwZGZqcyB9IGZyb20gXCJyZWFjdC1wZGZcIjtcbmltcG9ydCB7IFZpZXdlciB9IGZyb20gXCJAcmVhY3QtcGRmLXZpZXdlci9jb3JlXCI7XG5pbXBvcnQgXCJjb3JlLWpzL3N0YWJsZVwiO1xuaW1wb3J0IFwicmVnZW5lcmF0b3ItcnVudGltZS9ydW50aW1lXCI7XG4vLyBodHRwczovL2dpdGh1Yi5jb20vd29qdGVrbWFqL3JlYWN0LXBkZi9pc3N1ZXMvMzIxXG5pZiAocGRmanMpIHtcbiAgICBwZGZqcy5HbG9iYWxXb3JrZXJPcHRpb25zLndvcmtlclNyYyA9IFwiLy9jZG5qcy5jbG91ZGZsYXJlLmNvbS9hamF4L2xpYnMvcGRmLmpzL1wiICsgcGRmanMudmVyc2lvbiArIFwiL3BkZi53b3JrZXIuanNcIjtcbn1cbi8vIGltcG9ydCBcIkByZWFjdC1wZGYtdmlld2VyL2NvcmUvbGliL3N0eWxlcy9pbmRleC5jc3NcIjtcbnZhciB1cmwgPSBcImh0dHBzOi8vb2ppc2FuLXRveWJveC5naXRodWIuaW8vdW5pdmVyc2FsLXBkZi1jb21wb25lbnQvZXhhbXBsZS5wZGZcIjtcbnZhciBNYWluID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiAoaChcImRpdlwiLCBudWxsLFxuICAgICAgICBoKFwiaDFcIiwgbnVsbCwgXCJpZnJhbWVcIiksXG4gICAgICAgIGgoXCJpZnJhbWVcIiwgeyBzcmM6IHVybCwgc2Nyb2xsaW5nOiBcIm5vXCIgfSxcbiAgICAgICAgICAgIGgoXCJwXCIsIG51bGwsIFwiSXQgYXBwZWFycyB5b3VyIHdlYiBicm93c2VyIGRvZXNuJ3Qgc3VwcG9ydCBpZnJhbWVzLlwiKSksXG4gICAgICAgIGgoXCJoMVwiLCBudWxsLCBcIm9iamVjdFwiKSxcbiAgICAgICAgaChcIm9iamVjdFwiLCB7IGRhdGE6IHVybCwgdHlwZTogXCJhcHBsaWNhdGlvbi9wZGZcIiB9LFxuICAgICAgICAgICAgaChcInBcIiwgbnVsbCxcbiAgICAgICAgICAgICAgICBcIkl0IGFwcGVhcnMgeW91IGRvbid0IGhhdmUgQWRvYmUgUmVhZGVyIG9yIFBERiBzdXBwb3J0IGluIHRoaXMgd2ViIGJyb3dzZXIuIFwiLFxuICAgICAgICAgICAgICAgIGgoXCJhXCIsIHsgaHJlZjogdXJsIH0sIFwiQ2xpY2sgaGVyZSB0byBkb3dubG9hZCB0aGUgUERGXCIpLFxuICAgICAgICAgICAgICAgIFwiLiBPclwiLFxuICAgICAgICAgICAgICAgIFwiIFwiLFxuICAgICAgICAgICAgICAgIGgoXCJhXCIsIHsgaHJlZjogXCJodHRwOi8vZ2V0LmFkb2JlLmNvbS9yZWFkZXIvXCIsIHRhcmdldDogXCJfYmxhbmtcIiB9LCBcImNsaWNrIGhlcmUgdG8gaW5zdGFsbCBBZG9iZSBSZWFkZXJcIiksXG4gICAgICAgICAgICAgICAgXCIuXCIpLFxuICAgICAgICAgICAgaChcImVtYmVkXCIsIHsgc3JjOiB1cmwsIHR5cGU6IFwiYXBwbGljYXRpb24vcGRmXCIgfSkpLFxuICAgICAgICBoKFwiaDFcIiwgbnVsbCwgXCJvYmplY3QgYW5kIGVtYmVkXCIpLFxuICAgICAgICBoKFwib2JqZWN0XCIsIHsgZGF0YTogdXJsLCB0eXBlOiBcImFwcGxpY2F0aW9uL3BkZlwiIH0sXG4gICAgICAgICAgICBoKFwicFwiLCBudWxsLFxuICAgICAgICAgICAgICAgIFwiSXQgYXBwZWFycyB5b3UgZG9uJ3QgaGF2ZSBBZG9iZSBSZWFkZXIgb3IgUERGIHN1cHBvcnQgaW4gdGhpcyB3ZWIgYnJvd3Nlci4gXCIsXG4gICAgICAgICAgICAgICAgaChcImFcIiwgeyBocmVmOiB1cmwgfSwgXCJDbGljayBoZXJlIHRvIGRvd25sb2FkIHRoZSBQREZcIiksXG4gICAgICAgICAgICAgICAgXCIuIE9yXCIsXG4gICAgICAgICAgICAgICAgXCIgXCIsXG4gICAgICAgICAgICAgICAgaChcImFcIiwgeyBocmVmOiBcImh0dHA6Ly9nZXQuYWRvYmUuY29tL3JlYWRlci9cIiwgdGFyZ2V0OiBcIl9ibGFua1wiIH0sIFwiY2xpY2sgaGVyZSB0byBpbnN0YWxsIEFkb2JlIFJlYWRlclwiKSxcbiAgICAgICAgICAgICAgICBcIi5cIiksXG4gICAgICAgICAgICBoKFwiZW1iZWRcIiwgeyBzcmM6IHVybCwgdHlwZTogXCJhcHBsaWNhdGlvbi9wZGZcIiB9KSksXG4gICAgICAgIGgoXCJoMVwiLCBudWxsLCBcImVtYmVkXCIpLFxuICAgICAgICBoKFwiZW1iZWRcIiwgeyB3aWR0aDogXCI1MDBcIiwgaGVpZ2h0OiBcIjM3NVwiLCBzcmM6IHVybCwgdHlwZTogXCJhcHBsaWNhdGlvbi9wZGZcIiB9KSxcbiAgICAgICAgaChcImgxXCIsIG51bGwsIFwiZ29vZ2xlIGRyaXZlXCIpLFxuICAgICAgICBoKFwiZW1iZWRcIiwgeyBzcmM6IFwiaHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL3ZpZXdlcm5nL1xcbnZpZXdlcj9lbWJlZGRlZD10cnVlJnVybD1cIiArIHVybCwgd2lkdGg6IFwiNTAwXCIsIGhlaWdodDogXCIzNzVcIiB9KSxcbiAgICAgICAgaChcImgxXCIsIG51bGwsIFwicmVhY3QtcGRmXCIpLFxuICAgICAgICBoKERvY3VtZW50LCB7IGZpbGU6IHVybCB9LFxuICAgICAgICAgICAgaChQYWdlLCB7IHBhZ2VOdW1iZXI6IDEgfSkpLFxuICAgICAgICBoKFwiaDFcIiwgbnVsbCwgXCJyZWFjdC1wZC12aWV3ZXJcIiksXG4gICAgICAgIGgoVmlld2VyLCB7IGZpbGVVcmw6IHVybCB9KSkpO1xufTtcbnJlbmRlcihoKE1haW4sIG51bGwpLCBkb2N1bWVudC5ib2R5KTtcbiJdLCJzb3VyY2VSb290IjoiIn0=