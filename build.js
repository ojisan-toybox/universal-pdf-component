/*! For license information please see build.js.LICENSE.txt */
(function(){var __webpack_modules__={7757:function(e,t,r){e.exports=r(5666)},9469:function(e,t,r){"use strict";var n,i=r(9748),o=function(e){if(e&&e.__esModule)return e;var t=Object.create(null);return e&&Object.keys(e).forEach((function(r){if("default"!==r){var n=Object.getOwnPropertyDescriptor(e,r);Object.defineProperty(t,r,n.get?n:{enumerable:!0,get:function(){return e[r]}})}})),t.default=e,Object.freeze(t)}(r(9299));!function(e){e[e.Text=1]="Text",e[e.Link=2]="Link",e[e.FreeText=3]="FreeText",e[e.Line=4]="Line",e[e.Square=5]="Square",e[e.Circle=6]="Circle",e[e.Polygon=7]="Polygon",e[e.Polyline=8]="Polyline",e[e.Highlight=9]="Highlight",e[e.Underline=10]="Underline",e[e.Squiggly=11]="Squiggly",e[e.StrikeOut=12]="StrikeOut",e[e.Stamp=13]="Stamp",e[e.Caret=14]="Caret",e[e.Ink=15]="Ink",e[e.Popup=16]="Popup",e[e.FileAttachment=17]="FileAttachment"}(n||(n={}));var a,s=n,c=i.createContext({prefixClass:"rpv-core"}),u=function(e){var t=e.children,r=e.size,n=void 0===r?24:r,o=i.useContext(c),a=(n||24)+"px";return i.createElement("svg",{className:o.prefixClass+"-icon",height:a,viewBox:"0 0 24 24",width:a},t)},l=function(){return i.createElement(u,{size:16},i.createElement("path",{d:"M23.5,0.499l-16.5,23l-6.5-6.5"}))},h=function(){var e=i.useContext(c);return i.createElement("svg",{className:e.prefixClass+"-spinner",width:"64px",height:"64px",viewBox:"0 0 32 32"},i.createElement("circle",{className:e.prefixClass+"-spinner-circle",cx:"16",cy:"16",r:"12",strokeDasharray:2*Math.PI*9}))},f=function(e){var t=e.children,r=e.threshold,n=e.onVisibilityChanged,o=i.useRef(null);return i.useLayoutEffect((function(){var e=new IntersectionObserver((function(e){e.forEach((function(e){var t=e.isIntersecting,r=e.intersectionRatio;n({isVisible:t,ratio:r})}))}),{threshold:r||0}),t=o.current;if(t)return e.observe(t),function(){e.unobserve(t)}}),[]),i.createElement("div",{ref:o},t)},p=i.createContext({}),d={core:{askingPassword:{requirePasswordToOpen:"This document requires a password to open",submit:"Submit"},wrongPassword:{submit:"Submit",tryAgain:"The password is wrong. Please try again"}}},g=function(e){var t=e.children,r=e.localization,n=d,o=i.useState(r||n),a=o[0],s=o[1];return i.createElement(p.Provider,{value:a},t((function(e){return s(e)})))};!function(e){e.Close="Close",e.Open="Open",e.Toggle="Toggle"}(a||(a={}));var m,v=function(){var e=i.useState(!1),t=e[0],r=e[1];return{opened:t,toggle:function(e){switch(e){case a.Close:r(!1);break;case a.Open:r(!0);break;case a.Toggle:default:r((function(e){return!e}))}}}};!function(e){e.TopLeft="TOP_LEFT",e.TopCenter="TOP_CENTER",e.TopRight="TOP_RIGHT",e.RightTop="RIGHT_TOP",e.RightCenter="RIGHT_CENTER",e.RightBottom="RIGHT_BOTTOM",e.BottomLeft="BOTTOM_LEFT",e.BottomCenter="BOTTOM_CENTER",e.BottomRight="BOTTOM_RIGHT",e.LeftTop="LEFT_TOP",e.LeftCenter="LEFT_CENTER",e.LeftBottom="LEFT_BOTTOM"}(m||(m={}));var y;!function(e){e.ActualSize="ActualSize",e.PageFit="PageFit",e.PageWidth="PageWidth"}(y||(y={}));var _=y,b=function(e,t){return(b=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)t.hasOwnProperty(r)&&(e[r]=t[r])})(e,t)};function A(e,t){function r(){this.constructor=e}b(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)}var x,w=function(){return(w=Object.assign||function(e){for(var t,r=1,n=arguments.length;r<n;r++)for(var i in t=arguments[r])Object.prototype.hasOwnProperty.call(t,i)&&(e[i]=t[i]);return e}).apply(this,arguments)};!function(e){e[e.PreRender=0]="PreRender",e[e.DidRender=1]="DidRender"}(x||(x={}));var S,E=x;!function(e){e[e.Solid=1]="Solid",e[e.Dashed=2]="Dashed",e[e.Beveled=3]="Beveled",e[e.Inset=4]="Inset",e[e.Underline=5]="Underline"}(S||(S={}));var C,k=S,P=new RegExp("^D:(\\d{4})(\\d{2})?(\\d{2})?(\\d{2})?(\\d{2})?(\\d{2})?([Z|+|-])?(\\d{2})?'?(\\d{2})?'?"),R=function(e,t,r,n){var i=parseInt(e,10);return i>=t&&i<=r?i:n},T=function(e){var t=e.annotation,r=i.useContext(c),n="";if(t.modificationDate){var o=function(e){var t=P.exec(e);if(!t)return null;var r=parseInt(t[1],10),n=R(t[2],1,12,1)-1,i=R(t[3],1,31,1),o=R(t[4],0,23,0),a=R(t[5],0,59,0),s=R(t[6],0,59,0),c=t[7]||"Z",u=R(t[8],0,23,0),l=R(t[9],0,59,0);switch(c){case"-":o+=u,a+=l;break;case"+":o-=u,a-=l}return new Date(Date.UTC(r,n,i,o,a,s))}(t.modificationDate);n=o?o.toLocaleDateString()+", "+o.toLocaleTimeString():""}return i.createElement("div",{className:r.prefixClass+"-annotation-popup-wrapper",style:{top:t.annotationType===s.Popup?"":"100%"}},t.title&&i.createElement("div",{className:r.prefixClass+"-annotation-popup-wrapper-header"},i.createElement("div",{className:r.prefixClass+"-annotation-popup-wrapper-title"},t.title),i.createElement("span",{className:r.prefixClass+"-annotation-popup-wrapper-date"},n)),t.contents&&i.createElement("div",{className:r.prefixClass+"-annotation-popup-wrapper-content"},t.contents.split("\n").map((function(e,t){return i.createElement(i.Fragment,{key:t},e,i.createElement("br",null))}))))};!function(e){e.Click="Click",e.Hover="Hover"}(C||(C={}));var O=function(e){var t,r=e.annotation,n=e.children,o=e.ignoreBorder,s=e.hasPopup,c=e.isRenderable,u=e.page,l=e.viewport,h=r.rect,f=function(){var e=v(),t=e.opened,r=e.toggle,n=i.useState(C.Hover),o=n[0],s=n[1];return{opened:t,closeOnHover:function(){o===C.Hover&&r(a.Close)},openOnHover:function(){o===C.Hover&&r(a.Open)},toggleOnClick:function(){switch(o){case C.Click:t&&s(C.Hover),r(a.Toggle);break;case C.Hover:s(C.Click),r(a.Open)}}}}(),p=f.closeOnHover,d=f.opened,g=f.openOnHover,m=f.toggleOnClick,y=(t=[h[0],u.view[3]+u.view[1]-h[1],h[2],u.view[3]+u.view[1]-h[3]],[Math.min(t[0],t[2]),Math.min(t[1],t[3]),Math.max(t[0],t[2]),Math.max(t[1],t[3])]),_=h[2]-h[0],b=h[3]-h[1],A={borderColor:"",borderRadius:"",borderStyle:"",borderWidth:""};if(!o&&r.borderStyle.width>0){switch(r.borderStyle.style){case k.Dashed:A.borderStyle="dashed";break;case k.Solid:A.borderStyle="solid";break;case k.Underline:A=Object.assign({borderBottomStyle:"solid"},A);break;case k.Beveled:case k.Inset:}var x=r.borderStyle.width;A.borderWidth=x+"px",r.borderStyle.style!==k.Underline&&(_-=2*x,b-=2*x);var w=r.borderStyle,S=w.horizontalCornerRadius,E=w.verticalCornerRadius;(S>0||E>0)&&(A.borderRadius=S+"px / "+E+"px"),r.color?A.borderColor="rgb("+(0|r.color[0])+", "+(0|r.color[1])+", "+(0|r.color[2])+")":A.borderWidth="0"}return i.createElement(i.Fragment,null,c&&n({popup:{opened:d,closeOnHover:p,openOnHover:g,toggleOnClick:m},slot:{attrs:{style:Object.assign({height:b+"px",left:y[0]+"px",top:y[1]+"px",transform:"matrix("+l.transform.join(",")+")",transformOrigin:"-"+y[0]+"px -"+y[1]+"px",width:_+"px"},A)},children:i.createElement(i.Fragment,null,s&&d&&i.createElement(T,{annotation:r}))}}))},L=function(e){var t=e.annotation,r=e.page,n=e.viewport,o=i.useContext(c),a=!1===t.hasPopup,s=!!(t.hasPopup||t.title||t.contents);return i.createElement(O,{annotation:t,hasPopup:a,ignoreBorder:!0,isRenderable:s,page:r,viewport:n},(function(e){return i.createElement("div",w({},e.slot.attrs,{className:o.prefixClass+"-annotation "+o.prefixClass+"-annotation-caret","data-annotation-id":t.id,onClick:e.popup.toggleOnClick,onMouseEnter:e.popup.openOnHover,onMouseLeave:e.popup.closeOnHover}),e.slot.children)}))},F=function(e){var t=e.annotation,r=e.page,n=e.viewport,o=i.useContext(c),a=!1===t.hasPopup,s=!!(t.hasPopup||t.title||t.contents),u=t.rect,l=u[2]-u[0],h=u[3]-u[1],f=t.borderStyle.width;return i.createElement(O,{annotation:t,hasPopup:a,ignoreBorder:!0,isRenderable:s,page:r,viewport:n},(function(e){return i.createElement("div",w({},e.slot.attrs,{className:o.prefixClass+"-annotation "+o.prefixClass+"-annotation-circle","data-annotation-id":t.id,onClick:e.popup.toggleOnClick,onMouseEnter:e.popup.openOnHover,onMouseLeave:e.popup.closeOnHover}),i.createElement("svg",{height:h+"px",preserveAspectRatio:"none",version:"1.1",viewBox:"0 0 "+l+" "+h,width:l+"px"},i.createElement("circle",{cy:h/2,fill:"none",rx:l/2-f/2,ry:h/2-f/2,stroke:"transparent",strokeWidth:f||1})),e.slot.children)}))},I=function(e){var t=e.annotation,r=e.page,n=e.viewport,o=i.useContext(c),a=!(!1!==t.hasPopup||!t.title&&!t.contents),s=function(){var e,r,n,i,o=t.file;o&&(e=o.filename,n="string"==typeof(r=o.content)?"":URL.createObjectURL(new Blob([r],{type:""})),(i=document.createElement("a")).style.display="none",i.href=n||e,i.setAttribute("download",function(e){var t=e.split("/").pop();return t?t.split("#")[0].split("?")[0]:e}(e)),document.body.appendChild(i),i.click(),document.body.removeChild(i),n&&URL.revokeObjectURL(n))};return i.createElement(O,{annotation:t,hasPopup:a,ignoreBorder:!0,isRenderable:!0,page:r,viewport:n},(function(e){return i.createElement("div",w({},e.slot.attrs,{className:o.prefixClass+"-annotation "+o.prefixClass+"-annotation-file-attachment","data-annotation-id":t.id,onClick:e.popup.toggleOnClick,onDoubleClick:s,onMouseEnter:e.popup.openOnHover,onMouseLeave:e.popup.closeOnHover}),e.slot.children)}))},M=function(e){var t=e.annotation,r=e.page,n=e.viewport,o=i.useContext(c),a=!1===t.hasPopup,s=!!(t.hasPopup||t.title||t.contents);return i.createElement(O,{annotation:t,hasPopup:a,ignoreBorder:!0,isRenderable:s,page:r,viewport:n},(function(e){return i.createElement("div",w({},e.slot.attrs,{className:o.prefixClass+"-annotation "+o.prefixClass+"-annotation-free-text","data-annotation-id":t.id,onClick:e.popup.toggleOnClick,onMouseEnter:e.popup.openOnHover,onMouseLeave:e.popup.closeOnHover}),e.slot.children)}))},N=function(e){var t=e.annotation,r=e.page,n=e.viewport,o=i.useContext(c),a=!1===t.hasPopup,s=!!(t.hasPopup||t.title||t.contents);return i.createElement(O,{annotation:t,hasPopup:a,ignoreBorder:!0,isRenderable:s,page:r,viewport:n},(function(e){return i.createElement("div",w({},e.slot.attrs,{className:o.prefixClass+"-annotation "+o.prefixClass+"-annotation-highlight","data-annotation-id":t.id,onClick:e.popup.toggleOnClick,onMouseEnter:e.popup.openOnHover,onMouseLeave:e.popup.closeOnHover}),e.slot.children)}))},D=function(e){var t=e.annotation,r=e.page,n=e.viewport,o=i.useContext(c),a=!1===t.hasPopup,s=!!(t.hasPopup||t.title||t.contents),u=t.rect,l=u[2]-u[0],h=u[3]-u[1],f=t.borderStyle.width;return i.createElement(O,{annotation:t,hasPopup:a,ignoreBorder:!0,isRenderable:s,page:r,viewport:n},(function(e){return i.createElement("div",w({},e.slot.attrs,{className:o.prefixClass+"-annotation "+o.prefixClass+"-annotation-ink","data-annotation-id":t.id,onClick:e.popup.toggleOnClick,onMouseEnter:e.popup.openOnHover,onMouseLeave:e.popup.closeOnHover}),t.inkLists&&t.inkLists.length&&i.createElement("svg",{height:h+"px",preserveAspectRatio:"none",version:"1.1",viewBox:"0 0 "+l+" "+h,width:l+"px"},t.inkLists.map((function(e,t){return i.createElement("polyline",{key:t,fill:"none",stroke:"transparent",strokeWidth:f||1,points:e.map((function(e){return e.x-u[0]+","+(u[3]-e.y)})).join(" ")})}))),e.slot.children)}))},j=function(e){var t=e.annotation,r=e.page,n=e.viewport,o=i.useContext(c),a=!1===t.hasPopup,s=!!(t.hasPopup||t.title||t.contents),u=t.rect,l=u[2]-u[0],h=u[3]-u[1],f=t.borderStyle.width;return i.createElement(O,{annotation:t,hasPopup:a,ignoreBorder:!0,isRenderable:s,page:r,viewport:n},(function(e){return i.createElement("div",w({},e.slot.attrs,{className:o.prefixClass+"-annotation "+o.prefixClass+"-annotation-line","data-annotation-id":t.id,onClick:e.popup.toggleOnClick,onMouseEnter:e.popup.openOnHover,onMouseLeave:e.popup.closeOnHover}),i.createElement("svg",{height:h+"px",preserveAspectRatio:"none",version:"1.1",viewBox:"0 0 "+l+" "+h,width:l+"px"},i.createElement("line",{stroke:"transparent",strokeWidth:f||1,x1:u[2]-t.lineCoordinates[0],x2:u[2]-t.lineCoordinates[2],y1:u[3]-t.lineCoordinates[1],y2:u[3]-t.lineCoordinates[3]})),e.slot.children)}))},U=function(e){var t=e.annotation,r=e.doc,n=e.page,o=e.viewport,a=e.onExecuteNamedAction,s=e.onJumpToDest,u=i.useContext(c),l=!!(t.url||t.dest||t.action),h=t.url?{href:t.url,rel:"noopener noreferrer nofollow",target:t.newWindow?"_blank":"",title:t.url}:{href:"",onClick:function(e){e.preventDefault(),t.action?a(t.action):function(e,t){return new Promise((function(r){new Promise((function(r){"string"==typeof t?e.getDestination(t).then((function(e){r(e)})):r(t)})).then((function(t){e.getPageIndex(t[0]).then((function(e){var n=function(e,t){switch(t[1].name){case"XYZ":return{bottomOffset:t[3],pageIndex:e-1,scaleTo:t[4]};case"Fit":return{bottomOffset:0,pageIndex:e-1,scaleTo:_.PageFit};default:return{bottomOffset:0,pageIndex:e-1,scaleTo:1}}}(e,t);r(n)}))}))}))}(r,t.dest).then((function(e){var t=e.pageIndex,r=e.bottomOffset,n=e.scaleTo;s(t+1,r,0,n)}))}};return i.createElement(O,{annotation:t,hasPopup:!1,ignoreBorder:!1,isRenderable:l,page:n,viewport:o},(function(e){return i.createElement("div",w({},e.slot.attrs,{className:u.prefixClass+"-annotation "+u.prefixClass+"-annotation-link","data-annotation-id":t.id}),i.createElement("a",w({},h)))}))},W=function(e){var t=e.annotation,r=e.page,n=e.viewport,o=i.useContext(c),a=!1===t.hasPopup,s=!!(t.hasPopup||t.title||t.contents),u=t.rect,l=u[2]-u[0],h=u[3]-u[1],f=t.borderStyle.width;return i.createElement(O,{annotation:t,hasPopup:a,ignoreBorder:!0,isRenderable:s,page:r,viewport:n},(function(e){return i.createElement("div",w({},e.slot.attrs,{className:o.prefixClass+"-annotation "+o.prefixClass+"-annotation-polygon","data-annotation-id":t.id,onClick:e.popup.toggleOnClick,onMouseEnter:e.popup.openOnHover,onMouseLeave:e.popup.closeOnHover}),t.vertices&&t.vertices.length&&i.createElement("svg",{height:h+"px",preserveAspectRatio:"none",version:"1.1",viewBox:"0 0 "+l+" "+h,width:l+"px"},i.createElement("polygon",{fill:"none",stroke:"transparent",strokeWidth:f||1,points:t.vertices.map((function(e){return e.x-u[0]+","+(u[3]-e.y)})).join(" ")})),e.slot.children)}))},q=function(e){var t=e.annotation,r=e.page,n=e.viewport,o=i.useContext(c),a=!1===t.hasPopup,s=!!(t.hasPopup||t.title||t.contents),u=t.rect,l=u[2]-u[0],h=u[3]-u[1],f=t.borderStyle.width;return i.createElement(O,{annotation:t,hasPopup:a,ignoreBorder:!0,isRenderable:s,page:r,viewport:n},(function(e){return i.createElement("div",w({},e.slot.attrs,{className:o.prefixClass+"-annotation "+o.prefixClass+"-annotation-polyline","data-annotation-id":t.id,onClick:e.popup.toggleOnClick,onMouseEnter:e.popup.openOnHover,onMouseLeave:e.popup.closeOnHover}),t.vertices&&t.vertices.length&&i.createElement("svg",{height:h+"px",preserveAspectRatio:"none",version:"1.1",viewBox:"0 0 "+l+" "+h,width:l+"px"},i.createElement("polyline",{fill:"none",stroke:"transparent",strokeWidth:f||1,points:t.vertices.map((function(e){return e.x-u[0]+","+(u[3]-e.y)})).join(" ")})),e.slot.children)}))},B=function(e){var t=e.annotation,r=e.page,n=e.viewport,o=i.useContext(c),a=!(!t.title&&!t.contents),s=!t.parentType||-1!==["Circle","Ink","Line","Polygon","PolyLine","Square"].indexOf(t.parentType);return i.useLayoutEffect((function(){if(t.parentId){var e=document.querySelector('[data-annotation-id="'+t.parentId+'"]'),r=document.querySelector('[data-annotation-id="'+t.id+'"]');if(e&&r){var n=parseFloat(e.style.left),i=parseFloat(e.style.top)+parseFloat(e.style.height);r.style.left=n+"px",r.style.top=i+"px",r.style.transformOrigin="-"+n+"px -"+i+"px"}}}),[]),i.createElement(O,{annotation:t,hasPopup:s,ignoreBorder:!1,isRenderable:a,page:r,viewport:n},(function(e){return i.createElement("div",w({},e.slot.attrs,{className:o.prefixClass+"-annotation "+o.prefixClass+"-annotation-popup","data-annotation-id":t.id}),i.createElement(T,{annotation:t}))}))},H=function(e){var t=e.annotation,r=e.page,n=e.viewport,o=i.useContext(c),a=!1===t.hasPopup,s=!!(t.hasPopup||t.title||t.contents),u=t.rect,l=u[2]-u[0],h=u[3]-u[1],f=t.borderStyle.width;return i.createElement(O,{annotation:t,hasPopup:a,ignoreBorder:!0,isRenderable:s,page:r,viewport:n},(function(e){return i.createElement("div",w({},e.slot.attrs,{className:o.prefixClass+"-annotation "+o.prefixClass+"-annotation-square","data-annotation-id":t.id,onClick:e.popup.toggleOnClick,onMouseEnter:e.popup.openOnHover,onMouseLeave:e.popup.closeOnHover}),i.createElement("svg",{height:h+"px",preserveAspectRatio:"none",version:"1.1",viewBox:"0 0 "+l+" "+h,width:l+"px"},i.createElement("rect",{height:h-f,fill:"none",stroke:"transparent",strokeWidth:f||1,x:f/2,y:f/2,width:l-f})),e.slot.children)}))},G=function(e){var t=e.annotation,r=e.page,n=e.viewport,o=i.useContext(c),a=!1===t.hasPopup,s=!!(t.hasPopup||t.title||t.contents);return i.createElement(O,{annotation:t,hasPopup:a,ignoreBorder:!0,isRenderable:s,page:r,viewport:n},(function(e){return i.createElement("div",w({},e.slot.attrs,{className:o.prefixClass+"-annotation "+o.prefixClass+"-annotation-squiggly","data-annotation-id":t.id,onClick:e.popup.toggleOnClick,onMouseEnter:e.popup.openOnHover,onMouseLeave:e.popup.closeOnHover}),e.slot.children)}))},z=function(e){var t=e.annotation,r=e.page,n=e.viewport,o=i.useContext(c),a=!1===t.hasPopup,s=!!(t.hasPopup||t.title||t.contents);return i.createElement(O,{annotation:t,hasPopup:a,ignoreBorder:!0,isRenderable:s,page:r,viewport:n},(function(e){return i.createElement("div",w({},e.slot.attrs,{className:o.prefixClass+"-annotation "+o.prefixClass+"-annotation-stamp","data-annotation-id":t.id,onClick:e.popup.toggleOnClick,onMouseEnter:e.popup.openOnHover,onMouseLeave:e.popup.closeOnHover}),e.slot.children)}))},Y=function(e){var t=e.annotation,r=e.page,n=e.viewport,o=i.useContext(c),a=!1===t.hasPopup,s=!!(t.hasPopup||t.title||t.contents);return i.createElement(O,{annotation:t,hasPopup:a,ignoreBorder:!0,isRenderable:s,page:r,viewport:n},(function(e){return i.createElement("div",w({},e.slot.attrs,{className:o.prefixClass+"-annotation "+o.prefixClass+"-annotation-strike-out","data-annotation-id":t.id,onClick:e.popup.toggleOnClick,onMouseEnter:e.popup.openOnHover,onMouseLeave:e.popup.closeOnHover}),e.slot.children)}))},V=function(){return i.createElement(u,{size:16},i.createElement("path",{d:"M.5,16.5a1,1,0,0,0,1,1h2v4l4-4h15a1,1,0,0,0,1-1V3.5a1,1,0,0,0-1-1H1.5a1,1,0,0,0-1,1Z"}),i.createElement("path",{d:"M7.25,9.75A.25.25,0,1,1,7,10a.25.25,0,0,1,.25-.25"}),i.createElement("path",{d:"M12,9.75a.25.25,0,1,1-.25.25A.25.25,0,0,1,12,9.75"}),i.createElement("path",{d:"M16.75,9.75a.25.25,0,1,1-.25.25.25.25,0,0,1,.25-.25"}))},$=function(){return i.createElement(u,{size:16},i.createElement("path",{d:"M0.500 12.001 A11.500 11.500 0 1 0 23.500 12.001 A11.500 11.500 0 1 0 0.500 12.001 Z"}),i.createElement("path",{d:"M6.000 12.001 A6.000 6.000 0 1 0 18.000 12.001 A6.000 6.000 0 1 0 6.000 12.001 Z"}),i.createElement("path",{d:"M21.423 5.406L17.415 9.414"}),i.createElement("path",{d:"M14.587 6.585L18.607 2.565"}),i.createElement("path",{d:"M5.405 21.424L9.413 17.416"}),i.createElement("path",{d:"M6.585 14.588L2.577 18.596"}),i.createElement("path",{d:"M18.602 21.419L14.595 17.412"}),i.createElement("path",{d:"M17.419 14.58L21.428 18.589"}),i.createElement("path",{d:"M2.582 5.399L6.588 9.406"}),i.createElement("path",{d:"M9.421 6.581L5.412 2.572"}))},X=function(){return i.createElement(u,{size:16},i.createElement("path",{d:"M4.000 18.500 A1.500 1.500 0 1 0 7.000 18.500 A1.500 1.500 0 1 0 4.000 18.500 Z"}),i.createElement("path",{d:"M20.5.5l-9.782,9.783a7,7,0,1,0,3,3L17,10h1.5V8.5L19,8h1.5V6.5L21,6h1.5V4.5l1-1V.5Z"}))},K=function(){return i.createElement(u,{size:16},i.createElement("path",{d:"M2.000 2.500 L22.000 2.500 L22.000 23.500 L2.000 23.500 Z"}),i.createElement("path",{d:"M6 4.5L6 0.5"}),i.createElement("path",{d:"M18 4.5L18 0.5"}),i.createElement("path",{d:"M10 4.5L10 0.5"}),i.createElement("path",{d:"M14 4.5L14 0.5"}))},J=function(){return i.createElement(u,{size:16},i.createElement("path",{d:"M17.5 0.498L17.5 23.498"}),i.createElement("path",{d:"M10.5 0.498L10.5 23.498"}),i.createElement("path",{d:"M23.5.5H6.5a6,6,0,0,0,0,12h4"}))},Q=function(){return i.createElement(u,{size:16},i.createElement("path",{d:"M2.5 22.995L12 6.005 21.5 22.995 2.5 22.995z"}))},Z=function(e){var t=e.annotation,r=e.childAnnotation,n=e.page,o=e.viewport,a=i.useContext(c),u=!1===t.hasPopup,h=!!(t.hasPopup||t.title||t.contents),f=t.name?t.name.toLowerCase():"";return i.createElement(O,{annotation:t,hasPopup:u,ignoreBorder:!1,isRenderable:h,page:n,viewport:o},(function(e){return i.createElement(i.Fragment,null,i.createElement("div",w({},e.slot.attrs,{className:a.prefixClass+"-annotation "+a.prefixClass+"-annotation-text","data-annotation-id":t.id,onClick:e.popup.toggleOnClick,onMouseEnter:e.popup.openOnHover,onMouseLeave:e.popup.closeOnHover}),f&&i.createElement("div",{className:a.prefixClass+"-annotation-text-icon"},"check"===f&&i.createElement(l,null),"comment"===f&&i.createElement(V,null),"help"===f&&i.createElement($,null),"insert"===f&&i.createElement(Q,null),"key"===f&&i.createElement(X,null),"note"===f&&i.createElement(K,null),("newparagraph"===f||"paragraph"===f)&&i.createElement(J,null)),e.slot.children),r&&r.annotationType===s.Popup&&e.popup.opened&&i.createElement(B,{annotation:r,page:n,viewport:o}))}))},ee=function(e){var t=e.annotation,r=e.page,n=e.viewport,o=i.useContext(c),a=!1===t.hasPopup,s=!!(t.hasPopup||t.title||t.contents);return i.createElement(O,{annotation:t,hasPopup:a,ignoreBorder:!0,isRenderable:s,page:r,viewport:n},(function(e){return i.createElement("div",w({},e.slot.attrs,{className:o.prefixClass+"-annotation "+o.prefixClass+"-annotation-underline","data-annotation-id":t.id,onClick:e.popup.toggleOnClick,onMouseEnter:e.popup.openOnHover,onMouseLeave:e.popup.closeOnHover}),e.slot.children)}))},te=function(e){var t=e.annotations,r=e.containerRef,n=e.doc,o=e.page,a=e.pageIndex,c=e.plugins,u=e.rotation,l=e.scale,h=e.onExecuteNamedAction,f=e.onJumpToDest,p=o.getViewport({rotation:u,scale:l}).clone({dontFlip:!0}),d=t.filter((function(e){return!e.parentId}));return i.useEffect((function(){var e=r.current;e&&c.forEach((function(t){t.onAnnotationLayerRender&&t.onAnnotationLayerRender({annotations:d,container:e,pageIndex:a,rotation:u,scale:l})}))}),[]),i.createElement(i.Fragment,null,d.map((function(e){var r=t.find((function(t){return t.parentId===e.id}));switch(e.annotationType){case s.Caret:return i.createElement(L,{key:e.id,annotation:e,page:o,viewport:p});case s.Circle:return i.createElement(F,{key:e.id,annotation:e,page:o,viewport:p});case s.FileAttachment:return i.createElement(I,{key:e.id,annotation:e,page:o,viewport:p});case s.FreeText:return i.createElement(M,{key:e.id,annotation:e,page:o,viewport:p});case s.Highlight:return i.createElement(N,{key:e.id,annotation:e,page:o,viewport:p});case s.Ink:return i.createElement(D,{key:e.id,annotation:e,page:o,viewport:p});case s.Line:return i.createElement(j,{key:e.id,annotation:e,page:o,viewport:p});case s.Link:return i.createElement(U,{key:e.id,annotation:e,doc:n,page:o,viewport:p,onExecuteNamedAction:h,onJumpToDest:f});case s.Polygon:return i.createElement(W,{key:e.id,annotation:e,page:o,viewport:p});case s.Polyline:return i.createElement(q,{key:e.id,annotation:e,page:o,viewport:p});case s.Popup:return i.createElement(B,{key:e.id,annotation:e,page:o,viewport:p});case s.Square:return i.createElement(H,{key:e.id,annotation:e,page:o,viewport:p});case s.Squiggly:return i.createElement(G,{key:e.id,annotation:e,page:o,viewport:p});case s.Stamp:return i.createElement(z,{key:e.id,annotation:e,page:o,viewport:p});case s.StrikeOut:return i.createElement(Y,{key:e.id,annotation:e,page:o,viewport:p});case s.Text:return i.createElement(Z,{key:e.id,annotation:e,childAnnotation:r,page:o,viewport:p});case s.Underline:return i.createElement(ee,{key:e.id,annotation:e,page:o,viewport:p});default:return i.createElement(i.Fragment,{key:e.id})}})))},re=function(e){var t=e.page,r=e.renderAnnotations,n=i.useState({loading:!0,annotations:[]}),o=n[0],a=n[1];return i.useEffect((function(){t.getAnnotations({intent:"display"}).then((function(e){a({loading:!1,annotations:e})}))}),[]),o.loading?i.createElement(i.Fragment,null):r(o.annotations)},ne=function(e){var t=e.doc,r=e.page,n=e.pageIndex,o=e.plugins,a=e.rotation,s=e.scale,u=e.onExecuteNamedAction,l=e.onJumpToDest,h=i.useContext(c),f=i.createRef();return i.createElement("div",{ref:f,className:h.prefixClass+"-annotation-layer"},i.createElement(re,{page:r,renderAnnotations:function(e){return i.createElement(te,{annotations:e,containerRef:f,doc:t,page:r,pageIndex:n,plugins:o,rotation:a,scale:s,onExecuteNamedAction:u,onJumpToDest:l})}}))},ie=function(e){var t=e.callback,r=e.children,n=e.rotation,o=e.scale;return i.useLayoutEffect((function(){t()}),[n,o]),i.createElement(i.Fragment,null,r)},oe=function(e){var t=e.height,r=e.page,n=e.pageIndex,o=e.plugins,a=e.rotation,s=e.scale,u=e.width,l=i.useContext(c),h=i.createRef(),f=i.useRef(),p=window.devicePixelRatio||1;return i.createElement(ie,{callback:function(){var e=f.current;e&&e.cancel();var i=h.current;o.forEach((function(e){e.onCanvasLayerRender&&e.onCanvasLayerRender({ele:i,pageIndex:n,rotation:a,scale:s,status:E.PreRender})})),i.height=t*p,i.width=u*p,i.style.opacity="0";var c=i.getContext("2d",{alpha:!1}),l=r.getViewport({rotation:a,scale:s*p});f.current=r.render({canvasContext:c,viewport:l}),f.current.promise.then((function(){i.style.removeProperty("opacity"),o.forEach((function(e){e.onCanvasLayerRender&&e.onCanvasLayerRender({ele:i,pageIndex:n,rotation:a,scale:s,status:E.DidRender})}))}),(function(){}))},rotation:a,scale:s},i.createElement("div",{className:l.prefixClass+"-canvas-layer",style:{height:t+"px",width:u+"px"}},i.createElement("canvas",{ref:h,style:{transform:"scale("+1/p+")",transformOrigin:"top left"}})))},ae=function(e){var t=e.height,r=e.page,n=e.rotation,a=e.scale,s=e.width,u=i.useContext(c),l=i.createRef();return i.createElement(ie,{callback:function(){var e=l.current,i=r.getViewport({rotation:n,scale:a});r.getOperatorList().then((function(n){!function(){var e=l.current;e&&(e.innerHTML="")}(),new o.SVGGraphics(r.commonObjs,r.objs).getSVG(n,i).then((function(r){r.style.height=t+"px",r.style.width=s+"px",e.appendChild(r)}))}))},rotation:n,scale:a},i.createElement("div",{className:u.prefixClass+"-svg-layer",ref:l}))},se=function(e){var t=e.page,r=e.pageIndex,n=e.plugins,a=e.rotation,s=e.scale,u=i.useContext(c),l=i.createRef(),h=i.useRef();return i.createElement(ie,{callback:function(){var e=h.current;e&&e.cancel();var i=l.current;if(i){var c=t.getViewport({rotation:a,scale:s});n.forEach((function(e){e.onTextLayerRender&&e.onTextLayerRender({ele:i,pageIndex:r,scale:s,status:E.PreRender})})),t.getTextContent().then((function(e){!function(){var e=l.current;if(e)for(var t=e.querySelectorAll("span."+u.prefixClass+"-text"),r=t.length,n=0;n<r;n++){var i=t[n];e.removeChild(i)}}(),h.current=o.renderTextLayer({container:i,textContent:e,viewport:c}),h.current.promise.then((function(){for(var e=i.childNodes,t=e.length,o=0;o<t;o++)e[o].classList.add(u.prefixClass+"-text");n.forEach((function(e){e.onTextLayerRender&&e.onTextLayerRender({ele:i,pageIndex:r,scale:s,status:E.DidRender})}))}),(function(){}))}))}},rotation:a,scale:s},i.createElement("div",{className:u.prefixClass+"-text-layer",ref:l}))},ce=function(e){var t=e.currentPage,r=e.doc,n=e.height,o=e.pageIndex,a=e.plugins,s=e.renderPage,u=e.rotation,l=e.scale,p=e.width,d=e.onExecuteNamedAction,g=e.onJumpToDest,m=e.onPageVisibilityChanged,v=i.useContext(c),y=i.useState({page:null,pageHeight:n,pageWidth:p,viewportRotation:0}),_=y[0],b=y[1],A=_.page,x=_.pageHeight,w=_.pageWidth,S=i.useRef(!1),E=Array(10).fill(null).map((function(e,t){return t/10})),C=w*l,k=x*l,P=Math.abs(u)%180==0,R=P?C:k,T=P?k:C,O=function(){S.current||(S.current=!0,r.getPage(o+1).then((function(e){var t=e.getViewport({scale:1});b({page:e,pageHeight:t.height,pageWidth:t.width,viewportRotation:t.rotation})})))},L=s||function(e){return i.createElement(i.Fragment,null,e.canvasLayer.children,e.textLayer.children,e.annotationLayer.children)},F=(u+_.viewportRotation)%360;return i.useEffect((function(){t-2<=o&&o<=t+2&&O()}),[t]),i.createElement(f,{onVisibilityChanged:function(e){m(o,e.isVisible?e.ratio:-1),e.isVisible&&O()},threshold:E},i.createElement("div",{className:v.prefixClass+"-page-layer",style:{height:T+"px",width:R+"px"}},A?i.createElement(i.Fragment,null,L({annotationLayer:{attrs:{},children:i.createElement(ne,{doc:r,page:A,pageIndex:o,plugins:a,rotation:F,scale:l,onExecuteNamedAction:d,onJumpToDest:g})},canvasLayer:{attrs:{},children:i.createElement(oe,{height:T,page:A,pageIndex:o,plugins:a,rotation:F,scale:l,width:R})},doc:r,height:T,pageIndex:o,rotation:u,scale:l,svgLayer:{attrs:{},children:i.createElement(ae,{height:T,page:A,rotation:F,scale:l,width:R})},textLayer:{attrs:{},children:i.createElement(se,{page:A,pageIndex:o,plugins:a,rotation:F,scale:l})},width:R}),a.map((function(e,t){return e.renderPageLayer?i.createElement(i.Fragment,{key:t},e.renderPageLayer({doc:r,height:T,pageIndex:o,rotation:u,scale:l,width:R})):i.createElement(i.Fragment,{key:t})}))):i.createElement(h,null)))},ue=function(e){var t=e.defaultScale,r=e.doc,n=e.initialPage,o=e.pageSize,a=e.plugins,s=e.renderPage,u=e.viewerState,l=e.onDocumentLoad,h=e.onOpenFile,f=e.onPageChange,p=e.onZoom,d=i.useContext(c),g=i.useRef(null),m=i.useRef(null),v=i.useState(o.scale),y=v[0],b=v[1],A=i.useState(0),x=A[0],S=A[1],E=i.useState(0),C=E[0],k=E[1],P=i.useRef(u),R=r.numPages,T=o.pageWidth,O=o.pageHeight,L=Array(R).fill(null),F=L.map((function(){return 0})),I=L.map((function(){return i.useRef()})),M=function(e){var t=e;a.forEach((function(e){e.onViewerStateChange&&(t=e.onViewerStateChange(t))})),P.current=t},N=function(){return m.current},D=function(e){return e<0||e>=R?null:I[e].current},j=function(){return P.current},U=function(e,t,n,i){var o=m.current,a=P.current;if(o&&a){var s=e+1;r.getPage(s).then((function(r){var s=r.getViewport({scale:1}),c=0,u=t||0,l=n||0;switch(i){case _.PageFit:c=0,l=0,H(_.PageFit);break;default:c=(s.height-u)*a.scale,l*=a.scale}var h=I[e].current;h&&(o.scrollTop=h.offsetTop+c,o.scrollLeft=h.offsetLeft+l)}))}},W=function(e){if(!(e<0||e>=R)){var t=m.current,r=I[e].current;t&&r&&(t.scrollTop=r.offsetTop,t.scrollLeft=r.offsetLeft),S(e)}},q=function(e){var t,r;"pdf"===(t=e.name,r=t.split(/\./).pop(),r?r.toLowerCase():"").toLowerCase()&&new Promise((function(t){var r=new FileReader;r.readAsArrayBuffer(e),r.onload=function(){var e=new Uint8Array(r.result);t(e)}})).then((function(t){h(e.name,t)}))},B=function(e){k(e),M({file:u.file,pageIndex:x,pageHeight:O,pageWidth:T,rotation:e,scale:y})},H=function(e){var t=m.current,n=P.current;if(t&&n){var i=1;switch(e){case _.ActualSize:i=1;break;case _.PageFit:i=Math.min((t.clientWidth-17)/T,(t.clientHeight-16)/O);break;case _.PageWidth:i=(t.clientWidth-17)/T;break;default:i=e}b(i),p({doc:r,scale:i})}};i.useEffect((function(){var e=m.current,t=P.current;e&&t&&(e.scrollTop=e.scrollTop*y/t.scale,e.scrollLeft=e.scrollLeft*y/t.scale,M({file:u.file,pageIndex:t.pageIndex,pageHeight:O,pageWidth:T,rotation:C,scale:y}))}),[y]),i.useEffect((function(){var e={getPageElement:D,getPagesContainer:N,getViewerState:j,jumpToDestination:U,jumpToPage:W,openFile:q,rotate:B,setViewerState:M,zoom:H};return a.forEach((function(t){t.install&&t.install(e)})),function(){a.forEach((function(t){t.uninstall&&t.uninstall(e)}))}}),[]),i.useEffect((function(){l({doc:r}),a.forEach((function(e){e.onDocumentLoad&&e.onDocumentLoad({doc:r})})),n&&W(n)}),[]),i.useEffect((function(){f({currentPage:x,doc:r}),M({file:u.file,pageIndex:x,pageHeight:O,pageWidth:T,rotation:C,scale:y})}),[x]),i.useEffect((function(){t&&H(t)}),[]);var G,z=function(e,t){F[e]=t;var r=F.reduce((function(e,t,r,n){return t>n[e]?r:e}),0);S(r)},Y=function(e){var t=x-1,r=x+1;switch(e){case"FirstPage":W(0);break;case"LastPage":W(R-1);break;case"NextPage":r<R&&W(r);break;case"PrevPage":t>=0&&W(t)}},V=function(e){return i.createElement("div",w({},e.attrs,{style:e.attrs&&e.attrs.style?e.attrs.style:{}}),e.children,e.subSlot&&V(e.subSlot))};return V((G={attrs:{ref:g,style:{height:"100%"}},children:i.createElement(i.Fragment,null),subSlot:{attrs:{ref:m,style:{height:"100%",overflow:"auto",position:"relative"}},children:i.createElement(i.Fragment,null,Array(R).fill(0).map((function(e,t){return i.createElement("div",{className:d.prefixClass+"-inner-page",key:"pagelayer-"+t,ref:function(e){I[t].current=e}},i.createElement(ce,{currentPage:x,doc:r,height:O,pageIndex:t,plugins:a,renderPage:s,rotation:C,scale:y,width:T,onExecuteNamedAction:Y,onJumpToDest:U,onPageVisibilityChanged:z}))})))}},a.forEach((function(e){e.renderViewer&&(G=e.renderViewer({containerRef:g,doc:r,pageHeight:O,pageWidth:T,rotation:C,slot:G,jumpToPage:W,openFile:q,rotate:B,zoom:H}))})),G))},le=[.1,.2,.3,.4,.5,.6,.7,.8,.9,1,1.1,1.3,1.5,1.7,1.9,2.1,2.4,2.7,3,3.3,3.7,4.1,4.6,5.1,5.7,6.3,7,7.7,8.5,9.4,10],he=function(e){var t=e.doc,r=e.render,n=i.useContext(c),o=i.useRef(null),a=i.useState({pageHeight:0,pageWidth:0,scale:1}),s=a[0],u=a[1];return i.useEffect((function(){t.getPage(1).then((function(e){var t=e.getViewport({scale:1}),r=t.width,n=t.height,i=o.current;if(i){var a,s,c=(i.clientWidth-100)/r,l=(a=Math.max(1,c),-1===(s=le.findIndex((function(e){return e>=a})))||0===s?a:le[s-1]);u({pageHeight:n,pageWidth:r,scale:l})}}))}),[t]),0===s.pageWidth?i.createElement("div",{className:n.prefixClass+"-page-size-calculator",ref:o},i.createElement(h,null)):r(s)},fe=function(){},pe=function(e){function t(t){var r=e.call(this)||this;return r.verifyPasswordFn=t,r}return A(t,e),t}(fe),de=function(e){var t=e.verifyPasswordFn,r=i.useContext(p),n=i.useContext(c),o=i.useState(""),a=o[0],s=o[1];return i.createElement("div",{className:n.prefixClass+"-asking-password"},i.createElement("div",null,i.createElement("div",{className:n.prefixClass+"-asking-password-message"},r.core.askingPassword.requirePasswordToOpen,":"),i.createElement("div",{className:n.prefixClass+"-asking-password-input-container"},i.createElement("input",{className:n.prefixClass+"-asking-password-input",type:"password",onChange:function(e){return s(e.target.value)}}),i.createElement("button",{className:n.prefixClass+"-asking-password-button",onClick:function(){return t(a)}},r.core.askingPassword.submit))))},ge=function(e){function t(t){var r=e.call(this)||this;return r.doc=t,r}return A(t,e),t}(fe),me=function(e){function t(t){var r=e.call(this)||this;return r.error=t,r}return A(t,e),t}(fe),ve=function(e){function t(t){var r=e.call(this)||this;return r.percentages=t,r}return A(t,e),t}(fe),ye=function(e){var t=e.verifyPasswordFn,r=i.useContext(p),n=i.useContext(c),o=i.useState(""),a=o[0],s=o[1];return i.createElement("div",{className:n.prefixClass+"-asking-password"},i.createElement("div",null,i.createElement("div",{className:n.prefixClass+"-asking-password-message"},r.core.wrongPassword.tryAgain,":"),i.createElement("div",{className:n.prefixClass+"-asking-password-input-container"},i.createElement("input",{className:n.prefixClass+"-asking-password-input",type:"password",onChange:function(e){return s(e.target.value)}}),i.createElement("button",{className:n.prefixClass+"-asking-password-button",onClick:function(){return t(a)}},r.core.wrongPassword.submit))))},_e=function(e){function t(t){var r=e.call(this)||this;return r.verifyPasswordFn=t,r}return A(t,e),t}(fe),be=function(e){var t=e.characterMap,r=e.file,n=e.httpHeaders,a=e.render,s=e.renderError,u=e.renderLoader,l=e.withCredentials,f=i.useContext(c),p=i.useState(new ve(0)),d=p[0],g=p[1],m=i.useState(0),v=m[0],y=m[1],_=i.useState(null),b=_[0],A=_[1];switch(i.useEffect((function(){g(new ve(0));var e=Object.assign({httpHeaders:n,withCredentials:l},"string"==typeof r?{url:r}:{data:r},t?{cMapUrl:t.url,cMapPacked:t.isCompressed}:{}),i=o.getDocument(e);return i.onPassword=function(e,t){switch(t){case o.PasswordResponses.NEED_PASSWORD:g(new pe(e));break;case o.PasswordResponses.INCORRECT_PASSWORD:g(new _e(e))}},i.onProgress=function(e){e.total>0?y(Math.min(100,100*e.loaded/e.total)):y(100)},i.promise.then((function(e){return A(e)}),(function(e){return g(new me({message:e.message||"Cannot load document",name:e.name}))})),function(){i.destroy()}}),[r]),i.useEffect((function(){g(100===v&&b?new ge(b):new ve(v))}),[v,b]),!0){case d instanceof pe:return i.createElement(de,{verifyPasswordFn:d.verifyPasswordFn});case d instanceof _e:return i.createElement(ye,{verifyPasswordFn:d.verifyPasswordFn});case d instanceof ge:return a(d.doc);case d instanceof me:return s?s(d.error):i.createElement("div",{className:f.prefixClass+"-doc-error"},i.createElement("div",{className:f.prefixClass+"-doc-error-text"},d.error.message));case d instanceof ve:return i.createElement("div",{className:f.prefixClass+"-doc-loading"},u?u(d.percentages):i.createElement(h,null));default:return i.createElement("div",{className:f.prefixClass+"-doc-loading"},i.createElement(h,null))}},Ae=function(e){var t=e.children,r=e.prefixClass;return i.createElement(c.Provider,{value:{prefixClass:r||"rpv-core"}},t)};t.Viewer=function(e){var t=e.characterMap,r=e.defaultScale,n=e.fileUrl,o=e.httpHeaders,a=void 0===o?{}:o,s=e.initialPage,c=void 0===s?0:s,u=e.localization,l=e.plugins,h=void 0===l?[]:l,f=e.prefixClass,p=e.renderError,d=e.renderPage,m=e.renderLoader,v=e.withCredentials,y=void 0!==v&&v,_=e.onDocumentLoad,b=void 0===_?function(){}:_,A=e.onPageChange,x=void 0===A?function(){}:A,w=e.onZoom,S=void 0===w?function(){}:w,E=i.useState({data:n,name:"string"==typeof n?n:""}),C=E[0],k=E[1],P=function(e,t){k({data:t,name:e})};return i.useEffect((function(){k({data:n,name:"string"==typeof n?n:""})}),[n]),i.createElement(Ae,{prefixClass:f},i.createElement(g,{localization:u},(function(e){return i.createElement(be,{characterMap:t,file:C.data,httpHeaders:a,render:function(e){return i.createElement(he,{doc:e,render:function(t){return i.createElement(ue,{defaultScale:r,doc:e,initialPage:c,pageSize:t,plugins:h,renderPage:d,viewerState:{file:C,pageIndex:c,pageHeight:t.pageHeight,pageWidth:t.pageWidth,rotation:0,scale:t.scale},onDocumentLoad:b,onOpenFile:P,onPageChange:x,onZoom:S})}})},renderError:p,renderLoader:m,withCredentials:y})})))}},4141:function(e,t,r){"use strict";e.exports=r(9469)},1926:function(e,t,r){r(2526),r(2443),r(1817),r(2401),r(8722),r(2165),r(9007),r(6066),r(3510),r(1840),r(6982),r(2159),r(6649),r(9341),r(543),r(9170),r(1038),r(9753),r(6572),r(2222),r(545),r(6541),r(3290),r(7327),r(9826),r(4553),r(4944),r(6535),r(9554),r(6699),r(2772),r(9600),r(4986),r(1249),r(5827),r(6644),r(5069),r(7042),r(5212),r(2707),r(561),r(8706),r(3792),r(9244),r(6992),r(4812),r(8309),r(4855),r(5837),r(9601),r(8011),r(9070),r(3321),r(9720),r(3371),r(8559),r(5003),r(9337),r(6210),r(489),r(3304),r(1825),r(8410),r(2200),r(7941),r(7227),r(514),r(8304),r(6833),r(1539),r(9595),r(5500),r(4869),r(3952),r(4953),r(8992),r(9841),r(7852),r(2023),r(4723),r(6373),r(6528),r(3112),r(2481),r(5306),r(4765),r(3123),r(6755),r(3210),r(5674),r(8702),r(8783),r(5218),r(4475),r(7929),r(915),r(9253),r(2125),r(8830),r(8734),r(9254),r(7268),r(7397),r(86),r(623),r(8757),r(4603),r(4916),r(2087),r(8386),r(7601),r(9714),r(1058),r(4678),r(9653),r(3299),r(5192),r(3161),r(4048),r(8285),r(4363),r(5994),r(1874),r(9494),r(6977),r(5147),r(9752),r(2376),r(3181),r(3484),r(2388),r(8621),r(403),r(4755),r(5438),r(332),r(658),r(197),r(4914),r(2420),r(160),r(970),r(7059),r(3689),r(3843),r(5735),r(8733),r(3710),r(6078),r(8862),r(3706),r(8674),r(7922),r(4668),r(7727),r(1532),r(189),r(4129),r(8478),r(8264),r(6938),r(9575),r(6716),r(7145),r(2472),r(9743),r(5109),r(8255),r(5125),r(9135),r(4197),r(6495),r(8145),r(5206),r(2990),r(8927),r(3105),r(5035),r(4345),r(7174),r(2846),r(4731),r(7209),r(6319),r(8867),r(7789),r(3739),r(9368),r(4483),r(2056),r(3462),r(678),r(7462),r(3824),r(5021),r(2974),r(5016),r(224),r(2419),r(9596),r(2586),r(4819),r(5683),r(9361),r(1037),r(5898),r(7556),r(4361),r(3593),r(9532),r(1299);var n=r(857);e.exports=n},3099:function(e){e.exports=function(e){if("function"!=typeof e)throw TypeError(String(e)+" is not a function");return e}},6077:function(e,t,r){var n=r(111);e.exports=function(e){if(!n(e)&&null!==e)throw TypeError("Can't set "+String(e)+" as a prototype");return e}},1223:function(e,t,r){var n=r(5112),i=r(30),o=r(3070),a=n("unscopables"),s=Array.prototype;null==s[a]&&o.f(s,a,{configurable:!0,value:i(null)}),e.exports=function(e){s[a][e]=!0}},1530:function(e,t,r){"use strict";var n=r(8710).charAt;e.exports=function(e,t,r){return t+(r?n(e,t).length:1)}},5787:function(e){e.exports=function(e,t,r){if(!(e instanceof t))throw TypeError("Incorrect "+(r?r+" ":"")+"invocation");return e}},9670:function(e,t,r){var n=r(111);e.exports=function(e){if(!n(e))throw TypeError(String(e)+" is not an object");return e}},4019:function(e){e.exports="undefined"!=typeof ArrayBuffer&&"undefined"!=typeof DataView},260:function(e,t,r){"use strict";var n,i=r(4019),o=r(9781),a=r(7854),s=r(111),c=r(6656),u=r(648),l=r(8880),h=r(1320),f=r(3070).f,p=r(9518),d=r(7674),g=r(5112),m=r(9711),v=a.Int8Array,y=v&&v.prototype,_=a.Uint8ClampedArray,b=_&&_.prototype,A=v&&p(v),x=y&&p(y),w=Object.prototype,S=w.isPrototypeOf,E=g("toStringTag"),C=m("TYPED_ARRAY_TAG"),k=i&&!!d&&"Opera"!==u(a.opera),P=!1,R={Int8Array:1,Uint8Array:1,Uint8ClampedArray:1,Int16Array:2,Uint16Array:2,Int32Array:4,Uint32Array:4,Float32Array:4,Float64Array:8},T={BigInt64Array:8,BigUint64Array:8},O=function(e){if(!s(e))return!1;var t=u(e);return c(R,t)||c(T,t)};for(n in R)a[n]||(k=!1);if((!k||"function"!=typeof A||A===Function.prototype)&&(A=function(){throw TypeError("Incorrect invocation")},k))for(n in R)a[n]&&d(a[n],A);if((!k||!x||x===w)&&(x=A.prototype,k))for(n in R)a[n]&&d(a[n].prototype,x);if(k&&p(b)!==x&&d(b,x),o&&!c(x,E))for(n in P=!0,f(x,E,{get:function(){return s(this)?this[C]:void 0}}),R)a[n]&&l(a[n],C,n);e.exports={NATIVE_ARRAY_BUFFER_VIEWS:k,TYPED_ARRAY_TAG:P&&C,aTypedArray:function(e){if(O(e))return e;throw TypeError("Target is not a typed array")},aTypedArrayConstructor:function(e){if(d){if(S.call(A,e))return e}else for(var t in R)if(c(R,n)){var r=a[t];if(r&&(e===r||S.call(r,e)))return e}throw TypeError("Target is not a typed array constructor")},exportTypedArrayMethod:function(e,t,r){if(o){if(r)for(var n in R){var i=a[n];i&&c(i.prototype,e)&&delete i.prototype[e]}x[e]&&!r||h(x,e,r?t:k&&y[e]||t)}},exportTypedArrayStaticMethod:function(e,t,r){var n,i;if(o){if(d){if(r)for(n in R)(i=a[n])&&c(i,e)&&delete i[e];if(A[e]&&!r)return;try{return h(A,e,r?t:k&&v[e]||t)}catch(e){}}for(n in R)!(i=a[n])||i[e]&&!r||h(i,e,t)}},isView:function(e){if(!s(e))return!1;var t=u(e);return"DataView"===t||c(R,t)||c(T,t)},isTypedArray:O,TypedArray:A,TypedArrayPrototype:x}},3331:function(e,t,r){"use strict";var n=r(7854),i=r(9781),o=r(4019),a=r(8880),s=r(2248),c=r(7293),u=r(5787),l=r(9958),h=r(7466),f=r(7067),p=r(1179),d=r(9518),g=r(7674),m=r(8006).f,v=r(3070).f,y=r(1285),_=r(8003),b=r(9909),A=b.get,x=b.set,w="ArrayBuffer",S="DataView",E="Wrong index",C=n.ArrayBuffer,k=C,P=n.DataView,R=P&&P.prototype,T=Object.prototype,O=n.RangeError,L=p.pack,F=p.unpack,I=function(e){return[255&e]},M=function(e){return[255&e,e>>8&255]},N=function(e){return[255&e,e>>8&255,e>>16&255,e>>24&255]},D=function(e){return e[3]<<24|e[2]<<16|e[1]<<8|e[0]},j=function(e){return L(e,23,4)},U=function(e){return L(e,52,8)},W=function(e,t){v(e.prototype,t,{get:function(){return A(this)[t]}})},q=function(e,t,r,n){var i=f(r),o=A(e);if(i+t>o.byteLength)throw O(E);var a=A(o.buffer).bytes,s=i+o.byteOffset,c=a.slice(s,s+t);return n?c:c.reverse()},B=function(e,t,r,n,i,o){var a=f(r),s=A(e);if(a+t>s.byteLength)throw O(E);for(var c=A(s.buffer).bytes,u=a+s.byteOffset,l=n(+i),h=0;h<t;h++)c[u+h]=l[o?h:t-h-1]};if(o){if(!c((function(){C(1)}))||!c((function(){new C(-1)}))||c((function(){return new C,new C(1.5),new C(NaN),C.name!=w}))){for(var H,G=(k=function(e){return u(this,k),new C(f(e))}).prototype=C.prototype,z=m(C),Y=0;z.length>Y;)(H=z[Y++])in k||a(k,H,C[H]);G.constructor=k}g&&d(R)!==T&&g(R,T);var V=new P(new k(2)),$=R.setInt8;V.setInt8(0,2147483648),V.setInt8(1,2147483649),!V.getInt8(0)&&V.getInt8(1)||s(R,{setInt8:function(e,t){$.call(this,e,t<<24>>24)},setUint8:function(e,t){$.call(this,e,t<<24>>24)}},{unsafe:!0})}else k=function(e){u(this,k,w);var t=f(e);x(this,{bytes:y.call(new Array(t),0),byteLength:t}),i||(this.byteLength=t)},P=function(e,t,r){u(this,P,S),u(e,k,S);var n=A(e).byteLength,o=l(t);if(o<0||o>n)throw O("Wrong offset");if(o+(r=void 0===r?n-o:h(r))>n)throw O("Wrong length");x(this,{buffer:e,byteLength:r,byteOffset:o}),i||(this.buffer=e,this.byteLength=r,this.byteOffset=o)},i&&(W(k,"byteLength"),W(P,"buffer"),W(P,"byteLength"),W(P,"byteOffset")),s(P.prototype,{getInt8:function(e){return q(this,1,e)[0]<<24>>24},getUint8:function(e){return q(this,1,e)[0]},getInt16:function(e){var t=q(this,2,e,arguments.length>1?arguments[1]:void 0);return(t[1]<<8|t[0])<<16>>16},getUint16:function(e){var t=q(this,2,e,arguments.length>1?arguments[1]:void 0);return t[1]<<8|t[0]},getInt32:function(e){return D(q(this,4,e,arguments.length>1?arguments[1]:void 0))},getUint32:function(e){return D(q(this,4,e,arguments.length>1?arguments[1]:void 0))>>>0},getFloat32:function(e){return F(q(this,4,e,arguments.length>1?arguments[1]:void 0),23)},getFloat64:function(e){return F(q(this,8,e,arguments.length>1?arguments[1]:void 0),52)},setInt8:function(e,t){B(this,1,e,I,t)},setUint8:function(e,t){B(this,1,e,I,t)},setInt16:function(e,t){B(this,2,e,M,t,arguments.length>2?arguments[2]:void 0)},setUint16:function(e,t){B(this,2,e,M,t,arguments.length>2?arguments[2]:void 0)},setInt32:function(e,t){B(this,4,e,N,t,arguments.length>2?arguments[2]:void 0)},setUint32:function(e,t){B(this,4,e,N,t,arguments.length>2?arguments[2]:void 0)},setFloat32:function(e,t){B(this,4,e,j,t,arguments.length>2?arguments[2]:void 0)},setFloat64:function(e,t){B(this,8,e,U,t,arguments.length>2?arguments[2]:void 0)}});_(k,w),_(P,S),e.exports={ArrayBuffer:k,DataView:P}},1048:function(e,t,r){"use strict";var n=r(7908),i=r(1400),o=r(7466),a=Math.min;e.exports=[].copyWithin||function(e,t){var r=n(this),s=o(r.length),c=i(e,s),u=i(t,s),l=arguments.length>2?arguments[2]:void 0,h=a((void 0===l?s:i(l,s))-u,s-c),f=1;for(u<c&&c<u+h&&(f=-1,u+=h-1,c+=h-1);h-- >0;)u in r?r[c]=r[u]:delete r[c],c+=f,u+=f;return r}},1285:function(e,t,r){"use strict";var n=r(7908),i=r(1400),o=r(7466);e.exports=function(e){for(var t=n(this),r=o(t.length),a=arguments.length,s=i(a>1?arguments[1]:void 0,r),c=a>2?arguments[2]:void 0,u=void 0===c?r:i(c,r);u>s;)t[s++]=e;return t}},8533:function(e,t,r){"use strict";var n=r(2092).forEach,i=r(2133),o=r(9207),a=i("forEach"),s=o("forEach");e.exports=a&&s?[].forEach:function(e){return n(this,e,arguments.length>1?arguments[1]:void 0)}},8457:function(e,t,r){"use strict";var n=r(9974),i=r(7908),o=r(3411),a=r(7659),s=r(7466),c=r(6135),u=r(1246);e.exports=function(e){var t,r,l,h,f,p,d=i(e),g="function"==typeof this?this:Array,m=arguments.length,v=m>1?arguments[1]:void 0,y=void 0!==v,_=u(d),b=0;if(y&&(v=n(v,m>2?arguments[2]:void 0,2)),null==_||g==Array&&a(_))for(r=new g(t=s(d.length));t>b;b++)p=y?v(d[b],b):d[b],c(r,b,p);else for(f=(h=_.call(d)).next,r=new g;!(l=f.call(h)).done;b++)p=y?o(h,v,[l.value,b],!0):l.value,c(r,b,p);return r.length=b,r}},1318:function(e,t,r){var n=r(5656),i=r(7466),o=r(1400),a=function(e){return function(t,r,a){var s,c=n(t),u=i(c.length),l=o(a,u);if(e&&r!=r){for(;u>l;)if((s=c[l++])!=s)return!0}else for(;u>l;l++)if((e||l in c)&&c[l]===r)return e||l||0;return!e&&-1}};e.exports={includes:a(!0),indexOf:a(!1)}},2092:function(e,t,r){var n=r(9974),i=r(8361),o=r(7908),a=r(7466),s=r(5417),c=[].push,u=function(e){var t=1==e,r=2==e,u=3==e,l=4==e,h=6==e,f=7==e,p=5==e||h;return function(d,g,m,v){for(var y,_,b=o(d),A=i(b),x=n(g,m,3),w=a(A.length),S=0,E=v||s,C=t?E(d,w):r||f?E(d,0):void 0;w>S;S++)if((p||S in A)&&(_=x(y=A[S],S,b),e))if(t)C[S]=_;else if(_)switch(e){case 3:return!0;case 5:return y;case 6:return S;case 2:c.call(C,y)}else switch(e){case 4:return!1;case 7:c.call(C,y)}return h?-1:u||l?l:C}};e.exports={forEach:u(0),map:u(1),filter:u(2),some:u(3),every:u(4),find:u(5),findIndex:u(6),filterOut:u(7)}},6583:function(e,t,r){"use strict";var n=r(5656),i=r(9958),o=r(7466),a=r(2133),s=r(9207),c=Math.min,u=[].lastIndexOf,l=!!u&&1/[1].lastIndexOf(1,-0)<0,h=a("lastIndexOf"),f=s("indexOf",{ACCESSORS:!0,1:0}),p=l||!h||!f;e.exports=p?function(e){if(l)return u.apply(this,arguments)||0;var t=n(this),r=o(t.length),a=r-1;for(arguments.length>1&&(a=c(a,i(arguments[1]))),a<0&&(a=r+a);a>=0;a--)if(a in t&&t[a]===e)return a||0;return-1}:u},1194:function(e,t,r){var n=r(7293),i=r(5112),o=r(7392),a=i("species");e.exports=function(e){return o>=51||!n((function(){var t=[];return(t.constructor={})[a]=function(){return{foo:1}},1!==t[e](Boolean).foo}))}},2133:function(e,t,r){"use strict";var n=r(7293);e.exports=function(e,t){var r=[][e];return!!r&&n((function(){r.call(null,t||function(){throw 1},1)}))}},9207:function(e,t,r){var n=r(9781),i=r(7293),o=r(6656),a=Object.defineProperty,s={},c=function(e){throw e};e.exports=function(e,t){if(o(s,e))return s[e];t||(t={});var r=[][e],u=!!o(t,"ACCESSORS")&&t.ACCESSORS,l=o(t,0)?t[0]:c,h=o(t,1)?t[1]:void 0;return s[e]=!!r&&!i((function(){if(u&&!n)return!0;var e={length:-1};u?a(e,1,{enumerable:!0,get:c}):e[1]=1,r.call(e,l,h)}))}},3671:function(e,t,r){var n=r(3099),i=r(7908),o=r(8361),a=r(7466),s=function(e){return function(t,r,s,c){n(r);var u=i(t),l=o(u),h=a(u.length),f=e?h-1:0,p=e?-1:1;if(s<2)for(;;){if(f in l){c=l[f],f+=p;break}if(f+=p,e?f<0:h<=f)throw TypeError("Reduce of empty array with no initial value")}for(;e?f>=0:h>f;f+=p)f in l&&(c=r(c,l[f],f,u));return c}};e.exports={left:s(!1),right:s(!0)}},5417:function(e,t,r){var n=r(111),i=r(3157),o=r(5112)("species");e.exports=function(e,t){var r;return i(e)&&("function"!=typeof(r=e.constructor)||r!==Array&&!i(r.prototype)?n(r)&&null===(r=r[o])&&(r=void 0):r=void 0),new(void 0===r?Array:r)(0===t?0:t)}},3411:function(e,t,r){var n=r(9670),i=r(9212);e.exports=function(e,t,r,o){try{return o?t(n(r)[0],r[1]):t(r)}catch(t){throw i(e),t}}},7072:function(e,t,r){var n=r(5112)("iterator"),i=!1;try{var o=0,a={next:function(){return{done:!!o++}},return:function(){i=!0}};a[n]=function(){return this},Array.from(a,(function(){throw 2}))}catch(e){}e.exports=function(e,t){if(!t&&!i)return!1;var r=!1;try{var o={};o[n]=function(){return{next:function(){return{done:r=!0}}}},e(o)}catch(e){}return r}},4326:function(e){var t={}.toString;e.exports=function(e){return t.call(e).slice(8,-1)}},648:function(e,t,r){var n=r(1694),i=r(4326),o=r(5112)("toStringTag"),a="Arguments"==i(function(){return arguments}());e.exports=n?i:function(e){var t,r,n;return void 0===e?"Undefined":null===e?"Null":"string"==typeof(r=function(e,t){try{return e[t]}catch(e){}}(t=Object(e),o))?r:a?i(t):"Object"==(n=i(t))&&"function"==typeof t.callee?"Arguments":n}},5631:function(e,t,r){"use strict";var n=r(3070).f,i=r(30),o=r(2248),a=r(9974),s=r(5787),c=r(408),u=r(654),l=r(6340),h=r(9781),f=r(2423).fastKey,p=r(9909),d=p.set,g=p.getterFor;e.exports={getConstructor:function(e,t,r,u){var l=e((function(e,n){s(e,l,t),d(e,{type:t,index:i(null),first:void 0,last:void 0,size:0}),h||(e.size=0),null!=n&&c(n,e[u],{that:e,AS_ENTRIES:r})})),p=g(t),m=function(e,t,r){var n,i,o=p(e),a=v(e,t);return a?a.value=r:(o.last=a={index:i=f(t,!0),key:t,value:r,previous:n=o.last,next:void 0,removed:!1},o.first||(o.first=a),n&&(n.next=a),h?o.size++:e.size++,"F"!==i&&(o.index[i]=a)),e},v=function(e,t){var r,n=p(e),i=f(t);if("F"!==i)return n.index[i];for(r=n.first;r;r=r.next)if(r.key==t)return r};return o(l.prototype,{clear:function(){for(var e=p(this),t=e.index,r=e.first;r;)r.removed=!0,r.previous&&(r.previous=r.previous.next=void 0),delete t[r.index],r=r.next;e.first=e.last=void 0,h?e.size=0:this.size=0},delete:function(e){var t=this,r=p(t),n=v(t,e);if(n){var i=n.next,o=n.previous;delete r.index[n.index],n.removed=!0,o&&(o.next=i),i&&(i.previous=o),r.first==n&&(r.first=i),r.last==n&&(r.last=o),h?r.size--:t.size--}return!!n},forEach:function(e){for(var t,r=p(this),n=a(e,arguments.length>1?arguments[1]:void 0,3);t=t?t.next:r.first;)for(n(t.value,t.key,this);t&&t.removed;)t=t.previous},has:function(e){return!!v(this,e)}}),o(l.prototype,r?{get:function(e){var t=v(this,e);return t&&t.value},set:function(e,t){return m(this,0===e?0:e,t)}}:{add:function(e){return m(this,e=0===e?0:e,e)}}),h&&n(l.prototype,"size",{get:function(){return p(this).size}}),l},setStrong:function(e,t,r){var n=t+" Iterator",i=g(t),o=g(n);u(e,t,(function(e,t){d(this,{type:n,target:e,state:i(e),kind:t,last:void 0})}),(function(){for(var e=o(this),t=e.kind,r=e.last;r&&r.removed;)r=r.previous;return e.target&&(e.last=r=r?r.next:e.state.first)?"keys"==t?{value:r.key,done:!1}:"values"==t?{value:r.value,done:!1}:{value:[r.key,r.value],done:!1}:(e.target=void 0,{value:void 0,done:!0})}),r?"entries":"values",!r,!0),l(t)}}},9320:function(e,t,r){"use strict";var n=r(2248),i=r(2423).getWeakData,o=r(9670),a=r(111),s=r(5787),c=r(408),u=r(2092),l=r(6656),h=r(9909),f=h.set,p=h.getterFor,d=u.find,g=u.findIndex,m=0,v=function(e){return e.frozen||(e.frozen=new y)},y=function(){this.entries=[]},_=function(e,t){return d(e.entries,(function(e){return e[0]===t}))};y.prototype={get:function(e){var t=_(this,e);if(t)return t[1]},has:function(e){return!!_(this,e)},set:function(e,t){var r=_(this,e);r?r[1]=t:this.entries.push([e,t])},delete:function(e){var t=g(this.entries,(function(t){return t[0]===e}));return~t&&this.entries.splice(t,1),!!~t}},e.exports={getConstructor:function(e,t,r,u){var h=e((function(e,n){s(e,h,t),f(e,{type:t,id:m++,frozen:void 0}),null!=n&&c(n,e[u],{that:e,AS_ENTRIES:r})})),d=p(t),g=function(e,t,r){var n=d(e),a=i(o(t),!0);return!0===a?v(n).set(t,r):a[n.id]=r,e};return n(h.prototype,{delete:function(e){var t=d(this);if(!a(e))return!1;var r=i(e);return!0===r?v(t).delete(e):r&&l(r,t.id)&&delete r[t.id]},has:function(e){var t=d(this);if(!a(e))return!1;var r=i(e);return!0===r?v(t).has(e):r&&l(r,t.id)}}),n(h.prototype,r?{get:function(e){var t=d(this);if(a(e)){var r=i(e);return!0===r?v(t).get(e):r?r[t.id]:void 0}},set:function(e,t){return g(this,e,t)}}:{add:function(e){return g(this,e,!0)}}),h}}},7710:function(e,t,r){"use strict";var n=r(2109),i=r(7854),o=r(4705),a=r(1320),s=r(2423),c=r(408),u=r(5787),l=r(111),h=r(7293),f=r(7072),p=r(8003),d=r(9587);e.exports=function(e,t,r){var g=-1!==e.indexOf("Map"),m=-1!==e.indexOf("Weak"),v=g?"set":"add",y=i[e],_=y&&y.prototype,b=y,A={},x=function(e){var t=_[e];a(_,e,"add"==e?function(e){return t.call(this,0===e?0:e),this}:"delete"==e?function(e){return!(m&&!l(e))&&t.call(this,0===e?0:e)}:"get"==e?function(e){return m&&!l(e)?void 0:t.call(this,0===e?0:e)}:"has"==e?function(e){return!(m&&!l(e))&&t.call(this,0===e?0:e)}:function(e,r){return t.call(this,0===e?0:e,r),this})};if(o(e,"function"!=typeof y||!(m||_.forEach&&!h((function(){(new y).entries().next()})))))b=r.getConstructor(t,e,g,v),s.REQUIRED=!0;else if(o(e,!0)){var w=new b,S=w[v](m?{}:-0,1)!=w,E=h((function(){w.has(1)})),C=f((function(e){new y(e)})),k=!m&&h((function(){for(var e=new y,t=5;t--;)e[v](t,t);return!e.has(-0)}));C||((b=t((function(t,r){u(t,b,e);var n=d(new y,t,b);return null!=r&&c(r,n[v],{that:n,AS_ENTRIES:g}),n}))).prototype=_,_.constructor=b),(E||k)&&(x("delete"),x("has"),g&&x("get")),(k||S)&&x(v),m&&_.clear&&delete _.clear}return A[e]=b,n({global:!0,forced:b!=y},A),p(b,e),m||r.setStrong(b,e,g),b}},9920:function(e,t,r){var n=r(6656),i=r(3887),o=r(1236),a=r(3070);e.exports=function(e,t){for(var r=i(t),s=a.f,c=o.f,u=0;u<r.length;u++){var l=r[u];n(e,l)||s(e,l,c(t,l))}}},4964:function(e,t,r){var n=r(5112)("match");e.exports=function(e){var t=/./;try{"/./"[e](t)}catch(r){try{return t[n]=!1,"/./"[e](t)}catch(e){}}return!1}},8544:function(e,t,r){var n=r(7293);e.exports=!n((function(){function e(){}return e.prototype.constructor=null,Object.getPrototypeOf(new e)!==e.prototype}))},4230:function(e,t,r){var n=r(4488),i=/"/g;e.exports=function(e,t,r,o){var a=String(n(e)),s="<"+t;return""!==r&&(s+=" "+r+'="'+String(o).replace(i,"&quot;")+'"'),s+">"+a+"</"+t+">"}},4994:function(e,t,r){"use strict";var n=r(3383).IteratorPrototype,i=r(30),o=r(9114),a=r(8003),s=r(7497),c=function(){return this};e.exports=function(e,t,r){var u=t+" Iterator";return e.prototype=i(n,{next:o(1,r)}),a(e,u,!1,!0),s[u]=c,e}},8880:function(e,t,r){var n=r(9781),i=r(3070),o=r(9114);e.exports=n?function(e,t,r){return i.f(e,t,o(1,r))}:function(e,t,r){return e[t]=r,e}},9114:function(e){e.exports=function(e,t){return{enumerable:!(1&e),configurable:!(2&e),writable:!(4&e),value:t}}},6135:function(e,t,r){"use strict";var n=r(7593),i=r(3070),o=r(9114);e.exports=function(e,t,r){var a=n(t);a in e?i.f(e,a,o(0,r)):e[a]=r}},5573:function(e,t,r){"use strict";var n=r(7293),i=r(6650).start,o=Math.abs,a=Date.prototype,s=a.getTime,c=a.toISOString;e.exports=n((function(){return"0385-07-25T07:06:39.999Z"!=c.call(new Date(-50000000000001))}))||!n((function(){c.call(new Date(NaN))}))?function(){if(!isFinite(s.call(this)))throw RangeError("Invalid time value");var e=this,t=e.getUTCFullYear(),r=e.getUTCMilliseconds(),n=t<0?"-":t>9999?"+":"";return n+i(o(t),n?6:4,0)+"-"+i(e.getUTCMonth()+1,2,0)+"-"+i(e.getUTCDate(),2,0)+"T"+i(e.getUTCHours(),2,0)+":"+i(e.getUTCMinutes(),2,0)+":"+i(e.getUTCSeconds(),2,0)+"."+i(r,3,0)+"Z"}:c},8709:function(e,t,r){"use strict";var n=r(9670),i=r(7593);e.exports=function(e){if("string"!==e&&"number"!==e&&"default"!==e)throw TypeError("Incorrect hint");return i(n(this),"number"!==e)}},654:function(e,t,r){"use strict";var n=r(2109),i=r(4994),o=r(9518),a=r(7674),s=r(8003),c=r(8880),u=r(1320),l=r(5112),h=r(1913),f=r(7497),p=r(3383),d=p.IteratorPrototype,g=p.BUGGY_SAFARI_ITERATORS,m=l("iterator"),v="keys",y="values",_="entries",b=function(){return this};e.exports=function(e,t,r,l,p,A,x){i(r,t,l);var w,S,E,C=function(e){if(e===p&&O)return O;if(!g&&e in R)return R[e];switch(e){case v:case y:case _:return function(){return new r(this,e)}}return function(){return new r(this)}},k=t+" Iterator",P=!1,R=e.prototype,T=R[m]||R["@@iterator"]||p&&R[p],O=!g&&T||C(p),L="Array"==t&&R.entries||T;if(L&&(w=o(L.call(new e)),d!==Object.prototype&&w.next&&(h||o(w)===d||(a?a(w,d):"function"!=typeof w[m]&&c(w,m,b)),s(w,k,!0,!0),h&&(f[k]=b))),p==y&&T&&T.name!==y&&(P=!0,O=function(){return T.call(this)}),h&&!x||R[m]===O||c(R,m,O),f[t]=O,p)if(S={values:C(y),keys:A?O:C(v),entries:C(_)},x)for(E in S)(g||P||!(E in R))&&u(R,E,S[E]);else n({target:t,proto:!0,forced:g||P},S);return S}},7235:function(e,t,r){var n=r(857),i=r(6656),o=r(6061),a=r(3070).f;e.exports=function(e){var t=n.Symbol||(n.Symbol={});i(t,e)||a(t,e,{value:o.f(e)})}},9781:function(e,t,r){var n=r(7293);e.exports=!n((function(){return 7!=Object.defineProperty({},1,{get:function(){return 7}})[1]}))},317:function(e,t,r){var n=r(7854),i=r(111),o=n.document,a=i(o)&&i(o.createElement);e.exports=function(e){return a?o.createElement(e):{}}},8324:function(e){e.exports={CSSRuleList:0,CSSStyleDeclaration:0,CSSValueList:0,ClientRectList:0,DOMRectList:0,DOMStringList:0,DOMTokenList:1,DataTransferItemList:0,FileList:0,HTMLAllCollection:0,HTMLCollection:0,HTMLFormElement:0,HTMLSelectElement:0,MediaList:0,MimeTypeArray:0,NamedNodeMap:0,NodeList:1,PaintRequestList:0,Plugin:0,PluginArray:0,SVGLengthList:0,SVGNumberList:0,SVGPathSegList:0,SVGPointList:0,SVGStringList:0,SVGTransformList:0,SourceBufferList:0,StyleSheetList:0,TextTrackCueList:0,TextTrackList:0,TouchList:0}},8334:function(e,t,r){var n=r(8113);e.exports=/(iphone|ipod|ipad).*applewebkit/i.test(n)},5268:function(e,t,r){var n=r(4326),i=r(7854);e.exports="process"==n(i.process)},1036:function(e,t,r){var n=r(8113);e.exports=/web0s(?!.*chrome)/i.test(n)},8113:function(e,t,r){var n=r(5005);e.exports=n("navigator","userAgent")||""},7392:function(e,t,r){var n,i,o=r(7854),a=r(8113),s=o.process,c=s&&s.versions,u=c&&c.v8;u?i=(n=u.split("."))[0]+n[1]:a&&(!(n=a.match(/Edge\/(\d+)/))||n[1]>=74)&&(n=a.match(/Chrome\/(\d+)/))&&(i=n[1]),e.exports=i&&+i},748:function(e){e.exports=["constructor","hasOwnProperty","isPrototypeOf","propertyIsEnumerable","toLocaleString","toString","valueOf"]},2109:function(e,t,r){var n=r(7854),i=r(1236).f,o=r(8880),a=r(1320),s=r(3505),c=r(9920),u=r(4705);e.exports=function(e,t){var r,l,h,f,p,d=e.target,g=e.global,m=e.stat;if(r=g?n:m?n[d]||s(d,{}):(n[d]||{}).prototype)for(l in t){if(f=t[l],h=e.noTargetGet?(p=i(r,l))&&p.value:r[l],!u(g?l:d+(m?".":"#")+l,e.forced)&&void 0!==h){if(typeof f==typeof h)continue;c(f,h)}(e.sham||h&&h.sham)&&o(f,"sham",!0),a(r,l,f,e)}}},7293:function(e){e.exports=function(e){try{return!!e()}catch(e){return!0}}},7007:function(e,t,r){"use strict";r(4916);var n=r(1320),i=r(7293),o=r(5112),a=r(2261),s=r(8880),c=o("species"),u=!i((function(){var e=/./;return e.exec=function(){var e=[];return e.groups={a:"7"},e},"7"!=="".replace(e,"$<a>")})),l="$0"==="a".replace(/./,"$0"),h=o("replace"),f=!!/./[h]&&""===/./[h]("a","$0"),p=!i((function(){var e=/(?:)/,t=e.exec;e.exec=function(){return t.apply(this,arguments)};var r="ab".split(e);return 2!==r.length||"a"!==r[0]||"b"!==r[1]}));e.exports=function(e,t,r,h){var d=o(e),g=!i((function(){var t={};return t[d]=function(){return 7},7!=""[e](t)})),m=g&&!i((function(){var t=!1,r=/a/;return"split"===e&&((r={}).constructor={},r.constructor[c]=function(){return r},r.flags="",r[d]=/./[d]),r.exec=function(){return t=!0,null},r[d](""),!t}));if(!g||!m||"replace"===e&&(!u||!l||f)||"split"===e&&!p){var v=/./[d],y=r(d,""[e],(function(e,t,r,n,i){return t.exec===a?g&&!i?{done:!0,value:v.call(t,r,n)}:{done:!0,value:e.call(r,t,n)}:{done:!1}}),{REPLACE_KEEPS_$0:l,REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE:f}),_=y[0],b=y[1];n(String.prototype,e,_),n(RegExp.prototype,d,2==t?function(e,t){return b.call(e,this,t)}:function(e){return b.call(e,this)})}h&&s(RegExp.prototype[d],"sham",!0)}},6790:function(e,t,r){"use strict";var n=r(3157),i=r(7466),o=r(9974),a=function(e,t,r,s,c,u,l,h){for(var f,p=c,d=0,g=!!l&&o(l,h,3);d<s;){if(d in r){if(f=g?g(r[d],d,t):r[d],u>0&&n(f))p=a(e,t,f,i(f.length),p,u-1)-1;else{if(p>=9007199254740991)throw TypeError("Exceed the acceptable array length");e[p]=f}p++}d++}return p};e.exports=a},6677:function(e,t,r){var n=r(7293);e.exports=!n((function(){return Object.isExtensible(Object.preventExtensions({}))}))},9974:function(e,t,r){var n=r(3099);e.exports=function(e,t,r){if(n(e),void 0===t)return e;switch(r){case 0:return function(){return e.call(t)};case 1:return function(r){return e.call(t,r)};case 2:return function(r,n){return e.call(t,r,n)};case 3:return function(r,n,i){return e.call(t,r,n,i)}}return function(){return e.apply(t,arguments)}}},7065:function(e,t,r){"use strict";var n=r(3099),i=r(111),o=[].slice,a={},s=function(e,t,r){if(!(t in a)){for(var n=[],i=0;i<t;i++)n[i]="a["+i+"]";a[t]=Function("C,a","return new C("+n.join(",")+")")}return a[t](e,r)};e.exports=Function.bind||function(e){var t=n(this),r=o.call(arguments,1),a=function(){var n=r.concat(o.call(arguments));return this instanceof a?s(t,n.length,n):t.apply(e,n)};return i(t.prototype)&&(a.prototype=t.prototype),a}},5005:function(e,t,r){var n=r(857),i=r(7854),o=function(e){return"function"==typeof e?e:void 0};e.exports=function(e,t){return arguments.length<2?o(n[e])||o(i[e]):n[e]&&n[e][t]||i[e]&&i[e][t]}},1246:function(e,t,r){var n=r(648),i=r(7497),o=r(5112)("iterator");e.exports=function(e){if(null!=e)return e[o]||e["@@iterator"]||i[n(e)]}},8554:function(e,t,r){var n=r(9670),i=r(1246);e.exports=function(e){var t=i(e);if("function"!=typeof t)throw TypeError(String(e)+" is not iterable");return n(t.call(e))}},647:function(e,t,r){var n=r(7908),i=Math.floor,o="".replace,a=/\$([$&'`]|\d\d?|<[^>]*>)/g,s=/\$([$&'`]|\d\d?)/g;e.exports=function(e,t,r,c,u,l){var h=r+e.length,f=c.length,p=s;return void 0!==u&&(u=n(u),p=a),o.call(l,p,(function(n,o){var a;switch(o.charAt(0)){case"$":return"$";case"&":return e;case"`":return t.slice(0,r);case"'":return t.slice(h);case"<":a=u[o.slice(1,-1)];break;default:var s=+o;if(0===s)return n;if(s>f){var l=i(s/10);return 0===l?n:l<=f?void 0===c[l-1]?o.charAt(1):c[l-1]+o.charAt(1):n}a=c[s-1]}return void 0===a?"":a}))}},7854:function(e,t,r){var n=function(e){return e&&e.Math==Math&&e};e.exports=n("object"==typeof globalThis&&globalThis)||n("object"==typeof window&&window)||n("object"==typeof self&&self)||n("object"==typeof r.g&&r.g)||function(){return this}()||Function("return this")()},6656:function(e){var t={}.hasOwnProperty;e.exports=function(e,r){return t.call(e,r)}},3501:function(e){e.exports={}},842:function(e,t,r){var n=r(7854);e.exports=function(e,t){var r=n.console;r&&r.error&&(1===arguments.length?r.error(e):r.error(e,t))}},490:function(e,t,r){var n=r(5005);e.exports=n("document","documentElement")},4664:function(e,t,r){var n=r(9781),i=r(7293),o=r(317);e.exports=!n&&!i((function(){return 7!=Object.defineProperty(o("div"),"a",{get:function(){return 7}}).a}))},1179:function(e){var t=1/0,r=Math.abs,n=Math.pow,i=Math.floor,o=Math.log,a=Math.LN2;e.exports={pack:function(e,s,c){var u,l,h,f=new Array(c),p=8*c-s-1,d=(1<<p)-1,g=d>>1,m=23===s?n(2,-24)-n(2,-77):0,v=e<0||0===e&&1/e<0?1:0,y=0;for((e=r(e))!=e||e===t?(l=e!=e?1:0,u=d):(u=i(o(e)/a),e*(h=n(2,-u))<1&&(u--,h*=2),(e+=u+g>=1?m/h:m*n(2,1-g))*h>=2&&(u++,h/=2),u+g>=d?(l=0,u=d):u+g>=1?(l=(e*h-1)*n(2,s),u+=g):(l=e*n(2,g-1)*n(2,s),u=0));s>=8;f[y++]=255&l,l/=256,s-=8);for(u=u<<s|l,p+=s;p>0;f[y++]=255&u,u/=256,p-=8);return f[--y]|=128*v,f},unpack:function(e,r){var i,o=e.length,a=8*o-r-1,s=(1<<a)-1,c=s>>1,u=a-7,l=o-1,h=e[l--],f=127&h;for(h>>=7;u>0;f=256*f+e[l],l--,u-=8);for(i=f&(1<<-u)-1,f>>=-u,u+=r;u>0;i=256*i+e[l],l--,u-=8);if(0===f)f=1-c;else{if(f===s)return i?NaN:h?-1/0:t;i+=n(2,r),f-=c}return(h?-1:1)*i*n(2,f-r)}}},8361:function(e,t,r){var n=r(7293),i=r(4326),o="".split;e.exports=n((function(){return!Object("z").propertyIsEnumerable(0)}))?function(e){return"String"==i(e)?o.call(e,""):Object(e)}:Object},9587:function(e,t,r){var n=r(111),i=r(7674);e.exports=function(e,t,r){var o,a;return i&&"function"==typeof(o=t.constructor)&&o!==r&&n(a=o.prototype)&&a!==r.prototype&&i(e,a),e}},2788:function(e,t,r){var n=r(5465),i=Function.toString;"function"!=typeof n.inspectSource&&(n.inspectSource=function(e){return i.call(e)}),e.exports=n.inspectSource},2423:function(e,t,r){var n=r(3501),i=r(111),o=r(6656),a=r(3070).f,s=r(9711),c=r(6677),u=s("meta"),l=0,h=Object.isExtensible||function(){return!0},f=function(e){a(e,u,{value:{objectID:"O"+ ++l,weakData:{}}})},p=e.exports={REQUIRED:!1,fastKey:function(e,t){if(!i(e))return"symbol"==typeof e?e:("string"==typeof e?"S":"P")+e;if(!o(e,u)){if(!h(e))return"F";if(!t)return"E";f(e)}return e[u].objectID},getWeakData:function(e,t){if(!o(e,u)){if(!h(e))return!0;if(!t)return!1;f(e)}return e[u].weakData},onFreeze:function(e){return c&&p.REQUIRED&&h(e)&&!o(e,u)&&f(e),e}};n[u]=!0},9909:function(e,t,r){var n,i,o,a=r(8536),s=r(7854),c=r(111),u=r(8880),l=r(6656),h=r(5465),f=r(6200),p=r(3501),d=s.WeakMap;if(a){var g=h.state||(h.state=new d),m=g.get,v=g.has,y=g.set;n=function(e,t){return t.facade=e,y.call(g,e,t),t},i=function(e){return m.call(g,e)||{}},o=function(e){return v.call(g,e)}}else{var _=f("state");p[_]=!0,n=function(e,t){return t.facade=e,u(e,_,t),t},i=function(e){return l(e,_)?e[_]:{}},o=function(e){return l(e,_)}}e.exports={set:n,get:i,has:o,enforce:function(e){return o(e)?i(e):n(e,{})},getterFor:function(e){return function(t){var r;if(!c(t)||(r=i(t)).type!==e)throw TypeError("Incompatible receiver, "+e+" required");return r}}}},7659:function(e,t,r){var n=r(5112),i=r(7497),o=n("iterator"),a=Array.prototype;e.exports=function(e){return void 0!==e&&(i.Array===e||a[o]===e)}},3157:function(e,t,r){var n=r(4326);e.exports=Array.isArray||function(e){return"Array"==n(e)}},4705:function(e,t,r){var n=r(7293),i=/#|\.prototype\./,o=function(e,t){var r=s[a(e)];return r==u||r!=c&&("function"==typeof t?n(t):!!t)},a=o.normalize=function(e){return String(e).replace(i,".").toLowerCase()},s=o.data={},c=o.NATIVE="N",u=o.POLYFILL="P";e.exports=o},8730:function(e,t,r){var n=r(111),i=Math.floor;e.exports=function(e){return!n(e)&&isFinite(e)&&i(e)===e}},111:function(e){e.exports=function(e){return"object"==typeof e?null!==e:"function"==typeof e}},1913:function(e){e.exports=!1},7850:function(e,t,r){var n=r(111),i=r(4326),o=r(5112)("match");e.exports=function(e){var t;return n(e)&&(void 0!==(t=e[o])?!!t:"RegExp"==i(e))}},408:function(e,t,r){var n=r(9670),i=r(7659),o=r(7466),a=r(9974),s=r(1246),c=r(9212),u=function(e,t){this.stopped=e,this.result=t};e.exports=function(e,t,r){var l,h,f,p,d,g,m,v=r&&r.that,y=!(!r||!r.AS_ENTRIES),_=!(!r||!r.IS_ITERATOR),b=!(!r||!r.INTERRUPTED),A=a(t,v,1+y+b),x=function(e){return l&&c(l),new u(!0,e)},w=function(e){return y?(n(e),b?A(e[0],e[1],x):A(e[0],e[1])):b?A(e,x):A(e)};if(_)l=e;else{if("function"!=typeof(h=s(e)))throw TypeError("Target is not iterable");if(i(h)){for(f=0,p=o(e.length);p>f;f++)if((d=w(e[f]))&&d instanceof u)return d;return new u(!1)}l=h.call(e)}for(g=l.next;!(m=g.call(l)).done;){try{d=w(m.value)}catch(e){throw c(l),e}if("object"==typeof d&&d&&d instanceof u)return d}return new u(!1)}},9212:function(e,t,r){var n=r(9670);e.exports=function(e){var t=e.return;if(void 0!==t)return n(t.call(e)).value}},3383:function(e,t,r){"use strict";var n,i,o,a=r(9518),s=r(8880),c=r(6656),u=r(5112),l=r(1913),h=u("iterator"),f=!1;[].keys&&("next"in(o=[].keys())?(i=a(a(o)))!==Object.prototype&&(n=i):f=!0),null==n&&(n={}),l||c(n,h)||s(n,h,(function(){return this})),e.exports={IteratorPrototype:n,BUGGY_SAFARI_ITERATORS:f}},7497:function(e){e.exports={}},6736:function(e){var t=Math.expm1,r=Math.exp;e.exports=!t||t(10)>22025.465794806718||t(10)<22025.465794806718||-2e-17!=t(-2e-17)?function(e){return 0==(e=+e)?e:e>-1e-6&&e<1e-6?e+e*e/2:r(e)-1}:t},6130:function(e,t,r){var n=r(4310),i=Math.abs,o=Math.pow,a=o(2,-52),s=o(2,-23),c=o(2,127)*(2-s),u=o(2,-126);e.exports=Math.fround||function(e){var t,r,o=i(e),l=n(e);return o<u?l*(o/u/s+1/a-1/a)*u*s:(r=(t=(1+s/a)*o)-(t-o))>c||r!=r?l*(1/0):l*r}},6513:function(e){var t=Math.log;e.exports=Math.log1p||function(e){return(e=+e)>-1e-8&&e<1e-8?e-e*e/2:t(1+e)}},4310:function(e){e.exports=Math.sign||function(e){return 0==(e=+e)||e!=e?e:e<0?-1:1}},5948:function(e,t,r){var n,i,o,a,s,c,u,l,h=r(7854),f=r(1236).f,p=r(261).set,d=r(8334),g=r(1036),m=r(5268),v=h.MutationObserver||h.WebKitMutationObserver,y=h.document,_=h.process,b=h.Promise,A=f(h,"queueMicrotask"),x=A&&A.value;x||(n=function(){var e,t;for(m&&(e=_.domain)&&e.exit();i;){t=i.fn,i=i.next;try{t()}catch(e){throw i?a():o=void 0,e}}o=void 0,e&&e.enter()},d||m||g||!v||!y?b&&b.resolve?(u=b.resolve(void 0),l=u.then,a=function(){l.call(u,n)}):a=m?function(){_.nextTick(n)}:function(){p.call(h,n)}:(s=!0,c=y.createTextNode(""),new v(n).observe(c,{characterData:!0}),a=function(){c.data=s=!s})),e.exports=x||function(e){var t={fn:e,next:void 0};o&&(o.next=t),i||(i=t,a()),o=t}},3366:function(e,t,r){var n=r(7854);e.exports=n.Promise},133:function(e,t,r){var n=r(7293);e.exports=!!Object.getOwnPropertySymbols&&!n((function(){return!String(Symbol())}))},590:function(e,t,r){var n=r(7293),i=r(5112),o=r(1913),a=i("iterator");e.exports=!n((function(){var e=new URL("b?a=1&b=2&c=3","http://a"),t=e.searchParams,r="";return e.pathname="c%20d",t.forEach((function(e,n){t.delete("b"),r+=n+e})),o&&!e.toJSON||!t.sort||"http://a/c%20d?a=1&c=3"!==e.href||"3"!==t.get("c")||"a=1"!==String(new URLSearchParams("?a=1"))||!t[a]||"a"!==new URL("https://a@b").username||"b"!==new URLSearchParams(new URLSearchParams("a=b")).get("a")||"xn--e1aybc"!==new URL("http://тест").host||"#%D0%B1"!==new URL("http://a#б").hash||"a1c3"!==r||"x"!==new URL("http://x",void 0).host}))},8536:function(e,t,r){var n=r(7854),i=r(2788),o=n.WeakMap;e.exports="function"==typeof o&&/native code/.test(i(o))},8523:function(e,t,r){"use strict";var n=r(3099),i=function(e){var t,r;this.promise=new e((function(e,n){if(void 0!==t||void 0!==r)throw TypeError("Bad Promise constructor");t=e,r=n})),this.resolve=n(t),this.reject=n(r)};e.exports.f=function(e){return new i(e)}},3929:function(e,t,r){var n=r(7850);e.exports=function(e){if(n(e))throw TypeError("The method doesn't accept regular expressions");return e}},7023:function(e,t,r){var n=r(7854).isFinite;e.exports=Number.isFinite||function(e){return"number"==typeof e&&n(e)}},2814:function(e,t,r){var n=r(7854),i=r(3111).trim,o=r(1361),a=n.parseFloat,s=1/a(o+"-0")!=-1/0;e.exports=s?function(e){var t=i(String(e)),r=a(t);return 0===r&&"-"==t.charAt(0)?-0:r}:a},3009:function(e,t,r){var n=r(7854),i=r(3111).trim,o=r(1361),a=n.parseInt,s=/^[+-]?0[Xx]/,c=8!==a(o+"08")||22!==a(o+"0x16");e.exports=c?function(e,t){var r=i(String(e));return a(r,t>>>0||(s.test(r)?16:10))}:a},1574:function(e,t,r){"use strict";var n=r(9781),i=r(7293),o=r(1956),a=r(5181),s=r(5296),c=r(7908),u=r(8361),l=Object.assign,h=Object.defineProperty;e.exports=!l||i((function(){if(n&&1!==l({b:1},l(h({},"a",{enumerable:!0,get:function(){h(this,"b",{value:3,enumerable:!1})}}),{b:2})).b)return!0;var e={},t={},r=Symbol(),i="abcdefghijklmnopqrst";return e[r]=7,i.split("").forEach((function(e){t[e]=e})),7!=l({},e)[r]||o(l({},t)).join("")!=i}))?function(e,t){for(var r=c(e),i=arguments.length,l=1,h=a.f,f=s.f;i>l;)for(var p,d=u(arguments[l++]),g=h?o(d).concat(h(d)):o(d),m=g.length,v=0;m>v;)p=g[v++],n&&!f.call(d,p)||(r[p]=d[p]);return r}:l},30:function(e,t,r){var n,i=r(9670),o=r(6048),a=r(748),s=r(3501),c=r(490),u=r(317),l=r(6200)("IE_PROTO"),h=function(){},f=function(e){return"<script>"+e+"<\/script>"},p=function(){try{n=document.domain&&new ActiveXObject("htmlfile")}catch(e){}var e,t;p=n?function(e){e.write(f("")),e.close();var t=e.parentWindow.Object;return e=null,t}(n):((t=u("iframe")).style.display="none",c.appendChild(t),t.src=String("javascript:"),(e=t.contentWindow.document).open(),e.write(f("document.F=Object")),e.close(),e.F);for(var r=a.length;r--;)delete p.prototype[a[r]];return p()};s[l]=!0,e.exports=Object.create||function(e,t){var r;return null!==e?(h.prototype=i(e),r=new h,h.prototype=null,r[l]=e):r=p(),void 0===t?r:o(r,t)}},6048:function(e,t,r){var n=r(9781),i=r(3070),o=r(9670),a=r(1956);e.exports=n?Object.defineProperties:function(e,t){o(e);for(var r,n=a(t),s=n.length,c=0;s>c;)i.f(e,r=n[c++],t[r]);return e}},3070:function(e,t,r){var n=r(9781),i=r(4664),o=r(9670),a=r(7593),s=Object.defineProperty;t.f=n?s:function(e,t,r){if(o(e),t=a(t,!0),o(r),i)try{return s(e,t,r)}catch(e){}if("get"in r||"set"in r)throw TypeError("Accessors not supported");return"value"in r&&(e[t]=r.value),e}},1236:function(e,t,r){var n=r(9781),i=r(5296),o=r(9114),a=r(5656),s=r(7593),c=r(6656),u=r(4664),l=Object.getOwnPropertyDescriptor;t.f=n?l:function(e,t){if(e=a(e),t=s(t,!0),u)try{return l(e,t)}catch(e){}if(c(e,t))return o(!i.f.call(e,t),e[t])}},1156:function(e,t,r){var n=r(5656),i=r(8006).f,o={}.toString,a="object"==typeof window&&window&&Object.getOwnPropertyNames?Object.getOwnPropertyNames(window):[];e.exports.f=function(e){return a&&"[object Window]"==o.call(e)?function(e){try{return i(e)}catch(e){return a.slice()}}(e):i(n(e))}},8006:function(e,t,r){var n=r(6324),i=r(748).concat("length","prototype");t.f=Object.getOwnPropertyNames||function(e){return n(e,i)}},5181:function(e,t){t.f=Object.getOwnPropertySymbols},9518:function(e,t,r){var n=r(6656),i=r(7908),o=r(6200),a=r(8544),s=o("IE_PROTO"),c=Object.prototype;e.exports=a?Object.getPrototypeOf:function(e){return e=i(e),n(e,s)?e[s]:"function"==typeof e.constructor&&e instanceof e.constructor?e.constructor.prototype:e instanceof Object?c:null}},6324:function(e,t,r){var n=r(6656),i=r(5656),o=r(1318).indexOf,a=r(3501);e.exports=function(e,t){var r,s=i(e),c=0,u=[];for(r in s)!n(a,r)&&n(s,r)&&u.push(r);for(;t.length>c;)n(s,r=t[c++])&&(~o(u,r)||u.push(r));return u}},1956:function(e,t,r){var n=r(6324),i=r(748);e.exports=Object.keys||function(e){return n(e,i)}},5296:function(e,t){"use strict";var r={}.propertyIsEnumerable,n=Object.getOwnPropertyDescriptor,i=n&&!r.call({1:2},1);t.f=i?function(e){var t=n(this,e);return!!t&&t.enumerable}:r},9026:function(e,t,r){"use strict";var n=r(1913),i=r(7854),o=r(7293);e.exports=n||!o((function(){var e=Math.random();__defineSetter__.call(null,e,(function(){})),delete i[e]}))},7674:function(e,t,r){var n=r(9670),i=r(6077);e.exports=Object.setPrototypeOf||("__proto__"in{}?function(){var e,t=!1,r={};try{(e=Object.getOwnPropertyDescriptor(Object.prototype,"__proto__").set).call(r,[]),t=r instanceof Array}catch(e){}return function(r,o){return n(r),i(o),t?e.call(r,o):r.__proto__=o,r}}():void 0)},4699:function(e,t,r){var n=r(9781),i=r(1956),o=r(5656),a=r(5296).f,s=function(e){return function(t){for(var r,s=o(t),c=i(s),u=c.length,l=0,h=[];u>l;)r=c[l++],n&&!a.call(s,r)||h.push(e?[r,s[r]]:s[r]);return h}};e.exports={entries:s(!0),values:s(!1)}},288:function(e,t,r){"use strict";var n=r(1694),i=r(648);e.exports=n?{}.toString:function(){return"[object "+i(this)+"]"}},3887:function(e,t,r){var n=r(5005),i=r(8006),o=r(5181),a=r(9670);e.exports=n("Reflect","ownKeys")||function(e){var t=i.f(a(e)),r=o.f;return r?t.concat(r(e)):t}},857:function(e,t,r){var n=r(7854);e.exports=n},2534:function(e){e.exports=function(e){try{return{error:!1,value:e()}}catch(e){return{error:!0,value:e}}}},9478:function(e,t,r){var n=r(9670),i=r(111),o=r(8523);e.exports=function(e,t){if(n(e),i(t)&&t.constructor===e)return t;var r=o.f(e);return(0,r.resolve)(t),r.promise}},2248:function(e,t,r){var n=r(1320);e.exports=function(e,t,r){for(var i in t)n(e,i,t[i],r);return e}},1320:function(e,t,r){var n=r(7854),i=r(8880),o=r(6656),a=r(3505),s=r(2788),c=r(9909),u=c.get,l=c.enforce,h=String(String).split("String");(e.exports=function(e,t,r,s){var c,u=!!s&&!!s.unsafe,f=!!s&&!!s.enumerable,p=!!s&&!!s.noTargetGet;"function"==typeof r&&("string"!=typeof t||o(r,"name")||i(r,"name",t),(c=l(r)).source||(c.source=h.join("string"==typeof t?t:""))),e!==n?(u?!p&&e[t]&&(f=!0):delete e[t],f?e[t]=r:i(e,t,r)):f?e[t]=r:a(t,r)})(Function.prototype,"toString",(function(){return"function"==typeof this&&u(this).source||s(this)}))},7651:function(e,t,r){var n=r(4326),i=r(2261);e.exports=function(e,t){var r=e.exec;if("function"==typeof r){var o=r.call(e,t);if("object"!=typeof o)throw TypeError("RegExp exec method returned something other than an Object or null");return o}if("RegExp"!==n(e))throw TypeError("RegExp#exec called on incompatible receiver");return i.call(e,t)}},2261:function(e,t,r){"use strict";var n,i,o=r(7066),a=r(2999),s=RegExp.prototype.exec,c=String.prototype.replace,u=s,l=(n=/a/,i=/b*/g,s.call(n,"a"),s.call(i,"a"),0!==n.lastIndex||0!==i.lastIndex),h=a.UNSUPPORTED_Y||a.BROKEN_CARET,f=void 0!==/()??/.exec("")[1];(l||f||h)&&(u=function(e){var t,r,n,i,a=this,u=h&&a.sticky,p=o.call(a),d=a.source,g=0,m=e;return u&&(-1===(p=p.replace("y","")).indexOf("g")&&(p+="g"),m=String(e).slice(a.lastIndex),a.lastIndex>0&&(!a.multiline||a.multiline&&"\n"!==e[a.lastIndex-1])&&(d="(?: "+d+")",m=" "+m,g++),r=new RegExp("^(?:"+d+")",p)),f&&(r=new RegExp("^"+d+"$(?!\\s)",p)),l&&(t=a.lastIndex),n=s.call(u?r:a,m),u?n?(n.input=n.input.slice(g),n[0]=n[0].slice(g),n.index=a.lastIndex,a.lastIndex+=n[0].length):a.lastIndex=0:l&&n&&(a.lastIndex=a.global?n.index+n[0].length:t),f&&n&&n.length>1&&c.call(n[0],r,(function(){for(i=1;i<arguments.length-2;i++)void 0===arguments[i]&&(n[i]=void 0)})),n}),e.exports=u},7066:function(e,t,r){"use strict";var n=r(9670);e.exports=function(){var e=n(this),t="";return e.global&&(t+="g"),e.ignoreCase&&(t+="i"),e.multiline&&(t+="m"),e.dotAll&&(t+="s"),e.unicode&&(t+="u"),e.sticky&&(t+="y"),t}},2999:function(e,t,r){"use strict";var n=r(7293);function i(e,t){return RegExp(e,t)}t.UNSUPPORTED_Y=n((function(){var e=i("a","y");return e.lastIndex=2,null!=e.exec("abcd")})),t.BROKEN_CARET=n((function(){var e=i("^r","gy");return e.lastIndex=2,null!=e.exec("str")}))},4488:function(e){e.exports=function(e){if(null==e)throw TypeError("Can't call method on "+e);return e}},1150:function(e){e.exports=Object.is||function(e,t){return e===t?0!==e||1/e==1/t:e!=e&&t!=t}},3505:function(e,t,r){var n=r(7854),i=r(8880);e.exports=function(e,t){try{i(n,e,t)}catch(r){n[e]=t}return t}},6340:function(e,t,r){"use strict";var n=r(5005),i=r(3070),o=r(5112),a=r(9781),s=o("species");e.exports=function(e){var t=n(e),r=i.f;a&&t&&!t[s]&&r(t,s,{configurable:!0,get:function(){return this}})}},8003:function(e,t,r){var n=r(3070).f,i=r(6656),o=r(5112)("toStringTag");e.exports=function(e,t,r){e&&!i(e=r?e:e.prototype,o)&&n(e,o,{configurable:!0,value:t})}},6200:function(e,t,r){var n=r(2309),i=r(9711),o=n("keys");e.exports=function(e){return o[e]||(o[e]=i(e))}},5465:function(e,t,r){var n=r(7854),i=r(3505),o="__core-js_shared__",a=n[o]||i(o,{});e.exports=a},2309:function(e,t,r){var n=r(1913),i=r(5465);(e.exports=function(e,t){return i[e]||(i[e]=void 0!==t?t:{})})("versions",[]).push({version:"3.8.2",mode:n?"pure":"global",copyright:"© 2021 Denis Pushkarev (zloirock.ru)"})},6707:function(e,t,r){var n=r(9670),i=r(3099),o=r(5112)("species");e.exports=function(e,t){var r,a=n(e).constructor;return void 0===a||null==(r=n(a)[o])?t:i(r)}},3429:function(e,t,r){var n=r(7293);e.exports=function(e){return n((function(){var t=""[e]('"');return t!==t.toLowerCase()||t.split('"').length>3}))}},8710:function(e,t,r){var n=r(9958),i=r(4488),o=function(e){return function(t,r){var o,a,s=String(i(t)),c=n(r),u=s.length;return c<0||c>=u?e?"":void 0:(o=s.charCodeAt(c))<55296||o>56319||c+1===u||(a=s.charCodeAt(c+1))<56320||a>57343?e?s.charAt(c):o:e?s.slice(c,c+2):a-56320+(o-55296<<10)+65536}};e.exports={codeAt:o(!1),charAt:o(!0)}},7061:function(e,t,r){var n=r(8113);e.exports=/Version\/10\.\d+(\.\d+)?( Mobile\/\w+)? Safari\//.test(n)},6650:function(e,t,r){var n=r(7466),i=r(8415),o=r(4488),a=Math.ceil,s=function(e){return function(t,r,s){var c,u,l=String(o(t)),h=l.length,f=void 0===s?" ":String(s),p=n(r);return p<=h||""==f?l:(c=p-h,(u=i.call(f,a(c/f.length))).length>c&&(u=u.slice(0,c)),e?l+u:u+l)}};e.exports={start:s(!1),end:s(!0)}},3197:function(e){"use strict";var t=2147483647,r=/[^\0-\u007E]/,n=/[.\u3002\uFF0E\uFF61]/g,i="Overflow: input needs wider integers to process",o=Math.floor,a=String.fromCharCode,s=function(e){return e+22+75*(e<26)},c=function(e,t,r){var n=0;for(e=r?o(e/700):e>>1,e+=o(e/t);e>455;n+=36)e=o(e/35);return o(n+36*e/(e+38))},u=function(e){var r,n,u=[],l=(e=function(e){for(var t=[],r=0,n=e.length;r<n;){var i=e.charCodeAt(r++);if(i>=55296&&i<=56319&&r<n){var o=e.charCodeAt(r++);56320==(64512&o)?t.push(((1023&i)<<10)+(1023&o)+65536):(t.push(i),r--)}else t.push(i)}return t}(e)).length,h=128,f=0,p=72;for(r=0;r<e.length;r++)(n=e[r])<128&&u.push(a(n));var d=u.length,g=d;for(d&&u.push("-");g<l;){var m=t;for(r=0;r<e.length;r++)(n=e[r])>=h&&n<m&&(m=n);var v=g+1;if(m-h>o((t-f)/v))throw RangeError(i);for(f+=(m-h)*v,h=m,r=0;r<e.length;r++){if((n=e[r])<h&&++f>t)throw RangeError(i);if(n==h){for(var y=f,_=36;;_+=36){var b=_<=p?1:_>=p+26?26:_-p;if(y<b)break;var A=y-b,x=36-b;u.push(a(s(b+A%x))),y=o(A/x)}u.push(a(s(y))),p=c(f,v,g==d),f=0,++g}}++f,++h}return u.join("")};e.exports=function(e){var t,i,o=[],a=e.toLowerCase().replace(n,".").split(".");for(t=0;t<a.length;t++)i=a[t],o.push(r.test(i)?"xn--"+u(i):i);return o.join(".")}},8415:function(e,t,r){"use strict";var n=r(9958),i=r(4488);e.exports="".repeat||function(e){var t=String(i(this)),r="",o=n(e);if(o<0||o==1/0)throw RangeError("Wrong number of repetitions");for(;o>0;(o>>>=1)&&(t+=t))1&o&&(r+=t);return r}},6091:function(e,t,r){var n=r(7293),i=r(1361);e.exports=function(e){return n((function(){return!!i[e]()||"​᠎"!="​᠎"[e]()||i[e].name!==e}))}},3111:function(e,t,r){var n=r(4488),i="["+r(1361)+"]",o=RegExp("^"+i+i+"*"),a=RegExp(i+i+"*$"),s=function(e){return function(t){var r=String(n(t));return 1&e&&(r=r.replace(o,"")),2&e&&(r=r.replace(a,"")),r}};e.exports={start:s(1),end:s(2),trim:s(3)}},261:function(e,t,r){var n,i,o,a=r(7854),s=r(7293),c=r(9974),u=r(490),l=r(317),h=r(8334),f=r(5268),p=a.location,d=a.setImmediate,g=a.clearImmediate,m=a.process,v=a.MessageChannel,y=a.Dispatch,_=0,b={},A=function(e){if(b.hasOwnProperty(e)){var t=b[e];delete b[e],t()}},x=function(e){return function(){A(e)}},w=function(e){A(e.data)},S=function(e){a.postMessage(e+"",p.protocol+"//"+p.host)};d&&g||(d=function(e){for(var t=[],r=1;arguments.length>r;)t.push(arguments[r++]);return b[++_]=function(){("function"==typeof e?e:Function(e)).apply(void 0,t)},n(_),_},g=function(e){delete b[e]},f?n=function(e){m.nextTick(x(e))}:y&&y.now?n=function(e){y.now(x(e))}:v&&!h?(o=(i=new v).port2,i.port1.onmessage=w,n=c(o.postMessage,o,1)):a.addEventListener&&"function"==typeof postMessage&&!a.importScripts&&p&&"file:"!==p.protocol&&!s(S)?(n=S,a.addEventListener("message",w,!1)):n="onreadystatechange"in l("script")?function(e){u.appendChild(l("script")).onreadystatechange=function(){u.removeChild(this),A(e)}}:function(e){setTimeout(x(e),0)}),e.exports={set:d,clear:g}},863:function(e,t,r){var n=r(4326);e.exports=function(e){if("number"!=typeof e&&"Number"!=n(e))throw TypeError("Incorrect invocation");return+e}},1400:function(e,t,r){var n=r(9958),i=Math.max,o=Math.min;e.exports=function(e,t){var r=n(e);return r<0?i(r+t,0):o(r,t)}},7067:function(e,t,r){var n=r(9958),i=r(7466);e.exports=function(e){if(void 0===e)return 0;var t=n(e),r=i(t);if(t!==r)throw RangeError("Wrong length or index");return r}},5656:function(e,t,r){var n=r(8361),i=r(4488);e.exports=function(e){return n(i(e))}},9958:function(e){var t=Math.ceil,r=Math.floor;e.exports=function(e){return isNaN(e=+e)?0:(e>0?r:t)(e)}},7466:function(e,t,r){var n=r(9958),i=Math.min;e.exports=function(e){return e>0?i(n(e),9007199254740991):0}},7908:function(e,t,r){var n=r(4488);e.exports=function(e){return Object(n(e))}},4590:function(e,t,r){var n=r(3002);e.exports=function(e,t){var r=n(e);if(r%t)throw RangeError("Wrong offset");return r}},3002:function(e,t,r){var n=r(9958);e.exports=function(e){var t=n(e);if(t<0)throw RangeError("The argument can't be less than 0");return t}},7593:function(e,t,r){var n=r(111);e.exports=function(e,t){if(!n(e))return e;var r,i;if(t&&"function"==typeof(r=e.toString)&&!n(i=r.call(e)))return i;if("function"==typeof(r=e.valueOf)&&!n(i=r.call(e)))return i;if(!t&&"function"==typeof(r=e.toString)&&!n(i=r.call(e)))return i;throw TypeError("Can't convert object to primitive value")}},1694:function(e,t,r){var n={};n[r(5112)("toStringTag")]="z",e.exports="[object z]"===String(n)},9843:function(e,t,r){"use strict";var n=r(2109),i=r(7854),o=r(9781),a=r(3832),s=r(260),c=r(3331),u=r(5787),l=r(9114),h=r(8880),f=r(7466),p=r(7067),d=r(4590),g=r(7593),m=r(6656),v=r(648),y=r(111),_=r(30),b=r(7674),A=r(8006).f,x=r(7321),w=r(2092).forEach,S=r(6340),E=r(3070),C=r(1236),k=r(9909),P=r(9587),R=k.get,T=k.set,O=E.f,L=C.f,F=Math.round,I=i.RangeError,M=c.ArrayBuffer,N=c.DataView,D=s.NATIVE_ARRAY_BUFFER_VIEWS,j=s.TYPED_ARRAY_TAG,U=s.TypedArray,W=s.TypedArrayPrototype,q=s.aTypedArrayConstructor,B=s.isTypedArray,H="BYTES_PER_ELEMENT",G="Wrong length",z=function(e,t){for(var r=0,n=t.length,i=new(q(e))(n);n>r;)i[r]=t[r++];return i},Y=function(e,t){O(e,t,{get:function(){return R(this)[t]}})},V=function(e){var t;return e instanceof M||"ArrayBuffer"==(t=v(e))||"SharedArrayBuffer"==t},$=function(e,t){return B(e)&&"symbol"!=typeof t&&t in e&&String(+t)==String(t)},X=function(e,t){return $(e,t=g(t,!0))?l(2,e[t]):L(e,t)},K=function(e,t,r){return!($(e,t=g(t,!0))&&y(r)&&m(r,"value"))||m(r,"get")||m(r,"set")||r.configurable||m(r,"writable")&&!r.writable||m(r,"enumerable")&&!r.enumerable?O(e,t,r):(e[t]=r.value,e)};o?(D||(C.f=X,E.f=K,Y(W,"buffer"),Y(W,"byteOffset"),Y(W,"byteLength"),Y(W,"length")),n({target:"Object",stat:!0,forced:!D},{getOwnPropertyDescriptor:X,defineProperty:K}),e.exports=function(e,t,r){var o=e.match(/\d+$/)[0]/8,s=e+(r?"Clamped":"")+"Array",c="get"+e,l="set"+e,g=i[s],m=g,v=m&&m.prototype,E={},C=function(e,t){O(e,t,{get:function(){return function(e,t){var r=R(e);return r.view[c](t*o+r.byteOffset,!0)}(this,t)},set:function(e){return function(e,t,n){var i=R(e);r&&(n=(n=F(n))<0?0:n>255?255:255&n),i.view[l](t*o+i.byteOffset,n,!0)}(this,t,e)},enumerable:!0})};D?a&&(m=t((function(e,t,r,n){return u(e,m,s),P(y(t)?V(t)?void 0!==n?new g(t,d(r,o),n):void 0!==r?new g(t,d(r,o)):new g(t):B(t)?z(m,t):x.call(m,t):new g(p(t)),e,m)})),b&&b(m,U),w(A(g),(function(e){e in m||h(m,e,g[e])})),m.prototype=v):(m=t((function(e,t,r,n){u(e,m,s);var i,a,c,l=0,h=0;if(y(t)){if(!V(t))return B(t)?z(m,t):x.call(m,t);i=t,h=d(r,o);var g=t.byteLength;if(void 0===n){if(g%o)throw I(G);if((a=g-h)<0)throw I(G)}else if((a=f(n)*o)+h>g)throw I(G);c=a/o}else c=p(t),i=new M(a=c*o);for(T(e,{buffer:i,byteOffset:h,byteLength:a,length:c,view:new N(i)});l<c;)C(e,l++)})),b&&b(m,U),v=m.prototype=_(W)),v.constructor!==m&&h(v,"constructor",m),j&&h(v,j,s),E[s]=m,n({global:!0,forced:m!=g,sham:!D},E),H in m||h(m,H,o),H in v||h(v,H,o),S(s)}):e.exports=function(){}},3832:function(e,t,r){var n=r(7854),i=r(7293),o=r(7072),a=r(260).NATIVE_ARRAY_BUFFER_VIEWS,s=n.ArrayBuffer,c=n.Int8Array;e.exports=!a||!i((function(){c(1)}))||!i((function(){new c(-1)}))||!o((function(e){new c,new c(null),new c(1.5),new c(e)}),!0)||i((function(){return 1!==new c(new s(2),1,void 0).length}))},7321:function(e,t,r){var n=r(7908),i=r(7466),o=r(1246),a=r(7659),s=r(9974),c=r(260).aTypedArrayConstructor;e.exports=function(e){var t,r,u,l,h,f,p=n(e),d=arguments.length,g=d>1?arguments[1]:void 0,m=void 0!==g,v=o(p);if(null!=v&&!a(v))for(f=(h=v.call(p)).next,p=[];!(l=f.call(h)).done;)p.push(l.value);for(m&&d>2&&(g=s(g,arguments[2],2)),r=i(p.length),u=new(c(this))(r),t=0;r>t;t++)u[t]=m?g(p[t],t):p[t];return u}},9711:function(e){var t=0,r=Math.random();e.exports=function(e){return"Symbol("+String(void 0===e?"":e)+")_"+(++t+r).toString(36)}},3307:function(e,t,r){var n=r(133);e.exports=n&&!Symbol.sham&&"symbol"==typeof Symbol.iterator},6061:function(e,t,r){var n=r(5112);t.f=n},5112:function(e,t,r){var n=r(7854),i=r(2309),o=r(6656),a=r(9711),s=r(133),c=r(3307),u=i("wks"),l=n.Symbol,h=c?l:l&&l.withoutSetter||a;e.exports=function(e){return o(u,e)||(s&&o(l,e)?u[e]=l[e]:u[e]=h("Symbol."+e)),u[e]}},1361:function(e){e.exports="\t\n\v\f\r                　\u2028\u2029\ufeff"},9170:function(e,t,r){"use strict";var n=r(2109),i=r(9518),o=r(7674),a=r(30),s=r(8880),c=r(9114),u=r(408),l=function(e,t){var r=this;if(!(r instanceof l))return new l(e,t);o&&(r=o(new Error(void 0),i(r))),void 0!==t&&s(r,"message",String(t));var n=[];return u(e,n.push,{that:n}),s(r,"errors",n),r};l.prototype=a(Error.prototype,{constructor:c(5,l),message:c(5,""),name:c(5,"AggregateError")}),n({global:!0},{AggregateError:l})},8264:function(e,t,r){"use strict";var n=r(2109),i=r(7854),o=r(3331),a=r(6340),s=o.ArrayBuffer;n({global:!0,forced:i.ArrayBuffer!==s},{ArrayBuffer:s}),a("ArrayBuffer")},6938:function(e,t,r){var n=r(2109),i=r(260);n({target:"ArrayBuffer",stat:!0,forced:!i.NATIVE_ARRAY_BUFFER_VIEWS},{isView:i.isView})},9575:function(e,t,r){"use strict";var n=r(2109),i=r(7293),o=r(3331),a=r(9670),s=r(1400),c=r(7466),u=r(6707),l=o.ArrayBuffer,h=o.DataView,f=l.prototype.slice;n({target:"ArrayBuffer",proto:!0,unsafe:!0,forced:i((function(){return!new l(2).slice(1,void 0).byteLength}))},{slice:function(e,t){if(void 0!==f&&void 0===t)return f.call(a(this),e);for(var r=a(this).byteLength,n=s(e,r),i=s(void 0===t?r:t,r),o=new(u(this,l))(c(i-n)),p=new h(this),d=new h(o),g=0;n<i;)d.setUint8(g++,p.getUint8(n++));return o}})},2222:function(e,t,r){"use strict";var n=r(2109),i=r(7293),o=r(3157),a=r(111),s=r(7908),c=r(7466),u=r(6135),l=r(5417),h=r(1194),f=r(5112),p=r(7392),d=f("isConcatSpreadable"),g=9007199254740991,m="Maximum allowed index exceeded",v=p>=51||!i((function(){var e=[];return e[d]=!1,e.concat()[0]!==e})),y=h("concat"),_=function(e){if(!a(e))return!1;var t=e[d];return void 0!==t?!!t:o(e)};n({target:"Array",proto:!0,forced:!v||!y},{concat:function(e){var t,r,n,i,o,a=s(this),h=l(a,0),f=0;for(t=-1,n=arguments.length;t<n;t++)if(_(o=-1===t?a:arguments[t])){if(f+(i=c(o.length))>g)throw TypeError(m);for(r=0;r<i;r++,f++)r in o&&u(h,f,o[r])}else{if(f>=g)throw TypeError(m);u(h,f++,o)}return h.length=f,h}})},545:function(e,t,r){var n=r(2109),i=r(1048),o=r(1223);n({target:"Array",proto:!0},{copyWithin:i}),o("copyWithin")},6541:function(e,t,r){"use strict";var n=r(2109),i=r(2092).every,o=r(2133),a=r(9207),s=o("every"),c=a("every");n({target:"Array",proto:!0,forced:!s||!c},{every:function(e){return i(this,e,arguments.length>1?arguments[1]:void 0)}})},3290:function(e,t,r){var n=r(2109),i=r(1285),o=r(1223);n({target:"Array",proto:!0},{fill:i}),o("fill")},7327:function(e,t,r){"use strict";var n=r(2109),i=r(2092).filter,o=r(1194),a=r(9207),s=o("filter"),c=a("filter");n({target:"Array",proto:!0,forced:!s||!c},{filter:function(e){return i(this,e,arguments.length>1?arguments[1]:void 0)}})},4553:function(e,t,r){"use strict";var n=r(2109),i=r(2092).findIndex,o=r(1223),a=r(9207),s="findIndex",c=!0,u=a(s);s in[]&&Array(1).findIndex((function(){c=!1})),n({target:"Array",proto:!0,forced:c||!u},{findIndex:function(e){return i(this,e,arguments.length>1?arguments[1]:void 0)}}),o(s)},9826:function(e,t,r){"use strict";var n=r(2109),i=r(2092).find,o=r(1223),a=r(9207),s="find",c=!0,u=a(s);s in[]&&Array(1).find((function(){c=!1})),n({target:"Array",proto:!0,forced:c||!u},{find:function(e){return i(this,e,arguments.length>1?arguments[1]:void 0)}}),o(s)},6535:function(e,t,r){"use strict";var n=r(2109),i=r(6790),o=r(7908),a=r(7466),s=r(3099),c=r(5417);n({target:"Array",proto:!0},{flatMap:function(e){var t,r=o(this),n=a(r.length);return s(e),(t=c(r,0)).length=i(t,r,r,n,0,1,e,arguments.length>1?arguments[1]:void 0),t}})},4944:function(e,t,r){"use strict";var n=r(2109),i=r(6790),o=r(7908),a=r(7466),s=r(9958),c=r(5417);n({target:"Array",proto:!0},{flat:function(){var e=arguments.length?arguments[0]:void 0,t=o(this),r=a(t.length),n=c(t,0);return n.length=i(n,t,t,r,0,void 0===e?1:s(e)),n}})},9554:function(e,t,r){"use strict";var n=r(2109),i=r(8533);n({target:"Array",proto:!0,forced:[].forEach!=i},{forEach:i})},1038:function(e,t,r){var n=r(2109),i=r(8457);n({target:"Array",stat:!0,forced:!r(7072)((function(e){Array.from(e)}))},{from:i})},6699:function(e,t,r){"use strict";var n=r(2109),i=r(1318).includes,o=r(1223);n({target:"Array",proto:!0,forced:!r(9207)("indexOf",{ACCESSORS:!0,1:0})},{includes:function(e){return i(this,e,arguments.length>1?arguments[1]:void 0)}}),o("includes")},2772:function(e,t,r){"use strict";var n=r(2109),i=r(1318).indexOf,o=r(2133),a=r(9207),s=[].indexOf,c=!!s&&1/[1].indexOf(1,-0)<0,u=o("indexOf"),l=a("indexOf",{ACCESSORS:!0,1:0});n({target:"Array",proto:!0,forced:c||!u||!l},{indexOf:function(e){return c?s.apply(this,arguments)||0:i(this,e,arguments.length>1?arguments[1]:void 0)}})},9753:function(e,t,r){r(2109)({target:"Array",stat:!0},{isArray:r(3157)})},6992:function(e,t,r){"use strict";var n=r(5656),i=r(1223),o=r(7497),a=r(9909),s=r(654),c="Array Iterator",u=a.set,l=a.getterFor(c);e.exports=s(Array,"Array",(function(e,t){u(this,{type:c,target:n(e),index:0,kind:t})}),(function(){var e=l(this),t=e.target,r=e.kind,n=e.index++;return!t||n>=t.length?(e.target=void 0,{value:void 0,done:!0}):"keys"==r?{value:n,done:!1}:"values"==r?{value:t[n],done:!1}:{value:[n,t[n]],done:!1}}),"values"),o.Arguments=o.Array,i("keys"),i("values"),i("entries")},9600:function(e,t,r){"use strict";var n=r(2109),i=r(8361),o=r(5656),a=r(2133),s=[].join,c=i!=Object,u=a("join",",");n({target:"Array",proto:!0,forced:c||!u},{join:function(e){return s.call(o(this),void 0===e?",":e)}})},4986:function(e,t,r){var n=r(2109),i=r(6583);n({target:"Array",proto:!0,forced:i!==[].lastIndexOf},{lastIndexOf:i})},1249:function(e,t,r){"use strict";var n=r(2109),i=r(2092).map,o=r(1194),a=r(9207),s=o("map"),c=a("map");n({target:"Array",proto:!0,forced:!s||!c},{map:function(e){return i(this,e,arguments.length>1?arguments[1]:void 0)}})},6572:function(e,t,r){"use strict";var n=r(2109),i=r(7293),o=r(6135);n({target:"Array",stat:!0,forced:i((function(){function e(){}return!(Array.of.call(e)instanceof e)}))},{of:function(){for(var e=0,t=arguments.length,r=new("function"==typeof this?this:Array)(t);t>e;)o(r,e,arguments[e++]);return r.length=t,r}})},6644:function(e,t,r){"use strict";var n=r(2109),i=r(3671).right,o=r(2133),a=r(9207),s=r(7392),c=r(5268),u=o("reduceRight"),l=a("reduce",{1:0});n({target:"Array",proto:!0,forced:!u||!l||!c&&s>79&&s<83},{reduceRight:function(e){return i(this,e,arguments.length,arguments.length>1?arguments[1]:void 0)}})},5827:function(e,t,r){"use strict";var n=r(2109),i=r(3671).left,o=r(2133),a=r(9207),s=r(7392),c=r(5268),u=o("reduce"),l=a("reduce",{1:0});n({target:"Array",proto:!0,forced:!u||!l||!c&&s>79&&s<83},{reduce:function(e){return i(this,e,arguments.length,arguments.length>1?arguments[1]:void 0)}})},5069:function(e,t,r){"use strict";var n=r(2109),i=r(3157),o=[].reverse,a=[1,2];n({target:"Array",proto:!0,forced:String(a)===String(a.reverse())},{reverse:function(){return i(this)&&(this.length=this.length),o.call(this)}})},7042:function(e,t,r){"use strict";var n=r(2109),i=r(111),o=r(3157),a=r(1400),s=r(7466),c=r(5656),u=r(6135),l=r(5112),h=r(1194),f=r(9207),p=h("slice"),d=f("slice",{ACCESSORS:!0,0:0,1:2}),g=l("species"),m=[].slice,v=Math.max;n({target:"Array",proto:!0,forced:!p||!d},{slice:function(e,t){var r,n,l,h=c(this),f=s(h.length),p=a(e,f),d=a(void 0===t?f:t,f);if(o(h)&&("function"!=typeof(r=h.constructor)||r!==Array&&!o(r.prototype)?i(r)&&null===(r=r[g])&&(r=void 0):r=void 0,r===Array||void 0===r))return m.call(h,p,d);for(n=new(void 0===r?Array:r)(v(d-p,0)),l=0;p<d;p++,l++)p in h&&u(n,l,h[p]);return n.length=l,n}})},5212:function(e,t,r){"use strict";var n=r(2109),i=r(2092).some,o=r(2133),a=r(9207),s=o("some"),c=a("some");n({target:"Array",proto:!0,forced:!s||!c},{some:function(e){return i(this,e,arguments.length>1?arguments[1]:void 0)}})},2707:function(e,t,r){"use strict";var n=r(2109),i=r(3099),o=r(7908),a=r(7293),s=r(2133),c=[],u=c.sort,l=a((function(){c.sort(void 0)})),h=a((function(){c.sort(null)})),f=s("sort");n({target:"Array",proto:!0,forced:l||!h||!f},{sort:function(e){return void 0===e?u.call(o(this)):u.call(o(this),i(e))}})},8706:function(e,t,r){r(6340)("Array")},561:function(e,t,r){"use strict";var n=r(2109),i=r(1400),o=r(9958),a=r(7466),s=r(7908),c=r(5417),u=r(6135),l=r(1194),h=r(9207),f=l("splice"),p=h("splice",{ACCESSORS:!0,0:0,1:2}),d=Math.max,g=Math.min,m=9007199254740991,v="Maximum allowed length exceeded";n({target:"Array",proto:!0,forced:!f||!p},{splice:function(e,t){var r,n,l,h,f,p,y=s(this),_=a(y.length),b=i(e,_),A=arguments.length;if(0===A?r=n=0:1===A?(r=0,n=_-b):(r=A-2,n=g(d(o(t),0),_-b)),_+r-n>m)throw TypeError(v);for(l=c(y,n),h=0;h<n;h++)(f=b+h)in y&&u(l,h,y[f]);if(l.length=n,r<n){for(h=b;h<_-n;h++)p=h+r,(f=h+n)in y?y[p]=y[f]:delete y[p];for(h=_;h>_-n+r;h--)delete y[h-1]}else if(r>n)for(h=_-n;h>b;h--)p=h+r-1,(f=h+n-1)in y?y[p]=y[f]:delete y[p];for(h=0;h<r;h++)y[h+b]=arguments[h+2];return y.length=_-n+r,l}})},9244:function(e,t,r){r(1223)("flatMap")},3792:function(e,t,r){r(1223)("flat")},6716:function(e,t,r){var n=r(2109),i=r(3331);n({global:!0,forced:!r(4019)},{DataView:i.DataView})},3843:function(e,t,r){r(2109)({target:"Date",stat:!0},{now:function(){return(new Date).getTime()}})},8733:function(e,t,r){var n=r(2109),i=r(5573);n({target:"Date",proto:!0,forced:Date.prototype.toISOString!==i},{toISOString:i})},5735:function(e,t,r){"use strict";var n=r(2109),i=r(7293),o=r(7908),a=r(7593);n({target:"Date",proto:!0,forced:i((function(){return null!==new Date(NaN).toJSON()||1!==Date.prototype.toJSON.call({toISOString:function(){return 1}})}))},{toJSON:function(e){var t=o(this),r=a(t);return"number"!=typeof r||isFinite(r)?t.toISOString():null}})},6078:function(e,t,r){var n=r(8880),i=r(8709),o=r(5112)("toPrimitive"),a=Date.prototype;o in a||n(a,o,i)},3710:function(e,t,r){var n=r(1320),i=Date.prototype,o="Invalid Date",a=i.toString,s=i.getTime;new Date(NaN)+""!=o&&n(i,"toString",(function(){var e=s.call(this);return e==e?a.call(this):o}))},4812:function(e,t,r){r(2109)({target:"Function",proto:!0},{bind:r(7065)})},4855:function(e,t,r){"use strict";var n=r(111),i=r(3070),o=r(9518),a=r(5112)("hasInstance"),s=Function.prototype;a in s||i.f(s,a,{value:function(e){if("function"!=typeof this||!n(e))return!1;if(!n(this.prototype))return e instanceof this;for(;e=o(e);)if(this.prototype===e)return!0;return!1}})},8309:function(e,t,r){var n=r(9781),i=r(3070).f,o=Function.prototype,a=o.toString,s=/^\s*function ([^ (]*)/,c="name";n&&!(c in o)&&i(o,c,{configurable:!0,get:function(){try{return a.call(this).match(s)[1]}catch(e){return""}}})},5837:function(e,t,r){r(2109)({global:!0},{globalThis:r(7854)})},8862:function(e,t,r){var n=r(2109),i=r(5005),o=r(7293),a=i("JSON","stringify"),s=/[\uD800-\uDFFF]/g,c=/^[\uD800-\uDBFF]$/,u=/^[\uDC00-\uDFFF]$/,l=function(e,t,r){var n=r.charAt(t-1),i=r.charAt(t+1);return c.test(e)&&!u.test(i)||u.test(e)&&!c.test(n)?"\\u"+e.charCodeAt(0).toString(16):e},h=o((function(){return'"\\udf06\\ud834"'!==a("\udf06\ud834")||'"\\udead"'!==a("\udead")}));a&&n({target:"JSON",stat:!0,forced:h},{stringify:function(e,t,r){var n=a.apply(null,arguments);return"string"==typeof n?n.replace(s,l):n}})},3706:function(e,t,r){var n=r(7854);r(8003)(n.JSON,"JSON",!0)},1532:function(e,t,r){"use strict";var n=r(7710),i=r(5631);e.exports=n("Map",(function(e){return function(){return e(this,arguments.length?arguments[0]:void 0)}}),i)},9752:function(e,t,r){var n=r(2109),i=r(6513),o=Math.acosh,a=Math.log,s=Math.sqrt,c=Math.LN2;n({target:"Math",stat:!0,forced:!o||710!=Math.floor(o(Number.MAX_VALUE))||o(1/0)!=1/0},{acosh:function(e){return(e=+e)<1?NaN:e>94906265.62425156?a(e)+c:i(e-1+s(e-1)*s(e+1))}})},2376:function(e,t,r){var n=r(2109),i=Math.asinh,o=Math.log,a=Math.sqrt;n({target:"Math",stat:!0,forced:!(i&&1/i(0)>0)},{asinh:function e(t){return isFinite(t=+t)&&0!=t?t<0?-e(-t):o(t+a(t*t+1)):t}})},3181:function(e,t,r){var n=r(2109),i=Math.atanh,o=Math.log;n({target:"Math",stat:!0,forced:!(i&&1/i(-0)<0)},{atanh:function(e){return 0==(e=+e)?e:o((1+e)/(1-e))/2}})},3484:function(e,t,r){var n=r(2109),i=r(4310),o=Math.abs,a=Math.pow;n({target:"Math",stat:!0},{cbrt:function(e){return i(e=+e)*a(o(e),1/3)}})},2388:function(e,t,r){var n=r(2109),i=Math.floor,o=Math.log,a=Math.LOG2E;n({target:"Math",stat:!0},{clz32:function(e){return(e>>>=0)?31-i(o(e+.5)*a):32}})},8621:function(e,t,r){var n=r(2109),i=r(6736),o=Math.cosh,a=Math.abs,s=Math.E;n({target:"Math",stat:!0,forced:!o||o(710)===1/0},{cosh:function(e){var t=i(a(e)-1)+1;return(t+1/(t*s*s))*(s/2)}})},403:function(e,t,r){var n=r(2109),i=r(6736);n({target:"Math",stat:!0,forced:i!=Math.expm1},{expm1:i})},4755:function(e,t,r){r(2109)({target:"Math",stat:!0},{fround:r(6130)})},5438:function(e,t,r){var n=r(2109),i=Math.hypot,o=Math.abs,a=Math.sqrt;n({target:"Math",stat:!0,forced:!!i&&i(1/0,NaN)!==1/0},{hypot:function(e,t){for(var r,n,i=0,s=0,c=arguments.length,u=0;s<c;)u<(r=o(arguments[s++]))?(i=i*(n=u/r)*n+1,u=r):i+=r>0?(n=r/u)*n:r;return u===1/0?1/0:u*a(i)}})},332:function(e,t,r){var n=r(2109),i=r(7293),o=Math.imul;n({target:"Math",stat:!0,forced:i((function(){return-5!=o(4294967295,5)||2!=o.length}))},{imul:function(e,t){var r=65535,n=+e,i=+t,o=r&n,a=r&i;return 0|o*a+((r&n>>>16)*a+o*(r&i>>>16)<<16>>>0)}})},658:function(e,t,r){var n=r(2109),i=Math.log,o=Math.LOG10E;n({target:"Math",stat:!0},{log10:function(e){return i(e)*o}})},197:function(e,t,r){r(2109)({target:"Math",stat:!0},{log1p:r(6513)})},4914:function(e,t,r){var n=r(2109),i=Math.log,o=Math.LN2;n({target:"Math",stat:!0},{log2:function(e){return i(e)/o}})},2420:function(e,t,r){r(2109)({target:"Math",stat:!0},{sign:r(4310)})},160:function(e,t,r){var n=r(2109),i=r(7293),o=r(6736),a=Math.abs,s=Math.exp,c=Math.E;n({target:"Math",stat:!0,forced:i((function(){return-2e-17!=Math.sinh(-2e-17)}))},{sinh:function(e){return a(e=+e)<1?(o(e)-o(-e))/2:(s(e-1)-s(-e-1))*(c/2)}})},970:function(e,t,r){var n=r(2109),i=r(6736),o=Math.exp;n({target:"Math",stat:!0},{tanh:function(e){var t=i(e=+e),r=i(-e);return t==1/0?1:r==1/0?-1:(t-r)/(o(e)+o(-e))}})},7059:function(e,t,r){r(8003)(Math,"Math",!0)},3689:function(e,t,r){var n=r(2109),i=Math.ceil,o=Math.floor;n({target:"Math",stat:!0},{trunc:function(e){return(e>0?o:i)(e)}})},9653:function(e,t,r){"use strict";var n=r(9781),i=r(7854),o=r(4705),a=r(1320),s=r(6656),c=r(4326),u=r(9587),l=r(7593),h=r(7293),f=r(30),p=r(8006).f,d=r(1236).f,g=r(3070).f,m=r(3111).trim,v="Number",y=i.Number,_=y.prototype,b=c(f(_))==v,A=function(e){var t,r,n,i,o,a,s,c,u=l(e,!1);if("string"==typeof u&&u.length>2)if(43===(t=(u=m(u)).charCodeAt(0))||45===t){if(88===(r=u.charCodeAt(2))||120===r)return NaN}else if(48===t){switch(u.charCodeAt(1)){case 66:case 98:n=2,i=49;break;case 79:case 111:n=8,i=55;break;default:return+u}for(a=(o=u.slice(2)).length,s=0;s<a;s++)if((c=o.charCodeAt(s))<48||c>i)return NaN;return parseInt(o,n)}return+u};if(o(v,!y(" 0o1")||!y("0b1")||y("+0x1"))){for(var x,w=function(e){var t=arguments.length<1?0:e,r=this;return r instanceof w&&(b?h((function(){_.valueOf.call(r)})):c(r)!=v)?u(new y(A(t)),r,w):A(t)},S=n?p(y):"MAX_VALUE,MIN_VALUE,NaN,NEGATIVE_INFINITY,POSITIVE_INFINITY,EPSILON,isFinite,isInteger,isNaN,isSafeInteger,MAX_SAFE_INTEGER,MIN_SAFE_INTEGER,parseFloat,parseInt,isInteger,fromString,range".split(","),E=0;S.length>E;E++)s(y,x=S[E])&&!s(w,x)&&g(w,x,d(y,x));w.prototype=_,_.constructor=w,a(i,v,w)}},3299:function(e,t,r){r(2109)({target:"Number",stat:!0},{EPSILON:Math.pow(2,-52)})},5192:function(e,t,r){r(2109)({target:"Number",stat:!0},{isFinite:r(7023)})},3161:function(e,t,r){r(2109)({target:"Number",stat:!0},{isInteger:r(8730)})},4048:function(e,t,r){r(2109)({target:"Number",stat:!0},{isNaN:function(e){return e!=e}})},8285:function(e,t,r){var n=r(2109),i=r(8730),o=Math.abs;n({target:"Number",stat:!0},{isSafeInteger:function(e){return i(e)&&o(e)<=9007199254740991}})},4363:function(e,t,r){r(2109)({target:"Number",stat:!0},{MAX_SAFE_INTEGER:9007199254740991})},5994:function(e,t,r){r(2109)({target:"Number",stat:!0},{MIN_SAFE_INTEGER:-9007199254740991})},1874:function(e,t,r){var n=r(2109),i=r(2814);n({target:"Number",stat:!0,forced:Number.parseFloat!=i},{parseFloat:i})},9494:function(e,t,r){var n=r(2109),i=r(3009);n({target:"Number",stat:!0,forced:Number.parseInt!=i},{parseInt:i})},6977:function(e,t,r){"use strict";var n=r(2109),i=r(9958),o=r(863),a=r(8415),s=r(7293),c=1..toFixed,u=Math.floor,l=function(e,t,r){return 0===t?r:t%2==1?l(e,t-1,r*e):l(e*e,t/2,r)};n({target:"Number",proto:!0,forced:c&&("0.000"!==8e-5.toFixed(3)||"1"!==.9.toFixed(0)||"1.25"!==1.255.toFixed(2)||"1000000000000000128"!==(0xde0b6b3a7640080).toFixed(0))||!s((function(){c.call({})}))},{toFixed:function(e){var t,r,n,s,c=o(this),h=i(e),f=[0,0,0,0,0,0],p="",d="0",g=function(e,t){for(var r=-1,n=t;++r<6;)n+=e*f[r],f[r]=n%1e7,n=u(n/1e7)},m=function(e){for(var t=6,r=0;--t>=0;)r+=f[t],f[t]=u(r/e),r=r%e*1e7},v=function(){for(var e=6,t="";--e>=0;)if(""!==t||0===e||0!==f[e]){var r=String(f[e]);t=""===t?r:t+a.call("0",7-r.length)+r}return t};if(h<0||h>20)throw RangeError("Incorrect fraction digits");if(c!=c)return"NaN";if(c<=-1e21||c>=1e21)return String(c);if(c<0&&(p="-",c=-c),c>1e-21)if(r=(t=function(e){for(var t=0,r=e;r>=4096;)t+=12,r/=4096;for(;r>=2;)t+=1,r/=2;return t}(c*l(2,69,1))-69)<0?c*l(2,-t,1):c/l(2,t,1),r*=4503599627370496,(t=52-t)>0){for(g(0,r),n=h;n>=7;)g(1e7,0),n-=7;for(g(l(10,n,1),0),n=t-1;n>=23;)m(1<<23),n-=23;m(1<<n),g(1,1),m(2),d=v()}else g(0,r),g(1<<-t,0),d=v()+a.call("0",h);return h>0?p+((s=d.length)<=h?"0."+a.call("0",h-s)+d:d.slice(0,s-h)+"."+d.slice(s-h)):p+d}})},5147:function(e,t,r){"use strict";var n=r(2109),i=r(7293),o=r(863),a=1..toPrecision;n({target:"Number",proto:!0,forced:i((function(){return"1"!==a.call(1,void 0)}))||!i((function(){a.call({})}))},{toPrecision:function(e){return void 0===e?a.call(o(this)):a.call(o(this),e)}})},9601:function(e,t,r){var n=r(2109),i=r(1574);n({target:"Object",stat:!0,forced:Object.assign!==i},{assign:i})},8011:function(e,t,r){r(2109)({target:"Object",stat:!0,sham:!r(9781)},{create:r(30)})},9595:function(e,t,r){"use strict";var n=r(2109),i=r(9781),o=r(9026),a=r(7908),s=r(3099),c=r(3070);i&&n({target:"Object",proto:!0,forced:o},{__defineGetter__:function(e,t){c.f(a(this),e,{get:s(t),enumerable:!0,configurable:!0})}})},3321:function(e,t,r){var n=r(2109),i=r(9781);n({target:"Object",stat:!0,forced:!i,sham:!i},{defineProperties:r(6048)})},9070:function(e,t,r){var n=r(2109),i=r(9781);n({target:"Object",stat:!0,forced:!i,sham:!i},{defineProperty:r(3070).f})},5500:function(e,t,r){"use strict";var n=r(2109),i=r(9781),o=r(9026),a=r(7908),s=r(3099),c=r(3070);i&&n({target:"Object",proto:!0,forced:o},{__defineSetter__:function(e,t){c.f(a(this),e,{set:s(t),enumerable:!0,configurable:!0})}})},9720:function(e,t,r){var n=r(2109),i=r(4699).entries;n({target:"Object",stat:!0},{entries:function(e){return i(e)}})},3371:function(e,t,r){var n=r(2109),i=r(6677),o=r(7293),a=r(111),s=r(2423).onFreeze,c=Object.freeze;n({target:"Object",stat:!0,forced:o((function(){c(1)})),sham:!i},{freeze:function(e){return c&&a(e)?c(s(e)):e}})},8559:function(e,t,r){var n=r(2109),i=r(408),o=r(6135);n({target:"Object",stat:!0},{fromEntries:function(e){var t={};return i(e,(function(e,r){o(t,e,r)}),{AS_ENTRIES:!0}),t}})},5003:function(e,t,r){var n=r(2109),i=r(7293),o=r(5656),a=r(1236).f,s=r(9781),c=i((function(){a(1)}));n({target:"Object",stat:!0,forced:!s||c,sham:!s},{getOwnPropertyDescriptor:function(e,t){return a(o(e),t)}})},9337:function(e,t,r){var n=r(2109),i=r(9781),o=r(3887),a=r(5656),s=r(1236),c=r(6135);n({target:"Object",stat:!0,sham:!i},{getOwnPropertyDescriptors:function(e){for(var t,r,n=a(e),i=s.f,u=o(n),l={},h=0;u.length>h;)void 0!==(r=i(n,t=u[h++]))&&c(l,t,r);return l}})},6210:function(e,t,r){var n=r(2109),i=r(7293),o=r(1156).f;n({target:"Object",stat:!0,forced:i((function(){return!Object.getOwnPropertyNames(1)}))},{getOwnPropertyNames:o})},489:function(e,t,r){var n=r(2109),i=r(7293),o=r(7908),a=r(9518),s=r(8544);n({target:"Object",stat:!0,forced:i((function(){a(1)})),sham:!s},{getPrototypeOf:function(e){return a(o(e))}})},1825:function(e,t,r){var n=r(2109),i=r(7293),o=r(111),a=Object.isExtensible;n({target:"Object",stat:!0,forced:i((function(){a(1)}))},{isExtensible:function(e){return!!o(e)&&(!a||a(e))}})},8410:function(e,t,r){var n=r(2109),i=r(7293),o=r(111),a=Object.isFrozen;n({target:"Object",stat:!0,forced:i((function(){a(1)}))},{isFrozen:function(e){return!o(e)||!!a&&a(e)}})},2200:function(e,t,r){var n=r(2109),i=r(7293),o=r(111),a=Object.isSealed;n({target:"Object",stat:!0,forced:i((function(){a(1)}))},{isSealed:function(e){return!o(e)||!!a&&a(e)}})},3304:function(e,t,r){r(2109)({target:"Object",stat:!0},{is:r(1150)})},7941:function(e,t,r){var n=r(2109),i=r(7908),o=r(1956);n({target:"Object",stat:!0,forced:r(7293)((function(){o(1)}))},{keys:function(e){return o(i(e))}})},4869:function(e,t,r){"use strict";var n=r(2109),i=r(9781),o=r(9026),a=r(7908),s=r(7593),c=r(9518),u=r(1236).f;i&&n({target:"Object",proto:!0,forced:o},{__lookupGetter__:function(e){var t,r=a(this),n=s(e,!0);do{if(t=u(r,n))return t.get}while(r=c(r))}})},3952:function(e,t,r){"use strict";var n=r(2109),i=r(9781),o=r(9026),a=r(7908),s=r(7593),c=r(9518),u=r(1236).f;i&&n({target:"Object",proto:!0,forced:o},{__lookupSetter__:function(e){var t,r=a(this),n=s(e,!0);do{if(t=u(r,n))return t.set}while(r=c(r))}})},7227:function(e,t,r){var n=r(2109),i=r(111),o=r(2423).onFreeze,a=r(6677),s=r(7293),c=Object.preventExtensions;n({target:"Object",stat:!0,forced:s((function(){c(1)})),sham:!a},{preventExtensions:function(e){return c&&i(e)?c(o(e)):e}})},514:function(e,t,r){var n=r(2109),i=r(111),o=r(2423).onFreeze,a=r(6677),s=r(7293),c=Object.seal;n({target:"Object",stat:!0,forced:s((function(){c(1)})),sham:!a},{seal:function(e){return c&&i(e)?c(o(e)):e}})},8304:function(e,t,r){r(2109)({target:"Object",stat:!0},{setPrototypeOf:r(7674)})},1539:function(e,t,r){var n=r(1694),i=r(1320),o=r(288);n||i(Object.prototype,"toString",o,{unsafe:!0})},6833:function(e,t,r){var n=r(2109),i=r(4699).values;n({target:"Object",stat:!0},{values:function(e){return i(e)}})},4678:function(e,t,r){var n=r(2109),i=r(2814);n({global:!0,forced:parseFloat!=i},{parseFloat:i})},1058:function(e,t,r){var n=r(2109),i=r(3009);n({global:!0,forced:parseInt!=i},{parseInt:i})},7922:function(e,t,r){"use strict";var n=r(2109),i=r(3099),o=r(8523),a=r(2534),s=r(408);n({target:"Promise",stat:!0},{allSettled:function(e){var t=this,r=o.f(t),n=r.resolve,c=r.reject,u=a((function(){var r=i(t.resolve),o=[],a=0,c=1;s(e,(function(e){var i=a++,s=!1;o.push(void 0),c++,r.call(t,e).then((function(e){s||(s=!0,o[i]={status:"fulfilled",value:e},--c||n(o))}),(function(e){s||(s=!0,o[i]={status:"rejected",reason:e},--c||n(o))}))})),--c||n(o)}));return u.error&&c(u.value),r.promise}})},4668:function(e,t,r){"use strict";var n=r(2109),i=r(3099),o=r(5005),a=r(8523),s=r(2534),c=r(408),u="No one promise resolved";n({target:"Promise",stat:!0},{any:function(e){var t=this,r=a.f(t),n=r.resolve,l=r.reject,h=s((function(){var r=i(t.resolve),a=[],s=0,h=1,f=!1;c(e,(function(e){var i=s++,c=!1;a.push(void 0),h++,r.call(t,e).then((function(e){c||f||(f=!0,n(e))}),(function(e){c||f||(c=!0,a[i]=e,--h||l(new(o("AggregateError"))(a,u)))}))})),--h||l(new(o("AggregateError"))(a,u))}));return h.error&&l(h.value),r.promise}})},7727:function(e,t,r){"use strict";var n=r(2109),i=r(1913),o=r(3366),a=r(7293),s=r(5005),c=r(6707),u=r(9478),l=r(1320);n({target:"Promise",proto:!0,real:!0,forced:!!o&&a((function(){o.prototype.finally.call({then:function(){}},(function(){}))}))},{finally:function(e){var t=c(this,s("Promise")),r="function"==typeof e;return this.then(r?function(r){return u(t,e()).then((function(){return r}))}:e,r?function(r){return u(t,e()).then((function(){throw r}))}:e)}}),i||"function"!=typeof o||o.prototype.finally||l(o.prototype,"finally",s("Promise").prototype.finally)},8674:function(e,t,r){"use strict";var n,i,o,a,s=r(2109),c=r(1913),u=r(7854),l=r(5005),h=r(3366),f=r(1320),p=r(2248),d=r(8003),g=r(6340),m=r(111),v=r(3099),y=r(5787),_=r(2788),b=r(408),A=r(7072),x=r(6707),w=r(261).set,S=r(5948),E=r(9478),C=r(842),k=r(8523),P=r(2534),R=r(9909),T=r(4705),O=r(5112),L=r(5268),F=r(7392),I=O("species"),M="Promise",N=R.get,D=R.set,j=R.getterFor(M),U=h,W=u.TypeError,q=u.document,B=u.process,H=l("fetch"),G=k.f,z=G,Y=!!(q&&q.createEvent&&u.dispatchEvent),V="function"==typeof PromiseRejectionEvent,$="unhandledrejection",X=T(M,(function(){if(_(U)===String(U)){if(66===F)return!0;if(!L&&!V)return!0}if(c&&!U.prototype.finally)return!0;if(F>=51&&/native code/.test(U))return!1;var e=U.resolve(1),t=function(e){e((function(){}),(function(){}))};return(e.constructor={})[I]=t,!(e.then((function(){}))instanceof t)})),K=X||!A((function(e){U.all(e).catch((function(){}))})),J=function(e){var t;return!(!m(e)||"function"!=typeof(t=e.then))&&t},Q=function(e,t){if(!e.notified){e.notified=!0;var r=e.reactions;S((function(){for(var n=e.value,i=1==e.state,o=0;r.length>o;){var a,s,c,u=r[o++],l=i?u.ok:u.fail,h=u.resolve,f=u.reject,p=u.domain;try{l?(i||(2===e.rejection&&re(e),e.rejection=1),!0===l?a=n:(p&&p.enter(),a=l(n),p&&(p.exit(),c=!0)),a===u.promise?f(W("Promise-chain cycle")):(s=J(a))?s.call(a,h,f):h(a)):f(n)}catch(e){p&&!c&&p.exit(),f(e)}}e.reactions=[],e.notified=!1,t&&!e.rejection&&ee(e)}))}},Z=function(e,t,r){var n,i;Y?((n=q.createEvent("Event")).promise=t,n.reason=r,n.initEvent(e,!1,!0),u.dispatchEvent(n)):n={promise:t,reason:r},!V&&(i=u["on"+e])?i(n):e===$&&C("Unhandled promise rejection",r)},ee=function(e){w.call(u,(function(){var t,r=e.facade,n=e.value;if(te(e)&&(t=P((function(){L?B.emit("unhandledRejection",n,r):Z($,r,n)})),e.rejection=L||te(e)?2:1,t.error))throw t.value}))},te=function(e){return 1!==e.rejection&&!e.parent},re=function(e){w.call(u,(function(){var t=e.facade;L?B.emit("rejectionHandled",t):Z("rejectionhandled",t,e.value)}))},ne=function(e,t,r){return function(n){e(t,n,r)}},ie=function(e,t,r){e.done||(e.done=!0,r&&(e=r),e.value=t,e.state=2,Q(e,!0))},oe=function(e,t,r){if(!e.done){e.done=!0,r&&(e=r);try{if(e.facade===t)throw W("Promise can't be resolved itself");var n=J(t);n?S((function(){var r={done:!1};try{n.call(t,ne(oe,r,e),ne(ie,r,e))}catch(t){ie(r,t,e)}})):(e.value=t,e.state=1,Q(e,!1))}catch(t){ie({done:!1},t,e)}}};X&&(U=function(e){y(this,U,M),v(e),n.call(this);var t=N(this);try{e(ne(oe,t),ne(ie,t))}catch(e){ie(t,e)}},(n=function(e){D(this,{type:M,done:!1,notified:!1,parent:!1,reactions:[],rejection:!1,state:0,value:void 0})}).prototype=p(U.prototype,{then:function(e,t){var r=j(this),n=G(x(this,U));return n.ok="function"!=typeof e||e,n.fail="function"==typeof t&&t,n.domain=L?B.domain:void 0,r.parent=!0,r.reactions.push(n),0!=r.state&&Q(r,!1),n.promise},catch:function(e){return this.then(void 0,e)}}),i=function(){var e=new n,t=N(e);this.promise=e,this.resolve=ne(oe,t),this.reject=ne(ie,t)},k.f=G=function(e){return e===U||e===o?new i(e):z(e)},c||"function"!=typeof h||(a=h.prototype.then,f(h.prototype,"then",(function(e,t){var r=this;return new U((function(e,t){a.call(r,e,t)})).then(e,t)}),{unsafe:!0}),"function"==typeof H&&s({global:!0,enumerable:!0,forced:!0},{fetch:function(e){return E(U,H.apply(u,arguments))}}))),s({global:!0,wrap:!0,forced:X},{Promise:U}),d(U,M,!1,!0),g(M),o=l(M),s({target:M,stat:!0,forced:X},{reject:function(e){var t=G(this);return t.reject.call(void 0,e),t.promise}}),s({target:M,stat:!0,forced:c||X},{resolve:function(e){return E(c&&this===o?U:this,e)}}),s({target:M,stat:!0,forced:K},{all:function(e){var t=this,r=G(t),n=r.resolve,i=r.reject,o=P((function(){var r=v(t.resolve),o=[],a=0,s=1;b(e,(function(e){var c=a++,u=!1;o.push(void 0),s++,r.call(t,e).then((function(e){u||(u=!0,o[c]=e,--s||n(o))}),i)})),--s||n(o)}));return o.error&&i(o.value),r.promise},race:function(e){var t=this,r=G(t),n=r.reject,i=P((function(){var i=v(t.resolve);b(e,(function(e){i.call(t,e).then(r.resolve,n)}))}));return i.error&&n(i.value),r.promise}})},224:function(e,t,r){var n=r(2109),i=r(5005),o=r(3099),a=r(9670),s=r(7293),c=i("Reflect","apply"),u=Function.apply;n({target:"Reflect",stat:!0,forced:!s((function(){c((function(){}))}))},{apply:function(e,t,r){return o(e),a(r),c?c(e,t,r):u.call(e,t,r)}})},2419:function(e,t,r){var n=r(2109),i=r(5005),o=r(3099),a=r(9670),s=r(111),c=r(30),u=r(7065),l=r(7293),h=i("Reflect","construct"),f=l((function(){function e(){}return!(h((function(){}),[],e)instanceof e)})),p=!l((function(){h((function(){}))})),d=f||p;n({target:"Reflect",stat:!0,forced:d,sham:d},{construct:function(e,t){o(e),a(t);var r=arguments.length<3?e:o(arguments[2]);if(p&&!f)return h(e,t,r);if(e==r){switch(t.length){case 0:return new e;case 1:return new e(t[0]);case 2:return new e(t[0],t[1]);case 3:return new e(t[0],t[1],t[2]);case 4:return new e(t[0],t[1],t[2],t[3])}var n=[null];return n.push.apply(n,t),new(u.apply(e,n))}var i=r.prototype,l=c(s(i)?i:Object.prototype),d=Function.apply.call(e,l,t);return s(d)?d:l}})},9596:function(e,t,r){var n=r(2109),i=r(9781),o=r(9670),a=r(7593),s=r(3070);n({target:"Reflect",stat:!0,forced:r(7293)((function(){Reflect.defineProperty(s.f({},1,{value:1}),1,{value:2})})),sham:!i},{defineProperty:function(e,t,r){o(e);var n=a(t,!0);o(r);try{return s.f(e,n,r),!0}catch(e){return!1}}})},2586:function(e,t,r){var n=r(2109),i=r(9670),o=r(1236).f;n({target:"Reflect",stat:!0},{deleteProperty:function(e,t){var r=o(i(e),t);return!(r&&!r.configurable)&&delete e[t]}})},5683:function(e,t,r){var n=r(2109),i=r(9781),o=r(9670),a=r(1236);n({target:"Reflect",stat:!0,sham:!i},{getOwnPropertyDescriptor:function(e,t){return a.f(o(e),t)}})},9361:function(e,t,r){var n=r(2109),i=r(9670),o=r(9518);n({target:"Reflect",stat:!0,sham:!r(8544)},{getPrototypeOf:function(e){return o(i(e))}})},4819:function(e,t,r){var n=r(2109),i=r(111),o=r(9670),a=r(6656),s=r(1236),c=r(9518);n({target:"Reflect",stat:!0},{get:function e(t,r){var n,u,l=arguments.length<3?t:arguments[2];return o(t)===l?t[r]:(n=s.f(t,r))?a(n,"value")?n.value:void 0===n.get?void 0:n.get.call(l):i(u=c(t))?e(u,r,l):void 0}})},1037:function(e,t,r){r(2109)({target:"Reflect",stat:!0},{has:function(e,t){return t in e}})},5898:function(e,t,r){var n=r(2109),i=r(9670),o=Object.isExtensible;n({target:"Reflect",stat:!0},{isExtensible:function(e){return i(e),!o||o(e)}})},7556:function(e,t,r){r(2109)({target:"Reflect",stat:!0},{ownKeys:r(3887)})},4361:function(e,t,r){var n=r(2109),i=r(5005),o=r(9670);n({target:"Reflect",stat:!0,sham:!r(6677)},{preventExtensions:function(e){o(e);try{var t=i("Object","preventExtensions");return t&&t(e),!0}catch(e){return!1}}})},9532:function(e,t,r){var n=r(2109),i=r(9670),o=r(6077),a=r(7674);a&&n({target:"Reflect",stat:!0},{setPrototypeOf:function(e,t){i(e),o(t);try{return a(e,t),!0}catch(e){return!1}}})},3593:function(e,t,r){var n=r(2109),i=r(9670),o=r(111),a=r(6656),s=r(7293),c=r(3070),u=r(1236),l=r(9518),h=r(9114);n({target:"Reflect",stat:!0,forced:s((function(){var e=function(){},t=c.f(new e,"a",{configurable:!0});return!1!==Reflect.set(e.prototype,"a",1,t)}))},{set:function e(t,r,n){var s,f,p=arguments.length<4?t:arguments[3],d=u.f(i(t),r);if(!d){if(o(f=l(t)))return e(f,r,n,p);d=h(0)}if(a(d,"value")){if(!1===d.writable||!o(p))return!1;if(s=u.f(p,r)){if(s.get||s.set||!1===s.writable)return!1;s.value=n,c.f(p,r,s)}else c.f(p,r,h(0,n));return!0}return void 0!==d.set&&(d.set.call(p,n),!0)}})},1299:function(e,t,r){var n=r(2109),i=r(7854),o=r(8003);n({global:!0},{Reflect:{}}),o(i.Reflect,"Reflect",!0)},4603:function(e,t,r){var n=r(9781),i=r(7854),o=r(4705),a=r(9587),s=r(3070).f,c=r(8006).f,u=r(7850),l=r(7066),h=r(2999),f=r(1320),p=r(7293),d=r(9909).set,g=r(6340),m=r(5112)("match"),v=i.RegExp,y=v.prototype,_=/a/g,b=/a/g,A=new v(_)!==_,x=h.UNSUPPORTED_Y;if(n&&o("RegExp",!A||x||p((function(){return b[m]=!1,v(_)!=_||v(b)==b||"/a/i"!=v(_,"i")})))){for(var w=function(e,t){var r,n=this instanceof w,i=u(e),o=void 0===t;if(!n&&i&&e.constructor===w&&o)return e;A?i&&!o&&(e=e.source):e instanceof w&&(o&&(t=l.call(e)),e=e.source),x&&(r=!!t&&t.indexOf("y")>-1)&&(t=t.replace(/y/g,""));var s=a(A?new v(e,t):v(e,t),n?this:y,w);return x&&r&&d(s,{sticky:r}),s},S=function(e){e in w||s(w,e,{configurable:!0,get:function(){return v[e]},set:function(t){v[e]=t}})},E=c(v),C=0;E.length>C;)S(E[C++]);y.constructor=w,w.prototype=y,f(i,"RegExp",w)}g("RegExp")},4916:function(e,t,r){"use strict";var n=r(2109),i=r(2261);n({target:"RegExp",proto:!0,forced:/./.exec!==i},{exec:i})},2087:function(e,t,r){var n=r(9781),i=r(3070),o=r(7066),a=r(2999).UNSUPPORTED_Y;n&&("g"!=/./g.flags||a)&&i.f(RegExp.prototype,"flags",{configurable:!0,get:o})},8386:function(e,t,r){var n=r(9781),i=r(2999).UNSUPPORTED_Y,o=r(3070).f,a=r(9909).get,s=RegExp.prototype;n&&i&&o(RegExp.prototype,"sticky",{configurable:!0,get:function(){if(this!==s){if(this instanceof RegExp)return!!a(this).sticky;throw TypeError("Incompatible receiver, RegExp required")}}})},7601:function(e,t,r){"use strict";r(4916);var n,i,o=r(2109),a=r(111),s=(n=!1,(i=/[ac]/).exec=function(){return n=!0,/./.exec.apply(this,arguments)},!0===i.test("abc")&&n),c=/./.test;o({target:"RegExp",proto:!0,forced:!s},{test:function(e){if("function"!=typeof this.exec)return c.call(this,e);var t=this.exec(e);if(null!==t&&!a(t))throw new Error("RegExp exec method returned something other than an Object or null");return!!t}})},9714:function(e,t,r){"use strict";var n=r(1320),i=r(9670),o=r(7293),a=r(7066),s="toString",c=RegExp.prototype,u=c.toString,l=o((function(){return"/a/b"!=u.call({source:"a",flags:"b"})})),h=u.name!=s;(l||h)&&n(RegExp.prototype,s,(function(){var e=i(this),t=String(e.source),r=e.flags;return"/"+t+"/"+String(void 0===r&&e instanceof RegExp&&!("flags"in c)?a.call(e):r)}),{unsafe:!0})},189:function(e,t,r){"use strict";var n=r(7710),i=r(5631);e.exports=n("Set",(function(e){return function(){return e(this,arguments.length?arguments[0]:void 0)}}),i)},5218:function(e,t,r){"use strict";var n=r(2109),i=r(4230);n({target:"String",proto:!0,forced:r(3429)("anchor")},{anchor:function(e){return i(this,"a","name",e)}})},4475:function(e,t,r){"use strict";var n=r(2109),i=r(4230);n({target:"String",proto:!0,forced:r(3429)("big")},{big:function(){return i(this,"big","","")}})},7929:function(e,t,r){"use strict";var n=r(2109),i=r(4230);n({target:"String",proto:!0,forced:r(3429)("blink")},{blink:function(){return i(this,"blink","","")}})},915:function(e,t,r){"use strict";var n=r(2109),i=r(4230);n({target:"String",proto:!0,forced:r(3429)("bold")},{bold:function(){return i(this,"b","","")}})},9841:function(e,t,r){"use strict";var n=r(2109),i=r(8710).codeAt;n({target:"String",proto:!0},{codePointAt:function(e){return i(this,e)}})},7852:function(e,t,r){"use strict";var n,i=r(2109),o=r(1236).f,a=r(7466),s=r(3929),c=r(4488),u=r(4964),l=r(1913),h="".endsWith,f=Math.min,p=u("endsWith");i({target:"String",proto:!0,forced:!(!l&&!p&&(n=o(String.prototype,"endsWith"),n&&!n.writable)||p)},{endsWith:function(e){var t=String(c(this));s(e);var r=arguments.length>1?arguments[1]:void 0,n=a(t.length),i=void 0===r?n:f(a(r),n),o=String(e);return h?h.call(t,o,i):t.slice(i-o.length,i)===o}})},9253:function(e,t,r){"use strict";var n=r(2109),i=r(4230);n({target:"String",proto:!0,forced:r(3429)("fixed")},{fixed:function(){return i(this,"tt","","")}})},2125:function(e,t,r){"use strict";var n=r(2109),i=r(4230);n({target:"String",proto:!0,forced:r(3429)("fontcolor")},{fontcolor:function(e){return i(this,"font","color",e)}})},8830:function(e,t,r){"use strict";var n=r(2109),i=r(4230);n({target:"String",proto:!0,forced:r(3429)("fontsize")},{fontsize:function(e){return i(this,"font","size",e)}})},4953:function(e,t,r){var n=r(2109),i=r(1400),o=String.fromCharCode,a=String.fromCodePoint;n({target:"String",stat:!0,forced:!!a&&1!=a.length},{fromCodePoint:function(e){for(var t,r=[],n=arguments.length,a=0;n>a;){if(t=+arguments[a++],i(t,1114111)!==t)throw RangeError(t+" is not a valid code point");r.push(t<65536?o(t):o(55296+((t-=65536)>>10),t%1024+56320))}return r.join("")}})},2023:function(e,t,r){"use strict";var n=r(2109),i=r(3929),o=r(4488);n({target:"String",proto:!0,forced:!r(4964)("includes")},{includes:function(e){return!!~String(o(this)).indexOf(i(e),arguments.length>1?arguments[1]:void 0)}})},8734:function(e,t,r){"use strict";var n=r(2109),i=r(4230);n({target:"String",proto:!0,forced:r(3429)("italics")},{italics:function(){return i(this,"i","","")}})},8783:function(e,t,r){"use strict";var n=r(8710).charAt,i=r(9909),o=r(654),a="String Iterator",s=i.set,c=i.getterFor(a);o(String,"String",(function(e){s(this,{type:a,string:String(e),index:0})}),(function(){var e,t=c(this),r=t.string,i=t.index;return i>=r.length?{value:void 0,done:!0}:(e=n(r,i),t.index+=e.length,{value:e,done:!1})}))},9254:function(e,t,r){"use strict";var n=r(2109),i=r(4230);n({target:"String",proto:!0,forced:r(3429)("link")},{link:function(e){return i(this,"a","href",e)}})},6373:function(e,t,r){"use strict";var n=r(2109),i=r(4994),o=r(4488),a=r(7466),s=r(3099),c=r(9670),u=r(4326),l=r(7850),h=r(7066),f=r(8880),p=r(7293),d=r(5112),g=r(6707),m=r(1530),v=r(9909),y=r(1913),_=d("matchAll"),b="RegExp String Iterator",A=v.set,x=v.getterFor(b),w=RegExp.prototype,S=w.exec,E="".matchAll,C=!!E&&!p((function(){"a".matchAll(/./)})),k=i((function(e,t,r,n){A(this,{type:b,regexp:e,string:t,global:r,unicode:n,done:!1})}),"RegExp String",(function(){var e=x(this);if(e.done)return{value:void 0,done:!0};var t=e.regexp,r=e.string,n=function(e,t){var r,n=e.exec;if("function"==typeof n){if("object"!=typeof(r=n.call(e,t)))throw TypeError("Incorrect exec result");return r}return S.call(e,t)}(t,r);return null===n?{value:void 0,done:e.done=!0}:e.global?(""==String(n[0])&&(t.lastIndex=m(r,a(t.lastIndex),e.unicode)),{value:n,done:!1}):(e.done=!0,{value:n,done:!1})})),P=function(e){var t,r,n,i,o,s,u=c(this),l=String(e);return t=g(u,RegExp),void 0===(r=u.flags)&&u instanceof RegExp&&!("flags"in w)&&(r=h.call(u)),n=void 0===r?"":String(r),i=new t(t===RegExp?u.source:u,n),o=!!~n.indexOf("g"),s=!!~n.indexOf("u"),i.lastIndex=a(u.lastIndex),new k(i,l,o,s)};n({target:"String",proto:!0,forced:C},{matchAll:function(e){var t,r,n,i=o(this);if(null!=e){if(l(e)&&!~String(o("flags"in w?e.flags:h.call(e))).indexOf("g"))throw TypeError("`.matchAll` does not allow non-global regexes");if(C)return E.apply(i,arguments);if(void 0===(r=e[_])&&y&&"RegExp"==u(e)&&(r=P),null!=r)return s(r).call(e,i)}else if(C)return E.apply(i,arguments);return t=String(i),n=new RegExp(e,"g"),y?P.call(n,t):n[_](t)}}),y||_ in w||f(w,_,P)},4723:function(e,t,r){"use strict";var n=r(7007),i=r(9670),o=r(7466),a=r(4488),s=r(1530),c=r(7651);n("match",1,(function(e,t,r){return[function(t){var r=a(this),n=null==t?void 0:t[e];return void 0!==n?n.call(t,r):new RegExp(t)[e](String(r))},function(e){var n=r(t,e,this);if(n.done)return n.value;var a=i(e),u=String(this);if(!a.global)return c(a,u);var l=a.unicode;a.lastIndex=0;for(var h,f=[],p=0;null!==(h=c(a,u));){var d=String(h[0]);f[p]=d,""===d&&(a.lastIndex=s(u,o(a.lastIndex),l)),p++}return 0===p?null:f}]}))},6528:function(e,t,r){"use strict";var n=r(2109),i=r(6650).end;n({target:"String",proto:!0,forced:r(7061)},{padEnd:function(e){return i(this,e,arguments.length>1?arguments[1]:void 0)}})},3112:function(e,t,r){"use strict";var n=r(2109),i=r(6650).start;n({target:"String",proto:!0,forced:r(7061)},{padStart:function(e){return i(this,e,arguments.length>1?arguments[1]:void 0)}})},8992:function(e,t,r){var n=r(2109),i=r(5656),o=r(7466);n({target:"String",stat:!0},{raw:function(e){for(var t=i(e.raw),r=o(t.length),n=arguments.length,a=[],s=0;r>s;)a.push(String(t[s++])),s<n&&a.push(String(arguments[s]));return a.join("")}})},2481:function(e,t,r){r(2109)({target:"String",proto:!0},{repeat:r(8415)})},8757:function(e,t,r){"use strict";var n=r(2109),i=r(4488),o=r(7850),a=r(7066),s=r(647),c=r(5112),u=r(1913),l=c("replace"),h=RegExp.prototype,f=Math.max,p=function(e,t,r){return r>e.length?-1:""===t?r:e.indexOf(t,r)};n({target:"String",proto:!0},{replaceAll:function(e,t){var r,n,c,d,g,m,v,y,_=i(this),b=0,A=0,x="";if(null!=e){if((r=o(e))&&!~String(i("flags"in h?e.flags:a.call(e))).indexOf("g"))throw TypeError("`.replaceAll` does not allow non-global regexes");if(void 0!==(n=e[l]))return n.call(e,_,t);if(u&&r)return String(_).replace(e,t)}for(c=String(_),d=String(e),(g="function"==typeof t)||(t=String(t)),m=d.length,v=f(1,m),b=p(c,d,0);-1!==b;)y=g?String(t(d,b,c)):s(d,c,b,[],void 0,t),x+=c.slice(A,b)+y,A=b+m,b=p(c,d,b+v);return A<c.length&&(x+=c.slice(A)),x}})},5306:function(e,t,r){"use strict";var n=r(7007),i=r(9670),o=r(7466),a=r(9958),s=r(4488),c=r(1530),u=r(647),l=r(7651),h=Math.max,f=Math.min;n("replace",2,(function(e,t,r,n){var p=n.REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE,d=n.REPLACE_KEEPS_$0,g=p?"$":"$0";return[function(r,n){var i=s(this),o=null==r?void 0:r[e];return void 0!==o?o.call(r,i,n):t.call(String(i),r,n)},function(e,n){if(!p&&d||"string"==typeof n&&-1===n.indexOf(g)){var s=r(t,e,this,n);if(s.done)return s.value}var m=i(e),v=String(this),y="function"==typeof n;y||(n=String(n));var _=m.global;if(_){var b=m.unicode;m.lastIndex=0}for(var A=[];;){var x=l(m,v);if(null===x)break;if(A.push(x),!_)break;""===String(x[0])&&(m.lastIndex=c(v,o(m.lastIndex),b))}for(var w,S="",E=0,C=0;C<A.length;C++){x=A[C];for(var k=String(x[0]),P=h(f(a(x.index),v.length),0),R=[],T=1;T<x.length;T++)R.push(void 0===(w=x[T])?w:String(w));var O=x.groups;if(y){var L=[k].concat(R,P,v);void 0!==O&&L.push(O);var F=String(n.apply(void 0,L))}else F=u(k,v,P,R,O,n);P>=E&&(S+=v.slice(E,P)+F,E=P+k.length)}return S+v.slice(E)}]}))},4765:function(e,t,r){"use strict";var n=r(7007),i=r(9670),o=r(4488),a=r(1150),s=r(7651);n("search",1,(function(e,t,r){return[function(t){var r=o(this),n=null==t?void 0:t[e];return void 0!==n?n.call(t,r):new RegExp(t)[e](String(r))},function(e){var n=r(t,e,this);if(n.done)return n.value;var o=i(e),c=String(this),u=o.lastIndex;a(u,0)||(o.lastIndex=0);var l=s(o,c);return a(o.lastIndex,u)||(o.lastIndex=u),null===l?-1:l.index}]}))},7268:function(e,t,r){"use strict";var n=r(2109),i=r(4230);n({target:"String",proto:!0,forced:r(3429)("small")},{small:function(){return i(this,"small","","")}})},3123:function(e,t,r){"use strict";var n=r(7007),i=r(7850),o=r(9670),a=r(4488),s=r(6707),c=r(1530),u=r(7466),l=r(7651),h=r(2261),f=r(7293),p=[].push,d=Math.min,g=4294967295,m=!f((function(){return!RegExp(g,"y")}));n("split",2,(function(e,t,r){var n;return n="c"=="abbc".split(/(b)*/)[1]||4!="test".split(/(?:)/,-1).length||2!="ab".split(/(?:ab)*/).length||4!=".".split(/(.?)(.?)/).length||".".split(/()()/).length>1||"".split(/.?/).length?function(e,r){var n=String(a(this)),o=void 0===r?g:r>>>0;if(0===o)return[];if(void 0===e)return[n];if(!i(e))return t.call(n,e,o);for(var s,c,u,l=[],f=(e.ignoreCase?"i":"")+(e.multiline?"m":"")+(e.unicode?"u":"")+(e.sticky?"y":""),d=0,m=new RegExp(e.source,f+"g");(s=h.call(m,n))&&!((c=m.lastIndex)>d&&(l.push(n.slice(d,s.index)),s.length>1&&s.index<n.length&&p.apply(l,s.slice(1)),u=s[0].length,d=c,l.length>=o));)m.lastIndex===s.index&&m.lastIndex++;return d===n.length?!u&&m.test("")||l.push(""):l.push(n.slice(d)),l.length>o?l.slice(0,o):l}:"0".split(void 0,0).length?function(e,r){return void 0===e&&0===r?[]:t.call(this,e,r)}:t,[function(t,r){var i=a(this),o=null==t?void 0:t[e];return void 0!==o?o.call(t,i,r):n.call(String(i),t,r)},function(e,i){var a=r(n,e,this,i,n!==t);if(a.done)return a.value;var h=o(e),f=String(this),p=s(h,RegExp),v=h.unicode,y=(h.ignoreCase?"i":"")+(h.multiline?"m":"")+(h.unicode?"u":"")+(m?"y":"g"),_=new p(m?h:"^(?:"+h.source+")",y),b=void 0===i?g:i>>>0;if(0===b)return[];if(0===f.length)return null===l(_,f)?[f]:[];for(var A=0,x=0,w=[];x<f.length;){_.lastIndex=m?x:0;var S,E=l(_,m?f:f.slice(x));if(null===E||(S=d(u(_.lastIndex+(m?0:x)),f.length))===A)x=c(f,x,v);else{if(w.push(f.slice(A,x)),w.length===b)return w;for(var C=1;C<=E.length-1;C++)if(w.push(E[C]),w.length===b)return w;x=A=S}}return w.push(f.slice(A)),w}]}),!m)},6755:function(e,t,r){"use strict";var n,i=r(2109),o=r(1236).f,a=r(7466),s=r(3929),c=r(4488),u=r(4964),l=r(1913),h="".startsWith,f=Math.min,p=u("startsWith");i({target:"String",proto:!0,forced:!(!l&&!p&&(n=o(String.prototype,"startsWith"),n&&!n.writable)||p)},{startsWith:function(e){var t=String(c(this));s(e);var r=a(f(arguments.length>1?arguments[1]:void 0,t.length)),n=String(e);return h?h.call(t,n,r):t.slice(r,r+n.length)===n}})},7397:function(e,t,r){"use strict";var n=r(2109),i=r(4230);n({target:"String",proto:!0,forced:r(3429)("strike")},{strike:function(){return i(this,"strike","","")}})},86:function(e,t,r){"use strict";var n=r(2109),i=r(4230);n({target:"String",proto:!0,forced:r(3429)("sub")},{sub:function(){return i(this,"sub","","")}})},623:function(e,t,r){"use strict";var n=r(2109),i=r(4230);n({target:"String",proto:!0,forced:r(3429)("sup")},{sup:function(){return i(this,"sup","","")}})},8702:function(e,t,r){"use strict";var n=r(2109),i=r(3111).end,o=r(6091)("trimEnd"),a=o?function(){return i(this)}:"".trimEnd;n({target:"String",proto:!0,forced:o},{trimEnd:a,trimRight:a})},5674:function(e,t,r){"use strict";var n=r(2109),i=r(3111).start,o=r(6091)("trimStart"),a=o?function(){return i(this)}:"".trimStart;n({target:"String",proto:!0,forced:o},{trimStart:a,trimLeft:a})},3210:function(e,t,r){"use strict";var n=r(2109),i=r(3111).trim;n({target:"String",proto:!0,forced:r(6091)("trim")},{trim:function(){return i(this)}})},2443:function(e,t,r){r(7235)("asyncIterator")},1817:function(e,t,r){"use strict";var n=r(2109),i=r(9781),o=r(7854),a=r(6656),s=r(111),c=r(3070).f,u=r(9920),l=o.Symbol;if(i&&"function"==typeof l&&(!("description"in l.prototype)||void 0!==l().description)){var h={},f=function(){var e=arguments.length<1||void 0===arguments[0]?void 0:String(arguments[0]),t=this instanceof f?new l(e):void 0===e?l():l(e);return""===e&&(h[t]=!0),t};u(f,l);var p=f.prototype=l.prototype;p.constructor=f;var d=p.toString,g="Symbol(test)"==String(l("test")),m=/^Symbol\((.*)\)[^)]+$/;c(p,"description",{configurable:!0,get:function(){var e=s(this)?this.valueOf():this,t=d.call(e);if(a(h,e))return"";var r=g?t.slice(7,-1):t.replace(m,"$1");return""===r?void 0:r}}),n({global:!0,forced:!0},{Symbol:f})}},2401:function(e,t,r){r(7235)("hasInstance")},8722:function(e,t,r){r(7235)("isConcatSpreadable")},2165:function(e,t,r){r(7235)("iterator")},2526:function(e,t,r){"use strict";var n=r(2109),i=r(7854),o=r(5005),a=r(1913),s=r(9781),c=r(133),u=r(3307),l=r(7293),h=r(6656),f=r(3157),p=r(111),d=r(9670),g=r(7908),m=r(5656),v=r(7593),y=r(9114),_=r(30),b=r(1956),A=r(8006),x=r(1156),w=r(5181),S=r(1236),E=r(3070),C=r(5296),k=r(8880),P=r(1320),R=r(2309),T=r(6200),O=r(3501),L=r(9711),F=r(5112),I=r(6061),M=r(7235),N=r(8003),D=r(9909),j=r(2092).forEach,U=T("hidden"),W="Symbol",q=F("toPrimitive"),B=D.set,H=D.getterFor(W),G=Object.prototype,z=i.Symbol,Y=o("JSON","stringify"),V=S.f,$=E.f,X=x.f,K=C.f,J=R("symbols"),Q=R("op-symbols"),Z=R("string-to-symbol-registry"),ee=R("symbol-to-string-registry"),te=R("wks"),re=i.QObject,ne=!re||!re.prototype||!re.prototype.findChild,ie=s&&l((function(){return 7!=_($({},"a",{get:function(){return $(this,"a",{value:7}).a}})).a}))?function(e,t,r){var n=V(G,t);n&&delete G[t],$(e,t,r),n&&e!==G&&$(G,t,n)}:$,oe=function(e,t){var r=J[e]=_(z.prototype);return B(r,{type:W,tag:e,description:t}),s||(r.description=t),r},ae=u?function(e){return"symbol"==typeof e}:function(e){return Object(e)instanceof z},se=function(e,t,r){e===G&&se(Q,t,r),d(e);var n=v(t,!0);return d(r),h(J,n)?(r.enumerable?(h(e,U)&&e[U][n]&&(e[U][n]=!1),r=_(r,{enumerable:y(0,!1)})):(h(e,U)||$(e,U,y(1,{})),e[U][n]=!0),ie(e,n,r)):$(e,n,r)},ce=function(e,t){d(e);var r=m(t),n=b(r).concat(fe(r));return j(n,(function(t){s&&!ue.call(r,t)||se(e,t,r[t])})),e},ue=function(e){var t=v(e,!0),r=K.call(this,t);return!(this===G&&h(J,t)&&!h(Q,t))&&(!(r||!h(this,t)||!h(J,t)||h(this,U)&&this[U][t])||r)},le=function(e,t){var r=m(e),n=v(t,!0);if(r!==G||!h(J,n)||h(Q,n)){var i=V(r,n);return!i||!h(J,n)||h(r,U)&&r[U][n]||(i.enumerable=!0),i}},he=function(e){var t=X(m(e)),r=[];return j(t,(function(e){h(J,e)||h(O,e)||r.push(e)})),r},fe=function(e){var t=e===G,r=X(t?Q:m(e)),n=[];return j(r,(function(e){!h(J,e)||t&&!h(G,e)||n.push(J[e])})),n};c||(P((z=function(){if(this instanceof z)throw TypeError("Symbol is not a constructor");var e=arguments.length&&void 0!==arguments[0]?String(arguments[0]):void 0,t=L(e),r=function(e){this===G&&r.call(Q,e),h(this,U)&&h(this[U],t)&&(this[U][t]=!1),ie(this,t,y(1,e))};return s&&ne&&ie(G,t,{configurable:!0,set:r}),oe(t,e)}).prototype,"toString",(function(){return H(this).tag})),P(z,"withoutSetter",(function(e){return oe(L(e),e)})),C.f=ue,E.f=se,S.f=le,A.f=x.f=he,w.f=fe,I.f=function(e){return oe(F(e),e)},s&&($(z.prototype,"description",{configurable:!0,get:function(){return H(this).description}}),a||P(G,"propertyIsEnumerable",ue,{unsafe:!0}))),n({global:!0,wrap:!0,forced:!c,sham:!c},{Symbol:z}),j(b(te),(function(e){M(e)})),n({target:W,stat:!0,forced:!c},{for:function(e){var t=String(e);if(h(Z,t))return Z[t];var r=z(t);return Z[t]=r,ee[r]=t,r},keyFor:function(e){if(!ae(e))throw TypeError(e+" is not a symbol");if(h(ee,e))return ee[e]},useSetter:function(){ne=!0},useSimple:function(){ne=!1}}),n({target:"Object",stat:!0,forced:!c,sham:!s},{create:function(e,t){return void 0===t?_(e):ce(_(e),t)},defineProperty:se,defineProperties:ce,getOwnPropertyDescriptor:le}),n({target:"Object",stat:!0,forced:!c},{getOwnPropertyNames:he,getOwnPropertySymbols:fe}),n({target:"Object",stat:!0,forced:l((function(){w.f(1)}))},{getOwnPropertySymbols:function(e){return w.f(g(e))}}),Y&&n({target:"JSON",stat:!0,forced:!c||l((function(){var e=z();return"[null]"!=Y([e])||"{}"!=Y({a:e})||"{}"!=Y(Object(e))}))},{stringify:function(e,t,r){for(var n,i=[e],o=1;arguments.length>o;)i.push(arguments[o++]);if(n=t,(p(t)||void 0!==e)&&!ae(e))return f(t)||(t=function(e,t){if("function"==typeof n&&(t=n.call(this,e,t)),!ae(t))return t}),i[1]=t,Y.apply(null,i)}}),z.prototype[q]||k(z.prototype,q,z.prototype.valueOf),N(z,W),O[U]=!0},6066:function(e,t,r){r(7235)("matchAll")},9007:function(e,t,r){r(7235)("match")},3510:function(e,t,r){r(7235)("replace")},1840:function(e,t,r){r(7235)("search")},6982:function(e,t,r){r(7235)("species")},2159:function(e,t,r){r(7235)("split")},6649:function(e,t,r){r(7235)("toPrimitive")},9341:function(e,t,r){r(7235)("toStringTag")},543:function(e,t,r){r(7235)("unscopables")},2990:function(e,t,r){"use strict";var n=r(260),i=r(1048),o=n.aTypedArray;(0,n.exportTypedArrayMethod)("copyWithin",(function(e,t){return i.call(o(this),e,t,arguments.length>2?arguments[2]:void 0)}))},8927:function(e,t,r){"use strict";var n=r(260),i=r(2092).every,o=n.aTypedArray;(0,n.exportTypedArrayMethod)("every",(function(e){return i(o(this),e,arguments.length>1?arguments[1]:void 0)}))},3105:function(e,t,r){"use strict";var n=r(260),i=r(1285),o=n.aTypedArray;(0,n.exportTypedArrayMethod)("fill",(function(e){return i.apply(o(this),arguments)}))},5035:function(e,t,r){"use strict";var n=r(260),i=r(2092).filter,o=r(6707),a=n.aTypedArray,s=n.aTypedArrayConstructor;(0,n.exportTypedArrayMethod)("filter",(function(e){for(var t=i(a(this),e,arguments.length>1?arguments[1]:void 0),r=o(this,this.constructor),n=0,c=t.length,u=new(s(r))(c);c>n;)u[n]=t[n++];return u}))},7174:function(e,t,r){"use strict";var n=r(260),i=r(2092).findIndex,o=n.aTypedArray;(0,n.exportTypedArrayMethod)("findIndex",(function(e){return i(o(this),e,arguments.length>1?arguments[1]:void 0)}))},4345:function(e,t,r){"use strict";var n=r(260),i=r(2092).find,o=n.aTypedArray;(0,n.exportTypedArrayMethod)("find",(function(e){return i(o(this),e,arguments.length>1?arguments[1]:void 0)}))},4197:function(e,t,r){r(9843)("Float32",(function(e){return function(t,r,n){return e(this,t,r,n)}}))},6495:function(e,t,r){r(9843)("Float64",(function(e){return function(t,r,n){return e(this,t,r,n)}}))},2846:function(e,t,r){"use strict";var n=r(260),i=r(2092).forEach,o=n.aTypedArray;(0,n.exportTypedArrayMethod)("forEach",(function(e){i(o(this),e,arguments.length>1?arguments[1]:void 0)}))},8145:function(e,t,r){"use strict";var n=r(3832);(0,r(260).exportTypedArrayStaticMethod)("from",r(7321),n)},4731:function(e,t,r){"use strict";var n=r(260),i=r(1318).includes,o=n.aTypedArray;(0,n.exportTypedArrayMethod)("includes",(function(e){return i(o(this),e,arguments.length>1?arguments[1]:void 0)}))},7209:function(e,t,r){"use strict";var n=r(260),i=r(1318).indexOf,o=n.aTypedArray;(0,n.exportTypedArrayMethod)("indexOf",(function(e){return i(o(this),e,arguments.length>1?arguments[1]:void 0)}))},5109:function(e,t,r){r(9843)("Int16",(function(e){return function(t,r,n){return e(this,t,r,n)}}))},5125:function(e,t,r){r(9843)("Int32",(function(e){return function(t,r,n){return e(this,t,r,n)}}))},7145:function(e,t,r){r(9843)("Int8",(function(e){return function(t,r,n){return e(this,t,r,n)}}))},6319:function(e,t,r){"use strict";var n=r(7854),i=r(260),o=r(6992),a=r(5112)("iterator"),s=n.Uint8Array,c=o.values,u=o.keys,l=o.entries,h=i.aTypedArray,f=i.exportTypedArrayMethod,p=s&&s.prototype[a],d=!!p&&("values"==p.name||null==p.name),g=function(){return c.call(h(this))};f("entries",(function(){return l.call(h(this))})),f("keys",(function(){return u.call(h(this))})),f("values",g,!d),f(a,g,!d)},8867:function(e,t,r){"use strict";var n=r(260),i=n.aTypedArray,o=n.exportTypedArrayMethod,a=[].join;o("join",(function(e){return a.apply(i(this),arguments)}))},7789:function(e,t,r){"use strict";var n=r(260),i=r(6583),o=n.aTypedArray;(0,n.exportTypedArrayMethod)("lastIndexOf",(function(e){return i.apply(o(this),arguments)}))},3739:function(e,t,r){"use strict";var n=r(260),i=r(2092).map,o=r(6707),a=n.aTypedArray,s=n.aTypedArrayConstructor;(0,n.exportTypedArrayMethod)("map",(function(e){return i(a(this),e,arguments.length>1?arguments[1]:void 0,(function(e,t){return new(s(o(e,e.constructor)))(t)}))}))},5206:function(e,t,r){"use strict";var n=r(260),i=r(3832),o=n.aTypedArrayConstructor;(0,n.exportTypedArrayStaticMethod)("of",(function(){for(var e=0,t=arguments.length,r=new(o(this))(t);t>e;)r[e]=arguments[e++];return r}),i)},4483:function(e,t,r){"use strict";var n=r(260),i=r(3671).right,o=n.aTypedArray;(0,n.exportTypedArrayMethod)("reduceRight",(function(e){return i(o(this),e,arguments.length,arguments.length>1?arguments[1]:void 0)}))},9368:function(e,t,r){"use strict";var n=r(260),i=r(3671).left,o=n.aTypedArray;(0,n.exportTypedArrayMethod)("reduce",(function(e){return i(o(this),e,arguments.length,arguments.length>1?arguments[1]:void 0)}))},2056:function(e,t,r){"use strict";var n=r(260),i=n.aTypedArray,o=n.exportTypedArrayMethod,a=Math.floor;o("reverse",(function(){for(var e,t=this,r=i(t).length,n=a(r/2),o=0;o<n;)e=t[o],t[o++]=t[--r],t[r]=e;return t}))},3462:function(e,t,r){"use strict";var n=r(260),i=r(7466),o=r(4590),a=r(7908),s=r(7293),c=n.aTypedArray;(0,n.exportTypedArrayMethod)("set",(function(e){c(this);var t=o(arguments.length>1?arguments[1]:void 0,1),r=this.length,n=a(e),s=i(n.length),u=0;if(s+t>r)throw RangeError("Wrong length");for(;u<s;)this[t+u]=n[u++]}),s((function(){new Int8Array(1).set({})})))},678:function(e,t,r){"use strict";var n=r(260),i=r(6707),o=r(7293),a=n.aTypedArray,s=n.aTypedArrayConstructor,c=n.exportTypedArrayMethod,u=[].slice;c("slice",(function(e,t){for(var r=u.call(a(this),e,t),n=i(this,this.constructor),o=0,c=r.length,l=new(s(n))(c);c>o;)l[o]=r[o++];return l}),o((function(){new Int8Array(1).slice()})))},7462:function(e,t,r){"use strict";var n=r(260),i=r(2092).some,o=n.aTypedArray;(0,n.exportTypedArrayMethod)("some",(function(e){return i(o(this),e,arguments.length>1?arguments[1]:void 0)}))},3824:function(e,t,r){"use strict";var n=r(260),i=n.aTypedArray,o=n.exportTypedArrayMethod,a=[].sort;o("sort",(function(e){return a.call(i(this),e)}))},5021:function(e,t,r){"use strict";var n=r(260),i=r(7466),o=r(1400),a=r(6707),s=n.aTypedArray;(0,n.exportTypedArrayMethod)("subarray",(function(e,t){var r=s(this),n=r.length,c=o(e,n);return new(a(r,r.constructor))(r.buffer,r.byteOffset+c*r.BYTES_PER_ELEMENT,i((void 0===t?n:o(t,n))-c))}))},2974:function(e,t,r){"use strict";var n=r(7854),i=r(260),o=r(7293),a=n.Int8Array,s=i.aTypedArray,c=i.exportTypedArrayMethod,u=[].toLocaleString,l=[].slice,h=!!a&&o((function(){u.call(new a(1))}));c("toLocaleString",(function(){return u.apply(h?l.call(s(this)):s(this),arguments)}),o((function(){return[1,2].toLocaleString()!=new a([1,2]).toLocaleString()}))||!o((function(){a.prototype.toLocaleString.call([1,2])})))},5016:function(e,t,r){"use strict";var n=r(260).exportTypedArrayMethod,i=r(7293),o=r(7854).Uint8Array,a=o&&o.prototype||{},s=[].toString,c=[].join;i((function(){s.call({})}))&&(s=function(){return c.call(this)});var u=a.toString!=s;n("toString",s,u)},8255:function(e,t,r){r(9843)("Uint16",(function(e){return function(t,r,n){return e(this,t,r,n)}}))},9135:function(e,t,r){r(9843)("Uint32",(function(e){return function(t,r,n){return e(this,t,r,n)}}))},2472:function(e,t,r){r(9843)("Uint8",(function(e){return function(t,r,n){return e(this,t,r,n)}}))},9743:function(e,t,r){r(9843)("Uint8",(function(e){return function(t,r,n){return e(this,t,r,n)}}),!0)},4129:function(e,t,r){"use strict";var n,i=r(7854),o=r(2248),a=r(2423),s=r(7710),c=r(9320),u=r(111),l=r(9909).enforce,h=r(8536),f=!i.ActiveXObject&&"ActiveXObject"in i,p=Object.isExtensible,d=function(e){return function(){return e(this,arguments.length?arguments[0]:void 0)}},g=e.exports=s("WeakMap",d,c);if(h&&f){n=c.getConstructor(d,"WeakMap",!0),a.REQUIRED=!0;var m=g.prototype,v=m.delete,y=m.has,_=m.get,b=m.set;o(m,{delete:function(e){if(u(e)&&!p(e)){var t=l(this);return t.frozen||(t.frozen=new n),v.call(this,e)||t.frozen.delete(e)}return v.call(this,e)},has:function(e){if(u(e)&&!p(e)){var t=l(this);return t.frozen||(t.frozen=new n),y.call(this,e)||t.frozen.has(e)}return y.call(this,e)},get:function(e){if(u(e)&&!p(e)){var t=l(this);return t.frozen||(t.frozen=new n),y.call(this,e)?_.call(this,e):t.frozen.get(e)}return _.call(this,e)},set:function(e,t){if(u(e)&&!p(e)){var r=l(this);r.frozen||(r.frozen=new n),y.call(this,e)?b.call(this,e,t):r.frozen.set(e,t)}else b.call(this,e,t);return this}})}},8478:function(e,t,r){"use strict";r(7710)("WeakSet",(function(e){return function(){return e(this,arguments.length?arguments[0]:void 0)}}),r(9320))},4747:function(e,t,r){var n=r(7854),i=r(8324),o=r(8533),a=r(8880);for(var s in i){var c=n[s],u=c&&c.prototype;if(u&&u.forEach!==o)try{a(u,"forEach",o)}catch(e){u.forEach=o}}},3948:function(e,t,r){var n=r(7854),i=r(8324),o=r(6992),a=r(8880),s=r(5112),c=s("iterator"),u=s("toStringTag"),l=o.values;for(var h in i){var f=n[h],p=f&&f.prototype;if(p){if(p[c]!==l)try{a(p,c,l)}catch(e){p[c]=l}if(p[u]||a(p,u,h),i[h])for(var d in o)if(p[d]!==o[d])try{a(p,d,o[d])}catch(e){p[d]=o[d]}}}},4633:function(e,t,r){var n=r(2109),i=r(7854),o=r(261);n({global:!0,bind:!0,enumerable:!0,forced:!i.setImmediate||!i.clearImmediate},{setImmediate:o.set,clearImmediate:o.clear})},5844:function(e,t,r){var n=r(2109),i=r(7854),o=r(5948),a=r(5268),s=i.process;n({global:!0,enumerable:!0,noTargetGet:!0},{queueMicrotask:function(e){var t=a&&s.domain;o(t?t.bind(e):e)}})},2564:function(e,t,r){var n=r(2109),i=r(7854),o=r(8113),a=[].slice,s=function(e){return function(t,r){var n=arguments.length>2,i=n?a.call(arguments,2):void 0;return e(n?function(){("function"==typeof t?t:Function(t)).apply(this,i)}:t,r)}};n({global:!0,bind:!0,forced:/MSIE .\./.test(o)},{setTimeout:s(i.setTimeout),setInterval:s(i.setInterval)})},1637:function(e,t,r){"use strict";r(6992);var n=r(2109),i=r(5005),o=r(590),a=r(1320),s=r(2248),c=r(8003),u=r(4994),l=r(9909),h=r(5787),f=r(6656),p=r(9974),d=r(648),g=r(9670),m=r(111),v=r(30),y=r(9114),_=r(8554),b=r(1246),A=r(5112),x=i("fetch"),w=i("Headers"),S=A("iterator"),E="URLSearchParams",C="URLSearchParamsIterator",k=l.set,P=l.getterFor(E),R=l.getterFor(C),T=/\+/g,O=Array(4),L=function(e){return O[e-1]||(O[e-1]=RegExp("((?:%[\\da-f]{2}){"+e+"})","gi"))},F=function(e){try{return decodeURIComponent(e)}catch(t){return e}},I=function(e){var t=e.replace(T," "),r=4;try{return decodeURIComponent(t)}catch(e){for(;r;)t=t.replace(L(r--),F);return t}},M=/[!'()~]|%20/g,N={"!":"%21","'":"%27","(":"%28",")":"%29","~":"%7E","%20":"+"},D=function(e){return N[e]},j=function(e){return encodeURIComponent(e).replace(M,D)},U=function(e,t){if(t)for(var r,n,i=t.split("&"),o=0;o<i.length;)(r=i[o++]).length&&(n=r.split("="),e.push({key:I(n.shift()),value:I(n.join("="))}))},W=function(e){this.entries.length=0,U(this.entries,e)},q=function(e,t){if(e<t)throw TypeError("Not enough arguments")},B=u((function(e,t){k(this,{type:C,iterator:_(P(e).entries),kind:t})}),"Iterator",(function(){var e=R(this),t=e.kind,r=e.iterator.next(),n=r.value;return r.done||(r.value="keys"===t?n.key:"values"===t?n.value:[n.key,n.value]),r})),H=function(){h(this,H,E);var e,t,r,n,i,o,a,s,c,u=arguments.length>0?arguments[0]:void 0,l=this,p=[];if(k(l,{type:E,entries:p,updateURL:function(){},updateSearchParams:W}),void 0!==u)if(m(u))if("function"==typeof(e=b(u)))for(r=(t=e.call(u)).next;!(n=r.call(t)).done;){if((a=(o=(i=_(g(n.value))).next).call(i)).done||(s=o.call(i)).done||!o.call(i).done)throw TypeError("Expected sequence with length 2");p.push({key:a.value+"",value:s.value+""})}else for(c in u)f(u,c)&&p.push({key:c,value:u[c]+""});else U(p,"string"==typeof u?"?"===u.charAt(0)?u.slice(1):u:u+"")},G=H.prototype;s(G,{append:function(e,t){q(arguments.length,2);var r=P(this);r.entries.push({key:e+"",value:t+""}),r.updateURL()},delete:function(e){q(arguments.length,1);for(var t=P(this),r=t.entries,n=e+"",i=0;i<r.length;)r[i].key===n?r.splice(i,1):i++;t.updateURL()},get:function(e){q(arguments.length,1);for(var t=P(this).entries,r=e+"",n=0;n<t.length;n++)if(t[n].key===r)return t[n].value;return null},getAll:function(e){q(arguments.length,1);for(var t=P(this).entries,r=e+"",n=[],i=0;i<t.length;i++)t[i].key===r&&n.push(t[i].value);return n},has:function(e){q(arguments.length,1);for(var t=P(this).entries,r=e+"",n=0;n<t.length;)if(t[n++].key===r)return!0;return!1},set:function(e,t){q(arguments.length,1);for(var r,n=P(this),i=n.entries,o=!1,a=e+"",s=t+"",c=0;c<i.length;c++)(r=i[c]).key===a&&(o?i.splice(c--,1):(o=!0,r.value=s));o||i.push({key:a,value:s}),n.updateURL()},sort:function(){var e,t,r,n=P(this),i=n.entries,o=i.slice();for(i.length=0,r=0;r<o.length;r++){for(e=o[r],t=0;t<r;t++)if(i[t].key>e.key){i.splice(t,0,e);break}t===r&&i.push(e)}n.updateURL()},forEach:function(e){for(var t,r=P(this).entries,n=p(e,arguments.length>1?arguments[1]:void 0,3),i=0;i<r.length;)n((t=r[i++]).value,t.key,this)},keys:function(){return new B(this,"keys")},values:function(){return new B(this,"values")},entries:function(){return new B(this,"entries")}},{enumerable:!0}),a(G,S,G.entries),a(G,"toString",(function(){for(var e,t=P(this).entries,r=[],n=0;n<t.length;)e=t[n++],r.push(j(e.key)+"="+j(e.value));return r.join("&")}),{enumerable:!0}),c(H,E),n({global:!0,forced:!o},{URLSearchParams:H}),o||"function"!=typeof x||"function"!=typeof w||n({global:!0,enumerable:!0,forced:!0},{fetch:function(e){var t,r,n,i=[e];return arguments.length>1&&(m(t=arguments[1])&&(r=t.body,d(r)===E&&((n=t.headers?new w(t.headers):new w).has("content-type")||n.set("content-type","application/x-www-form-urlencoded;charset=UTF-8"),t=v(t,{body:y(0,String(r)),headers:y(0,n)}))),i.push(t)),x.apply(this,i)}}),e.exports={URLSearchParams:H,getState:P}},285:function(e,t,r){"use strict";r(8783);var n,i=r(2109),o=r(9781),a=r(590),s=r(7854),c=r(6048),u=r(1320),l=r(5787),h=r(6656),f=r(1574),p=r(8457),d=r(8710).codeAt,g=r(3197),m=r(8003),v=r(1637),y=r(9909),_=s.URL,b=v.URLSearchParams,A=v.getState,x=y.set,w=y.getterFor("URL"),S=Math.floor,E=Math.pow,C="Invalid scheme",k="Invalid host",P="Invalid port",R=/[A-Za-z]/,T=/[\d+-.A-Za-z]/,O=/\d/,L=/^(0x|0X)/,F=/^[0-7]+$/,I=/^\d+$/,M=/^[\dA-Fa-f]+$/,N=/[\u0000\u0009\u000A\u000D #%/:?@[\\]]/,D=/[\u0000\u0009\u000A\u000D #/:?@[\\]]/,j=/^[\u0000-\u001F ]+|[\u0000-\u001F ]+$/g,U=/[\u0009\u000A\u000D]/g,W=function(e,t){var r,n,i;if("["==t.charAt(0)){if("]"!=t.charAt(t.length-1))return k;if(!(r=B(t.slice(1,-1))))return k;e.host=r}else if(K(e)){if(t=g(t),N.test(t))return k;if(null===(r=q(t)))return k;e.host=r}else{if(D.test(t))return k;for(r="",n=p(t),i=0;i<n.length;i++)r+=$(n[i],G);e.host=r}},q=function(e){var t,r,n,i,o,a,s,c=e.split(".");if(c.length&&""==c[c.length-1]&&c.pop(),(t=c.length)>4)return e;for(r=[],n=0;n<t;n++){if(""==(i=c[n]))return e;if(o=10,i.length>1&&"0"==i.charAt(0)&&(o=L.test(i)?16:8,i=i.slice(8==o?1:2)),""===i)a=0;else{if(!(10==o?I:8==o?F:M).test(i))return e;a=parseInt(i,o)}r.push(a)}for(n=0;n<t;n++)if(a=r[n],n==t-1){if(a>=E(256,5-t))return null}else if(a>255)return null;for(s=r.pop(),n=0;n<r.length;n++)s+=r[n]*E(256,3-n);return s},B=function(e){var t,r,n,i,o,a,s,c=[0,0,0,0,0,0,0,0],u=0,l=null,h=0,f=function(){return e.charAt(h)};if(":"==f()){if(":"!=e.charAt(1))return;h+=2,l=++u}for(;f();){if(8==u)return;if(":"!=f()){for(t=r=0;r<4&&M.test(f());)t=16*t+parseInt(f(),16),h++,r++;if("."==f()){if(0==r)return;if(h-=r,u>6)return;for(n=0;f();){if(i=null,n>0){if(!("."==f()&&n<4))return;h++}if(!O.test(f()))return;for(;O.test(f());){if(o=parseInt(f(),10),null===i)i=o;else{if(0==i)return;i=10*i+o}if(i>255)return;h++}c[u]=256*c[u]+i,2!=++n&&4!=n||u++}if(4!=n)return;break}if(":"==f()){if(h++,!f())return}else if(f())return;c[u++]=t}else{if(null!==l)return;h++,l=++u}}if(null!==l)for(a=u-l,u=7;0!=u&&a>0;)s=c[u],c[u--]=c[l+a-1],c[l+--a]=s;else if(8!=u)return;return c},H=function(e){var t,r,n,i;if("number"==typeof e){for(t=[],r=0;r<4;r++)t.unshift(e%256),e=S(e/256);return t.join(".")}if("object"==typeof e){for(t="",n=function(e){for(var t=null,r=1,n=null,i=0,o=0;o<8;o++)0!==e[o]?(i>r&&(t=n,r=i),n=null,i=0):(null===n&&(n=o),++i);return i>r&&(t=n,r=i),t}(e),r=0;r<8;r++)i&&0===e[r]||(i&&(i=!1),n===r?(t+=r?":":"::",i=!0):(t+=e[r].toString(16),r<7&&(t+=":")));return"["+t+"]"}return e},G={},z=f({},G,{" ":1,'"':1,"<":1,">":1,"`":1}),Y=f({},z,{"#":1,"?":1,"{":1,"}":1}),V=f({},Y,{"/":1,":":1,";":1,"=":1,"@":1,"[":1,"\\":1,"]":1,"^":1,"|":1}),$=function(e,t){var r=d(e,0);return r>32&&r<127&&!h(t,e)?e:encodeURIComponent(e)},X={ftp:21,file:null,http:80,https:443,ws:80,wss:443},K=function(e){return h(X,e.scheme)},J=function(e){return""!=e.username||""!=e.password},Q=function(e){return!e.host||e.cannotBeABaseURL||"file"==e.scheme},Z=function(e,t){var r;return 2==e.length&&R.test(e.charAt(0))&&(":"==(r=e.charAt(1))||!t&&"|"==r)},ee=function(e){var t;return e.length>1&&Z(e.slice(0,2))&&(2==e.length||"/"===(t=e.charAt(2))||"\\"===t||"?"===t||"#"===t)},te=function(e){var t=e.path,r=t.length;!r||"file"==e.scheme&&1==r&&Z(t[0],!0)||t.pop()},re=function(e){return"."===e||"%2e"===e.toLowerCase()},ne={},ie={},oe={},ae={},se={},ce={},ue={},le={},he={},fe={},pe={},de={},ge={},me={},ve={},ye={},_e={},be={},Ae={},xe={},we={},Se=function(e,t,r,i){var o,a,s,c,u,l=r||ne,f=0,d="",g=!1,m=!1,v=!1;for(r||(e.scheme="",e.username="",e.password="",e.host=null,e.port=null,e.path=[],e.query=null,e.fragment=null,e.cannotBeABaseURL=!1,t=t.replace(j,"")),t=t.replace(U,""),o=p(t);f<=o.length;){switch(a=o[f],l){case ne:if(!a||!R.test(a)){if(r)return C;l=oe;continue}d+=a.toLowerCase(),l=ie;break;case ie:if(a&&(T.test(a)||"+"==a||"-"==a||"."==a))d+=a.toLowerCase();else{if(":"!=a){if(r)return C;d="",l=oe,f=0;continue}if(r&&(K(e)!=h(X,d)||"file"==d&&(J(e)||null!==e.port)||"file"==e.scheme&&!e.host))return;if(e.scheme=d,r)return void(K(e)&&X[e.scheme]==e.port&&(e.port=null));d="","file"==e.scheme?l=me:K(e)&&i&&i.scheme==e.scheme?l=ae:K(e)?l=le:"/"==o[f+1]?(l=se,f++):(e.cannotBeABaseURL=!0,e.path.push(""),l=Ae)}break;case oe:if(!i||i.cannotBeABaseURL&&"#"!=a)return C;if(i.cannotBeABaseURL&&"#"==a){e.scheme=i.scheme,e.path=i.path.slice(),e.query=i.query,e.fragment="",e.cannotBeABaseURL=!0,l=we;break}l="file"==i.scheme?me:ce;continue;case ae:if("/"!=a||"/"!=o[f+1]){l=ce;continue}l=he,f++;break;case se:if("/"==a){l=fe;break}l=be;continue;case ce:if(e.scheme=i.scheme,a==n)e.username=i.username,e.password=i.password,e.host=i.host,e.port=i.port,e.path=i.path.slice(),e.query=i.query;else if("/"==a||"\\"==a&&K(e))l=ue;else if("?"==a)e.username=i.username,e.password=i.password,e.host=i.host,e.port=i.port,e.path=i.path.slice(),e.query="",l=xe;else{if("#"!=a){e.username=i.username,e.password=i.password,e.host=i.host,e.port=i.port,e.path=i.path.slice(),e.path.pop(),l=be;continue}e.username=i.username,e.password=i.password,e.host=i.host,e.port=i.port,e.path=i.path.slice(),e.query=i.query,e.fragment="",l=we}break;case ue:if(!K(e)||"/"!=a&&"\\"!=a){if("/"!=a){e.username=i.username,e.password=i.password,e.host=i.host,e.port=i.port,l=be;continue}l=fe}else l=he;break;case le:if(l=he,"/"!=a||"/"!=d.charAt(f+1))continue;f++;break;case he:if("/"!=a&&"\\"!=a){l=fe;continue}break;case fe:if("@"==a){g&&(d="%40"+d),g=!0,s=p(d);for(var y=0;y<s.length;y++){var _=s[y];if(":"!=_||v){var b=$(_,V);v?e.password+=b:e.username+=b}else v=!0}d=""}else if(a==n||"/"==a||"?"==a||"#"==a||"\\"==a&&K(e)){if(g&&""==d)return"Invalid authority";f-=p(d).length+1,d="",l=pe}else d+=a;break;case pe:case de:if(r&&"file"==e.scheme){l=ye;continue}if(":"!=a||m){if(a==n||"/"==a||"?"==a||"#"==a||"\\"==a&&K(e)){if(K(e)&&""==d)return k;if(r&&""==d&&(J(e)||null!==e.port))return;if(c=W(e,d))return c;if(d="",l=_e,r)return;continue}"["==a?m=!0:"]"==a&&(m=!1),d+=a}else{if(""==d)return k;if(c=W(e,d))return c;if(d="",l=ge,r==de)return}break;case ge:if(!O.test(a)){if(a==n||"/"==a||"?"==a||"#"==a||"\\"==a&&K(e)||r){if(""!=d){var A=parseInt(d,10);if(A>65535)return P;e.port=K(e)&&A===X[e.scheme]?null:A,d=""}if(r)return;l=_e;continue}return P}d+=a;break;case me:if(e.scheme="file","/"==a||"\\"==a)l=ve;else{if(!i||"file"!=i.scheme){l=be;continue}if(a==n)e.host=i.host,e.path=i.path.slice(),e.query=i.query;else if("?"==a)e.host=i.host,e.path=i.path.slice(),e.query="",l=xe;else{if("#"!=a){ee(o.slice(f).join(""))||(e.host=i.host,e.path=i.path.slice(),te(e)),l=be;continue}e.host=i.host,e.path=i.path.slice(),e.query=i.query,e.fragment="",l=we}}break;case ve:if("/"==a||"\\"==a){l=ye;break}i&&"file"==i.scheme&&!ee(o.slice(f).join(""))&&(Z(i.path[0],!0)?e.path.push(i.path[0]):e.host=i.host),l=be;continue;case ye:if(a==n||"/"==a||"\\"==a||"?"==a||"#"==a){if(!r&&Z(d))l=be;else if(""==d){if(e.host="",r)return;l=_e}else{if(c=W(e,d))return c;if("localhost"==e.host&&(e.host=""),r)return;d="",l=_e}continue}d+=a;break;case _e:if(K(e)){if(l=be,"/"!=a&&"\\"!=a)continue}else if(r||"?"!=a)if(r||"#"!=a){if(a!=n&&(l=be,"/"!=a))continue}else e.fragment="",l=we;else e.query="",l=xe;break;case be:if(a==n||"/"==a||"\\"==a&&K(e)||!r&&("?"==a||"#"==a)){if(".."===(u=(u=d).toLowerCase())||"%2e."===u||".%2e"===u||"%2e%2e"===u?(te(e),"/"==a||"\\"==a&&K(e)||e.path.push("")):re(d)?"/"==a||"\\"==a&&K(e)||e.path.push(""):("file"==e.scheme&&!e.path.length&&Z(d)&&(e.host&&(e.host=""),d=d.charAt(0)+":"),e.path.push(d)),d="","file"==e.scheme&&(a==n||"?"==a||"#"==a))for(;e.path.length>1&&""===e.path[0];)e.path.shift();"?"==a?(e.query="",l=xe):"#"==a&&(e.fragment="",l=we)}else d+=$(a,Y);break;case Ae:"?"==a?(e.query="",l=xe):"#"==a?(e.fragment="",l=we):a!=n&&(e.path[0]+=$(a,G));break;case xe:r||"#"!=a?a!=n&&("'"==a&&K(e)?e.query+="%27":e.query+="#"==a?"%23":$(a,G)):(e.fragment="",l=we);break;case we:a!=n&&(e.fragment+=$(a,z))}f++}},Ee=function(e){var t,r,n=l(this,Ee,"URL"),i=arguments.length>1?arguments[1]:void 0,a=String(e),s=x(n,{type:"URL"});if(void 0!==i)if(i instanceof Ee)t=w(i);else if(r=Se(t={},String(i)))throw TypeError(r);if(r=Se(s,a,null,t))throw TypeError(r);var c=s.searchParams=new b,u=A(c);u.updateSearchParams(s.query),u.updateURL=function(){s.query=String(c)||null},o||(n.href=ke.call(n),n.origin=Pe.call(n),n.protocol=Re.call(n),n.username=Te.call(n),n.password=Oe.call(n),n.host=Le.call(n),n.hostname=Fe.call(n),n.port=Ie.call(n),n.pathname=Me.call(n),n.search=Ne.call(n),n.searchParams=De.call(n),n.hash=je.call(n))},Ce=Ee.prototype,ke=function(){var e=w(this),t=e.scheme,r=e.username,n=e.password,i=e.host,o=e.port,a=e.path,s=e.query,c=e.fragment,u=t+":";return null!==i?(u+="//",J(e)&&(u+=r+(n?":"+n:"")+"@"),u+=H(i),null!==o&&(u+=":"+o)):"file"==t&&(u+="//"),u+=e.cannotBeABaseURL?a[0]:a.length?"/"+a.join("/"):"",null!==s&&(u+="?"+s),null!==c&&(u+="#"+c),u},Pe=function(){var e=w(this),t=e.scheme,r=e.port;if("blob"==t)try{return new URL(t.path[0]).origin}catch(e){return"null"}return"file"!=t&&K(e)?t+"://"+H(e.host)+(null!==r?":"+r:""):"null"},Re=function(){return w(this).scheme+":"},Te=function(){return w(this).username},Oe=function(){return w(this).password},Le=function(){var e=w(this),t=e.host,r=e.port;return null===t?"":null===r?H(t):H(t)+":"+r},Fe=function(){var e=w(this).host;return null===e?"":H(e)},Ie=function(){var e=w(this).port;return null===e?"":String(e)},Me=function(){var e=w(this),t=e.path;return e.cannotBeABaseURL?t[0]:t.length?"/"+t.join("/"):""},Ne=function(){var e=w(this).query;return e?"?"+e:""},De=function(){return w(this).searchParams},je=function(){var e=w(this).fragment;return e?"#"+e:""},Ue=function(e,t){return{get:e,set:t,configurable:!0,enumerable:!0}};if(o&&c(Ce,{href:Ue(ke,(function(e){var t=w(this),r=String(e),n=Se(t,r);if(n)throw TypeError(n);A(t.searchParams).updateSearchParams(t.query)})),origin:Ue(Pe),protocol:Ue(Re,(function(e){var t=w(this);Se(t,String(e)+":",ne)})),username:Ue(Te,(function(e){var t=w(this),r=p(String(e));if(!Q(t)){t.username="";for(var n=0;n<r.length;n++)t.username+=$(r[n],V)}})),password:Ue(Oe,(function(e){var t=w(this),r=p(String(e));if(!Q(t)){t.password="";for(var n=0;n<r.length;n++)t.password+=$(r[n],V)}})),host:Ue(Le,(function(e){var t=w(this);t.cannotBeABaseURL||Se(t,String(e),pe)})),hostname:Ue(Fe,(function(e){var t=w(this);t.cannotBeABaseURL||Se(t,String(e),de)})),port:Ue(Ie,(function(e){var t=w(this);Q(t)||(""==(e=String(e))?t.port=null:Se(t,e,ge))})),pathname:Ue(Me,(function(e){var t=w(this);t.cannotBeABaseURL||(t.path=[],Se(t,e+"",_e))})),search:Ue(Ne,(function(e){var t=w(this);""==(e=String(e))?t.query=null:("?"==e.charAt(0)&&(e=e.slice(1)),t.query="",Se(t,e,xe)),A(t.searchParams).updateSearchParams(t.query)})),searchParams:Ue(De),hash:Ue(je,(function(e){var t=w(this);""!=(e=String(e))?("#"==e.charAt(0)&&(e=e.slice(1)),t.fragment="",Se(t,e,we)):t.fragment=null}))}),u(Ce,"toJSON",(function(){return ke.call(this)}),{enumerable:!0}),u(Ce,"toString",(function(){return ke.call(this)}),{enumerable:!0}),_){var We=_.createObjectURL,qe=_.revokeObjectURL;We&&u(Ee,"createObjectURL",(function(e){return We.apply(_,arguments)})),qe&&u(Ee,"revokeObjectURL",(function(e){return qe.apply(_,arguments)}))}m(Ee,"URL"),i({global:!0,forced:!a,sham:!o},{URL:Ee})},3753:function(e,t,r){"use strict";r(2109)({target:"URL",proto:!0,enumerable:!0},{toJSON:function(){return URL.prototype.toString.call(this)}})},8594:function(e,t,r){r(1926),r(6337);var n=r(857);e.exports=n},6337:function(e,t,r){r(4747),r(3948),r(4633),r(5844),r(2564),r(285),r(3753),r(1637);var n=r(857);e.exports=n},7839:function(e,t){"use strict";t.Z=function(e){var t=!1;return{promise:new Promise((function(r,n){e.then((function(){return!t&&r.apply(void 0,arguments)})).catch((function(e){return!t&&n(e)}))})),cancel:function(){t=!0}}}},5564:function(e,t){"use strict";t.ZP=t.vS=t.wx=t.ag=void 0;var r=["onClick","onContextMenu","onDoubleClick","onDrag","onDragEnd","onDragEnter","onDragExit","onDragLeave","onDragOver","onDragStart","onDrop","onMouseDown","onMouseEnter","onMouseLeave","onMouseMove","onMouseOut","onMouseOver","onMouseUp"];t.ag=r;var n=["onTouchCancel","onTouchEnd","onTouchMove","onTouchStart"];t.wx=n;var i=["onKeyDown","onKeyPress","onKeyUp"];t.vS=i;var o=["onFocus","onBlur"];t.ZP=function(e,t){var a={};return[].concat(r,n,i,o).forEach((function(r){e[r]&&(a[r]=function(n){return t?e[r](n,t(r)):e[r](n)})})),a}},9299:function(module,__unused_webpack_exports,__webpack_require__){var factory;factory=function(){return function(e){var t={};function r(n){if(t[n])return t[n].exports;var i=t[n]={i:n,l:!1,exports:{}};return e[n].call(i.exports,i,i.exports,r),i.l=!0,i.exports}return r.m=e,r.c=t,r.d=function(e,t,n){r.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},r.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r.t=function(e,t){if(1&t&&(e=r(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var i in e)r.d(n,i,function(t){return e[t]}.bind(null,i));return n},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,"a",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p="",r(r.s=0)}([function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),Object.defineProperty(t,"addLinkAttributes",{enumerable:!0,get:function(){return n.addLinkAttributes}}),Object.defineProperty(t,"getFilenameFromUrl",{enumerable:!0,get:function(){return n.getFilenameFromUrl}}),Object.defineProperty(t,"LinkTarget",{enumerable:!0,get:function(){return n.LinkTarget}}),Object.defineProperty(t,"loadScript",{enumerable:!0,get:function(){return n.loadScript}}),Object.defineProperty(t,"PDFDateString",{enumerable:!0,get:function(){return n.PDFDateString}}),Object.defineProperty(t,"RenderingCancelledException",{enumerable:!0,get:function(){return n.RenderingCancelledException}}),Object.defineProperty(t,"build",{enumerable:!0,get:function(){return i.build}}),Object.defineProperty(t,"getDocument",{enumerable:!0,get:function(){return i.getDocument}}),Object.defineProperty(t,"LoopbackPort",{enumerable:!0,get:function(){return i.LoopbackPort}}),Object.defineProperty(t,"PDFDataRangeTransport",{enumerable:!0,get:function(){return i.PDFDataRangeTransport}}),Object.defineProperty(t,"PDFWorker",{enumerable:!0,get:function(){return i.PDFWorker}}),Object.defineProperty(t,"version",{enumerable:!0,get:function(){return i.version}}),Object.defineProperty(t,"CMapCompressionType",{enumerable:!0,get:function(){return o.CMapCompressionType}}),Object.defineProperty(t,"createObjectURL",{enumerable:!0,get:function(){return o.createObjectURL}}),Object.defineProperty(t,"createPromiseCapability",{enumerable:!0,get:function(){return o.createPromiseCapability}}),Object.defineProperty(t,"createValidAbsoluteUrl",{enumerable:!0,get:function(){return o.createValidAbsoluteUrl}}),Object.defineProperty(t,"InvalidPDFException",{enumerable:!0,get:function(){return o.InvalidPDFException}}),Object.defineProperty(t,"MissingPDFException",{enumerable:!0,get:function(){return o.MissingPDFException}}),Object.defineProperty(t,"OPS",{enumerable:!0,get:function(){return o.OPS}}),Object.defineProperty(t,"PasswordResponses",{enumerable:!0,get:function(){return o.PasswordResponses}}),Object.defineProperty(t,"PermissionFlag",{enumerable:!0,get:function(){return o.PermissionFlag}}),Object.defineProperty(t,"removeNullCharacters",{enumerable:!0,get:function(){return o.removeNullCharacters}}),Object.defineProperty(t,"shadow",{enumerable:!0,get:function(){return o.shadow}}),Object.defineProperty(t,"UnexpectedResponseException",{enumerable:!0,get:function(){return o.UnexpectedResponseException}}),Object.defineProperty(t,"UNSUPPORTED_FEATURES",{enumerable:!0,get:function(){return o.UNSUPPORTED_FEATURES}}),Object.defineProperty(t,"Util",{enumerable:!0,get:function(){return o.Util}}),Object.defineProperty(t,"VerbosityLevel",{enumerable:!0,get:function(){return o.VerbosityLevel}}),Object.defineProperty(t,"AnnotationLayer",{enumerable:!0,get:function(){return a.AnnotationLayer}}),Object.defineProperty(t,"apiCompatibilityParams",{enumerable:!0,get:function(){return s.apiCompatibilityParams}}),Object.defineProperty(t,"GlobalWorkerOptions",{enumerable:!0,get:function(){return c.GlobalWorkerOptions}}),Object.defineProperty(t,"renderTextLayer",{enumerable:!0,get:function(){return u.renderTextLayer}}),Object.defineProperty(t,"SVGGraphics",{enumerable:!0,get:function(){return l.SVGGraphics}});var n=r(1),i=r(5),o=r(2),a=r(16),s=r(7),c=r(10),u=r(17),l=r(18);{const{isNodeJS:e}=r(4);if(e){const e=r(19).PDFNodeStream;(0,i.setPDFNetworkStreamFactory)((t=>new e(t)))}else{const e=r(22).PDFNetworkStream;let t;(0,n.isFetchSupported)()&&(t=r(23).PDFFetchStream),(0,i.setPDFNetworkStreamFactory)((r=>t&&(0,n.isValidFetchUrl)(r.url)?new t(r):new e(r)))}}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.addLinkAttributes=function(e,{url:t,target:r,rel:o,enabled:a=!0}={}){(0,n.assert)(t&&"string"==typeof t,'addLinkAttributes: A valid "url" parameter must provided.');const s=(0,n.removeNullCharacters)(t);a?e.href=e.title=s:(e.href="",e.title=`Disabled: ${s}`,e.onclick=()=>!1);let u="";switch(r){case c.NONE:break;case c.SELF:u="_self";break;case c.BLANK:u="_blank";break;case c.PARENT:u="_parent";break;case c.TOP:u="_top"}e.target=u,e.rel="string"==typeof o?o:i},t.getFilenameFromUrl=function(e){const t=e.indexOf("#"),r=e.indexOf("?"),n=Math.min(t>0?t:e.length,r>0?r:e.length);return e.substring(e.lastIndexOf("/",n)+1,n)},t.isFetchSupported=u,t.isValidFetchUrl=l,t.loadScript=function(e){return new Promise(((t,r)=>{const n=document.createElement("script");n.src=e,n.onload=t,n.onerror=function(){r(new Error(`Cannot load script at: ${n.src}`))},(document.head||document.documentElement).appendChild(n)}))},t.deprecated=function(e){console.log("Deprecated API usage: "+e)},t.PDFDateString=t.StatTimer=t.DOMSVGFactory=t.DOMCMapReaderFactory=t.DOMCanvasFactory=t.DEFAULT_LINK_REL=t.LinkTarget=t.RenderingCancelledException=t.PageViewport=void 0;var n=r(2);const i="noopener noreferrer nofollow";t.DEFAULT_LINK_REL=i;const o="http://www.w3.org/2000/svg";t.DOMCanvasFactory=class{create(e,t){if(e<=0||t<=0)throw new Error("Invalid canvas size");const r=document.createElement("canvas"),n=r.getContext("2d");return r.width=e,r.height=t,{canvas:r,context:n}}reset(e,t,r){if(!e.canvas)throw new Error("Canvas is not specified");if(t<=0||r<=0)throw new Error("Invalid canvas size");e.canvas.width=t,e.canvas.height=r}destroy(e){if(!e.canvas)throw new Error("Canvas is not specified");e.canvas.width=0,e.canvas.height=0,e.canvas=null,e.context=null}},t.DOMCMapReaderFactory=class{constructor({baseUrl:e=null,isCompressed:t=!1}){this.baseUrl=e,this.isCompressed=t}async fetch({name:e}){if(!this.baseUrl)throw new Error('The CMap "baseUrl" parameter must be specified, ensure that the "cMapUrl" and "cMapPacked" API parameters are provided.');if(!e)throw new Error("CMap name must be specified.");const t=this.baseUrl+e+(this.isCompressed?".bcmap":""),r=this.isCompressed?n.CMapCompressionType.BINARY:n.CMapCompressionType.NONE;return u()&&l(t,document.baseURI)?fetch(t).then((async e=>{if(!e.ok)throw new Error(e.statusText);let t;return t=this.isCompressed?new Uint8Array(await e.arrayBuffer()):(0,n.stringToBytes)(await e.text()),{cMapData:t,compressionType:r}})).catch((e=>{throw new Error("Unable to load "+(this.isCompressed?"binary ":"")+`CMap at: ${t}`)})):new Promise(((e,i)=>{const o=new XMLHttpRequest;o.open("GET",t,!0),this.isCompressed&&(o.responseType="arraybuffer"),o.onreadystatechange=()=>{if(o.readyState===XMLHttpRequest.DONE){if(200===o.status||0===o.status){let t;if(this.isCompressed&&o.response?t=new Uint8Array(o.response):!this.isCompressed&&o.responseText&&(t=(0,n.stringToBytes)(o.responseText)),t)return void e({cMapData:t,compressionType:r})}i(new Error(o.statusText))}},o.send(null)})).catch((e=>{throw new Error("Unable to load "+(this.isCompressed?"binary ":"")+`CMap at: ${t}`)}))}},t.DOMSVGFactory=class{create(e,t){(0,n.assert)(e>0&&t>0,"Invalid SVG dimensions");const r=document.createElementNS(o,"svg:svg");return r.setAttribute("version","1.1"),r.setAttribute("width",e+"px"),r.setAttribute("height",t+"px"),r.setAttribute("preserveAspectRatio","none"),r.setAttribute("viewBox","0 0 "+e+" "+t),r}createElement(e){return(0,n.assert)("string"==typeof e,"Invalid SVG element type"),document.createElementNS(o,e)}};class a{constructor({viewBox:e,scale:t,rotation:r,offsetX:n=0,offsetY:i=0,dontFlip:o=!1}){this.viewBox=e,this.scale=t,this.rotation=r,this.offsetX=n,this.offsetY=i;const a=(e[2]+e[0])/2,s=(e[3]+e[1])/2;let c,u,l,h,f,p,d,g;switch(r=(r%=360)<0?r+360:r){case 180:c=-1,u=0,l=0,h=1;break;case 90:c=0,u=1,l=1,h=0;break;case 270:c=0,u=-1,l=-1,h=0;break;case 0:c=1,u=0,l=0,h=-1;break;default:throw new Error("PageViewport: Invalid rotation, must be a multiple of 90 degrees.")}o&&(l=-l,h=-h),0===c?(f=Math.abs(s-e[1])*t+n,p=Math.abs(a-e[0])*t+i,d=Math.abs(e[3]-e[1])*t,g=Math.abs(e[2]-e[0])*t):(f=Math.abs(a-e[0])*t+n,p=Math.abs(s-e[1])*t+i,d=Math.abs(e[2]-e[0])*t,g=Math.abs(e[3]-e[1])*t),this.transform=[c*t,u*t,l*t,h*t,f-c*t*a-l*t*s,p-u*t*a-h*t*s],this.width=d,this.height=g}clone({scale:e=this.scale,rotation:t=this.rotation,offsetX:r=this.offsetX,offsetY:n=this.offsetY,dontFlip:i=!1}={}){return new a({viewBox:this.viewBox.slice(),scale:e,rotation:t,offsetX:r,offsetY:n,dontFlip:i})}convertToViewportPoint(e,t){return n.Util.applyTransform([e,t],this.transform)}convertToViewportRectangle(e){const t=n.Util.applyTransform([e[0],e[1]],this.transform),r=n.Util.applyTransform([e[2],e[3]],this.transform);return[t[0],t[1],r[0],r[1]]}convertToPdfPoint(e,t){return n.Util.applyInverseTransform([e,t],this.transform)}}t.PageViewport=a;class s extends n.BaseException{constructor(e,t){super(e),this.type=t}}t.RenderingCancelledException=s;const c={NONE:0,SELF:1,BLANK:2,PARENT:3,TOP:4};function u(){return"undefined"!=typeof fetch&&"undefined"!=typeof Response&&"body"in Response.prototype&&"undefined"!=typeof ReadableStream}function l(e,t){try{const{protocol:r}=t?new URL(e,t):new URL(e);return"http:"===r||"https:"===r}catch(e){return!1}}let h;t.LinkTarget=c,t.StatTimer=class{constructor(){this.started=Object.create(null),this.times=[]}time(e){e in this.started&&(0,n.warn)(`Timer is already running for ${e}`),this.started[e]=Date.now()}timeEnd(e){e in this.started||(0,n.warn)(`Timer has not been started for ${e}`),this.times.push({name:e,start:this.started[e],end:Date.now()}),delete this.started[e]}toString(){const e=[];let t=0;for(const e of this.times){const r=e.name;r.length>t&&(t=r.length)}for(const r of this.times){const n=r.end-r.start;e.push(`${r.name.padEnd(t)} ${n}ms\n`)}return e.join("")}},t.PDFDateString=class{static toDateObject(e){if(!e||!(0,n.isString)(e))return null;h||(h=new RegExp("^D:(\\d{4})(\\d{2})?(\\d{2})?(\\d{2})?(\\d{2})?(\\d{2})?([Z|+|-])?(\\d{2})?'?(\\d{2})?'?"));const t=h.exec(e);if(!t)return null;const r=parseInt(t[1],10);let i=parseInt(t[2],10);i=i>=1&&i<=12?i-1:0;let o=parseInt(t[3],10);o=o>=1&&o<=31?o:1;let a=parseInt(t[4],10);a=a>=0&&a<=23?a:0;let s=parseInt(t[5],10);s=s>=0&&s<=59?s:0;let c=parseInt(t[6],10);c=c>=0&&c<=59?c:0;const u=t[7]||"Z";let l=parseInt(t[8],10);l=l>=0&&l<=23?l:0;let f=parseInt(t[9],10)||0;return f=f>=0&&f<=59?f:0,"-"===u?(a+=l,s+=f):"+"===u&&(a-=l,s-=f),new Date(Date.UTC(r,i,o,a,s,c))}}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.arrayByteLength=f,t.arraysToBytes=function(e){const t=e.length;if(1===t&&e[0]instanceof Uint8Array)return e[0];let r=0;for(let n=0;n<t;n++)r+=f(e[n]);let n=0;const i=new Uint8Array(r);for(let r=0;r<t;r++){let t=e[r];t instanceof Uint8Array||(t="string"==typeof t?h(t):new Uint8Array(t));const o=t.byteLength;i.set(t,n),n+=o}return i},t.assert=s,t.bytesToString=function(e){s(null!==e&&"object"==typeof e&&void 0!==e.length,"Invalid argument for bytesToString");const t=e.length,r=8192;if(t<r)return String.fromCharCode.apply(null,e);const n=[];for(let i=0;i<t;i+=r){const o=Math.min(i+r,t),a=e.subarray(i,o);n.push(String.fromCharCode.apply(null,a))}return n.join("")},t.createPromiseCapability=function(){const e=Object.create(null);let t=!1;return Object.defineProperty(e,"settled",{get:()=>t}),e.promise=new Promise((function(r,n){e.resolve=function(e){t=!0,r(e)},e.reject=function(e){t=!0,n(e)}})),e},t.getVerbosityLevel=function(){return i},t.info=function(e){i>=n.INFOS&&console.log(`Info: ${e}`)},t.isArrayBuffer=function(e){return"object"==typeof e&&null!==e&&void 0!==e.byteLength},t.isArrayEqual=function(e,t){return e.length===t.length&&e.every((function(e,r){return e===t[r]}))},t.isBool=function(e){return"boolean"==typeof e},t.isEmptyObj=function(e){for(const t in e)return!1;return!0},t.isNum=function(e){return"number"==typeof e},t.isString=function(e){return"string"==typeof e},t.isSameOrigin=function(e,t){let r;try{if(r=new URL(e),!r.origin||"null"===r.origin)return!1}catch(e){return!1}const n=new URL(t,r);return r.origin===n.origin},t.createValidAbsoluteUrl=function(e,t){if(!e)return null;try{const r=t?new URL(e,t):new URL(e);if(function(e){if(!e)return!1;switch(e.protocol){case"http:":case"https:":case"ftp:":case"mailto:":case"tel:":return!0;default:return!1}}(r))return r}catch(e){}return null},t.removeNullCharacters=function(e){return"string"!=typeof e?(o("The argument for removeNullCharacters must be a string."),e):e.replace(l,"")},t.setVerbosityLevel=function(e){Number.isInteger(e)&&(i=e)},t.shadow=c,t.string32=function(e){return String.fromCharCode(e>>24&255,e>>16&255,e>>8&255,255&e)},t.stringToBytes=h,t.stringToPDFString=function(e){const t=e.length,r=[];if("þ"===e[0]&&"ÿ"===e[1])for(let n=2;n<t;n+=2)r.push(String.fromCharCode(e.charCodeAt(n)<<8|e.charCodeAt(n+1)));else if("ÿ"===e[0]&&"þ"===e[1])for(let n=2;n<t;n+=2)r.push(String.fromCharCode(e.charCodeAt(n+1)<<8|e.charCodeAt(n)));else for(let n=0;n<t;++n){const t=v[e.charCodeAt(n)];r.push(t?String.fromCharCode(t):e.charAt(n))}return r.join("")},t.stringToUTF8String=function(e){return decodeURIComponent(escape(e))},t.utf8StringToString=function(e){return unescape(encodeURIComponent(e))},t.warn=o,t.unreachable=a,t.IsEvalSupportedCached=t.IsLittleEndianCached=t.createObjectURL=t.FormatError=t.Util=t.UnknownErrorException=t.UnexpectedResponseException=t.TextRenderingMode=t.StreamType=t.PermissionFlag=t.PasswordResponses=t.PasswordException=t.MissingPDFException=t.InvalidPDFException=t.AbortException=t.CMapCompressionType=t.ImageKind=t.FontType=t.AnnotationType=t.AnnotationStateModelType=t.AnnotationReviewState=t.AnnotationReplyType=t.AnnotationMarkedState=t.AnnotationFlag=t.AnnotationFieldFlag=t.AnnotationBorderStyleType=t.UNSUPPORTED_FEATURES=t.VerbosityLevel=t.OPS=t.IDENTITY_MATRIX=t.FONT_IDENTITY_MATRIX=t.BaseException=void 0,r(3),t.IDENTITY_MATRIX=[1,0,0,1,0,0],t.FONT_IDENTITY_MATRIX=[.001,0,0,.001,0,0],t.PermissionFlag={PRINT:4,MODIFY_CONTENTS:8,COPY:16,MODIFY_ANNOTATIONS:32,FILL_INTERACTIVE_FORMS:256,COPY_FOR_ACCESSIBILITY:512,ASSEMBLE:1024,PRINT_HIGH_QUALITY:2048},t.TextRenderingMode={FILL:0,STROKE:1,FILL_STROKE:2,INVISIBLE:3,FILL_ADD_TO_PATH:4,STROKE_ADD_TO_PATH:5,FILL_STROKE_ADD_TO_PATH:6,ADD_TO_PATH:7,FILL_STROKE_MASK:3,ADD_TO_PATH_FLAG:4},t.ImageKind={GRAYSCALE_1BPP:1,RGB_24BPP:2,RGBA_32BPP:3},t.AnnotationType={TEXT:1,LINK:2,FREETEXT:3,LINE:4,SQUARE:5,CIRCLE:6,POLYGON:7,POLYLINE:8,HIGHLIGHT:9,UNDERLINE:10,SQUIGGLY:11,STRIKEOUT:12,STAMP:13,CARET:14,INK:15,POPUP:16,FILEATTACHMENT:17,SOUND:18,MOVIE:19,WIDGET:20,SCREEN:21,PRINTERMARK:22,TRAPNET:23,WATERMARK:24,THREED:25,REDACT:26},t.AnnotationStateModelType={MARKED:"Marked",REVIEW:"Review"},t.AnnotationMarkedState={MARKED:"Marked",UNMARKED:"Unmarked"},t.AnnotationReviewState={ACCEPTED:"Accepted",REJECTED:"Rejected",CANCELLED:"Cancelled",COMPLETED:"Completed",NONE:"None"},t.AnnotationReplyType={GROUP:"Group",REPLY:"R"},t.AnnotationFlag={INVISIBLE:1,HIDDEN:2,PRINT:4,NOZOOM:8,NOROTATE:16,NOVIEW:32,READONLY:64,LOCKED:128,TOGGLENOVIEW:256,LOCKEDCONTENTS:512},t.AnnotationFieldFlag={READONLY:1,REQUIRED:2,NOEXPORT:4,MULTILINE:4096,PASSWORD:8192,NOTOGGLETOOFF:16384,RADIO:32768,PUSHBUTTON:65536,COMBO:131072,EDIT:262144,SORT:524288,FILESELECT:1048576,MULTISELECT:2097152,DONOTSPELLCHECK:4194304,DONOTSCROLL:8388608,COMB:16777216,RICHTEXT:33554432,RADIOSINUNISON:33554432,COMMITONSELCHANGE:67108864},t.AnnotationBorderStyleType={SOLID:1,DASHED:2,BEVELED:3,INSET:4,UNDERLINE:5},t.StreamType={UNKNOWN:"UNKNOWN",FLATE:"FLATE",LZW:"LZW",DCT:"DCT",JPX:"JPX",JBIG:"JBIG",A85:"A85",AHX:"AHX",CCF:"CCF",RLX:"RLX"},t.FontType={UNKNOWN:"UNKNOWN",TYPE1:"TYPE1",TYPE1C:"TYPE1C",CIDFONTTYPE0:"CIDFONTTYPE0",CIDFONTTYPE0C:"CIDFONTTYPE0C",TRUETYPE:"TRUETYPE",CIDFONTTYPE2:"CIDFONTTYPE2",TYPE3:"TYPE3",OPENTYPE:"OPENTYPE",TYPE0:"TYPE0",MMTYPE1:"MMTYPE1"};const n={ERRORS:0,WARNINGS:1,INFOS:5};t.VerbosityLevel=n,t.CMapCompressionType={NONE:0,BINARY:1,STREAM:2},t.OPS={dependency:1,setLineWidth:2,setLineCap:3,setLineJoin:4,setMiterLimit:5,setDash:6,setRenderingIntent:7,setFlatness:8,setGState:9,save:10,restore:11,transform:12,moveTo:13,lineTo:14,curveTo:15,curveTo2:16,curveTo3:17,closePath:18,rectangle:19,stroke:20,closeStroke:21,fill:22,eoFill:23,fillStroke:24,eoFillStroke:25,closeFillStroke:26,closeEOFillStroke:27,endPath:28,clip:29,eoClip:30,beginText:31,endText:32,setCharSpacing:33,setWordSpacing:34,setHScale:35,setLeading:36,setFont:37,setTextRenderingMode:38,setTextRise:39,moveText:40,setLeadingMoveText:41,setTextMatrix:42,nextLine:43,showText:44,showSpacedText:45,nextLineShowText:46,nextLineSetSpacingShowText:47,setCharWidth:48,setCharWidthAndBounds:49,setStrokeColorSpace:50,setFillColorSpace:51,setStrokeColor:52,setStrokeColorN:53,setFillColor:54,setFillColorN:55,setStrokeGray:56,setFillGray:57,setStrokeRGBColor:58,setFillRGBColor:59,setStrokeCMYKColor:60,setFillCMYKColor:61,shadingFill:62,beginInlineImage:63,beginImageData:64,endInlineImage:65,paintXObject:66,markPoint:67,markPointProps:68,beginMarkedContent:69,beginMarkedContentProps:70,endMarkedContent:71,beginCompat:72,endCompat:73,paintFormXObjectBegin:74,paintFormXObjectEnd:75,beginGroup:76,endGroup:77,beginAnnotations:78,endAnnotations:79,beginAnnotation:80,endAnnotation:81,paintJpegXObject:82,paintImageMaskXObject:83,paintImageMaskXObjectGroup:84,paintImageXObject:85,paintInlineImageXObject:86,paintInlineImageXObjectGroup:87,paintImageXObjectRepeat:88,paintImageMaskXObjectRepeat:89,paintSolidColorImageMask:90,constructPath:91},t.UNSUPPORTED_FEATURES={unknown:"unknown",forms:"forms",javaScript:"javaScript",smask:"smask",shadingPattern:"shadingPattern",font:"font",errorTilingPattern:"errorTilingPattern",errorExtGState:"errorExtGState",errorXObject:"errorXObject",errorFontLoadType3:"errorFontLoadType3",errorFontState:"errorFontState",errorFontMissing:"errorFontMissing",errorFontTranslate:"errorFontTranslate",errorColorSpace:"errorColorSpace",errorOperatorList:"errorOperatorList",errorFontToUnicode:"errorFontToUnicode",errorFontLoadNative:"errorFontLoadNative",errorFontGetPath:"errorFontGetPath"},t.PasswordResponses={NEED_PASSWORD:1,INCORRECT_PASSWORD:2};let i=n.WARNINGS;function o(e){i>=n.WARNINGS&&console.log(`Warning: ${e}`)}function a(e){throw new Error(e)}function s(e,t){e||a(t)}function c(e,t,r){return Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!1}),r}const u=function(){function e(t){this.constructor===e&&a("Cannot initialize BaseException."),this.message=t,this.name=this.constructor.name}return e.prototype=new Error,e.constructor=e,e}();t.BaseException=u,t.PasswordException=class extends u{constructor(e,t){super(e),this.code=t}},t.UnknownErrorException=class extends u{constructor(e,t){super(e),this.details=t}},t.InvalidPDFException=class extends u{},t.MissingPDFException=class extends u{},t.UnexpectedResponseException=class extends u{constructor(e,t){super(e),this.status=t}},t.FormatError=class extends u{},t.AbortException=class extends u{};const l=/\x00/g;function h(e){s("string"==typeof e,"Invalid argument for stringToBytes");const t=e.length,r=new Uint8Array(t);for(let n=0;n<t;++n)r[n]=255&e.charCodeAt(n);return r}function f(e){return void 0!==e.length?e.length:(s(void 0!==e.byteLength,"arrayByteLength - invalid argument."),e.byteLength)}const p={get value(){return c(this,"value",function(){const e=new Uint8Array(4);return e[0]=1,1===new Uint32Array(e.buffer,0,1)[0]}())}};t.IsLittleEndianCached=p;const d={get value(){return c(this,"value",function(){try{return new Function(""),!0}catch(e){return!1}}())}};t.IsEvalSupportedCached=d;const g=["rgb(",0,",",0,",",0,")"];class m{static makeCssRgb(e,t,r){return g[1]=e,g[3]=t,g[5]=r,g.join("")}static transform(e,t){return[e[0]*t[0]+e[2]*t[1],e[1]*t[0]+e[3]*t[1],e[0]*t[2]+e[2]*t[3],e[1]*t[2]+e[3]*t[3],e[0]*t[4]+e[2]*t[5]+e[4],e[1]*t[4]+e[3]*t[5]+e[5]]}static applyTransform(e,t){return[e[0]*t[0]+e[1]*t[2]+t[4],e[0]*t[1]+e[1]*t[3]+t[5]]}static applyInverseTransform(e,t){const r=t[0]*t[3]-t[1]*t[2];return[(e[0]*t[3]-e[1]*t[2]+t[2]*t[5]-t[4]*t[3])/r,(-e[0]*t[1]+e[1]*t[0]+t[4]*t[1]-t[5]*t[0])/r]}static getAxialAlignedBoundingBox(e,t){const r=m.applyTransform(e,t),n=m.applyTransform(e.slice(2,4),t),i=m.applyTransform([e[0],e[3]],t),o=m.applyTransform([e[2],e[1]],t);return[Math.min(r[0],n[0],i[0],o[0]),Math.min(r[1],n[1],i[1],o[1]),Math.max(r[0],n[0],i[0],o[0]),Math.max(r[1],n[1],i[1],o[1])]}static inverseTransform(e){const t=e[0]*e[3]-e[1]*e[2];return[e[3]/t,-e[1]/t,-e[2]/t,e[0]/t,(e[2]*e[5]-e[4]*e[3])/t,(e[4]*e[1]-e[5]*e[0])/t]}static apply3dTransform(e,t){return[e[0]*t[0]+e[1]*t[1]+e[2]*t[2],e[3]*t[0]+e[4]*t[1]+e[5]*t[2],e[6]*t[0]+e[7]*t[1]+e[8]*t[2]]}static singularValueDecompose2dScale(e){const t=[e[0],e[2],e[1],e[3]],r=e[0]*t[0]+e[1]*t[2],n=e[0]*t[1]+e[1]*t[3],i=e[2]*t[0]+e[3]*t[2],o=e[2]*t[1]+e[3]*t[3],a=(r+o)/2,s=Math.sqrt((r+o)*(r+o)-4*(r*o-i*n))/2,c=a+s||1,u=a-s||1;return[Math.sqrt(c),Math.sqrt(u)]}static normalizeRect(e){const t=e.slice(0);return e[0]>e[2]&&(t[0]=e[2],t[2]=e[0]),e[1]>e[3]&&(t[1]=e[3],t[3]=e[1]),t}static intersect(e,t){function r(e,t){return e-t}const n=[e[0],e[2],t[0],t[2]].sort(r),i=[e[1],e[3],t[1],t[3]].sort(r),o=[];return e=m.normalizeRect(e),t=m.normalizeRect(t),n[0]===e[0]&&n[1]===t[0]||n[0]===t[0]&&n[1]===e[0]?(o[0]=n[1],o[2]=n[2],i[0]===e[1]&&i[1]===t[1]||i[0]===t[1]&&i[1]===e[1]?(o[1]=i[1],o[3]=i[2],o):null):null}}t.Util=m;const v=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,728,711,710,729,733,731,730,732,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8226,8224,8225,8230,8212,8211,402,8260,8249,8250,8722,8240,8222,8220,8221,8216,8217,8218,8482,64257,64258,321,338,352,376,381,305,322,339,353,382,0,8364],y=function(){const e="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";return function(t,r,n=!1){if(!n&&URL.createObjectURL){const e=new Blob([t],{type:r});return URL.createObjectURL(e)}let i=`data:${r};base64,`;for(let r=0,n=t.length;r<n;r+=3){const o=255&t[r],a=255&t[r+1],s=255&t[r+2];i+=e[o>>2]+e[(3&o)<<4|a>>4]+e[r+1<n?(15&a)<<2|s>>6:64]+e[r+2<n?63&s:64]}return i}}();t.createObjectURL=y},function(e,t,r){"use strict";r(4)},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.isNodeJS=void 0;const n="object"==typeof process&&process+""=="[object process]"&&!process.versions.nw&&!process.versions.electron;t.isNodeJS=n},function(module,exports,__w_pdfjs_require__){"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.getDocument=getDocument,exports.setPDFNetworkStreamFactory=setPDFNetworkStreamFactory,exports.build=exports.version=exports.PDFPageProxy=exports.PDFDocumentProxy=exports.PDFWorker=exports.PDFDataRangeTransport=exports.LoopbackPort=void 0;var _util=__w_pdfjs_require__(2),_display_utils=__w_pdfjs_require__(1),_font_loader=__w_pdfjs_require__(6),_api_compatibility=__w_pdfjs_require__(7),_canvas=__w_pdfjs_require__(8),_worker_options=__w_pdfjs_require__(10),_is_node=__w_pdfjs_require__(4),_message_handler=__w_pdfjs_require__(11),_metadata=__w_pdfjs_require__(12),_transport_stream=__w_pdfjs_require__(14),_webgl=__w_pdfjs_require__(15);const DEFAULT_RANGE_CHUNK_SIZE=65536,RENDERING_CANCELLED_TIMEOUT=100;let createPDFNetworkStream;function setPDFNetworkStreamFactory(e){createPDFNetworkStream=e}function getDocument(e){const t=new PDFDocumentLoadingTask;let r;if("string"==typeof e)r={url:e};else if((0,_util.isArrayBuffer)(e))r={data:e};else if(e instanceof PDFDataRangeTransport)r={range:e};else{if("object"!=typeof e)throw new Error("Invalid parameter in getDocument, need either Uint8Array, string or a parameter object");if(!e.url&&!e.data&&!e.range)throw new Error("Invalid parameter object: need either .data, .range or .url");r=e}const n=Object.create(null);let i=null,o=null;for(const e in r)if("url"!==e||"undefined"==typeof window)if("range"!==e)if("worker"!==e)if("data"!==e||r[e]instanceof Uint8Array)n[e]=r[e];else{const t=r[e];if("string"==typeof t)n[e]=(0,_util.stringToBytes)(t);else if("object"!=typeof t||null===t||isNaN(t.length)){if(!(0,_util.isArrayBuffer)(t))throw new Error("Invalid PDF binary data: either typed array, string or array-like object is expected in the data property.");n[e]=new Uint8Array(t)}else n[e]=new Uint8Array(t)}else o=r[e];else i=r[e];else n[e]=new URL(r[e],window.location).href;if(n.rangeChunkSize=n.rangeChunkSize||DEFAULT_RANGE_CHUNK_SIZE,n.CMapReaderFactory=n.CMapReaderFactory||_display_utils.DOMCMapReaderFactory,n.ignoreErrors=!0!==n.stopAtErrors,n.fontExtraProperties=!0===n.fontExtraProperties,n.pdfBug=!0===n.pdfBug,Number.isInteger(n.maxImageSize)||(n.maxImageSize=-1),"boolean"!=typeof n.isEvalSupported&&(n.isEvalSupported=!0),"boolean"!=typeof n.disableFontFace&&(n.disableFontFace=_api_compatibility.apiCompatibilityParams.disableFontFace||!1),"boolean"!=typeof n.disableRange&&(n.disableRange=!1),"boolean"!=typeof n.disableStream&&(n.disableStream=!1),"boolean"!=typeof n.disableAutoFetch&&(n.disableAutoFetch=!1),(0,_util.setVerbosityLevel)(n.verbosity),!o){const e={verbosity:n.verbosity,port:_worker_options.GlobalWorkerOptions.workerPort};o=e.port?PDFWorker.fromPort(e):new PDFWorker(e),t._worker=o}const a=t.docId;return o.promise.then((function(){if(t.destroyed)throw new Error("Loading aborted");const e=_fetchDocument(o,n,i,a),r=new Promise((function(e){let t;i?t=new _transport_stream.PDFDataTransportStream({length:n.length,initialData:n.initialData,progressiveDone:n.progressiveDone,disableRange:n.disableRange,disableStream:n.disableStream},i):n.data||(t=createPDFNetworkStream({url:n.url,length:n.length,httpHeaders:n.httpHeaders,withCredentials:n.withCredentials,rangeChunkSize:n.rangeChunkSize,disableRange:n.disableRange,disableStream:n.disableStream})),e(t)}));return Promise.all([e,r]).then((function([e,r]){if(t.destroyed)throw new Error("Loading aborted");const i=new _message_handler.MessageHandler(a,e,o.port);i.postMessageTransfers=o.postMessageTransfers;const s=new WorkerTransport(i,t,r,n);t._transport=s,i.send("Ready",null)}))})).catch(t._capability.reject),t}function _fetchDocument(e,t,r,n){return e.destroyed?Promise.reject(new Error("Worker was destroyed")):(r&&(t.length=r.length,t.initialData=r.initialData,t.progressiveDone=r.progressiveDone),e.messageHandler.sendWithPromise("GetDocRequest",{docId:n,apiVersion:"2.5.207",source:{data:t.data,url:t.url,password:t.password,disableAutoFetch:t.disableAutoFetch,rangeChunkSize:t.rangeChunkSize,length:t.length},maxImageSize:t.maxImageSize,disableFontFace:t.disableFontFace,postMessageTransfers:e.postMessageTransfers,docBaseUrl:t.docBaseUrl,ignoreErrors:t.ignoreErrors,isEvalSupported:t.isEvalSupported,fontExtraProperties:t.fontExtraProperties}).then((function(t){if(e.destroyed)throw new Error("Worker was destroyed");return t})))}const PDFDocumentLoadingTask=function(){let e=0;return class{constructor(){this._capability=(0,_util.createPromiseCapability)(),this._transport=null,this._worker=null,this.docId="d"+e++,this.destroyed=!1,this.onPassword=null,this.onProgress=null,this.onUnsupportedFeature=null}get promise(){return this._capability.promise}destroy(){return this.destroyed=!0,(this._transport?this._transport.destroy():Promise.resolve()).then((()=>{this._transport=null,this._worker&&(this._worker.destroy(),this._worker=null)}))}}}();class PDFDataRangeTransport{constructor(e,t,r=!1){this.length=e,this.initialData=t,this.progressiveDone=r,this._rangeListeners=[],this._progressListeners=[],this._progressiveReadListeners=[],this._progressiveDoneListeners=[],this._readyCapability=(0,_util.createPromiseCapability)()}addRangeListener(e){this._rangeListeners.push(e)}addProgressListener(e){this._progressListeners.push(e)}addProgressiveReadListener(e){this._progressiveReadListeners.push(e)}addProgressiveDoneListener(e){this._progressiveDoneListeners.push(e)}onDataRange(e,t){for(const r of this._rangeListeners)r(e,t)}onDataProgress(e,t){this._readyCapability.promise.then((()=>{for(const r of this._progressListeners)r(e,t)}))}onDataProgressiveRead(e){this._readyCapability.promise.then((()=>{for(const t of this._progressiveReadListeners)t(e)}))}onDataProgressiveDone(){this._readyCapability.promise.then((()=>{for(const e of this._progressiveDoneListeners)e()}))}transportReady(){this._readyCapability.resolve()}requestDataRange(e,t){(0,_util.unreachable)("Abstract method PDFDataRangeTransport.requestDataRange")}abort(){}}exports.PDFDataRangeTransport=PDFDataRangeTransport;class PDFDocumentProxy{constructor(e,t){this._pdfInfo=e,this._transport=t}get numPages(){return this._pdfInfo.numPages}get fingerprint(){return this._pdfInfo.fingerprint}getPage(e){return this._transport.getPage(e)}getPageIndex(e){return this._transport.getPageIndex(e)}getDestinations(){return this._transport.getDestinations()}getDestination(e){return this._transport.getDestination(e)}getPageLabels(){return this._transport.getPageLabels()}getPageLayout(){return this._transport.getPageLayout()}getPageMode(){return this._transport.getPageMode()}getViewerPreferences(){return this._transport.getViewerPreferences()}getOpenAction(){return this._transport.getOpenAction()}getOpenActionDestination(){return(0,_display_utils.deprecated)("getOpenActionDestination, use getOpenAction instead."),this.getOpenAction().then((function(e){return e&&e.dest?e.dest:null}))}getAttachments(){return this._transport.getAttachments()}getJavaScript(){return this._transport.getJavaScript()}getOutline(){return this._transport.getOutline()}getPermissions(){return this._transport.getPermissions()}getMetadata(){return this._transport.getMetadata()}getData(){return this._transport.getData()}getDownloadInfo(){return this._transport.downloadInfoCapability.promise}getStats(){return this._transport.getStats()}cleanup(){return this._transport.startCleanup()}destroy(){return this.loadingTask.destroy()}get loadingParams(){return this._transport.loadingParams}get loadingTask(){return this._transport.loadingTask}}exports.PDFDocumentProxy=PDFDocumentProxy;class PDFPageProxy{constructor(e,t,r,n=!1){this._pageIndex=e,this._pageInfo=t,this._transport=r,this._stats=n?new _display_utils.StatTimer:null,this._pdfBug=n,this.commonObjs=r.commonObjs,this.objs=new PDFObjects,this.cleanupAfterRender=!1,this.pendingCleanup=!1,this.intentStates=Object.create(null),this.destroyed=!1}get pageNumber(){return this._pageIndex+1}get rotate(){return this._pageInfo.rotate}get ref(){return this._pageInfo.ref}get userUnit(){return this._pageInfo.userUnit}get view(){return this._pageInfo.view}getViewport({scale:e,rotation:t=this.rotate,offsetX:r=0,offsetY:n=0,dontFlip:i=!1}={}){return new _display_utils.PageViewport({viewBox:this.view,scale:e,rotation:t,offsetX:r,offsetY:n,dontFlip:i})}getAnnotations({intent:e=null}={}){return this.annotationsPromise&&this.annotationsIntent===e||(this.annotationsPromise=this._transport.getAnnotations(this._pageIndex,e),this.annotationsIntent=e),this.annotationsPromise}render({canvasContext:e,viewport:t,intent:r="display",enableWebGL:n=!1,renderInteractiveForms:i=!1,transform:o=null,imageLayer:a=null,canvasFactory:s=null,background:c=null}){this._stats&&this._stats.time("Overall");const u="print"===r?"print":"display";this.pendingCleanup=!1,this.intentStates[u]||(this.intentStates[u]=Object.create(null));const l=this.intentStates[u];l.streamReaderCancelTimeout&&(clearTimeout(l.streamReaderCancelTimeout),l.streamReaderCancelTimeout=null);const h=s||new _display_utils.DOMCanvasFactory,f=new _webgl.WebGLContext({enable:n});l.displayReadyCapability||(l.displayReadyCapability=(0,_util.createPromiseCapability)(),l.operatorList={fnArray:[],argsArray:[],lastChunk:!1},this._stats&&this._stats.time("Page Request"),this._pumpOperatorList({pageIndex:this._pageIndex,intent:u,renderInteractiveForms:!0===i}));const p=e=>{const t=l.renderTasks.indexOf(d);t>=0&&l.renderTasks.splice(t,1),(this.cleanupAfterRender||"print"===u)&&(this.pendingCleanup=!0),this._tryCleanup(),e?(d.capability.reject(e),this._abortOperatorList({intentState:l,reason:e})):d.capability.resolve(),this._stats&&(this._stats.timeEnd("Rendering"),this._stats.timeEnd("Overall"))},d=new InternalRenderTask({callback:p,params:{canvasContext:e,viewport:t,transform:o,imageLayer:a,background:c},objs:this.objs,commonObjs:this.commonObjs,operatorList:l.operatorList,pageIndex:this._pageIndex,canvasFactory:h,webGLContext:f,useRequestAnimationFrame:"print"!==u,pdfBug:this._pdfBug});l.renderTasks||(l.renderTasks=[]),l.renderTasks.push(d);const g=d.task;return l.displayReadyCapability.promise.then((e=>{this.pendingCleanup?p():(this._stats&&this._stats.time("Rendering"),d.initializeGraphics(e),d.operatorListChanged())})).catch(p),g}getOperatorList(){this.intentStates.oplist||(this.intentStates.oplist=Object.create(null));const e=this.intentStates.oplist;let t;return e.opListReadCapability||(t={},t.operatorListChanged=function(){if(e.operatorList.lastChunk){e.opListReadCapability.resolve(e.operatorList);const r=e.renderTasks.indexOf(t);r>=0&&e.renderTasks.splice(r,1)}},e.opListReadCapability=(0,_util.createPromiseCapability)(),e.renderTasks=[],e.renderTasks.push(t),e.operatorList={fnArray:[],argsArray:[],lastChunk:!1},this._stats&&this._stats.time("Page Request"),this._pumpOperatorList({pageIndex:this._pageIndex,intent:"oplist"})),e.opListReadCapability.promise}streamTextContent({normalizeWhitespace:e=!1,disableCombineTextItems:t=!1}={}){return this._transport.messageHandler.sendWithStream("GetTextContent",{pageIndex:this._pageIndex,normalizeWhitespace:!0===e,combineTextItems:!0!==t},{highWaterMark:100,size:e=>e.items.length})}getTextContent(e={}){const t=this.streamTextContent(e);return new Promise((function(e,r){const n=t.getReader(),i={items:[],styles:Object.create(null)};!function t(){n.read().then((function({value:r,done:n}){n?e(i):(Object.assign(i.styles,r.styles),i.items.push(...r.items),t())}),r)}()}))}_destroy(){this.destroyed=!0,this._transport.pageCache[this._pageIndex]=null;const e=[];return Object.keys(this.intentStates).forEach((t=>{const r=this.intentStates[t];this._abortOperatorList({intentState:r,reason:new Error("Page was destroyed."),force:!0}),"oplist"!==t&&r.renderTasks.forEach((function(t){const r=t.capability.promise.catch((function(){}));e.push(r),t.cancel()}))})),this.objs.clear(),this.annotationsPromise=null,this.pendingCleanup=!1,Promise.all(e)}cleanup(e=!1){return this.pendingCleanup=!0,this._tryCleanup(e)}_tryCleanup(e=!1){return!(!this.pendingCleanup||Object.keys(this.intentStates).some((e=>{const t=this.intentStates[e];return 0!==t.renderTasks.length||!t.operatorList.lastChunk}))||(Object.keys(this.intentStates).forEach((e=>{delete this.intentStates[e]})),this.objs.clear(),this.annotationsPromise=null,e&&this._stats&&(this._stats=new _display_utils.StatTimer),this.pendingCleanup=!1,0))}_startRenderPage(e,t){const r=this.intentStates[t];r&&(this._stats&&this._stats.timeEnd("Page Request"),r.displayReadyCapability&&r.displayReadyCapability.resolve(e))}_renderPageChunk(e,t){for(let r=0,n=e.length;r<n;r++)t.operatorList.fnArray.push(e.fnArray[r]),t.operatorList.argsArray.push(e.argsArray[r]);t.operatorList.lastChunk=e.lastChunk;for(let e=0;e<t.renderTasks.length;e++)t.renderTasks[e].operatorListChanged();e.lastChunk&&this._tryCleanup()}_pumpOperatorList(e){(0,_util.assert)(e.intent,'PDFPageProxy._pumpOperatorList: Expected "intent" argument.');const t=this._transport.messageHandler.sendWithStream("GetOperatorList",e).getReader(),r=this.intentStates[e.intent];r.streamReader=t;const n=()=>{t.read().then((({value:e,done:t})=>{t?r.streamReader=null:this._transport.destroyed||(this._renderPageChunk(e,r),n())}),(e=>{if(r.streamReader=null,!this._transport.destroyed){if(r.operatorList){r.operatorList.lastChunk=!0;for(let e=0;e<r.renderTasks.length;e++)r.renderTasks[e].operatorListChanged();this._tryCleanup()}if(r.displayReadyCapability)r.displayReadyCapability.reject(e);else{if(!r.opListReadCapability)throw e;r.opListReadCapability.reject(e)}}}))};n()}_abortOperatorList({intentState:e,reason:t,force:r=!1}){if((0,_util.assert)(t instanceof Error||"object"==typeof t&&null!==t,'PDFPageProxy._abortOperatorList: Expected "reason" argument.'),e.streamReader){if(!r){if(0!==e.renderTasks.length)return;if(t instanceof _display_utils.RenderingCancelledException)return void(e.streamReaderCancelTimeout=setTimeout((()=>{this._abortOperatorList({intentState:e,reason:t,force:!0}),e.streamReaderCancelTimeout=null}),RENDERING_CANCELLED_TIMEOUT))}e.streamReader.cancel(new _util.AbortException(t&&t.message)),e.streamReader=null,this._transport.destroyed||(Object.keys(this.intentStates).some((t=>this.intentStates[t]===e&&(delete this.intentStates[t],!0))),this.cleanup())}}get stats(){return this._stats}}exports.PDFPageProxy=PDFPageProxy;class LoopbackPort{constructor(e=!0){this._listeners=[],this._defer=e,this._deferred=Promise.resolve(void 0)}postMessage(e,t){if(!this._defer)return void this._listeners.forEach((t=>{t.call(this,{data:e})}));const r=new WeakMap,n={data:function e(n){if("object"!=typeof n||null===n)return n;if(r.has(n))return r.get(n);let i,o;if((i=n.buffer)&&(0,_util.isArrayBuffer)(i))return o=t&&t.includes(i)?new n.constructor(i,n.byteOffset,n.byteLength):new n.constructor(n),r.set(n,o),o;o=Array.isArray(n)?[]:{},r.set(n,o);for(const t in n){let r,i=n;for(;!(r=Object.getOwnPropertyDescriptor(i,t));)i=Object.getPrototypeOf(i);if(void 0!==r.value)if("function"!=typeof r.value)o[t]=e(r.value);else if(n.hasOwnProperty&&n.hasOwnProperty(t))throw new Error(`LoopbackPort.postMessage - cannot clone: ${n[t]}`)}return o}(e)};this._deferred.then((()=>{this._listeners.forEach((e=>{e.call(this,n)}))}))}addEventListener(e,t){this._listeners.push(t)}removeEventListener(e,t){const r=this._listeners.indexOf(t);this._listeners.splice(r,1)}terminate(){this._listeners.length=0}}exports.LoopbackPort=LoopbackPort;const PDFWorker=function PDFWorkerClosure(){const pdfWorkerPorts=new WeakMap;let isWorkerDisabled=!1,fallbackWorkerSrc,nextFakeWorkerId=0,fakeWorkerCapability;if(_is_node.isNodeJS)isWorkerDisabled=!0,fallbackWorkerSrc="./pdf.worker.js";else if("object"==typeof document&&"currentScript"in document){const e=document.currentScript&&document.currentScript.src;e&&(fallbackWorkerSrc=e.replace(/(\.(?:min\.)?js)(\?.*)?$/i,".worker$1$2"))}function getWorkerSrc(){if(_worker_options.GlobalWorkerOptions.workerSrc)return _worker_options.GlobalWorkerOptions.workerSrc;if(void 0!==fallbackWorkerSrc)return _is_node.isNodeJS||(0,_display_utils.deprecated)('No "GlobalWorkerOptions.workerSrc" specified.'),fallbackWorkerSrc;throw new Error('No "GlobalWorkerOptions.workerSrc" specified.')}function getMainThreadWorkerMessageHandler(){let e;try{e=globalThis.pdfjsWorker&&globalThis.pdfjsWorker.WorkerMessageHandler}catch(e){}return e||null}function setupFakeWorkerGlobal(){if(fakeWorkerCapability)return fakeWorkerCapability.promise;fakeWorkerCapability=(0,_util.createPromiseCapability)();const loader=async function(){const mainWorkerMessageHandler=getMainThreadWorkerMessageHandler();if(mainWorkerMessageHandler)return mainWorkerMessageHandler;if(_is_node.isNodeJS){const worker=eval("require")(getWorkerSrc());return worker.WorkerMessageHandler}return await(0,_display_utils.loadScript)(getWorkerSrc()),window.pdfjsWorker.WorkerMessageHandler};return loader().then(fakeWorkerCapability.resolve,fakeWorkerCapability.reject),fakeWorkerCapability.promise}function createCDNWrapper(e){const t="importScripts('"+e+"');";return URL.createObjectURL(new Blob([t]))}class PDFWorker{constructor({name:e=null,port:t=null,verbosity:r=(0,_util.getVerbosityLevel)()}={}){if(t&&pdfWorkerPorts.has(t))throw new Error("Cannot use more than one PDFWorker per port");if(this.name=e,this.destroyed=!1,this.postMessageTransfers=!0,this.verbosity=r,this._readyCapability=(0,_util.createPromiseCapability)(),this._port=null,this._webWorker=null,this._messageHandler=null,t)return pdfWorkerPorts.set(t,this),void this._initializeFromPort(t);this._initialize()}get promise(){return this._readyCapability.promise}get port(){return this._port}get messageHandler(){return this._messageHandler}_initializeFromPort(e){this._port=e,this._messageHandler=new _message_handler.MessageHandler("main","worker",e),this._messageHandler.on("ready",(function(){})),this._readyCapability.resolve()}_initialize(){if("undefined"!=typeof Worker&&!isWorkerDisabled&&!getMainThreadWorkerMessageHandler()){let e=getWorkerSrc();try{(0,_util.isSameOrigin)(window.location.href,e)||(e=createCDNWrapper(new URL(e,window.location).href));const t=new Worker(e),r=new _message_handler.MessageHandler("main","worker",t),n=()=>{t.removeEventListener("error",i),r.destroy(),t.terminate(),this.destroyed?this._readyCapability.reject(new Error("Worker was destroyed")):this._setupFakeWorker()},i=()=>{this._webWorker||n()};t.addEventListener("error",i),r.on("test",(e=>{t.removeEventListener("error",i),this.destroyed?n():e?(this._messageHandler=r,this._port=t,this._webWorker=t,e.supportTransfers||(this.postMessageTransfers=!1),this._readyCapability.resolve(),r.send("configure",{verbosity:this.verbosity})):(this._setupFakeWorker(),r.destroy(),t.terminate())})),r.on("ready",(e=>{if(t.removeEventListener("error",i),this.destroyed)n();else try{o()}catch(e){this._setupFakeWorker()}}));const o=()=>{const e=new Uint8Array([this.postMessageTransfers?255:0]);try{r.send("test",e,[e.buffer])}catch(t){(0,_util.warn)("Cannot use postMessage transfers."),e[0]=0,r.send("test",e)}};return void o()}catch(e){(0,_util.info)("The worker has been disabled.")}}this._setupFakeWorker()}_setupFakeWorker(){isWorkerDisabled||((0,_util.warn)("Setting up fake worker."),isWorkerDisabled=!0),setupFakeWorkerGlobal().then((e=>{if(this.destroyed)return void this._readyCapability.reject(new Error("Worker was destroyed"));const t=new LoopbackPort;this._port=t;const r="fake"+nextFakeWorkerId++,n=new _message_handler.MessageHandler(r+"_worker",r,t);e.setup(n,t);const i=new _message_handler.MessageHandler(r,r+"_worker",t);this._messageHandler=i,this._readyCapability.resolve(),i.send("configure",{verbosity:this.verbosity})})).catch((e=>{this._readyCapability.reject(new Error(`Setting up fake worker failed: "${e.message}".`))}))}destroy(){this.destroyed=!0,this._webWorker&&(this._webWorker.terminate(),this._webWorker=null),pdfWorkerPorts.delete(this._port),this._port=null,this._messageHandler&&(this._messageHandler.destroy(),this._messageHandler=null)}static fromPort(e){if(!e||!e.port)throw new Error("PDFWorker.fromPort - invalid method signature.");return pdfWorkerPorts.has(e.port)?pdfWorkerPorts.get(e.port):new PDFWorker(e)}static getWorkerSrc(){return getWorkerSrc()}}return PDFWorker}();exports.PDFWorker=PDFWorker;class WorkerTransport{constructor(e,t,r,n){this.messageHandler=e,this.loadingTask=t,this.commonObjs=new PDFObjects,this.fontLoader=new _font_loader.FontLoader({docId:t.docId,onUnsupportedFeature:this._onUnsupportedFeature.bind(this)}),this._params=n,this.CMapReaderFactory=new n.CMapReaderFactory({baseUrl:n.cMapUrl,isCompressed:n.cMapPacked}),this.destroyed=!1,this.destroyCapability=null,this._passwordCapability=null,this._networkStream=r,this._fullReader=null,this._lastProgress=null,this.pageCache=[],this.pagePromises=[],this.downloadInfoCapability=(0,_util.createPromiseCapability)(),this.setupMessageHandler()}destroy(){if(this.destroyCapability)return this.destroyCapability.promise;this.destroyed=!0,this.destroyCapability=(0,_util.createPromiseCapability)(),this._passwordCapability&&this._passwordCapability.reject(new Error("Worker was destroyed during onPassword callback"));const e=[];this.pageCache.forEach((function(t){t&&e.push(t._destroy())})),this.pageCache.length=0,this.pagePromises.length=0;const t=this.messageHandler.sendWithPromise("Terminate",null);return e.push(t),Promise.all(e).then((()=>{this.fontLoader.clear(),this._networkStream&&this._networkStream.cancelAllRequests(new _util.AbortException("Worker was terminated.")),this.messageHandler&&(this.messageHandler.destroy(),this.messageHandler=null),this.destroyCapability.resolve()}),this.destroyCapability.reject),this.destroyCapability.promise}setupMessageHandler(){const{messageHandler:e,loadingTask:t}=this;e.on("GetReader",((e,t)=>{(0,_util.assert)(this._networkStream,"GetReader - no `IPDFStream` instance available."),this._fullReader=this._networkStream.getFullReader(),this._fullReader.onProgress=e=>{this._lastProgress={loaded:e.loaded,total:e.total}},t.onPull=()=>{this._fullReader.read().then((function({value:e,done:r}){r?t.close():((0,_util.assert)((0,_util.isArrayBuffer)(e),"GetReader - expected an ArrayBuffer."),t.enqueue(new Uint8Array(e),1,[e]))})).catch((e=>{t.error(e)}))},t.onCancel=e=>{this._fullReader.cancel(e)}})),e.on("ReaderHeadersReady",(e=>{const r=(0,_util.createPromiseCapability)(),n=this._fullReader;return n.headersReady.then((()=>{n.isStreamingSupported&&n.isRangeSupported||(this._lastProgress&&t.onProgress&&t.onProgress(this._lastProgress),n.onProgress=e=>{t.onProgress&&t.onProgress({loaded:e.loaded,total:e.total})}),r.resolve({isStreamingSupported:n.isStreamingSupported,isRangeSupported:n.isRangeSupported,contentLength:n.contentLength})}),r.reject),r.promise})),e.on("GetRangeReader",((e,t)=>{(0,_util.assert)(this._networkStream,"GetRangeReader - no `IPDFStream` instance available.");const r=this._networkStream.getRangeReader(e.begin,e.end);r?(t.onPull=()=>{r.read().then((function({value:e,done:r}){r?t.close():((0,_util.assert)((0,_util.isArrayBuffer)(e),"GetRangeReader - expected an ArrayBuffer."),t.enqueue(new Uint8Array(e),1,[e]))})).catch((e=>{t.error(e)}))},t.onCancel=e=>{r.cancel(e)}):t.close()})),e.on("GetDoc",(({pdfInfo:e})=>{this._numPages=e.numPages,t._capability.resolve(new PDFDocumentProxy(e,this))})),e.on("DocException",(function(e){let r;switch(e.name){case"PasswordException":r=new _util.PasswordException(e.message,e.code);break;case"InvalidPDFException":r=new _util.InvalidPDFException(e.message);break;case"MissingPDFException":r=new _util.MissingPDFException(e.message);break;case"UnexpectedResponseException":r=new _util.UnexpectedResponseException(e.message,e.status);break;case"UnknownErrorException":r=new _util.UnknownErrorException(e.message,e.details)}t._capability.reject(r)})),e.on("PasswordRequest",(e=>{if(this._passwordCapability=(0,_util.createPromiseCapability)(),t.onPassword){const r=e=>{this._passwordCapability.resolve({password:e})};try{t.onPassword(r,e.code)}catch(e){this._passwordCapability.reject(e)}}else this._passwordCapability.reject(new _util.PasswordException(e.message,e.code));return this._passwordCapability.promise})),e.on("DataLoaded",(e=>{t.onProgress&&t.onProgress({loaded:e.length,total:e.length}),this.downloadInfoCapability.resolve(e)})),e.on("StartRenderPage",(e=>{this.destroyed||this.pageCache[e.pageIndex]._startRenderPage(e.transparency,e.intent)})),e.on("commonobj",(t=>{if(this.destroyed)return;const[r,n,i]=t;if(!this.commonObjs.has(r))switch(n){case"Font":const t=this._params;if("error"in i){const e=i.error;(0,_util.warn)(`Error during font loading: ${e}`),this.commonObjs.resolve(r,e);break}let o=null;t.pdfBug&&globalThis.FontInspector&&globalThis.FontInspector.enabled&&(o={registerFont(e,t){globalThis.FontInspector.fontAdded(e,t)}});const a=new _font_loader.FontFaceObject(i,{isEvalSupported:t.isEvalSupported,disableFontFace:t.disableFontFace,ignoreErrors:t.ignoreErrors,onUnsupportedFeature:this._onUnsupportedFeature.bind(this),fontRegistry:o});this.fontLoader.bind(a).catch((t=>e.sendWithPromise("FontFallback",{id:r}))).finally((()=>{!t.fontExtraProperties&&a.data&&(a.data=null),this.commonObjs.resolve(r,a)}));break;case"FontPath":case"FontType3Res":case"Image":this.commonObjs.resolve(r,i);break;default:throw new Error(`Got unknown common object type ${n}`)}})),e.on("obj",(e=>{if(this.destroyed)return;const[t,r,n,i]=e,o=this.pageCache[r];if(!o.objs.has(t))switch(n){case"Image":o.objs.resolve(t,i);const e=8e6;i&&"data"in i&&i.data.length>e&&(o.cleanupAfterRender=!0);break;default:throw new Error(`Got unknown object type ${n}`)}})),e.on("DocProgress",(e=>{this.destroyed||t.onProgress&&t.onProgress({loaded:e.loaded,total:e.total})})),e.on("UnsupportedFeature",this._onUnsupportedFeature.bind(this)),e.on("FetchBuiltInCMap",((e,t)=>{if(this.destroyed)return void t.error(new Error("Worker was destroyed"));let r=!1;t.onPull=()=>{r?t.close():(r=!0,this.CMapReaderFactory.fetch(e).then((function(e){t.enqueue(e,1,[e.cMapData.buffer])})).catch((function(e){t.error(e)})))}}))}_onUnsupportedFeature({featureId:e}){this.destroyed||this.loadingTask.onUnsupportedFeature&&this.loadingTask.onUnsupportedFeature(e)}getData(){return this.messageHandler.sendWithPromise("GetData",null)}getPage(e){if(!Number.isInteger(e)||e<=0||e>this._numPages)return Promise.reject(new Error("Invalid page request"));const t=e-1;if(t in this.pagePromises)return this.pagePromises[t];const r=this.messageHandler.sendWithPromise("GetPage",{pageIndex:t}).then((e=>{if(this.destroyed)throw new Error("Transport destroyed");const r=new PDFPageProxy(t,e,this,this._params.pdfBug);return this.pageCache[t]=r,r}));return this.pagePromises[t]=r,r}getPageIndex(e){return this.messageHandler.sendWithPromise("GetPageIndex",{ref:e}).catch((function(e){return Promise.reject(new Error(e))}))}getAnnotations(e,t){return this.messageHandler.sendWithPromise("GetAnnotations",{pageIndex:e,intent:t})}getDestinations(){return this.messageHandler.sendWithPromise("GetDestinations",null)}getDestination(e){return"string"!=typeof e?Promise.reject(new Error("Invalid destination request.")):this.messageHandler.sendWithPromise("GetDestination",{id:e})}getPageLabels(){return this.messageHandler.sendWithPromise("GetPageLabels",null)}getPageLayout(){return this.messageHandler.sendWithPromise("GetPageLayout",null)}getPageMode(){return this.messageHandler.sendWithPromise("GetPageMode",null)}getViewerPreferences(){return this.messageHandler.sendWithPromise("GetViewerPreferences",null)}getOpenAction(){return this.messageHandler.sendWithPromise("GetOpenAction",null)}getAttachments(){return this.messageHandler.sendWithPromise("GetAttachments",null)}getJavaScript(){return this.messageHandler.sendWithPromise("GetJavaScript",null)}getOutline(){return this.messageHandler.sendWithPromise("GetOutline",null)}getPermissions(){return this.messageHandler.sendWithPromise("GetPermissions",null)}getMetadata(){return this.messageHandler.sendWithPromise("GetMetadata",null).then((e=>({info:e[0],metadata:e[1]?new _metadata.Metadata(e[1]):null,contentDispositionFilename:this._fullReader?this._fullReader.filename:null})))}getStats(){return this.messageHandler.sendWithPromise("GetStats",null)}startCleanup(){return this.messageHandler.sendWithPromise("Cleanup",null).then((()=>{for(let e=0,t=this.pageCache.length;e<t;e++){const t=this.pageCache[e];if(t&&!t.cleanup())throw new Error(`startCleanup: Page ${e+1} is currently rendering.`)}this.commonObjs.clear(),this.fontLoader.clear()}))}get loadingParams(){const e=this._params;return(0,_util.shadow)(this,"loadingParams",{disableAutoFetch:e.disableAutoFetch,disableFontFace:e.disableFontFace})}}class PDFObjects{constructor(){this._objs=Object.create(null)}_ensureObj(e){return this._objs[e]?this._objs[e]:this._objs[e]={capability:(0,_util.createPromiseCapability)(),data:null,resolved:!1}}get(e,t=null){if(t)return this._ensureObj(e).capability.promise.then(t),null;const r=this._objs[e];if(!r||!r.resolved)throw new Error(`Requesting object that isn't resolved yet ${e}.`);return r.data}has(e){const t=this._objs[e];return!!t&&t.resolved}resolve(e,t){const r=this._ensureObj(e);r.resolved=!0,r.data=t,r.capability.resolve(t)}clear(){this._objs=Object.create(null)}}class RenderTask{constructor(e){this._internalRenderTask=e,this.onContinue=null}get promise(){return this._internalRenderTask.capability.promise}cancel(){this._internalRenderTask.cancel()}}const InternalRenderTask=function(){const e=new WeakSet;return class{constructor({callback:e,params:t,objs:r,commonObjs:n,operatorList:i,pageIndex:o,canvasFactory:a,webGLContext:s,useRequestAnimationFrame:c=!1,pdfBug:u=!1}){this.callback=e,this.params=t,this.objs=r,this.commonObjs=n,this.operatorListIdx=null,this.operatorList=i,this._pageIndex=o,this.canvasFactory=a,this.webGLContext=s,this._pdfBug=u,this.running=!1,this.graphicsReadyCallback=null,this.graphicsReady=!1,this._useRequestAnimationFrame=!0===c&&"undefined"!=typeof window,this.cancelled=!1,this.capability=(0,_util.createPromiseCapability)(),this.task=new RenderTask(this),this._continueBound=this._continue.bind(this),this._scheduleNextBound=this._scheduleNext.bind(this),this._nextBound=this._next.bind(this),this._canvas=t.canvasContext.canvas}initializeGraphics(t=!1){if(this.cancelled)return;if(this._canvas){if(e.has(this._canvas))throw new Error("Cannot use the same canvas during multiple render() operations. Use different canvas or ensure previous operations were cancelled or completed.");e.add(this._canvas)}this._pdfBug&&globalThis.StepperManager&&globalThis.StepperManager.enabled&&(this.stepper=globalThis.StepperManager.create(this._pageIndex),this.stepper.init(this.operatorList),this.stepper.nextBreakPoint=this.stepper.getNextBreakPoint());const{canvasContext:r,viewport:n,transform:i,imageLayer:o,background:a}=this.params;this.gfx=new _canvas.CanvasGraphics(r,this.commonObjs,this.objs,this.canvasFactory,this.webGLContext,o),this.gfx.beginDrawing({transform:i,viewport:n,transparency:t,background:a}),this.operatorListIdx=0,this.graphicsReady=!0,this.graphicsReadyCallback&&this.graphicsReadyCallback()}cancel(t=null){this.running=!1,this.cancelled=!0,this.gfx&&this.gfx.endDrawing(),this._canvas&&e.delete(this._canvas),this.callback(t||new _display_utils.RenderingCancelledException(`Rendering cancelled, page ${this._pageIndex+1}`,"canvas"))}operatorListChanged(){this.graphicsReady?(this.stepper&&this.stepper.updateOperatorList(this.operatorList),this.running||this._continue()):this.graphicsReadyCallback||(this.graphicsReadyCallback=this._continueBound)}_continue(){this.running=!0,this.cancelled||(this.task.onContinue?this.task.onContinue(this._scheduleNextBound):this._scheduleNext())}_scheduleNext(){this._useRequestAnimationFrame?window.requestAnimationFrame((()=>{this._nextBound().catch(this.cancel.bind(this))})):Promise.resolve().then(this._nextBound).catch(this.cancel.bind(this))}async _next(){this.cancelled||(this.operatorListIdx=this.gfx.executeOperatorList(this.operatorList,this.operatorListIdx,this._continueBound,this.stepper),this.operatorListIdx===this.operatorList.argsArray.length&&(this.running=!1,this.operatorList.lastChunk&&(this.gfx.endDrawing(),this._canvas&&e.delete(this._canvas),this.callback())))}}}(),version="2.5.207";exports.version=version;const build="0974d605";exports.build=build},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.FontLoader=t.FontFaceObject=void 0;var n=r(2);class i{constructor({docId:e,onUnsupportedFeature:t}){this.constructor===i&&(0,n.unreachable)("Cannot initialize BaseFontLoader."),this.docId=e,this._onUnsupportedFeature=t,this.nativeFontFaces=[],this.styleElement=null}addNativeFontFace(e){this.nativeFontFaces.push(e),document.fonts.add(e)}insertRule(e){let t=this.styleElement;t||(t=this.styleElement=document.createElement("style"),t.id=`PDFJS_FONT_STYLE_TAG_${this.docId}`,document.documentElement.getElementsByTagName("head")[0].appendChild(t));const r=t.sheet;r.insertRule(e,r.cssRules.length)}clear(){this.nativeFontFaces.forEach((function(e){document.fonts.delete(e)})),this.nativeFontFaces.length=0,this.styleElement&&(this.styleElement.remove(),this.styleElement=null)}async bind(e){if(e.attached||e.missingFile)return;if(e.attached=!0,this.isFontLoadingAPISupported){const t=e.createNativeFontFace();if(t){this.addNativeFontFace(t);try{await t.loaded}catch(r){throw this._onUnsupportedFeature({featureId:n.UNSUPPORTED_FEATURES.errorFontLoadNative}),(0,n.warn)(`Failed to load font '${t.family}': '${r}'.`),e.disableFontFace=!0,r}}return}const t=e.createFontFaceRule();if(t){if(this.insertRule(t),this.isSyncFontLoadingSupported)return;await new Promise((r=>{const n=this._queueLoadingCallback(r);this._prepareFontLoadEvent([t],[e],n)}))}}_queueLoadingCallback(e){(0,n.unreachable)("Abstract method `_queueLoadingCallback`.")}get isFontLoadingAPISupported(){const e="undefined"!=typeof document&&!!document.fonts;return(0,n.shadow)(this,"isFontLoadingAPISupported",e)}get isSyncFontLoadingSupported(){(0,n.unreachable)("Abstract method `isSyncFontLoadingSupported`.")}get _loadTestFont(){(0,n.unreachable)("Abstract method `_loadTestFont`.")}_prepareFontLoadEvent(e,t,r){(0,n.unreachable)("Abstract method `_prepareFontLoadEvent`.")}}let o;t.FontLoader=o,t.FontLoader=o=class extends i{constructor(e){super(e),this.loadingContext={requests:[],nextRequestId:0},this.loadTestFontId=0}get isSyncFontLoadingSupported(){let e=!1;if("undefined"==typeof navigator)e=!0;else{const t=/Mozilla\/5.0.*?rv:(\d+).*? Gecko/.exec(navigator.userAgent);t&&t[1]>=14&&(e=!0)}return(0,n.shadow)(this,"isSyncFontLoadingSupported",e)}_queueLoadingCallback(e){const t=this.loadingContext,r={id:"pdfjs-font-loading-"+t.nextRequestId++,done:!1,complete:function(){for((0,n.assert)(!r.done,"completeRequest() cannot be called twice."),r.done=!0;t.requests.length>0&&t.requests[0].done;){const e=t.requests.shift();setTimeout(e.callback,0)}},callback:e};return t.requests.push(r),r}get _loadTestFont(){return(0,n.shadow)(this,"_loadTestFont",atob("T1RUTwALAIAAAwAwQ0ZGIDHtZg4AAAOYAAAAgUZGVE1lkzZwAAAEHAAAABxHREVGABQAFQAABDgAAAAeT1MvMlYNYwkAAAEgAAAAYGNtYXABDQLUAAACNAAAAUJoZWFk/xVFDQAAALwAAAA2aGhlYQdkA+oAAAD0AAAAJGhtdHgD6AAAAAAEWAAAAAZtYXhwAAJQAAAAARgAAAAGbmFtZVjmdH4AAAGAAAAAsXBvc3T/hgAzAAADeAAAACAAAQAAAAEAALZRFsRfDzz1AAsD6AAAAADOBOTLAAAAAM4KHDwAAAAAA+gDIQAAAAgAAgAAAAAAAAABAAADIQAAAFoD6AAAAAAD6AABAAAAAAAAAAAAAAAAAAAAAQAAUAAAAgAAAAQD6AH0AAUAAAKKArwAAACMAooCvAAAAeAAMQECAAACAAYJAAAAAAAAAAAAAQAAAAAAAAAAAAAAAFBmRWQAwAAuAC4DIP84AFoDIQAAAAAAAQAAAAAAAAAAACAAIAABAAAADgCuAAEAAAAAAAAAAQAAAAEAAAAAAAEAAQAAAAEAAAAAAAIAAQAAAAEAAAAAAAMAAQAAAAEAAAAAAAQAAQAAAAEAAAAAAAUAAQAAAAEAAAAAAAYAAQAAAAMAAQQJAAAAAgABAAMAAQQJAAEAAgABAAMAAQQJAAIAAgABAAMAAQQJAAMAAgABAAMAAQQJAAQAAgABAAMAAQQJAAUAAgABAAMAAQQJAAYAAgABWABYAAAAAAAAAwAAAAMAAAAcAAEAAAAAADwAAwABAAAAHAAEACAAAAAEAAQAAQAAAC7//wAAAC7////TAAEAAAAAAAABBgAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAD/gwAyAAAAAQAAAAAAAAAAAAAAAAAAAAABAAQEAAEBAQJYAAEBASH4DwD4GwHEAvgcA/gXBIwMAYuL+nz5tQXkD5j3CBLnEQACAQEBIVhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYAAABAQAADwACAQEEE/t3Dov6fAH6fAT+fPp8+nwHDosMCvm1Cvm1DAz6fBQAAAAAAAABAAAAAMmJbzEAAAAAzgTjFQAAAADOBOQpAAEAAAAAAAAADAAUAAQAAAABAAAAAgABAAAAAAAAAAAD6AAAAAAAAA=="))}_prepareFontLoadEvent(e,t,r){function i(e,t){return e.charCodeAt(t)<<24|e.charCodeAt(t+1)<<16|e.charCodeAt(t+2)<<8|255&e.charCodeAt(t+3)}function o(e,t,r,n){return e.substring(0,t)+n+e.substring(t+r)}let a,s;const c=document.createElement("canvas");c.width=1,c.height=1;const u=c.getContext("2d");let l=0;const h=`lt${Date.now()}${this.loadTestFontId++}`;let f=this._loadTestFont;f=o(f,976,h.length,h);const p=1482184792;let d=i(f,16);for(a=0,s=h.length-3;a<s;a+=4)d=d-p+i(h,a)|0;a<h.length&&(d=d-p+i(h+"XXX",a)|0),f=o(f,16,4,(0,n.string32)(d));const g=`@font-face {font-family:"${h}";src:url(data:font/opentype;base64,${btoa(f)});}`;this.insertRule(g);const m=[];for(a=0,s=t.length;a<s;a++)m.push(t[a].loadedName);m.push(h);const v=document.createElement("div");for(v.style.visibility="hidden",v.style.width=v.style.height="10px",v.style.position="absolute",v.style.top=v.style.left="0px",a=0,s=m.length;a<s;++a){const e=document.createElement("span");e.textContent="Hi",e.style.fontFamily=m[a],v.appendChild(e)}document.body.appendChild(v),function e(t,r){if(l++,l>30)return(0,n.warn)("Load test font never loaded."),void r();u.font="30px "+t,u.fillText(".",0,20),u.getImageData(0,0,1,1).data[3]>0?r():setTimeout(e.bind(null,t,r))}(h,(function(){document.body.removeChild(v),r.complete()}))}},t.FontFaceObject=class{constructor(e,{isEvalSupported:t=!0,disableFontFace:r=!1,ignoreErrors:n=!1,onUnsupportedFeature:i=null,fontRegistry:o=null}){this.compiledGlyphs=Object.create(null);for(const t in e)this[t]=e[t];this.isEvalSupported=!1!==t,this.disableFontFace=!0===r,this.ignoreErrors=!0===n,this._onUnsupportedFeature=i,this.fontRegistry=o}createNativeFontFace(){if(!this.data||this.disableFontFace)return null;const e=new FontFace(this.loadedName,this.data,{});return this.fontRegistry&&this.fontRegistry.registerFont(this),e}createFontFaceRule(){if(!this.data||this.disableFontFace)return null;const e=(0,n.bytesToString)(new Uint8Array(this.data)),t=`url(data:${this.mimetype};base64,${btoa(e)});`,r=`@font-face {font-family:"${this.loadedName}";src:${t}}`;return this.fontRegistry&&this.fontRegistry.registerFont(this,t),r}getPathGenerator(e,t){if(void 0!==this.compiledGlyphs[t])return this.compiledGlyphs[t];let r,i;try{r=e.get(this.loadedName+"_path_"+t)}catch(e){if(!this.ignoreErrors)throw e;return this._onUnsupportedFeature&&this._onUnsupportedFeature({featureId:n.UNSUPPORTED_FEATURES.errorFontGetPath}),(0,n.warn)(`getPathGenerator - ignoring character: "${e}".`),this.compiledGlyphs[t]=function(e,t){}}if(this.isEvalSupported&&n.IsEvalSupportedCached.value){let e,n="";for(let t=0,o=r.length;t<o;t++)i=r[t],e=void 0!==i.args?i.args.join(","):"",n+="c."+i.cmd+"("+e+");\n";return this.compiledGlyphs[t]=new Function("c","size",n)}return this.compiledGlyphs[t]=function(e,t){for(let n=0,o=r.length;n<o;n++)i=r[n],"scale"===i.cmd&&(i.args=[t,-t]),e[i.cmd].apply(e,i.args)}}}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.apiCompatibilityParams=void 0;var n=r(4);const i=Object.create(null);n.isNodeJS&&(i.disableFontFace=!0);const o=Object.freeze(i);t.apiCompatibilityParams=o},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.CanvasGraphics=void 0;var n=r(2),i=r(9),o=4096,a=.65,s=16;function c(e){e.mozCurrentTransform||(e._originalSave=e.save,e._originalRestore=e.restore,e._originalRotate=e.rotate,e._originalScale=e.scale,e._originalTranslate=e.translate,e._originalTransform=e.transform,e._originalSetTransform=e.setTransform,e._transformMatrix=e._transformMatrix||[1,0,0,1,0,0],e._transformStack=[],Object.defineProperty(e,"mozCurrentTransform",{get:function(){return this._transformMatrix}}),Object.defineProperty(e,"mozCurrentTransformInverse",{get:function(){var e=this._transformMatrix,t=e[0],r=e[1],n=e[2],i=e[3],o=e[4],a=e[5],s=t*i-r*n,c=r*n-t*i;return[i/s,r/c,n/c,t/s,(i*o-n*a)/c,(r*o-t*a)/s]}}),e.save=function(){var e=this._transformMatrix;this._transformStack.push(e),this._transformMatrix=e.slice(0,6),this._originalSave()},e.restore=function(){var e=this._transformStack.pop();e&&(this._transformMatrix=e,this._originalRestore())},e.translate=function(e,t){var r=this._transformMatrix;r[4]=r[0]*e+r[2]*t+r[4],r[5]=r[1]*e+r[3]*t+r[5],this._originalTranslate(e,t)},e.scale=function(e,t){var r=this._transformMatrix;r[0]=r[0]*e,r[1]=r[1]*e,r[2]=r[2]*t,r[3]=r[3]*t,this._originalScale(e,t)},e.transform=function(t,r,n,i,o,a){var s=this._transformMatrix;this._transformMatrix=[s[0]*t+s[2]*r,s[1]*t+s[3]*r,s[0]*n+s[2]*i,s[1]*n+s[3]*i,s[0]*o+s[2]*a+s[4],s[1]*o+s[3]*a+s[5]],e._originalTransform(t,r,n,i,o,a)},e.setTransform=function(t,r,n,i,o,a){this._transformMatrix=[t,r,n,i,o,a],e._originalSetTransform(t,r,n,i,o,a)},e.rotate=function(e){var t=Math.cos(e),r=Math.sin(e),n=this._transformMatrix;this._transformMatrix=[n[0]*t+n[2]*r,n[1]*t+n[3]*r,n[0]*-r+n[2]*t,n[1]*-r+n[3]*t,n[4],n[5]],this._originalRotate(e)})}var u=function(){function e(e){this.canvasFactory=e,this.cache=Object.create(null)}return e.prototype={getCanvas:function(e,t,r,n){var i;return void 0!==this.cache[e]?(i=this.cache[e],this.canvasFactory.reset(i,t,r),i.context.setTransform(1,0,0,1,0,0)):(i=this.canvasFactory.create(t,r),this.cache[e]=i),n&&c(i.context),i},clear(){for(var e in this.cache){var t=this.cache[e];this.canvasFactory.destroy(t),delete this.cache[e]}}},e}(),l=function(){function e(){this.alphaIsShape=!1,this.fontSize=0,this.fontSizeScale=1,this.textMatrix=n.IDENTITY_MATRIX,this.textMatrixScale=1,this.fontMatrix=n.FONT_IDENTITY_MATRIX,this.leading=0,this.x=0,this.y=0,this.lineX=0,this.lineY=0,this.charSpacing=0,this.wordSpacing=0,this.textHScale=1,this.textRenderingMode=n.TextRenderingMode.FILL,this.textRise=0,this.fillColor="#000000",this.strokeColor="#000000",this.patternFill=!1,this.fillAlpha=1,this.strokeAlpha=1,this.lineWidth=1,this.activeSMask=null,this.resumeSMaskCtx=null}return e.prototype={clone:function(){return Object.create(this)},setCurrentPoint:function(e,t){this.x=e,this.y=t}},e}(),h=function(){function e(e,t,r,n,i,o){this.ctx=e,this.current=new l,this.stateStack=[],this.pendingClip=null,this.pendingEOFill=!1,this.res=null,this.xobjs=null,this.commonObjs=t,this.objs=r,this.canvasFactory=n,this.webGLContext=i,this.imageLayer=o,this.groupStack=[],this.processingType3=null,this.baseTransform=null,this.baseTransformStack=[],this.groupLevel=0,this.smaskStack=[],this.smaskCounter=0,this.tempSMask=null,this.cachedCanvases=new u(this.canvasFactory),e&&c(e),this._cachedGetSinglePixelWidth=null}function t(e,t){if("undefined"!=typeof ImageData&&t instanceof ImageData)e.putImageData(t,0,0);else{var r,i,o,a,c,u=t.height,l=t.width,h=u%s,f=(u-h)/s,p=0===h?f:f+1,d=e.createImageData(l,s),g=0,m=t.data,v=d.data;if(t.kind===n.ImageKind.GRAYSCALE_1BPP){var y=m.byteLength,_=new Uint32Array(v.buffer,0,v.byteLength>>2),b=_.length,A=l+7>>3,x=4294967295,w=n.IsLittleEndianCached.value?4278190080:255;for(i=0;i<p;i++){for(a=i<f?s:h,r=0,o=0;o<a;o++){for(var S=y-g,E=0,C=S>A?l:8*S-7,k=-8&C,P=0,R=0;E<k;E+=8)R=m[g++],_[r++]=128&R?x:w,_[r++]=64&R?x:w,_[r++]=32&R?x:w,_[r++]=16&R?x:w,_[r++]=8&R?x:w,_[r++]=4&R?x:w,_[r++]=2&R?x:w,_[r++]=1&R?x:w;for(;E<C;E++)0===P&&(R=m[g++],P=128),_[r++]=R&P?x:w,P>>=1}for(;r<b;)_[r++]=0;e.putImageData(d,0,i*s)}}else if(t.kind===n.ImageKind.RGBA_32BPP){for(o=0,c=l*s*4,i=0;i<f;i++)v.set(m.subarray(g,g+c)),g+=c,e.putImageData(d,0,o),o+=s;i<p&&(c=l*h*4,v.set(m.subarray(g,g+c)),e.putImageData(d,0,o))}else{if(t.kind!==n.ImageKind.RGB_24BPP)throw new Error(`bad image kind: ${t.kind}`);for(c=l*(a=s),i=0;i<p;i++){for(i>=f&&(c=l*(a=h)),r=0,o=c;o--;)v[r++]=m[g++],v[r++]=m[g++],v[r++]=m[g++],v[r++]=255;e.putImageData(d,0,i*s)}}}}function r(e,t){for(var r=t.height,n=t.width,i=r%s,o=(r-i)/s,a=0===i?o:o+1,c=e.createImageData(n,s),u=0,l=t.data,h=c.data,f=0;f<a;f++){for(var p=f<o?s:i,d=3,g=0;g<p;g++)for(var m=0,v=0;v<n;v++){if(!m){var y=l[u++];m=128}h[d]=y&m?0:255,d+=4,m>>=1}e.putImageData(c,0,f*s)}}function h(e,t){for(var r=["strokeStyle","fillStyle","fillRule","globalAlpha","lineWidth","lineCap","lineJoin","miterLimit","globalCompositeOperation","font"],n=0,i=r.length;n<i;n++){var o=r[n];void 0!==e[o]&&(t[o]=e[o])}void 0!==e.setLineDash&&(t.setLineDash(e.getLineDash()),t.lineDashOffset=e.lineDashOffset)}function f(e){e.strokeStyle="#000000",e.fillStyle="#000000",e.fillRule="nonzero",e.globalAlpha=1,e.lineWidth=1,e.lineCap="butt",e.lineJoin="miter",e.miterLimit=10,e.globalCompositeOperation="source-over",e.font="10px sans-serif",void 0!==e.setLineDash&&(e.setLineDash([]),e.lineDashOffset=0)}function p(e,t,r,n){for(var i=e.length,o=3;o<i;o+=4){var a=e[o];if(0===a)e[o-3]=t,e[o-2]=r,e[o-1]=n;else if(a<255){var s=255-a;e[o-3]=e[o-3]*a+t*s>>8,e[o-2]=e[o-2]*a+r*s>>8,e[o-1]=e[o-1]*a+n*s>>8}}}function d(e,t,r){for(var n=e.length,i=3;i<n;i+=4){var o=r?r[e[i]]:e[i];t[i]=t[i]*o*.00392156862745098|0}}function g(e,t,r){for(var n=e.length,i=3;i<n;i+=4){var o=77*e[i-3]+152*e[i-2]+28*e[i-1];t[i]=r?t[i]*r[o>>8]>>8:t[i]*o>>16}}function m(e,t,r,n){var i=t.canvas,o=t.context;e.setTransform(t.scaleX,0,0,t.scaleY,t.offsetX,t.offsetY);var a=t.backdrop||null;if(!t.transferMap&&n.isEnabled){const o=n.composeSMask({layer:r.canvas,mask:i,properties:{subtype:t.subtype,backdrop:a}});return e.setTransform(1,0,0,1,0,0),void e.drawImage(o,t.offsetX,t.offsetY)}!function(e,t,r,n,i,o,a){var s,c=!!o,u=c?o[0]:0,l=c?o[1]:0,h=c?o[2]:0;s="Luminosity"===i?g:d;for(var f=Math.min(n,Math.ceil(1048576/r)),m=0;m<n;m+=f){var v=Math.min(f,n-m),y=e.getImageData(0,m,r,v),_=t.getImageData(0,m,r,v);c&&p(y.data,u,l,h),s(y.data,_.data,a),e.putImageData(_,0,m)}}(o,r,i.width,i.height,t.subtype,a,t.transferMap),e.drawImage(i,0,0)}var v=["butt","round","square"],y=["miter","round","bevel"],_={},b={};for(var A in e.prototype={beginDrawing({transform:e,viewport:t,transparency:r=!1,background:n=null}){var i=this.ctx.canvas.width,o=this.ctx.canvas.height;if(this.ctx.save(),this.ctx.fillStyle=n||"rgb(255, 255, 255)",this.ctx.fillRect(0,0,i,o),this.ctx.restore(),r){var a=this.cachedCanvases.getCanvas("transparent",i,o,!0);this.compositeCtx=this.ctx,this.transparentCanvas=a.canvas,this.ctx=a.context,this.ctx.save(),this.ctx.transform.apply(this.ctx,this.compositeCtx.mozCurrentTransform)}this.ctx.save(),f(this.ctx),e&&this.ctx.transform.apply(this.ctx,e),this.ctx.transform.apply(this.ctx,t.transform),this.baseTransform=this.ctx.mozCurrentTransform.slice(),this.imageLayer&&this.imageLayer.beginLayout()},executeOperatorList:function(e,t,r,i){var o=e.argsArray,a=e.fnArray,s=t||0,c=o.length;if(c===s)return s;for(var u,l=c-s>10&&"function"==typeof r,h=l?Date.now()+15:0,f=0,p=this.commonObjs,d=this.objs;;){if(void 0!==i&&s===i.nextBreakPoint)return i.breakIt(s,r),s;if((u=a[s])!==n.OPS.dependency)this[u].apply(this,o[s]);else for(const e of o[s]){const t=e.startsWith("g_")?p:d;if(!t.has(e))return t.get(e,r),s}if(++s===c)return s;if(l&&++f>10){if(Date.now()>h)return r(),s;f=0}}},endDrawing:function(){null!==this.current.activeSMask&&this.endSMaskGroup(),this.ctx.restore(),this.transparentCanvas&&(this.ctx=this.compositeCtx,this.ctx.save(),this.ctx.setTransform(1,0,0,1,0,0),this.ctx.drawImage(this.transparentCanvas,0,0),this.ctx.restore(),this.transparentCanvas=null),this.cachedCanvases.clear(),this.webGLContext.clear(),this.imageLayer&&this.imageLayer.endLayout()},setLineWidth:function(e){this.current.lineWidth=e,this.ctx.lineWidth=e},setLineCap:function(e){this.ctx.lineCap=v[e]},setLineJoin:function(e){this.ctx.lineJoin=y[e]},setMiterLimit:function(e){this.ctx.miterLimit=e},setDash:function(e,t){var r=this.ctx;void 0!==r.setLineDash&&(r.setLineDash(e),r.lineDashOffset=t)},setRenderingIntent(e){},setFlatness(e){},setGState:function(e){for(var t=0,r=e.length;t<r;t++){var n=e[t],i=n[0],o=n[1];switch(i){case"LW":this.setLineWidth(o);break;case"LC":this.setLineCap(o);break;case"LJ":this.setLineJoin(o);break;case"ML":this.setMiterLimit(o);break;case"D":this.setDash(o[0],o[1]);break;case"RI":this.setRenderingIntent(o);break;case"FL":this.setFlatness(o);break;case"Font":this.setFont(o[0],o[1]);break;case"CA":this.current.strokeAlpha=n[1];break;case"ca":this.current.fillAlpha=n[1],this.ctx.globalAlpha=n[1];break;case"BM":this.ctx.globalCompositeOperation=o;break;case"SMask":this.current.activeSMask&&(this.stateStack.length>0&&this.stateStack[this.stateStack.length-1].activeSMask===this.current.activeSMask?this.suspendSMaskGroup():this.endSMaskGroup()),this.current.activeSMask=o?this.tempSMask:null,this.current.activeSMask&&this.beginSMaskGroup(),this.tempSMask=null}}},beginSMaskGroup:function(){var e=this.current.activeSMask,t=e.canvas.width,r=e.canvas.height,n="smaskGroupAt"+this.groupLevel,i=this.cachedCanvases.getCanvas(n,t,r,!0),o=this.ctx,a=o.mozCurrentTransform;this.ctx.save();var s=i.context;s.scale(1/e.scaleX,1/e.scaleY),s.translate(-e.offsetX,-e.offsetY),s.transform.apply(s,a),e.startTransformInverse=s.mozCurrentTransformInverse,h(o,s),this.ctx=s,this.setGState([["BM","source-over"],["ca",1],["CA",1]]),this.groupStack.push(o),this.groupLevel++},suspendSMaskGroup:function(){var e=this.ctx;this.groupLevel--,this.ctx=this.groupStack.pop(),m(this.ctx,this.current.activeSMask,e,this.webGLContext),this.ctx.restore(),this.ctx.save(),h(e,this.ctx),this.current.resumeSMaskCtx=e;var t=n.Util.transform(this.current.activeSMask.startTransformInverse,e.mozCurrentTransform);this.ctx.transform.apply(this.ctx,t),e.save(),e.setTransform(1,0,0,1,0,0),e.clearRect(0,0,e.canvas.width,e.canvas.height),e.restore()},resumeSMaskGroup:function(){var e=this.current.resumeSMaskCtx,t=this.ctx;this.ctx=e,this.groupStack.push(t),this.groupLevel++},endSMaskGroup:function(){var e=this.ctx;this.groupLevel--,this.ctx=this.groupStack.pop(),m(this.ctx,this.current.activeSMask,e,this.webGLContext),this.ctx.restore(),h(e,this.ctx);var t=n.Util.transform(this.current.activeSMask.startTransformInverse,e.mozCurrentTransform);this.ctx.transform.apply(this.ctx,t)},save:function(){this.ctx.save();var e=this.current;this.stateStack.push(e),this.current=e.clone(),this.current.resumeSMaskCtx=null},restore:function(){this.current.resumeSMaskCtx&&this.resumeSMaskGroup(),null===this.current.activeSMask||0!==this.stateStack.length&&this.stateStack[this.stateStack.length-1].activeSMask===this.current.activeSMask||this.endSMaskGroup(),0!==this.stateStack.length&&(this.current=this.stateStack.pop(),this.ctx.restore(),this.pendingClip=null,this._cachedGetSinglePixelWidth=null)},transform:function(e,t,r,n,i,o){this.ctx.transform(e,t,r,n,i,o),this._cachedGetSinglePixelWidth=null},constructPath:function(e,t){for(var r=this.ctx,i=this.current,o=i.x,a=i.y,s=0,c=0,u=e.length;s<u;s++)switch(0|e[s]){case n.OPS.rectangle:o=t[c++],a=t[c++];var l=t[c++],h=t[c++];0===l&&(l=this.getSinglePixelWidth()),0===h&&(h=this.getSinglePixelWidth());var f=o+l,p=a+h;this.ctx.moveTo(o,a),this.ctx.lineTo(f,a),this.ctx.lineTo(f,p),this.ctx.lineTo(o,p),this.ctx.lineTo(o,a),this.ctx.closePath();break;case n.OPS.moveTo:o=t[c++],a=t[c++],r.moveTo(o,a);break;case n.OPS.lineTo:o=t[c++],a=t[c++],r.lineTo(o,a);break;case n.OPS.curveTo:o=t[c+4],a=t[c+5],r.bezierCurveTo(t[c],t[c+1],t[c+2],t[c+3],o,a),c+=6;break;case n.OPS.curveTo2:r.bezierCurveTo(o,a,t[c],t[c+1],t[c+2],t[c+3]),o=t[c+2],a=t[c+3],c+=4;break;case n.OPS.curveTo3:o=t[c+2],a=t[c+3],r.bezierCurveTo(t[c],t[c+1],o,a,o,a),c+=4;break;case n.OPS.closePath:r.closePath()}i.setCurrentPoint(o,a)},closePath:function(){this.ctx.closePath()},stroke:function(e){e=void 0===e||e;var t=this.ctx,r=this.current.strokeColor;if(t.globalAlpha=this.current.strokeAlpha,r&&r.hasOwnProperty("type")&&"Pattern"===r.type){t.save();const e=t.mozCurrentTransform,i=n.Util.singularValueDecompose2dScale(e)[0];t.strokeStyle=r.getPattern(t,this),t.lineWidth=Math.max(this.getSinglePixelWidth()*a,this.current.lineWidth*i),t.stroke(),t.restore()}else t.lineWidth=Math.max(this.getSinglePixelWidth()*a,this.current.lineWidth),t.stroke();e&&this.consumePath(),t.globalAlpha=this.current.fillAlpha},closeStroke:function(){this.closePath(),this.stroke()},fill:function(e){e=void 0===e||e;var t=this.ctx,r=this.current.fillColor,n=!1;this.current.patternFill&&(t.save(),this.baseTransform&&t.setTransform.apply(t,this.baseTransform),t.fillStyle=r.getPattern(t,this),n=!0),this.pendingEOFill?(t.fill("evenodd"),this.pendingEOFill=!1):t.fill(),n&&t.restore(),e&&this.consumePath()},eoFill:function(){this.pendingEOFill=!0,this.fill()},fillStroke:function(){this.fill(!1),this.stroke(!1),this.consumePath()},eoFillStroke:function(){this.pendingEOFill=!0,this.fillStroke()},closeFillStroke:function(){this.closePath(),this.fillStroke()},closeEOFillStroke:function(){this.pendingEOFill=!0,this.closePath(),this.fillStroke()},endPath:function(){this.consumePath()},clip:function(){this.pendingClip=_},eoClip:function(){this.pendingClip=b},beginText:function(){this.current.textMatrix=n.IDENTITY_MATRIX,this.current.textMatrixScale=1,this.current.x=this.current.lineX=0,this.current.y=this.current.lineY=0},endText:function(){var e=this.pendingTextPaths,t=this.ctx;if(void 0!==e){t.save(),t.beginPath();for(var r=0;r<e.length;r++){var n=e[r];t.setTransform.apply(t,n.transform),t.translate(n.x,n.y),n.addToPath(t,n.fontSize)}t.restore(),t.clip(),t.beginPath(),delete this.pendingTextPaths}else t.beginPath()},setCharSpacing:function(e){this.current.charSpacing=e},setWordSpacing:function(e){this.current.wordSpacing=e},setHScale:function(e){this.current.textHScale=e/100},setLeading:function(e){this.current.leading=-e},setFont:function(e,t){var r=this.commonObjs.get(e),i=this.current;if(!r)throw new Error(`Can't find font for ${e}`);if(i.fontMatrix=r.fontMatrix?r.fontMatrix:n.FONT_IDENTITY_MATRIX,0!==i.fontMatrix[0]&&0!==i.fontMatrix[3]||(0,n.warn)("Invalid font matrix for font "+e),t<0?(t=-t,i.fontDirection=-1):i.fontDirection=1,this.current.font=r,this.current.fontSize=t,r.isType3Font)return;var o=r.loadedName||"sans-serif";let a="normal";r.black?a="900":r.bold&&(a="bold");var s=r.italic?"italic":"normal",c=`"${o}", ${r.fallbackName}`;let u=t;t<16?u=16:t>100&&(u=100),this.current.fontSizeScale=t/u,this.ctx.font=`${s} ${a} ${u}px ${c}`},setTextRenderingMode:function(e){this.current.textRenderingMode=e},setTextRise:function(e){this.current.textRise=e},moveText:function(e,t){this.current.x=this.current.lineX+=e,this.current.y=this.current.lineY+=t},setLeadingMoveText:function(e,t){this.setLeading(-t),this.moveText(e,t)},setTextMatrix:function(e,t,r,n,i,o){this.current.textMatrix=[e,t,r,n,i,o],this.current.textMatrixScale=Math.sqrt(e*e+t*t),this.current.x=this.current.lineX=0,this.current.y=this.current.lineY=0},nextLine:function(){this.moveText(0,this.current.leading)},paintChar(e,t,r,i){var o=this.ctx,a=this.current,s=a.font,c=a.textRenderingMode,u=a.fontSize/a.fontSizeScale,l=c&n.TextRenderingMode.FILL_STROKE_MASK,h=!!(c&n.TextRenderingMode.ADD_TO_PATH_FLAG);const f=a.patternFill&&!s.missingFile;var p;(s.disableFontFace||h||f)&&(p=s.getPathGenerator(this.commonObjs,e)),s.disableFontFace||f?(o.save(),o.translate(t,r),o.beginPath(),p(o,u),i&&o.setTransform.apply(o,i),l!==n.TextRenderingMode.FILL&&l!==n.TextRenderingMode.FILL_STROKE||o.fill(),l!==n.TextRenderingMode.STROKE&&l!==n.TextRenderingMode.FILL_STROKE||o.stroke(),o.restore()):(l!==n.TextRenderingMode.FILL&&l!==n.TextRenderingMode.FILL_STROKE||o.fillText(e,t,r),l!==n.TextRenderingMode.STROKE&&l!==n.TextRenderingMode.FILL_STROKE||o.strokeText(e,t,r)),h&&(this.pendingTextPaths||(this.pendingTextPaths=[])).push({transform:o.mozCurrentTransform,x:t,y:r,fontSize:u,addToPath:p})},get isFontSubpixelAAEnabled(){const{context:e}=this.cachedCanvases.getCanvas("isFontSubpixelAAEnabled",10,10);e.scale(1.5,1),e.fillText("I",0,10);for(var t=e.getImageData(0,0,10,10).data,r=!1,i=3;i<t.length;i+=4)if(t[i]>0&&t[i]<255){r=!0;break}return(0,n.shadow)(this,"isFontSubpixelAAEnabled",r)},showText:function(e){var t=this.current,r=t.font;if(r.isType3Font)return this.showType3Text(e);var i=t.fontSize;if(0===i)return;var o=this.ctx,s=t.fontSizeScale,c=t.charSpacing,u=t.wordSpacing,l=t.fontDirection,h=t.textHScale*l,f=e.length,p=r.vertical,d=p?1:-1,g=r.defaultVMetrics,m=i*t.fontMatrix[0],v=t.textRenderingMode===n.TextRenderingMode.FILL&&!r.disableFontFace&&!t.patternFill;let y;if(o.save(),t.patternFill){o.save();const e=t.fillColor.getPattern(o,this);y=o.mozCurrentTransform,o.restore(),o.fillStyle=e}o.transform.apply(o,t.textMatrix),o.translate(t.x,t.y+t.textRise),l>0?o.scale(h,-1):o.scale(h,1);var _=t.lineWidth,b=t.textMatrixScale;if(0===b||0===_){var A=t.textRenderingMode&n.TextRenderingMode.FILL_STROKE_MASK;A!==n.TextRenderingMode.STROKE&&A!==n.TextRenderingMode.FILL_STROKE||(this._cachedGetSinglePixelWidth=null,_=this.getSinglePixelWidth()*a)}else _/=b;1!==s&&(o.scale(s,s),_/=s),o.lineWidth=_;var x,w=0;for(x=0;x<f;++x){var S=e[x];if((0,n.isNum)(S))w+=d*S*i/1e3;else{var E,C,k,P,R,T,O,L=!1,F=(S.isSpace?u:0)+c,I=S.fontChar,M=S.accent,N=S.width;if(p?(R=S.vmetric||g,T=-(T=S.vmetric?R[1]:.5*N)*m,O=R[2]*m,N=R?-R[0]:N,E=T/s,C=(w+O)/s):(E=w/s,C=0),r.remeasure&&N>0){var D=1e3*o.measureText(I).width/i*s;if(N<D&&this.isFontSubpixelAAEnabled){var j=N/D;L=!0,o.save(),o.scale(j,1),E/=j}else N!==D&&(E+=(N-D)/2e3*i/s)}(S.isInFont||r.missingFile)&&(v&&!M?o.fillText(I,E,C):(this.paintChar(I,E,C,y),M&&(k=E+M.offset.x/s,P=C-M.offset.y/s,this.paintChar(M.fontChar,k,P,y)))),w+=p?N*m-F*l:N*m+F*l,L&&o.restore()}}p?t.y-=w:t.x+=w*h,o.restore()},showType3Text:function(e){var t,r,i,o,a=this.ctx,s=this.current,c=s.font,u=s.fontSize,l=s.fontDirection,h=c.vertical?1:-1,f=s.charSpacing,p=s.wordSpacing,d=s.textHScale*l,g=s.fontMatrix||n.FONT_IDENTITY_MATRIX,m=e.length;if(s.textRenderingMode!==n.TextRenderingMode.INVISIBLE&&0!==u){for(this._cachedGetSinglePixelWidth=null,a.save(),a.transform.apply(a,s.textMatrix),a.translate(s.x,s.y),a.scale(d,l),t=0;t<m;++t)if(r=e[t],(0,n.isNum)(r))o=h*r*u/1e3,this.ctx.translate(o,0),s.x+=o*d;else{var v=(r.isSpace?p:0)+f,y=c.charProcOperatorList[r.operatorListId];y?(this.processingType3=r,this.save(),a.scale(u,u),a.transform.apply(a,g),this.executeOperatorList(y),this.restore(),i=n.Util.applyTransform([r.width,0],g)[0]*u+v,a.translate(i,0),s.x+=i*d):(0,n.warn)(`Type3 character "${r.operatorListId}" is not available.`)}a.restore(),this.processingType3=null}},setCharWidth:function(e,t){},setCharWidthAndBounds:function(e,t,r,n,i,o){this.ctx.rect(r,n,i-r,o-n),this.clip(),this.endPath()},getColorN_Pattern:function(t){var r;if("TilingPattern"===t[0]){var n=t[1],o=this.baseTransform||this.ctx.mozCurrentTransform.slice(),a={createCanvasGraphics:t=>new e(t,this.commonObjs,this.objs,this.canvasFactory,this.webGLContext)};r=new i.TilingPattern(t,n,this.ctx,a,o)}else r=(0,i.getShadingPatternFromIR)(t);return r},setStrokeColorN:function(){this.current.strokeColor=this.getColorN_Pattern(arguments)},setFillColorN:function(){this.current.fillColor=this.getColorN_Pattern(arguments),this.current.patternFill=!0},setStrokeRGBColor:function(e,t,r){var i=n.Util.makeCssRgb(e,t,r);this.ctx.strokeStyle=i,this.current.strokeColor=i},setFillRGBColor:function(e,t,r){var i=n.Util.makeCssRgb(e,t,r);this.ctx.fillStyle=i,this.current.fillColor=i,this.current.patternFill=!1},shadingFill:function(e){var t=this.ctx;this.save();var r=(0,i.getShadingPatternFromIR)(e);t.fillStyle=r.getPattern(t,this,!0);var o=t.mozCurrentTransformInverse;if(o){var a=t.canvas,s=a.width,c=a.height,u=n.Util.applyTransform([0,0],o),l=n.Util.applyTransform([0,c],o),h=n.Util.applyTransform([s,0],o),f=n.Util.applyTransform([s,c],o),p=Math.min(u[0],l[0],h[0],f[0]),d=Math.min(u[1],l[1],h[1],f[1]),g=Math.max(u[0],l[0],h[0],f[0]),m=Math.max(u[1],l[1],h[1],f[1]);this.ctx.fillRect(p,d,g-p,m-d)}else this.ctx.fillRect(-1e10,-1e10,2e10,2e10);this.restore()},beginInlineImage:function(){(0,n.unreachable)("Should not call beginInlineImage")},beginImageData:function(){(0,n.unreachable)("Should not call beginImageData")},paintFormXObjectBegin:function(e,t){if(this.save(),this.baseTransformStack.push(this.baseTransform),Array.isArray(e)&&6===e.length&&this.transform.apply(this,e),this.baseTransform=this.ctx.mozCurrentTransform,t){var r=t[2]-t[0],n=t[3]-t[1];this.ctx.rect(t[0],t[1],r,n),this.clip(),this.endPath()}},paintFormXObjectEnd:function(){this.restore(),this.baseTransform=this.baseTransformStack.pop()},beginGroup:function(e){this.save();var t=this.ctx;e.isolated||(0,n.info)("TODO: Support non-isolated groups."),e.knockout&&(0,n.warn)("Knockout groups not supported.");var r=t.mozCurrentTransform;if(e.matrix&&t.transform.apply(t,e.matrix),!e.bbox)throw new Error("Bounding box is required.");var i=n.Util.getAxialAlignedBoundingBox(e.bbox,t.mozCurrentTransform),a=[0,0,t.canvas.width,t.canvas.height];i=n.Util.intersect(i,a)||[0,0,0,0];var s=Math.floor(i[0]),c=Math.floor(i[1]),u=Math.max(Math.ceil(i[2])-s,1),l=Math.max(Math.ceil(i[3])-c,1),f=1,p=1;u>o&&(f=u/o,u=o),l>o&&(p=l/o,l=o);var d="groupAt"+this.groupLevel;e.smask&&(d+="_smask_"+this.smaskCounter++%2);var g=this.cachedCanvases.getCanvas(d,u,l,!0),m=g.context;m.scale(1/f,1/p),m.translate(-s,-c),m.transform.apply(m,r),e.smask?this.smaskStack.push({canvas:g.canvas,context:m,offsetX:s,offsetY:c,scaleX:f,scaleY:p,subtype:e.smask.subtype,backdrop:e.smask.backdrop,transferMap:e.smask.transferMap||null,startTransformInverse:null}):(t.setTransform(1,0,0,1,0,0),t.translate(s,c),t.scale(f,p)),h(t,m),this.ctx=m,this.setGState([["BM","source-over"],["ca",1],["CA",1]]),this.groupStack.push(t),this.groupLevel++,this.current.activeSMask=null},endGroup:function(e){this.groupLevel--;var t=this.ctx;this.ctx=this.groupStack.pop(),void 0!==this.ctx.imageSmoothingEnabled?this.ctx.imageSmoothingEnabled=!1:this.ctx.mozImageSmoothingEnabled=!1,e.smask?this.tempSMask=this.smaskStack.pop():this.ctx.drawImage(t.canvas,0,0),this.restore()},beginAnnotations:function(){this.save(),this.baseTransform&&this.ctx.setTransform.apply(this.ctx,this.baseTransform)},endAnnotations:function(){this.restore()},beginAnnotation:function(e,t,r){if(this.save(),f(this.ctx),this.current=new l,Array.isArray(e)&&4===e.length){var n=e[2]-e[0],i=e[3]-e[1];this.ctx.rect(e[0],e[1],n,i),this.clip(),this.endPath()}this.transform.apply(this,t),this.transform.apply(this,r)},endAnnotation:function(){this.restore()},paintImageMaskXObject:function(e){var t=this.ctx,n=e.width,i=e.height,o=this.current.fillColor,a=this.current.patternFill,s=this.processingType3;if(s&&void 0===s.compiled&&(s.compiled=n<=1e3&&i<=1e3?function(e){var t,r,n,i,o=e.width,a=e.height,s=o+1,c=new Uint8Array(s*(a+1)),u=new Uint8Array([0,2,4,0,1,0,5,4,8,10,0,8,0,2,1,0]),l=o+7&-8,h=e.data,f=new Uint8Array(l*a),p=0;for(t=0,i=h.length;t<i;t++)for(var d=128,g=h[t];d>0;)f[p++]=g&d?0:255,d>>=1;var m=0;for(0!==f[p=0]&&(c[0]=1,++m),r=1;r<o;r++)f[p]!==f[p+1]&&(c[r]=f[p]?2:1,++m),p++;for(0!==f[p]&&(c[r]=2,++m),t=1;t<a;t++){n=t*s,f[(p=t*l)-l]!==f[p]&&(c[n]=f[p]?1:8,++m);var v=(f[p]?4:0)+(f[p-l]?8:0);for(r=1;r<o;r++)u[v=(v>>2)+(f[p+1]?4:0)+(f[p-l+1]?8:0)]&&(c[n+r]=u[v],++m),p++;if(f[p-l]!==f[p]&&(c[n+r]=f[p]?2:4,++m),m>1e3)return null}for(n=t*s,0!==f[p=l*(a-1)]&&(c[n]=8,++m),r=1;r<o;r++)f[p]!==f[p+1]&&(c[n+r]=f[p]?4:8,++m),p++;if(0!==f[p]&&(c[n+r]=4,++m),m>1e3)return null;var y=new Int32Array([0,s,-1,0,-s,0,0,0,1]),_=[];for(t=0;m&&t<=a;t++){for(var b=t*s,A=b+o;b<A&&!c[b];)b++;if(b!==A){var x,w=[b%s,t],S=c[b],E=b;do{var C=y[S];do{b+=C}while(!c[b]);5!==(x=c[b])&&10!==x?(S=x,c[b]=0):(S=x&51*S>>4,c[b]&=S>>2|S<<2),w.push(b%s),w.push(b/s|0),c[b]||--m}while(E!==b);_.push(w),--t}}return function(e){e.save(),e.scale(1/o,-1/a),e.translate(0,-a),e.beginPath();for(let r=0,n=_.length;r<n;r++){var t=_[r];e.moveTo(t[0],t[1]);for(let r=2,n=t.length;r<n;r+=2)e.lineTo(t[r],t[r+1])}e.fill(),e.beginPath(),e.restore()}}({data:e.data,width:n,height:i}):null),s&&s.compiled)s.compiled(t);else{var c=this.cachedCanvases.getCanvas("maskCanvas",n,i),u=c.context;u.save(),r(u,e),u.globalCompositeOperation="source-in",u.fillStyle=a?o.getPattern(u,this):o,u.fillRect(0,0,n,i),u.restore(),this.paintInlineImageXObject(c.canvas)}},paintImageMaskXObjectRepeat:function(e,t,n,i){var o=e.width,a=e.height,s=this.current.fillColor,c=this.current.patternFill,u=this.cachedCanvases.getCanvas("maskCanvas",o,a),l=u.context;l.save(),r(l,e),l.globalCompositeOperation="source-in",l.fillStyle=c?s.getPattern(l,this):s,l.fillRect(0,0,o,a),l.restore();for(var h=this.ctx,f=0,p=i.length;f<p;f+=2)h.save(),h.transform(t,0,0,n,i[f],i[f+1]),h.scale(1,-1),h.drawImage(u.canvas,0,0,o,a,0,-1,1,1),h.restore()},paintImageMaskXObjectGroup:function(e){for(var t=this.ctx,n=this.current.fillColor,i=this.current.patternFill,o=0,a=e.length;o<a;o++){var s=e[o],c=s.width,u=s.height,l=this.cachedCanvases.getCanvas("maskCanvas",c,u),h=l.context;h.save(),r(h,s),h.globalCompositeOperation="source-in",h.fillStyle=i?n.getPattern(h,this):n,h.fillRect(0,0,c,u),h.restore(),t.save(),t.transform.apply(t,s.transform),t.scale(1,-1),t.drawImage(l.canvas,0,0,c,u,0,-1,1,1),t.restore()}},paintImageXObject:function(e){const t=e.startsWith("g_")?this.commonObjs.get(e):this.objs.get(e);t?this.paintInlineImageXObject(t):(0,n.warn)("Dependent image isn't ready yet")},paintImageXObjectRepeat:function(e,t,r,i){const o=e.startsWith("g_")?this.commonObjs.get(e):this.objs.get(e);if(o){for(var a=o.width,s=o.height,c=[],u=0,l=i.length;u<l;u+=2)c.push({transform:[t,0,0,r,i[u],i[u+1]],x:0,y:0,w:a,h:s});this.paintInlineImageXObjectGroup(o,c)}else(0,n.warn)("Dependent image isn't ready yet")},paintInlineImageXObject:function(e){var r=e.width,n=e.height,i=this.ctx;this.save(),i.scale(1/r,-1/n);var o,a,s=i.mozCurrentTransformInverse,c=s[0],u=s[1],l=Math.max(Math.sqrt(c*c+u*u),1),h=s[2],f=s[3],p=Math.max(Math.sqrt(h*h+f*f),1);if("function"==typeof HTMLElement&&e instanceof HTMLElement||!e.data)o=e;else{var d=(a=this.cachedCanvases.getCanvas("inlineImage",r,n)).context;t(d,e),o=a.canvas}for(var g=r,m=n,v="prescale1";l>2&&g>1||p>2&&m>1;){var y=g,_=m;l>2&&g>1&&(l/=g/(y=Math.ceil(g/2))),p>2&&m>1&&(p/=m/(_=Math.ceil(m/2))),(d=(a=this.cachedCanvases.getCanvas(v,y,_)).context).clearRect(0,0,y,_),d.drawImage(o,0,0,g,m,0,0,y,_),o=a.canvas,g=y,m=_,v="prescale1"===v?"prescale2":"prescale1"}if(i.drawImage(o,0,0,g,m,0,-n,r,n),this.imageLayer){var b=this.getCanvasPosition(0,-n);this.imageLayer.appendImage({imgData:e,left:b[0],top:b[1],width:r/s[0],height:n/s[3]})}this.restore()},paintInlineImageXObjectGroup:function(e,r){var n=this.ctx,i=e.width,o=e.height,a=this.cachedCanvases.getCanvas("inlineImage",i,o);t(a.context,e);for(var s=0,c=r.length;s<c;s++){var u=r[s];if(n.save(),n.transform.apply(n,u.transform),n.scale(1,-1),n.drawImage(a.canvas,u.x,u.y,u.w,u.h,0,-1,1,1),this.imageLayer){var l=this.getCanvasPosition(u.x,u.y);this.imageLayer.appendImage({imgData:e,left:l[0],top:l[1],width:i,height:o})}n.restore()}},paintSolidColorImageMask:function(){this.ctx.fillRect(0,0,1,1)},paintXObject:function(){(0,n.warn)("Unsupported 'paintXObject' command.")},markPoint:function(e){},markPointProps:function(e,t){},beginMarkedContent:function(e){},beginMarkedContentProps:function(e,t){},endMarkedContent:function(){},beginCompat:function(){},endCompat:function(){},consumePath:function(){var e=this.ctx;this.pendingClip&&(this.pendingClip===b?e.clip("evenodd"):e.clip(),this.pendingClip=null),e.beginPath()},getSinglePixelWidth(e){if(null===this._cachedGetSinglePixelWidth){const e=this.ctx.mozCurrentTransformInverse;this._cachedGetSinglePixelWidth=Math.sqrt(Math.max(e[0]*e[0]+e[1]*e[1],e[2]*e[2]+e[3]*e[3]))}return this._cachedGetSinglePixelWidth},getCanvasPosition:function(e,t){var r=this.ctx.mozCurrentTransform;return[r[0]*e+r[2]*t+r[4],r[1]*e+r[3]*t+r[5]]}},n.OPS)e.prototype[n.OPS[A]]=e.prototype[A];return e}();t.CanvasGraphics=h},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.getShadingPatternFromIR=function(e){var t=i[e[0]];if(!t)throw new Error(`Unknown IR type: ${e[0]}`);return t.fromIR(e)},t.TilingPattern=void 0;var n=r(2),i={};function o(e,t){if(!t||"undefined"==typeof Path2D)return;const r=t[2]-t[0],n=t[3]-t[1],i=new Path2D;i.rect(t[0],t[1],r,n),e.clip(i)}i.RadialAxial={fromIR:function(e){var t=e[1],r=e[2],n=e[3],i=e[4],a=e[5],s=e[6],c=e[7];return{type:"Pattern",getPattern:function(e){var u;o(e,r),"axial"===t?u=e.createLinearGradient(i[0],i[1],a[0],a[1]):"radial"===t&&(u=e.createRadialGradient(i[0],i[1],s,a[0],a[1],c));for(var l=0,h=n.length;l<h;++l){var f=n[l];u.addColorStop(f[0],f[1])}return u}}}};var a=function(){function e(e,t,r,n,i,o,a,s){var c,u=t.coords,l=t.colors,h=e.data,f=4*e.width;u[r+1]>u[n+1]&&(c=r,r=n,n=c,c=o,o=a,a=c),u[n+1]>u[i+1]&&(c=n,n=i,i=c,c=a,a=s,s=c),u[r+1]>u[n+1]&&(c=r,r=n,n=c,c=o,o=a,a=c);var p=(u[r]+t.offsetX)*t.scaleX,d=(u[r+1]+t.offsetY)*t.scaleY,g=(u[n]+t.offsetX)*t.scaleX,m=(u[n+1]+t.offsetY)*t.scaleY,v=(u[i]+t.offsetX)*t.scaleX,y=(u[i+1]+t.offsetY)*t.scaleY;if(!(d>=y))for(var _,b,A,x,w,S,E,C,k=l[o],P=l[o+1],R=l[o+2],T=l[a],O=l[a+1],L=l[a+2],F=l[s],I=l[s+1],M=l[s+2],N=Math.round(d),D=Math.round(y),j=N;j<=D;j++){if(j<m){let e;e=j<d?0:d===m?1:(d-j)/(d-m),_=p-(p-g)*e,b=k-(k-T)*e,A=P-(P-O)*e,x=R-(R-L)*e}else{let e;e=j>y?1:m===y?0:(m-j)/(m-y),_=g-(g-v)*e,b=T-(T-F)*e,A=O-(O-I)*e,x=L-(L-M)*e}let e;e=j<d?0:j>y?1:(d-j)/(d-y),w=p-(p-v)*e,S=k-(k-F)*e,E=P-(P-I)*e,C=R-(R-M)*e;for(var U=Math.round(Math.min(_,w)),W=Math.round(Math.max(_,w)),q=f*j+4*U,B=U;B<=W;B++)e=(_-B)/(_-w),e<0?e=0:e>1&&(e=1),h[q++]=b-(b-S)*e|0,h[q++]=A-(A-E)*e|0,h[q++]=x-(x-C)*e|0,h[q++]=255}}function t(t,r,n){var i,o,a=r.coords,s=r.colors;switch(r.type){case"lattice":var c=r.verticesPerRow,u=Math.floor(a.length/c)-1,l=c-1;for(i=0;i<u;i++)for(var h=i*c,f=0;f<l;f++,h++)e(t,n,a[h],a[h+1],a[h+c],s[h],s[h+1],s[h+c]),e(t,n,a[h+c+1],a[h+1],a[h+c],s[h+c+1],s[h+1],s[h+c]);break;case"triangles":for(i=0,o=a.length;i<o;i+=3)e(t,n,a[i],a[i+1],a[i+2],s[i],s[i+1],s[i+2]);break;default:throw new Error("illegal figure")}}return function(e,r,n,i,o,a,s,c){var u,l,h,f,p=Math.floor(e[0]),d=Math.floor(e[1]),g=Math.ceil(e[2])-p,m=Math.ceil(e[3])-d,v=Math.min(Math.ceil(Math.abs(g*r[0]*1.1)),3e3),y=Math.min(Math.ceil(Math.abs(m*r[1]*1.1)),3e3),_=g/v,b=m/y,A={coords:n,colors:i,offsetX:-p,offsetY:-d,scaleX:1/_,scaleY:1/b},x=v+4,w=y+4;if(c.isEnabled)u=c.drawFigures({width:v,height:y,backgroundColor:a,figures:o,context:A}),(l=s.getCanvas("mesh",x,w,!1)).context.drawImage(u,2,2),u=l.canvas;else{var S=(l=s.getCanvas("mesh",x,w,!1)).context,E=S.createImageData(v,y);if(a){var C=E.data;for(h=0,f=C.length;h<f;h+=4)C[h]=a[0],C[h+1]=a[1],C[h+2]=a[2],C[h+3]=255}for(h=0;h<o.length;h++)t(E,o[h],A);S.putImageData(E,2,2),u=l.canvas}return{canvas:u,offsetX:p-2*_,offsetY:d-2*b,scaleX:_,scaleY:b}}}();i.Mesh={fromIR:function(e){var t=e[2],r=e[3],i=e[4],s=e[5],c=e[6],u=e[7],l=e[8];return{type:"Pattern",getPattern:function(e,h,f){var p;if(o(e,u),f)p=n.Util.singularValueDecompose2dScale(e.mozCurrentTransform);else if(p=n.Util.singularValueDecompose2dScale(h.baseTransform),c){var d=n.Util.singularValueDecompose2dScale(c);p=[p[0]*d[0],p[1]*d[1]]}var g=a(s,p,t,r,i,f?null:l,h.cachedCanvases,h.webGLContext);return f||(e.setTransform.apply(e,h.baseTransform),c&&e.transform.apply(e,c)),e.translate(g.offsetX,g.offsetY),e.scale(g.scaleX,g.scaleY),e.createPattern(g.canvas,"no-repeat")}}}},i.Dummy={fromIR:function(){return{type:"Pattern",getPattern:function(){return"hotpink"}}}};var s=function(){function e(e,t,r,n,i){this.operatorList=e[2],this.matrix=e[3]||[1,0,0,1,0,0],this.bbox=e[4],this.xstep=e[5],this.ystep=e[6],this.paintType=e[7],this.tilingType=e[8],this.color=t,this.canvasGraphicsFactory=n,this.baseTransform=i,this.type="Pattern",this.ctx=r}return e.prototype={createPatternCanvas:function(e){var t=this.operatorList,r=this.bbox,i=this.xstep,o=this.ystep,a=this.paintType,s=this.tilingType,c=this.color,u=this.canvasGraphicsFactory;(0,n.info)("TilingType: "+s);var l=r[0],h=r[1],f=r[2],p=r[3],d=n.Util.singularValueDecompose2dScale(this.matrix),g=n.Util.singularValueDecompose2dScale(this.baseTransform),m=[d[0]*g[0],d[1]*g[1]],v=this.getSizeAndScale(i,this.ctx.canvas.width,m[0]),y=this.getSizeAndScale(o,this.ctx.canvas.height,m[1]),_=e.cachedCanvases.getCanvas("pattern",v.size,y.size,!0),b=_.context,A=u.createCanvasGraphics(b);return A.groupLevel=e.groupLevel,this.setFillAndStrokeStyleToContext(A,a,c),A.transform(v.scale,0,0,y.scale,0,0),A.transform(1,0,0,1,-l,-h),this.clipBbox(A,r,l,h,f,p),A.executeOperatorList(t),this.ctx.transform(1,0,0,1,l,h),this.ctx.scale(1/v.scale,1/y.scale),_.canvas},getSizeAndScale:function(e,t,r){e=Math.abs(e);var n=Math.max(3e3,t),i=Math.ceil(e*r);return i>=n?i=n:r=i/e,{scale:r,size:i}},clipBbox:function(e,t,r,n,i,o){if(Array.isArray(t)&&4===t.length){var a=i-r,s=o-n;e.ctx.rect(r,n,a,s),e.clip(),e.endPath()}},setFillAndStrokeStyleToContext:function(e,t,r){const i=e.ctx,o=e.current;switch(t){case 1:var a=this.ctx;i.fillStyle=a.fillStyle,i.strokeStyle=a.strokeStyle,o.fillColor=a.fillStyle,o.strokeColor=a.strokeStyle;break;case 2:var s=n.Util.makeCssRgb(r[0],r[1],r[2]);i.fillStyle=s,i.strokeStyle=s,o.fillColor=s,o.strokeColor=s;break;default:throw new n.FormatError(`Unsupported paint type: ${t}`)}},getPattern:function(e,t){(e=this.ctx).setTransform.apply(e,this.baseTransform),e.transform.apply(e,this.matrix);var r=this.createPatternCanvas(t);return e.createPattern(r,"repeat")}},e}();t.TilingPattern=s},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.GlobalWorkerOptions=void 0;const n=Object.create(null);t.GlobalWorkerOptions=n,n.workerPort=void 0===n.workerPort?null:n.workerPort,n.workerSrc=void 0===n.workerSrc?"":n.workerSrc},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.MessageHandler=void 0;var n=r(2);function i(e){if("object"!=typeof e||null===e)return e;switch(e.name){case"AbortException":return new n.AbortException(e.message);case"MissingPDFException":return new n.MissingPDFException(e.message);case"UnexpectedResponseException":return new n.UnexpectedResponseException(e.message,e.status);case"UnknownErrorException":return new n.UnknownErrorException(e.message,e.details);default:return new n.UnknownErrorException(e.message,e.toString())}}t.MessageHandler=class{constructor(e,t,r){this.sourceName=e,this.targetName=t,this.comObj=r,this.callbackId=1,this.streamId=1,this.postMessageTransfers=!0,this.streamSinks=Object.create(null),this.streamControllers=Object.create(null),this.callbackCapabilities=Object.create(null),this.actionHandler=Object.create(null),this._onComObjOnMessage=e=>{const t=e.data;if(t.targetName!==this.sourceName)return;if(t.stream)return void this._processStreamMessage(t);if(t.callback){const e=t.callbackId,r=this.callbackCapabilities[e];if(!r)throw new Error(`Cannot resolve callback ${e}`);if(delete this.callbackCapabilities[e],1===t.callback)r.resolve(t.data);else{if(2!==t.callback)throw new Error("Unexpected callback case");r.reject(i(t.reason))}return}const n=this.actionHandler[t.action];if(!n)throw new Error(`Unknown action from worker: ${t.action}`);if(t.callbackId){const e=this.sourceName,o=t.sourceName;new Promise((function(e){e(n(t.data))})).then((function(n){r.postMessage({sourceName:e,targetName:o,callback:1,callbackId:t.callbackId,data:n})}),(function(n){r.postMessage({sourceName:e,targetName:o,callback:2,callbackId:t.callbackId,reason:i(n)})}))}else t.streamId?this._createStreamSink(t):n(t.data)},r.addEventListener("message",this._onComObjOnMessage)}on(e,t){const r=this.actionHandler;if(r[e])throw new Error(`There is already an actionName called "${e}"`);r[e]=t}send(e,t,r){this._postMessage({sourceName:this.sourceName,targetName:this.targetName,action:e,data:t},r)}sendWithPromise(e,t,r){const i=this.callbackId++,o=(0,n.createPromiseCapability)();this.callbackCapabilities[i]=o;try{this._postMessage({sourceName:this.sourceName,targetName:this.targetName,action:e,callbackId:i,data:t},r)}catch(e){o.reject(e)}return o.promise}sendWithStream(e,t,r,o){const a=this.streamId++,s=this.sourceName,c=this.targetName,u=this.comObj;return new ReadableStream({start:r=>{const i=(0,n.createPromiseCapability)();return this.streamControllers[a]={controller:r,startCall:i,pullCall:null,cancelCall:null,isClosed:!1},this._postMessage({sourceName:s,targetName:c,action:e,streamId:a,data:t,desiredSize:r.desiredSize},o),i.promise},pull:e=>{const t=(0,n.createPromiseCapability)();return this.streamControllers[a].pullCall=t,u.postMessage({sourceName:s,targetName:c,stream:6,streamId:a,desiredSize:e.desiredSize}),t.promise},cancel:e=>{(0,n.assert)(e instanceof Error,"cancel must have a valid reason");const t=(0,n.createPromiseCapability)();return this.streamControllers[a].cancelCall=t,this.streamControllers[a].isClosed=!0,u.postMessage({sourceName:s,targetName:c,stream:1,streamId:a,reason:i(e)}),t.promise}},r)}_createStreamSink(e){const t=this,r=this.actionHandler[e.action],o=e.streamId,a=this.sourceName,s=e.sourceName,c=this.comObj,u={enqueue(e,r=1,i){if(this.isCancelled)return;const c=this.desiredSize;this.desiredSize-=r,c>0&&this.desiredSize<=0&&(this.sinkCapability=(0,n.createPromiseCapability)(),this.ready=this.sinkCapability.promise),t._postMessage({sourceName:a,targetName:s,stream:4,streamId:o,chunk:e},i)},close(){this.isCancelled||(this.isCancelled=!0,c.postMessage({sourceName:a,targetName:s,stream:3,streamId:o}),delete t.streamSinks[o])},error(e){(0,n.assert)(e instanceof Error,"error must have a valid reason"),this.isCancelled||(this.isCancelled=!0,c.postMessage({sourceName:a,targetName:s,stream:5,streamId:o,reason:i(e)}))},sinkCapability:(0,n.createPromiseCapability)(),onPull:null,onCancel:null,isCancelled:!1,desiredSize:e.desiredSize,ready:null};u.sinkCapability.resolve(),u.ready=u.sinkCapability.promise,this.streamSinks[o]=u,new Promise((function(t){t(r(e.data,u))})).then((function(){c.postMessage({sourceName:a,targetName:s,stream:8,streamId:o,success:!0})}),(function(e){c.postMessage({sourceName:a,targetName:s,stream:8,streamId:o,reason:i(e)})}))}_processStreamMessage(e){const t=e.streamId,r=this.sourceName,o=e.sourceName,a=this.comObj;switch(e.stream){case 8:e.success?this.streamControllers[t].startCall.resolve():this.streamControllers[t].startCall.reject(i(e.reason));break;case 7:e.success?this.streamControllers[t].pullCall.resolve():this.streamControllers[t].pullCall.reject(i(e.reason));break;case 6:if(!this.streamSinks[t]){a.postMessage({sourceName:r,targetName:o,stream:7,streamId:t,success:!0});break}this.streamSinks[t].desiredSize<=0&&e.desiredSize>0&&this.streamSinks[t].sinkCapability.resolve(),this.streamSinks[t].desiredSize=e.desiredSize;const{onPull:s}=this.streamSinks[e.streamId];new Promise((function(e){e(s&&s())})).then((function(){a.postMessage({sourceName:r,targetName:o,stream:7,streamId:t,success:!0})}),(function(e){a.postMessage({sourceName:r,targetName:o,stream:7,streamId:t,reason:i(e)})}));break;case 4:if((0,n.assert)(this.streamControllers[t],"enqueue should have stream controller"),this.streamControllers[t].isClosed)break;this.streamControllers[t].controller.enqueue(e.chunk);break;case 3:if((0,n.assert)(this.streamControllers[t],"close should have stream controller"),this.streamControllers[t].isClosed)break;this.streamControllers[t].isClosed=!0,this.streamControllers[t].controller.close(),this._deleteStreamController(t);break;case 5:(0,n.assert)(this.streamControllers[t],"error should have stream controller"),this.streamControllers[t].controller.error(i(e.reason)),this._deleteStreamController(t);break;case 2:e.success?this.streamControllers[t].cancelCall.resolve():this.streamControllers[t].cancelCall.reject(i(e.reason)),this._deleteStreamController(t);break;case 1:if(!this.streamSinks[t])break;const{onCancel:c}=this.streamSinks[e.streamId];new Promise((function(t){t(c&&c(i(e.reason)))})).then((function(){a.postMessage({sourceName:r,targetName:o,stream:2,streamId:t,success:!0})}),(function(e){a.postMessage({sourceName:r,targetName:o,stream:2,streamId:t,reason:i(e)})})),this.streamSinks[t].sinkCapability.reject(i(e.reason)),this.streamSinks[t].isCancelled=!0,delete this.streamSinks[t];break;default:throw new Error("Unexpected stream case")}}async _deleteStreamController(e){await Promise.allSettled([this.streamControllers[e].startCall,this.streamControllers[e].pullCall,this.streamControllers[e].cancelCall].map((function(e){return e&&e.promise}))),delete this.streamControllers[e]}_postMessage(e,t){t&&this.postMessageTransfers?this.comObj.postMessage(e,t):this.comObj.postMessage(e)}destroy(){this.comObj.removeEventListener("message",this._onComObjOnMessage)}}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Metadata=void 0;var n=r(2),i=r(13);t.Metadata=class{constructor(e){(0,n.assert)("string"==typeof e,"Metadata: input is not a string"),e=this._repair(e);const t=(new i.SimpleXMLParser).parseFromString(e);this._metadataMap=new Map,t&&this._parse(t)}_repair(e){return e.replace(/^[^<]+/,"").replace(/>\\376\\377([^<]+)/g,(function(e,t){const r=t.replace(/\\([0-3])([0-7])([0-7])/g,(function(e,t,r,n){return String.fromCharCode(64*t+8*r+1*n)})).replace(/&(amp|apos|gt|lt|quot);/g,(function(e,t){switch(t){case"amp":return"&";case"apos":return"'";case"gt":return">";case"lt":return"<";case"quot":return'"'}throw new Error(`_repair: ${t} isn't defined.`)}));let n="";for(let e=0,t=r.length;e<t;e+=2){const t=256*r.charCodeAt(e)+r.charCodeAt(e+1);n+=t>=32&&t<127&&60!==t&&62!==t&&38!==t?String.fromCharCode(t):"&#x"+(65536+t).toString(16).substring(1)+";"}return">"+n}))}_parse(e){let t=e.documentElement;if("rdf:rdf"!==t.nodeName.toLowerCase())for(t=t.firstChild;t&&"rdf:rdf"!==t.nodeName.toLowerCase();)t=t.nextSibling;const r=t?t.nodeName.toLowerCase():null;if(!t||"rdf:rdf"!==r||!t.hasChildNodes())return;const n=t.childNodes;for(let e=0,t=n.length;e<t;e++){const t=n[e];if("rdf:description"===t.nodeName.toLowerCase())for(let e=0,r=t.childNodes.length;e<r;e++)if("#text"!==t.childNodes[e].nodeName.toLowerCase()){const r=t.childNodes[e],n=r.nodeName.toLowerCase();this._metadataMap.set(n,r.textContent.trim())}}}get(e){return this._metadataMap.has(e)?this._metadataMap.get(e):null}getAll(){const e=Object.create(null);for(const[t,r]of this._metadataMap)e[t]=r;return e}has(e){return this._metadataMap.has(e)}}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.SimpleXMLParser=void 0;function n(e,t){const r=e[t];return" "===r||"\n"===r||"\r"===r||"\t"===r}class i{constructor(e,t){this.nodeName=e,this.nodeValue=t,Object.defineProperty(this,"parentNode",{value:null,writable:!0})}get firstChild(){return this.childNodes&&this.childNodes[0]}get nextSibling(){const e=this.parentNode.childNodes;if(!e)return;const t=e.indexOf(this);return-1!==t?e[t+1]:void 0}get textContent(){return this.childNodes?this.childNodes.map((function(e){return e.textContent})).join(""):this.nodeValue||""}hasChildNodes(){return this.childNodes&&this.childNodes.length>0}}t.SimpleXMLParser=class extends class{_resolveEntities(e){return e.replace(/&([^;]+);/g,((e,t)=>{if("#x"===t.substring(0,2))return String.fromCharCode(parseInt(t.substring(2),16));if("#"===t.substring(0,1))return String.fromCharCode(parseInt(t.substring(1),10));switch(t){case"lt":return"<";case"gt":return">";case"amp":return"&";case"quot":return'"'}return this.onResolveEntity(t)}))}_parseContent(e,t){const r=[];let i=t;function o(){for(;i<e.length&&n(e,i);)++i}for(;i<e.length&&!n(e,i)&&">"!==e[i]&&"/"!==e[i];)++i;const a=e.substring(t,i);for(o();i<e.length&&">"!==e[i]&&"/"!==e[i]&&"?"!==e[i];){o();let t="",a="";for(;i<e.length&&!n(e,i)&&"="!==e[i];)t+=e[i],++i;if(o(),"="!==e[i])return null;++i,o();const s=e[i];if('"'!==s&&"'"!==s)return null;const c=e.indexOf(s,++i);if(c<0)return null;a=e.substring(i,c),r.push({name:t,value:this._resolveEntities(a)}),i=c+1,o()}return{name:a,attributes:r,parsed:i-t}}_parseProcessingInstruction(e,t){let r=t;for(;r<e.length&&!n(e,r)&&">"!==e[r]&&"/"!==e[r];)++r;const i=e.substring(t,r);!function(){for(;r<e.length&&n(e,r);)++r}();const o=r;for(;r<e.length&&("?"!==e[r]||">"!==e[r+1]);)++r;return{name:i,value:e.substring(o,r),parsed:r-t}}parseXml(e){let t=0;for(;t<e.length;){let r=t;if("<"===e[t]){let t;switch(++r,e[r]){case"/":if(++r,t=e.indexOf(">",r),t<0)return void this.onError(-9);this.onEndElement(e.substring(r,t)),r=t+1;break;case"?":++r;const n=this._parseProcessingInstruction(e,r);if("?>"!==e.substring(r+n.parsed,r+n.parsed+2))return void this.onError(-3);this.onPi(n.name,n.value),r+=n.parsed+2;break;case"!":if("--"===e.substring(r+1,r+3)){if(t=e.indexOf("--\x3e",r+3),t<0)return void this.onError(-5);this.onComment(e.substring(r+3,t)),r=t+3}else if("[CDATA["===e.substring(r+1,r+8)){if(t=e.indexOf("]]>",r+8),t<0)return void this.onError(-2);this.onCdata(e.substring(r+8,t)),r=t+3}else{if("DOCTYPE"!==e.substring(r+1,r+8))return void this.onError(-6);{const n=e.indexOf("[",r+8);let i=!1;if(t=e.indexOf(">",r+8),t<0)return void this.onError(-4);if(n>0&&t>n){if(t=e.indexOf("]>",r+8),t<0)return void this.onError(-4);i=!0}const o=e.substring(r+8,t+(i?1:0));this.onDoctype(o),r=t+(i?2:1)}}break;default:const i=this._parseContent(e,r);if(null===i)return void this.onError(-6);let o=!1;if("/>"===e.substring(r+i.parsed,r+i.parsed+2))o=!0;else if(">"!==e.substring(r+i.parsed,r+i.parsed+1))return void this.onError(-9);this.onBeginElement(i.name,i.attributes,o),r+=i.parsed+(o?2:1)}}else{for(;r<e.length&&"<"!==e[r];)r++;const n=e.substring(t,r);this.onText(this._resolveEntities(n))}t=r}}onResolveEntity(e){return`&${e};`}onPi(e,t){}onComment(e){}onCdata(e){}onDoctype(e){}onText(e){}onBeginElement(e,t,r){}onEndElement(e){}onError(e){}}{constructor(){super(),this._currentFragment=null,this._stack=null,this._errorCode=0}parseFromString(e){if(this._currentFragment=[],this._stack=[],this._errorCode=0,this.parseXml(e),0!==this._errorCode)return;const[t]=this._currentFragment;return t?{documentElement:t}:void 0}onResolveEntity(e){switch(e){case"apos":return"'"}return super.onResolveEntity(e)}onText(e){if(function(e){for(let t=0,r=e.length;t<r;t++)if(!n(e,t))return!1;return!0}(e))return;const t=new i("#text",e);this._currentFragment.push(t)}onCdata(e){const t=new i("#text",e);this._currentFragment.push(t)}onBeginElement(e,t,r){const n=new i(e);n.childNodes=[],this._currentFragment.push(n),r||(this._stack.push(this._currentFragment),this._currentFragment=n.childNodes)}onEndElement(e){this._currentFragment=this._stack.pop()||[];const t=this._currentFragment[this._currentFragment.length-1];if(t)for(let e=0,r=t.childNodes.length;e<r;e++)t.childNodes[e].parentNode=t}onError(e){this._errorCode=e}}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.PDFDataTransportStream=void 0;var n=r(2);t.PDFDataTransportStream=class{constructor(e,t){(0,n.assert)(t,'PDFDataTransportStream - missing required "pdfDataRangeTransport" argument.'),this._queuedChunks=[],this._progressiveDone=e.progressiveDone||!1;const r=e.initialData;if(r&&r.length>0){const e=new Uint8Array(r).buffer;this._queuedChunks.push(e)}this._pdfDataRangeTransport=t,this._isStreamingSupported=!e.disableStream,this._isRangeSupported=!e.disableRange,this._contentLength=e.length,this._fullRequestReader=null,this._rangeReaders=[],this._pdfDataRangeTransport.addRangeListener(((e,t)=>{this._onReceiveData({begin:e,chunk:t})})),this._pdfDataRangeTransport.addProgressListener(((e,t)=>{this._onProgress({loaded:e,total:t})})),this._pdfDataRangeTransport.addProgressiveReadListener((e=>{this._onReceiveData({chunk:e})})),this._pdfDataRangeTransport.addProgressiveDoneListener((()=>{this._onProgressiveDone()})),this._pdfDataRangeTransport.transportReady()}_onReceiveData(e){const t=new Uint8Array(e.chunk).buffer;if(void 0===e.begin)this._fullRequestReader?this._fullRequestReader._enqueue(t):this._queuedChunks.push(t);else{const r=this._rangeReaders.some((function(r){return r._begin===e.begin&&(r._enqueue(t),!0)}));(0,n.assert)(r,"_onReceiveData - no `PDFDataTransportStreamRangeReader` instance found.")}}get _progressiveDataLength(){return this._fullRequestReader?this._fullRequestReader._loaded:0}_onProgress(e){if(void 0===e.total){const t=this._rangeReaders[0];t&&t.onProgress&&t.onProgress({loaded:e.loaded})}else{const t=this._fullRequestReader;t&&t.onProgress&&t.onProgress({loaded:e.loaded,total:e.total})}}_onProgressiveDone(){this._fullRequestReader&&this._fullRequestReader.progressiveDone(),this._progressiveDone=!0}_removeRangeReader(e){const t=this._rangeReaders.indexOf(e);t>=0&&this._rangeReaders.splice(t,1)}getFullReader(){(0,n.assert)(!this._fullRequestReader,"PDFDataTransportStream.getFullReader can only be called once.");const e=this._queuedChunks;return this._queuedChunks=null,new i(this,e,this._progressiveDone)}getRangeReader(e,t){if(t<=this._progressiveDataLength)return null;const r=new o(this,e,t);return this._pdfDataRangeTransport.requestDataRange(e,t),this._rangeReaders.push(r),r}cancelAllRequests(e){this._fullRequestReader&&this._fullRequestReader.cancel(e),this._rangeReaders.slice(0).forEach((function(t){t.cancel(e)})),this._pdfDataRangeTransport.abort()}};class i{constructor(e,t,r=!1){this._stream=e,this._done=r||!1,this._filename=null,this._queuedChunks=t||[],this._loaded=0;for(const e of this._queuedChunks)this._loaded+=e.byteLength;this._requests=[],this._headersReady=Promise.resolve(),e._fullRequestReader=this,this.onProgress=null}_enqueue(e){this._done||(this._requests.length>0?this._requests.shift().resolve({value:e,done:!1}):this._queuedChunks.push(e),this._loaded+=e.byteLength)}get headersReady(){return this._headersReady}get filename(){return this._filename}get isRangeSupported(){return this._stream._isRangeSupported}get isStreamingSupported(){return this._stream._isStreamingSupported}get contentLength(){return this._stream._contentLength}async read(){if(this._queuedChunks.length>0)return{value:this._queuedChunks.shift(),done:!1};if(this._done)return{value:void 0,done:!0};const e=(0,n.createPromiseCapability)();return this._requests.push(e),e.promise}cancel(e){this._done=!0,this._requests.forEach((function(e){e.resolve({value:void 0,done:!0})})),this._requests=[]}progressiveDone(){this._done||(this._done=!0)}}class o{constructor(e,t,r){this._stream=e,this._begin=t,this._end=r,this._queuedChunk=null,this._requests=[],this._done=!1,this.onProgress=null}_enqueue(e){this._done||(0===this._requests.length?this._queuedChunk=e:(this._requests.shift().resolve({value:e,done:!1}),this._requests.forEach((function(e){e.resolve({value:void 0,done:!0})})),this._requests=[]),this._done=!0,this._stream._removeRangeReader(this))}get isStreamingSupported(){return!1}async read(){if(this._queuedChunk){const e=this._queuedChunk;return this._queuedChunk=null,{value:e,done:!1}}if(this._done)return{value:void 0,done:!0};const e=(0,n.createPromiseCapability)();return this._requests.push(e),e.promise}cancel(e){this._done=!0,this._requests.forEach((function(e){e.resolve({value:void 0,done:!0})})),this._requests=[],this._stream._removeRangeReader(this)}}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.WebGLContext=void 0;var n=r(2);t.WebGLContext=class{constructor({enable:e=!1}){this._enabled=!0===e}get isEnabled(){let e=this._enabled;return e&&(e=i.tryInitGL()),(0,n.shadow)(this,"isEnabled",e)}composeSMask({layer:e,mask:t,properties:r}){return i.composeSMask(e,t,r)}drawFigures({width:e,height:t,backgroundColor:r,figures:n,context:o}){return i.drawFigures(e,t,r,n,o)}clear(){i.cleanup()}};var i=function(){function e(e,t,r){var n=e.createShader(r);if(e.shaderSource(n,t),e.compileShader(n),!e.getShaderParameter(n,e.COMPILE_STATUS)){var i=e.getShaderInfoLog(n);throw new Error("Error during shader compilation: "+i)}return n}function t(t,r){return e(t,r,t.VERTEX_SHADER)}function r(t,r){return e(t,r,t.FRAGMENT_SHADER)}function n(e,t){for(var r=e.createProgram(),n=0,i=t.length;n<i;++n)e.attachShader(r,t[n]);if(e.linkProgram(r),!e.getProgramParameter(r,e.LINK_STATUS)){var o=e.getProgramInfoLog(r);throw new Error("Error during program linking: "+o)}return r}function i(e,t,r){e.activeTexture(r);var n=e.createTexture();return e.bindTexture(e.TEXTURE_2D,n),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_WRAP_S,e.CLAMP_TO_EDGE),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_WRAP_T,e.CLAMP_TO_EDGE),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_MIN_FILTER,e.NEAREST),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_MAG_FILTER,e.NEAREST),e.texImage2D(e.TEXTURE_2D,0,e.RGBA,e.RGBA,e.UNSIGNED_BYTE,t),n}var o,a;function s(){o||(a=document.createElement("canvas"),o=a.getContext("webgl",{premultipliedalpha:!1}))}var c=null,u=null;return{tryInitGL(){try{return s(),!!o}catch(e){}return!1},composeSMask:function(e,u,l){var h=e.width,f=e.height;c||function(){var e,i;s(),e=a,a=null,i=o,o=null;var u=n(i,[t(i,"  attribute vec2 a_position;                                      attribute vec2 a_texCoord;                                                                                                      uniform vec2 u_resolution;                                                                                                      varying vec2 v_texCoord;                                                                                                        void main() {                                                     vec2 clipSpace = (a_position / u_resolution) * 2.0 - 1.0;       gl_Position = vec4(clipSpace * vec2(1, -1), 0, 1);                                                                              v_texCoord = a_texCoord;                                      }                                                             "),r(i,"  precision mediump float;                                                                                                        uniform vec4 u_backdrop;                                        uniform int u_subtype;                                          uniform sampler2D u_image;                                      uniform sampler2D u_mask;                                                                                                       varying vec2 v_texCoord;                                                                                                        void main() {                                                     vec4 imageColor = texture2D(u_image, v_texCoord);               vec4 maskColor = texture2D(u_mask, v_texCoord);                 if (u_backdrop.a > 0.0) {                                         maskColor.rgb = maskColor.rgb * maskColor.a +                                   u_backdrop.rgb * (1.0 - maskColor.a);         }                                                               float lum;                                                      if (u_subtype == 0) {                                             lum = maskColor.a;                                            } else {                                                          lum = maskColor.r * 0.3 + maskColor.g * 0.59 +                        maskColor.b * 0.11;                                     }                                                               imageColor.a *= lum;                                            imageColor.rgb *= imageColor.a;                                 gl_FragColor = imageColor;                                    }                                                             ")]);i.useProgram(u);var l={};l.gl=i,l.canvas=e,l.resolutionLocation=i.getUniformLocation(u,"u_resolution"),l.positionLocation=i.getAttribLocation(u,"a_position"),l.backdropLocation=i.getUniformLocation(u,"u_backdrop"),l.subtypeLocation=i.getUniformLocation(u,"u_subtype");var h=i.getAttribLocation(u,"a_texCoord"),f=i.getUniformLocation(u,"u_image"),p=i.getUniformLocation(u,"u_mask"),d=i.createBuffer();i.bindBuffer(i.ARRAY_BUFFER,d),i.bufferData(i.ARRAY_BUFFER,new Float32Array([0,0,1,0,0,1,0,1,1,0,1,1]),i.STATIC_DRAW),i.enableVertexAttribArray(h),i.vertexAttribPointer(h,2,i.FLOAT,!1,0,0),i.uniform1i(f,0),i.uniform1i(p,1),c=l}();var p=c,d=p.canvas,g=p.gl;d.width=h,d.height=f,g.viewport(0,0,g.drawingBufferWidth,g.drawingBufferHeight),g.uniform2f(p.resolutionLocation,h,f),l.backdrop?g.uniform4f(p.resolutionLocation,l.backdrop[0],l.backdrop[1],l.backdrop[2],1):g.uniform4f(p.resolutionLocation,0,0,0,0),g.uniform1i(p.subtypeLocation,"Luminosity"===l.subtype?1:0);var m=i(g,e,g.TEXTURE0),v=i(g,u,g.TEXTURE1),y=g.createBuffer();return g.bindBuffer(g.ARRAY_BUFFER,y),g.bufferData(g.ARRAY_BUFFER,new Float32Array([0,0,h,0,0,f,0,f,h,0,h,f]),g.STATIC_DRAW),g.enableVertexAttribArray(p.positionLocation),g.vertexAttribPointer(p.positionLocation,2,g.FLOAT,!1,0,0),g.clearColor(0,0,0,0),g.enable(g.BLEND),g.blendFunc(g.ONE,g.ONE_MINUS_SRC_ALPHA),g.clear(g.COLOR_BUFFER_BIT),g.drawArrays(g.TRIANGLES,0,6),g.flush(),g.deleteTexture(m),g.deleteTexture(v),g.deleteBuffer(y),d},drawFigures:function(e,i,c,l,h){u||function(){var e,i;s(),e=a,a=null,i=o,o=null;var c=n(i,[t(i,"  attribute vec2 a_position;                                      attribute vec3 a_color;                                                                                                         uniform vec2 u_resolution;                                      uniform vec2 u_scale;                                           uniform vec2 u_offset;                                                                                                          varying vec4 v_color;                                                                                                           void main() {                                                     vec2 position = (a_position + u_offset) * u_scale;              vec2 clipSpace = (position / u_resolution) * 2.0 - 1.0;         gl_Position = vec4(clipSpace * vec2(1, -1), 0, 1);                                                                              v_color = vec4(a_color / 255.0, 1.0);                         }                                                             "),r(i,"  precision mediump float;                                                                                                        varying vec4 v_color;                                                                                                           void main() {                                                     gl_FragColor = v_color;                                       }                                                             ")]);i.useProgram(c);var l={};l.gl=i,l.canvas=e,l.resolutionLocation=i.getUniformLocation(c,"u_resolution"),l.scaleLocation=i.getUniformLocation(c,"u_scale"),l.offsetLocation=i.getUniformLocation(c,"u_offset"),l.positionLocation=i.getAttribLocation(c,"a_position"),l.colorLocation=i.getAttribLocation(c,"a_color"),u=l}();var f=u,p=f.canvas,d=f.gl;p.width=e,p.height=i,d.viewport(0,0,d.drawingBufferWidth,d.drawingBufferHeight),d.uniform2f(f.resolutionLocation,e,i);var g,m,v,y=0;for(g=0,m=l.length;g<m;g++)switch(l[g].type){case"lattice":y+=((v=l[g].coords.length/l[g].verticesPerRow|0)-1)*(l[g].verticesPerRow-1)*6;break;case"triangles":y+=l[g].coords.length}var _=new Float32Array(2*y),b=new Uint8Array(3*y),A=h.coords,x=h.colors,w=0,S=0;for(g=0,m=l.length;g<m;g++){var E=l[g],C=E.coords,k=E.colors;switch(E.type){case"lattice":var P=E.verticesPerRow;v=C.length/P|0;for(var R=1;R<v;R++)for(var T=R*P+1,O=1;O<P;O++,T++)_[w]=A[C[T-P-1]],_[w+1]=A[C[T-P-1]+1],_[w+2]=A[C[T-P]],_[w+3]=A[C[T-P]+1],_[w+4]=A[C[T-1]],_[w+5]=A[C[T-1]+1],b[S]=x[k[T-P-1]],b[S+1]=x[k[T-P-1]+1],b[S+2]=x[k[T-P-1]+2],b[S+3]=x[k[T-P]],b[S+4]=x[k[T-P]+1],b[S+5]=x[k[T-P]+2],b[S+6]=x[k[T-1]],b[S+7]=x[k[T-1]+1],b[S+8]=x[k[T-1]+2],_[w+6]=_[w+2],_[w+7]=_[w+3],_[w+8]=_[w+4],_[w+9]=_[w+5],_[w+10]=A[C[T]],_[w+11]=A[C[T]+1],b[S+9]=b[S+3],b[S+10]=b[S+4],b[S+11]=b[S+5],b[S+12]=b[S+6],b[S+13]=b[S+7],b[S+14]=b[S+8],b[S+15]=x[k[T]],b[S+16]=x[k[T]+1],b[S+17]=x[k[T]+2],w+=12,S+=18;break;case"triangles":for(var L=0,F=C.length;L<F;L++)_[w]=A[C[L]],_[w+1]=A[C[L]+1],b[S]=x[k[L]],b[S+1]=x[k[L]+1],b[S+2]=x[k[L]+2],w+=2,S+=3}}c?d.clearColor(c[0]/255,c[1]/255,c[2]/255,1):d.clearColor(0,0,0,0),d.clear(d.COLOR_BUFFER_BIT);var I=d.createBuffer();d.bindBuffer(d.ARRAY_BUFFER,I),d.bufferData(d.ARRAY_BUFFER,_,d.STATIC_DRAW),d.enableVertexAttribArray(f.positionLocation),d.vertexAttribPointer(f.positionLocation,2,d.FLOAT,!1,0,0);var M=d.createBuffer();return d.bindBuffer(d.ARRAY_BUFFER,M),d.bufferData(d.ARRAY_BUFFER,b,d.STATIC_DRAW),d.enableVertexAttribArray(f.colorLocation),d.vertexAttribPointer(f.colorLocation,3,d.UNSIGNED_BYTE,!1,0,0),d.uniform2f(f.scaleLocation,h.scaleX,h.scaleY),d.uniform2f(f.offsetLocation,h.offsetX,h.offsetY),d.drawArrays(d.TRIANGLES,0,y),d.flush(),d.deleteBuffer(I),d.deleteBuffer(M),p},cleanup(){c&&c.canvas&&(c.canvas.width=0,c.canvas.height=0),u&&u.canvas&&(u.canvas.width=0,u.canvas.height=0),c=null,u=null}}}()},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.AnnotationLayer=void 0;var n=r(1),i=r(2);class o{static create(e){switch(e.data.annotationType){case i.AnnotationType.LINK:return new s(e);case i.AnnotationType.TEXT:return new c(e);case i.AnnotationType.WIDGET:switch(e.data.fieldType){case"Tx":return new l(e);case"Btn":return e.data.radioButton?new f(e):e.data.checkBox?new h(e):new p(e);case"Ch":return new d(e)}return new u(e);case i.AnnotationType.POPUP:return new g(e);case i.AnnotationType.FREETEXT:return new v(e);case i.AnnotationType.LINE:return new y(e);case i.AnnotationType.SQUARE:return new _(e);case i.AnnotationType.CIRCLE:return new b(e);case i.AnnotationType.POLYLINE:return new A(e);case i.AnnotationType.CARET:return new w(e);case i.AnnotationType.INK:return new S(e);case i.AnnotationType.POLYGON:return new x(e);case i.AnnotationType.HIGHLIGHT:return new E(e);case i.AnnotationType.UNDERLINE:return new C(e);case i.AnnotationType.SQUIGGLY:return new k(e);case i.AnnotationType.STRIKEOUT:return new P(e);case i.AnnotationType.STAMP:return new R(e);case i.AnnotationType.FILEATTACHMENT:return new T(e);default:return new a(e)}}}class a{constructor(e,t=!1,r=!1){this.isRenderable=t,this.data=e.data,this.layer=e.layer,this.page=e.page,this.viewport=e.viewport,this.linkService=e.linkService,this.downloadManager=e.downloadManager,this.imageResourcesPath=e.imageResourcesPath,this.renderInteractiveForms=e.renderInteractiveForms,this.svgFactory=e.svgFactory,t&&(this.container=this._createContainer(r))}_createContainer(e=!1){const t=this.data,r=this.page,n=this.viewport,o=document.createElement("section");let a=t.rect[2]-t.rect[0],s=t.rect[3]-t.rect[1];o.setAttribute("data-annotation-id",t.id);const c=i.Util.normalizeRect([t.rect[0],r.view[3]-t.rect[1]+r.view[1],t.rect[2],r.view[3]-t.rect[3]+r.view[1]]);if(o.style.transform=`matrix(${n.transform.join(",")})`,o.style.transformOrigin=`-${c[0]}px -${c[1]}px`,!e&&t.borderStyle.width>0){o.style.borderWidth=`${t.borderStyle.width}px`,t.borderStyle.style!==i.AnnotationBorderStyleType.UNDERLINE&&(a-=2*t.borderStyle.width,s-=2*t.borderStyle.width);const e=t.borderStyle.horizontalCornerRadius,r=t.borderStyle.verticalCornerRadius;if(e>0||r>0){const t=`${e}px / ${r}px`;o.style.borderRadius=t}switch(t.borderStyle.style){case i.AnnotationBorderStyleType.SOLID:o.style.borderStyle="solid";break;case i.AnnotationBorderStyleType.DASHED:o.style.borderStyle="dashed";break;case i.AnnotationBorderStyleType.BEVELED:(0,i.warn)("Unimplemented border style: beveled");break;case i.AnnotationBorderStyleType.INSET:(0,i.warn)("Unimplemented border style: inset");break;case i.AnnotationBorderStyleType.UNDERLINE:o.style.borderBottomStyle="solid"}t.color?o.style.borderColor=i.Util.makeCssRgb(0|t.color[0],0|t.color[1],0|t.color[2]):o.style.borderWidth=0}return o.style.left=`${c[0]}px`,o.style.top=`${c[1]}px`,o.style.width=`${a}px`,o.style.height=`${s}px`,o}_createPopup(e,t,r){t||((t=document.createElement("div")).style.height=e.style.height,t.style.width=e.style.width,e.appendChild(t));const n=new m({container:e,trigger:t,color:r.color,title:r.title,modificationDate:r.modificationDate,contents:r.contents,hideWrapper:!0}).render();n.style.left=e.style.width,e.appendChild(n)}render(){(0,i.unreachable)("Abstract method `AnnotationElement.render` called")}}class s extends a{constructor(e){super(e,!!(e.data.url||e.data.dest||e.data.action))}render(){this.container.className="linkAnnotation";const{data:e,linkService:t}=this,r=document.createElement("a");return e.url?(0,n.addLinkAttributes)(r,{url:e.url,target:e.newWindow?n.LinkTarget.BLANK:t.externalLinkTarget,rel:t.externalLinkRel,enabled:t.externalLinkEnabled}):e.action?this._bindNamedAction(r,e.action):this._bindLink(r,e.dest),this.container.appendChild(r),this.container}_bindLink(e,t){e.href=this.linkService.getDestinationHash(t),e.onclick=()=>(t&&this.linkService.navigateTo(t),!1),t&&(e.className="internalLink")}_bindNamedAction(e,t){e.href=this.linkService.getAnchorUrl(""),e.onclick=()=>(this.linkService.executeNamedAction(t),!1),e.className="internalLink"}}class c extends a{constructor(e){super(e,!!(e.data.hasPopup||e.data.title||e.data.contents))}render(){this.container.className="textAnnotation";const e=document.createElement("img");return e.style.height=this.container.style.height,e.style.width=this.container.style.width,e.src=this.imageResourcesPath+"annotation-"+this.data.name.toLowerCase()+".svg",e.alt="[{{type}} Annotation]",e.dataset.l10nId="text_annotation_type",e.dataset.l10nArgs=JSON.stringify({type:this.data.name}),this.data.hasPopup||this._createPopup(this.container,e,this.data),this.container.appendChild(e),this.container}}class u extends a{render(){return this.container}}class l extends u{constructor(e){super(e,e.renderInteractiveForms||!e.data.hasAppearance&&!!e.data.fieldValue)}render(){this.container.className="textWidgetAnnotation";let e=null;if(this.renderInteractiveForms){if(this.data.multiLine?(e=document.createElement("textarea"),e.textContent=this.data.fieldValue):(e=document.createElement("input"),e.type="text",e.setAttribute("value",this.data.fieldValue)),e.disabled=this.data.readOnly,e.name=this.data.fieldName,null!==this.data.maxLen&&(e.maxLength=this.data.maxLen),this.data.comb){const t=(this.data.rect[2]-this.data.rect[0])/this.data.maxLen;e.classList.add("comb"),e.style.letterSpacing=`calc(${t}px - 1ch)`}}else{e=document.createElement("div"),e.textContent=this.data.fieldValue,e.style.verticalAlign="middle",e.style.display="table-cell";let t=null;this.data.fontRefName&&this.page.commonObjs.has(this.data.fontRefName)&&(t=this.page.commonObjs.get(this.data.fontRefName)),this._setTextStyle(e,t)}return null!==this.data.textAlignment&&(e.style.textAlign=["left","center","right"][this.data.textAlignment]),this.container.appendChild(e),this.container}_setTextStyle(e,t){const r=e.style;if(r.fontSize=`${this.data.fontSize}px`,r.direction=this.data.fontDirection<0?"rtl":"ltr",!t)return;let n="normal";t.black?n="900":t.bold&&(n="bold"),r.fontWeight=n,r.fontStyle=t.italic?"italic":"normal";const i=t.loadedName?`"${t.loadedName}", `:"",o=t.fallbackName||"Helvetica, sans-serif";r.fontFamily=i+o}}class h extends u{constructor(e){super(e,e.renderInteractiveForms)}render(){this.container.className="buttonWidgetAnnotation checkBox";const e=document.createElement("input");return e.disabled=this.data.readOnly,e.type="checkbox",e.name=this.data.fieldName,this.data.fieldValue&&"Off"!==this.data.fieldValue&&e.setAttribute("checked",!0),this.container.appendChild(e),this.container}}class f extends u{constructor(e){super(e,e.renderInteractiveForms)}render(){this.container.className="buttonWidgetAnnotation radioButton";const e=document.createElement("input");return e.disabled=this.data.readOnly,e.type="radio",e.name=this.data.fieldName,this.data.fieldValue===this.data.buttonValue&&e.setAttribute("checked",!0),this.container.appendChild(e),this.container}}class p extends s{render(){const e=super.render();return e.className="buttonWidgetAnnotation pushButton",e}}class d extends u{constructor(e){super(e,e.renderInteractiveForms)}render(){this.container.className="choiceWidgetAnnotation";const e=document.createElement("select");e.disabled=this.data.readOnly,e.name=this.data.fieldName,this.data.combo||(e.size=this.data.options.length,this.data.multiSelect&&(e.multiple=!0));for(const t of this.data.options){const r=document.createElement("option");r.textContent=t.displayValue,r.value=t.exportValue,this.data.fieldValue.includes(t.displayValue)&&r.setAttribute("selected",!0),e.appendChild(r)}return this.container.appendChild(e),this.container}}class g extends a{constructor(e){super(e,!(!e.data.title&&!e.data.contents))}render(){if(this.container.className="popupAnnotation",["Line","Square","Circle","PolyLine","Polygon","Ink"].includes(this.data.parentType))return this.container;const e=`[data-annotation-id="${this.data.parentId}"]`,t=this.layer.querySelector(e);if(!t)return this.container;const r=new m({container:this.container,trigger:t,color:this.data.color,title:this.data.title,modificationDate:this.data.modificationDate,contents:this.data.contents}),n=parseFloat(t.style.left),i=parseFloat(t.style.width);return this.container.style.transformOrigin=`-${n+i}px -${t.style.top}`,this.container.style.left=`${n+i}px`,this.container.appendChild(r.render()),this.container}}class m{constructor(e){this.container=e.container,this.trigger=e.trigger,this.color=e.color,this.title=e.title,this.modificationDate=e.modificationDate,this.contents=e.contents,this.hideWrapper=e.hideWrapper||!1,this.pinned=!1}render(){const e=document.createElement("div");e.className="popupWrapper",this.hideElement=this.hideWrapper?e:this.container,this.hideElement.setAttribute("hidden",!0);const t=document.createElement("div");t.className="popup";const r=this.color;if(r){const e=.7*(255-r[0])+r[0],n=.7*(255-r[1])+r[1],o=.7*(255-r[2])+r[2];t.style.backgroundColor=i.Util.makeCssRgb(0|e,0|n,0|o)}const o=document.createElement("h1");o.textContent=this.title,t.appendChild(o);const a=n.PDFDateString.toDateObject(this.modificationDate);if(a){const e=document.createElement("span");e.textContent="{{date}}, {{time}}",e.dataset.l10nId="annotation_date_string",e.dataset.l10nArgs=JSON.stringify({date:a.toLocaleDateString(),time:a.toLocaleTimeString()}),t.appendChild(e)}const s=this._formatContents(this.contents);return t.appendChild(s),this.trigger.addEventListener("click",this._toggle.bind(this)),this.trigger.addEventListener("mouseover",this._show.bind(this,!1)),this.trigger.addEventListener("mouseout",this._hide.bind(this,!1)),t.addEventListener("click",this._hide.bind(this,!0)),e.appendChild(t),e}_formatContents(e){const t=document.createElement("p"),r=e.split(/(?:\r\n?|\n)/);for(let e=0,n=r.length;e<n;++e){const i=r[e];t.appendChild(document.createTextNode(i)),e<n-1&&t.appendChild(document.createElement("br"))}return t}_toggle(){this.pinned?this._hide(!0):this._show(!0)}_show(e=!1){e&&(this.pinned=!0),this.hideElement.hasAttribute("hidden")&&(this.hideElement.removeAttribute("hidden"),this.container.style.zIndex+=1)}_hide(e=!0){e&&(this.pinned=!1),this.hideElement.hasAttribute("hidden")||this.pinned||(this.hideElement.setAttribute("hidden",!0),this.container.style.zIndex-=1)}}class v extends a{constructor(e){super(e,!!(e.data.hasPopup||e.data.title||e.data.contents),!0)}render(){return this.container.className="freeTextAnnotation",this.data.hasPopup||this._createPopup(this.container,null,this.data),this.container}}class y extends a{constructor(e){super(e,!!(e.data.hasPopup||e.data.title||e.data.contents),!0)}render(){this.container.className="lineAnnotation";const e=this.data,t=e.rect[2]-e.rect[0],r=e.rect[3]-e.rect[1],n=this.svgFactory.create(t,r),i=this.svgFactory.createElement("svg:line");return i.setAttribute("x1",e.rect[2]-e.lineCoordinates[0]),i.setAttribute("y1",e.rect[3]-e.lineCoordinates[1]),i.setAttribute("x2",e.rect[2]-e.lineCoordinates[2]),i.setAttribute("y2",e.rect[3]-e.lineCoordinates[3]),i.setAttribute("stroke-width",e.borderStyle.width||1),i.setAttribute("stroke","transparent"),n.appendChild(i),this.container.append(n),this._createPopup(this.container,i,e),this.container}}class _ extends a{constructor(e){super(e,!!(e.data.hasPopup||e.data.title||e.data.contents),!0)}render(){this.container.className="squareAnnotation";const e=this.data,t=e.rect[2]-e.rect[0],r=e.rect[3]-e.rect[1],n=this.svgFactory.create(t,r),i=e.borderStyle.width,o=this.svgFactory.createElement("svg:rect");return o.setAttribute("x",i/2),o.setAttribute("y",i/2),o.setAttribute("width",t-i),o.setAttribute("height",r-i),o.setAttribute("stroke-width",i||1),o.setAttribute("stroke","transparent"),o.setAttribute("fill","none"),n.appendChild(o),this.container.append(n),this._createPopup(this.container,o,e),this.container}}class b extends a{constructor(e){super(e,!!(e.data.hasPopup||e.data.title||e.data.contents),!0)}render(){this.container.className="circleAnnotation";const e=this.data,t=e.rect[2]-e.rect[0],r=e.rect[3]-e.rect[1],n=this.svgFactory.create(t,r),i=e.borderStyle.width,o=this.svgFactory.createElement("svg:ellipse");return o.setAttribute("cx",t/2),o.setAttribute("cy",r/2),o.setAttribute("rx",t/2-i/2),o.setAttribute("ry",r/2-i/2),o.setAttribute("stroke-width",i||1),o.setAttribute("stroke","transparent"),o.setAttribute("fill","none"),n.appendChild(o),this.container.append(n),this._createPopup(this.container,o,e),this.container}}class A extends a{constructor(e){super(e,!!(e.data.hasPopup||e.data.title||e.data.contents),!0),this.containerClassName="polylineAnnotation",this.svgElementName="svg:polyline"}render(){this.container.className=this.containerClassName;const e=this.data,t=e.rect[2]-e.rect[0],r=e.rect[3]-e.rect[1],n=this.svgFactory.create(t,r);let i=[];for(const t of e.vertices){const r=t.x-e.rect[0],n=e.rect[3]-t.y;i.push(r+","+n)}i=i.join(" ");const o=this.svgFactory.createElement(this.svgElementName);return o.setAttribute("points",i),o.setAttribute("stroke-width",e.borderStyle.width||1),o.setAttribute("stroke","transparent"),o.setAttribute("fill","none"),n.appendChild(o),this.container.append(n),this._createPopup(this.container,o,e),this.container}}class x extends A{constructor(e){super(e),this.containerClassName="polygonAnnotation",this.svgElementName="svg:polygon"}}class w extends a{constructor(e){super(e,!!(e.data.hasPopup||e.data.title||e.data.contents),!0)}render(){return this.container.className="caretAnnotation",this.data.hasPopup||this._createPopup(this.container,null,this.data),this.container}}class S extends a{constructor(e){super(e,!!(e.data.hasPopup||e.data.title||e.data.contents),!0),this.containerClassName="inkAnnotation",this.svgElementName="svg:polyline"}render(){this.container.className=this.containerClassName;const e=this.data,t=e.rect[2]-e.rect[0],r=e.rect[3]-e.rect[1],n=this.svgFactory.create(t,r);for(const t of e.inkLists){let r=[];for(const n of t){const t=n.x-e.rect[0],i=e.rect[3]-n.y;r.push(`${t},${i}`)}r=r.join(" ");const i=this.svgFactory.createElement(this.svgElementName);i.setAttribute("points",r),i.setAttribute("stroke-width",e.borderStyle.width||1),i.setAttribute("stroke","transparent"),i.setAttribute("fill","none"),this._createPopup(this.container,i,e),n.appendChild(i)}return this.container.append(n),this.container}}class E extends a{constructor(e){super(e,!!(e.data.hasPopup||e.data.title||e.data.contents),!0)}render(){return this.container.className="highlightAnnotation",this.data.hasPopup||this._createPopup(this.container,null,this.data),this.container}}class C extends a{constructor(e){super(e,!!(e.data.hasPopup||e.data.title||e.data.contents),!0)}render(){return this.container.className="underlineAnnotation",this.data.hasPopup||this._createPopup(this.container,null,this.data),this.container}}class k extends a{constructor(e){super(e,!!(e.data.hasPopup||e.data.title||e.data.contents),!0)}render(){return this.container.className="squigglyAnnotation",this.data.hasPopup||this._createPopup(this.container,null,this.data),this.container}}class P extends a{constructor(e){super(e,!!(e.data.hasPopup||e.data.title||e.data.contents),!0)}render(){return this.container.className="strikeoutAnnotation",this.data.hasPopup||this._createPopup(this.container,null,this.data),this.container}}class R extends a{constructor(e){super(e,!!(e.data.hasPopup||e.data.title||e.data.contents),!0)}render(){return this.container.className="stampAnnotation",this.data.hasPopup||this._createPopup(this.container,null,this.data),this.container}}class T extends a{constructor(e){super(e,!0);const{filename:t,content:r}=this.data.file;this.filename=(0,n.getFilenameFromUrl)(t),this.content=r,this.linkService.eventBus&&this.linkService.eventBus.dispatch("fileattachmentannotation",{source:this,id:(0,i.stringToPDFString)(t),filename:t,content:r})}render(){this.container.className="fileAttachmentAnnotation";const e=document.createElement("div");return e.style.height=this.container.style.height,e.style.width=this.container.style.width,e.addEventListener("dblclick",this._download.bind(this)),this.data.hasPopup||!this.data.title&&!this.data.contents||this._createPopup(this.container,e,this.data),this.container.appendChild(e),this.container}_download(){this.downloadManager?this.downloadManager.downloadData(this.content,this.filename,""):(0,i.warn)("Download cannot be started due to unavailable download manager")}}t.AnnotationLayer=class{static render(e){const t=[],r=[];for(const n of e.annotations)n&&(n.annotationType!==i.AnnotationType.POPUP?t.push(n):r.push(n));r.length&&t.push(...r);for(const r of t){const t=o.create({data:r,layer:e.div,page:e.page,viewport:e.viewport,linkService:e.linkService,downloadManager:e.downloadManager,imageResourcesPath:e.imageResourcesPath||"",renderInteractiveForms:e.renderInteractiveForms||!1,svgFactory:new n.DOMSVGFactory});t.isRenderable&&e.div.appendChild(t.render())}}static update(e){for(const t of e.annotations){const r=e.div.querySelector(`[data-annotation-id="${t.id}"]`);r&&(r.style.transform=`matrix(${e.viewport.transform.join(",")})`)}e.div.removeAttribute("hidden")}}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.renderTextLayer=void 0;var n=r(2),i=function(){var e=/\S/;function t(t,r,i){var o,a=document.createElement("span"),s={angle:0,canvasWidth:0,isWhitespace:!1,originalTransform:null,paddingBottom:0,paddingLeft:0,paddingRight:0,paddingTop:0,scale:1};if(t._textDivs.push(a),o=r.str,!e.test(o))return s.isWhitespace=!0,void t._textDivProperties.set(a,s);var c=n.Util.transform(t._viewport.transform,r.transform),u=Math.atan2(c[1],c[0]),l=i[r.fontName];l.vertical&&(u+=Math.PI/2);var h=Math.sqrt(c[2]*c[2]+c[3]*c[3]),f=h;let p,d;l.ascent?f=l.ascent*f:l.descent&&(f=(1+l.descent)*f),0===u?(p=c[4],d=c[5]-f):(p=c[4]+f*Math.sin(u),d=c[5]-f*Math.cos(u)),a.style.left=`${p}px`,a.style.top=`${d}px`,a.style.fontSize=`${h}px`,a.style.fontFamily=l.fontFamily,a.textContent=r.str,t._fontInspectorEnabled&&(a.dataset.fontName=r.fontName),0!==u&&(s.angle=u*(180/Math.PI));let g=!1;if(r.str.length>1)g=!0;else if(r.transform[0]!==r.transform[3]){const e=Math.abs(r.transform[0]),t=Math.abs(r.transform[3]);e!==t&&Math.max(e,t)/Math.min(e,t)>1.5&&(g=!0)}if(g&&(l.vertical?s.canvasWidth=r.height*t._viewport.scale:s.canvasWidth=r.width*t._viewport.scale),t._textDivProperties.set(a,s),t._textContentStream&&t._layoutText(a),t._enhanceTextSelection){var m=1,v=0;0!==u&&(m=Math.cos(u),v=Math.sin(u));var y,_,b=(l.vertical?r.height:r.width)*t._viewport.scale,A=h;0!==u?(y=[m,v,-v,m,p,d],_=n.Util.getAxialAlignedBoundingBox([0,0,b,A],y)):_=[p,d,p+b,d+A],t._bounds.push({left:_[0],top:_[1],right:_[2],bottom:_[3],div:a,size:[b,A],m:y})}}function r(e){if(!e._canceled){var t=e._textDivs,r=e._capability,n=t.length;if(n>1e5)return e._renderingDone=!0,void r.resolve();if(!e._textContentStream)for(var i=0;i<n;i++)e._layoutText(t[i]);e._renderingDone=!0,r.resolve()}}function i(e,t,r){let n=0;for(let i=0;i<r;i++){const r=e[t++];r>0&&(n=n?Math.min(r,n):r)}return n}function o(e,t){t.sort((function(e,t){return e.x1-t.x1||e.index-t.index}));var r=[{start:-1/0,end:1/0,boundary:{x1:-1/0,y1:-1/0,x2:0,y2:1/0,index:-1,x1New:0,x2New:0}}];t.forEach((function(e){for(var t=0;t<r.length&&r[t].end<=e.y1;)t++;for(var n,i,o=r.length-1;o>=0&&r[o].start>=e.y2;)o--;var a,s,c=-1/0;for(a=t;a<=o;a++){var u;(u=(i=(n=r[a]).boundary).x2>e.x1?i.index>e.index?i.x1New:e.x1:void 0===i.x2New?(i.x2+e.x1)/2:i.x2New)>c&&(c=u)}for(e.x1New=c,a=t;a<=o;a++)void 0===(i=(n=r[a]).boundary).x2New?i.x2>e.x1?i.index>e.index&&(i.x2New=i.x2):i.x2New=c:i.x2New>c&&(i.x2New=Math.max(c,i.x2));var l=[],h=null;for(a=t;a<=o;a++){var f=(i=(n=r[a]).boundary).x2>e.x2?i:e;h===f?l[l.length-1].end=n.end:(l.push({start:n.start,end:n.end,boundary:f}),h=f)}for(r[t].start<e.y1&&(l[0].start=e.y1,l.unshift({start:r[t].start,end:e.y1,boundary:r[t].boundary})),e.y2<r[o].end&&(l[l.length-1].end=e.y2,l.push({start:e.y2,end:r[o].end,boundary:r[o].boundary})),a=t;a<=o;a++)if(void 0===(i=(n=r[a]).boundary).x2New){var p=!1;for(s=t-1;!p&&s>=0&&r[s].start>=i.y1;s--)p=r[s].boundary===i;for(s=o+1;!p&&s<r.length&&r[s].end<=i.y2;s++)p=r[s].boundary===i;for(s=0;!p&&s<l.length;s++)p=l[s].boundary===i;p||(i.x2New=c)}Array.prototype.splice.apply(r,[t,o-t+1].concat(l))})),r.forEach((function(t){var r=t.boundary;void 0===r.x2New&&(r.x2New=Math.max(e,r.x2))}))}function a({textContent:e,textContentStream:t,container:r,viewport:i,textDivs:o,textContentItemsStr:a,enhanceTextSelection:s}){this._textContent=e,this._textContentStream=t,this._container=r,this._viewport=i,this._textDivs=o||[],this._textContentItemsStr=a||[],this._enhanceTextSelection=!!s,this._fontInspectorEnabled=!(!globalThis.FontInspector||!globalThis.FontInspector.enabled),this._reader=null,this._layoutTextLastFontSize=null,this._layoutTextLastFontFamily=null,this._layoutTextCtx=null,this._textDivProperties=new WeakMap,this._renderingDone=!1,this._canceled=!1,this._capability=(0,n.createPromiseCapability)(),this._renderTimer=null,this._bounds=[],this._capability.promise.finally((()=>{this._layoutTextCtx&&(this._layoutTextCtx.canvas.width=0,this._layoutTextCtx.canvas.height=0,this._layoutTextCtx=null)})).catch((()=>{}))}return a.prototype={get promise(){return this._capability.promise},cancel:function(){this._canceled=!0,this._reader&&(this._reader.cancel(new n.AbortException("TextLayer task cancelled.")),this._reader=null),null!==this._renderTimer&&(clearTimeout(this._renderTimer),this._renderTimer=null),this._capability.reject(new Error("TextLayer task cancelled."))},_processItems(e,r){for(let n=0,i=e.length;n<i;n++)this._textContentItemsStr.push(e[n].str),t(this,e[n],r)},_layoutText(e){const t=this._textDivProperties.get(e);if(t.isWhitespace)return;let r="";if(0!==t.canvasWidth){const{fontSize:n,fontFamily:i}=e.style;n===this._layoutTextLastFontSize&&i===this._layoutTextLastFontFamily||(this._layoutTextCtx.font=`${n} ${i}`,this._layoutTextLastFontSize=n,this._layoutTextLastFontFamily=i);const{width:o}=this._layoutTextCtx.measureText(e.textContent);o>0&&(t.scale=t.canvasWidth/o,r=`scaleX(${t.scale})`)}0!==t.angle&&(r=`rotate(${t.angle}deg) ${r}`),r.length>0&&(this._enhanceTextSelection&&(t.originalTransform=r),e.style.transform=r),this._textDivProperties.set(e,t),this._container.appendChild(e)},_render:function(e){const t=(0,n.createPromiseCapability)();let i=Object.create(null);const o=document.createElement("canvas");if(o.mozOpaque=!0,this._layoutTextCtx=o.getContext("2d",{alpha:!1}),this._textContent){const e=this._textContent.items,r=this._textContent.styles;this._processItems(e,r),t.resolve()}else{if(!this._textContentStream)throw new Error('Neither "textContent" nor "textContentStream" parameters specified.');{const e=()=>{this._reader.read().then((({value:r,done:n})=>{n?t.resolve():(Object.assign(i,r.styles),this._processItems(r.items,i),e())}),t.reject)};this._reader=this._textContentStream.getReader(),e()}}t.promise.then((()=>{i=null,e?this._renderTimer=setTimeout((()=>{r(this),this._renderTimer=null}),e):r(this)}),this._capability.reject)},expandTextDivs:function(e){if(!this._enhanceTextSelection||!this._renderingDone)return;null!==this._bounds&&(function(e){for(var t=e._bounds,r=e._viewport,a=function(e,t,r){var n=r.map((function(e,t){return{x1:e.left,y1:e.top,x2:e.right,y2:e.bottom,index:t,x1New:void 0,x2New:void 0}}));o(e,n);var i=new Array(r.length);return n.forEach((function(e){var t=e.index;i[t]={left:e.x1New,top:0,right:e.x2New,bottom:0}})),r.map((function(t,r){var o=i[r],a=n[r];a.x1=t.top,a.y1=e-o.right,a.x2=t.bottom,a.y2=e-o.left,a.index=r,a.x1New=void 0,a.x2New=void 0})),o(t,n),n.forEach((function(e){var t=e.index;i[t].top=e.x1New,i[t].bottom=e.x2New})),i}(r.width,r.height,t),s=0;s<a.length;s++){var c=t[s].div,u=e._textDivProperties.get(c);if(0!==u.angle){var l=a[s],h=t[s],f=h.m,p=f[0],d=f[1],g=[[0,0],[0,h.size[1]],[h.size[0],0],h.size],m=new Float64Array(64);g.forEach((function(e,t){var r=n.Util.applyTransform(e,f);m[t+0]=p&&(l.left-r[0])/p,m[t+4]=d&&(l.top-r[1])/d,m[t+8]=p&&(l.right-r[0])/p,m[t+12]=d&&(l.bottom-r[1])/d,m[t+16]=d&&(l.left-r[0])/-d,m[t+20]=p&&(l.top-r[1])/p,m[t+24]=d&&(l.right-r[0])/-d,m[t+28]=p&&(l.bottom-r[1])/p,m[t+32]=p&&(l.left-r[0])/-p,m[t+36]=d&&(l.top-r[1])/-d,m[t+40]=p&&(l.right-r[0])/-p,m[t+44]=d&&(l.bottom-r[1])/-d,m[t+48]=d&&(l.left-r[0])/d,m[t+52]=p&&(l.top-r[1])/-p,m[t+56]=d&&(l.right-r[0])/d,m[t+60]=p&&(l.bottom-r[1])/-p}));var v=1+Math.min(Math.abs(p),Math.abs(d));u.paddingLeft=i(m,32,16)/v,u.paddingTop=i(m,48,16)/v,u.paddingRight=i(m,0,16)/v,u.paddingBottom=i(m,16,16)/v,e._textDivProperties.set(c,u)}else u.paddingLeft=t[s].left-a[s].left,u.paddingTop=t[s].top-a[s].top,u.paddingRight=a[s].right-t[s].right,u.paddingBottom=a[s].bottom-t[s].bottom,e._textDivProperties.set(c,u)}}(this),this._bounds=null);const t=[],r=[];for(var a=0,s=this._textDivs.length;a<s;a++){const n=this._textDivs[a],i=this._textDivProperties.get(n);i.isWhitespace||(e?(t.length=0,r.length=0,i.originalTransform&&t.push(i.originalTransform),i.paddingTop>0?(r.push(`${i.paddingTop}px`),t.push(`translateY(${-i.paddingTop}px)`)):r.push(0),i.paddingRight>0?r.push(i.paddingRight/i.scale+"px"):r.push(0),i.paddingBottom>0?r.push(`${i.paddingBottom}px`):r.push(0),i.paddingLeft>0?(r.push(i.paddingLeft/i.scale+"px"),t.push(`translateX(${-i.paddingLeft/i.scale}px)`)):r.push(0),n.style.padding=r.join(" "),t.length&&(n.style.transform=t.join(" "))):(n.style.padding=null,n.style.transform=i.originalTransform))}}},function(e){var t=new a({textContent:e.textContent,textContentStream:e.textContentStream,container:e.container,viewport:e.viewport,textDivs:e.textDivs,textContentItemsStr:e.textContentItemsStr,enhanceTextSelection:e.enhanceTextSelection});return t._render(e.timeout),t}}();t.renderTextLayer=i},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.SVGGraphics=void 0;var n=r(2),i=r(1),o=r(4);let a=function(){throw new Error("Not implemented: SVGGraphics")};t.SVGGraphics=a;{const e={fontStyle:"normal",fontWeight:"normal",fillColor:"#000000"},r="http://www.w3.org/XML/1998/namespace",u="http://www.w3.org/1999/xlink",l=["butt","round","square"],h=["miter","round","bevel"],f=function(){const e=new Uint8Array([137,80,78,71,13,10,26,10]),t=new Int32Array(256);for(let e=0;e<256;e++){let r=e;for(let e=0;e<8;e++)r=1&r?3988292384^r>>1&2147483647:r>>1&2147483647;t[e]=r}function r(e,r,n,i){let o=i;const a=r.length;n[o]=a>>24&255,n[o+1]=a>>16&255,n[o+2]=a>>8&255,n[o+3]=255&a,o+=4,n[o]=255&e.charCodeAt(0),n[o+1]=255&e.charCodeAt(1),n[o+2]=255&e.charCodeAt(2),n[o+3]=255&e.charCodeAt(3),o+=4,n.set(r,o),o+=r.length;const s=function(e,r,n){let i=-1;for(let o=r;o<n;o++){const r=255&(i^e[o]);i=i>>>8^t[r]}return-1^i}(n,i+4,o);n[o]=s>>24&255,n[o+1]=s>>16&255,n[o+2]=s>>8&255,n[o+3]=255&s}function i(e){let t=e.length;const r=65535,n=Math.ceil(t/r),i=new Uint8Array(2+t+5*n+4);let o=0;i[o++]=120,i[o++]=156;let a=0;for(;t>r;)i[o++]=0,i[o++]=255,i[o++]=255,i[o++]=0,i[o++]=0,i.set(e.subarray(a,a+r),o),o+=r,a+=r,t-=r;i[o++]=1,i[o++]=255&t,i[o++]=t>>8&255,i[o++]=255&~t,i[o++]=(65535&~t)>>8&255,i.set(e.subarray(a),o),o+=e.length-a;const s=function(e,t,r){let n=1,i=0;for(let t=0;t<r;++t)n=(n+(255&e[t]))%65521,i=(i+n)%65521;return i<<16|n}(e,0,e.length);return i[o++]=s>>24&255,i[o++]=s>>16&255,i[o++]=s>>8&255,i[o++]=255&s,i}return function(t,a,s){return function(t,a,s,c){const u=t.width,l=t.height;let h,f,p;const d=t.data;switch(a){case n.ImageKind.GRAYSCALE_1BPP:f=0,h=1,p=u+7>>3;break;case n.ImageKind.RGB_24BPP:f=2,h=8,p=3*u;break;case n.ImageKind.RGBA_32BPP:f=6,h=8,p=4*u;break;default:throw new Error("invalid format")}const g=new Uint8Array((1+p)*l);let m=0,v=0;for(let e=0;e<l;++e)g[m++]=0,g.set(d.subarray(v,v+p),m),v+=p,m+=p;if(a===n.ImageKind.GRAYSCALE_1BPP&&c){m=0;for(let e=0;e<l;e++){m++;for(let e=0;e<p;e++)g[m++]^=255}}const y=new Uint8Array([u>>24&255,u>>16&255,u>>8&255,255&u,l>>24&255,l>>16&255,l>>8&255,255&l,h,f,0,0,0]),_=function(e){if(!o.isNodeJS)return i(e);try{let t;t=parseInt(process.versions.node)>=8?e:Buffer.from(e);const r=__webpack_require__(5804).deflateSync(t,{level:9});return r instanceof Uint8Array?r:new Uint8Array(r)}catch(e){(0,n.warn)("Not compressing PNG because zlib.deflateSync is unavailable: "+e)}return i(e)}(g),b=e.length+36+y.length+_.length,A=new Uint8Array(b);let x=0;return A.set(e,x),x+=e.length,r("IHDR",y,A,x),x+=12+y.length,r("IDATA",_,A,x),x+=12+_.length,r("IEND",new Uint8Array(0),A,x),(0,n.createObjectURL)(A,"image/png",s)}(t,void 0===t.kind?n.ImageKind.GRAYSCALE_1BPP:t.kind,a,s)}}();class p{constructor(){this.fontSizeScale=1,this.fontWeight=e.fontWeight,this.fontSize=0,this.textMatrix=n.IDENTITY_MATRIX,this.fontMatrix=n.FONT_IDENTITY_MATRIX,this.leading=0,this.textRenderingMode=n.TextRenderingMode.FILL,this.textMatrixScale=1,this.x=0,this.y=0,this.lineX=0,this.lineY=0,this.charSpacing=0,this.wordSpacing=0,this.textHScale=1,this.textRise=0,this.fillColor=e.fillColor,this.strokeColor="#000000",this.fillAlpha=1,this.strokeAlpha=1,this.lineWidth=1,this.lineJoin="",this.lineCap="",this.miterLimit=0,this.dashArray=[],this.dashPhase=0,this.dependencies=[],this.activeClipUrl=null,this.clipGroup=null,this.maskId=""}clone(){return Object.create(this)}setCurrentPoint(e,t){this.x=e,this.y=t}}function s(e){if(Number.isInteger(e))return e.toString();const t=e.toFixed(10);let r=t.length-1;if("0"!==t[r])return t;do{r--}while("0"===t[r]);return t.substring(0,"."===t[r]?r:r+1)}function c(e){if(0===e[4]&&0===e[5]){if(0===e[1]&&0===e[2])return 1===e[0]&&1===e[3]?"":`scale(${s(e[0])} ${s(e[3])})`;if(e[0]===e[3]&&e[1]===-e[2])return`rotate(${s(180*Math.acos(e[0])/Math.PI)})`}else if(1===e[0]&&0===e[1]&&0===e[2]&&1===e[3])return`translate(${s(e[4])} ${s(e[5])})`;return`matrix(${s(e[0])} ${s(e[1])} ${s(e[2])} ${s(e[3])} ${s(e[4])} ${s(e[5])})`}let d=0,g=0,m=0;t.SVGGraphics=a=class{constructor(e,t,r=!1){this.svgFactory=new i.DOMSVGFactory,this.current=new p,this.transformMatrix=n.IDENTITY_MATRIX,this.transformStack=[],this.extraStack=[],this.commonObjs=e,this.objs=t,this.pendingClip=null,this.pendingEOFill=!1,this.embedFonts=!1,this.embeddedFonts=Object.create(null),this.cssStyle=null,this.forceDataSchema=!!r,this._operatorIdMapping=[];for(const e in n.OPS)this._operatorIdMapping[n.OPS[e]]=e}save(){this.transformStack.push(this.transformMatrix);const e=this.current;this.extraStack.push(e),this.current=e.clone()}restore(){this.transformMatrix=this.transformStack.pop(),this.current=this.extraStack.pop(),this.pendingClip=null,this.tgrp=null}group(e){this.save(),this.executeOpTree(e),this.restore()}loadDependencies(e){const t=e.fnArray,r=e.argsArray;for(let e=0,i=t.length;e<i;e++)if(t[e]===n.OPS.dependency)for(const t of r[e]){const e=t.startsWith("g_")?this.commonObjs:this.objs,r=new Promise((r=>{e.get(t,r)}));this.current.dependencies.push(r)}return Promise.all(this.current.dependencies)}transform(e,t,r,i,o,a){const s=[e,t,r,i,o,a];this.transformMatrix=n.Util.transform(this.transformMatrix,s),this.tgrp=null}getSVG(e,t){this.viewport=t;const r=this._initialize(t);return this.loadDependencies(e).then((()=>(this.transformMatrix=n.IDENTITY_MATRIX,this.executeOpTree(this.convertOpList(e)),r)))}convertOpList(e){const t=this._operatorIdMapping,r=e.argsArray,n=e.fnArray,i=[];for(let e=0,o=n.length;e<o;e++){const o=n[e];i.push({fnId:o,fn:t[o],args:r[e]})}return function(e){let t=[];const r=[];for(const n of e)"save"!==n.fn?"restore"===n.fn?t=r.pop():t.push(n):(t.push({fnId:92,fn:"group",items:[]}),r.push(t),t=t[t.length-1].items);return t}(i)}executeOpTree(e){for(const t of e){const e=t.fn,r=t.fnId,i=t.args;switch(0|r){case n.OPS.beginText:this.beginText();break;case n.OPS.dependency:break;case n.OPS.setLeading:this.setLeading(i);break;case n.OPS.setLeadingMoveText:this.setLeadingMoveText(i[0],i[1]);break;case n.OPS.setFont:this.setFont(i);break;case n.OPS.showText:case n.OPS.showSpacedText:this.showText(i[0]);break;case n.OPS.endText:this.endText();break;case n.OPS.moveText:this.moveText(i[0],i[1]);break;case n.OPS.setCharSpacing:this.setCharSpacing(i[0]);break;case n.OPS.setWordSpacing:this.setWordSpacing(i[0]);break;case n.OPS.setHScale:this.setHScale(i[0]);break;case n.OPS.setTextMatrix:this.setTextMatrix(i[0],i[1],i[2],i[3],i[4],i[5]);break;case n.OPS.setTextRise:this.setTextRise(i[0]);break;case n.OPS.setTextRenderingMode:this.setTextRenderingMode(i[0]);break;case n.OPS.setLineWidth:this.setLineWidth(i[0]);break;case n.OPS.setLineJoin:this.setLineJoin(i[0]);break;case n.OPS.setLineCap:this.setLineCap(i[0]);break;case n.OPS.setMiterLimit:this.setMiterLimit(i[0]);break;case n.OPS.setFillRGBColor:this.setFillRGBColor(i[0],i[1],i[2]);break;case n.OPS.setStrokeRGBColor:this.setStrokeRGBColor(i[0],i[1],i[2]);break;case n.OPS.setStrokeColorN:this.setStrokeColorN(i);break;case n.OPS.setFillColorN:this.setFillColorN(i);break;case n.OPS.shadingFill:this.shadingFill(i[0]);break;case n.OPS.setDash:this.setDash(i[0],i[1]);break;case n.OPS.setRenderingIntent:this.setRenderingIntent(i[0]);break;case n.OPS.setFlatness:this.setFlatness(i[0]);break;case n.OPS.setGState:this.setGState(i[0]);break;case n.OPS.fill:this.fill();break;case n.OPS.eoFill:this.eoFill();break;case n.OPS.stroke:this.stroke();break;case n.OPS.fillStroke:this.fillStroke();break;case n.OPS.eoFillStroke:this.eoFillStroke();break;case n.OPS.clip:this.clip("nonzero");break;case n.OPS.eoClip:this.clip("evenodd");break;case n.OPS.paintSolidColorImageMask:this.paintSolidColorImageMask();break;case n.OPS.paintImageXObject:this.paintImageXObject(i[0]);break;case n.OPS.paintInlineImageXObject:this.paintInlineImageXObject(i[0]);break;case n.OPS.paintImageMaskXObject:this.paintImageMaskXObject(i[0]);break;case n.OPS.paintFormXObjectBegin:this.paintFormXObjectBegin(i[0],i[1]);break;case n.OPS.paintFormXObjectEnd:this.paintFormXObjectEnd();break;case n.OPS.closePath:this.closePath();break;case n.OPS.closeStroke:this.closeStroke();break;case n.OPS.closeFillStroke:this.closeFillStroke();break;case n.OPS.closeEOFillStroke:this.closeEOFillStroke();break;case n.OPS.nextLine:this.nextLine();break;case n.OPS.transform:this.transform(i[0],i[1],i[2],i[3],i[4],i[5]);break;case n.OPS.constructPath:this.constructPath(i[0],i[1]);break;case n.OPS.endPath:this.endPath();break;case 92:this.group(t.items);break;default:(0,n.warn)(`Unimplemented operator ${e}`)}}}setWordSpacing(e){this.current.wordSpacing=e}setCharSpacing(e){this.current.charSpacing=e}nextLine(){this.moveText(0,this.current.leading)}setTextMatrix(e,t,r,n,i,o){const a=this.current;a.textMatrix=a.lineMatrix=[e,t,r,n,i,o],a.textMatrixScale=Math.sqrt(e*e+t*t),a.x=a.lineX=0,a.y=a.lineY=0,a.xcoords=[],a.ycoords=[],a.tspan=this.svgFactory.createElement("svg:tspan"),a.tspan.setAttributeNS(null,"font-family",a.fontFamily),a.tspan.setAttributeNS(null,"font-size",`${s(a.fontSize)}px`),a.tspan.setAttributeNS(null,"y",s(-a.y)),a.txtElement=this.svgFactory.createElement("svg:text"),a.txtElement.appendChild(a.tspan)}beginText(){const e=this.current;e.x=e.lineX=0,e.y=e.lineY=0,e.textMatrix=n.IDENTITY_MATRIX,e.lineMatrix=n.IDENTITY_MATRIX,e.textMatrixScale=1,e.tspan=this.svgFactory.createElement("svg:tspan"),e.txtElement=this.svgFactory.createElement("svg:text"),e.txtgrp=this.svgFactory.createElement("svg:g"),e.xcoords=[],e.ycoords=[]}moveText(e,t){const r=this.current;r.x=r.lineX+=e,r.y=r.lineY+=t,r.xcoords=[],r.ycoords=[],r.tspan=this.svgFactory.createElement("svg:tspan"),r.tspan.setAttributeNS(null,"font-family",r.fontFamily),r.tspan.setAttributeNS(null,"font-size",`${s(r.fontSize)}px`),r.tspan.setAttributeNS(null,"y",s(-r.y))}showText(t){const i=this.current,o=i.font,a=i.fontSize;if(0===a)return;const u=i.fontSizeScale,l=i.charSpacing,h=i.wordSpacing,f=i.fontDirection,p=i.textHScale*f,d=o.vertical,g=d?1:-1,m=o.defaultVMetrics,v=a*i.fontMatrix[0];let y=0;for(const e of t){if(null===e){y+=f*h;continue}if((0,n.isNum)(e)){y+=g*e*a/1e3;continue}const t=(e.isSpace?h:0)+l,r=e.fontChar;let s,c,p,_=e.width;if(d){let t;const r=e.vmetric||m;t=e.vmetric?r[1]:.5*_,t=-t*v;const n=r[2]*v;_=r?-r[0]:_,s=t/u,c=(y+n)/u}else s=y/u,c=0;(e.isInFont||o.missingFile)&&(i.xcoords.push(i.x+s),d&&i.ycoords.push(-i.y+c),i.tspan.textContent+=r),p=d?_*v-t*f:_*v+t*f,y+=p}i.tspan.setAttributeNS(null,"x",i.xcoords.map(s).join(" ")),d?i.tspan.setAttributeNS(null,"y",i.ycoords.map(s).join(" ")):i.tspan.setAttributeNS(null,"y",s(-i.y)),d?i.y-=y:i.x+=y*p,i.tspan.setAttributeNS(null,"font-family",i.fontFamily),i.tspan.setAttributeNS(null,"font-size",`${s(i.fontSize)}px`),i.fontStyle!==e.fontStyle&&i.tspan.setAttributeNS(null,"font-style",i.fontStyle),i.fontWeight!==e.fontWeight&&i.tspan.setAttributeNS(null,"font-weight",i.fontWeight);const _=i.textRenderingMode&n.TextRenderingMode.FILL_STROKE_MASK;if(_===n.TextRenderingMode.FILL||_===n.TextRenderingMode.FILL_STROKE?(i.fillColor!==e.fillColor&&i.tspan.setAttributeNS(null,"fill",i.fillColor),i.fillAlpha<1&&i.tspan.setAttributeNS(null,"fill-opacity",i.fillAlpha)):i.textRenderingMode===n.TextRenderingMode.ADD_TO_PATH?i.tspan.setAttributeNS(null,"fill","transparent"):i.tspan.setAttributeNS(null,"fill","none"),_===n.TextRenderingMode.STROKE||_===n.TextRenderingMode.FILL_STROKE){const e=1/(i.textMatrixScale||1);this._setStrokeAttributes(i.tspan,e)}let b=i.textMatrix;0!==i.textRise&&(b=b.slice(),b[5]+=i.textRise),i.txtElement.setAttributeNS(null,"transform",`${c(b)} scale(${s(p)}, -1)`),i.txtElement.setAttributeNS(r,"xml:space","preserve"),i.txtElement.appendChild(i.tspan),i.txtgrp.appendChild(i.txtElement),this._ensureTransformGroup().appendChild(i.txtElement)}setLeadingMoveText(e,t){this.setLeading(-t),this.moveText(e,t)}addFontStyle(e){if(!e.data)throw new Error('addFontStyle: No font data available, ensure that the "fontExtraProperties" API parameter is set.');this.cssStyle||(this.cssStyle=this.svgFactory.createElement("svg:style"),this.cssStyle.setAttributeNS(null,"type","text/css"),this.defs.appendChild(this.cssStyle));const t=(0,n.createObjectURL)(e.data,e.mimetype,this.forceDataSchema);this.cssStyle.textContent+=`@font-face { font-family: "${e.loadedName}"; src: url(${t}); }\n`}setFont(e){const t=this.current,r=this.commonObjs.get(e[0]);let i=e[1];t.font=r,!this.embedFonts||r.missingFile||this.embeddedFonts[r.loadedName]||(this.addFontStyle(r),this.embeddedFonts[r.loadedName]=r),t.fontMatrix=r.fontMatrix?r.fontMatrix:n.FONT_IDENTITY_MATRIX;let o="normal";r.black?o="900":r.bold&&(o="bold");const a=r.italic?"italic":"normal";i<0?(i=-i,t.fontDirection=-1):t.fontDirection=1,t.fontSize=i,t.fontFamily=r.loadedName,t.fontWeight=o,t.fontStyle=a,t.tspan=this.svgFactory.createElement("svg:tspan"),t.tspan.setAttributeNS(null,"y",s(-t.y)),t.xcoords=[],t.ycoords=[]}endText(){const e=this.current;e.textRenderingMode&n.TextRenderingMode.ADD_TO_PATH_FLAG&&e.txtElement&&e.txtElement.hasChildNodes()&&(e.element=e.txtElement,this.clip("nonzero"),this.endPath())}setLineWidth(e){e>0&&(this.current.lineWidth=e)}setLineCap(e){this.current.lineCap=l[e]}setLineJoin(e){this.current.lineJoin=h[e]}setMiterLimit(e){this.current.miterLimit=e}setStrokeAlpha(e){this.current.strokeAlpha=e}setStrokeRGBColor(e,t,r){this.current.strokeColor=n.Util.makeCssRgb(e,t,r)}setFillAlpha(e){this.current.fillAlpha=e}setFillRGBColor(e,t,r){this.current.fillColor=n.Util.makeCssRgb(e,t,r),this.current.tspan=this.svgFactory.createElement("svg:tspan"),this.current.xcoords=[],this.current.ycoords=[]}setStrokeColorN(e){this.current.strokeColor=this._makeColorN_Pattern(e)}setFillColorN(e){this.current.fillColor=this._makeColorN_Pattern(e)}shadingFill(e){const t=this.viewport.width,r=this.viewport.height,i=n.Util.inverseTransform(this.transformMatrix),o=n.Util.applyTransform([0,0],i),a=n.Util.applyTransform([0,r],i),s=n.Util.applyTransform([t,0],i),c=n.Util.applyTransform([t,r],i),u=Math.min(o[0],a[0],s[0],c[0]),l=Math.min(o[1],a[1],s[1],c[1]),h=Math.max(o[0],a[0],s[0],c[0]),f=Math.max(o[1],a[1],s[1],c[1]),p=this.svgFactory.createElement("svg:rect");p.setAttributeNS(null,"x",u),p.setAttributeNS(null,"y",l),p.setAttributeNS(null,"width",h-u),p.setAttributeNS(null,"height",f-l),p.setAttributeNS(null,"fill",this._makeShadingPattern(e)),this.current.fillAlpha<1&&p.setAttributeNS(null,"fill-opacity",this.current.fillAlpha),this._ensureTransformGroup().appendChild(p)}_makeColorN_Pattern(e){return"TilingPattern"===e[0]?this._makeTilingPattern(e):this._makeShadingPattern(e)}_makeTilingPattern(e){const t=e[1],r=e[2],i=e[3]||n.IDENTITY_MATRIX,[o,a,s,c]=e[4],u=e[5],l=e[6],h=e[7],f="shading"+m++,[p,d]=n.Util.applyTransform([o,a],i),[g,v]=n.Util.applyTransform([s,c],i),[y,_]=n.Util.singularValueDecompose2dScale(i),b=u*y,A=l*_,x=this.svgFactory.createElement("svg:pattern");x.setAttributeNS(null,"id",f),x.setAttributeNS(null,"patternUnits","userSpaceOnUse"),x.setAttributeNS(null,"width",b),x.setAttributeNS(null,"height",A),x.setAttributeNS(null,"x",`${p}`),x.setAttributeNS(null,"y",`${d}`);const w=this.svg,S=this.transformMatrix,E=this.current.fillColor,C=this.current.strokeColor,k=this.svgFactory.create(g-p,v-d);if(this.svg=k,this.transformMatrix=i,2===h){const e=n.Util.makeCssRgb(...t);this.current.fillColor=e,this.current.strokeColor=e}return this.executeOpTree(this.convertOpList(r)),this.svg=w,this.transformMatrix=S,this.current.fillColor=E,this.current.strokeColor=C,x.appendChild(k.childNodes[0]),this.defs.appendChild(x),`url(#${f})`}_makeShadingPattern(e){switch(e[0]){case"RadialAxial":const t="shading"+m++,r=e[3];let i;switch(e[1]){case"axial":const r=e[4],n=e[5];i=this.svgFactory.createElement("svg:linearGradient"),i.setAttributeNS(null,"id",t),i.setAttributeNS(null,"gradientUnits","userSpaceOnUse"),i.setAttributeNS(null,"x1",r[0]),i.setAttributeNS(null,"y1",r[1]),i.setAttributeNS(null,"x2",n[0]),i.setAttributeNS(null,"y2",n[1]);break;case"radial":const o=e[4],a=e[5],s=e[6],c=e[7];i=this.svgFactory.createElement("svg:radialGradient"),i.setAttributeNS(null,"id",t),i.setAttributeNS(null,"gradientUnits","userSpaceOnUse"),i.setAttributeNS(null,"cx",a[0]),i.setAttributeNS(null,"cy",a[1]),i.setAttributeNS(null,"r",c),i.setAttributeNS(null,"fx",o[0]),i.setAttributeNS(null,"fy",o[1]),i.setAttributeNS(null,"fr",s);break;default:throw new Error(`Unknown RadialAxial type: ${e[1]}`)}for(const e of r){const t=this.svgFactory.createElement("svg:stop");t.setAttributeNS(null,"offset",e[0]),t.setAttributeNS(null,"stop-color",e[1]),i.appendChild(t)}return this.defs.appendChild(i),`url(#${t})`;case"Mesh":return(0,n.warn)("Unimplemented pattern Mesh"),null;case"Dummy":return"hotpink";default:throw new Error(`Unknown IR type: ${e[0]}`)}}setDash(e,t){this.current.dashArray=e,this.current.dashPhase=t}constructPath(e,t){const r=this.current;let i=r.x,o=r.y,a=[],c=0;for(const r of e)switch(0|r){case n.OPS.rectangle:i=t[c++],o=t[c++];const e=i+t[c++],r=o+t[c++];a.push("M",s(i),s(o),"L",s(e),s(o),"L",s(e),s(r),"L",s(i),s(r),"Z");break;case n.OPS.moveTo:i=t[c++],o=t[c++],a.push("M",s(i),s(o));break;case n.OPS.lineTo:i=t[c++],o=t[c++],a.push("L",s(i),s(o));break;case n.OPS.curveTo:i=t[c+4],o=t[c+5],a.push("C",s(t[c]),s(t[c+1]),s(t[c+2]),s(t[c+3]),s(i),s(o)),c+=6;break;case n.OPS.curveTo2:a.push("C",s(i),s(o),s(t[c]),s(t[c+1]),s(t[c+2]),s(t[c+3])),i=t[c+2],o=t[c+3],c+=4;break;case n.OPS.curveTo3:i=t[c+2],o=t[c+3],a.push("C",s(t[c]),s(t[c+1]),s(i),s(o),s(i),s(o)),c+=4;break;case n.OPS.closePath:a.push("Z")}a=a.join(" "),r.path&&e.length>0&&e[0]!==n.OPS.rectangle&&e[0]!==n.OPS.moveTo?a=r.path.getAttributeNS(null,"d")+a:(r.path=this.svgFactory.createElement("svg:path"),this._ensureTransformGroup().appendChild(r.path)),r.path.setAttributeNS(null,"d",a),r.path.setAttributeNS(null,"fill","none"),r.element=r.path,r.setCurrentPoint(i,o)}endPath(){const e=this.current;if(e.path=null,!this.pendingClip)return;if(!e.element)return void(this.pendingClip=null);const t="clippath"+d++,r=this.svgFactory.createElement("svg:clipPath");r.setAttributeNS(null,"id",t),r.setAttributeNS(null,"transform",c(this.transformMatrix));const n=e.element.cloneNode(!0);"evenodd"===this.pendingClip?n.setAttributeNS(null,"clip-rule","evenodd"):n.setAttributeNS(null,"clip-rule","nonzero"),this.pendingClip=null,r.appendChild(n),this.defs.appendChild(r),e.activeClipUrl&&(e.clipGroup=null,this.extraStack.forEach((function(e){e.clipGroup=null})),r.setAttributeNS(null,"clip-path",e.activeClipUrl)),e.activeClipUrl=`url(#${t})`,this.tgrp=null}clip(e){this.pendingClip=e}closePath(){const e=this.current;if(e.path){const t=`${e.path.getAttributeNS(null,"d")}Z`;e.path.setAttributeNS(null,"d",t)}}setLeading(e){this.current.leading=-e}setTextRise(e){this.current.textRise=e}setTextRenderingMode(e){this.current.textRenderingMode=e}setHScale(e){this.current.textHScale=e/100}setRenderingIntent(e){}setFlatness(e){}setGState(e){for(const[t,r]of e)switch(t){case"LW":this.setLineWidth(r);break;case"LC":this.setLineCap(r);break;case"LJ":this.setLineJoin(r);break;case"ML":this.setMiterLimit(r);break;case"D":this.setDash(r[0],r[1]);break;case"RI":this.setRenderingIntent(r);break;case"FL":this.setFlatness(r);break;case"Font":this.setFont(r);break;case"CA":this.setStrokeAlpha(r);break;case"ca":this.setFillAlpha(r);break;default:(0,n.warn)(`Unimplemented graphic state operator ${t}`)}}fill(){const e=this.current;e.element&&(e.element.setAttributeNS(null,"fill",e.fillColor),e.element.setAttributeNS(null,"fill-opacity",e.fillAlpha),this.endPath())}stroke(){const e=this.current;e.element&&(this._setStrokeAttributes(e.element),e.element.setAttributeNS(null,"fill","none"),this.endPath())}_setStrokeAttributes(e,t=1){const r=this.current;let n=r.dashArray;1!==t&&n.length>0&&(n=n.map((function(e){return t*e}))),e.setAttributeNS(null,"stroke",r.strokeColor),e.setAttributeNS(null,"stroke-opacity",r.strokeAlpha),e.setAttributeNS(null,"stroke-miterlimit",s(r.miterLimit)),e.setAttributeNS(null,"stroke-linecap",r.lineCap),e.setAttributeNS(null,"stroke-linejoin",r.lineJoin),e.setAttributeNS(null,"stroke-width",s(t*r.lineWidth)+"px"),e.setAttributeNS(null,"stroke-dasharray",n.map(s).join(" ")),e.setAttributeNS(null,"stroke-dashoffset",s(t*r.dashPhase)+"px")}eoFill(){this.current.element&&this.current.element.setAttributeNS(null,"fill-rule","evenodd"),this.fill()}fillStroke(){this.stroke(),this.fill()}eoFillStroke(){this.current.element&&this.current.element.setAttributeNS(null,"fill-rule","evenodd"),this.fillStroke()}closeStroke(){this.closePath(),this.stroke()}closeFillStroke(){this.closePath(),this.fillStroke()}closeEOFillStroke(){this.closePath(),this.eoFillStroke()}paintSolidColorImageMask(){const e=this.svgFactory.createElement("svg:rect");e.setAttributeNS(null,"x","0"),e.setAttributeNS(null,"y","0"),e.setAttributeNS(null,"width","1px"),e.setAttributeNS(null,"height","1px"),e.setAttributeNS(null,"fill",this.current.fillColor),this._ensureTransformGroup().appendChild(e)}paintImageXObject(e){const t=this.objs.get(e);t?this.paintInlineImageXObject(t):(0,n.warn)(`Dependent image with object ID ${e} is not ready yet`)}paintInlineImageXObject(e,t){const r=e.width,n=e.height,i=f(e,this.forceDataSchema,!!t),o=this.svgFactory.createElement("svg:rect");o.setAttributeNS(null,"x","0"),o.setAttributeNS(null,"y","0"),o.setAttributeNS(null,"width",s(r)),o.setAttributeNS(null,"height",s(n)),this.current.element=o,this.clip("nonzero");const a=this.svgFactory.createElement("svg:image");a.setAttributeNS(u,"xlink:href",i),a.setAttributeNS(null,"x","0"),a.setAttributeNS(null,"y",s(-n)),a.setAttributeNS(null,"width",s(r)+"px"),a.setAttributeNS(null,"height",s(n)+"px"),a.setAttributeNS(null,"transform",`scale(${s(1/r)} ${s(-1/n)})`),t?t.appendChild(a):this._ensureTransformGroup().appendChild(a)}paintImageMaskXObject(e){const t=this.current,r=e.width,n=e.height,i=t.fillColor;t.maskId="mask"+g++;const o=this.svgFactory.createElement("svg:mask");o.setAttributeNS(null,"id",t.maskId);const a=this.svgFactory.createElement("svg:rect");a.setAttributeNS(null,"x","0"),a.setAttributeNS(null,"y","0"),a.setAttributeNS(null,"width",s(r)),a.setAttributeNS(null,"height",s(n)),a.setAttributeNS(null,"fill",i),a.setAttributeNS(null,"mask",`url(#${t.maskId})`),this.defs.appendChild(o),this._ensureTransformGroup().appendChild(a),this.paintInlineImageXObject(e,o)}paintFormXObjectBegin(e,t){if(Array.isArray(e)&&6===e.length&&this.transform(e[0],e[1],e[2],e[3],e[4],e[5]),t){const e=t[2]-t[0],r=t[3]-t[1],n=this.svgFactory.createElement("svg:rect");n.setAttributeNS(null,"x",t[0]),n.setAttributeNS(null,"y",t[1]),n.setAttributeNS(null,"width",s(e)),n.setAttributeNS(null,"height",s(r)),this.current.element=n,this.clip("nonzero"),this.endPath()}}paintFormXObjectEnd(){}_initialize(e){const t=this.svgFactory.create(e.width,e.height),r=this.svgFactory.createElement("svg:defs");t.appendChild(r),this.defs=r;const n=this.svgFactory.createElement("svg:g");return n.setAttributeNS(null,"transform",c(e.transform)),t.appendChild(n),this.svg=n,t}_ensureClipGroup(){if(!this.current.clipGroup){const e=this.svgFactory.createElement("svg:g");e.setAttributeNS(null,"clip-path",this.current.activeClipUrl),this.svg.appendChild(e),this.current.clipGroup=e}return this.current.clipGroup}_ensureTransformGroup(){return this.tgrp||(this.tgrp=this.svgFactory.createElement("svg:g"),this.tgrp.setAttributeNS(null,"transform",c(this.transformMatrix)),this.current.activeClipUrl?this._ensureClipGroup().appendChild(this.tgrp):this.svg.appendChild(this.tgrp)),this.tgrp}}}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.PDFNodeStream=void 0;var n=r(2),i=r(20);const o=__webpack_require__(2993),a=__webpack_require__(8618),s=__webpack_require__(120),c=__webpack_require__(6355),u=/^file:\/\/\/[a-zA-Z]:\//;t.PDFNodeStream=class{constructor(e){this.source=e,this.url=function(e){const t=c.parse(e);return"file:"===t.protocol||t.host?t:/^[a-z]:[/\\]/i.test(e)?c.parse(`file:///${e}`):(t.host||(t.protocol="file:"),t)}(e.url),this.isHttp="http:"===this.url.protocol||"https:"===this.url.protocol,this.isFsUrl="file:"===this.url.protocol,this.httpHeaders=this.isHttp&&e.httpHeaders||{},this._fullRequestReader=null,this._rangeRequestReaders=[]}get _progressiveDataLength(){return this._fullRequestReader?this._fullRequestReader._loaded:0}getFullReader(){return(0,n.assert)(!this._fullRequestReader,"PDFNodeStream.getFullReader can only be called once."),this._fullRequestReader=this.isFsUrl?new g(this):new p(this),this._fullRequestReader}getRangeReader(e,t){if(t<=this._progressiveDataLength)return null;const r=this.isFsUrl?new m(this,e,t):new d(this,e,t);return this._rangeRequestReaders.push(r),r}cancelAllRequests(e){this._fullRequestReader&&this._fullRequestReader.cancel(e),this._rangeRequestReaders.slice(0).forEach((function(t){t.cancel(e)}))}};class l{constructor(e){this._url=e.url,this._done=!1,this._storedError=null,this.onProgress=null;const t=e.source;this._contentLength=t.length,this._loaded=0,this._filename=null,this._disableRange=t.disableRange||!1,this._rangeChunkSize=t.rangeChunkSize,this._rangeChunkSize||this._disableRange||(this._disableRange=!0),this._isStreamingSupported=!t.disableStream,this._isRangeSupported=!t.disableRange,this._readableStream=null,this._readCapability=(0,n.createPromiseCapability)(),this._headersCapability=(0,n.createPromiseCapability)()}get headersReady(){return this._headersCapability.promise}get filename(){return this._filename}get contentLength(){return this._contentLength}get isRangeSupported(){return this._isRangeSupported}get isStreamingSupported(){return this._isStreamingSupported}async read(){if(await this._readCapability.promise,this._done)return{value:void 0,done:!0};if(this._storedError)throw this._storedError;const e=this._readableStream.read();return null===e?(this._readCapability=(0,n.createPromiseCapability)(),this.read()):(this._loaded+=e.length,this.onProgress&&this.onProgress({loaded:this._loaded,total:this._contentLength}),{value:new Uint8Array(e).buffer,done:!1})}cancel(e){this._readableStream?this._readableStream.destroy(e):this._error(e)}_error(e){this._storedError=e,this._readCapability.resolve()}_setReadableStream(e){this._readableStream=e,e.on("readable",(()=>{this._readCapability.resolve()})),e.on("end",(()=>{e.destroy(),this._done=!0,this._readCapability.resolve()})),e.on("error",(e=>{this._error(e)})),!this._isStreamingSupported&&this._isRangeSupported&&this._error(new n.AbortException("streaming is disabled")),this._storedError&&this._readableStream.destroy(this._storedError)}}class h{constructor(e){this._url=e.url,this._done=!1,this._storedError=null,this.onProgress=null,this._loaded=0,this._readableStream=null,this._readCapability=(0,n.createPromiseCapability)();const t=e.source;this._isStreamingSupported=!t.disableStream}get isStreamingSupported(){return this._isStreamingSupported}async read(){if(await this._readCapability.promise,this._done)return{value:void 0,done:!0};if(this._storedError)throw this._storedError;const e=this._readableStream.read();return null===e?(this._readCapability=(0,n.createPromiseCapability)(),this.read()):(this._loaded+=e.length,this.onProgress&&this.onProgress({loaded:this._loaded}),{value:new Uint8Array(e).buffer,done:!1})}cancel(e){this._readableStream?this._readableStream.destroy(e):this._error(e)}_error(e){this._storedError=e,this._readCapability.resolve()}_setReadableStream(e){this._readableStream=e,e.on("readable",(()=>{this._readCapability.resolve()})),e.on("end",(()=>{e.destroy(),this._done=!0,this._readCapability.resolve()})),e.on("error",(e=>{this._error(e)})),this._storedError&&this._readableStream.destroy(this._storedError)}}function f(e,t){return{protocol:e.protocol,auth:e.auth,host:e.hostname,port:e.port,path:e.path,method:"GET",headers:t}}class p extends l{constructor(e){super(e);const t=t=>{if(404===t.statusCode){const e=new n.MissingPDFException(`Missing PDF "${this._url}".`);return this._storedError=e,void this._headersCapability.reject(e)}this._headersCapability.resolve(),this._setReadableStream(t);const r=e=>this._readableStream.headers[e.toLowerCase()],{allowRangeRequests:o,suggestedLength:a}=(0,i.validateRangeRequestCapabilities)({getResponseHeader:r,isHttp:e.isHttp,rangeChunkSize:this._rangeChunkSize,disableRange:this._disableRange});this._isRangeSupported=o,this._contentLength=a||this._contentLength,this._filename=(0,i.extractFilenameFromHeader)(r)};this._request=null,"http:"===this._url.protocol?this._request=a.request(f(this._url,e.httpHeaders),t):this._request=s.request(f(this._url,e.httpHeaders),t),this._request.on("error",(e=>{this._storedError=e,this._headersCapability.reject(e)})),this._request.end()}}class d extends h{constructor(e,t,r){super(e),this._httpHeaders={};for(const t in e.httpHeaders){const r=e.httpHeaders[t];void 0!==r&&(this._httpHeaders[t]=r)}this._httpHeaders.Range=`bytes=${t}-${r-1}`;const i=e=>{if(404!==e.statusCode)this._setReadableStream(e);else{const e=new n.MissingPDFException(`Missing PDF "${this._url}".`);this._storedError=e}};this._request=null,"http:"===this._url.protocol?this._request=a.request(f(this._url,this._httpHeaders),i):this._request=s.request(f(this._url,this._httpHeaders),i),this._request.on("error",(e=>{this._storedError=e})),this._request.end()}}class g extends l{constructor(e){super(e);let t=decodeURIComponent(this._url.path);u.test(this._url.href)&&(t=t.replace(/^\//,"")),o.lstat(t,((e,r)=>{if(e)return"ENOENT"===e.code&&(e=new n.MissingPDFException(`Missing PDF "${t}".`)),this._storedError=e,void this._headersCapability.reject(e);this._contentLength=r.size,this._setReadableStream(o.createReadStream(t)),this._headersCapability.resolve()}))}}class m extends h{constructor(e,t,r){super(e);let n=decodeURIComponent(this._url.path);u.test(this._url.href)&&(n=n.replace(/^\//,"")),this._setReadableStream(o.createReadStream(n,{start:t,end:r-1}))}}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.createResponseStatusError=function(e,t){return 404===e||0===e&&t.startsWith("file:")?new n.MissingPDFException('Missing PDF "'+t+'".'):new n.UnexpectedResponseException("Unexpected server response ("+e+') while retrieving PDF "'+t+'".',e)},t.extractFilenameFromHeader=function(e){const t=e("Content-Disposition");if(t){let e=(0,i.getFilenameFromContentDispositionHeader)(t);if(e.includes("%"))try{e=decodeURIComponent(e)}catch(e){}if(/\.pdf$/i.test(e))return e}return null},t.validateRangeRequestCapabilities=function({getResponseHeader:e,isHttp:t,rangeChunkSize:r,disableRange:i}){(0,n.assert)(r>0,"Range chunk size must be larger than zero");const o={allowRangeRequests:!1,suggestedLength:void 0},a=parseInt(e("Content-Length"),10);return Number.isInteger(a)?(o.suggestedLength=a,a<=2*r||i||!t||"bytes"!==e("Accept-Ranges")||"identity"!==(e("Content-Encoding")||"identity")||(o.allowRangeRequests=!0),o):o},t.validateResponseStatus=function(e){return 200===e||206===e};var n=r(2),i=r(21)},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.getFilenameFromContentDispositionHeader=function(e){let t=!0,r=n("filename\\*","i").exec(e);if(r){r=r[1];let e=a(r);return e=unescape(e),e=s(e),e=c(e),o(e)}if(r=function(e){const t=[];let r;const i=n("filename\\*((?!0\\d)\\d+)(\\*?)","ig");for(;null!==(r=i.exec(e));){let[,e,n,i]=r;if(e=parseInt(e,10),e in t){if(0===e)break}else t[e]=[n,i]}const o=[];for(let e=0;e<t.length&&e in t;++e){let[r,n]=t[e];n=a(n),r&&(n=unescape(n),0===e&&(n=s(n))),o.push(n)}return o.join("")}(e),r)return o(c(r));if(r=n("filename","i").exec(e),r){r=r[1];let e=a(r);return e=c(e),o(e)}function n(e,t){return new RegExp("(?:^|;)\\s*"+e+'\\s*=\\s*([^";\\s][^;\\s]*|"(?:[^"\\\\]|\\\\"?)+"?)',t)}function i(e,r){if(e){if(!/^[\x00-\xFF]+$/.test(r))return r;try{const n=new TextDecoder(e,{fatal:!0}),i=Array.from(r,(function(e){return 255&e.charCodeAt(0)}));r=n.decode(new Uint8Array(i)),t=!1}catch(n){if(/^utf-?8$/i.test(e))try{r=decodeURIComponent(escape(r)),t=!1}catch(e){}}}return r}function o(e){return t&&/[\x80-\xff]/.test(e)&&(e=i("utf-8",e),t&&(e=i("iso-8859-1",e))),e}function a(e){if(e.startsWith('"')){const t=e.slice(1).split('\\"');for(let e=0;e<t.length;++e){const r=t[e].indexOf('"');-1!==r&&(t[e]=t[e].slice(0,r),t.length=e+1),t[e]=t[e].replace(/\\(.)/g,"$1")}e=t.join('"')}return e}function s(e){const t=e.indexOf("'");return-1===t?e:i(e.slice(0,t),e.slice(t+1).replace(/^[^']*'/,""))}function c(e){return!e.startsWith("=?")||/[\x00-\x19\x80-\xff]/.test(e)?e:e.replace(/=\?([\w-]*)\?([QqBb])\?((?:[^?]|\?(?!=))*)\?=/g,(function(e,t,r,n){if("q"===r||"Q"===r)return i(t,n=(n=n.replace(/_/g," ")).replace(/=([0-9a-fA-F]{2})/g,(function(e,t){return String.fromCharCode(parseInt(t,16))})));try{n=atob(n)}catch(e){}return i(t,n)}))}return""}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.PDFNetworkStream=void 0;var n=r(2),i=r(20);class o{constructor(e,t){this.url=e,t=t||{},this.isHttp=/^https?:/i.test(e),this.httpHeaders=this.isHttp&&t.httpHeaders||{},this.withCredentials=t.withCredentials||!1,this.getXhr=t.getXhr||function(){return new XMLHttpRequest},this.currXhrId=0,this.pendingRequests=Object.create(null)}requestRange(e,t,r){const n={begin:e,end:t};for(const e in r)n[e]=r[e];return this.request(n)}requestFull(e){return this.request(e)}request(e){const t=this.getXhr(),r=this.currXhrId++,n=this.pendingRequests[r]={xhr:t};t.open("GET",this.url),t.withCredentials=this.withCredentials;for(const e in this.httpHeaders){const r=this.httpHeaders[e];void 0!==r&&t.setRequestHeader(e,r)}return this.isHttp&&"begin"in e&&"end"in e?(t.setRequestHeader("Range",`bytes=${e.begin}-${e.end-1}`),n.expectedStatus=206):n.expectedStatus=200,t.responseType="arraybuffer",e.onError&&(t.onerror=function(r){e.onError(t.status)}),t.onreadystatechange=this.onStateChange.bind(this,r),t.onprogress=this.onProgress.bind(this,r),n.onHeadersReceived=e.onHeadersReceived,n.onDone=e.onDone,n.onError=e.onError,n.onProgress=e.onProgress,t.send(null),r}onProgress(e,t){const r=this.pendingRequests[e];r&&r.onProgress&&r.onProgress(t)}onStateChange(e,t){const r=this.pendingRequests[e];if(!r)return;const i=r.xhr;if(i.readyState>=2&&r.onHeadersReceived&&(r.onHeadersReceived(),delete r.onHeadersReceived),4!==i.readyState)return;if(!(e in this.pendingRequests))return;if(delete this.pendingRequests[e],0===i.status&&this.isHttp)return void(r.onError&&r.onError(i.status));const o=i.status||200;if((200!==o||206!==r.expectedStatus)&&o!==r.expectedStatus)return void(r.onError&&r.onError(i.status));const a=function(e){const t=e.response;return"string"!=typeof t?t:(0,n.stringToBytes)(t).buffer}(i);if(206===o){const e=i.getResponseHeader("Content-Range"),t=/bytes (\d+)-(\d+)\/(\d+)/.exec(e);r.onDone({begin:parseInt(t[1],10),chunk:a})}else a?r.onDone({begin:0,chunk:a}):r.onError&&r.onError(i.status)}hasPendingRequests(){for(const e in this.pendingRequests)return!0;return!1}getRequestXhr(e){return this.pendingRequests[e].xhr}isPendingRequest(e){return e in this.pendingRequests}abortAllRequests(){for(const e in this.pendingRequests)this.abortRequest(0|e)}abortRequest(e){const t=this.pendingRequests[e].xhr;delete this.pendingRequests[e],t.abort()}}t.PDFNetworkStream=class{constructor(e){this._source=e,this._manager=new o(e.url,{httpHeaders:e.httpHeaders,withCredentials:e.withCredentials}),this._rangeChunkSize=e.rangeChunkSize,this._fullRequestReader=null,this._rangeRequestReaders=[]}_onRangeRequestReaderClosed(e){const t=this._rangeRequestReaders.indexOf(e);t>=0&&this._rangeRequestReaders.splice(t,1)}getFullReader(){return(0,n.assert)(!this._fullRequestReader,"PDFNetworkStream.getFullReader can only be called once."),this._fullRequestReader=new a(this._manager,this._source),this._fullRequestReader}getRangeReader(e,t){const r=new s(this._manager,e,t);return r.onClosed=this._onRangeRequestReaderClosed.bind(this),this._rangeRequestReaders.push(r),r}cancelAllRequests(e){this._fullRequestReader&&this._fullRequestReader.cancel(e),this._rangeRequestReaders.slice(0).forEach((function(t){t.cancel(e)}))}};class a{constructor(e,t){this._manager=e;const r={onHeadersReceived:this._onHeadersReceived.bind(this),onDone:this._onDone.bind(this),onError:this._onError.bind(this),onProgress:this._onProgress.bind(this)};this._url=t.url,this._fullRequestId=e.requestFull(r),this._headersReceivedCapability=(0,n.createPromiseCapability)(),this._disableRange=t.disableRange||!1,this._contentLength=t.length,this._rangeChunkSize=t.rangeChunkSize,this._rangeChunkSize||this._disableRange||(this._disableRange=!0),this._isStreamingSupported=!1,this._isRangeSupported=!1,this._cachedChunks=[],this._requests=[],this._done=!1,this._storedError=void 0,this._filename=null,this.onProgress=null}_onHeadersReceived(){const e=this._fullRequestId,t=this._manager.getRequestXhr(e),r=e=>t.getResponseHeader(e),{allowRangeRequests:n,suggestedLength:o}=(0,i.validateRangeRequestCapabilities)({getResponseHeader:r,isHttp:this._manager.isHttp,rangeChunkSize:this._rangeChunkSize,disableRange:this._disableRange});n&&(this._isRangeSupported=!0),this._contentLength=o||this._contentLength,this._filename=(0,i.extractFilenameFromHeader)(r),this._isRangeSupported&&this._manager.abortRequest(e),this._headersReceivedCapability.resolve()}_onDone(e){e&&(this._requests.length>0?this._requests.shift().resolve({value:e.chunk,done:!1}):this._cachedChunks.push(e.chunk)),this._done=!0,this._cachedChunks.length>0||(this._requests.forEach((function(e){e.resolve({value:void 0,done:!0})})),this._requests=[])}_onError(e){const t=this._url,r=(0,i.createResponseStatusError)(e,t);this._storedError=r,this._headersReceivedCapability.reject(r),this._requests.forEach((function(e){e.reject(r)})),this._requests=[],this._cachedChunks=[]}_onProgress(e){this.onProgress&&this.onProgress({loaded:e.loaded,total:e.lengthComputable?e.total:this._contentLength})}get filename(){return this._filename}get isRangeSupported(){return this._isRangeSupported}get isStreamingSupported(){return this._isStreamingSupported}get contentLength(){return this._contentLength}get headersReady(){return this._headersReceivedCapability.promise}async read(){if(this._storedError)throw this._storedError;if(this._cachedChunks.length>0)return{value:this._cachedChunks.shift(),done:!1};if(this._done)return{value:void 0,done:!0};const e=(0,n.createPromiseCapability)();return this._requests.push(e),e.promise}cancel(e){this._done=!0,this._headersReceivedCapability.reject(e),this._requests.forEach((function(e){e.resolve({value:void 0,done:!0})})),this._requests=[],this._manager.isPendingRequest(this._fullRequestId)&&this._manager.abortRequest(this._fullRequestId),this._fullRequestReader=null}}class s{constructor(e,t,r){this._manager=e;const n={onDone:this._onDone.bind(this),onProgress:this._onProgress.bind(this)};this._requestId=e.requestRange(t,r,n),this._requests=[],this._queuedChunk=null,this._done=!1,this.onProgress=null,this.onClosed=null}_close(){this.onClosed&&this.onClosed(this)}_onDone(e){const t=e.chunk;this._requests.length>0?this._requests.shift().resolve({value:t,done:!1}):this._queuedChunk=t,this._done=!0,this._requests.forEach((function(e){e.resolve({value:void 0,done:!0})})),this._requests=[],this._close()}_onProgress(e){!this.isStreamingSupported&&this.onProgress&&this.onProgress({loaded:e.loaded})}get isStreamingSupported(){return!1}async read(){if(null!==this._queuedChunk){const e=this._queuedChunk;return this._queuedChunk=null,{value:e,done:!1}}if(this._done)return{value:void 0,done:!0};const e=(0,n.createPromiseCapability)();return this._requests.push(e),e.promise}cancel(e){this._done=!0,this._requests.forEach((function(e){e.resolve({value:void 0,done:!0})})),this._requests=[],this._manager.isPendingRequest(this._requestId)&&this._manager.abortRequest(this._requestId),this._close()}}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.PDFFetchStream=void 0;var n=r(2),i=r(20);function o(e,t,r){return{method:"GET",headers:e,signal:r&&r.signal,mode:"cors",credentials:t?"include":"same-origin",redirect:"follow"}}function a(e){const t=new Headers;for(const r in e){const n=e[r];void 0!==n&&t.append(r,n)}return t}t.PDFFetchStream=class{constructor(e){this.source=e,this.isHttp=/^https?:/i.test(e.url),this.httpHeaders=this.isHttp&&e.httpHeaders||{},this._fullRequestReader=null,this._rangeRequestReaders=[]}get _progressiveDataLength(){return this._fullRequestReader?this._fullRequestReader._loaded:0}getFullReader(){return(0,n.assert)(!this._fullRequestReader,"PDFFetchStream.getFullReader can only be called once."),this._fullRequestReader=new s(this),this._fullRequestReader}getRangeReader(e,t){if(t<=this._progressiveDataLength)return null;const r=new c(this,e,t);return this._rangeRequestReaders.push(r),r}cancelAllRequests(e){this._fullRequestReader&&this._fullRequestReader.cancel(e),this._rangeRequestReaders.slice(0).forEach((function(t){t.cancel(e)}))}};class s{constructor(e){this._stream=e,this._reader=null,this._loaded=0,this._filename=null;const t=e.source;this._withCredentials=t.withCredentials||!1,this._contentLength=t.length,this._headersCapability=(0,n.createPromiseCapability)(),this._disableRange=t.disableRange||!1,this._rangeChunkSize=t.rangeChunkSize,this._rangeChunkSize||this._disableRange||(this._disableRange=!0),"undefined"!=typeof AbortController&&(this._abortController=new AbortController),this._isStreamingSupported=!t.disableStream,this._isRangeSupported=!t.disableRange,this._headers=a(this._stream.httpHeaders);const r=t.url;fetch(r,o(this._headers,this._withCredentials,this._abortController)).then((e=>{if(!(0,i.validateResponseStatus)(e.status))throw(0,i.createResponseStatusError)(e.status,r);this._reader=e.body.getReader(),this._headersCapability.resolve();const t=t=>e.headers.get(t),{allowRangeRequests:o,suggestedLength:a}=(0,i.validateRangeRequestCapabilities)({getResponseHeader:t,isHttp:this._stream.isHttp,rangeChunkSize:this._rangeChunkSize,disableRange:this._disableRange});this._isRangeSupported=o,this._contentLength=a||this._contentLength,this._filename=(0,i.extractFilenameFromHeader)(t),!this._isStreamingSupported&&this._isRangeSupported&&this.cancel(new n.AbortException("Streaming is disabled."))})).catch(this._headersCapability.reject),this.onProgress=null}get headersReady(){return this._headersCapability.promise}get filename(){return this._filename}get contentLength(){return this._contentLength}get isRangeSupported(){return this._isRangeSupported}get isStreamingSupported(){return this._isStreamingSupported}async read(){await this._headersCapability.promise;const{value:e,done:t}=await this._reader.read();return t?{value:e,done:t}:(this._loaded+=e.byteLength,this.onProgress&&this.onProgress({loaded:this._loaded,total:this._contentLength}),{value:new Uint8Array(e).buffer,done:!1})}cancel(e){this._reader&&this._reader.cancel(e),this._abortController&&this._abortController.abort()}}class c{constructor(e,t,r){this._stream=e,this._reader=null,this._loaded=0;const s=e.source;this._withCredentials=s.withCredentials||!1,this._readCapability=(0,n.createPromiseCapability)(),this._isStreamingSupported=!s.disableStream,"undefined"!=typeof AbortController&&(this._abortController=new AbortController),this._headers=a(this._stream.httpHeaders),this._headers.append("Range",`bytes=${t}-${r-1}`);const c=s.url;fetch(c,o(this._headers,this._withCredentials,this._abortController)).then((e=>{if(!(0,i.validateResponseStatus)(e.status))throw(0,i.createResponseStatusError)(e.status,c);this._readCapability.resolve(),this._reader=e.body.getReader()})),this.onProgress=null}get isStreamingSupported(){return this._isStreamingSupported}async read(){await this._readCapability.promise;const{value:e,done:t}=await this._reader.read();return t?{value:e,done:t}:(this._loaded+=e.byteLength,this.onProgress&&this.onProgress({loaded:this._loaded}),{value:new Uint8Array(e).buffer,done:!1})}cancel(e){this._reader&&this._reader.cancel(e),this._abortController&&this._abortController.abort()}}}])},module.exports=factory()},6379:function(e,t,r){"use strict";t.dM=void 0;var n=r(6420);t.dM=class{constructor({eventBus:e,externalLinkTarget:t=null,externalLinkRel:r=null,externalLinkEnabled:n=!0,ignoreDestinationZoom:i=!1}={}){this.eventBus=e,this.externalLinkTarget=t,this.externalLinkRel=r,this.externalLinkEnabled=n,this._ignoreDestinationZoom=i,this.baseUrl=null,this.pdfDocument=null,this.pdfViewer=null,this.pdfHistory=null,this._pagesRefCache=null}setDocument(e,t=null){this.baseUrl=t,this.pdfDocument=e,this._pagesRefCache=Object.create(null)}setViewer(e){this.pdfViewer=e}setHistory(e){this.pdfHistory=e}get pagesCount(){return this.pdfDocument?this.pdfDocument.numPages:0}get page(){return this.pdfViewer.currentPageNumber}set page(e){this.pdfViewer.currentPageNumber=e}get rotation(){return this.pdfViewer.pagesRotation}set rotation(e){this.pdfViewer.pagesRotation=e}navigateTo(e){const t=({namedDest:r,explicitDest:n})=>{const i=n[0];let o;if(i instanceof Object){if(o=this._cachedPageNumber(i),null===o)return void this.pdfDocument.getPageIndex(i).then((e=>{this.cachePageRef(e+1,i),t({namedDest:r,explicitDest:n})})).catch((()=>{console.error(`PDFLinkService.navigateTo: "${i}" is not a valid page reference, for dest="${e}".`)}))}else{if(!Number.isInteger(i))return void console.error(`PDFLinkService.navigateTo: "${i}" is not a valid destination reference, for dest="${e}".`);o=i+1}!o||o<1||o>this.pagesCount?console.error(`PDFLinkService.navigateTo: "${o}" is not a valid page number, for dest="${e}".`):(this.pdfHistory&&(this.pdfHistory.pushCurrentPosition(),this.pdfHistory.push({namedDest:r,explicitDest:n,pageNumber:o})),this.pdfViewer.scrollPageIntoView({pageNumber:o,destArray:n,ignoreDestinationZoom:this._ignoreDestinationZoom}))};new Promise(((t,r)=>{"string"!=typeof e?t({namedDest:"",explicitDest:e}):this.pdfDocument.getDestination(e).then((r=>{t({namedDest:e,explicitDest:r})}))})).then((r=>{Array.isArray(r.explicitDest)?t(r):console.error(`PDFLinkService.navigateTo: "${r.explicitDest}" is not a valid destination array, for dest="${e}".`)}))}getDestinationHash(e){if("string"==typeof e)return this.getAnchorUrl("#"+escape(e));if(Array.isArray(e)){const t=JSON.stringify(e);return this.getAnchorUrl("#"+escape(t))}return this.getAnchorUrl("")}getAnchorUrl(e){return(this.baseUrl||"")+e}setHash(e){let t,r;if(e.includes("=")){const i=(0,n.parseQueryString)(e);if("search"in i&&this.eventBus.dispatch("findfromurlhash",{source:this,query:i.search.replace(/"/g,""),phraseSearch:"true"===i.phrase}),"page"in i&&(t=0|i.page||1),"zoom"in i){const e=i.zoom.split(","),t=e[0],n=parseFloat(t);t.includes("Fit")?"Fit"===t||"FitB"===t?r=[null,{name:t}]:"FitH"===t||"FitBH"===t||"FitV"===t||"FitBV"===t?r=[null,{name:t},e.length>1?0|e[1]:null]:"FitR"===t?5!==e.length?console.error('PDFLinkService.setHash: Not enough parameters for "FitR".'):r=[null,{name:t},0|e[1],0|e[2],0|e[3],0|e[4]]:console.error(`PDFLinkService.setHash: "${t}" is not a valid zoom value.`):r=[null,{name:"XYZ"},e.length>1?0|e[1]:null,e.length>2?0|e[2]:null,n?n/100:t]}r?this.pdfViewer.scrollPageIntoView({pageNumber:t||this.page,destArray:r,allowNegativeOffset:!0}):t&&(this.page=t),"pagemode"in i&&this.eventBus.dispatch("pagemode",{source:this,mode:i.pagemode}),"nameddest"in i&&this.navigateTo(i.nameddest)}else{r=unescape(e);try{r=JSON.parse(r),Array.isArray(r)||(r=r.toString())}catch(e){}if("string"==typeof r||function(e){if(!Array.isArray(e))return!1;const t=e.length;if(t<2)return!1;const r=e[0];if(!("object"==typeof r&&Number.isInteger(r.num)&&Number.isInteger(r.gen)||Number.isInteger(r)&&r>=0))return!1;const n=e[1];if("object"!=typeof n||"string"!=typeof n.name)return!1;let i=!0;switch(n.name){case"XYZ":if(5!==t)return!1;break;case"Fit":case"FitB":return 2===t;case"FitH":case"FitBH":case"FitV":case"FitBV":if(3!==t)return!1;break;case"FitR":if(6!==t)return!1;i=!1;break;default:return!1}for(let r=2;r<t;r++){const t=e[r];if(!("number"==typeof t||i&&null===t))return!1}return!0}(r))return void this.navigateTo(r);console.error(`PDFLinkService.setHash: "${unescape(e)}" is not a valid destination.`)}}executeNamedAction(e){switch(e){case"GoBack":this.pdfHistory&&this.pdfHistory.back();break;case"GoForward":this.pdfHistory&&this.pdfHistory.forward();break;case"NextPage":this.page<this.pagesCount&&this.page++;break;case"PrevPage":this.page>1&&this.page--;break;case"LastPage":this.page=this.pagesCount;break;case"FirstPage":this.page=1}this.eventBus.dispatch("namedaction",{source:this,action:e})}cachePageRef(e,t){if(!t)return;const r=0===t.gen?`${t.num}R`:`${t.num}R${t.gen}`;this._pagesRefCache[r]=e}_cachedPageNumber(e){const t=0===e.gen?`${e.num}R`:`${e.num}R${e.gen}`;return this._pagesRefCache&&this._pagesRefCache[t]||null}isPageVisible(e){return this.pdfViewer.isPageVisible(e)}}},6420:function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.isValidRotation=function(e){return Number.isInteger(e)&&e%90==0},t.isValidScrollMode=function(e){return Number.isInteger(e)&&Object.values(r).includes(e)&&e!==r.UNKNOWN},t.isValidSpreadMode=function(e){return Number.isInteger(e)&&Object.values(n).includes(e)&&e!==n.UNKNOWN},t.isPortraitOrientation=function(e){return e.width<=e.height},t.clamp=l,t.getPDFFileNameFromURL=function(e,t="document.pdf"){if("string"!=typeof e)return t;if(function(e){let t=0;const r=e.length;for(;t<r&&""===e[t].trim();)t++;return"data:"===e.substring(t,t+5).toLowerCase()}(e))return console.warn('getPDFFileNameFromURL: ignoring "data:" URL for performance reasons.'),t;const r=/[^\/?#=]+\.pdf\b(?!.*\.pdf\b)/i,n=/^(?:(?:[^:]+:)?\/\/[^\/]+)?([^?#]*)(\?[^#]*)?(#.*)?$/.exec(e);let i=r.exec(n[1])||r.exec(n[2])||r.exec(n[3]);if(i&&(i=i[0],i.includes("%")))try{i=r.exec(decodeURIComponent(i))[0]}catch(e){}return i||t},t.noContextMenuHandler=function(e){e.preventDefault()},t.parseQueryString=function(e){const t=e.split("&"),r=Object.create(null);for(let e=0,n=t.length;e<n;++e){const n=t[e].split("="),i=n[0].toLowerCase(),o=n.length>1?n[1]:null;r[decodeURIComponent(i)]=decodeURIComponent(o)}return r},t.backtrackBeforeAllVisibleElements=a,t.getVisibleElements=function(e,t,r=!1,n=!1){const i=e.scrollTop,s=i+e.clientHeight,c=e.scrollLeft,u=c+e.clientWidth,l=[],h=t.length;let f=0===h?0:o(t,n?function(e){const t=e.div;return t.offsetLeft+t.clientLeft+t.clientWidth>c}:function(e){const t=e.div;return t.offsetTop+t.clientTop+t.clientHeight>i});f>0&&f<h&&!n&&(f=a(f,t,i));let p=n?u:-1;for(let e=f;e<h;e++){const r=t[e],o=r.div,a=o.offsetLeft+o.clientLeft,h=o.offsetTop+o.clientTop,f=o.clientWidth,d=o.clientHeight,g=a+f,m=h+d;if(-1===p)m>=s&&(p=m);else if((n?a:h)>p)break;if(m<=i||h>=s||g<=c||a>=u)continue;const v=(d-(Math.max(0,i-h)+Math.max(0,m-s)))*(f-(Math.max(0,c-a)+Math.max(0,g-u)))*100/d/f|0;l.push({id:r.id,x:a,y:h,view:r,percent:v})}const d=l[0],g=l[l.length-1];return r&&l.sort((function(e,t){const r=e.percent-t.percent;return Math.abs(r)>.001?-r:e.id-t.id})),{first:d,last:g,views:l}},t.roundToDivide=function(e,t){const r=e%t;return 0===r?e:Math.round(e-r+t)},t.getPageSizeInches=function({view:e,userUnit:t,rotate:r}){const[n,i,o,a]=e,s=r%180!=0,c=(o-n)/72*t,u=(a-i)/72*t;return{width:s?u:c,height:s?c:u}},t.approximateFraction=function(e){if(Math.floor(e)===e)return[e,1];const t=1/e;if(t>8)return[1,8];if(Math.floor(t)===t)return[1,t];const r=e>1?t:e;let n,i=0,o=1,a=1,s=1;for(;;){const e=i+a,t=o+s;if(t>8)break;r<=e/t?(a=e,s=t):(i=e,o=t)}return n=r-i/o<a/s-r?r===e?[i,o]:[o,i]:r===e?[a,s]:[s,a],n},t.getOutputScale=function(e){const t=(window.devicePixelRatio||1)/(e.webkitBackingStorePixelRatio||e.mozBackingStorePixelRatio||e.msBackingStorePixelRatio||e.oBackingStorePixelRatio||e.backingStorePixelRatio||1);return{sx:t,sy:t,scaled:1!==t}},t.scrollIntoView=function(e,t,r=!1){let n=e.offsetParent;if(!n)return void console.error("offsetParent is not set -- cannot scroll");let i=e.offsetTop+e.clientTop,o=e.offsetLeft+e.clientLeft;for(;n.clientHeight===n.scrollHeight&&n.clientWidth===n.scrollWidth||r&&"hidden"===getComputedStyle(n).overflow;)if(n.dataset._scaleY&&(i/=n.dataset._scaleY,o/=n.dataset._scaleX),i+=n.offsetTop,o+=n.offsetLeft,n=n.offsetParent,!n)return;t&&(void 0!==t.top&&(i+=t.top),void 0!==t.left&&(o+=t.left,n.scrollLeft=o)),n.scrollTop=i},t.watchScroll=function(e,t){const r=function(r){i||(i=window.requestAnimationFrame((function(){i=null;const r=e.scrollLeft,o=n.lastX;r!==o&&(n.right=r>o),n.lastX=r;const a=e.scrollTop,s=n.lastY;a!==s&&(n.down=a>s),n.lastY=a,t(n)})))},n={right:!0,down:!0,lastX:e.scrollLeft,lastY:e.scrollTop,_eventHandler:r};let i=null;return e.addEventListener("scroll",r,!0),n},t.binarySearchFirstItem=o,t.normalizeWheelEventDelta=function(e){let t=Math.sqrt(e.deltaX*e.deltaX+e.deltaY*e.deltaY);const r=Math.atan2(e.deltaY,e.deltaX);return-.25*Math.PI<r&&r<.75*Math.PI&&(t=-t),0===e.deltaMode?t/=900:1===e.deltaMode&&(t/=30),t},t.waitOnEventOrTimeout=function({target:e,name:t,delay:r=0}){return new Promise((function(n,i){if("object"!=typeof e||!t||"string"!=typeof t||!(Number.isInteger(r)&&r>=0))throw new Error("waitOnEventOrTimeout - invalid parameters.");function o(r){e instanceof u?e._off(t,a):e.removeEventListener(t,a),l&&clearTimeout(l),n(r)}const a=o.bind(null,s.EVENT);e instanceof u?e._on(t,a):e.addEventListener(t,a);const c=o.bind(null,s.TIMEOUT),l=setTimeout(c,r)}))},t.moveToEndOfArray=function(e,t){const r=[],n=e.length;let i=0;for(let o=0;o<n;++o)t(e[o])?r.push(e[o]):(e[i]=e[o],++i);for(let t=0;i<n;++t,++i)e[i]=r[t]},t.WaitOnType=t.animationStarted=t.ProgressBar=t.EventBus=t.NullL10n=t.SpreadMode=t.ScrollMode=t.TextLayerMode=t.RendererType=t.PresentationModeState=t.VERTICAL_PADDING=t.SCROLLBAR_PADDING=t.MAX_AUTO_SCALE=t.UNKNOWN_SCALE=t.MAX_SCALE=t.MIN_SCALE=t.DEFAULT_SCALE=t.DEFAULT_SCALE_VALUE=t.CSS_UNITS=t.AutoPrintRegExp=void 0,t.CSS_UNITS=96/72,t.DEFAULT_SCALE_VALUE="auto",t.DEFAULT_SCALE=1,t.MIN_SCALE=.1,t.MAX_SCALE=10,t.UNKNOWN_SCALE=0,t.MAX_AUTO_SCALE=1.25,t.SCROLLBAR_PADDING=40,t.VERTICAL_PADDING=5,t.PresentationModeState={UNKNOWN:0,NORMAL:1,CHANGING:2,FULLSCREEN:3},t.RendererType={CANVAS:"canvas",SVG:"svg"},t.TextLayerMode={DISABLE:0,ENABLE:1,ENABLE_ENHANCE:2};const r={UNKNOWN:-1,VERTICAL:0,HORIZONTAL:1,WRAPPED:2};t.ScrollMode=r;const n={UNKNOWN:-1,NONE:0,ODD:1,EVEN:2};t.SpreadMode=n,t.AutoPrintRegExp=/\bprint\s*\(/;const i={getLanguage:async()=>"en-us",getDirection:async()=>"ltr",get:async(e,t,r)=>function(e,t){return t?e.replace(/\{\{\s*(\w+)\s*\}\}/g,((e,r)=>r in t?t[r]:"{{"+r+"}}")):e}(r,t),async translate(e){}};function o(e,t){let r=0,n=e.length-1;if(n<0||!t(e[n]))return e.length;if(t(e[r]))return r;for(;r<n;){const i=r+n>>1;t(e[i])?n=i:r=i+1}return r}function a(e,t,r){if(e<2)return e;let n=t[e].div,i=n.offsetTop+n.clientTop;i>=r&&(n=t[e-1].div,i=n.offsetTop+n.clientTop);for(let r=e-2;r>=0&&(n=t[r].div,!(n.offsetTop+n.clientTop+n.clientHeight<=i));--r)e=r;return e}t.NullL10n=i;const s={EVENT:"event",TIMEOUT:"timeout"};t.WaitOnType=s;const c=new Promise((function(e){window.requestAnimationFrame(e)}));t.animationStarted=c;class u{constructor(e){this._listeners=Object.create(null)}on(e,t){this._on(e,t,{external:!0})}off(e,t){this._off(e,t,{external:!0})}dispatch(e){const t=this._listeners[e];if(!t||0===t.length)return;const r=Array.prototype.slice.call(arguments,1);let n;t.slice(0).forEach((function({listener:e,external:t}){if(t)return n||(n=[]),void n.push(e);e.apply(null,r)})),n&&(n.forEach((function(e){e.apply(null,r)})),n=null)}_on(e,t,r=null){let n=this._listeners[e];n||(this._listeners[e]=n=[]),n.push({listener:t,external:!0===(r&&r.external)})}_off(e,t,r=null){const n=this._listeners[e];if(n)for(let e=0,r=n.length;e<r;e++)if(n[e].listener===t)return void n.splice(e,1)}}function l(e,t,r){return Math.min(Math.max(e,t),r)}t.EventBus=u,t.ProgressBar=class{constructor(e,{height:t,width:r,units:n}={}){this.visible=!0,this.div=document.querySelector(e+" .progress"),this.bar=this.div.parentNode,this.height=t||100,this.width=r||100,this.units=n||"%",this.div.style.height=this.height+this.units,this.percent=0}_updateBar(){if(this._indeterminate)return this.div.classList.add("indeterminate"),void(this.div.style.width=this.width+this.units);this.div.classList.remove("indeterminate");const e=this.width*this._percent/100;this.div.style.width=e+this.units}get percent(){return this._percent}set percent(e){this._indeterminate=isNaN(e),this._percent=l(e,0,100),this._updateBar()}setWidth(e){if(!e)return;const t=e.parentNode.offsetWidth-e.offsetWidth;t>0&&(this.bar.style.width=`calc(100% - ${t}px)`)}hide(){this.visible&&(this.visible=!1,this.bar.classList.add("hidden"),document.body.classList.remove("loadingInProgress"))}show(){this.visible||(this.visible=!0,document.body.classList.add("loadingInProgress"),this.bar.classList.remove("hidden"))}}},9748:function(e,t,r){"use strict";r.r(t),r.d(t,{Children:function(){return W},Component:function(){return a.wA},Fragment:function(){return a.HY},PureComponent:function(){return I},StrictMode:function(){return _e},Suspense:function(){return G},SuspenseList:function(){return V},__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED:function(){return he},cloneElement:function(){return ge},createContext:function(){return a.kr},createElement:function(){return a.az},createFactory:function(){return pe},createPortal:function(){return J},createRef:function(){return a.Vf},default:function(){return be},findDOMNode:function(){return ve},forwardRef:function(){return j},hydrate:function(){return re},isValidElement:function(){return de},lazy:function(){return Y},memo:function(){return M},render:function(){return te},unmountComponentAtNode:function(){return me},unstable_batchedUpdates:function(){return ye},useCallback:function(){return x},useContext:function(){return w},useDebugValue:function(){return S},useEffect:function(){return v},useErrorBoundary:function(){return E},useImperativeHandle:function(){return b},useLayoutEffect:function(){return y},useMemo:function(){return A},useReducer:function(){return m},useRef:function(){return _},useState:function(){return g},version:function(){return fe}});var n,i,o,a=r(6400),s=0,c=[],u=a.YM.__b,l=a.YM.__r,h=a.YM.diffed,f=a.YM.__c,p=a.YM.unmount;function d(e,t){a.YM.__h&&a.YM.__h(i,e,s||t),s=0;var r=i.__H||(i.__H={__:[],__h:[]});return e>=r.__.length&&r.__.push({}),r.__[e]}function g(e){return s=1,m(O,e)}function m(e,t,r){var o=d(n++,2);return o.t=e,o.__c||(o.__=[r?r(t):O(void 0,t),function(e){var t=o.t(o.__[0],e);o.__[0]!==t&&(o.__=[t,o.__[1]],o.__c.setState({}))}],o.__c=i),o.__}function v(e,t){var r=d(n++,3);!a.YM.__s&&T(r.__H,t)&&(r.__=e,r.__H=t,i.__H.__h.push(r))}function y(e,t){var r=d(n++,4);!a.YM.__s&&T(r.__H,t)&&(r.__=e,r.__H=t,i.__h.push(r))}function _(e){return s=5,A((function(){return{current:e}}),[])}function b(e,t,r){s=6,y((function(){"function"==typeof e?e(t()):e&&(e.current=t())}),null==r?r:r.concat(e))}function A(e,t){var r=d(n++,7);return T(r.__H,t)&&(r.__=e(),r.__H=t,r.__h=e),r.__}function x(e,t){return s=8,A((function(){return e}),t)}function w(e){var t=i.context[e.__c],r=d(n++,9);return r.__c=e,t?(null==r.__&&(r.__=!0,t.sub(i)),t.props.value):e.__}function S(e,t){a.YM.useDebugValue&&a.YM.useDebugValue(t?t(e):e)}function E(e){var t=d(n++,10),r=g();return t.__=e,i.componentDidCatch||(i.componentDidCatch=function(e){t.__&&t.__(e),r[1](e)}),[r[0],function(){r[1](void 0)}]}function C(){c.forEach((function(e){if(e.__P)try{e.__H.__h.forEach(P),e.__H.__h.forEach(R),e.__H.__h=[]}catch(t){e.__H.__h=[],a.YM.__e(t,e.__v)}})),c=[]}a.YM.__b=function(e){i=null,u&&u(e)},a.YM.__r=function(e){l&&l(e),n=0;var t=(i=e.__c).__H;t&&(t.__h.forEach(P),t.__h.forEach(R),t.__h=[])},a.YM.diffed=function(e){h&&h(e);var t=e.__c;t&&t.__H&&t.__H.__h.length&&(1!==c.push(t)&&o===a.YM.requestAnimationFrame||((o=a.YM.requestAnimationFrame)||function(e){var t,r=function(){clearTimeout(n),k&&cancelAnimationFrame(t),setTimeout(e)},n=setTimeout(r,100);k&&(t=requestAnimationFrame(r))})(C)),i=void 0},a.YM.__c=function(e,t){t.some((function(e){try{e.__h.forEach(P),e.__h=e.__h.filter((function(e){return!e.__||R(e)}))}catch(r){t.some((function(e){e.__h&&(e.__h=[])})),t=[],a.YM.__e(r,e.__v)}})),f&&f(e,t)},a.YM.unmount=function(e){p&&p(e);var t=e.__c;if(t&&t.__H)try{t.__H.__.forEach(P)}catch(e){a.YM.__e(e,t.__v)}};var k="function"==typeof requestAnimationFrame;function P(e){var t=i;"function"==typeof e.__c&&e.__c(),i=t}function R(e){var t=i;e.__c=e.__(),i=t}function T(e,t){return!e||e.length!==t.length||t.some((function(t,r){return t!==e[r]}))}function O(e,t){return"function"==typeof t?t(e):t}function L(e,t){for(var r in t)e[r]=t[r];return e}function F(e,t){for(var r in e)if("__source"!==r&&!(r in t))return!0;for(var n in t)if("__source"!==n&&e[n]!==t[n])return!0;return!1}function I(e){this.props=e}function M(e,t){function r(e){var r=this.props.ref,n=r==e.ref;return!n&&r&&(r.call?r(null):r.current=null),t?!t(this.props,e)||!n:F(this.props,e)}function n(t){return this.shouldComponentUpdate=r,(0,a.az)(e,t)}return n.displayName="Memo("+(e.displayName||e.name)+")",n.prototype.isReactComponent=!0,n.__f=!0,n}(I.prototype=new a.wA).isPureReactComponent=!0,I.prototype.shouldComponentUpdate=function(e,t){return F(this.props,e)||F(this.state,t)};var N=a.YM.__b;a.YM.__b=function(e){e.type&&e.type.__f&&e.ref&&(e.props.ref=e.ref,e.ref=null),N&&N(e)};var D="undefined"!=typeof Symbol&&Symbol.for&&Symbol.for("react.forward_ref")||3911;function j(e){function t(t,r){var n=L({},t);return delete n.ref,e(n,(r=t.ref||r)&&("object"!=typeof r||"current"in r)?r:null)}return t.$$typeof=D,t.render=t,t.prototype.isReactComponent=t.__f=!0,t.displayName="ForwardRef("+(e.displayName||e.name)+")",t}var U=function(e,t){return null==e?null:(0,a.bR)((0,a.bR)(e).map(t))},W={map:U,forEach:U,count:function(e){return e?(0,a.bR)(e).length:0},only:function(e){var t=(0,a.bR)(e);if(1!==t.length)throw"Children.only";return t[0]},toArray:a.bR},q=a.YM.__e;function B(e){return e&&(e.__c&&e.__c.__H&&(e.__c.__H.__.forEach((function(e){"function"==typeof e.__c&&e.__c()})),e.__c.__H=null),(e=L({},e)).__c=null,e.__k=e.__k&&e.__k.map(B)),e}function H(e){return e&&(e.__v=null,e.__k=e.__k&&e.__k.map(H)),e}function G(){this.__u=0,this.t=null,this.__b=null}function z(e){var t=e.__.__c;return t&&t.__e&&t.__e(e)}function Y(e){var t,r,n;function i(i){if(t||(t=e()).then((function(e){r=e.default||e}),(function(e){n=e})),n)throw n;if(!r)throw t;return(0,a.az)(r,i)}return i.displayName="Lazy",i.__f=!0,i}function V(){this.u=null,this.o=null}a.YM.__e=function(e,t,r){if(e.then)for(var n,i=t;i=i.__;)if((n=i.__c)&&n.__c)return null==t.__e&&(t.__e=r.__e,t.__k=r.__k),n.__c(e,t);q(e,t,r)},(G.prototype=new a.wA).__c=function(e,t){var r=t.__c,n=this;null==n.t&&(n.t=[]),n.t.push(r);var i=z(n.__v),o=!1,a=function(){o||(o=!0,r.componentWillUnmount=r.__c,i?i(s):s())};r.__c=r.componentWillUnmount,r.componentWillUnmount=function(){a(),r.__c&&r.__c()};var s=function(){var e;if(!--n.__u)for(n.state.__e&&(n.__v.__k[0]=H(n.state.__e)),n.setState({__e:n.__b=null});e=n.t.pop();)e.forceUpdate()},c=!0===t.__h;n.__u++||c||n.setState({__e:n.__b=n.__v.__k[0]}),e.then(a,a)},G.prototype.componentWillUnmount=function(){this.t=[]},G.prototype.render=function(e,t){this.__b&&(this.__v.__k&&(this.__v.__k[0]=B(this.__b)),this.__b=null);var r=t.__e&&(0,a.az)(a.HY,null,e.fallback);return r&&(r.__h=null),[(0,a.az)(a.HY,null,t.__e?null:e.children),r]};var $=function(e,t,r){if(++r[1]===r[0]&&e.o.delete(t),e.props.revealOrder&&("t"!==e.props.revealOrder[0]||!e.o.size))for(r=e.u;r;){for(;r.length>3;)r.pop()();if(r[1]<r[0])break;e.u=r=r[2]}};function X(e){return this.getChildContext=function(){return e.context},e.children}function K(e){var t=this,r=e.i;t.componentWillUnmount=function(){(0,a.sY)(null,t.l),t.l=null,t.i=null},t.i&&t.i!==r&&t.componentWillUnmount(),e.__v?(t.l||(t.i=r,t.l={nodeType:1,parentNode:r,childNodes:[],appendChild:function(e){this.childNodes.push(e),t.i.appendChild(e)},insertBefore:function(e,r){this.childNodes.push(e),t.i.appendChild(e)},removeChild:function(e){this.childNodes.splice(this.childNodes.indexOf(e)>>>1,1),t.i.removeChild(e)}}),(0,a.sY)((0,a.az)(X,{context:t.context},e.__v),t.l)):t.l&&t.componentWillUnmount()}function J(e,t){return(0,a.az)(K,{__v:e,i:t})}(V.prototype=new a.wA).__e=function(e){var t=this,r=z(t.__v),n=t.o.get(e);return n[0]++,function(i){var o=function(){t.props.revealOrder?(n.push(i),$(t,e,n)):i()};r?r(o):o()}},V.prototype.render=function(e){this.u=null,this.o=new Map;var t=(0,a.bR)(e.children);e.revealOrder&&"b"===e.revealOrder[0]&&t.reverse();for(var r=t.length;r--;)this.o.set(t[r],this.u=[1,0,this.u]);return e.children},V.prototype.componentDidUpdate=V.prototype.componentDidMount=function(){var e=this;this.o.forEach((function(t,r){$(e,r,t)}))};var Q="undefined"!=typeof Symbol&&Symbol.for&&Symbol.for("react.element")||60103,Z=/^(?:accent|alignment|arabic|baseline|cap|clip(?!PathU)|color|fill|flood|font|glyph(?!R)|horiz|marker(?!H|W|U)|overline|paint|stop|strikethrough|stroke|text(?!L)|underline|unicode|units|v|vector|vert|word|writing|x(?!C))[A-Z]/,ee=function(e){return("undefined"!=typeof Symbol&&"symbol"==typeof Symbol()?/fil|che|rad/i:/fil|che|ra/i).test(e)};function te(e,t,r){return null==t.__k&&(t.textContent=""),(0,a.sY)(e,t),"function"==typeof r&&r(),e?e.__c:null}function re(e,t,r){return(0,a.ZB)(e,t),"function"==typeof r&&r(),e?e.__c:null}a.wA.prototype.isReactComponent={},["componentWillMount","componentWillReceiveProps","componentWillUpdate"].forEach((function(e){Object.defineProperty(a.wA.prototype,e,{configurable:!0,get:function(){return this["UNSAFE_"+e]},set:function(t){Object.defineProperty(this,e,{configurable:!0,writable:!0,value:t})}})}));var ne=a.YM.event;function ie(){}function oe(){return this.cancelBubble}function ae(){return this.defaultPrevented}a.YM.event=function(e){return ne&&(e=ne(e)),e.persist=ie,e.isPropagationStopped=oe,e.isDefaultPrevented=ae,e.nativeEvent=e};var se,ce={configurable:!0,get:function(){return this.class}},ue=a.YM.vnode;a.YM.vnode=function(e){var t=e.type,r=e.props,n=r;if("string"==typeof t){for(var i in n={},r){var o=r[i];"defaultValue"===i&&"value"in r&&null==r.value?i="value":"download"===i&&!0===o?o="":/ondoubleclick/i.test(i)?i="ondblclick":/^onchange(textarea|input)/i.test(i+t)&&!ee(r.type)?i="oninput":/^on(Ani|Tra|Tou|BeforeInp)/.test(i)?i=i.toLowerCase():Z.test(i)?i=i.replace(/[A-Z0-9]/,"-$&").toLowerCase():null===o&&(o=void 0),n[i]=o}"select"==t&&n.multiple&&Array.isArray(n.value)&&(n.value=(0,a.bR)(r.children).forEach((function(e){e.props.selected=-1!=n.value.indexOf(e.props.value)}))),"select"==t&&null!=n.defaultValue&&(n.value=(0,a.bR)(r.children).forEach((function(e){e.props.selected=n.multiple?-1!=n.defaultValue.indexOf(e.props.value):n.defaultValue==e.props.value}))),e.props=n}t&&r.class!=r.className&&(ce.enumerable="className"in r,null!=r.className&&(n.class=r.className),Object.defineProperty(n,"className",ce)),e.$$typeof=Q,ue&&ue(e)};var le=a.YM.__r;a.YM.__r=function(e){le&&le(e),se=e.__c};var he={ReactCurrentDispatcher:{current:{readContext:function(e){return se.__n[e.__c].props.value}}}},fe="16.8.0";function pe(e){return a.az.bind(null,e)}function de(e){return!!e&&e.$$typeof===Q}function ge(e){return de(e)?a.Tm.apply(null,arguments):e}function me(e){return!!e.__k&&((0,a.sY)(null,e),!0)}function ve(e){return e&&(e.base||1===e.nodeType&&e)||null}var ye=function(e,t){return e(t)},_e=a.HY,be={useState:g,useReducer:m,useEffect:v,useLayoutEffect:y,useRef:_,useImperativeHandle:b,useMemo:A,useCallback:x,useContext:w,useDebugValue:S,version:"16.8.0",Children:W,render:te,hydrate:re,unmountComponentAtNode:me,createPortal:J,createElement:a.az,createContext:a.kr,createFactory:pe,cloneElement:ge,createRef:a.Vf,Fragment:a.HY,isValidElement:de,findDOMNode:ve,Component:a.wA,PureComponent:I,memo:M,forwardRef:j,unstable_batchedUpdates:ye,StrictMode:a.HY,Suspense:G,SuspenseList:V,lazy:Y,__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED:he}},6400:function(e,t,r){"use strict";r.d(t,{sY:function(){return D},ZB:function(){return j},az:function(){return d},h:function(){return d},HY:function(){return v},Vf:function(){return m},wA:function(){return y},Tm:function(){return U},kr:function(){return W},bR:function(){return E},YM:function(){return n}});var n,i,o,a,s,c,u={},l=[],h=/acit|ex(?:s|g|n|p|$)|rph|grid|ows|mnc|ntw|ine[ch]|zoo|^ord|itera/i;function f(e,t){for(var r in t)e[r]=t[r];return e}function p(e){var t=e.parentNode;t&&t.removeChild(e)}function d(e,t,r){var n,i,o,a=arguments,s={};for(o in t)"key"==o?n=t[o]:"ref"==o?i=t[o]:s[o]=t[o];if(arguments.length>3)for(r=[r],o=3;o<arguments.length;o++)r.push(a[o]);if(null!=r&&(s.children=r),"function"==typeof e&&null!=e.defaultProps)for(o in e.defaultProps)void 0===s[o]&&(s[o]=e.defaultProps[o]);return g(e,s,n,i,null)}function g(e,t,r,i,o){var a={type:e,props:t,key:r,ref:i,__k:null,__:null,__b:0,__e:null,__d:void 0,__c:null,__h:null,constructor:void 0,__v:null==o?++n.__v:o};return null!=n.vnode&&n.vnode(a),a}function m(){return{current:null}}function v(e){return e.children}function y(e,t){this.props=e,this.context=t}function _(e,t){if(null==t)return e.__?_(e.__,e.__.__k.indexOf(e)+1):null;for(var r;t<e.__k.length;t++)if(null!=(r=e.__k[t])&&null!=r.__e)return r.__e;return"function"==typeof e.type?_(e):null}function b(e){var t,r;if(null!=(e=e.__)&&null!=e.__c){for(e.__e=e.__c.base=null,t=0;t<e.__k.length;t++)if(null!=(r=e.__k[t])&&null!=r.__e){e.__e=e.__c.base=r.__e;break}return b(e)}}function A(e){(!e.__d&&(e.__d=!0)&&i.push(e)&&!x.__r++||a!==n.debounceRendering)&&((a=n.debounceRendering)||o)(x)}function x(){for(var e;x.__r=i.length;)e=i.sort((function(e,t){return e.__v.__b-t.__v.__b})),i=[],e.some((function(e){var t,r,n,i,o,a;e.__d&&(o=(i=(t=e).__v).__e,(a=t.__P)&&(r=[],(n=f({},i)).__v=i.__v+1,O(a,i,n,t.__n,void 0!==a.ownerSVGElement,null!=i.__h?[o]:null,r,null==o?_(i):o,i.__h),L(r,i),i.__e!=o&&b(i)))}))}function w(e,t,r,n,i,o,a,s,c,h){var f,d,m,y,b,A,x,w=n&&n.__k||l,E=w.length;for(c==u&&(c=null!=a?a[0]:E?_(n,0):null),r.__k=[],f=0;f<t.length;f++)if(null!=(y=r.__k[f]=null==(y=t[f])||"boolean"==typeof y?null:"string"==typeof y||"number"==typeof y?g(null,y,null,null,y):Array.isArray(y)?g(v,{children:y},null,null,null):y.__b>0?g(y.type,y.props,y.key,null,y.__v):y)){if(y.__=r,y.__b=r.__b+1,null===(m=w[f])||m&&y.key==m.key&&y.type===m.type)w[f]=void 0;else for(d=0;d<E;d++){if((m=w[d])&&y.key==m.key&&y.type===m.type){w[d]=void 0;break}m=null}O(e,y,m=m||u,i,o,a,s,c,h),b=y.__e,(d=y.ref)&&m.ref!=d&&(x||(x=[]),m.ref&&x.push(m.ref,null,y),x.push(d,y.__c||b,y)),null!=b?(null==A&&(A=b),"function"==typeof y.type&&null!=y.__k&&y.__k===m.__k?y.__d=c=S(y,c,e):c=C(e,y,m,w,a,b,c),h||"option"!==r.type?"function"==typeof r.type&&(r.__d=c):e.value=""):c&&m.__e==c&&c.parentNode!=e&&(c=_(m))}if(r.__e=A,null!=a&&"function"!=typeof r.type)for(f=a.length;f--;)null!=a[f]&&p(a[f]);for(f=E;f--;)null!=w[f]&&("function"==typeof r.type&&null!=w[f].__e&&w[f].__e==r.__d&&(r.__d=_(n,f+1)),M(w[f],w[f]));if(x)for(f=0;f<x.length;f++)I(x[f],x[++f],x[++f])}function S(e,t,r){var n,i;for(n=0;n<e.__k.length;n++)(i=e.__k[n])&&(i.__=e,t="function"==typeof i.type?S(i,t,r):C(r,i,i,e.__k,null,i.__e,t));return t}function E(e,t){return t=t||[],null==e||"boolean"==typeof e||(Array.isArray(e)?e.some((function(e){E(e,t)})):t.push(e)),t}function C(e,t,r,n,i,o,a){var s,c,u;if(void 0!==t.__d)s=t.__d,t.__d=void 0;else if(i==r||o!=a||null==o.parentNode)e:if(null==a||a.parentNode!==e)e.appendChild(o),s=null;else{for(c=a,u=0;(c=c.nextSibling)&&u<n.length;u+=2)if(c==o)break e;e.insertBefore(o,a),s=a}return void 0!==s?s:o.nextSibling}function k(e,t,r){"-"===t[0]?e.setProperty(t,r):e[t]=null==r?"":"number"!=typeof r||h.test(t)?r:r+"px"}function P(e,t,r,n,i){var o,a,s;if(i&&"className"==t&&(t="class"),"style"===t)if("string"==typeof r)e.style.cssText=r;else{if("string"==typeof n&&(e.style.cssText=n=""),n)for(t in n)r&&t in r||k(e.style,t,"");if(r)for(t in r)n&&r[t]===n[t]||k(e.style,t,r[t])}else"o"===t[0]&&"n"===t[1]?(o=t!==(t=t.replace(/Capture$/,"")),(a=t.toLowerCase())in e&&(t=a),t=t.slice(2),e.l||(e.l={}),e.l[t+o]=r,s=o?T:R,r?n||e.addEventListener(t,s,o):e.removeEventListener(t,s,o)):"list"!==t&&"tagName"!==t&&"form"!==t&&"type"!==t&&"size"!==t&&"download"!==t&&"href"!==t&&!i&&t in e?e[t]=null==r?"":r:"function"!=typeof r&&"dangerouslySetInnerHTML"!==t&&(t!==(t=t.replace(/xlink:?/,""))?null==r||!1===r?e.removeAttributeNS("http://www.w3.org/1999/xlink",t.toLowerCase()):e.setAttributeNS("http://www.w3.org/1999/xlink",t.toLowerCase(),r):null==r||!1===r&&!/^ar/.test(t)?e.removeAttribute(t):e.setAttribute(t,r))}function R(e){this.l[e.type+!1](n.event?n.event(e):e)}function T(e){this.l[e.type+!0](n.event?n.event(e):e)}function O(e,t,r,i,o,a,s,c,u){var l,h,p,d,g,m,_,b,A,x,S,E=t.type;if(void 0!==t.constructor)return null;null!=r.__h&&(u=r.__h,c=t.__e=r.__e,t.__h=null,a=[c]),(l=n.__b)&&l(t);try{e:if("function"==typeof E){if(b=t.props,A=(l=E.contextType)&&i[l.__c],x=l?A?A.props.value:l.__:i,r.__c?_=(h=t.__c=r.__c).__=h.__E:("prototype"in E&&E.prototype.render?t.__c=h=new E(b,x):(t.__c=h=new y(b,x),h.constructor=E,h.render=N),A&&A.sub(h),h.props=b,h.state||(h.state={}),h.context=x,h.__n=i,p=h.__d=!0,h.__h=[]),null==h.__s&&(h.__s=h.state),null!=E.getDerivedStateFromProps&&(h.__s==h.state&&(h.__s=f({},h.__s)),f(h.__s,E.getDerivedStateFromProps(b,h.__s))),d=h.props,g=h.state,p)null==E.getDerivedStateFromProps&&null!=h.componentWillMount&&h.componentWillMount(),null!=h.componentDidMount&&h.__h.push(h.componentDidMount);else{if(null==E.getDerivedStateFromProps&&b!==d&&null!=h.componentWillReceiveProps&&h.componentWillReceiveProps(b,x),!h.__e&&null!=h.shouldComponentUpdate&&!1===h.shouldComponentUpdate(b,h.__s,x)||t.__v===r.__v){h.props=b,h.state=h.__s,t.__v!==r.__v&&(h.__d=!1),h.__v=t,t.__e=r.__e,t.__k=r.__k,h.__h.length&&s.push(h);break e}null!=h.componentWillUpdate&&h.componentWillUpdate(b,h.__s,x),null!=h.componentDidUpdate&&h.__h.push((function(){h.componentDidUpdate(d,g,m)}))}h.context=x,h.props=b,h.state=h.__s,(l=n.__r)&&l(t),h.__d=!1,h.__v=t,h.__P=e,l=h.render(h.props,h.state,h.context),h.state=h.__s,null!=h.getChildContext&&(i=f(f({},i),h.getChildContext())),p||null==h.getSnapshotBeforeUpdate||(m=h.getSnapshotBeforeUpdate(d,g)),S=null!=l&&l.type===v&&null==l.key?l.props.children:l,w(e,Array.isArray(S)?S:[S],t,r,i,o,a,s,c,u),h.base=t.__e,t.__h=null,h.__h.length&&s.push(h),_&&(h.__E=h.__=null),h.__e=!1}else null==a&&t.__v===r.__v?(t.__k=r.__k,t.__e=r.__e):t.__e=F(r.__e,t,r,i,o,a,s,u);(l=n.diffed)&&l(t)}catch(e){t.__v=null,(u||null!=a)&&(t.__e=c,t.__h=!!u,a[a.indexOf(c)]=null),n.__e(e,t,r)}}function L(e,t){n.__c&&n.__c(t,e),e.some((function(t){try{e=t.__h,t.__h=[],e.some((function(e){e.call(t)}))}catch(e){n.__e(e,t.__v)}}))}function F(e,t,r,n,i,o,a,s){var c,h,f,p,d,g=r.props,m=t.props;if(i="svg"===t.type||i,null!=o)for(c=0;c<o.length;c++)if(null!=(h=o[c])&&((null===t.type?3===h.nodeType:h.localName===t.type)||e==h)){e=h,o[c]=null;break}if(null==e){if(null===t.type)return document.createTextNode(m);e=i?document.createElementNS("http://www.w3.org/2000/svg",t.type):document.createElement(t.type,m.is&&{is:m.is}),o=null,s=!1}if(null===t.type)g===m||s&&e.data===m||(e.data=m);else{if(null!=o&&(o=l.slice.call(e.childNodes)),f=(g=r.props||u).dangerouslySetInnerHTML,p=m.dangerouslySetInnerHTML,!s){if(null!=o)for(g={},d=0;d<e.attributes.length;d++)g[e.attributes[d].name]=e.attributes[d].value;(p||f)&&(p&&(f&&p.__html==f.__html||p.__html===e.innerHTML)||(e.innerHTML=p&&p.__html||""))}(function(e,t,r,n,i){var o;for(o in r)"children"===o||"key"===o||o in t||P(e,o,null,r[o],n);for(o in t)i&&"function"!=typeof t[o]||"children"===o||"key"===o||"value"===o||"checked"===o||r[o]===t[o]||P(e,o,t[o],r[o],n)})(e,m,g,i,s),p?t.__k=[]:(c=t.props.children,w(e,Array.isArray(c)?c:[c],t,r,n,"foreignObject"!==t.type&&i,o,a,u,s)),s||("value"in m&&void 0!==(c=m.value)&&(c!==e.value||"progress"===t.type&&!c)&&P(e,"value",c,g.value,!1),"checked"in m&&void 0!==(c=m.checked)&&c!==e.checked&&P(e,"checked",c,g.checked,!1))}return e}function I(e,t,r){try{"function"==typeof e?e(t):e.current=t}catch(e){n.__e(e,r)}}function M(e,t,r){var i,o,a;if(n.unmount&&n.unmount(e),(i=e.ref)&&(i.current&&i.current!==e.__e||I(i,null,t)),r||"function"==typeof e.type||(r=null!=(o=e.__e)),e.__e=e.__d=void 0,null!=(i=e.__c)){if(i.componentWillUnmount)try{i.componentWillUnmount()}catch(e){n.__e(e,t)}i.base=i.__P=null}if(i=e.__k)for(a=0;a<i.length;a++)i[a]&&M(i[a],t,r);null!=o&&p(o)}function N(e,t,r){return this.constructor(e,r)}function D(e,t,r){var i,o,a;n.__&&n.__(e,t),o=(i=r===s)?null:r&&r.__k||t.__k,e=d(v,null,[e]),a=[],O(t,(i?t:r||t).__k=e,o||u,u,void 0!==t.ownerSVGElement,r&&!i?[r]:o?null:t.childNodes.length?l.slice.call(t.childNodes):null,a,r||u,i),L(a,e)}function j(e,t){D(e,t,s)}function U(e,t,r){var n,i,o,a=arguments,s=f({},e.props);for(o in t)"key"==o?n=t[o]:"ref"==o?i=t[o]:s[o]=t[o];if(arguments.length>3)for(r=[r],o=3;o<arguments.length;o++)r.push(a[o]);return null!=r&&(s.children=r),g(e.type,s,n||e.key,i||e.ref,null)}function W(e,t){var r={__c:t="__cC"+c++,__:e,Consumer:function(e,t){return e.children(t)},Provider:function(e){var r,n;return this.getChildContext||(r=[],(n={})[t]=this,this.getChildContext=function(){return n},this.shouldComponentUpdate=function(e){this.props.value!==e.value&&r.some(A)},this.sub=function(e){r.push(e);var t=e.componentWillUnmount;e.componentWillUnmount=function(){r.splice(r.indexOf(e),1),t&&t.call(e)}}),e.children}};return r.Provider.__=r.Consumer.contextType=r}n={__e:function(e,t){for(var r,n,i,o=t.__h;t=t.__;)if((r=t.__c)&&!r.__)try{if((n=r.constructor)&&null!=n.getDerivedStateFromError&&(r.setState(n.getDerivedStateFromError(e)),i=r.__d),null!=r.componentDidCatch&&(r.componentDidCatch(e),i=r.__d),i)return t.__h=o,r.__E=r}catch(t){e=t}throw e},__v:0},y.prototype.setState=function(e,t){var r;r=null!=this.__s&&this.__s!==this.state?this.__s:this.__s=f({},this.state),"function"==typeof e&&(e=e(f({},r),this.props)),e&&f(r,e),null!=e&&this.__v&&(t&&this.__h.push(t),A(this))},y.prototype.forceUpdate=function(e){this.__v&&(this.__e=!0,e&&this.__h.push(e),A(this))},y.prototype.render=v,i=[],o="function"==typeof Promise?Promise.prototype.then.bind(Promise.resolve()):setTimeout,x.__r=0,s=u,c=0},2703:function(e,t,r){"use strict";var n=r(414);function i(){}function o(){}o.resetWarningCache=i,e.exports=function(){function e(e,t,r,i,o,a){if(a!==n){var s=new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types");throw s.name="Invariant Violation",s}}function t(){return e}e.isRequired=e;var r={array:e,bool:e,func:e,number:e,object:e,string:e,symbol:e,any:e,arrayOf:t,element:e,elementType:e,instanceOf:t,node:e,objectOf:t,oneOf:t,oneOfType:t,shape:t,exact:t,checkPropTypes:o,resetWarningCache:i};return r.PropTypes=r,r}},5697:function(e,t,r){e.exports=r(2703)()},414:function(e){"use strict";e.exports="SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED"},5666:function(e){var t=function(e){"use strict";var t,r=Object.prototype,n=r.hasOwnProperty,i="function"==typeof Symbol?Symbol:{},o=i.iterator||"@@iterator",a=i.asyncIterator||"@@asyncIterator",s=i.toStringTag||"@@toStringTag";function c(e,t,r){return Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}),e[t]}try{c({},"")}catch(e){c=function(e,t,r){return e[t]=r}}function u(e,t,r,n){var i=t&&t.prototype instanceof m?t:m,o=Object.create(i.prototype),a=new P(n||[]);return o._invoke=function(e,t,r){var n=h;return function(i,o){if(n===p)throw new Error("Generator is already running");if(n===d){if("throw"===i)throw o;return T()}for(r.method=i,r.arg=o;;){var a=r.delegate;if(a){var s=E(a,r);if(s){if(s===g)continue;return s}}if("next"===r.method)r.sent=r._sent=r.arg;else if("throw"===r.method){if(n===h)throw n=d,r.arg;r.dispatchException(r.arg)}else"return"===r.method&&r.abrupt("return",r.arg);n=p;var c=l(e,t,r);if("normal"===c.type){if(n=r.done?d:f,c.arg===g)continue;return{value:c.arg,done:r.done}}"throw"===c.type&&(n=d,r.method="throw",r.arg=c.arg)}}}(e,r,a),o}function l(e,t,r){try{return{type:"normal",arg:e.call(t,r)}}catch(e){return{type:"throw",arg:e}}}e.wrap=u;var h="suspendedStart",f="suspendedYield",p="executing",d="completed",g={};function m(){}function v(){}function y(){}var _={};_[o]=function(){return this};var b=Object.getPrototypeOf,A=b&&b(b(R([])));A&&A!==r&&n.call(A,o)&&(_=A);var x=y.prototype=m.prototype=Object.create(_);function w(e){["next","throw","return"].forEach((function(t){c(e,t,(function(e){return this._invoke(t,e)}))}))}function S(e,t){function r(i,o,a,s){var c=l(e[i],e,o);if("throw"!==c.type){var u=c.arg,h=u.value;return h&&"object"==typeof h&&n.call(h,"__await")?t.resolve(h.__await).then((function(e){r("next",e,a,s)}),(function(e){r("throw",e,a,s)})):t.resolve(h).then((function(e){u.value=e,a(u)}),(function(e){return r("throw",e,a,s)}))}s(c.arg)}var i;this._invoke=function(e,n){function o(){return new t((function(t,i){r(e,n,t,i)}))}return i=i?i.then(o,o):o()}}function E(e,r){var n=e.iterator[r.method];if(n===t){if(r.delegate=null,"throw"===r.method){if(e.iterator.return&&(r.method="return",r.arg=t,E(e,r),"throw"===r.method))return g;r.method="throw",r.arg=new TypeError("The iterator does not provide a 'throw' method")}return g}var i=l(n,e.iterator,r.arg);if("throw"===i.type)return r.method="throw",r.arg=i.arg,r.delegate=null,g;var o=i.arg;return o?o.done?(r[e.resultName]=o.value,r.next=e.nextLoc,"return"!==r.method&&(r.method="next",r.arg=t),r.delegate=null,g):o:(r.method="throw",r.arg=new TypeError("iterator result is not an object"),r.delegate=null,g)}function C(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function k(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function P(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(C,this),this.reset(!0)}function R(e){if(e){var r=e[o];if(r)return r.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length)){var i=-1,a=function r(){for(;++i<e.length;)if(n.call(e,i))return r.value=e[i],r.done=!1,r;return r.value=t,r.done=!0,r};return a.next=a}}return{next:T}}function T(){return{value:t,done:!0}}return v.prototype=x.constructor=y,y.constructor=v,v.displayName=c(y,s,"GeneratorFunction"),e.isGeneratorFunction=function(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===v||"GeneratorFunction"===(t.displayName||t.name))},e.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,y):(e.__proto__=y,c(e,s,"GeneratorFunction")),e.prototype=Object.create(x),e},e.awrap=function(e){return{__await:e}},w(S.prototype),S.prototype[a]=function(){return this},e.AsyncIterator=S,e.async=function(t,r,n,i,o){void 0===o&&(o=Promise);var a=new S(u(t,r,n,i),o);return e.isGeneratorFunction(r)?a:a.next().then((function(e){return e.done?e.value:a.next()}))},w(x),c(x,s,"Generator"),x[o]=function(){return this},x.toString=function(){return"[object Generator]"},e.keys=function(e){var t=[];for(var r in e)t.push(r);return t.reverse(),function r(){for(;t.length;){var n=t.pop();if(n in e)return r.value=n,r.done=!1,r}return r.done=!0,r}},e.values=R,P.prototype={constructor:P,reset:function(e){if(this.prev=0,this.next=0,this.sent=this._sent=t,this.done=!1,this.delegate=null,this.method="next",this.arg=t,this.tryEntries.forEach(k),!e)for(var r in this)"t"===r.charAt(0)&&n.call(this,r)&&!isNaN(+r.slice(1))&&(this[r]=t)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(e){if(this.done)throw e;var r=this;function i(n,i){return s.type="throw",s.arg=e,r.next=n,i&&(r.method="next",r.arg=t),!!i}for(var o=this.tryEntries.length-1;o>=0;--o){var a=this.tryEntries[o],s=a.completion;if("root"===a.tryLoc)return i("end");if(a.tryLoc<=this.prev){var c=n.call(a,"catchLoc"),u=n.call(a,"finallyLoc");if(c&&u){if(this.prev<a.catchLoc)return i(a.catchLoc,!0);if(this.prev<a.finallyLoc)return i(a.finallyLoc)}else if(c){if(this.prev<a.catchLoc)return i(a.catchLoc,!0)}else{if(!u)throw new Error("try statement without catch or finally");if(this.prev<a.finallyLoc)return i(a.finallyLoc)}}}},abrupt:function(e,t){for(var r=this.tryEntries.length-1;r>=0;--r){var i=this.tryEntries[r];if(i.tryLoc<=this.prev&&n.call(i,"finallyLoc")&&this.prev<i.finallyLoc){var o=i;break}}o&&("break"===e||"continue"===e)&&o.tryLoc<=t&&t<=o.finallyLoc&&(o=null);var a=o?o.completion:{};return a.type=e,a.arg=t,o?(this.method="next",this.next=o.finallyLoc,g):this.complete(a)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),g},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var r=this.tryEntries[t];if(r.finallyLoc===e)return this.complete(r.completion,r.afterLoc),k(r),g}},catch:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var r=this.tryEntries[t];if(r.tryLoc===e){var n=r.completion;if("throw"===n.type){var i=n.arg;k(r)}return i}}throw new Error("illegal catch attempt")},delegateYield:function(e,r,n){return this.delegate={iterator:R(e),resultName:r,nextLoc:n},"next"===this.method&&(this.arg=t),g}},e}(e.exports);try{regeneratorRuntime=t}catch(e){Function("r","regeneratorRuntime = r")(t)}},2993:function(){},8618:function(){},120:function(){},6355:function(){},5804:function(){}},__webpack_module_cache__={};function __webpack_require__(e){if(__webpack_module_cache__[e])return __webpack_module_cache__[e].exports;var t=__webpack_module_cache__[e]={exports:{}};return __webpack_modules__[e].call(t.exports,t,t.exports,__webpack_require__),t.exports}__webpack_require__.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return __webpack_require__.d(t,{a:t}),t},__webpack_require__.d=function(e,t){for(var r in t)__webpack_require__.o(t,r)&&!__webpack_require__.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},__webpack_require__.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),__webpack_require__.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},__webpack_require__.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},function(){"use strict";var e=__webpack_require__(6400),t=__webpack_require__(9299);function r(){return(r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var n in r)Object.prototype.hasOwnProperty.call(r,n)&&(e[n]=r[n])}return e}).apply(this,arguments)}function n(e,t){if(null==e)return{};var r,n,i=function(e,t){if(null==e)return{};var r,n,i={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(i[r]=e[r]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(i[r]=e[r])}return i}function i(e){return(i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}var o=__webpack_require__(7757),a=__webpack_require__.n(o);function s(e,t,r,n,i,o,a){try{var s=e[o](a),c=s.value}catch(e){return void r(e)}s.done?t(c):Promise.resolve(c).then(n,i)}function c(e){return function(){var t=this,r=arguments;return new Promise((function(n,i){var o=e.apply(t,r);function a(e){s(o,n,i,a,c,"next",e)}function c(e){s(o,n,i,a,c,"throw",e)}a(void 0)}))}}function u(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function l(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function h(e,t,r){return t&&l(e.prototype,t),r&&l(e,r),e}function f(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function p(e,t){return(p=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function d(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&p(e,t)}function g(e,t){return!t||"object"!==i(t)&&"function"!=typeof t?f(e):t}function m(e){return(m=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function v(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}var y=__webpack_require__(9748),_=__webpack_require__(5697),b=__webpack_require__.n(_),A=__webpack_require__(5564),x=__webpack_require__(7839);function w(){for(var e=arguments.length,t=new Array(e),r=0;r<e;r++)t[r]=arguments[r];return t.reduce((function(e,t){return"string"==typeof t||t instanceof Array?e.concat(t):e}),[]).filter(Boolean).join(" ")}var S=(0,y.createContext)(null);function E(e){var t=e.children,r=e.type;return y.default.createElement("div",{className:"react-pdf__message react-pdf__message--".concat(r)},t)}E.propTypes={children:b().node,type:b().oneOf(["error","loading","no-data"]).isRequired};var C=__webpack_require__(6379).dM,k=1,P=2,R=new(__webpack_require__(6420).EventBus),T="undefined"!=typeof window,O=T&&"file:"===window.location.protocol,L=function(e){return void 0!==e},F=function(e){return L(e)&&null!==e},I=function(e){return e instanceof ArrayBuffer},M=function(e){if(!T)throw new Error("Attempted to check if a variable is a Blob on a non-browser environment.");return e instanceof Blob},N=function(e){if(!T)throw new Error("Attempted to check if a variable is a File on a non-browser environment.");return e instanceof File},D=function(e){return"string"==typeof e&&/^data:/.test(e)},j=function(e){if(!D(e))throw new Error("dataURItoUint8Array was provided with an argument which is not a valid data URI.");var t;t=e.split(",")[0].indexOf("base64")>=0?atob(e.split(",")[1]):unescape(e.split(",")[1]);for(var r=new Uint8Array(t.length),n=0;n<t.length;n+=1)r[n]=t.charCodeAt(n);return r},U=function(e){},W=function(){for(var e=arguments.length,t=new Array(e),r=0;r<e;r++)t[r]=arguments[r];return U.apply(void 0,["warn"].concat(t))},q=function(){for(var e=arguments.length,t=new Array(e),r=0;r<e;r++)t[r]=arguments[r];return U.apply(void 0,["error"].concat(t))},B=function(){O&&W("Loading PDF as base64 strings/URLs might not work on protocols other than HTTP/HTTPS. On Google Chrome, you can use --allow-file-access-from-files flag for debugging purposes.")},H=function(e){e&&e.cancel&&e.cancel()},G=function(e,t){return Object.defineProperty(e,"width",{get:function(){return this.view[2]*t},configurable:!0}),Object.defineProperty(e,"height",{get:function(){return this.view[3]*t},configurable:!0}),Object.defineProperty(e,"originalWidth",{get:function(){return this.view[2]},configurable:!0}),Object.defineProperty(e,"originalHeight",{get:function(){return this.view[3]},configurable:!0}),e},z=function(e){return"RenderingCancelledException"===e.name},Y=function(e){return new Promise((function(t,r){var n=new FileReader;return n.onload=function(){return t(new Uint8Array(n.result))},n.onerror=function(e){switch(e.target.error.code){case e.target.error.NOT_FOUND_ERR:return r(new Error("Error while reading a file: File not found."));case e.target.error.NOT_READABLE_ERR:return r(new Error("Error while reading a file: File not readable."));case e.target.error.SECURITY_ERR:return r(new Error("Error while reading a file: Security error."));case e.target.error.ABORT_ERR:return r(new Error("Error while reading a file: Aborted."));default:return r(new Error("Error while reading a file."))}},n.readAsArrayBuffer(e),null}))};function V(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=new Array(t);r<t;r++)n[r]=e[r];return n}function $(e,t){if(e){if("string"==typeof e)return V(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);return"Object"===r&&e.constructor&&(r=e.constructor.name),"Map"===r||"Set"===r?Array.from(e):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?V(e,t):void 0}}function X(e){return function(e){if(Array.isArray(e))return V(e)}(e)||function(e){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(e))return Array.from(e)}(e)||$(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}var K,J=(K={},[].concat(X(A.ag),X(A.wx),X(A.vS)).forEach((function(e){K[e]=b().func})),K),Q=[b().string,b().instanceOf(ArrayBuffer),b().shape({data:b().object,httpHeaders:b().object,range:b().object,url:b().string,withCredentials:b().bool})];"undefined"!=typeof File&&Q.push(b().instanceOf(File)),"undefined"!=typeof Blob&&Q.push(b().instanceOf(Blob));var Z=b().oneOfType([b().string,b().arrayOf(b().string)]),ee=(b().oneOfType(Q),b().instanceOf(C)),te=(b().oneOf(["_self","_blank","_parent","_top"]),b().shape({_transport:b().shape({fontLoader:b().object.isRequired}).isRequired,commonObjs:b().shape({_objs:b().object.isRequired}).isRequired,getAnnotations:b().func.isRequired,getTextContent:b().func.isRequired,getViewport:b().func.isRequired,render:b().func.isRequired})),re=b().oneOfType([b().shape({getDestination:b().func.isRequired,getOutline:b().func.isRequired,getPage:b().func.isRequired,numPages:b().number.isRequired}),b().bool]),ne=b().oneOfType([b().func,b().shape({current:b().any})]),ie=b().oneOf(["canvas","none","svg"]),oe=b().oneOf([0,90,180,270]);function ae(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function se(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?ae(Object(r),!0).forEach((function(t){v(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):ae(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}var ce=t.PDFDataRangeTransport,ue=function(e){d(p,e);var o,s,l=(o=p,s=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=m(o);if(s){var r=m(this).constructor;e=Reflect.construct(t,arguments,r)}else e=t.apply(this,arguments);return g(this,e)});function p(){var e;u(this,p);for(var r=arguments.length,o=new Array(r),s=0;s<r;s++)o[s]=arguments[s];return v(f(e=l.call.apply(l,[this].concat(o))),"state",{pdf:null}),v(f(e),"viewer",{scrollPageIntoView:function(t){var r=t.pageNumber,n=e.props.onItemClick;if(n)n({pageNumber:r});else{var i=e.pages[r-1];i?i.scrollIntoView():W("Warning: An internal link leading to page ".concat(r," was clicked, but neither <Document> was provided with onItemClick nor it was able to find the page within itself. Either provide onItemClick to <Document> and handle navigating by yourself or ensure that all pages are rendered within <Document>."))}}}),v(f(e),"linkService",new C({eventBus:R})),v(f(e),"loadDocument",c(a().mark((function r(){var n,i,o,s,c,u,l;return a().wrap((function(r){for(;;)switch(r.prev=r.next){case 0:return n=null,r.prev=1,r.next=4,e.findDocumentSource();case 4:n=r.sent,e.onSourceSuccess(),r.next=11;break;case 8:r.prev=8,r.t0=r.catch(1),e.onSourceError(r.t0);case 11:if(n){r.next=13;break}return r.abrupt("return");case 13:return e.setState((function(e){return e.pdf?{pdf:null}:null})),i=e.props,o=i.options,s=i.onLoadProgress,c=i.onPassword,r.prev=15,H(e.runningTask),e.loadingTask=t.getDocument(se(se({},n),o)),e.loadingTask.onPassword=c,s&&(e.loadingTask.onProgress=s),u=(0,x.Z)(e.loadingTask.promise),e.runningTask=u,r.next=24,u.promise;case 24:l=r.sent,e.setState((function(e){return e.pdf&&e.pdf.fingerprint===l.fingerprint?null:{pdf:l}}),e.onLoadSuccess),r.next=31;break;case 28:r.prev=28,r.t1=r.catch(15),e.onLoadError(r.t1);case 31:case"end":return r.stop()}}),r,null,[[1,8],[15,28]])})))),v(f(e),"setupLinkService",(function(){e.linkService.setViewer(e.viewer);var t=f(e);Object.defineProperty(e.linkService,"externalLinkTarget",{get:function(){switch(t.props.externalLinkTarget){case"_self":return 1;case"_blank":return 2;case"_parent":return 3;case"_top":return 4;default:return 0}}})})),v(f(e),"onSourceSuccess",(function(){var t=e.props.onSourceSuccess;t&&t()})),v(f(e),"onSourceError",(function(t){q(t);var r=e.props.onSourceError;r&&r(t)})),v(f(e),"onLoadSuccess",(function(){var t=e.props.onLoadSuccess,r=e.state.pdf;t&&t(r),e.pages=new Array(r.numPages),e.linkService.setDocument(r)})),v(f(e),"onLoadError",(function(t){e.setState({pdf:!1}),q(t);var r=e.props.onLoadError;r&&r(t)})),v(f(e),"findDocumentSource",c(a().mark((function t(){var r,o,s,c,u;return a().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:if(r=e.props.file){t.next=3;break}return t.abrupt("return",null);case 3:if("string"!=typeof r){t.next=9;break}if(!D(r)){t.next=7;break}return o=j(r),t.abrupt("return",{data:o});case 7:return B(),t.abrupt("return",{url:r});case 9:if(!(r instanceof ce)){t.next=11;break}return t.abrupt("return",{range:r});case 11:if(!I(r)){t.next=13;break}return t.abrupt("return",{data:r});case 13:if(!T){t.next=19;break}if(!M(r)&&!N(r)){t.next=19;break}return t.next=17,Y(r);case 17:return t.t0=t.sent,t.abrupt("return",{data:t.t0});case 19:if("object"===i(r)){t.next=21;break}throw new Error("Invalid parameter in file, need either Uint8Array, string or a parameter object");case 21:if(r.url||r.data||r.range){t.next=23;break}throw new Error("Invalid parameter object: need either .data, .range or .url");case 23:if("string"!=typeof r.url){t.next=29;break}if(!D(r.url)){t.next=28;break}return s=r.url,c=n(r,["url"]),u=j(s),t.abrupt("return",se({data:u},c));case 28:B();case 29:return t.abrupt("return",r);case 30:case"end":return t.stop()}}),t)})))),v(f(e),"registerPage",(function(t,r){e.pages[t]=r})),v(f(e),"unregisterPage",(function(t){delete e.pages[t]})),e}return h(p,[{key:"componentDidMount",value:function(){this.loadDocument(),this.setupLinkService()}},{key:"componentDidUpdate",value:function(e){this.props.file!==e.file&&this.loadDocument()}},{key:"componentWillUnmount",value:function(){this.loadingTask&&this.loadingTask.destroy(),H(this.runningTask)}},{key:"renderChildren",value:function(){var e=this.props.children;return y.default.createElement(S.Provider,{value:this.childContext},e)}},{key:"renderContent",value:function(){var e=this.props.file,t=this.state.pdf;if(!e){var r=this.props.noData;return y.default.createElement(E,{type:"no-data"},"function"==typeof r?r():r)}if(null===t){var n=this.props.loading;return y.default.createElement(E,{type:"loading"},"function"==typeof n?n():n)}if(!1===t){var i=this.props.error;return y.default.createElement(E,{type:"error"},"function"==typeof i?i():i)}return this.renderChildren()}},{key:"render",value:function(){var e=this.props,t=e.className,n=e.inputRef;return y.default.createElement("div",r({className:w("react-pdf__Document",t),ref:n},this.eventProps),this.renderContent())}},{key:"childContext",get:function(){var e=this.linkService,t=this.registerPage,r=this.unregisterPage,n=this.props,i=n.renderMode,o=n.rotate;return{linkService:e,pdf:this.state.pdf,registerPage:t,renderMode:i,rotate:o,unregisterPage:r}}},{key:"eventProps",get:function(){var e=this;return(0,A.ZP)(this.props,(function(){return e.state.pdf}))}}]),p}(y.PureComponent);ue.defaultProps={error:"Failed to load PDF file.",loading:"Loading PDF…",noData:"No PDF file specified.",onPassword:function(e,t){switch(t){case k:e(prompt("Enter the password to open this PDF file."));break;case P:e(prompt("Invalid password. Please try again."))}}};var le=b().oneOfType([b().func,b().node]);ue.propTypes=se(se({},J),{},{children:b().node,className:Z,error:le,file:N,inputRef:ne,loading:le,noData:le,onItemClick:b().func,onLoadError:b().func,onLoadProgress:b().func,onLoadSuccess:b().func,onPassword:b().func,onSourceError:b().func,onSourceSuccess:b().func,rotate:b().number});var he=(0,y.createContext)(null);function fe(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(e)){var r=[],n=!0,i=!1,o=void 0;try{for(var a,s=e[Symbol.iterator]();!(n=(a=s.next()).done)&&(r.push(a.value),!t||r.length!==t);n=!0);}catch(e){i=!0,o=e}finally{try{n||null==s.return||s.return()}finally{if(i)throw o}}return r}}(e,t)||$(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}var pe=function(){function e(t){var r=t.num,n=t.gen;u(this,e),this.num=r,this.gen=n}return h(e,[{key:"toString",value:function(){var e="".concat(this.num,"R");return 0!==this.gen&&(e+=this.gen),e}}]),e}();var de=function(e){d(s,e);var t,i,o=(t=s,i=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,r=m(t);if(i){var n=m(this).constructor;e=Reflect.construct(r,arguments,n)}else e=r.apply(this,arguments);return g(this,e)});function s(){var e;u(this,s);for(var t=arguments.length,r=new Array(t),n=0;n<t;n++)r[n]=arguments[n];return v(f(e=o.call.apply(o,[this].concat(r))),"getDestination",c(a().mark((function t(){var r,n,i;return a().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:if(r=e.props,n=r.item,i=r.pdf,L(e.destination)){t.next=9;break}if("string"!=typeof n.dest){t.next=8;break}return t.next=5,i.getDestination(n.dest);case 5:e.destination=t.sent,t.next=9;break;case 8:e.destination=n.dest;case 9:return t.abrupt("return",e.destination);case 10:case"end":return t.stop()}}),t)})))),v(f(e),"getPageIndex",c(a().mark((function t(){var r,n,i,o;return a().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:if(r=e.props.pdf,L(e.pageIndex)){t.next=10;break}return t.next=4,e.getDestination();case 4:if(!(n=t.sent)){t.next=10;break}return i=fe(n,1),o=i[0],t.next=9,r.getPageIndex(new pe(o));case 9:e.pageIndex=t.sent;case 10:return t.abrupt("return",e.pageIndex);case 11:case"end":return t.stop()}}),t)})))),v(f(e),"getPageNumber",c(a().mark((function t(){return a().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:if(L(e.pageNumber)){t.next=5;break}return t.next=3,e.getPageIndex();case 3:t.t0=t.sent,e.pageNumber=t.t0+1;case 5:return t.abrupt("return",e.pageNumber);case 6:case"end":return t.stop()}}),t)})))),v(f(e),"onClick",function(){var t=c(a().mark((function t(r){var n,i,o;return a().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return n=e.props.onClick,r.preventDefault(),t.next=4,e.getPageIndex();case 4:return i=t.sent,t.next=7,e.getPageNumber();case 7:o=t.sent,n&&n({pageIndex:i,pageNumber:o});case 9:case"end":return t.stop()}}),t)})));return function(e){return t.apply(this,arguments)}}()),e}return h(s,[{key:"renderSubitems",value:function(){var e=this.props,t=e.item,i=n(e,["item"]);if(!t.items||!t.items.length)return null;var o=t.items;return y.default.createElement("ul",null,o.map((function(e,t){return y.default.createElement(s,r({key:"string"==typeof e.destination?e.destination:t,item:e},i))})))}},{key:"render",value:function(){var e=this.props.item;return y.default.createElement("li",null,y.default.createElement("a",{href:"#",onClick:this.onClick},e.title),this.renderSubitems())}}]),s}(y.PureComponent),ge=b().oneOfType([b().string,b().arrayOf(b().any)]);de.propTypes={item:b().shape({dest:ge,items:b().arrayOf(b().shape({dest:ge,title:b().string})),title:b().string}).isRequired,onClick:b().func,pdf:re.isRequired};var me=function(e){return y.default.createElement(S.Consumer,null,(function(t){return y.default.createElement(he.Consumer,null,(function(n){return y.default.createElement(de,r({},t,n,e))}))}))};function ve(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function ye(){for(var e=arguments.length,t=new Array(e),r=0;r<e;r++)t[r]=arguments[r];var n=t.filter(Boolean);return n.length<=1?n[0]:function(e){n.forEach((function(t){"function"==typeof t?t(e):t.current=e}))}}(function(e){d(o,e);var t,n,i=(t=o,n=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,r=m(t);if(n){var i=m(this).constructor;e=Reflect.construct(r,arguments,i)}else e=r.apply(this,arguments);return g(this,e)});function o(){var e;u(this,o);for(var t=arguments.length,r=new Array(t),n=0;n<t;n++)r[n]=arguments[n];return v(f(e=i.call.apply(i,[this].concat(r))),"state",{outline:null}),v(f(e),"loadOutline",c(a().mark((function t(){var r,n,i;return a().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return r=e.props.pdf,e.setState((function(e){return e.outline?{outline:null}:null})),t.prev=2,n=(0,x.Z)(r.getOutline()),e.runningTask=n,t.next=7,n.promise;case 7:i=t.sent,e.setState({outline:i},e.onLoadSuccess),t.next=14;break;case 11:t.prev=11,t.t0=t.catch(2),e.onLoadError(t.t0);case 14:case"end":return t.stop()}}),t,null,[[2,11]])})))),v(f(e),"onLoadSuccess",(function(){var t=e.props.onLoadSuccess,r=e.state.outline;t&&t(r)})),v(f(e),"onLoadError",(function(t){e.setState({outline:!1}),q(t);var r=e.props.onLoadError;r&&r(t)})),v(f(e),"onItemClick",(function(t){var r=t.pageIndex,n=t.pageNumber,i=e.props.onItemClick;i&&i({pageIndex:r,pageNumber:n})})),e}return h(o,[{key:"componentDidMount",value:function(){if(!this.props.pdf)throw new Error("Attempted to load an outline, but no document was specified.");this.loadOutline()}},{key:"componentDidUpdate",value:function(e){var t=this.props.pdf;e.pdf&&t!==e.pdf&&this.loadOutline()}},{key:"componentWillUnmount",value:function(){H(this.runningTask)}},{key:"renderOutline",value:function(){var e=this.state.outline;return y.default.createElement("ul",null,e.map((function(e,t){return y.default.createElement(me,{key:"string"==typeof e.destination?e.destination:t,item:e})})))}},{key:"render",value:function(){var e=this.props.pdf,t=this.state.outline;if(!e||!t)return null;var n=this.props,i=n.className,o=n.inputRef;return y.default.createElement("div",r({className:w("react-pdf__Outline",i),ref:o},this.eventProps),y.default.createElement(he.Provider,{value:this.childContext},this.renderOutline()))}},{key:"childContext",get:function(){return{onClick:this.onItemClick}}},{key:"eventProps",get:function(){var e=this;return(0,A.ZP)(this.props,(function(){return e.state.outline}))}}]),o}(y.PureComponent)).propTypes=function(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?ve(Object(r),!0).forEach((function(t){v(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):ve(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}({className:Z,inputRef:ne,onItemClick:b().func,onLoadError:b().func,onLoadSuccess:b().func,pdf:re},J);var _e=(0,y.createContext)(null);var be=function(e){d(i,e);var t,r,n=(t=i,r=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,n=m(t);if(r){var i=m(this).constructor;e=Reflect.construct(n,arguments,i)}else e=n.apply(this,arguments);return g(this,e)});function i(){var e;u(this,i);for(var t=arguments.length,r=new Array(t),o=0;o<t;o++)r[o]=arguments[o];return v(f(e=n.call.apply(n,[this].concat(r))),"onRenderSuccess",(function(){e.renderer=null;var t=e.props,r=t.onRenderSuccess,n=t.page,i=t.scale;r&&r(G(n,i))})),v(f(e),"onRenderError",(function(t){if(!z(t)){q(t);var r=e.props.onRenderError;r&&r(t)}})),v(f(e),"drawPageOnCanvas",(function(){var t=f(e).canvasLayer;if(!t)return null;var r=f(e),n=r.renderViewport,i=r.viewport,o=e.props,a=o.page,s=o.renderInteractiveForms;t.width=n.width,t.height=n.height,t.style.width="".concat(Math.floor(i.width),"px"),t.style.height="".concat(Math.floor(i.height),"px");var c={get canvasContext(){return t.getContext("2d")},viewport:n,renderInteractiveForms:s};return e.cancelRenderingTask(),e.renderer=a.render(c),e.renderer.promise.then(e.onRenderSuccess).catch(e.onRenderError)})),e}return h(i,[{key:"componentDidMount",value:function(){this.drawPageOnCanvas()}},{key:"componentDidUpdate",value:function(e){var t=this.props,r=t.page;t.renderInteractiveForms!==e.renderInteractiveForms&&(r.cleanup(),this.drawPageOnCanvas())}},{key:"componentWillUnmount",value:function(){this.cancelRenderingTask(),this.canvasLayer&&(this.canvasLayer.width=0,this.canvasLayer.height=0,this.canvasLayer=null)}},{key:"cancelRenderingTask",value:function(){this.renderer&&this.renderer._internalRenderTask.running&&this.renderer._internalRenderTask.cancel()}},{key:"render",value:function(){var e=this,t=this.props.canvasRef;return y.default.createElement("canvas",{className:"react-pdf__Page__canvas",dir:"ltr",ref:ye(t,(function(t){e.canvasLayer=t})),style:{display:"block",userSelect:"none"}})}},{key:"renderViewport",get:function(){var e=this.props,t=e.page,r=e.rotate,n=e.scale,i=T&&window.devicePixelRatio||1;return t.getViewport({scale:n*i,rotation:r})}},{key:"viewport",get:function(){var e=this.props,t=e.page,r=e.rotate,n=e.scale;return t.getViewport({scale:n,rotation:r})}}]),i}(y.PureComponent);function Ae(e){return y.default.createElement(_e.Consumer,null,(function(t){return y.default.createElement(be,r({},t,e))}))}be.propTypes={canvasRef:ne,onRenderError:b().func,onRenderSuccess:b().func,page:te.isRequired,renderInteractiveForms:b().bool,rotate:oe,scale:b().number};var xe=function(e){d(o,e);var r,n,i=(r=o,n=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=m(r);if(n){var i=m(this).constructor;e=Reflect.construct(t,arguments,i)}else e=t.apply(this,arguments);return g(this,e)});function o(){var e;u(this,o);for(var r=arguments.length,n=new Array(r),a=0;a<r;a++)n[a]=arguments[a];return v(f(e=i.call.apply(i,[this].concat(n))),"state",{svg:null}),v(f(e),"onRenderSuccess",(function(){e.renderer=null;var t=e.props,r=t.onRenderSuccess,n=t.page,i=t.scale;r&&r(G(n,i))})),v(f(e),"onRenderError",(function(t){if(!z(t)){q(t);var r=e.props.onRenderError;r&&r(t)}})),v(f(e),"renderSVG",(function(){var r=e.props.page;return e.renderer=r.getOperatorList(),e.renderer.then((function(n){var i=new t.SVGGraphics(r.commonObjs,r.objs);e.renderer=i.getSVG(n,e.viewport).then((function(t){e.setState({svg:t},e.onRenderSuccess)})).catch(e.onRenderError)})).catch(e.onRenderError)})),v(f(e),"drawPageOnContainer",(function(t){var r=e.state.svg;if(t&&r){t.firstElementChild||t.appendChild(r);var n=e.viewport,i=n.width,o=n.height;r.setAttribute("width",i),r.setAttribute("height",o)}})),e}return h(o,[{key:"componentDidMount",value:function(){this.renderSVG()}},{key:"render",value:function(){var e=this,t=this.viewport,r=t.width,n=t.height;return y.default.createElement("div",{className:"react-pdf__Page__svg",ref:function(t){return e.drawPageOnContainer(t)},style:{display:"block",backgroundColor:"white",overflow:"hidden",width:r,height:n,userSelect:"none"}})}},{key:"viewport",get:function(){var e=this.props,t=e.page,r=e.rotate,n=e.scale;return t.getViewport({scale:n,rotation:r})}}]),o}(y.PureComponent);function we(e){return y.default.createElement(_e.Consumer,null,(function(t){return y.default.createElement(xe,r({},t,e))}))}xe.propTypes={onRenderError:b().func,onRenderSuccess:b().func,page:te.isRequired,rotate:oe,scale:b().number};var Se=function(e){d(s,e);var t,r,n,i,o=(n=s,i=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=m(n);if(i){var r=m(this).constructor;e=Reflect.construct(t,arguments,r)}else e=t.apply(this,arguments);return g(this,e)});function s(){var e;u(this,s);for(var t=arguments.length,r=new Array(t),n=0;n<t;n++)r[n]=arguments[n];return v(f(e=o.call.apply(o,[this].concat(r))),"getElementWidth",(function(t){var r=f(e).sideways;return t.getBoundingClientRect()[r?"height":"width"]})),e}return h(s,[{key:"componentDidMount",value:function(){this.alignTextItem()}},{key:"componentDidUpdate",value:function(){this.alignTextItem()}},{key:"getFontData",value:(r=c(a().mark((function e(t){var r,n;return a().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return r=this.props.page,e.next=3,new Promise((function(e){r.commonObjs.get(t,e)}));case 3:return n=e.sent,e.abrupt("return",n);case 5:case"end":return e.stop()}}),e,this)}))),function(e){return r.apply(this,arguments)})},{key:"alignTextItem",value:(t=c(a().mark((function e(){var t,r,n,i,o,s,c,u,l,h,f;return a().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(t=this.item){e.next=3;break}return e.abrupt("return");case 3:return t.style.transform="",r=this.props,n=r.fontName,i=r.scale,o=r.width,t.style.fontFamily="".concat(n,", sans-serif"),e.next=8,this.getFontData(n);case 8:s=e.sent,c=s?s.fallbackName:"sans-serif",t.style.fontFamily="".concat(n,", ").concat(c),u=o*i,l=this.getElementWidth(t),h="scaleX(".concat(u/l,")"),(f=s?s.ascent:0)&&(h+=" translateY(".concat(100*(1-f),"%)")),t.style.transform=h,t.style.WebkitTransform=h;case 18:case"end":return e.stop()}}),e,this)}))),function(){return t.apply(this,arguments)})},{key:"render",value:function(){var e=this,t=this.fontSize,r=this.top,n=this.left,i=this.props,o=i.customTextRenderer,a=i.scale,s=i.str;return y.default.createElement("span",{ref:function(t){e.item=t},style:{height:"1em",fontFamily:"sans-serif",fontSize:"".concat(t*a,"px"),position:"absolute",top:"".concat(r*a,"px"),left:"".concat(n*a,"px"),transformOrigin:"left bottom",whiteSpace:"pre",pointerEvents:"all"}},o?o(this.props):s)}},{key:"unrotatedViewport",get:function(){var e=this.props,t=e.page,r=e.scale;return t.getViewport({scale:r})}},{key:"rotate",get:function(){var e=this.props,t=e.page;return e.rotate-t.rotate}},{key:"sideways",get:function(){return this.rotate%180!=0}},{key:"defaultSideways",get:function(){return this.unrotatedViewport.rotation%180!=0}},{key:"fontSize",get:function(){var e=this.props.transform,t=this.defaultSideways,r=fe(e,2),n=r[0],i=r[1];return t?i:n}},{key:"top",get:function(){var e=this.props.transform,t=this.unrotatedViewport,r=this.defaultSideways,n=fe(e,6),i=n[2],o=n[3],a=n[4],s=n[5],c=fe(t.viewBox,4),u=c[1],l=c[3];return r?a+i+u:l-(s+o)}},{key:"left",get:function(){var e=this.props.transform,t=this.unrotatedViewport,r=this.defaultSideways,n=fe(e,6),i=n[4],o=n[5],a=fe(t.viewBox,1)[0];return r?o-a:i-a}}]),s}(y.PureComponent);function Ee(e){return y.default.createElement(_e.Consumer,null,(function(t){return y.default.createElement(Se,r({},t,e))}))}Se.propTypes={customTextRenderer:b().func,fontName:b().string.isRequired,itemIndex:b().number.isRequired,page:te.isRequired,rotate:oe,scale:b().number,str:b().string.isRequired,transform:b().arrayOf(b().number).isRequired,width:b().number.isRequired};var Ce=function(e){d(o,e);var t,n,i=(t=o,n=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,r=m(t);if(n){var i=m(this).constructor;e=Reflect.construct(r,arguments,i)}else e=r.apply(this,arguments);return g(this,e)});function o(){var e;u(this,o);for(var t=arguments.length,r=new Array(t),n=0;n<t;n++)r[n]=arguments[n];return v(f(e=i.call.apply(i,[this].concat(r))),"state",{textItems:null}),v(f(e),"loadTextItems",c(a().mark((function t(){var r,n,i,o;return a().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return r=e.props.page,t.prev=1,n=(0,x.Z)(r.getTextContent()),e.runningTask=n,t.next=6,n.promise;case 6:i=t.sent,o=i.items,e.setState({textItems:o},e.onLoadSuccess),t.next=14;break;case 11:t.prev=11,t.t0=t.catch(1),e.onLoadError(t.t0);case 14:case"end":return t.stop()}}),t,null,[[1,11]])})))),v(f(e),"onLoadSuccess",(function(){var t=e.props.onGetTextSuccess,r=e.state.textItems;t&&t(r)})),v(f(e),"onLoadError",(function(t){e.setState({textItems:!1}),q(t);var r=e.props.onGetTextError;r&&r(t)})),e}return h(o,[{key:"componentDidMount",value:function(){if(!this.props.page)throw new Error("Attempted to load page text content, but no page was specified.");this.loadTextItems()}},{key:"componentDidUpdate",value:function(e){var t=this.props.page;e.page&&t!==e.page&&this.loadTextItems()}},{key:"componentWillUnmount",value:function(){H(this.runningTask)}},{key:"renderTextItems",value:function(){var e=this.state.textItems;return e?e.map((function(e,t){return y.default.createElement(Ee,r({key:t,itemIndex:t},e))})):null}},{key:"render",value:function(){var e=this.unrotatedViewport,t=this.rotate;return y.default.createElement("div",{className:"react-pdf__Page__textContent",style:{position:"absolute",top:"50%",left:"50%",width:"".concat(e.width,"px"),height:"".concat(e.height,"px"),color:"transparent",transform:"translate(-50%, -50%) rotate(".concat(t,"deg)"),WebkitTransform:"translate(-50%, -50%) rotate(".concat(t,"deg)"),pointerEvents:"none"}},this.renderTextItems())}},{key:"unrotatedViewport",get:function(){var e=this.props,t=e.page,r=e.scale;return t.getViewport({scale:r})}},{key:"rotate",get:function(){var e=this.props,t=e.page;return e.rotate-t.rotate}}]),o}(y.PureComponent);function ke(e){return y.default.createElement(_e.Consumer,null,(function(t){return y.default.createElement(Ce,r({},t,e))}))}Ce.propTypes={onGetTextError:b().func,onGetTextSuccess:b().func,page:te.isRequired,rotate:oe,scale:b().number};var Pe=function(e){d(o,e);var r,n,i=(r=o,n=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=m(r);if(n){var i=m(this).constructor;e=Reflect.construct(t,arguments,i)}else e=t.apply(this,arguments);return g(this,e)});function o(){var e;u(this,o);for(var t=arguments.length,r=new Array(t),n=0;n<t;n++)r[n]=arguments[n];return v(f(e=i.call.apply(i,[this].concat(r))),"state",{annotations:null}),v(f(e),"loadAnnotations",c(a().mark((function t(){var r,n,i;return a().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return r=e.props.page,t.prev=1,n=(0,x.Z)(r.getAnnotations()),e.runningTask=n,t.next=6,n.promise;case 6:i=t.sent,e.setState({annotations:i},e.onLoadSuccess),t.next=13;break;case 10:t.prev=10,t.t0=t.catch(1),e.onLoadError(t.t0);case 13:case"end":return t.stop()}}),t,null,[[1,10]])})))),v(f(e),"onLoadSuccess",(function(){var t=e.props.onGetAnnotationsSuccess,r=e.state.annotations;t&&t(r)})),v(f(e),"onLoadError",(function(t){e.setState({annotations:!1}),q(t);var r=e.props.onGetAnnotationsError;r&&r(t)})),v(f(e),"onRenderSuccess",(function(){var t=e.props.onRenderAnnotationLayerSuccess;t&&t()})),v(f(e),"onRenderError",(function(t){q(t);var r=e.props.onRenderAnnotationLayerError;r&&r(t)})),e}return h(o,[{key:"componentDidMount",value:function(){if(!this.props.page)throw new Error("Attempted to load page annotations, but no page was specified.");this.loadAnnotations()}},{key:"componentDidUpdate",value:function(e){var t=this.props,r=t.page,n=t.renderInteractiveForms;(e.page&&r!==e.page||n!==e.renderInteractiveForms)&&this.loadAnnotations()}},{key:"componentWillUnmount",value:function(){H(this.runningTask)}},{key:"renderAnnotationLayer",value:function(){var e=this.state.annotations;if(e){var r=this.props,n=r.linkService,i=r.page,o=r.renderInteractiveForms,a=this.viewport.clone({dontFlip:!0}),s={annotations:e,div:this.annotationLayer,linkService:n,page:i,renderInteractiveForms:o,viewport:a};this.annotationLayer.innerHTML="";try{t.AnnotationLayer.render(s),this.onRenderSuccess()}catch(e){this.onRenderError(e)}}}},{key:"render",value:function(){var e=this;return y.default.createElement("div",{className:"react-pdf__Page__annotations annotationLayer",ref:function(t){e.annotationLayer=t}},this.renderAnnotationLayer())}},{key:"viewport",get:function(){var e=this.props,t=e.page,r=e.rotate,n=e.scale;return t.getViewport({scale:n,rotation:r})}}]),o}(y.PureComponent);Pe.propTypes={linkService:ee.isRequired,onGetAnnotationsError:b().func,onGetAnnotationsSuccess:b().func,onRenderAnnotationLayerError:b().func,onRenderAnnotationLayerSuccess:b().func,page:te,renderInteractiveForms:b().bool,rotate:oe,scale:b().number};var Re=function(e){return y.default.createElement(S.Consumer,null,(function(t){return y.default.createElement(_e.Consumer,null,(function(n){return y.default.createElement(Pe,r({},t,n,e))}))}))};function Te(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function Oe(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?Te(Object(r),!0).forEach((function(t){v(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):Te(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}var Le=function(e){d(o,e);var t,n,i=(t=o,n=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,r=m(t);if(n){var i=m(this).constructor;e=Reflect.construct(r,arguments,i)}else e=r.apply(this,arguments);return g(this,e)});function o(){var e;u(this,o);for(var t=arguments.length,r=new Array(t),n=0;n<t;n++)r[n]=arguments[n];return v(f(e=i.call.apply(i,[this].concat(r))),"state",{page:null}),v(f(e),"onLoadSuccess",(function(){var t=e.props,r=t.onLoadSuccess,n=t.registerPage,i=e.state.page;r&&r(G(i,e.scale)),n&&n(e.pageIndex,e.ref)})),v(f(e),"onLoadError",(function(t){q(t);var r=e.props.onLoadError;r&&r(t)})),v(f(e),"loadPage",c(a().mark((function t(){var r,n,i,o;return a().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:if(r=e.props.pdf,n=e.getPageNumber()){t.next=4;break}return t.abrupt("return");case 4:return e.setState((function(e){return e.page?{page:null}:null})),t.prev=5,i=(0,x.Z)(r.getPage(n)),e.runningTask=i,t.next=10,i.promise;case 10:o=t.sent,e.setState({page:o},e.onLoadSuccess),t.next=18;break;case 14:t.prev=14,t.t0=t.catch(5),e.setState({page:!1}),e.onLoadError(t.t0);case 18:case"end":return t.stop()}}),t,null,[[5,14]])})))),e}return h(o,[{key:"componentDidMount",value:function(){if(!this.props.pdf)throw new Error("Attempted to load a page, but no document was specified.");this.loadPage()}},{key:"componentDidUpdate",value:function(e){var t=this.props.pdf;if(e.pdf&&t!==e.pdf||this.getPageNumber()!==this.getPageNumber(e)){var r=this.props.unregisterPage;r&&r(this.getPageIndex(e)),this.loadPage()}}},{key:"componentWillUnmount",value:function(){var e=this.props.unregisterPage;e&&e(this.pageIndex),H(this.runningTask)}},{key:"getPageIndex",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:this.props;return F(e.pageNumber)?e.pageNumber-1:F(e.pageIndex)?e.pageIndex:null}},{key:"getPageNumber",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:this.props;return F(e.pageNumber)?e.pageNumber:F(e.pageIndex)?e.pageIndex+1:null}},{key:"renderMainLayer",value:function(){var e=this.props,t=e.canvasRef;switch(e.renderMode){case"none":return null;case"svg":return y.default.createElement(we,{key:"".concat(this.pageKeyNoScale,"_svg")});case"canvas":default:return y.default.createElement(Ae,{key:"".concat(this.pageKey,"_canvas"),canvasRef:t})}}},{key:"renderTextLayer",value:function(){return this.props.renderTextLayer?y.default.createElement(ke,{key:"".concat(this.pageKey,"_text")}):null}},{key:"renderAnnotationLayer",value:function(){return this.props.renderAnnotationLayer?y.default.createElement(Re,{key:"".concat(this.pageKey,"_annotations")}):null}},{key:"renderChildren",value:function(){var e=this.props.children;return y.default.createElement(_e.Provider,{value:this.childContext},this.renderMainLayer(),this.renderTextLayer(),this.renderAnnotationLayer(),e)}},{key:"renderContent",value:function(){var e=this.pageNumber,t=this.props.pdf,r=this.state.page;if(!e){var n=this.props.noData;return y.default.createElement(E,{type:"no-data"},"function"==typeof n?n():n)}if(null===t||null===r){var i=this.props.loading;return y.default.createElement(E,{type:"loading"},"function"==typeof i?i():i)}if(!1===t||!1===r){var o=this.props.error;return y.default.createElement(E,{type:"error"},"function"==typeof o?o():o)}return this.renderChildren()}},{key:"render",value:function(){var e=this.pageNumber,t=this.props,n=t.className,i=t.inputRef;return y.default.createElement("div",r({className:w("react-pdf__Page",n),"data-page-number":e,ref:ye(i,this.ref),style:{position:"relative"}},this.eventProps),this.renderContent())}},{key:"childContext",get:function(){var e=this.state.page;if(!e)return{};var t=this.props;return{customTextRenderer:t.customTextRenderer,onGetAnnotationsError:t.onGetAnnotationsError,onGetAnnotationsSuccess:t.onGetAnnotationsSuccess,onGetTextError:t.onGetTextError,onGetTextSuccess:t.onGetTextSuccess,onRenderAnnotationLayerError:t.onRenderAnnotationLayerError,onRenderAnnotationLayerSuccess:t.onRenderAnnotationLayerSuccess,onRenderError:t.onRenderError,onRenderSuccess:t.onRenderSuccess,page:e,renderInteractiveForms:t.renderInteractiveForms,rotate:this.rotate,scale:this.scale}}},{key:"pageIndex",get:function(){return this.getPageIndex()}},{key:"pageNumber",get:function(){return this.getPageNumber()}},{key:"rotate",get:function(){var e=this.props.rotate;if(F(e))return e;var t=this.state.page;return t?t.rotate:null}},{key:"scale",get:function(){var e=this.state.page;if(!e)return null;var t=this.props,r=t.scale,n=t.width,i=t.height,o=this.rotate,a=1,s=null===r?1:r;if(n||i){var c=e.getViewport({scale:1,rotation:o});a=n?n/c.width:i/c.height}return s*a}},{key:"eventProps",get:function(){var e=this;return(0,A.ZP)(this.props,(function(){var t=e.state.page;return t?G(t,e.scale):t}))}},{key:"pageKey",get:function(){var e=this.state.page;return"".concat(e.pageIndex,"@").concat(this.scale,"/").concat(this.rotate)}},{key:"pageKeyNoScale",get:function(){var e=this.state.page;return"".concat(e.pageIndex,"/").concat(this.rotate)}}]),o}(y.PureComponent);Le.defaultProps={error:"Failed to load the page.",loading:"Loading page…",noData:"No page specified.",renderAnnotationLayer:!0,renderInteractiveForms:!1,renderMode:"canvas",renderTextLayer:!0,scale:1};var Fe=b().oneOfType([b().func,b().node]);function Ie(e,t){return y.default.createElement(S.Consumer,null,(function(n){return y.default.createElement(Le,r({ref:t},n,e))}))}Le.propTypes=Oe(Oe({},J),{},{children:b().node,className:Z,customTextRenderer:b().func,error:Fe,height:b().number,inputRef:ne,loading:Fe,noData:Fe,onGetTextError:b().func,onGetTextSuccess:b().func,onLoadError:b().func,onLoadSuccess:b().func,onRenderError:b().func,onRenderSuccess:b().func,pageIndex:function(e,t,r){var n=e[t],o=e.pageNumber,a=e.pdf;if(!L(a))return null;if(L(n)){if("number"!=typeof n)return new Error("`".concat(t,"` of type `").concat(i(n),"` supplied to `").concat(r,"`, expected `number`."));if(n<0)return new Error("Expected `".concat(t,"` to be greater or equal to 0."));var s=a.numPages;if(n+1>s)return new Error("Expected `".concat(t,"` to be less or equal to ").concat(s-1,"."))}else if(!L(o))return new Error("`".concat(t,"` not supplied. Either pageIndex or pageNumber must be supplied to `").concat(r,"`."));return null},pageNumber:function(e,t,r){var n=e[t],o=e.pageIndex,a=e.pdf;if(!L(a))return null;if(L(n)){if("number"!=typeof n)return new Error("`".concat(t,"` of type `").concat(i(n),"` supplied to `").concat(r,"`, expected `number`."));if(n<1)return new Error("Expected `".concat(t,"` to be greater or equal to 1."));var s=a.numPages;if(n>s)return new Error("Expected `".concat(t,"` to be less or equal to ").concat(s,"."))}else if(!L(o))return new Error("`".concat(t,"` not supplied. Either pageIndex or pageNumber must be supplied to `").concat(r,"`."));return null},pdf:re,registerPage:b().func,renderAnnotationLayer:b().bool,renderInteractiveForms:b().bool,renderMode:ie,renderTextLayer:b().bool,rotate:oe,scale:b().number,unregisterPage:b().func,width:b().number});var Me=y.default.forwardRef(Ie);O&&W("You are running React-PDF from your local file system. PDF.js Worker may fail to load due to browser's security policies. If you're on Google Chrome, you can use --allow-file-access-from-files flag for debugging purposes."),t.GlobalWorkerOptions.workerSrc="pdf.worker.js";var Ne=__webpack_require__(4141);__webpack_require__(8594),__webpack_require__(5666),t&&(t.GlobalWorkerOptions.workerSrc="//cdnjs.cloudflare.com/ajax/libs/pdf.js/"+t.version+"/pdf.worker.js");var De="https://ojisan-toybox.github.io/universal-pdf-component/example.pdf";(0,e.sY)((0,e.h)((function(){return(0,e.h)("div",null,(0,e.h)("h1",null,"iframe"),(0,e.h)("iframe",{src:De,scrolling:"no"},(0,e.h)("p",null,"It appears your web browser doesn't support iframes.")),(0,e.h)("h1",null,"object"),(0,e.h)("object",{data:De,type:"application/pdf"},(0,e.h)("p",null,"It appears you don't have Adobe Reader or PDF support in this web browser. ",(0,e.h)("a",{href:De},"Click here to download the PDF"),". Or"," ",(0,e.h)("a",{href:"http://get.adobe.com/reader/",target:"_blank"},"click here to install Adobe Reader"),"."),(0,e.h)("embed",{src:De,type:"application/pdf"})),(0,e.h)("h1",null,"object and embed"),(0,e.h)("object",{data:De,type:"application/pdf"},(0,e.h)("p",null,"It appears you don't have Adobe Reader or PDF support in this web browser. ",(0,e.h)("a",{href:De},"Click here to download the PDF"),". Or"," ",(0,e.h)("a",{href:"http://get.adobe.com/reader/",target:"_blank"},"click here to install Adobe Reader"),"."),(0,e.h)("embed",{src:De,type:"application/pdf"})),(0,e.h)("h1",null,"embed"),(0,e.h)("embed",{width:"500",height:"375",src:De,type:"application/pdf"}),(0,e.h)("h1",null,"google drive"),(0,e.h)("embed",{src:"https://drive.google.com/viewerng/\nviewer?embedded=true&url="+De,width:"500",height:"375"}),(0,e.h)("h1",null,"react-pdf"),(0,e.h)(ue,{file:De},(0,e.h)(Me,{pageNumber:1})),(0,e.h)("h1",null,"react-pd-viewer"),(0,e.h)(Ne.Viewer,{fileUrl:De}))}),null),document.body)}()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,